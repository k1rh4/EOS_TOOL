(data (i32.const 8192) " &&\00Assertion failed: %s (%s: %s: %d)\n\00-+   0X0x\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8250) "&&\00stoi\00(null)\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8351) "Invalid hex character\00")
(data (i32.const 8373) "0123456789abcdef\00-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 8409) "invalid first pos\00inf\00")
(data (i32.const 8431) "parse memo error\00stoull\00INF\00")
(data (i32.const 8459) "invalid sha256\00nan\00")
(data (i32.const 8480) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8736) "carry == 0\00NAN\00")
(data (i32.const 8751) "utils.hpp\00.\00")
(data (i32.const 8763) "DecodeBase58\00")
(data (i32.const 8776) "No delimiter in signature\00")
(data (i32.const 8802) "SIG\00")
(data (i32.const 8806) "Signature Key has invalid prefix\00")
(data (i32.const 8839) "No curve in signature\00%lu\00")
(data (i32.const 8865) "K1\00")
(data (i32.const 8868) "R1\00%llu\00")
(data (i32.const 8876) "Incorrect curve\00")
(data (i32.const 8892) "Signature has no data\00")
(data (i32.const 8914) "Decode signature failed\00")
(data (i32.const 8938) "Invalid signature\00")
(data (i32.const 8956) "Signature checksum mismatch\00")
(data (i32.const 8984) "EOS\00")
(data (i32.const 8988) "Decode public key failed\00")
(data (i32.const 9013) "Invalid public key\00")
(data (i32.const 9032) "Public key checksum mismatch\00")
(data (i32.const 17792) "EOS5P6MpnXSqGTexpX51F7Rz1VzNZjHZzJAp2DQr7mzyPU42xreqB\00")
(data (i32.const 17846) "transfer\00: no conversion\00")
(data (i32.const 17871) "eosio.token\00: out of range\00")
(data (i32.const 17898) "uudogeetoken\00")
(data (i32.const 17911) "uudogeeadmin\00")
(data (i32.const 17924) "In emergency state!\00")
(data (i32.const 17944) "cron\00")
(data (i32.const 17949) "L\00")
(data (i32.const 17951) "W\00")
(data (i32.const 17953) "payout overflow or not positive!\00")
(data (i32.const 17986) "uudogeehouse\00")
(data (i32.const 17999) "active\00")
(data (i32.const 18006) "uureceipt\00")
(data (i32.const 18016) "mining! uugame dograce\00")
(data (i32.const 18039) "minedsum overflow!\00")
(data (i32.const 18058) "UUDOG\00")
(data (i32.const 18064) "ref amount overflow!\00")
(data (i32.const 18085) "uugamesreser\00")
(data (i32.const 18098) " Human only! \00")
(data (i32.const 18112) "stake\00")
(data (i32.const 18118) "invalid memo\00")
(data (i32.const 18131) "no uu game id\00")
(data (i32.const 18145) " please use uudog token \00")
(data (i32.const 18170) "uudogeestake\00")
(data (i32.const 18183) "uudogeeadmin to uudogeestake all stake asset\00")
(data (i32.const 18228) "uugame\00")
(data (i32.const 18235) " please use eos or uudog token \00")
(data (i32.const 18267) "referrer account does not exist\00")
(data (i32.const 18299) "referrer can not be self\00")
(data (i32.const 18324) "Non-existent dog\00")
(data (i32.const 18341) "betamout overflow or not positive!\00")
(data (i32.const 18376) "uudogeeadmin to uudogeehouse all bet asset\00")
(data (i32.const 18419) "bprowin overflow!\00")
(data (i32.const 18437) "uudogeegroup\00")
(data (i32.const 18450) "uudogeehouse to uudogeegroup banker probability win\00")
(data (i32.const 18502) "bprowintopool overflow!\00")
(data (i32.const 18526) "uudogeegroup back to uugamesreser 40/100 banker probability win\00")
(data (i32.const 18590) "not find lucky record!\00")
(data (i32.const 18613) "User names do not match!\00")
(data (i32.const 18638) "not a uudog palyer!\00")
(data (i32.const 18658) "lucky draw times over!\00")
(data (i32.const 18681) "luckytimes overflow!\00")
(data (i32.const 18702) "uugames2draw\00")
(data (i32.const 18715) "uudog lucky draw win!\00")
(data (i32.const 18737) "luckydraw\00")
(data (i32.const 18747) "lucky draw interval less than one hour!\00")
(data (i32.const 18787) "luckyreveal\00")
(data (i32.const 18799) " share out bonus in progress,please try later\00")
(data (i32.const 18845) "you did not staked UU.\00")
(data (i32.const 18868) "you did not redeemed UU.\00")
(data (i32.const 18893) "invalid quantity\00")
(data (i32.const 18910) "must transfer positive quantity\00")
(data (i32.const 18942) "memo has more than 256 bytes\00")
(data (i32.const 18971) "not init yet!\00")
(data (i32.const 18985) "id not found!\00")
(data (i32.const 18999) "bonus \00")
(data (i32.const 19006) " \00")
(data (i32.const 19008) "have bonus recently!\00")
(data (i32.const 19029) "last_hour_bonus overflow !\00")
(data (i32.const 19056) "last_group_poll overflow !\00")
(data (i32.const 19083) "transfer uudogee2pool amount overflow !\00")
(data (i32.const 19123) "uudogee2pool\00")
(data (i32.const 19136) "uudogeegroup transfer hour bonus to uudogee2pool!\00")
(data (i32.const 19186) "transfer uugamesgroup amount overflow !\00")
(data (i32.const 19226) "uugamesgroup\00")
(data (i32.const 19239) "uudogeegroup transfer remain to uugamesgroup!\00")
(data (i32.const 19285) "uudog ranking reward!\00")
(data (i32.const 19307) "ranking player not found\00")
(data (i32.const 19332) "uugamesrefer\00")
(data (i32.const 19345) "sorry, no bonus for you.\00")
(data (i32.const 19370) "already drawed.\00")
(data (i32.const 19386) "trandfer bonus amount overflow !\00")
(data (i32.const 19419) "draw bonus\00")
(data (i32.const 19430) "sorry, no uu for you.\00")
(data (i32.const 19452) "already redeemed.\00")
(data (i32.const 19470) "More than the staked sum\00")
(data (i32.const 19495) "totalstaked amount overflow !\00")
(data (i32.const 19525) "to account does not exist\00")
(data (i32.const 19551) "redeem amount overflow !\00")
(data (i32.const 19576) "redeem UUDOG\00")
(data (i32.const 19589) "set a wrong state!\00")
(data (i32.const 19608) "have init already!\00")
(data (i32.const 19627) "string is too long to be a valid name\00")
(data (i32.const 19665) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 19732) "character is not in allowed character set for names\00")
(data (i32.const 19784) "5KJmkA3LA1d7nKwxjGAHpRUgiArJiF3Vy4g7jBcb68AxAk8A7WJ\00")
(data (i32.const 19836) "bet not found\00")
(data (i32.const 19850) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 19901) "error reading iterator\00")
(data (i32.const 19924) "read\00")
(data (i32.const 19929) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 19978) "invalid symbol name\00")
(data (i32.const 19998) "cannot increment end iterator\00")
(data (i32.const 20028) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 20087) "fund pool overdraw\00")
(data (i32.const 20106) "cannot create objects in table of another contract\00")
(data (i32.const 20157) "write\00")
(data (i32.const 20163) "attempt to subtract asset with different symbol\00")
(data (i32.const 20211) "subtraction underflow\00")
(data (i32.const 20233) "subtraction overflow\00")
(data (i32.const 20254) "bet id:\00")
(data (i32.const 20262) " player: \00")
(data (i32.const 20272) " winner! uugame dograce\00")
(data (i32.const 20296) "\e0O\00\00\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\18\00\00\00\ac$\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 20448) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 20481) "cannot pass end iterator to modify\00")
(data (i32.const 20516) "object passed to modify is not in multi_index\00")
(data (i32.const 20562) "cannot modify objects in table of another contract\00")
(data (i32.const 20613) "updater cannot change primary key when modifying an object\00")
(data (i32.const 20672) "issue_token overflow!\00")
(data (i32.const 20694) "issue\00")
(data (i32.const 20700) "string is too long to be a valid symbol_code\00")
(data (i32.const 20745) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 20798) " referral reward! uugame dograce\00")
(data (i32.const 20831) "cannot pass end iterator to erase\00")
(data (i32.const 20865) "object passed to erase is not in multi_index\00")
(data (i32.const 20910) "cannot erase objects in table of another contract\00")
(data (i32.const 20960) "attempt to remove object that was not in multi_index\00")
(data (i32.const 21013) "get_action size failed\00")
(data (i32.const 21036) "get_action failed\00")
(data (i32.const 21054) "get\00")
(data (i32.const 21058) "no dog id\00")
(data (i32.const 21068) "no user seed\00")
(data (i32.const 21081) "no sys seed hash\00")
(data (i32.const 21098) "no expiration\00")
(data (i32.const 21112) "no signature\00")
(data (i32.const 21125) "Over the top bet number!\00")
(data (i32.const 21150) "quantity invalid\00")
(data (i32.const 21167) "offered overflow, expected earning is greater than the maximum bonus\00")
(data (i32.const 21236) "Non-existent token\00")
(data (i32.const 21255) "transfer quantity must be greater than minimum\00")
(data (i32.const 21302) "seed hash expired\00")
(data (i32.const 21320) "hash duplicate\00")
(data (i32.const 21335) "-\00")
(data (i32.const 21337) "attempt to add asset with different symbol\00")
(data (i32.const 21380) "addition underflow\00")
(data (i32.const 21399) "addition overflow\00")
(data (i32.const 21417) ":\00")
(data (i32.const 21419) "-%lld.%s %s\00")
(data (i32.const 21431) "%lld.%s %s\00")
(data (i32.const 21442) "available_stake_uu overflow\00")
(data (i32.const 21470) "backed_stake_uu overflow\00")
(data (i32.const 21495) "total_bonus_eos overflow\00")
(data (i32.const 21520) "available_bonus_eos overflow\00")
(data (i32.const 21549) "backed_bonus_eos overflow\00")
(data (i32.const 21575) "ontheway_stake_uu overflow\00")
(data (i32.const 21602) "expect_bonus_eos overflow\00")
(data (i32.const 21628) "next primary key in table is at autoincrement limit\00")
(data (i32.const 21680) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 21734) "cannot decrement iterator at beginning of table\00")
(data (i32.const 21782) "unable to find key\00")
(data (i32.const 21804) "<\00\00\00\n\00\00\00\1e\00\00\00")
(data (i32.const 21824) "\c0\'\t\00\00\00\00\00\a0\86\01\00\00\00\00\00@\0d\03\00\00\00\00\00 N\00\00\00\00\00\00\808\01\00\00\00\00\00")
(data (i32.const 21872) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 21952) "PO\00\00")
(data (i32.const 21968) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 22064) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 23872) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 24336) "0123456789ABCDEF")
(data (i32.const 24352) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$4 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$5 (result i32)))
(import "env" "read_action_data" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$8 (param i64)))
(import "env" "is_account" (func $fimport$9 (param i64) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "current_receiver" (func $fimport$12 (result i64)))
(import "env" "db_update_i64" (func $fimport$13 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$14 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$15 (param i32 i64 i32)))
(import "env" "db_next_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "require_auth2" (func $fimport$19 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$20 (param i64)))
(import "env" "eosio_exit" (func $fimport$21 (param i32)))
(import "env" "assert_sha256" (func $fimport$22 (param i32 i32 i32)))
(import "env" "send_deferred" (func $fimport$23 (param i32 i64 i32 i32 i32)))
(import "env" "get_action" (func $fimport$24 (param i32 i32 i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$25 (param i32 i32 i32)))
(import "env" "db_idx64_upperbound" (func $fimport$26 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$27 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$28 (param i32 i32 i32 i32 i32)))
(import "env" "prints" (func $fimport$29 (param i32)))
(import "env" "printn" (func $fimport$30 (param i64)))
(import "env" "prints_l" (func $fimport$31 (param i32 i32)))
(import "env" "db_idx64_next" (func $fimport$32 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$33 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$34 (param i32)))
(import "env" "abort" (func $fimport$35))
(import "env" "db_idx64_remove" (func $fimport$36 (param i32)))
(import "env" "db_idx64_store" (func $fimport$37 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$38 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$39 (param i64 i64 i64) (result i32)))
(import "env" "__unordtf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$44 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$46 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$47 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$48 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$49 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$50 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$51 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$52 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$53 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$54 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$55 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$56 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$57 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$58 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $102))
(export "_Znwj" (func $166))
(export "_ZdlPv" (func $168))
(export "_Znaj" (func $167))
(export "_ZdaPv" (func $169))
(export "_ZnwjSt11align_val_t" (func $170))
(export "_ZnajSt11align_val_t" (func $171))
(export "_ZdlPvSt11align_val_t" (func $172))
(export "_ZdaPvSt11align_val_t" (func $173))
(table $0 25 25 anyfunc)
(elem (i32.const 1) $16 $18 $20 $22 $24 $26 $28 $29 $30 $32 $34 $35 $36 $37 $38 $40 $42 $43 $11 $208 $210 $212 $213 $214)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 24609))
(global $global$2 i32 (i32.const 24609))


int_32 .FUNC $220 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL $219($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

void .FUNC $174 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL $197(int_32(($3 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$3 = *($0 + [1])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$4 }
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$3 = [0]
	
.LOOP $label$5:
	$4 = ($0 + $3)
	$5 = ($3 + [1])
	$3 = $5
	if ( ((int_32)*(($4 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$4 = ($0 + $5)
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$4 = $0
	
.LABEL $label$1
	$0 = ((uint_32)((int_32)CALL $237($4) * (int_32)[733]) / (uint_32)[1000])
	$6 = ($0 + [1])
	$7 = CALL _Znwj($6)
	$8 = ($7 + $0)
	$0 = [0]
	
.LOOP $label$6:
	*(($7 + $0)) = [0]
	$0 = ($0 + [1])
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$17 }
	$3 = [0]
	
.LOOP $label$18:
	$9 = $3
	$10 = $4
	if ( CALL $197(int_32(($0 << [24]) >> [24])) ){ goto $label$16 }
	$0 = *($10)
	$11 = *(($0 + [8480]))
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$0 != (int_32)[49]) ){ goto $label$20 }
	$3 = [0]
	if ( ($9 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$3 = [0]
	$0 = $8
	
.LOOP $label$22:
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$21 }
	$4 = (((int_32)*($0) * (int_32)[58]) + $11)
	*($0) = $4
	$3 = ($3 + [1])
	$0 = ($0 + [-1])
	$11 = ((int_32)$4 / (int_32)[256])
	if ( ((uint_32)($4 + [255]) > (uint_32)[510]) ){ goto $label$22 }
	if ( ($3 <= $9) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$21
	if ( $11 ){ goto $label$9 }
	
.LABEL $label$19
	$4 = ($10 + [1])
	$0 = *($10 + [1])
	if ( $0 ){ goto $label$18 }
	goto $label$15 
	
.LABEL $label$17
	$3 = [0]
	goto $label$15 
	
.LABEL $label$16
	$3 = $9
	$4 = $10
	
.LABEL $label$15
	$9 = ($7 + $6)
	$0 = ($4 + [-1])
	
.LOOP $label$23:
	$0 = ($0 + [1])
	if ( CALL $197(*($0)) ){ goto $label$23 }
	$4 = [0]
	if ( *($0) ){ goto $label$13 }
	$4 = ($7 + ($6 - $3))
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$12 }
	$0 = $4
	if ( *($4) ){ goto $label$10 }
	$6 = ([0] - $3)
	$0 = [-1]
	$11 = $8
	
.LOOP $label$24:
	$4 = $11
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$11 }
	$0 = ($0 + [-1])
	$11 = ($4 + [1])
	if ( (*((($4 + $6) + [2])) == 0) ){ goto $label$24 }
	$0 = (($4 - $3) + [2])
	$4 = (($11 - $3) + [1])
	goto $label$10 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$12
	$0 = $9
	goto $label$10 
	
.LABEL $label$11
	$0 = (($4 - $3) + [2])
	$4 = $0
	
.LABEL $label$10
	$3 = (($9 - $4) + $5)
	$11 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $11) >= (uint_32)$3) ){ goto $label$25 }
	$4 = *($1 + [4])
	$4 = *($1)
	$11 = (*($1 + [4]) - $4)
	$10 = CALL _Znwj($3)
	$12 = ($10 + ($4 - $11))
	$6 = ($12 - $11)
	$3 = ($10 + $3)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$26 }
	CALL memcpy($6, $4, $11)
	$4 = *($1)
	
.LABEL $label$26
	*($1) = $6
	*(($1 + [4])) = $12
	*(($1 + [8])) = $3
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	*($2 + [15]) = [0]
	CALL $7($1, $5, ($2 + [15]))
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$27 }
	$6 = ($8 + [1])
	$9 = ($1 + [8])
	$4 = ($1 + [4])
	
.LOOP $label$28:
	$3 = ($0 + [1])
	$11 = *($4)
	if ( ((int_32)$11 == (int_32)*($9)) ){ goto $label$29 }
	*($11) = *($0)
	*($4) = (*($4) + [1])
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL $8($1, $0)
	$0 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$28 }
	
.LABEL $label$27
	$4 = [1]
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $199([8736], [8751], [162], [8763])
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	(unreachable)
	return $4
}

int_32 .FUNC $176 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $177 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $241(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9076])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $241(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $247($0)
	
.LABEL $label$1
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL _ZdlPv($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $4)
	$5 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($4) + [1])
	*($4) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $196($0)
}

int_32 .FUNC $246 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $244([9396], $1)
	CALL memset($0, [0], $1)
	return $0
}

void .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_64 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0)
	$3 = ($2 & [1])
	$4 = ( *($0 + [8]) ? ($0 + [1]) : $3 )
	$3 = ( *($0 + [4]) ? uint_32($2 >> [1]) : $3 )
	if ( ($3 <= [4]) ){ goto $label$4 }
	$5 = ($3 + [-4])
	$0 = $4
	$2 = $3
	
.LOOP $label$5:
	CALL memcpy(($1 + [12]), $0, [4])
	$6 = ((int_32)*($1 + [12]) * (int_32)[1540483477])
	$2 = ((int_32)((int_32)((int_32)uint_32($6 >> [24]) ^ (int_32)$6) * (int_32)[1540483477]) ^ (int_32)((int_32)$2 * (int_32)[1540483477]))
	$0 = ($0 + [4])
	$3 = ($3 + [-4])
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$5 }
	$0 = ($5 & [-4])
	$4 = (($4 + $0) + [4])
	$3 = ($5 - $0)
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$2 = $3
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$3 != (int_32)[3]) ){ goto $label$1 }
	$2 = ((int_32)(*($4 + [2]) << [16]) ^ (int_32)$2)
	
.LABEL $label$6
	$2 = ((int_32)(*($4 + [1]) << [8]) ^ (int_32)$2)
	
.LABEL $label$2
	$2 = ((int_32)((int_32)$2 ^ (int_32)*($4)) * (int_32)[1540483477])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	$0 = ((int_32)((int_32)uint_32($2 >> [13]) ^ (int_32)$2) * (int_32)[1540483477])
	return (CASTING uint_64)(uint_32 ((int_32)uint_32($0 >> [15]) ^ (int_32)$0))
}

int_32 .FUNC $221 (int_32 $0, int_32 $1)
{
	return $0
}

int_32 .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL $2(((int_32)*($3) != (int_32)[-1]), [8409], [20000])
	$2 = CALL $186($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $176($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $2(((int_32)*($4) ^ (int_32)[1]), [8431], [20000])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $178($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

void .FUNC $127 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [19850])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $128($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [19850])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $129($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($4 + [16])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL $2([0], [8351], [20030])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL $2([0], [8351], [20030])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

void .FUNC $189 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $121($1, $0, [17883])
	CALL $194()
	(unreachable)
}

int_32 .FUNC $188 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $237([8253])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8253], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $198())
	*(CALL $198()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $234($4, ($3 + [12]), $2)
	$5 = CALL $198()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $189($3)
	
.LABEL $label$1
	CALL $190($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$9 = ($global$0 - [112])
	$global$0 = $9
	$10 = *($1)
	if ( ($10 & [1]) ){ goto $label$6 }
	$10 = uint_32($10 >> [1])
	$11 = ($1 + [1])
	$12 = ($11 + $10)
	if ( $10 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$10 = *($1 + [4])
	$11 = *($1 + [8])
	$12 = ($11 + $10)
	if ( ($10 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $197(*($11)) ){ goto $label$4 }
	$11 = ($11 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$7 }
	$11 = $12
	$10 = [1]
	$13 = *($1)
	if ( (($13 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$8 }
	$10 = ($11 + [1])
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $197(*($10)) == 0) ){ goto $label$10 }
	$10 = ($10 + [1])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($11) = *($10)
	$11 = ($11 + [1])
	$10 = ($10 + [1])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$9 }
	
.LABEL $label$8
	$10 = [1]
	$13 = *($1)
	if ( ($13 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$12 = ($1 + $10)
	$10 = ($12 + uint_32($13 >> $10))
	goto $label$1 
	
.LABEL $label$2
	$12 = *($1 + [8])
	$10 = ($12 + *($1 + [4]))
	
.LABEL $label$1
	CALL $185($1, ($11 - $12), ($10 - $11))
	$12 = *($1)
	if ( ($12 & [1]) ){ goto $label$13 }
	$11 = ($1 + [1])
	$13 = [0]
	$10 = [0]
	$12 = uint_32($12 >> [1])
	if ( $12 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$11 = *($1 + [8])
	$13 = [0]
	$10 = [0]
	$12 = *($1 + [4])
	if ( ($12 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$10 = [0]
	
.LOOP $label$14:
	$10 = ($10 + ((int_32)*($11) == (int_32)[45]))
	$11 = ($11 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$14 }
	$10 = ((int_32)$10 == (int_32)[7])
	
.LABEL $label$11
	CALL $2($10, [18118], [20000])
	*($9 + [104]) = $13
	*($9 + [96]) = (int_64)0
	*($9 + [108]) = [45]
	*($9 + [16]) = $13
	*($9 + [95]) = [1]
	*($9 + [108]) = (CALL $5($1, ($9 + [96]), ($9 + [108]), ($9 + [16]), ($9 + [95])) + [1])
	*($9 + [16]) = [45]
	*($9 + [95]) = [1]
	*($9 + [108]) = CALL $5($1, ($9 + [96]), ($9 + [16]), ($9 + [108]), ($9 + [95]))
	$11 = *($9 + [96])
	CALL $2(((int_32)( *($9 + [100]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)$13), [18131], [20000])
	*($2) = CALL $188(($9 + [96]), $13, [10])
	*($9 + [16]) = [45]
	*($9 + [108]) = (*($9 + [108]) + [1])
	*($9 + [95]) = [1]
	*($9 + [108]) = CALL $5($1, ($9 + [96]), ($9 + [16]), ($9 + [108]), ($9 + [95]))
	$11 = *($9 + [96])
	CALL $2(((int_32)( *($9 + [100]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)$13), [21058], [20000])
	*($3) = CALL $188(($9 + [96]), $13, [10])
	*($9 + [16]) = [45]
	*($9 + [108]) = (*($9 + [108]) + [1])
	*($9 + [95]) = [1]
	*($9 + [108]) = CALL $5($1, ($9 + [96]), ($9 + [16]), ($9 + [108]), ($9 + [95]))
	$11 = *($9 + [96])
	CALL $2(((int_32)( *($9 + [100]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)$13), [21068], [20000])
	$11 = *($9 + [96])
	$10 = ($11 & [1])
	$12 = (($9 + [96]) | [1])
	CALL sha256(( *($9 + [104]) ? $12 : $10 ), ( *($9 + [100]) ? uint_32($11 >> [1]) : $10 ), $4)
	*($9 + [16]) = [45]
	*($9 + [108]) = (*($9 + [108]) + [1])
	*($9 + [95]) = [1]
	*($9 + [108]) = CALL $5($1, ($9 + [96]), ($9 + [16]), ($9 + [108]), ($9 + [95]))
	$11 = *($9 + [96])
	CALL $2(((int_32)( *($9 + [100]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)$13), [21081], [20000])
	$11 = *($9 + [96])
	CALL $2(((int_32)( *($9 + [100]) ? uint_32($11 >> [1]) : ($11 & [1]) ) == (int_32)[64]), [8459], [20028])
	CALL $3(($9 + [96]), ($9 + [16]), [32])
	*(($5 + [24])) = *((($9 + [16]) + [24]))
	*(($5 + [16])) = *((($9 + [16]) + [16]))
	*(($5 + [8])) = *($9 + [24])
	*($5) = *($9 + [16])
	*($9 + [16]) = [45]
	*($9 + [108]) = (*($9 + [108]) + [1])
	*($9 + [95]) = [1]
	*($9 + [108]) = CALL $5($1, ($9 + [96]), ($9 + [16]), ($9 + [108]), ($9 + [95]))
	$11 = *($9 + [96])
	CALL $2(((int_32)( *($9 + [100]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)$13), [21098], [20000])
	*($6) = CALL $191(($9 + [96]), $13, [10])
	*($9 + [16]) = [45]
	*($9 + [108]) = (*($9 + [108]) + [1])
	*($9 + [95]) = [1]
	*($9 + [108]) = CALL $5($1, ($9 + [96]), ($9 + [16]), ($9 + [108]), ($9 + [95]))
	$11 = *($9 + [96])
	CALL $2(((int_32)( *($9 + [100]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)$13), [21112], [20000])
	*($9 + [95]) = [1]
	CALL $9(($9 + [16]), ($9 + [96]), ($9 + [95]))
	CALL memcpy($7, ($9 + [16]), [66])
	$11 = (*($9 + [108]) + [1])
	*($9 + [108]) = $11
	CALL $176(($9 + [16]), $1, $11, [-1], $1)
	if ( (*($9 + [96]) & [1]) ){ goto $label$16 }
	*($9 + [96]) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*((($9 + [96]) + [8]))) = [0]
	*($9 + [100]) = [0]
	
.LABEL $label$15
	CALL $178(($9 + [96]), [0])
	*(($10 = (($9 + [96]) + [8]))) = *((($9 + [16]) + [8]))
	*($9 + [96]) = *($9 + [16])
	$11 = ($11 & [1])
	$11 = *($9 + [96])
	if ( (( *($9 + [100]) ? uint_32($11 >> [1]) : $11 ) == 0) ){ goto $label$17 }
	$11 = ( *($10) ? $12 : $11 )
	*($9 + [8]) = $11
	*($9 + [12]) = CALL $237($11)
	*($9) = *($9 + [8])
	*($8) = *(CALL $13(($9 + [16]), $9))
	$11 = (*($9 + [96]) & [1])
	
.LABEL $label$17
	if ( ($11 == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($9 + [104])))
	
.LABEL $label$18
	$global$0 = ($9 + [112])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = [17898]
	*($2 + [20]) = CALL $237([17898])
	*($2 + [8]) = *($2 + [16])
	$3 = CALL $13(($2 + [24]), ($2 + [8]))
	if ( ((int_64)*($1 + [16]) != (int_64)*($3)) ){ goto $label$5 }
	$3 = CALL $237([18058])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [20700])
	goto $label$3 
	
.LABEL $label$5
	$global$0 = ($2 + [32])
	return [0]
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$6:
	$5 = *(($3 + [18057]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$7
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$6 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)4
	
.LABEL $label$1
	$6 = *($1 + [8])
	$global$0 = ($2 + [32])
	return ((int_64)$6 == (int_64)$4)
}

void .FUNC memory ()
{
	CALL $165()
}

int_32 .FUNC $236 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $43 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_64 $18
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL memset(($3 + [64]), [0], [80])
	$4 = ($0 + [168])
	$5 = *(($0 + [196]))
	if ( ((int_32)$5 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	if ( $5 ){ goto $label$1 }
	$5 = ($3 + [64])
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($4), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $45($4, $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [64])
	
.LABEL $label$1
	$4 = *($5 + [16])
	CALL $2((*($5 + [17]) == 0), [17924], [20027])
	*($3 + [56]) = [17911]
	*($3 + [60]) = CALL $237([17911])
	*($3 + [24]) = *($3 + [56])
	CALL $13(($3 + [64]), ($3 + [24]))
	*($3 + [48]) = [17944]
	*($3 + [52]) = CALL $237([17944])
	*($3 + [16]) = *($3 + [48])
	CALL $13(($3 + [184]), ($3 + [16]))
	CALL require_auth2((int_64)-2984964984929477328, (int_64)5037610434748743680)
	CALL $2(((int_32)$4 == (int_32)[1]), [18971], [20012])
	$6 = ($0 + [288])
	$8 = *(($0 + [316]))
	$7 = *(($0 + [312]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($8 + [-24])
	$5 = *($4)
	if ( ((int_64)*($5 + [64]) == (int_64)$1) ){ goto $label$6 }
	$8 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$6), [19850])
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	$4 = CALL db_find_i64(*($6), *(($0 + [296])), (int_64)-3020371202490236928, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $65($6, $4)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$6), [19850])
	
.LABEL $label$4
	$9 = [0]
	CALL $2(((int_32)$5 != (int_32)[0]), [18985], [20039])
	$8 = *(($0 + [316]))
	$7 = *(($0 + [312]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$9 }
	
.LOOP $label$11:
	$4 = ($8 + [-24])
	$10 = *($4)
	if ( ((int_64)*($10 + [64]) == (int_64)$2) ){ goto $label$10 }
	$8 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)$6), [19850])
	$9 = $10
	goto $label$8 
	
.LABEL $label$9
	$4 = CALL db_find_i64(*(($0 + [288])), *(($0 + [296])), (int_64)-3020371202490236928, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$9 = CALL $65($6, $4)
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)$6), [19850])
	
.LABEL $label$8
	CALL $2(((int_32)$9 != (int_32)[0]), [18985], [20039])
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((uint_64)*($5 + [64]) > (uint_64)$2) ){ goto $label$12 }
	$11 = (($3 + [64]) + [72])
	$8 = (($3 + [160]) + [8])
	$10 = ($0 + [288])
	$12 = ($3 + [196])
	$13 = ($3 + [204])
	$14 = ($3 + [212])
	$7 = ($0 + [304])
	$15 = ($0 + [296])
	
.LOOP $label$13:
	*($3 + [32]) = [17911]
	*($3 + [36]) = CALL $237([17911])
	*($3 + [8]) = *($3 + [32])
	CALL $13(($3 + [40]), ($3 + [8]))
	$16 = *($3 + [40])
	$0 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($0, [20481])
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$6), [20516])
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL eosio_assert2()), [20562])
	$4 = ($5 + [8])
	$1 = *($4)
	*($4) = (int_64)0
	*($8) = ( (int_64))((int_64)0 - $1) ? (int_64)-1 : ((int_64)$1 > (int_64)0) )
	*($3 + [160]) = *($5)
	$1 = *($5 + [64])
	CALL eosio_assert([1], [20613])
	*((($3 + [144]) + [8])) = $11
	*($3 + [148]) = ($3 + [64])
	*($3 + [144]) = ($3 + [64])
	*($3 + [176]) = ($3 + [144])
	*((($3 + [184]) + [8])) = ($5 + [16])
	*($12) = ($5 + [24])
	*((($3 + [184]) + [16])) = ($5 + [32])
	*($13) = ($5 + [40])
	*((($3 + [184]) + [24])) = ($5 + [48])
	*($14) = ($5 + [56])
	*((($3 + [184]) + [32])) = ($5 + [64])
	*($3 + [188]) = $4
	*($3 + [184]) = $5
	CALL $66(($3 + [184]), ($3 + [176]))
	CALL db_update_i64(*($5 + [76]), $16, ($3 + [64]), [72])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$14 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($3 + [184]) = *($5)
	if ( (CALL $236(($3 + [160]), ($3 + [184]), [8]) == 0) ){ goto $label$15 }
	$17 = ($5 + [80])
	$9 = *($17)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$16 }
	$9 = CALL db_idx64_find_primary(*($10), *($15), (int_64)-3020371202490236928, ($3 + [176]), $1)
	*($17) = $9
	
.LABEL $label$16
	CALL db_idx64_update($9, $16, ($3 + [184]))
	
.LABEL $label$15
	$18 = *($4)
	*($3 + [184]) = ( (int_64))((int_64)0 - $18) ? (int_64)-1 : ((int_64)$18 > (int_64)0) )
	if ( (CALL $236($8, ($3 + [184]), [8]) == 0) ){ goto $label$17 }
	$9 = ($5 + [84])
	$4 = *($9)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$18 }
	$4 = CALL db_idx64_find_primary(*($10), *($15), (int_64)-3020371202490236927, ($3 + [176]), $1)
	*($9) = $4
	
.LABEL $label$18
	CALL db_idx64_update($4, $16, ($3 + [184]))
	
.LABEL $label$17
	CALL eosio_assert($0, [19998])
	$4 = ($5 + [76])
	$5 = [0]
	$4 = CALL db_next_i64(*($4), ($3 + [64]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$19 }
	$5 = CALL $65($6, $4)
	
.LABEL $label$19
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((uint_64)*($5 + [64]) <= (uint_64)$2) ){ goto $label$13 }
	
.LABEL $label$12
	$global$0 = ($3 + [224])
}

void .FUNC $42 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [416])
	$global$0 = $3
	CALL memset(($3 + [256]), [0], [80])
	$4 = ($0 + [168])
	$5 = *(($0 + [196]))
	if ( ((int_32)$5 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	if ( $5 ){ goto $label$1 }
	$5 = ($3 + [256])
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($4), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $45($4, $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [256])
	
.LABEL $label$1
	CALL memcpy(($3 + [336]), $5, [80])
	CALL $2((*($3 + [353]) == 0), [17924], [20027])
	CALL require_auth($1)
	*(($5 = (($3 + [240]) + [8]))) = *(($2 + [8]))
	*($3 + [240]) = *($2)
	*($3 + [224]) = [17898]
	*($3 + [228]) = CALL $237([17898])
	*($3 + [16]) = *($3 + [224])
	$6 = *(CALL $13(($3 + [232]), ($3 + [16])))
	$7 = *($5)
	*((($3 + [120]) + [8])) = $7
	*((($3 + [256]) + [8])) = $7
	*($3 + [272]) = $6
	$6 = *($3 + [240])
	*($3 + [256]) = $6
	*($3 + [120]) = $6
	CALL $2(CALL $48($0, ($3 + [256])), [18145], [20002])
	CALL $2(((uint_64)(int_64))(((int_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($3 + [400])) > (uint_64)(int_64)30), [18799], [20040])
	*($3 + [216]) = $1
	*($3 + [208]) = ($0 + [48])
	CALL $77(($3 + [200]), ($3 + [208]), ($3 + [216]))
	CALL $2(((int_64)*(*($3 + [204])) == (int_64)$1), [19430], [20015])
	$5 = [0]
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$1 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$1 = $7
	$5 = [1]
	$8 = $2
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$1 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $5 ){ goto $label$8 }
	$5 = [1]
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	CALL $2($5, [18893], [20009])
	CALL $2(((int_64)$6 > (int_64)0), [18910], [20010])
	CALL $2(((int_64)*(*($3 + [204]) + [16]) > (int_64)0), [19452], [20015])
	CALL $2(((int_64)$6 <= (int_64)*(*($3 + [204]) + [16])), [19470], [20016])
	*($3 + [256]) = *(*($3 + [204]))
	*($3 + [264]) = (int_64)0
	*($3 + [272]) = (int_64))((int_64)0 - $6)
	*($3 + [280]) = (int_64)0
	*($3 + [288]) = (int_64)0
	*($3 + [296]) = (int_64)0
	*($3 + [304]) = (int_64)0
	*($3 + [312]) = $6
	*($3 + [320]) = (int_64)-1
	*($3 + [328]) = (int_64)0
	CALL $78($0, ($3 + [256]))
	CALL memset(($3 + [40]), [0], [80])
	$2 = *(($0 + [196]))
	if ( ((int_32)$2 == (int_32)*(($0 + [192]))) ){ goto $label$10 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$4), [19850])
	if ( $2 ){ goto $label$9 }
	$2 = ($3 + [40])
	goto $label$9 
	
.LABEL $label$10
	$2 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$11 }
	$2 = CALL $45($4, $2)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$4), [19850])
	goto $label$9 
	
.LABEL $label$11
	$2 = ($3 + [40])
	
.LABEL $label$9
	CALL memcpy(($3 + [120]), $2, [80])
	CALL memcpy(($3 + [336]), ($3 + [120]), [80])
	$1 = (int_64)
	*($3 + [344]) = $1(*($3 + [344]) - $6))
	CALL $2((uint_64)($1 <= (int_64)10000000000000000), [19495], [20018])
	*($3 + [24]) = [17911]
	*($3 + [28]) = CALL $237([17911])
	*($3 + [8]) = *($3 + [24])
	CALL $72($4, ($3 + [336]), *(CALL $13(($3 + [32]), ($3 + [8]))))
	$global$0 = ($3 + [416])
}

int_32 .FUNC $41 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [608])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $243($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [480]) + [40]))) = (int_64)0
	*(($8 = (($4 + [480]) + [32]))) = (int_64)0
	*(($9 = (($4 + [480]) + [24]))) = (int_64)0
	*($4 + [496]) = (int_64)0
	*($4 + [480]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [19924])
	CALL memcpy(($4 + [480]), $2, [8])
	CALL eosio_assert(((uint_32)($7 + [-8]) > (uint_32)[31]), [19924])
	CALL memcpy((($4 + [480]) + [16]), ($2 + [8]), [32])
	$10 = ($2 + $7)
	*(($4 + [8])) = $10
	*($4 + [20]) = ($2 + [40])
	*($4 + [16]) = $2
	*($4 + [24]) = $10
	*($4) = *($4 + [16])
	$10 = CALL $67(($4 + [32]), $0, $1, $4)
	*(($11 = (($4 + [528]) + [16]))) = *($8)
	*(($8 = (($4 + [528]) + [24]))) = *($3)
	*($4 + [528]) = *($4 + [496])
	*($4 + [536]) = *($9)
	$0 = *($4 + [480])
	*((($4 + [560]) + [24])) = *($8)
	*((($4 + [560]) + [16])) = *($11)
	*($4 + [600]) = $0
	*($4 + [568]) = *($4 + [536])
	*($4 + [560]) = *($4 + [528])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [600])), (int_32 ($4 + [560])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $247($2)
	
.LABEL $label$6
	CALL $68($10)
	$global$0 = ($4 + [608])
	return [1]
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	float_64 $16
	$3 = ($global$0 - [928])
	$global$0 = $3
	CALL memset(($3 + [672]), [0], [80])
	$4 = ($0 + [168])
	$5 = *(($0 + [196]))
	if ( ((int_32)$5 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	if ( $5 ){ goto $label$1 }
	$5 = ($3 + [672])
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($4), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $45($4, $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [672])
	
.LABEL $label$1
	CALL memcpy(($3 + [832]), $5, [80])
	CALL $2((*($3 + [849]) == 0), [17924], [20027])
	*($3 + [824]) = [17911]
	*($3 + [828]) = CALL $237([17911])
	*($3 + [160]) = *($3 + [824])
	CALL $13(($3 + [672]), ($3 + [160]))
	*($3 + [816]) = [17944]
	*($3 + [820]) = CALL $237([17944])
	*($3 + [152]) = *($3 + [816])
	CALL $13(($3 + [368]), ($3 + [152]))
	CALL require_auth2((int_64)-2984964984929477328, (int_64)5037610434748743680)
	CALL $84(($3 + [672]), $0, $1)
	CALL $85($0, $2, ($3 + [720]))
	*(($3 + [664])) = [0]
	*($3 + [656]) = (int_64)0
	$5 = CALL $237([17949])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$12 }
	*($3 + [656]) = ($5 << [1])
	$1 = (($3 + [656]) | [1])
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$6 = (($5 + [16]) & [-16])
	$1 = CALL _Znwj($6)
	*($3 + [656]) = ($6 | [1])
	*($3 + [664]) = $1
	*($3 + [660]) = $5
	
.LABEL $label$11
	CALL memcpy($1, [17949], $5)
	
.LABEL $label$10
	*(($1 + $5)) = [0]
	$7 = *(($3 + [792]))
	CALL eosio_assert([1], [19929])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$8 = $9
	$1 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$8 = $9
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$1 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $1 ){ goto $label$17 }
	$1 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$1 = [0]
	
.LABEL $label$13
	CALL eosio_assert($1, [19978])
	CALL $86(($3 + [624]), $0, $2, ($3 + [752]))
	if ( ((uint_32)*($3 + [624]) <= (uint_32)*($3 + [704])) ){ goto $label$19 }
	$9 = (int_64)0
	$10 = [0]
	goto $label$18 
	
.LABEL $label$19
	CALL $179(($3 + [656]), [17951])
	*($3 + [288]) = *(($3 + [704]))
	CALL $87(($3 + [368]), $0, ($3 + [288]), ($3 + [784]))
	$7 = *($3 + [376])
	$9 = *($3 + [368])
	CALL $2((uint_64)(((int_64)$9 + (int_64)-1) <= (int_64)9999999999999999), [17953], [20018])
	*($3 + [592]) = [17986]
	*($3 + [596]) = CALL $237([17986])
	*($3 + [144]) = *($3 + [592])
	$5 = CALL $13(($3 + [600]), ($3 + [144]))
	*($3 + [576]) = [17999]
	*($3 + [580]) = CALL $237([17999])
	*($3 + [136]) = *($3 + [576])
	$1 = CALL $13(($3 + [584]), ($3 + [136]))
	*($3 + [608]) = *($5)
	*($3 + [616]) = *($1)
	$8 = *(($3 + [800]))
	*($3 + [560]) = [17846]
	*($3 + [564]) = CALL $237([17846])
	*($3 + [128]) = *($3 + [560])
	$5 = CALL $13(($3 + [568]), ($3 + [128]))
	*($3 + [544]) = [17986]
	*($3 + [548]) = CALL $237([17986])
	*($3 + [120]) = *($3 + [544])
	$1 = CALL $13(($3 + [552]), ($3 + [120]))
	CALL $88(($3 + [528]), $0, ($3 + [672]))
	*(($3 + [392])) = $7
	$6 = ($3 + [536])
	*(($3 + [408])) = *($6)
	*($6) = [0]
	*($3 + [384]) = $9
	*($3 + [368]) = *($1)
	*($3 + [376]) = *($3 + [680])
	*($3 + [400]) = *($3 + [528])
	*($3 + [528]) = (int_64)0
	$5 = CALL $55(($3 + [288]), ($3 + [608]), $8, *($5), ($3 + [368]))
	CALL $56(($3 + [912]), $5)
	$1 = *($3 + [912])
	CALL send_inline($1, (*($3 + [916]) - $1))
	$1 = *($3 + [912])
	if ( ($1 == 0) ){ goto $label$20 }
	*($3 + [916]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$20
	$1 = *($5 + [28])
	if ( ($1 == 0) ){ goto $label$21 }
	*(($5 + [32])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$21
	$1 = *($5 + [16])
	if ( ($1 == 0) ){ goto $label$22 }
	*(($5 + [20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$22
	if ( ((*(($3 + [400])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [408])))
	
.LABEL $label$23
	if ( ((*($3 + [528]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($3 + [536])))
	
.LABEL $label$24
	$10 = [1]
	
.LABEL $label$18
	$11 = ($0 + [328])
	$8 = *($3 + [680])
	$6 = *(($0 + [356]))
	$2 = *(($0 + [352]))
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$28 }
	
.LOOP $label$30:
	$5 = ($6 + [-24])
	$1 = *($5)
	if ( ((int_64)*($1) == (int_64)$8) ){ goto $label$29 }
	$6 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$28 }
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$11), [19850])
	goto $label$27 
	
.LABEL $label$28
	$1 = ($0 + [336])
	$5 = CALL db_find_i64(*($11), *($1), (int_64)-8524870256047423488, $8)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$26 }
	$1 = CALL $89($11, $5)
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$11), [19850])
	
.LABEL $label$27
	*($3 + [496]) = [17911]
	*($3 + [500]) = CALL $237([17911])
	*($3 + [112]) = *($3 + [496])
	$12 = *(CALL $13(($3 + [504]), ($3 + [112])))
	CALL eosio_assert([1], [20481])
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$11), [20516])
	CALL eosio_assert(((int_64)*(($0 + [328])) == (int_64)CALL eosio_assert2()), [20562])
	*($1 + [16]) = $10
	*(($1 + [32])) = $7
	*($1 + [8]) = *($3 + [696])
	*($1 + [24]) = $9
	*(($1 + [72])) = *((($3 + [672]) + [72]))
	*(($1 + [64])) = *((($3 + [672]) + [64]))
	*(($1 + [56])) = *((($3 + [672]) + [56]))
	*($1 + [48]) = *($3 + [720])
	$8 = *($1)
	CALL eosio_assert([1], [20613])
	*($3 + [616]) = (($3 + [368]) + [65])
	*($3 + [612]) = ($3 + [368])
	*($3 + [608]) = ($3 + [368])
	*($3 + [912]) = ($3 + [608])
	*($3 + [292]) = ($1 + [8])
	*($3 + [288]) = $1
	*($3 + [296]) = ($1 + [16])
	*($3 + [300]) = ($1 + [24])
	*($3 + [304]) = ($1 + [48])
	CALL $90(($3 + [288]), ($3 + [912]))
	CALL db_update_i64(*($1 + [84]), $12, ($3 + [368]), [65])
	$5 = ($0 + [344])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$25 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	goto $label$25 
	
.LABEL $label$26
	*($3 + [512]) = [17911]
	*($3 + [516]) = CALL $237([17911])
	*($3 + [104]) = *($3 + [512])
	$12 = *(CALL $13(($3 + [520]), ($3 + [104])))
	CALL eosio_assert(((int_64)*(($0 + [328])) == (int_64)CALL eosio_assert2()), [20106])
	*(($5 = CALL _Znwj([96])) + [80]) = $11
	*($5 + [16]) = $10
	*($5 + [24]) = $9
	*($5 + [32]) = $7
	*($5) = *($3 + [680])
	*($5 + [8]) = *($3 + [696])
	*($5 + [48]) = *($3 + [720])
	*(($5 + [56])) = *((($3 + [672]) + [56]))
	*(($5 + [64])) = *((($3 + [672]) + [64]))
	*(($5 + [72])) = *((($3 + [672]) + [72]))
	*($3 + [616]) = (($3 + [368]) + [65])
	*($3 + [612]) = ($3 + [368])
	*($3 + [608]) = ($3 + [368])
	*($3 + [912]) = ($3 + [608])
	*($3 + [292]) = ($5 + [8])
	*($3 + [288]) = $5
	*($3 + [296]) = ($5 + [16])
	*($3 + [300]) = ($5 + [24])
	*($3 + [304]) = ($5 + [48])
	CALL $90(($3 + [288]), ($3 + [912]))
	$8 = *($5)
	$6 = CALL db_store_i64(*($1), (int_64)-8524870256047423488, $12, $8, ($3 + [368]), [65])
	*($5 + [84]) = $6
	$1 = ($0 + [344])
	if ( (uint_64)($8 <= *($1)) ){ goto $label$31 }
	*($1) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$31
	*($3 + [288]) = $5
	$8 = *($5)
	*($3 + [368]) = $8
	*($3 + [608]) = $6
	$2 = ($0 + [356])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [360]))) ){ goto $label$33 }
	*($1 + [8]) = $8
	*($1 + [16]) = $6
	*($3 + [288]) = [0]
	*($1) = $5
	*($2) = ($1 + [24])
	$5 = *($3 + [288])
	*($3 + [288]) = [0]
	if ( $5 ){ goto $label$32 }
	goto $label$25 
	
.LABEL $label$33
	CALL $91(($0 + [352]), ($3 + [288]), ($3 + [368]), ($3 + [608]))
	$5 = *($3 + [288])
	*($3 + [288]) = [0]
	if ( ($5 == 0) ){ goto $label$25 }
	
.LABEL $label$32
	CALL _ZdlPv($5)
	
.LABEL $label$25
	*($3 + [480]) = [17911]
	*($3 + [484]) = CALL $237([17911])
	*($3 + [96]) = *($3 + [480])
	$5 = CALL $13(($3 + [488]), ($3 + [96]))
	*($3 + [464]) = [17999]
	*($3 + [468]) = CALL $237([17999])
	*($3 + [88]) = *($3 + [464])
	$1 = CALL $13(($3 + [472]), ($3 + [88]))
	*($3 + [288]) = *($5)
	*($3 + [296]) = *($1)
	*($3 + [456]) = [17911]
	*($3 + [460]) = CALL $237([17911])
	*($3 + [80]) = *($3 + [456])
	$5 = CALL $13(($3 + [608]), ($3 + [80]))
	*($3 + [448]) = [18006]
	*($3 + [452]) = CALL $237([18006])
	*($3 + [72]) = *($3 + [448])
	$1 = CALL $13(($3 + [912]), ($3 + [72]))
	*((($3 + [368]) + [16])) = *(($3 + [792]))
	*($3 + [368]) = *($3 + [680])
	*($3 + [376]) = *($3 + [784])
	*($3 + [392]) = *(($3 + [704]))
	CALL $175(($3 + [396]), ($3 + [656]))
	*(($3 + [416])) = $7
	*($3 + [408]) = $9
	CALL $175(($3 + [424]), (($3 + [624]) | [4]))
	CALL $175(($3 + [436]), (($3 + [624]) + [16]))
	CALL $92($0, ($3 + [288]), $5, $1, ($3 + [368]))
	if ( ((*($3 + [436]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($3 + [444])))
	
.LABEL $label$34
	if ( ((*($3 + [424]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($3 + [432])))
	
.LABEL $label$35
	$5 = ($3 + [784])
	if ( ((*($3 + [396]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($3 + [404])))
	
.LABEL $label$36
	if ( (CALL $47($0, $5) == 0) ){ goto $label$4 }
	CALL $93($0, $5)
	CALL memset(($3 + [288]), [0], [80])
	$5 = *(($0 + [196]))
	if ( ((int_32)$5 == (int_32)*(($0 + [192]))) ){ goto $label$38 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	if ( $5 ){ goto $label$37 }
	$5 = ($3 + [288])
	goto $label$37 
	
.LABEL $label$38
	$5 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$39 }
	$5 = CALL $45($4, $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	goto $label$37 
	
.LABEL $label$39
	$5 = ($3 + [288])
	
.LABEL $label$37
	CALL memcpy(($3 + [368]), $5, [80])
	CALL memcpy(($3 + [832]), ($3 + [368]), [80])
	$7 = *(($3 + [792]))
	$12 = *($3 + [856])
	$13 = *($3 + [864])
	$14 = *($3 + [868])
	$15 = *(($3 + [784]))
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [19929])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$8 = $9
	$1 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$8 = $9
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$1 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $1 ){ goto $label$44 }
	$1 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$1 = [0]
	
.LABEL $label$40
	CALL eosio_assert($1, [19978])
	*(($3 + [264])) = [0]
	*($3 + [280]) = $7
	*($3 + [256]) = (int_64)0
	$16 = ((float_64)(CASTING float_64)(int_64 ((int_64)$15 * (int_64)$13)) / (float_64)(float_64)1e3)
	if ( ((float_64)(float_64)|$16| < (float_64)(float_64)9223372036854775808) ){ goto $label$46 }
	$9 = (int_64)-9223372036854775808
	goto $label$45 
	
.LABEL $label$46
	$9 = (Rounds 0)($16)
	
.LABEL $label$45
	*($3 + [272]) = $9
	$8 = *($3 + [680])
	$5 = CALL $237([18016])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$49 }
	*($3 + [256]) = ($5 << [1])
	$1 = (($3 + [256]) | [1])
	if ( $5 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$6 = (($5 + [16]) & [-16])
	$1 = CALL _Znwj($6)
	*($3 + [256]) = ($6 | [1])
	*($3 + [264]) = $1
	*($3 + [260]) = $5
	
.LABEL $label$48
	CALL memcpy($1, [18016], $5)
	
.LABEL $label$47
	*(($1 + $5)) = [0]
	*((($3 + [56]) + [8])) = *((($3 + [272]) + [8]))
	*($3 + [56]) = *($3 + [272])
	CALL $94($0, $8, ($3 + [56]), ($3 + [256]))
	if ( ((*($3 + [256]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*($3 + [264]))
	
.LABEL $label$50
	$8 = ((int_64)$12 + (int_64)$9)
	CALL $2((uint_64)($8 <= (int_64)10000000000000000), [18039], [20033])
	$5 = [100000]
	if ( (uint_64)(((int_64)$8 + (int_64)-1) <= (int_64)5000000000000) ){ goto $label$51 }
	$5 = [50000]
	if ( (uint_64)(((int_64)$8 + (int_64)-5000000000001) <= (int_64)5000000000000) ){ goto $label$51 }
	$5 = [25000]
	if ( (uint_64)(((int_64)$8 + (int_64)-10000000000001) <= (int_64)10000000000000) ){ goto $label$51 }
	$5 = [12500]
	if ( (uint_64)(((int_64)$8 + (int_64)-20000000000001) <= (int_64)10000000000000) ){ goto $label$51 }
	$5 = [6250]
	if ( (uint_64)(((int_64)$8 + (int_64)-30000000000001) <= (int_64)10000000000000) ){ goto $label$51 }
	$5 = [3120]
	if ( (uint_64)(((int_64)$8 + (int_64)-40000000000001) <= (int_64)10000000000000) ){ goto $label$51 }
	$5 = ( [1560] ? [780] : (uint_64)(((int_64)$8 + (int_64)-50000000000001) <= (int_64)10000000000000) )
	
.LABEL $label$51
	CALL memset(($3 + [288]), [0], [80])
	$1 = *(($0 + [196]))
	if ( ((int_32)$1 == (int_32)*(($0 + [192]))) ){ goto $label$53 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$4), [19850])
	if ( $1 ){ goto $label$52 }
	$1 = ($3 + [288])
	goto $label$52 
	
.LABEL $label$53
	$1 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$54 }
	$1 = CALL $45($4, $1)
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$4), [19850])
	goto $label$52 
	
.LABEL $label$54
	$1 = ($3 + [288])
	
.LABEL $label$52
	CALL memcpy(($3 + [368]), $1, [80])
	CALL memcpy(($3 + [832]), ($3 + [368]), [80])
	*(($3 + [856])) = $8
	*(($3 + [864])) = $5
	*($3 + [240]) = [17911]
	*($3 + [244]) = CALL $237([17911])
	*($3 + [48]) = *($3 + [240])
	CALL $72($4, ($3 + [832]), *(CALL $13(($3 + [248]), ($3 + [48]))))
	if ( (int_64)(*($3 + [688]) == 0) ){ goto $label$4 }
	$5 = CALL $237([18058])
	$1 = ($5 <= [8])
	$16 = ((float_64)(CASTING float_64)(int_64 ((int_64)$9 * (int_64)$14)) / (float_64)(float_64)1e4)
	if ( ((float_64)(float_64)|$16| < (float_64)(float_64)9223372036854775808) ){ goto $label$56 }
	$7 = (int_64)-9223372036854775808
	if ( ($1 == 0) ){ goto $label$55 }
	goto $label$7 
	
.LABEL $label$56
	$7 = (Rounds 0)($16)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$55
	CALL eosio_assert([0], [20700])
	goto $label$6 
	
.LABEL $label$9
	CALL $174(($3 + [656]))
	
.LABEL $label$8
	CALL $174(($3 + [256]))
	
.LABEL $label$7
	if ( $5 ){ goto $label$6 }
	$9 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$8 = (int_64)0
	
.LOOP $label$57:
	$1 = *(($5 + [18057]))
	if ( ((($1 + [-65]) & [255]) <= [26]) ){ goto $label$58 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$58
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$57 }
	$9 = ((int_64)$8 << (int_64)8)
	
.LABEL $label$5
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [19929])
	$8 = (uint_64)$9 >> (uint_64)(int_64)8)
	$12 = ((int_64)$9 | (int_64)4)
	$5 = [0]
	
.LOOP $label$61:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$62 }
	$8 = $9
	$1 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$62
	$8 = $9
	
.LOOP $label$63:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$60 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$1 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $1 ){ goto $label$63 }
	$1 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$60
	$1 = [0]
	
.LABEL $label$59
	CALL eosio_assert($1, [19978])
	CALL $2(((int_64)$7 < (int_64)10000000000000000), [18064], [20018])
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$4 }
	*($3 + [224]) = [18085]
	*($3 + [228]) = CALL $237([18085])
	*($3 + [40]) = *($3 + [224])
	$5 = CALL $13(($3 + [232]), ($3 + [40]))
	*($3 + [208]) = [17999]
	*($3 + [212]) = CALL $237([17999])
	*($3 + [32]) = *($3 + [208])
	$1 = CALL $13(($3 + [216]), ($3 + [32]))
	*($3 + [608]) = *($5)
	*($3 + [616]) = *($1)
	*($3 + [192]) = [17898]
	*($3 + [196]) = CALL $237([17898])
	*($3 + [24]) = *($3 + [192])
	$5 = CALL $13(($3 + [200]), ($3 + [24]))
	*($3 + [176]) = [17846]
	*($3 + [180]) = CALL $237([17846])
	*($3 + [16]) = *($3 + [176])
	$1 = CALL $13(($3 + [184]), ($3 + [16]))
	*($3 + [168]) = [18085]
	*($3 + [172]) = CALL $237([18085])
	*($3 + [8]) = *($3 + [168])
	$6 = CALL $13(($3 + [552]), ($3 + [8]))
	CALL $95(($3 + [528]), $0, ($3 + [672]))
	*(($3 + [392])) = $12
	$2 = ($3 + [536])
	*(($3 + [408])) = *($2)
	*($2) = [0]
	*($3 + [384]) = $7
	*($3 + [368]) = *($6)
	*($3 + [376]) = *(($3 + [688]))
	*($3 + [400]) = *($3 + [528])
	*($3 + [528]) = (int_64)0
	$5 = CALL $55(($3 + [288]), ($3 + [608]), *($5), *($1), ($3 + [368]))
	CALL $56(($3 + [912]), $5)
	$1 = *($3 + [912])
	CALL send_inline($1, (*($3 + [916]) - $1))
	$1 = *($3 + [912])
	if ( ($1 == 0) ){ goto $label$64 }
	*($3 + [916]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$64
	$1 = *($5 + [28])
	if ( ($1 == 0) ){ goto $label$65 }
	*(($5 + [32])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$65
	$1 = *($5 + [16])
	if ( ($1 == 0) ){ goto $label$66 }
	*(($5 + [20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$66
	if ( ((*(($3 + [400])) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*(($3 + [408])))
	
.LABEL $label$67
	if ( ((*($3 + [528]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [536])))
	
.LABEL $label$4
	$4 = ($0 + [88])
	$8 = *($3 + [672])
	$1 = *(($0 + [116]))
	$2 = *(($0 + [112]))
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$70 }
	
.LOOP $label$72:
	$5 = ($1 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$8) ){ goto $label$71 }
	$1 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$72 }
	goto $label$70 
	
.LABEL $label$71
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$70 }
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$4), [19850])
	if ( $6 ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	$5 = CALL db_find_i64(*($4), *(($0 + [96])), (int_64)4229865212519383040, $8)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$68 }
	$6 = CALL $96($4, $5)
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$4), [19850])
	
.LABEL $label$69
	CALL eosio_assert([1], [20831])
	CALL eosio_assert([1], [19998])
	$5 = CALL db_next_i64(*($6 + [140]), ($3 + [368]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$73 }
	CALL $96($4, $5)
	
.LABEL $label$73
	CALL $97($4, $6)
	
.LABEL $label$68
	if ( (*(($3 + [640])) & [1]) ){ goto $label$78 }
	if ( (*($3 + [628]) & [1]) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	CALL _ZdlPv(*(($3 + [648])))
	if ( ((*($3 + [628]) & [1]) == 0) ){ goto $label$76 }
	
.LABEL $label$77
	CALL _ZdlPv(*(($3 + [636])))
	if ( ((*($3 + [656]) & [1]) == 0) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	if ( (*($3 + [656]) & [1]) ){ goto $label$74 }
	
.LABEL $label$75
	$global$0 = ($3 + [928])
	return 
	
.LABEL $label$74
	CALL _ZdlPv(*($3 + [664]))
	$global$0 = ($3 + [928])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = [17871]
	*($2 + [20]) = CALL $237([17871])
	*($2 + [8]) = *($2 + [16])
	$3 = CALL $13(($2 + [24]), ($2 + [8]))
	if ( ((int_64)*($1 + [16]) != (int_64)*($3)) ){ goto $label$5 }
	$3 = CALL $237([8984])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [20700])
	goto $label$3 
	
.LABEL $label$5
	$global$0 = ($2 + [32])
	return [0]
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$6:
	$5 = *(($3 + [8983]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$7
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$6 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)4
	
.LABEL $label$1
	$6 = *($1 + [8])
	$global$0 = ($2 + [32])
	return ((int_64)$6 == (int_64)$4)
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	$5 = CALL get_action($1, $2, [0], [0])
	CALL eosio_assert(((int_32)$5 > (int_32)[0]), [21013])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$3 = CALL $243($5)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 == (int_32)CALL $fimport$24($1, $2, $3, $5)), [21036])
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*($4 + [8]) = ($3 + $5)
	*($4) = $3
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [19924])
	CALL memcpy($0, $3, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [19924])
	CALL memcpy(($0 + [8]), ($3 + [8]), [8])
	*($4 + [4]) = ($3 + [16])
	CALL $114(CALL $113($4, ($0 + [16])), ($0 + [28]))
	$global$0 = ($4 + [16])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [19901])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $243($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [80]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [17])
	*($3 + [56]) = ($5 + [18])
	*($3 + [60]) = ($5 + [24])
	*($3 + [64]) = ($5 + [32])
	*($3 + [68]) = ($5 + [36])
	*($3 + [72]) = ($5 + [40])
	*($3 + [76]) = ($5 + [48])
	*($3 + [80]) = ($5 + [56])
	*($3 + [84]) = ($5 + [64])
	*($3 + [88]) = ($5 + [72])
	CALL $152(($3 + [40]), ($3 + [32]))
	*($5 + [84]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $153(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $247($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [19924])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $155(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $222 (int_32 $0, int_32 $1)
{
	return CALL $221($0, $1)
}

int_32 .FUNC $234 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $230($3, (int_64)0)
	$4 = CALL $232($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $233 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $230($3, (int_64)0)
	$4 = CALL $232($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $226 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	$5 = ($global$0 - [8128])
	$global$0 = $5
	$6 = (($5 + [704]) | [8])
	$7 = (($5 + [704]) | [9])
	$8 = ([-2] - ($5 + [704]))
	$9 = ($5 + [7664])
	$10 = (($5 + [692]) + [12])
	$11 = (($5 + [352]) + [54])
	$12 = (($5 + [352]) + [55])
	$13 = [0]
	$14 = [0]
	$15 = [0]
	
.LOOP $label$4:
	if ( ($0 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$1 = *($17)
	if ( ($1 == 0) ){ goto $label$1 }
	$15 = $17
	$1 = ($1 & [255])
	if ( ($1 == 0) ){ goto $label$24 }
	
.LOOP $label$25:
	if ( ((int_32)$1 == (int_32)[37]) ){ goto $label$23 }
	$1 = *($15 + [1])
	$15 = ($15 + [1])
	$1 = ($1 & [255])
	if ( $1 ){ goto $label$25 }
	
.LABEL $label$24
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$22 }
	goto $label$3 
	
.LABEL $label$23
	$18 = $15
	
.LOOP $label$27:
	if ( ((int_32)*(($18 + [1])) != (int_32)[37]) ){ goto $label$26 }
	$15 = ($15 + [1])
	$19 = *($18 + [2])
	$1 = ($18 + [2])
	$18 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$27 }
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$22 
	
.LABEL $label$26
	$1 = $18
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	
.LABEL $label$22
	if ( (*($0) & [32]) ){ goto $label$28 }
	CALL $216($17, $15, $0)
	
.LABEL $label$28
	if ( $15 ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	
.LOOP $label$29:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$15 = *($17)
	if ( ($15 == 0) ){ goto $label$31 }
	$1 = $17
	$15 = ($15 & [255])
	if ( ($15 == 0) ){ goto $label$33 }
	
.LOOP $label$34:
	if ( ((int_32)$15 == (int_32)[37]) ){ goto $label$32 }
	$15 = *($1 + [1])
	$1 = ($1 + [1])
	$15 = ($15 & [255])
	if ( $15 ){ goto $label$34 }
	
.LABEL $label$33
	$18 = ([2147483647] - $14)
	$15 = ($1 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$32
	$18 = $1
	$15 = $1
	
.LOOP $label$36:
	if ( ((int_32)*(($15 + [1])) != (int_32)[37]) ){ goto $label$35 }
	$18 = ($18 + [1])
	$19 = *($15 + [2])
	$1 = ($15 + [2])
	$15 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$36 }
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$30 
	
.LABEL $label$35
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$31
	if ( $0 ){ goto $label$1 }
	if ( ($13 == 0) ){ goto $label$46 }
	$1 = [1]
	$15 = *($4 + [4])
	if ( ($15 == 0) ){ goto $label$37 }
	CALL $227(($3 + [16]), $15, $2)
	$15 = *($4 + [8])
	if ( ($15 == 0) ){ goto $label$45 }
	CALL $227(($3 + [32]), $15, $2)
	$15 = *($4 + [12])
	if ( ($15 == 0) ){ goto $label$44 }
	CALL $227(($3 + [48]), $15, $2)
	$15 = *($4 + [16])
	if ( ($15 == 0) ){ goto $label$43 }
	CALL $227(($3 + [64]), $15, $2)
	$15 = *($4 + [20])
	if ( ($15 == 0) ){ goto $label$42 }
	CALL $227(($3 + [80]), $15, $2)
	$15 = *($4 + [24])
	if ( ($15 == 0) ){ goto $label$41 }
	CALL $227(($3 + [96]), $15, $2)
	$15 = *($4 + [28])
	if ( ($15 == 0) ){ goto $label$40 }
	CALL $227(($3 + [112]), $15, $2)
	$15 = *($4 + [32])
	if ( ($15 == 0) ){ goto $label$39 }
	CALL $227(($3 + [128]), $15, $2)
	$15 = *($4 + [36])
	if ( ($15 == 0) ){ goto $label$38 }
	CALL $227(($3 + [144]), $15, $2)
	$global$0 = ($5 + [8128])
	return [1]
	
.LABEL $label$46
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$45
	$1 = [2]
	goto $label$37 
	
.LABEL $label$44
	$1 = [3]
	goto $label$37 
	
.LABEL $label$43
	$1 = [4]
	goto $label$37 
	
.LABEL $label$42
	$1 = [5]
	goto $label$37 
	
.LABEL $label$41
	$1 = [6]
	goto $label$37 
	
.LABEL $label$40
	$1 = [7]
	goto $label$37 
	
.LABEL $label$39
	$1 = [8]
	goto $label$37 
	
.LABEL $label$38
	$1 = [9]
	
.LABEL $label$37
	$15 = ($4 + ($1 << [2]))
	
.LOOP $label$47:
	if ( *($15) ){ goto $label$18 }
	$15 = ($15 + [4])
	$14 = [1]
	$1 = ($1 + [1])
	if ( ((uint_32)$1 <= (uint_32)[9]) ){ goto $label$47 }
	goto $label$1 
	
.LABEL $label$30
	if ( $15 ){ goto $label$29 }
	
.LABEL $label$19
	$15 = ($1 + [1])
	$16 = *($1 + [1])
	$20 = ($16 + [-48])
	if ( ((uint_32)$20 > (uint_32)[9]) ){ goto $label$50 }
	$19 = ((int_32)*($1 + [2]) == (int_32)[36])
	$15 = ( ($1 + [3]) ? $15 : $19 )
	$21 = ( $20 ? [-1] : $19 )
	$13 = ( [1] ? $13 : $19 )
	$22 = [0]
	$16 = *(($1 + ( [3] ? [1] : $19 )))
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	goto $label$49 
	
.LABEL $label$50
	$21 = [-1]
	$22 = [0]
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	
.LABEL $label$49
	$1 = ([1] << $1)
	if ( (($1 & [75913]) == 0) ){ goto $label$48 }
	$19 = ($15 + [1])
	$22 = [0]
	
.LOOP $label$51:
	$22 = ($1 | $22)
	$15 = $19
	$16 = *($15)
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 >= (uint_32)[32]) ){ goto $label$48 }
	$19 = ($15 + [1])
	$1 = ([1] << $1)
	if ( ($1 & [75913]) ){ goto $label$51 }
	
.LABEL $label$48
	if ( ((int_32)$16 != (int_32)[42]) ){ goto $label$57 }
	$1 = (*($15 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$56 }
	if ( ((int_32)*($15 + [2]) != (int_32)[36]) ){ goto $label$56 }
	*(($4 + ($1 << [2]))) = [10]
	$23 = ($15 + [3])
	$13 = [1]
	$20 = *((($3 + (*(($15 + [1])) << [4])) + [-768]))
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	goto $label$55 
	
.LABEL $label$57
	$20 = [0]
	$19 = ($16 + [-48])
	if ( ((uint_32)$19 > (uint_32)[9]) ){ goto $label$54 }
	$1 = [0]
	
.LOOP $label$58:
	$20 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$59 }
	$1 = ((int_32)$1 * (int_32)[10])
	$20 = ( [-1] ? ($1 + $19) : ((int_32)$19 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$59
	$19 = *($15 + [1])
	$23 = ($15 + [1])
	$15 = $23
	$1 = $20
	$19 = ($19 + [-48])
	if ( ($19 <= [10]) ){ goto $label$58 }
	if ( ((int_32)$20 >= (int_32)[0]) ){ goto $label$52 }
	goto $label$3 
	
.LABEL $label$56
	if ( $13 ){ goto $label$18 }
	$23 = ($15 + [1])
	if ( ($0 == 0) ){ goto $label$53 }
	$15 = *($2)
	*($2) = ($15 + [4])
	$13 = [0]
	$20 = *($15)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	
.LABEL $label$55
	$20 = ([0] - $20)
	$22 = ($22 | [8192])
	goto $label$52 
	
.LABEL $label$54
	$23 = $15
	goto $label$52 
	
.LABEL $label$53
	$13 = [0]
	$20 = [0]
	
.LABEL $label$52
	$15 = [0]
	$16 = [-1]
	if ( ((int_32)*($23) != (int_32)[46]) ){ goto $label$66 }
	$19 = *($23 + [1])
	if ( ((int_32)$19 != (int_32)[42]) ){ goto $label$65 }
	$1 = (*($23 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$64 }
	if ( ((int_32)*($23 + [3]) != (int_32)[36]) ){ goto $label$64 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($23 + [4])
	$16 = *((($3 + (*(($23 + [2])) << [4])) + [-768]))
	goto $label$61 
	
.LABEL $label$66
	$1 = $23
	$24 = [0]
	goto $label$60 
	
.LABEL $label$65
	$1 = ($23 + [1])
	$25 = ($19 + [-48])
	if ( ((uint_32)$25 > (uint_32)[9]) ){ goto $label$63 }
	$23 = [0]
	$19 = $1
	
.LOOP $label$67:
	$16 = [-1]
	if ( ((uint_32)$23 > (uint_32)[214748364]) ){ goto $label$68 }
	$1 = ((int_32)$23 * (int_32)[10])
	$16 = ( [-1] ? ($1 + $25) : ((int_32)$25 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$68
	$24 = [1]
	$25 = *($19 + [1])
	$1 = ($19 + [1])
	$19 = $1
	$23 = $16
	$25 = ($25 + [-48])
	if ( ($25 <= [10]) ){ goto $label$67 }
	goto $label$60 
	
.LABEL $label$64
	if ( $13 ){ goto $label$18 }
	$1 = ($23 + [2])
	if ( ($0 == 0) ){ goto $label$62 }
	$19 = *($2)
	*($2) = ($19 + [4])
	$16 = *($19)
	goto $label$61 
	
.LABEL $label$63
	$24 = [1]
	$16 = [0]
	goto $label$60 
	
.LABEL $label$62
	$16 = [0]
	
.LABEL $label$61
	$24 = ((int_32)uint_32($16 >> [31]) ^ (int_32)[1])
	
.LABEL $label$60
	
.LOOP $label$69:
	$19 = $15
	$15 = (*($1) + [-65])
	if ( ((uint_32)$15 > (uint_32)[57]) ){ goto $label$18 }
	$1 = ($1 + [1])
	$15 = *(((((int_32)$19 * (int_32)[58]) + $15) + [23872]))
	if ( (($15 + [-1]) <= [8]) ){ goto $label$69 }
	if ( ($15 == 0) ){ goto $label$18 }
	if ( ((int_32)$15 != (int_32)[27]) ){ goto $label$72 }
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$18 }
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$72
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$73 }
	*(($4 + ($21 << [2]))) = $15
	$15 = ($3 + ($21 << [4]))
	*($5 + [424]) = *(($15 + [8]))
	*($5 + [416]) = *($15)
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$73
	if ( ($0 == 0) ){ goto $label$70 }
	CALL $227(($5 + [416]), $15, $2)
	
.LABEL $label$71
	$23 = ($22 & [-65537])
	$21 = ( $23 ? $22 : ($22 & [8192]) )
	$26 = [0]
	$27 = [8231]
	$15 = *(($1 + [-1]))
	$28 = ( ( ($15 & [-33]) ? $15 : ((int_32)($15 & [15]) == (int_32)[3]) ) ? $15 : $19 )
	$15 = ($28 + [-65])
	if ( ((uint_32)$15 > (uint_32)[55]) ){ goto $label$9 }
	$22 = $12
	goto $label$101 
	
.LABEL $label$101
	if ( ((int_32)$16 > (int_32)[-1]) ){ goto $label$102 }
	if ( $24 ){ goto $label$3 }
	
.LABEL $label$102
	$29 = *($5 + [424])
	$30 = *($5 + [416])
	*($5 + [748]) = [0]
	if ( (CALL $217($30, $29) == 0) ){ goto $label$103 }
	$31 = [1]
	$32 = [8390]
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	if ( ((int_32)CALL $218($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$103
	if ( ($21 & [2048]) ){ goto $label$99 }
	$31 = ($21 & [1])
	$32 = ( [8396] ? [8391] : $31 )
	if ( ((int_32)CALL $218($30, $29) > (int_32)[1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$100
	$29 = *($5 + [416])
	if ( ((int_64)$29 <= (int_64)-1) ){ goto $label$86 }
	if ( ($21 & [2048]) ){ goto $label$84 }
	$26 = ($21 & [1])
	$27 = ( [8233] ? [8231] : $26 )
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$99
	$31 = [1]
	$32 = [8393]
	if ( ((int_32)CALL $218($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$98
	*((($5 + [344]) + [4])) = [0]
	*($5 + [344]) = *($5 + [416])
	*($5 + [416]) = ($5 + [344])
	$16 = [-1]
	$17 = ($5 + [344])
	goto $label$96 
	
.LABEL $label$97
	$17 = *($5 + [416])
	if ( ($16 == 0) ){ goto $label$80 }
	
.LABEL $label$96
	$15 = [0]
	$18 = $17
	
.LOOP $label$104:
	$19 = *($18)
	if ( ($19 == 0) ){ goto $label$82 }
	$19 = CALL $220(($5 + [340]), $19)
	$22 = ((int_32)$19 < (int_32)[0])
	if ( $22 ){ goto $label$83 }
	if ( ((uint_32)$19 > (uint_32)($16 - $15)) ){ goto $label$83 }
	$18 = ($18 + [4])
	$15 = ($19 + $15)
	if ( ((uint_32)$16 > (uint_32)$15) ){ goto $label$104 }
	goto $label$82 
	
.LABEL $label$95
	*((($5 + [352]) + [54])) = *($5 + [416])
	$16 = [1]
	$17 = $11
	$22 = $12
	$21 = $23
	goto $label$8 
	
.LABEL $label$94
	$17 = CALL $223(*(CALL $198()))
	goto $label$88 
	
.LABEL $label$93
	$15 = [0]
	$18 = ($19 & [255])
	if ( ((uint_32)$18 > (uint_32)[7]) ){ goto $label$4 }
	goto $label$105 
	
.LABEL $label$105
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$92
	$17 = $12
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$106 }
	$17 = $12
	
.LOOP $label$107:
	*(($17 = ($17 + [-1]))) = (((CASTING uint_32)(uint_64 $29) & [7]) | [48])
	$29 = (uint_64)$29 >> (uint_64)(int_64)3
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$107 }
	
.LABEL $label$106
	if ( ($21 & [8]) ){ goto $label$81 }
	$26 = [0]
	$27 = [8231]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$91
	$16 = ( $16 ? [8] : ((uint_32)$16 > (uint_32)[8]) )
	$21 = ($21 | [8])
	$28 = [120]
	
.LABEL $label$90
	$26 = [0]
	$27 = [8231]
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$108 }
	$15 = ($28 & [32])
	$17 = $12
	
.LOOP $label$109:
	*(($17 = ($17 + [-1]))) = (*((((CASTING uint_32)(uint_64 $29) & [15]) + [24336])) | $15)
	$29 = (uint_64)$29 >> (uint_64)(int_64)4
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$109 }
	if ( (($21 & [8]) == 0) ){ goto $label$12 }
	if ( (int_64)(*($5 + [416]) == 0) ){ goto $label$12 }
	$27 = (int_32($28 >> [4]) + [8231])
	$26 = [2]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$108
	$17 = $12
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$89
	$15 = *($5 + [416])
	$17 = ( $15 ? [8258] : $15 )
	
.LABEL $label$88
	$26 = [0]
	$15 = CALL $238($17, ( [2147483647] ? $16 : ((int_32)$16 < (int_32)[0]) ))
	$22 = ($17 + $15)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$85 }
	$21 = $23
	$16 = $15
	goto $label$8 
	
.LABEL $label$87
	$26 = [0]
	$27 = [8231]
	$29 = *($5 + [416])
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$86
	$29 = (int_64)
	*($5 + [416]) = $29((int_64)0 - $29))
	$26 = [1]
	$27 = [8231]
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$85
	$21 = $23
	$16 = $15
	if ( (*($22) == 0) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$84
	$26 = [1]
	$27 = [8232]
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$83
	if ( $22 ){ goto $label$2 }
	
.LABEL $label$82
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$23 = ($21 & [73728])
	if ( $23 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$81
	$15 = ($12 - $17)
	$27 = ( [8231] ? [8236] : ((int_32)$16 > (int_32)$15) )
	$26 = ((int_32)$16 <= (int_32)$15)
	goto $label$12 
	
.LABEL $label$80
	$15 = [0]
	$23 = ($21 & [73728])
	if ( ($23 == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$79
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$78
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$77
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$76
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$75
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$74
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$70
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$18
	*(CALL $198()) = [22]
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$16 }
	$18 = ($25 <= [256])
	$25 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $25 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$111 }
	$18 = ($19 == 0)
	$19 = $25
	
.LOOP $label$112:
	if ( (($18 & [1]) == 0) ){ goto $label$113 }
	CALL $216(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$113
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$112 }
	if ( $22 ){ goto $label$16 }
	$25 = ($25 & [255])
	goto $label$110 
	
.LABEL $label$111
	if ( $19 ){ goto $label$16 }
	
.LABEL $label$110
	CALL $216(($5 + [432]), $25, $0)
	
.LABEL $label$16
	if ( ($15 == 0) ){ goto $label$114 }
	$18 = [0]
	
.LOOP $label$115:
	$19 = *($17)
	if ( ($19 == 0) ){ goto $label$114 }
	$19 = CALL $220(($5 + [340]), $19)
	$18 = ($19 + $18)
	if ( ((uint_32)$18 > (uint_32)$15) ){ goto $label$114 }
	if ( (*($0) & [32]) ){ goto $label$116 }
	CALL $216(($5 + [340]), $19, $0)
	
.LABEL $label$116
	$17 = ($17 + [4])
	if ( ($18 <= $15) ){ goto $label$115 }
	
.LABEL $label$114
	if ( ((int_32)$23 != (int_32)[8192]) ){ goto $label$117 }
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$117 }
	$18 = ($22 <= [256])
	$22 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$119 }
	$18 = ($19 == 0)
	$19 = $22
	
.LOOP $label$120:
	if ( (($18 & [1]) == 0) ){ goto $label$121 }
	CALL $216(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$121
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$120 }
	if ( $16 ){ goto $label$117 }
	$22 = ($22 & [255])
	goto $label$118 
	
.LABEL $label$119
	if ( $19 ){ goto $label$117 }
	
.LABEL $label$118
	CALL $216(($5 + [432]), $22, $0)
	
.LABEL $label$117
	$15 = ( $20 ? $15 : ((int_32)$20 > (int_32)$15) )
	goto $label$4 
	
.LABEL $label$15
	$30 = $29
	$17 = $12
	goto $label$13 
	
.LABEL $label$14
	$17 = $12
	
.LOOP $label$122:
	$30 = ((uint_64)$29 / (uint_64)(int_64)10)
	*(($17 = ($17 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($29 - ((int_64)$30 * (int_64)10))) | [48])
	$15 = ((uint_64)$29 > (uint_64)(int_64)42949672959)
	$29 = $30
	if ( $15 ){ goto $label$122 }
	
.LABEL $label$13
	$15 = (CASTING uint_32)(uint_64 $30)
	if ( ($15 == 0) ){ goto $label$12 }
	
.LOOP $label$123:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$123 }
	
.LABEL $label$12
	if ( ($24 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$10
	$21 = ( ($21 & [-65537]) ? $21 : ((int_32)$16 > (int_32)[-1]) )
	$29 = *($5 + [416])
	if ( $16 ){ goto $label$124 }
	if ( ((int_64)($29 == 0) == 0) ){ goto $label$124 }
	$17 = $12
	$22 = $12
	$16 = [0]
	goto $label$8 
	
.LABEL $label$124
	$15 = (($12 - $17) + (int_64)($29 == 0))
	$16 = ( $16 ? $15 : ((int_32)$16 > (int_32)$15) )
	
.LABEL $label$9
	$22 = $12
	
.LABEL $label$8
	$24 = ($22 - $17)
	$28 = ( $24 ? $16 : ((int_32)$16 < (int_32)$24) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$3 }
	$25 = ($26 + $28)
	$15 = ( $25 ? $20 : ((int_32)$20 < (int_32)$25) )
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$125 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$125 }
	$18 = ($36 <= [256])
	$36 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $36 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$127 }
	$18 = ($19 == 0)
	$19 = $36
	
.LOOP $label$128:
	if ( (($18 & [1]) == 0) ){ goto $label$129 }
	CALL $216(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$129
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$128 }
	if ( $23 ){ goto $label$125 }
	$36 = ($36 & [255])
	goto $label$126 
	
.LABEL $label$127
	if ( $19 ){ goto $label$125 }
	
.LABEL $label$126
	CALL $216(($5 + [432]), $36, $0)
	
.LABEL $label$125
	if ( (*($0) & [32]) ){ goto $label$130 }
	CALL $216($27, $26, $0)
	
.LABEL $label$130
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$131 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$131 }
	$18 = ($26 <= [256])
	$26 = ($15 - $25)
	CALL memset(($5 + [432]), [48], ( $26 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$133 }
	$18 = ($19 == 0)
	$19 = $26
	
.LOOP $label$134:
	if ( (($18 & [1]) == 0) ){ goto $label$135 }
	CALL $216(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$135
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$134 }
	if ( $23 ){ goto $label$131 }
	$26 = ($26 & [255])
	goto $label$132 
	
.LABEL $label$133
	if ( $19 ){ goto $label$131 }
	
.LABEL $label$132
	CALL $216(($5 + [432]), $26, $0)
	
.LABEL $label$131
	if ( ((int_32)$24 >= (int_32)$16) ){ goto $label$136 }
	$18 = ($23 <= [256])
	$23 = ($28 - $24)
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$138 }
	$18 = ($19 == 0)
	$19 = $23
	
.LOOP $label$139:
	if ( (($18 & [1]) == 0) ){ goto $label$140 }
	CALL $216(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$140
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$139 }
	if ( $22 ){ goto $label$136 }
	$23 = ($23 & [255])
	goto $label$137 
	
.LABEL $label$138
	if ( $19 ){ goto $label$136 }
	
.LABEL $label$137
	CALL $216(($5 + [432]), $23, $0)
	
.LABEL $label$136
	if ( (*($0) & [32]) ){ goto $label$141 }
	CALL $216($17, $24, $0)
	
.LABEL $label$141
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$4 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$4 }
	$18 = ($16 <= [256])
	$16 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$143 }
	$18 = ($19 == 0)
	$19 = $16
	
.LOOP $label$144:
	if ( (($18 & [1]) == 0) ){ goto $label$145 }
	CALL $216(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$145
	$20 = ($17 & [32])
	$18 = ($20 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$144 }
	if ( $20 ){ goto $label$4 }
	$16 = ($16 & [255])
	goto $label$142 
	
.LABEL $label$143
	if ( $19 ){ goto $label$4 }
	
.LABEL $label$142
	CALL $216(($5 + [432]), $16, $0)
	goto $label$4 
	
.LABEL $label$7
	$23 = CALL __unordtf2($30, $29, $30, $29)
	$16 = ($31 + [3])
	if ( ($21 & [8192]) ){ goto $label$146 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$146 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$148 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$149:
	if ( (($15 & [1]) == 0) ){ goto $label$150 }
	CALL $216(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$150
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$149 }
	if ( $17 ){ goto $label$146 }
	$22 = ($22 & [255])
	goto $label$147 
	
.LABEL $label$148
	if ( $18 ){ goto $label$146 }
	
.LABEL $label$147
	CALL $216(($5 + [432]), $22, $0)
	
.LABEL $label$146
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$155 }
	CALL $216($32, $31, $0)
	if ( ((*($0) & [32]) == 0) ){ goto $label$154 }
	goto $label$153 
	
.LABEL $label$155
	if ( ($15 & [32]) ){ goto $label$153 }
	
.LABEL $label$154
	$15 = uint_32(($28 & [32]) >> [5])
	CALL $216(( ( [8474] ? [8747] : $15 ) ? ( [8427] ? [8455] : $15 ) : $23 ), [3], $0)
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	goto $label$152 
	
.LABEL $label$153
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	
.LABEL $label$152
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$151 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$157 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$158:
	if ( (($15 & [1]) == 0) ){ goto $label$159 }
	CALL $216(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$159
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$158 }
	if ( $17 ){ goto $label$151 }
	$22 = ($22 & [255])
	goto $label$156 
	
.LABEL $label$157
	if ( $18 ){ goto $label$151 }
	
.LABEL $label$156
	CALL $216(($5 + [432]), $22, $0)
	
.LABEL $label$151
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	goto $label$5 
	
.LABEL $label$6
	CALL $224(($5 + [320]), $30, $29, ($5 + [748]))
	$30 = *($5 + [328])
	$29 = *($5 + [320])
	CALL __addtf3(($5 + [304]), $29, $30, $29, $30)
	$30 = *((($5 + [304]) + [8]))
	$29 = *($5 + [304])
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$160 }
	*($5 + [748]) = (*($5 + [748]) + [-1])
	
.LABEL $label$160
	$33 = ($28 | [32])
	if ( ((int_32)$33 != (int_32)[97]) ){ goto $label$173 }
	$22 = ($28 & [32])
	$26 = ( ($32 + [9]) ? $32 : $22 )
	if ( ((uint_32)$16 > (uint_32)[26]) ){ goto $label$171 }
	if ( (([27] - $16) == 0) ){ goto $label$171 }
	$15 = ($16 + [-27])
	$34 = (int_64)4612248968380809216
	$35 = (int_64)0
	
.LOOP $label$174:
	CALL __multf3(($5 + [208]), $35, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($5 + [208]) + [8]))
	$35 = *($5 + [208])
	$15 = ($15 + [1])
	if ( $15 ){ goto $label$174 }
	if ( ((int_32)*($26) != (int_32)[45]) ){ goto $label$172 }
	CALL __subtf3(($5 + [160]), $29, ((int_64)$30 ^ (int_64)-9223372036854775808), $35, $34)
	CALL __addtf3(($5 + [144]), $35, $34, *($5 + [160]), *((($5 + [160]) + [8])))
	$30 = ((int_64)*((($5 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$29 = *($5 + [144])
	goto $label$171 
	
.LABEL $label$173
	$15 = ((int_32)$16 < (int_32)[0])
	if ( (CALL __netf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$176 }
	CALL __multf3(($5 + [288]), $29, $30, (int_64)0, (int_64)4619285842798575616)
	$22 = (*($5 + [748]) + [-28])
	*($5 + [748]) = $22
	$30 = *((($5 + [288]) + [8]))
	$29 = *($5 + [288])
	goto $label$175 
	
.LABEL $label$176
	$22 = *($5 + [748])
	
.LABEL $label$175
	$27 = ( [6] ? $16 : $15 )
	$36 = ( ($5 + [752]) ? $9 : ((int_32)$22 < (int_32)[0]) )
	$19 = $36
	
.LOOP $label$177:
	$15 = CALL __fixunstfsi($29, $30)
	CALL __floatunsitf(($5 + [272]), $15)
	CALL __subtf3(($5 + [256]), $29, $30, *($5 + [272]), *((($5 + [272]) + [8])))
	CALL __multf3(($5 + [240]), *($5 + [256]), *((($5 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($19) = $15
	$19 = ($19 + [4])
	$30 = *((($5 + [240]) + [8]))
	$29 = *($5 + [240])
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$177 }
	if ( ((int_32)$22 < (int_32)[1]) ){ goto $label$180 }
	$18 = $36
	
.LOOP $label$181:
	$17 = ( $22 ? [29] : ((int_32)$22 < (int_32)[29]) )
	$15 = ($19 + [-4])
	if ( ($15 <= $18) ){ goto $label$182 }
	$30 = (CASTING uint_64)(uint_32 $17)
	$29 = (int_64)0
	
.LOOP $label$183:
	$29 = ((uint_64)$29 / (uint_64)(int_64)1000000000)
	$29 = ((int_64)((int_64)*($15) << (int_64)$30) + (int_64)((int_64)$29 & (int_64)4294967295))
	*($15) = (int_64))($29 - ((int_64)$29 * (int_64)1000000000))
	$15 = ($15 + [-4])
	if ( ((uint_32)$15 >= (uint_32)$18) ){ goto $label$183 }
	$15 = (CASTING uint_32)(uint_64 $29)
	if ( ($15 == 0) ){ goto $label$182 }
	*(($18 = ($18 + [-4]))) = $15
	
.LABEL $label$182
	
.LOOP $label$185:
	$15 = $19
	if ( ((uint_32)$15 <= (uint_32)$18) ){ goto $label$184 }
	$19 = ($15 + [-4])
	if ( (*($19) == 0) ){ goto $label$185 }
	
.LABEL $label$184
	$19 = $15
	$22 = ($22 - $17)
	if ( ((int_32)$22 > (int_32)[0]) ){ goto $label$181 }
	*($5 + [748]) = $22
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	goto $label$179 
	
.LABEL $label$180
	$15 = $19
	$18 = $36
	if ( ((int_32)$22 > (int_32)[-1]) ){ goto $label$178 }
	
.LABEL $label$179
	$26 = (((uint_32)($27 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$33 != (int_32)[102]) ){ goto $label$187 }
	$37 = ($36 + ($26 << [2]))
	
.LOOP $label$188:
	$19 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$190 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$191:
	$16 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$191 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$189 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$189 
	
.LABEL $label$190
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$189
	$15 = ( $37 ? $15 : ((int_32)int_32(($15 - $36) >> [2]) > (int_32)$26) )
	$22 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$188 }
	goto $label$186 
	
.LABEL $label$187
	
.LOOP $label$192:
	$19 = ([0] - $22)
	$23 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$194 }
	$25 = uint_32([1000000000] >> $23)
	$24 = ((int_32)([-1] << $23) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$195:
	$16 = *($19)
	*($19) = (uint_32($16 >> $23) + $17)
	$17 = ((int_32)($16 & $24) * (int_32)$25)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$195 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$193 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$193 
	
.LABEL $label$194
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$193
	$15 = ( ($18 + ($26 << [2])) ? $15 : ((int_32)int_32(($15 - $18) >> [2]) > (int_32)$26) )
	$22 = ($23 + $22)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$192 }
	
.LABEL $label$186
	*($5 + [748]) = $22
	
.LABEL $label$178
	$19 = [0]
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$196 }
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$196 }
	$17 = [10]
	
.LOOP $label$197:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$197 }
	
.LABEL $label$196
	$23 = ((int_32)$33 == (int_32)[103])
	$25 = (((int_32)$27 != (int_32)[0]) & $23)
	$16 = ( [0] ? $19 : ((int_32)$33 == (int_32)[102]) )
	$17 = (($27 - $16) - $25)
	if ( ((int_32)$17 >= (int_32)(((int_32)int_32(($15 - $36) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$198 }
	$24 = ($17 + [147456])
	$26 = ((int_32)$24 / (int_32)[9])
	$37 = ($36 + ($26 << [2]))
	$22 = ($37 + [-65532])
	$17 = [10]
	$26 = ((int_32)$26 * (int_32)[9])
	if ( ((int_32)($24 - $26) > (int_32)[7]) ){ goto $label$199 }
	$16 = (((($27 + ([0] - $25)) + [147455]) - $16) - $26)
	$17 = [10]
	
.LOOP $label$200:
	$17 = ((int_32)$17 * (int_32)[10])
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$200 }
	
.LABEL $label$199
	$24 = ((uint_32)$25 / (uint_32)$17)
	$25 = *($22)
	$16 = ($25 - ((int_32)$24 * (int_32)$17))
	$26 = ($22 + [4])
	if ( ((int_32)$26 != (int_32)$15) ){ goto $label$202 }
	if ( ($16 == 0) ){ goto $label$201 }
	
.LABEL $label$202
	if ( ($24 & [1]) ){ goto $label$204 }
	$29 = (int_64)4643211215818981376
	$30 = (int_64)0
	if ( ((uint_32)$22 <= (uint_32)$18) ){ goto $label$203 }
	if ( ((int_32)$17 != (int_32)[1000000000]) ){ goto $label$203 }
	if ( ((*(($22 + [-4])) & [1]) == 0) ){ goto $label$203 }
	
.LABEL $label$204
	$29 = (int_64)4643211215818981376
	$30 = (int_64)1
	
.LABEL $label$203
	$34 = (int_64)4611123068473966592
	$24 = uint_32($17 >> [1])
	if ( ($16 <= $24) ){ goto $label$205 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$16 == (int_32)$24) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$15) )
	
.LABEL $label$205
	if ( ($31 == 0) ){ goto $label$206 }
	if ( ((int_32)*($32) != (int_32)[45]) ){ goto $label$206 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	
.LABEL $label$206
	CALL __addtf3(($5 + [224]), $30, $29, (int_64)0, $34)
	$16 = ($25 - $16)
	*($22) = $16
	if ( (CALL __eqtf2(*($5 + [224]), *((($5 + [224]) + [8])), $30, $29) == 0) ){ goto $label$201 }
	$19 = ($16 + $17)
	*($22) = $19
	if ( ($19 <= [1000000000]) ){ goto $label$207 }
	$19 = ($37 + [-65536])
	
.LOOP $label$208:
	*(($19 + [4])) = [0]
	if ( ((uint_32)$19 >= (uint_32)$18) ){ goto $label$209 }
	*(($18 = ($18 + [-4]))) = [0]
	
.LABEL $label$209
	$17 = (*($19) + [1])
	*($19) = $17
	$19 = ($19 + [-4])
	if ( ((uint_32)$17 > (uint_32)[999999999]) ){ goto $label$208 }
	$22 = ($19 + [4])
	
.LABEL $label$207
	$19 = ((int_32)int_32(($36 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$201 }
	$17 = [10]
	
.LOOP $label$210:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$210 }
	
.LABEL $label$201
	$17 = ($22 + [4])
	$15 = ( $17 ? $15 : ((uint_32)$15 > (uint_32)$17) )
	
.LABEL $label$198
	$22 = ([0] - $19)
	
.LOOP $label$213:
	$16 = $15
	if ( ((uint_32)$16 <= (uint_32)$18) ){ goto $label$212 }
	$15 = ($16 + [-4])
	if ( (*($15) == 0) ){ goto $label$213 }
	$24 = [1]
	if ( $23 ){ goto $label$211 }
	goto $label$162 
	
.LABEL $label$212
	$24 = [0]
	if ( ($23 == 0) ){ goto $label$162 }
	
.LABEL $label$211
	$15 = ($27 + ($27 == 0))
	if ( ((int_32)$15 <= (int_32)$19) ){ goto $label$170 }
	if ( ((int_32)$19 < (int_32)[-4]) ){ goto $label$170 }
	$28 = ($28 + [-1])
	$27 = (($15 + [-1]) - $19)
	$23 = ($21 & [8])
	if ( ($23 == 0) ){ goto $label$169 }
	goto $label$161 
	
.LABEL $label$172
	CALL __addtf3(($5 + [192]), $29, $30, $35, $34)
	CALL __subtf3(($5 + [176]), *($5 + [192]), *((($5 + [192]) + [8])), $35, $34)
	$30 = *((($5 + [176]) + [8]))
	$29 = *($5 + [176])
	
.LABEL $label$171
	$19 = $10
	$15 = int_32($23 >> [31])
	$23 = *($5 + [748])
	$15 = ((int_32)($23 + $15) ^ (int_32)$15)
	if ( ($15 == 0) ){ goto $label$215 }
	$18 = [0]
	
.LOOP $label$216:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [692]) + $18) + [11])) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$216 }
	$19 = ((($5 + [692]) + $18) + [12])
	if ( $18 ){ goto $label$214 }
	
.LABEL $label$215
	*(($19 = ($19 + [-1]))) = [48]
	
.LABEL $label$214
	$25 = ($31 | [2])
	*(($24 = ($19 + [-2]))) = ($28 + [15])
	*(($19 + [-1])) = ( [45] ? [43] : ((int_32)$23 < (int_32)[0]) )
	if ( ($21 & [8]) ){ goto $label$217 }
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$168 }
	$15 = ($5 + [704])
	
.LOOP $label$218:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [80]), $18)
	CALL __subtf3(($5 + [64]), $29, $30, *($5 + [80]), *((($5 + [80]) + [8])))
	CALL __multf3(($5 + [48]), *($5 + [64]), *((($5 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [24336])) | $22)
	$30 = *((($5 + [48]) + [8]))
	$29 = *($5 + [48])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$219 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$219
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$218 }
	goto $label$167 
	
.LABEL $label$217
	$15 = ($5 + [704])
	
.LOOP $label$220:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [128]), $18)
	CALL __subtf3(($5 + [112]), $29, $30, *($5 + [128]), *((($5 + [128]) + [8])))
	CALL __multf3(($5 + [96]), *($5 + [112]), *((($5 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [24336])) | $22)
	$30 = *((($5 + [96]) + [8]))
	$29 = *($5 + [96])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$221 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$221
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$220 }
	goto $label$167 
	
.LABEL $label$170
	$27 = ($15 + [-1])
	$28 = ($28 + [-2])
	$23 = ($21 & [8])
	if ( $23 ){ goto $label$161 }
	
.LABEL $label$169
	$15 = [9]
	if ( ($24 == 0) ){ goto $label$222 }
	$23 = *(($16 + [-4]))
	if ( ($23 == 0) ){ goto $label$222 }
	$15 = [0]
	if ( ((uint_32)$23 % (uint_32)[10]) ){ goto $label$222 }
	$17 = [10]
	$15 = [0]
	
.LOOP $label$223:
	$15 = ($15 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( (((uint_32)$23 % (uint_32)$17) == 0) ){ goto $label$223 }
	
.LABEL $label$222
	$17 = (((int_32)int_32(($16 - $36) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($28 | [32]) != (int_32)[102]) ){ goto $label$166 }
	$23 = [0]
	$15 = ($17 - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$168
	$18 = ($5 + [704])
	
.LOOP $label$224:
	$19 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [32]), $19)
	CALL __subtf3(($5 + [16]), $29, $30, *($5 + [32]), *((($5 + [32]) + [8])))
	CALL __multf3($5, *($5 + [16]), *((($5 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($15 = $18)) = (*(($19 + [24336])) | $22)
	$30 = *(($5 + [8]))
	$29 = *($5)
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$225 }
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$225 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$225
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$224 }
	
.LABEL $label$167
	$15 = [-1]
	$22 = ($10 - $24)
	if ( ((int_32)(([2147483645] - $25) - $22) < (int_32)$16) ){ goto $label$5 }
	$23 = ($18 - ($5 + [704]))
	$28 = ( ( ($16 + [2]) ? $23 : ((int_32)($8 + $18) < (int_32)$16) ) ? $23 : $16 )
	$16 = (($22 + $25) + $28)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$163 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$163 }
	$15 = ($27 <= [256])
	$27 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $27 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$165 }
	$15 = ($18 == 0)
	$18 = $27
	
.LOOP $label$226:
	if ( (($15 & [1]) == 0) ){ goto $label$227 }
	CALL $216(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$227
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$226 }
	if ( $17 ){ goto $label$163 }
	$27 = ($27 & [255])
	goto $label$164 
	
.LABEL $label$166
	$23 = [0]
	$15 = (($17 + $19) - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$27 = ( $27 ? $15 : ((int_32)$27 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$165
	if ( $18 ){ goto $label$163 }
	
.LABEL $label$164
	CALL $216(($5 + [432]), $27, $0)
	
.LABEL $label$163
	if ( (*($0) & [32]) ){ goto $label$228 }
	CALL $216($26, $25, $0)
	
.LABEL $label$228
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$229 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$229 }
	$15 = ($25 <= [256])
	$25 = ($20 - $16)
	CALL memset(($5 + [432]), [48], ( $25 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$231 }
	$15 = ($18 == 0)
	$18 = $25
	
.LOOP $label$232:
	if ( (($15 & [1]) == 0) ){ goto $label$233 }
	CALL $216(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$233
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$232 }
	if ( $17 ){ goto $label$229 }
	$25 = ($25 & [255])
	goto $label$230 
	
.LABEL $label$231
	if ( $18 ){ goto $label$229 }
	
.LABEL $label$230
	CALL $216(($5 + [432]), $25, $0)
	
.LABEL $label$229
	if ( (*($0) & [32]) ){ goto $label$234 }
	CALL $216(($5 + [704]), $23, $0)
	
.LABEL $label$234
	$23 = ($28 - $23)
	if ( ((int_32)$23 < (int_32)[1]) ){ goto $label$235 }
	$15 = ($23 <= [256])
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$237 }
	$15 = ($18 == 0)
	$18 = $23
	
.LOOP $label$238:
	if ( (($15 & [1]) == 0) ){ goto $label$239 }
	CALL $216(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$239
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$238 }
	if ( $17 ){ goto $label$235 }
	$23 = ($23 & [255])
	goto $label$236 
	
.LABEL $label$237
	if ( $18 ){ goto $label$235 }
	
.LABEL $label$236
	CALL $216(($5 + [432]), $23, $0)
	
.LABEL $label$235
	if ( (*($0) & [32]) ){ goto $label$240 }
	CALL $216($24, $22, $0)
	
.LABEL $label$240
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$241 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$241 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$243 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$244:
	if ( (($15 & [1]) == 0) ){ goto $label$245 }
	CALL $216(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$245
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$244 }
	if ( $17 ){ goto $label$241 }
	$22 = ($22 & [255])
	goto $label$242 
	
.LABEL $label$243
	if ( $18 ){ goto $label$241 }
	
.LABEL $label$242
	CALL $216(($5 + [432]), $22, $0)
	
.LABEL $label$241
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$162
	$23 = ($21 & [8])
	
.LABEL $label$161
	$15 = [-1]
	$25 = ($27 | $23)
	if ( ((int_32)$27 > (int_32)( [2147483645] ? [2147483646] : $25 )) ){ goto $label$5 }
	$26 = (($27 + ((int_32)$25 != (int_32)[0])) + [1])
	$33 = ((int_32)($28 | [32]) != (int_32)[102])
	if ( $33 ){ goto $label$247 }
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	$19 = ( $19 ? [0] : ((int_32)$19 > (int_32)[0]) )
	goto $label$246 
	
.LABEL $label$247
	$17 = $10
	$38 = ((int_32)$19 < (int_32)[0])
	$15 = ( $22 ? $19 : $38 )
	if ( ($15 == 0) ){ goto $label$248 }
	
.LOOP $label$249:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$249 }
	
.LABEL $label$248
	if ( ((int_32)($10 - $17) > (int_32)[1]) ){ goto $label$250 }
	$15 = ($17 + [-1])
	
.LOOP $label$251:
	*($15) = [48]
	$19 = ($10 - $15)
	$17 = ($15 + [-1])
	$15 = $17
	if ( ((int_32)$19 < (int_32)[2]) ){ goto $label$251 }
	$17 = ($17 + [1])
	
.LABEL $label$250
	*(($37 = ($17 + [-2]))) = $28
	$15 = [-1]
	*(($17 + [-1])) = ( [45] ? [43] : $38 )
	$19 = ($10 - $37)
	if ( ((int_32)$19 > (int_32)([2147483647] - $26)) ){ goto $label$5 }
	
.LABEL $label$246
	$15 = [-1]
	$19 = ($19 + $26)
	if ( ((int_32)$19 > (int_32)((int_32)$31 ^ (int_32)[2147483647])) ){ goto $label$5 }
	$26 = ($19 + $31)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$252 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$252 }
	$15 = ($28 <= [256])
	$28 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $28 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$254 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$255:
	if ( (($15 & [1]) == 0) ){ goto $label$256 }
	CALL $216(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$256
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$255 }
	if ( $22 ){ goto $label$252 }
	$28 = ($28 & [255])
	goto $label$253 
	
.LABEL $label$254
	if ( $19 ){ goto $label$252 }
	
.LABEL $label$253
	CALL $216(($5 + [432]), $28, $0)
	
.LABEL $label$252
	if ( (*($0) & [32]) ){ goto $label$257 }
	CALL $216($32, $31, $0)
	
.LABEL $label$257
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$258 }
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$258 }
	$15 = ($28 <= [256])
	$28 = ($20 - $26)
	CALL memset(($5 + [432]), [48], ( $28 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$260 }
	$15 = ($19 == 0)
	$19 = $28
	
.LOOP $label$261:
	if ( (($15 & [1]) == 0) ){ goto $label$262 }
	CALL $216(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$262
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$261 }
	if ( $22 ){ goto $label$258 }
	$28 = ($28 & [255])
	goto $label$259 
	
.LABEL $label$260
	if ( $19 ){ goto $label$258 }
	
.LABEL $label$259
	CALL $216(($5 + [432]), $28, $0)
	
.LABEL $label$258
	if ( $33 ){ goto $label$273 }
	$23 = ( $36 ? $18 : ((uint_32)$18 > (uint_32)$36) )
	$22 = $23
	
.LOOP $label$274:
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$276 }
	$18 = [0]
	
.LOOP $label$277:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($6 + $18)) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$277 }
	goto $label$275 
	
.LABEL $label$276
	$18 = [0]
	
.LABEL $label$275
	$15 = ($7 + $18)
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$281 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$280 }
	
.LOOP $label$282:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$282 }
	$15 = ($5 + [704])
	if ( ((*($0) & [32]) == 0) ){ goto $label$279 }
	goto $label$278 
	
.LABEL $label$281
	if ( $18 ){ goto $label$280 }
	*(($15 = ($15 + [-1]))) = [48]
	
.LABEL $label$280
	if ( (*($0) & [32]) ){ goto $label$278 }
	
.LABEL $label$279
	CALL $216($15, ($7 - $15), $0)
	
.LABEL $label$278
	$22 = ($22 + [4])
	if ( ((uint_32)$22 <= (uint_32)$36) ){ goto $label$274 }
	if ( ($25 == 0) ){ goto $label$283 }
	if ( (*($0) & [32]) ){ goto $label$283 }
	CALL $216([8761], [1], $0)
	
.LABEL $label$283
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$272 }
	if ( ((uint_32)$22 >= (uint_32)$16) ){ goto $label$271 }
	
.LOOP $label$284:
	$15 = $7
	$18 = *($22)
	if ( ($18 == 0) ){ goto $label$286 }
	$15 = $7
	
.LOOP $label$287:
	$19 = ((uint_32)$18 / (uint_32)[10])
	*(($15 = ($15 + [-1]))) = (($18 - ((int_32)$19 * (int_32)[10])) | [48])
	$17 = ((uint_32)$18 > (uint_32)[9])
	$18 = $19
	if ( $17 ){ goto $label$287 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$285 }
	
.LABEL $label$286
	
.LOOP $label$288:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$288 }
	
.LABEL $label$285
	if ( (*($0) & [32]) ){ goto $label$289 }
	CALL $216($15, ( $27 ? [9] : ((int_32)$27 < (int_32)[9]) ), $0)
	
.LABEL $label$289
	$15 = ($27 + [-9])
	if ( ((int_32)$27 < (int_32)[10]) ){ goto $label$270 }
	$27 = $15
	$22 = ($22 + [4])
	if ( ($22 <= $16) ){ goto $label$284 }
	goto $label$270 
	
.LABEL $label$273
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$266 }
	$25 = ( $16 ? ($18 + [4]) : $24 )
	if ( ($23 == 0) ){ goto $label$268 }
	$22 = $18
	
.LOOP $label$290:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$292 }
	$19 = [0]
	
.LOOP $label$293:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$293 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$291 }
	
.LABEL $label$292
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$291
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$295 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$294 }
	
.LOOP $label$296:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$296 }
	goto $label$294 
	
.LABEL $label$295
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$297 }
	CALL $216($17, [1], $0)
	$15 = *($0)
	
.LABEL $label$297
	$17 = ($17 + [1])
	if ( ($15 & [32]) ){ goto $label$294 }
	CALL $216([8761], [1], $0)
	
.LABEL $label$294
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$298 }
	CALL $216($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$298
	$27 = ($27 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$290 }
	goto $label$267 
	
.LABEL $label$272
	$15 = $27
	if ( ((int_32)$15 >= (int_32)[1]) ){ goto $label$269 }
	goto $label$265 
	
.LABEL $label$271
	$15 = $27
	
.LABEL $label$270
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$265 }
	
.LABEL $label$269
	$18 = ($15 <= [256])
	CALL memset(($5 + [432]), [48], ( $15 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$300 }
	$18 = ($19 == 0)
	$19 = $15
	
.LOOP $label$301:
	if ( (($18 & [1]) == 0) ){ goto $label$302 }
	CALL $216(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$302
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$301 }
	if ( $16 ){ goto $label$265 }
	$15 = ($15 & [255])
	goto $label$299 
	
.LABEL $label$300
	if ( $19 ){ goto $label$265 }
	
.LABEL $label$299
	CALL $216(($5 + [432]), $15, $0)
	if ( ((int_32)$21 == (int_32)[8192]) ){ goto $label$264 }
	goto $label$263 
	
.LABEL $label$268
	$22 = $18
	
.LOOP $label$303:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$305 }
	$19 = [0]
	
.LOOP $label$306:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$306 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$304 }
	
.LABEL $label$305
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$304
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$308 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$307 }
	
.LOOP $label$309:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$309 }
	goto $label$307 
	
.LABEL $label$308
	if ( (*($0) & [32]) ){ goto $label$310 }
	CALL $216($17, [1], $0)
	
.LABEL $label$310
	$17 = ($17 + [1])
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$307 }
	if ( (*($0) & [32]) ){ goto $label$307 }
	CALL $216([8761], [1], $0)
	
.LABEL $label$307
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$311 }
	CALL $216($17, ( $15 ? $27 : ((int_32)$27 > (int_32)$15) ), $0)
	
.LABEL $label$311
	$27 = ($27 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$267 }
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$303 }
	
.LABEL $label$267
	if ( ((int_32)$27 < (int_32)[1]) ){ goto $label$266 }
	$18 = ($27 <= [256])
	CALL memset(($5 + [432]), [48], ( $27 ? [256] : $18 ))
	$19 = *($0)
	$15 = ($19 & [32])
	if ( $18 ){ goto $label$313 }
	$15 = ($15 == 0)
	$18 = $27
	
.LOOP $label$314:
	if ( (($15 & [1]) == 0) ){ goto $label$315 }
	CALL $216(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$315
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$314 }
	if ( $17 ){ goto $label$266 }
	$27 = ($27 & [255])
	goto $label$312 
	
.LABEL $label$313
	if ( $15 ){ goto $label$266 }
	
.LABEL $label$312
	CALL $216(($5 + [432]), $27, $0)
	
.LABEL $label$266
	if ( (*($0) & [32]) ){ goto $label$265 }
	CALL $216($37, ($10 - $37), $0)
	
.LABEL $label$265
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$263 }
	
.LABEL $label$264
	if ( ((int_32)$20 <= (int_32)$26) ){ goto $label$263 }
	$15 = ($16 <= [256])
	$16 = ($20 - $26)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$317 }
	$15 = ($18 == 0)
	$18 = $16
	
.LOOP $label$318:
	if ( (($15 & [1]) == 0) ){ goto $label$319 }
	CALL $216(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$319
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$318 }
	if ( $17 ){ goto $label$263 }
	$16 = ($16 & [255])
	goto $label$316 
	
.LABEL $label$317
	if ( $18 ){ goto $label$263 }
	
.LABEL $label$316
	CALL $216(($5 + [432]), $16, $0)
	
.LABEL $label$263
	$15 = ( $20 ? $26 : ((int_32)$20 > (int_32)$26) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	*(CALL $198()) = [75]
	
.LABEL $label$2
	$14 = [-1]
	
.LABEL $label$1
	$global$0 = ($5 + [8128])
	$15
	$18
	return $14
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $243($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9076])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $243($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $165 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [9064 align=4]) = (int_64)0
	*([0] + [9072]) = [0]
	$0 = CALL $237([17792])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*([0] + [9064]) = ($0 << [1])
	$1 = [9065]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [9064]) = ($2 | [1])
	*([0] + [9072]) = $1
	*([0] + [9068]) = $0
	
.LABEL $label$3
	CALL memcpy($1, [17792], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL $200([19], [0], [8192])
	return (unreachable)
	
.LABEL $label$1
	CALL $174([9064])
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $163 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [76]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [21734])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3020371202490236928)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [21680])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [21680])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $65(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [20157])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [20157])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $133($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [20157])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [20157])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [20157])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $133(CALL $132($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [20157])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [20157])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [20157])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [20157])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [20157])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [20157])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $230 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $244 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $245($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8265])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $247($0)
	
.LABEL $label$1
}

int_32 .FUNC $245 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9388]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9392])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9388]) = [1]
	$2 = ($2 << [16])
	*([0] + [9392]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9392])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9392]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9388]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9388]) = [1]
	$3 = ($3 << [16])
	*([0] + [9392]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9392])
	
.LABEL $label$10
	*([0] + [9392]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $242 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $243($1)
	
.LABEL $label$2
	*(CALL $198()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $243(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $247($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $243 (int_32 $0)
{
	return CALL $244([9396], $0)
}

int_64 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [192])
	$global$0 = $1
	CALL memset(($1 + [32]), [0], [80])
	$2 = ($0 + [168])
	$3 = *(($0 + [196]))
	if ( ((int_32)$3 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$0 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$2), [19850])
	if ( $0 ){ goto $label$1 }
	$0 = ($1 + [32])
	goto $label$1 
	
.LABEL $label$2
	$0 = CALL db_find_i64(*($2), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $45($2, $0)
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$2), [19850])
	goto $label$1 
	
.LABEL $label$3
	$0 = ($1 + [32])
	
.LABEL $label$1
	CALL memcpy(($1 + [112]), $0, [80])
	*($1 + [112]) = ((int_64)*($1 + [112]) + (int_64)1)
	*($1 + [16]) = [17911]
	*($1 + [20]) = CALL $237([17911])
	*($1 + [8]) = *($1 + [16])
	CALL $72($2, ($1 + [112]), *(CALL $13(($1 + [24]), ($1 + [8]))))
	$4 = *($1 + [112])
	$global$0 = ($1 + [192])
	return $4
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert2()), [20106])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([160])
	CALL $142($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [140])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $126(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $240 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [32])
	$global$0 = $4
	if ( ((int_32)*($1) != (int_32)[1]) ){ goto $label$1 }
	$5 = ($0 + [208])
	$6 = *($2)
	$8 = *(($0 + [236]))
	$7 = *(($0 + [232]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	$9 = ($6 & [255])
	
.LOOP $label$5:
	$1 = ($8 + [-24])
	$10 = *($1)
	if ( ((int_32)*($10) == (int_32)$9) ){ goto $label$4 }
	$8 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($10 + [8]) == (int_32)$5), [19850])
	goto $label$2 
	
.LABEL $label$3
	$10 = [0]
	$1 = CALL db_find_i64(*($5), *(($0 + [216])), (int_64)-6525023824864346112, ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$10 = CALL $57($5, $1)
	CALL eosio_assert(((int_32)*($10 + [8]) == (int_32)$5), [19850])
	
.LABEL $label$2
	CALL $2(((int_32)$10 != (int_32)[0]), [18324], [20005])
	$8 = CALL $47($0, $3)
	$11 = *($3)
	$1 = *($2)
	if ( (($1 + [-2]) <= [2]) ){ goto $label$10 }
	if ( ((uint_32)($1 + [-4]) >= (uint_32)[2]) ){ goto $label$9 }
	if ( ($8 == 0) ){ goto $label$8 }
	CALL $2((uint_64)($11 <= (int_64)500001), [21125], [20020])
	goto $label$1 
	
.LABEL $label$10
	if ( ($8 == 0) ){ goto $label$7 }
	CALL $2((uint_64)($11 <= (int_64)1000001), [21125], [20020])
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $2((uint_64)($11 <= (int_64)100001), [21125], [20020])
	goto $label$1 
	
.LABEL $label$8
	CALL $2((uint_64)($11 <= (int_64)50000001), [21125], [20020])
	goto $label$1 
	
.LABEL $label$7
	CALL $2((uint_64)($11 <= (int_64)100000001), [21125], [20020])
	goto $label$1 
	
.LABEL $label$6
	CALL $2((uint_64)($11 <= (int_64)10000001), [21125], [20020])
	
.LABEL $label$1
	$8 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$11 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$11 = $12
	$8 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$11 = $12
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $8 ){ goto $label$15 }
	$8 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$8 = [0]
	
.LABEL $label$11
	CALL $2($8, [21150], [20010])
	CALL $103(($4 + [16]), $0, $2, $3)
	CALL $104($4, $0, $3)
	CALL eosio_assert(((int_64)*($4 + [24]) == (int_64)*($4 + [8])), [20028])
	CALL $2(((int_64)*($4 + [16]) <= (int_64)*($4)), [21167], [20021])
	$global$0 = ($4 + [32])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($0 + [248])
	$3 = ((int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8) + (int_64)*($1 + [16]))
	$5 = *(($0 + [276]))
	$4 = *(($0 + [272]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)((int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8) + (int_64)*($7)) == (int_64)$3) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$2), [19850])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($2), *(($0 + [256])), (int_64)-3665743317141815296, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $115($2, $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$2), [19850])
	
.LABEL $label$1
	$5 = [0]
	CALL $2(((int_32)$7 != (int_32)[0]), [21236], [20002])
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$3 = $8
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$3 = $8
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$9 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	CALL $2($5, [21150], [20010])
	CALL $2(((uint_64)*($1) >= (uint_64)*($7 + [16])), [21255], [20019])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = CALL current_time()
	$4 = ((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $2(((uint_64)*($2) > (uint_64)$4), [21302], [20032])
	$5 = [0]
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	
.LOOP $label$1:
	$6 = *(($1 + $5))
	CALL $183(($3 + [16]), *((uint_32($6 >> [4]) + [8373])))
	CALL $183(($3 + [16]), *((($6 & [15]) + [8373])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	$7 = CALL $4(($3 + [16]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$2
	$8 = ($0 + [368])
	CALL $116(($3 + [8]), $8, $7)
	CALL $2((*($3 + [12]) == 0), [21320], [20038])
	*($3) = $8
	*($3 + [16]) = (int_64)0
	*($3 + [40]) = $4
	$5 = [0]
	$6 = $8
	$9 = [0]
	$10 = CALL db_idx64_upperbound(*($0 + [368]), *(($0 + [376])), (int_64)-4057510847608520704, ($3 + [40]), ($3 + [16]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	CALL $116(($3 + [32]), $8, *($3 + [16]))
	*((($9 = *($3 + [36])) + [56])) = $10
	$6 = *($3)
	
.LABEL $label$3
	*($3 + [16]) = (int_64)0
	*($3 + [40]) = (int_64)0
	$10 = CALL db_idx64_lowerbound(*($6), *($6 + [8]), (int_64)-4057510847608520704, ($3 + [40]), ($3 + [16]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	CALL $116(($3 + [32]), $6, *($3 + [16]))
	*((($5 = *($3 + [36])) + [56])) = $10
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$5 }
	$10 = $3
	$6 = [1]
	
.LOOP $label$6:
	*($3 + [16]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $10))
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [20831])
	CALL $117(($3 + [16]))
	CALL $118(*($3), $5)
	$4 = *($3 + [16])
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$9 == (int_32)$5)) ){ goto $label$5 }
	$10 = (CASTING uint_32)(uint_64 $4)
	$11 = ($6 <= [3])
	$6 = ($6 + [1])
	if ( $11 ){ goto $label$6 }
	
.LABEL $label$5
	$4 = *($0)
	*($3 + [20]) = $2
	*($3 + [16]) = $1
	CALL $119(($3 + [40]), $8, $4, ($3 + [16]))
	$global$0 = ($3 + [48])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$6 = ($global$0 - [96])
	$global$0 = $6
	$7 = *($1)
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$4 }
	$8 = [0]
	$9 = *([0] + [20296])
	
.LOOP $label$6:
	*((($6 + [8]) + ($1 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$8 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($6 + [88])) = [0]
	*($6 + [80]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$3 }
	*($6 + [80]) = ($8 << [1])
	$9 = (($6 + [80]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($6 + [88])) = [0]
	*($6 + [80]) = (int_64)0
	*($6 + [80]) = [0]
	$1 = (($6 + [80]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($6 + [80]) = ($10 | [1])
	*($6 + [88]) = $9
	*($6 + [84]) = $8
	
.LABEL $label$2
	$10 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$7:
	*(($9 + $1)) = *((($6 + [8]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$1 = ($9 + $8)
	
.LABEL $label$1
	*($1) = [0]
	CALL $182(($6 + [80]), [21335])
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = [0]
	$8 = (($6 + [48]) | [1])
	$7 = *($2)
	
.LOOP $label$8:
	$11 = ((uint_64)$7 / (uint_64)(int_64)10)
	$1 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$11 * (int_64)10))
	CALL $1(($6 + [8]), int_32((( ($1) | [48]) ? ($1 + [55]) : ($1 <= [10]) ) << [24]) >> [24]), ($6 + [48]))
	if ( (*($6 + [48]) & [1]) ){ goto $label$10 }
	*($6 + [48]) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*((($6 + [48]) + [8]))) = [0]
	*($6 + [52]) = [0]
	
.LABEL $label$9
	CALL $178(($6 + [48]), [0])
	*((($6 + [48]) + [8])) = *((($6 + [8]) + [8]))
	*($6 + [48]) = *($6 + [8])
	$1 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $11
	if ( $1 ){ goto $label$8 }
	$1 = *($6 + [48])
	$9 = ($1 & [1])
	$10 = ($6 + [56])
	CALL $184(($6 + [80]), ( *($10) ? $8 : $9 ), ( *($6 + [52]) ? uint_32($1 >> [1]) : $9 ))
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$11
	CALL $182(($6 + [80]), [21335])
	$1 = [0]
	*($6 + [16]) = [0]
	*($6 + [8]) = (int_64)0
	
.LOOP $label$12:
	$8 = *(($3 + $1))
	CALL $183(($6 + [8]), *((uint_32($8 >> [4]) + [8373])))
	CALL $183(($6 + [8]), *((($8 & [15]) + [8373])))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$12 }
	$1 = *($6 + [8])
	$3 = ($1 & [1])
	$8 = (($6 + [8]) + [8])
	CALL $184(($6 + [80]), ( *($8) ? (($6 + [8]) | [1]) : $3 ), ( *($6 + [12]) ? uint_32($1 >> [1]) : $3 ))
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$13
	CALL $182(($6 + [80]), [21335])
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = [0]
	$3 = (($6 + [48]) | [1])
	$7 = *($4)
	
.LOOP $label$14:
	$11 = ((uint_64)$7 / (uint_64)(int_64)10)
	$1 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$11 * (int_64)10))
	CALL $1(($6 + [8]), int_32((( ($1) | [48]) ? ($1 + [55]) : ($1 <= [10]) ) << [24]) >> [24]), ($6 + [48]))
	if ( (*($6 + [48]) & [1]) ){ goto $label$16 }
	*($6 + [48]) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*((($6 + [48]) + [8]))) = [0]
	*($6 + [52]) = [0]
	
.LABEL $label$15
	CALL $178(($6 + [48]), [0])
	*((($6 + [48]) + [8])) = *($8)
	*($6 + [48]) = *($6 + [8])
	$1 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $11
	if ( $1 ){ goto $label$14 }
	$1 = *($6 + [48])
	$8 = ($1 & [1])
	$9 = ($6 + [56])
	CALL $184(($6 + [80]), ( *($9) ? $3 : $8 ), ( *($6 + [52]) ? uint_32($1 >> [1]) : $8 ))
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$17
	$1 = ( *($6 + [88]) ? (($6 + [80]) | [1]) : (*($6 + [80]) & [1]) )
	CALL sha256($1, CALL $237($1), ($6 + [48]))
	*($6 + [7]) = [0]
	CALL $10(($6 + [8]), [9064], ($6 + [7]))
	CALL assert_recover_key(($6 + [48]), $5, [66], ($6 + [8]), [34])
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($6 + [88])))
	
.LABEL $label$18
	$global$0 = ($6 + [96])
}

void .FUNC $54 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [384])
	$global$0 = $4
	CALL memset(($4 + [224]), [0], [80])
	$5 = ($0 + [168])
	$6 = *(($0 + [196]))
	if ( ((int_32)$6 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$5), [19850])
	if ( $6 ){ goto $label$1 }
	$6 = ($4 + [224])
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL db_find_i64(*($5), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $45($5, $6)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$5), [19850])
	goto $label$1 
	
.LABEL $label$3
	$6 = ($4 + [224])
	
.LABEL $label$1
	CALL memcpy(($4 + [304]), $6, [80])
	CALL $2((*($4 + [321]) == 0), [17924], [20027])
	CALL $2(((uint_64)(int_64))(((int_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($4 + [368])) > (uint_64)(int_64)30), [18799], [20040])
	*($4 + [216]) = [17911]
	*($4 + [220]) = CALL $237([17911])
	*($4 + [24]) = *($4 + [216])
	if ( ((int_64)*(CALL $13(($4 + [224]), ($4 + [24]))) == (int_64)$1) ){ goto $label$4 }
	*($4 + [208]) = [17898]
	*($4 + [212]) = CALL $237([17898])
	*($4 + [16]) = *($4 + [208])
	if ( ((int_64)*(CALL $13(($4 + [128]), ($4 + [16]))) == (int_64)$1) ){ goto $label$4 }
	CALL require_auth($1)
	$7 = [0]
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	$9 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$9 = $10
	$7 = [1]
	$2 = $6
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$9 = $10
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$2 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $2 ){ goto $label$9 }
	$7 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	
.LABEL $label$5
	CALL $2($7, [18893], [20009])
	CALL $2(((int_64)$8 > (int_64)0), [18910], [20010])
	$6 = *($3)
	if ( ($6 & [1]) ){ goto $label$11 }
	$6 = uint_32($6 >> [1])
	goto $label$10 
	
.LABEL $label$11
	$6 = *($3 + [4])
	
.LABEL $label$10
	CALL $2(($6 <= [257]), [18942], [20011])
	*($4 + [232]) = $8
	*($4 + [224]) = $1
	*($4 + [240]) = $8
	*($4 + [248]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [288]) = (int_64)-1
	*($4 + [296]) = (int_64)0
	CALL $78($0, ($4 + [224]))
	CALL memset(($4 + [48]), [0], [80])
	$6 = *(($0 + [196]))
	if ( ((int_32)$6 == (int_32)*(($0 + [192]))) ){ goto $label$13 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$5), [19850])
	if ( $6 ){ goto $label$12 }
	$6 = ($4 + [48])
	goto $label$12 
	
.LABEL $label$13
	$6 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$6 = CALL $45($5, $6)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$5), [19850])
	goto $label$12 
	
.LABEL $label$14
	$6 = ($4 + [48])
	
.LABEL $label$12
	CALL memcpy(($4 + [128]), $6, [80])
	CALL memcpy(($4 + [304]), ($4 + [128]), [80])
	*($4 + [312]) = ((int_64)*($4 + [312]) + (int_64)$8)
	*($4 + [32]) = [17911]
	*($4 + [36]) = CALL $237([17911])
	*($4 + [8]) = *($4 + [32])
	CALL $72($5, ($4 + [304]), *(CALL $13(($4 + [40]), ($4 + [8]))))
	
.LABEL $label$4
	$global$0 = ($4 + [384])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $105($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $106(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $105($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [20157])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [20157])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $133(CALL $132($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [16])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [19901])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $243($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([20])) + [8]) = $0
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [19924])
	CALL memcpy($5, $2, [1])
	CALL eosio_assert(((int_32)$4 != (int_32)[1]), [19924])
	CALL memcpy(($5 + [1]), ($2 + [1]), [1])
	CALL eosio_assert(((uint_32)($4 + [-2]) > (uint_32)[3]), [19924])
	CALL memcpy(($5 + [4]), ($2 + [2]), [4])
	*($5 + [12]) = $1
	*($3 + [8]) = $5
	$6 = *($5)
	*($3 + [7]) = $6
	*($3) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	*($8 + [16]) = $1
	*($3 + [8]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $76(($0 + [24]), ($3 + [8]), ($3 + [7]), $3)
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $247($2)
	
.LABEL $label$6
	$1 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [16])
	return $5
}

void .FUNC $247 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17780])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17588]
	$3 = (((int_32)$1 * (int_32)[12]) + [17588])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [19924])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [19924])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [19924])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [19924])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [19924])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [19901])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $243($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [19924])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [19924])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $151(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $247($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $151 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [19924])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [19924])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [19924])
	CALL memcpy($0, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$global$0 = ($2 + [16])
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = (*($2) + [25])
	*(($2 = *($1))) = $1
	$3 = *($0 + [28])
	$0 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [32])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *(($0 + [28]))
	$3 = ( *(($0 + [32])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [16])
	*($2) = $1
	$3 = *($0 + [56])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [60])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *(($0 + [56]))
	$3 = ( *(($0 + [60])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($0 + [68])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [72])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *(($0 + [68]))
	$0 = ( *(($0 + [72])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [20157])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [20157])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [20157])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [20157])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [20157])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $114($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $178($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $178($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $174($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [20157])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [20157])
	CALL memcpy(*($0 + [4]), ($4 + [24]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $110(*($1), ($4 + [28]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($0 + [4]), ($4 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($4 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [20157])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $110(*($1), ($4 + [56]))
	CALL $110(*($1), ($4 + [68]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $237($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $177($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $177($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $224 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$6 = ($5) & [32767]
	if ( ((int_32)$6) == (int_32)[32767]) ){ goto $label$1 }
	if ( $6 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($4, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL $224(($4 + [16]), *($4), *(($4 + [8])), $3)
	$5 = (*($3) + [-120])
	$2 = *($4 + [24])
	$1 = *($4 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($5 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($5 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	*($3) = $5
	
.LABEL $label$1
	*($0) = $1
	*($0 + [8]) = $2
	$global$0 = ($4 + [32])
}

void .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $181($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [19901])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $243($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [19924])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [19924])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $100(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $247($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [432]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [436])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [432]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [392]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [396])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [392]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [352]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [356])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [352]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [312]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [316])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [312]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [272]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [276])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [272]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [236])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [232]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$31 }
	$2 = ($0 + [196])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$35 }
	CALL _ZdlPv($4)
	
.LABEL $label$35
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$34 }
	$3 = *(($0 + [192]))
	goto $label$32 
	
.LABEL $label$33
	$3 = $1
	
.LABEL $label$32
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$36 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$38 }
	
.LOOP $label$39:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$40 }
	CALL _ZdlPv($4)
	
.LABEL $label$40
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$39 }
	$3 = *(($0 + [152]))
	goto $label$37 
	
.LABEL $label$38
	$3 = $1
	
.LABEL $label$37
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$36
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$41 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$43 }
	
.LOOP $label$44:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	CALL _ZdlPv($4)
	
.LABEL $label$45
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$44 }
	$3 = *(($0 + [112]))
	goto $label$42 
	
.LABEL $label$43
	$3 = $1
	
.LABEL $label$42
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$41
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$46 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$48 }
	
.LOOP $label$49:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$50 }
	CALL _ZdlPv($4)
	
.LABEL $label$50
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$49 }
	$3 = *(($0 + [72]))
	goto $label$47 
	
.LABEL $label$48
	$3 = $1
	
.LABEL $label$47
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$46
	if ( ((*($0 + [28]) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*(($0 + [36])))
	
.LABEL $label$51
	return $0
}

int_32 .FUNC $225 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$global$0 = $3
	*($3 + [284]) = $2
	*(($3 + [272])) = (int_64)0
	*(($3 + [264])) = (int_64)0
	*(($3 + [256])) = (int_64)0
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = (int_64)0
	*($3 + [280]) = *($3 + [284])
	$4 = [0]
	$2 = [-1]
	if ( ((int_32)CALL $226([0], $1, ($3 + [280]), ($3 + [80]), ($3 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $201($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) <= (int_32)[0]) ){ goto $label$6 }
	$5 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*($0) = ($2 & [-33])
	$5 = ($2 & [32])
	if ( *($0 + [48]) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($3 + [80])
	*($0 + [28]) = $3
	*($0 + [20]) = $3
	$7 = *($0 + [44])
	*($0 + [44]) = $3
	$2 = CALL $226($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	if ( ($7 == 0) ){ goto $label$3 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $7
	*($6) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$7 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $7 )
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $226($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	
.LABEL $label$3
	$1 = *($0)
	*($0) = ($1 | $5)
	$1 = ($1 & [32])
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $202($0)
	
.LABEL $label$7
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	$global$0 = ($3 + [288])
	return $2
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [19901])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $243($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [32]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	CALL $164(($3 + [40]), ($3 + [32]))
	*($5 + [76]) = $1
	*($5 + [80 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5 + [64])
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $64(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $247($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $67 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [480])
	$global$0 = $4
	*(($5 = (($4 + [464]) + [8]))) = *(($3 + [8]))
	*($4 + [464]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [192]) + [8])) = $3
	$2 = *($4 + [464])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [192]) = $2
	*(($0 + [36])) = [0]
	*($0 + [28 align=4]) = (int_64)0
	$5 = ($0 + [28])
	$3 = CALL $237([19784])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0 + [28]) = ($6 | [1])
	*(($0 + [36])) = $5
	*(($0 + [32])) = $3
	
.LABEL $label$3
	CALL memcpy($5, [19784], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	*($4 + [448]) = [17911]
	*($4 + [452]) = CALL $237([17911])
	*($4 + [168]) = *($4 + [448])
	$3 = CALL $13(($4 + [456]), ($4 + [168]))
	*($4 + [440]) = [17911]
	*($4 + [444]) = CALL $237([17911])
	*($4 + [160]) = *($4 + [440])
	CALL $13(($4 + [192]), ($4 + [160]))
	*(($0 + [56])) = (int_64)-2984964984929477328
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = (int_64)0
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*($0 + [48]) = *($3)
	*($4 + [424]) = [17911]
	*($4 + [428]) = CALL $237([17911])
	*($4 + [152]) = *($4 + [424])
	$3 = CALL $13(($4 + [432]), ($4 + [152]))
	*($4 + [416]) = [17911]
	*($4 + [420]) = CALL $237([17911])
	*($4 + [144]) = *($4 + [416])
	CALL $13(($4 + [192]), ($4 + [144]))
	*(($0 + [96])) = (int_64)-2984964984929477328
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*($0 + [88]) = *($3)
	*($4 + [400]) = [17911]
	*($4 + [404]) = CALL $237([17911])
	*($4 + [136]) = *($4 + [400])
	$3 = CALL $13(($4 + [408]), ($4 + [136]))
	*($4 + [392]) = [17911]
	*($4 + [396]) = CALL $237([17911])
	*($4 + [128]) = *($4 + [392])
	CALL $13(($4 + [192]), ($4 + [128]))
	*(($0 + [136])) = (int_64)-2984964984929477328
	*(($0 + [144])) = (int_64)-1
	*(($0 + [152])) = (int_64)0
	*(($0 + [160])) = [0]
	*($0 + [128]) = *($3)
	*($4 + [376]) = [17911]
	*($4 + [380]) = CALL $237([17911])
	*($4 + [120]) = *($4 + [376])
	$3 = CALL $13(($4 + [384]), ($4 + [120]))
	*($4 + [368]) = [17911]
	*($4 + [372]) = CALL $237([17911])
	*($4 + [112]) = *($4 + [368])
	CALL $13(($4 + [192]), ($4 + [112]))
	*(($0 + [176])) = (int_64)-2984964984929477328
	*(($0 + [184])) = (int_64)-1
	*(($0 + [192])) = (int_64)0
	*(($0 + [200])) = [0]
	*($0 + [168]) = *($3)
	*($4 + [352]) = [17911]
	*($4 + [356]) = CALL $237([17911])
	*($4 + [104]) = *($4 + [352])
	$3 = CALL $13(($4 + [360]), ($4 + [104]))
	*($4 + [344]) = [17911]
	*($4 + [348]) = CALL $237([17911])
	*($4 + [96]) = *($4 + [344])
	CALL $13(($4 + [192]), ($4 + [96]))
	*(($0 + [216])) = (int_64)-2984964984929477328
	*(($0 + [224])) = (int_64)-1
	*(($0 + [232])) = (int_64)0
	*(($0 + [240])) = [0]
	*($0 + [208]) = *($3)
	*($4 + [328]) = [17911]
	*($4 + [332]) = CALL $237([17911])
	*($4 + [88]) = *($4 + [328])
	$3 = CALL $13(($4 + [336]), ($4 + [88]))
	*($4 + [320]) = [17911]
	*($4 + [324]) = CALL $237([17911])
	*($4 + [80]) = *($4 + [320])
	CALL $13(($4 + [192]), ($4 + [80]))
	*(($0 + [256])) = (int_64)-2984964984929477328
	*(($0 + [264])) = (int_64)-1
	*(($0 + [272])) = (int_64)0
	*(($0 + [280])) = [0]
	*($0 + [248]) = *($3)
	*($4 + [304]) = [17911]
	*($4 + [308]) = CALL $237([17911])
	*($4 + [72]) = *($4 + [304])
	$3 = CALL $13(($4 + [312]), ($4 + [72]))
	*($4 + [296]) = [17911]
	*($4 + [300]) = CALL $237([17911])
	*($4 + [64]) = *($4 + [296])
	CALL $13(($4 + [192]), ($4 + [64]))
	*(($0 + [296])) = (int_64)-2984964984929477328
	*(($0 + [304])) = (int_64)-1
	*(($0 + [312])) = (int_64)0
	*(($0 + [320])) = [0]
	*(($0 + [324])) = [0]
	*($0 + [288]) = *($3)
	*($4 + [280]) = [17911]
	*($4 + [284]) = CALL $237([17911])
	*($4 + [56]) = *($4 + [280])
	$3 = CALL $13(($4 + [288]), ($4 + [56]))
	*($4 + [272]) = [17911]
	*($4 + [276]) = CALL $237([17911])
	*($4 + [48]) = *($4 + [272])
	CALL $13(($4 + [192]), ($4 + [48]))
	*(($0 + [336])) = (int_64)-2984964984929477328
	*(($0 + [344])) = (int_64)-1
	*(($0 + [352])) = (int_64)0
	*(($0 + [360])) = [0]
	*($0 + [328]) = *($3)
	*($4 + [256]) = [17911]
	*($4 + [260]) = CALL $237([17911])
	*($4 + [40]) = *($4 + [256])
	$3 = CALL $13(($4 + [264]), ($4 + [40]))
	*($4 + [248]) = [17911]
	*($4 + [252]) = CALL $237([17911])
	*($4 + [32]) = *($4 + [248])
	CALL $13(($4 + [192]), ($4 + [32]))
	*(($0 + [376])) = (int_64)-2984964984929477328
	*(($0 + [384])) = (int_64)-1
	*(($0 + [392])) = (int_64)0
	*(($0 + [400])) = [0]
	*(($0 + [404])) = [0]
	*($0 + [368]) = *($3)
	*($4 + [232]) = [17911]
	*($4 + [236]) = CALL $237([17911])
	*($4 + [24]) = *($4 + [232])
	$3 = CALL $13(($4 + [240]), ($4 + [24]))
	*($4 + [224]) = [17911]
	*($4 + [228]) = CALL $237([17911])
	*($4 + [16]) = *($4 + [224])
	CALL $13(($4 + [192]), ($4 + [16]))
	*(($0 + [416])) = (int_64)-2984964984929477328
	*(($0 + [424])) = (int_64)-1
	*(($0 + [432])) = (int_64)0
	*(($0 + [440])) = [0]
	*($0 + [408]) = *($3)
	*($4 + [176]) = [17911]
	*($4 + [180]) = CALL $237([17911])
	*($4 + [8]) = *($4 + [176])
	CALL $13(($4 + [184]), ($4 + [8]))
	*($0 + [40]) = ($4 + [192])
	$global$0 = ($4 + [480])
	return $0
	
.LABEL $label$1
	CALL $174($5)
	return (unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [19850])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $128($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [19850])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [20481])
	CALL $134($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $135($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = CALL $237([8984])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [20700])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8983]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)4
	
.LABEL $label$1
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = $4
	CALL eosio_assert([1], [19929])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $6
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [19978])
	*($2 + [16]) = [17911]
	*($2 + [20]) = CALL $237([17911])
	*($2 + [8]) = *($2 + [16])
	CALL $127($0, ($1 + [128]), *(CALL $13(($2 + [24]), ($2 + [8]))), ($2 + [32]))
	$global$0 = ($2 + [48])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5 + [8])
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [48]) = *($5 + [24])
	*($1 + [16]) = *(*($4 + [8]))
	*($1 + [24]) = *(*($4 + [12]))
	$6 = ($1 + [24])
	$7 = ($1 + [16])
	$8 = ($1 + [48])
	$9 = ($1 + [8])
	$5 = *($0)
	$4 = *($4 + [16])
	$10 = ($4 + [304])
	$11 = *($10)
	if ( ((int_64)$11 != (int_64)-1) ){ goto $label$1 }
	$11 = (int_64)0
	$12 = ($4 + [288])
	$13 = CALL db_lowerbound_i64(*($12), *(($4 + [296])), (int_64)-3020371202490236928, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$2 }
	CALL $65($12, $13)
	*($3 + [28]) = [0]
	*($3 + [24]) = $12
	$11 = *(*(CALL $163(($3 + [24])) + [4]) + [64])
	$11 = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [304])) = $11
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($11 <= (int_64)-2), [21628])
	*($1 + [64]) = *($10)
	$2 = $2
	$4 = ($2 + [-80])
	$global$0 = $4
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($2 + [-8])
	*($3 + [16]) = $3
	*($3 + [28]) = $9
	*($3 + [24]) = $1
	*($3 + [32]) = $7
	*($3 + [36]) = $6
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = ($1 + [40])
	*($3 + [48]) = $8
	*($3 + [52]) = ($1 + [56])
	$2 = ($1 + [64])
	*($3 + [56]) = $2
	CALL $66(($3 + [24]), ($3 + [16]))
	$11 = *($1 + [64])
	*($1 + [76]) = CALL db_store_i64(*($5 + [8]), (int_64)-3020371202490236928, *(*($0 + [8])), $11, $4, [72])
	if ( (uint_64)($11 <= *($5 + [16])) ){ goto $label$3 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$11 = *($2)
	$4 = ($5 + [8])
	$14 = *($4)
	$0 = *(($0 + [8]))
	$15 = *($0)
	*($3 + [24]) = *($1)
	*($1 + [80]) = CALL db_idx64_store($14, (int_64)-3020371202490236928, $15, $11, ($3 + [24]))
	$11 = *($2)
	$14 = *($0)
	$15 = *($4)
	$16 = *(($1 + [8]))
	*($3 + [24]) = ( (int_64))((int_64)0 - $16) ? (int_64)-1 : ((int_64)$16 > (int_64)0) )
	*(($1 + [84])) = CALL db_idx64_store($15, (int_64)-3020371202490236927, $14, $11, ($3 + [24]))
	$global$0 = ($3 + [64])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3020371202490236928, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4 + [64]) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [19850])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $65($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-3020371202490236928, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [19850])
	
.LABEL $label$2
	*(($4 + [80])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $184($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $174($0)
}

void .FUNC $227 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	
.LABEL $label$18
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$16
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($3, *($1))
	*($0 + [8]) = *(($3 + [8]))
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$4 = *($1)
	*($0 + [8]) = *($1 + [8])
	*($0) = $4
	$global$0 = ($3 + [16])
	$1
}

int_32 .FUNC $228 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $229 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $228($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [19901])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $243($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [24]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [80]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [48])
	CALL $156(($3 + [40]), ($3 + [32]))
	*($5 + [84]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $91(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $247($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $237([20254])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [20254], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = [0]
	$5 = (($3 + [16]) | [1])
	$7 = *($2)
	
.LOOP $label$6:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $1(($3 + [32]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), ($3 + [16]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$8 }
	*($3 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	
.LABEL $label$7
	CALL $178(($3 + [16]), [0])
	*((($3 + [16]) + [8])) = *((($3 + [32]) + [8]))
	*($3 + [16]) = *($3 + [32])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$6 }
	$4 = *($3 + [16])
	$6 = ($4 & [1])
	CALL $184($0, ( *((($3 + [16]) + [8])) ? $5 : $6 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $6 ))
	CALL $182($0, [20262])
	$7 = *($2 + [8])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$12 }
	$5 = [0]
	$2 = *([0] + [20296])
	
.LOOP $label$14:
	*((($3 + [32]) + ($4 = $5))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$13 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$11 }
	*($3) = ($5 << [1])
	$2 = ($3 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$5 = $4
	goto $label$9 
	
.LABEL $label$11
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $5
	
.LABEL $label$10
	$6 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$15:
	*(($2 + $4)) = *((($3 + [32]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$15 }
	$5 = ($2 + $5)
	$4 = ($3 | [1])
	
.LABEL $label$9
	*($5) = [0]
	$5 = *($3)
	$2 = ($5 & [1])
	CALL $184($0, ( *($3 + [8]) ? $4 : $2 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $2 ))
	CALL $182($0, [20272])
	if ( (*($3) & [1]) ){ goto $label$17 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($3 + [8])))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($3 + [24])))
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = *(($1 + [216]))
	*($4 + [47]) = [0]
	$6 = CALL db_lowerbound_i64(*($1 + [208]), $5, (int_64)-6525023824864346112, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = ($1 + [208])
	$6 = CALL $57($7, $6)
	if ( ((int_64)*($2) == (int_64)*($6 + [1])) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL eosio_assert([1], [19998])
	$6 = CALL db_next_i64(*($6 + [12]), ($4 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $57($7, $6)
	if ( ((int_64)*($2) != (int_64)*($6 + [1])) ){ goto $label$3 }
	
.LABEL $label$2
	*($4 + [47]) = *($6)
	
.LABEL $label$1
	CALL $103(($4 + [24]), $1, ($4 + [47]), $3)
	CALL $104(($4 + [8]), $1, $3)
	CALL eosio_assert(((int_64)*($4 + [16]) == (int_64)*($4 + [32])), [20028])
	$6 = ( ($4 + [8]) ? ($4 + [24]) : ((int_64)*($4 + [8]) < (int_64)*($4 + [24])) )
	*($0) = *($6)
	*(($0 + [8])) = *(($6 + [8]))
	$global$0 = ($4 + [48])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	
.LOOP $label$1:
	$6 = *(($2 + $5))
	CALL $183(($4 + [16]), *((uint_32($6 >> [4]) + [8373])))
	CALL $183(($4 + [16]), *((($6 & [15]) + [8373])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	
.LOOP $label$2:
	$6 = *(($3 + $5))
	CALL $183($4, *((uint_32($6 >> [4]) + [8373])))
	CALL $183($4, *((($6 & [15]) + [8373])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$2 }
	$5 = *($4 + [16])
	$6 = ($5 & [1])
	$7 = ( *(($4 + [24])) ? (($4 + [16]) | [1]) : $6 )
	$8 = ( *($4 + [20]) ? uint_32($5 >> [1]) : $6 )
	if ( ($8 <= [4]) ){ goto $label$6 }
	$2 = $8
	$5 = $7
	$6 = $8
	
.LOOP $label$7:
	CALL memcpy(($4 + [28]), $5, [4])
	$3 = ((int_32)*($4 + [28]) * (int_32)[1540483477])
	$6 = ((int_32)((int_32)((int_32)uint_32($3 >> [24]) ^ (int_32)$3) * (int_32)[1540483477]) ^ (int_32)((int_32)$6 * (int_32)[1540483477]))
	$5 = ($5 + [4])
	$2 = ($2 + [-4])
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$7 }
	$5 = ($8 + [-4])
	$2 = ($5 & [-4])
	$7 = (($7 + $2) + [4])
	$8 = ($5 - $2)
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$6 = $8
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$8 }
	if ( ((int_32)$8 != (int_32)[3]) ){ goto $label$3 }
	$6 = ((int_32)(*($7 + [2]) << [16]) ^ (int_32)$6)
	
.LABEL $label$8
	$6 = ((int_32)(*($7 + [1]) << [8]) ^ (int_32)$6)
	
.LABEL $label$4
	$6 = ((int_32)((int_32)$6 ^ (int_32)*($7)) * (int_32)[1540483477])
	
.LABEL $label$3
	$5 = ((int_32)((int_32)uint_32($6 >> [13]) ^ (int_32)$6) * (int_32)[1540483477])
	$9 = ((int_32)uint_32($5 >> [15]) ^ (int_32)$5)
	$5 = *($4)
	$6 = ($5 & [1])
	$7 = ( *(($4 + [8])) ? ($4 | [1]) : $6 )
	$8 = ( *($4 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($8 <= [4]) ){ goto $label$12 }
	$2 = $8
	$5 = $7
	$6 = $8
	
.LOOP $label$13:
	CALL memcpy(($4 + [28]), $5, [4])
	$3 = ((int_32)*($4 + [28]) * (int_32)[1540483477])
	$6 = ((int_32)((int_32)((int_32)uint_32($3 >> [24]) ^ (int_32)$3) * (int_32)[1540483477]) ^ (int_32)((int_32)$6 * (int_32)[1540483477]))
	$5 = ($5 + [4])
	$2 = ($2 + [-4])
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$13 }
	$2 = ($8 + [-4])
	$3 = ($2 & [-4])
	$7 = (($7 + $3) + [4])
	$5 = ($9 + [-1640531527])
	$8 = ($2 - $3)
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$6 = $8
	$5 = ($9 + [-1640531527])
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$14 }
	if ( ((int_32)$8 != (int_32)[3]) ){ goto $label$9 }
	$6 = ((int_32)(*($7 + [2]) << [16]) ^ (int_32)$6)
	
.LABEL $label$14
	$6 = ((int_32)(*($7 + [1]) << [8]) ^ (int_32)$6)
	
.LABEL $label$10
	$6 = ((int_32)((int_32)$6 ^ (int_32)*($7)) * (int_32)[1540483477])
	
.LABEL $label$9
	$6 = ((int_32)((int_32)uint_32($6 >> [13]) ^ (int_32)$6) * (int_32)[1540483477])
	*($0) = (((uint_32)((int_32)(((($5 << [6]) + uint_32($5 >> [2])) + ((int_32)uint_32($6 >> [15]) ^ (int_32)$6)) + [-1640531527]) ^ (int_32)$5) % (uint_32)[100]) + [1])
	CALL $175(($0 + [4]), $4)
	CALL $175(($0 + [16]), ($4 + [16]))
	if ( (*($4) & [1]) ){ goto $label$17 }
	if ( (*($4 + [16]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$15
	$global$0 = ($4 + [32])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	
.LOOP $label$1:
	$5 = *(($1 + $4))
	CALL $183($3, *((uint_32($5 >> [4]) + [8373])))
	CALL $183($3, *((($5 & [15]) + [8373])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$5 = ($3 + [8])
	$4 = ( *($5) ? ($3 | [1]) : (*($3) & [1]) )
	CALL assert_sha256($4, CALL $237($4), $2)
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$2
	$global$0 = ($3 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($1 + [88])
	$4 = *($2)
	$6 = *(($1 + [116]))
	$5 = *(($1 + [112]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)$3), [19850])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$2 = CALL db_find_i64(*($3), *(($1 + [96])), (int_64)4229865212519383040, $4)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $96($3, $2)
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)$3), [19850])
	
.LABEL $label$1
	CALL $2(((int_32)$7 != (int_32)[0]), [19836], [20024])
	CALL memcpy($0, $7, [144])
}

int_32 .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [19998])
	$2 = *($0 + [4])
	$3 = *(($2 + [84]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3020371202490236927, ($1 + [8]), *($2 + [64]))
	*((*(($0 + [4])) + [84])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8 + [64]) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [19850])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $65($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)-3020371202490236928, $5))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [19850])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [84])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3020371202490236927, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4 + [64]) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [19850])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $65($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-3020371202490236928, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [19850])
	
.LABEL $label$2
	*(($4 + [84])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $81 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [19850])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $150($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [19850])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL prints($0)
	CALL printn(*($1))
	CALL prints($2)
	CALL $120($4, $3)
	$3 = *($4)
	$2 = ($3 & [1])
	CALL prints_l(( *($4 + [8]) ? ($4 | [1]) : $2 ), ( *($4 + [4]) ? uint_32($3 >> [1]) : $2 ))
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $237($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $177($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $148 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [84]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [21734])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3020384829779738624)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [21680])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [21680])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $79(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = *($0)
	CALL $146(*($0 + [4]), $1)
	*($2 + [88]) = ($2 + [80])
	*($2 + [84]) = $2
	*($2 + [80]) = $2
	*($2 + [96]) = ($2 + [80])
	*($2 + [108]) = ($1 + [8])
	*($2 + [104]) = $1
	*($2 + [112]) = ($1 + [16])
	*($2 + [116]) = ($1 + [24])
	*($2 + [120]) = ($1 + [32])
	*($2 + [124]) = ($1 + [40])
	*($2 + [128]) = ($1 + [48])
	*($2 + [132]) = ($1 + [56])
	*($2 + [136]) = ($1 + [64])
	$4 = ($1 + [72])
	*($2 + [140]) = $4
	CALL $147(($2 + [104]), ($2 + [96]))
	$5 = *($1 + [72])
	*($1 + [84]) = CALL db_store_i64(*($3 + [8]), (int_64)-3020384829779738624, *(*($0 + [8])), $5, $2, [80])
	if ( (uint_64)($5 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *($4)
	$6 = *(($3 + [8]))
	$7 = *(*(($0 + [8])))
	*($2 + [104]) = *($1)
	*($1 + [88]) = CALL db_idx64_store($6, (int_64)-3020384829779738624, $7, $5, ($2 + [104]))
	$global$0 = ($2 + [144])
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	*($1) = *($3)
	*($1 + [8]) = *($3 + [8])
	*($1 + [16]) = *($3 + [16])
	*($1 + [24]) = *($3 + [24])
	*($1 + [32]) = *($3 + [32])
	*($1 + [40]) = *($3 + [40])
	*($1 + [48]) = *($3 + [48])
	*($1 + [56]) = *($3 + [56])
	$4 = (int_64)0
	$5 = *($3 + [64])
	*($1 + [64]) = ( $5 ? (int_64)0 : ((int_64)$5 > (int_64)0) )
	$3 = *($0 + [4])
	$0 = ($3 + [64])
	$5 = *($0)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$6 = ($3 + [48])
	$7 = CALL db_lowerbound_i64(*($6), *(($3 + [56])), (int_64)-3020384829779738624, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $79($6, $7)
	*($2 + [12]) = [0]
	*($2 + [8]) = $6
	$5 = *(*(CALL $148(($2 + [8])) + [4]) + [72])
	$4 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [64])) = $4
	$5 = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [21628])
	*($1 + [72]) = *($0)
	$global$0 = ($2 + [16])
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [12])
	$5 = *(*($3 + [8]))
	$6 = *(*($3) + [8])
	$0 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	
.LOOP $label$1:
	$7 = *(($4 + $0))
	CALL $183($2, *((uint_32($7 >> [4]) + [8373])))
	CALL $183($2, *((($7 & [15]) + [8373])))
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$1 }
	$8 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$2
	*($2) = *(*(($3 + [12])) + [32])
	$0 = CALL db_idx64_store($6, (int_64)-4057510847608520704, $5, $8, $2)
	*(*($3 + [4]) + [56]) = $0
	$global$0 = ($2 + [16])
}

void .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [20157])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [20157])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [20157])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($0 + [4]), $4, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = *($4 + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [20157])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [20157])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [192])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [112]) = (int_64)0
	*($0 + [136]) = $1
	*(($4 = ($0 + [120]))) = (int_64)0
	*(($5 = ($0 + [128]))) = (int_64)0
	$6 = *($2 + [4])
	$1 = *($6)
	*($0) = *($1)
	*($0 + [8]) = *($1 + [8])
	*($0 + [16]) = *($1 + [16])
	$7 = *($2)
	*($5) = *(($1 + [128]))
	*($4) = *(($1 + [120]))
	*($0 + [112]) = *($1 + [112])
	$1 = *($6)
	*($0 + [32]) = *($1 + [32])
	*(($0 + [72])) = *(($1 + [72]))
	*(($0 + [64])) = *(($1 + [64]))
	*(($0 + [56])) = *(($1 + [56]))
	*($0 + [48]) = *($1 + [48])
	$1 = *($6)
	*($0 + [80]) = *($1 + [80])
	*(($0 + [104])) = *(($1 + [104]))
	*(($0 + [96])) = *(($1 + [96]))
	*(($0 + [88])) = *(($1 + [88]))
	*($0 + [24]) = *(*($6) + [24])
	*($3 + [144]) = ($3 + [121])
	*($3 + [140]) = $3
	*($3 + [136]) = $3
	*($3 + [152]) = ($3 + [136])
	*($3 + [164]) = ($0 + [8])
	*($3 + [160]) = $0
	*($3 + [168]) = ($0 + [16])
	*($3 + [172]) = ($0 + [24])
	*($3 + [176]) = ($0 + [32])
	*($3 + [180]) = ($0 + [48])
	*($3 + [184]) = ($0 + [80])
	*($3 + [188]) = ($0 + [112])
	CALL $143(($3 + [160]), ($3 + [152]))
	$8 = *($0)
	*($0 + [140]) = CALL db_store_i64(*($7 + [8]), (int_64)4229865212519383040, *(*($2 + [8])), $8, $3, [121])
	if ( (uint_64)($8 <= *($7 + [16])) ){ goto $label$1 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [192])
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$0), [19850])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $45($0, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$0), [19850])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [20481])
	CALL $111($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $112($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*(($4 = $2) + [16]) = [17871]
	*($4 + [20]) = CALL $237([17871])
	*($4 + [8]) = *($4 + [16])
	*($1) = *(CALL $13(($4 + [24]), ($4 + [8])))
	$5 = CALL $237([8984])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [20700])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8983]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)4
	
.LABEL $label$1
	*($1 + [16]) = (int_64)1000
	*($1 + [8]) = $6
	$5 = $2
	$7 = ($5 + [-32])
	$global$0 = $7
	CALL eosio_assert([1], [20157])
	CALL memcpy($7, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [20157])
	CALL memcpy(($5 + [-24]), ($4 + [24]), [8])
	CALL eosio_assert([1], [20157])
	CALL memcpy(($5 + [-16]), ($1 + [16]), [8])
	$6 = ((int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8) + (int_64)*($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-3665743317141815296, *(*($0 + [8])), $6), $7, [24])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$7 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$global$0 = ($4 + [32])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [20865])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert2()), [20910])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [20960])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$6 = ($global$0 - [208])
	$global$0 = $6
	$7 = [0]
	*($6 + [200]) = [0]
	*($6 + [192]) = (int_64)0
	*($6 + [184]) = [0]
	*($6 + [176]) = (int_64)0
	$8 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$4 }
	$9 = *([0] + [20296])
	
.LOOP $label$6:
	*((($6 + [32]) + ($10 = $7))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$10 == (int_32)[12]) )))))
	$7 = ($10 + [1])
	if ( ((uint_32)$10 > (uint_32)[11]) ){ goto $label$5 }
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($6 + [120])) = [0]
	*($6 + [112]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$3 }
	*($6 + [112]) = ($7 << [1])
	$9 = (($6 + [112]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($6 + [120])) = [0]
	*($6 + [112]) = (int_64)0
	*($6 + [112]) = [0]
	$10 = (($6 + [112]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$11 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($11)
	*($6 + [112]) = ($11 | [1])
	*($6 + [120]) = $9
	*($6 + [116]) = $7
	
.LABEL $label$2
	$11 = ($10 + [1])
	$10 = [0]
	
.LOOP $label$7:
	*(($9 + $10)) = *((($6 + [32]) + $10))
	$10 = ($10 + [1])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$7 }
	$10 = ($9 + $7)
	
.LABEL $label$1
	*($10) = [0]
	$10 = CALL $182(($6 + [112]), [21417])
	$7 = ($10 + [8])
	*((($6 + [128]) + [8])) = *($7)
	*($6 + [128]) = *($10)
	*($10) = (int_64)0
	*($7) = [0]
	CALL $120(($6 + [96]), $3)
	$10 = *($6 + [96])
	$7 = ($10 & [1])
	$10 = CALL $184(($6 + [128]), ( *($6 + [104]) ? (($6 + [96]) | [1]) : $7 ), ( *($6 + [100]) ? uint_32($10 >> [1]) : $7 ))
	$7 = ($10 + [8])
	*((($6 + [144]) + [8])) = *($7)
	*($6 + [144]) = *($10)
	*($10) = (int_64)0
	*($7) = [0]
	$10 = CALL $182(($6 + [144]), [21417])
	$7 = ($10 + [8])
	*((($6 + [160]) + [8])) = *($7)
	*($6 + [160]) = *($10)
	*($10) = (int_64)0
	*($7) = [0]
	CALL $192(($6 + [80]), $8)
	$10 = *($6 + [80])
	$7 = ($10 & [1])
	$10 = CALL $184(($6 + [160]), ( *($6 + [88]) ? (($6 + [80]) | [1]) : $7 ), ( *($6 + [84]) ? uint_32($10 >> [1]) : $7 ))
	$7 = ($10 + [8])
	*(($6 + [8])) = *($7)
	*($6) = *($10)
	*($10) = (int_64)0
	*($7) = [0]
	$10 = CALL $182($6, [21417])
	$7 = ($10 + [8])
	*((($6 + [32]) + [8])) = *($7)
	*($6 + [32]) = *($10)
	*($10) = (int_64)0
	*($7) = [0]
	CALL $193(($6 + [64]), $4)
	$10 = *($6 + [64])
	$7 = ($10 & [1])
	$10 = CALL $184(($6 + [32]), ( *($6 + [72]) ? (($6 + [64]) | [1]) : $7 ), ( *($6 + [68]) ? uint_32($10 >> [1]) : $7 ))
	$7 = *($10 + [4])
	$9 = *($10)
	*($10) = (int_64)0
	$11 = *($10 + [8])
	*($10 + [8]) = [0]
	if ( (*($6 + [192]) & [1]) ){ goto $label$9 }
	*($6 + [192]) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*((($6 + [192]) + [8]))) = [0]
	*($6 + [196]) = [0]
	
.LABEL $label$8
	CALL $178(($6 + [192]), [0])
	*((($6 + [192]) + [8])) = $11
	*($6 + [196]) = $7
	*($6 + [192]) = $9
	if ( (*($6 + [64]) & [1]) ){ goto $label$26 }
	if ( (*($6 + [32]) & [1]) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	CALL _ZdlPv(*((($6 + [64]) + [8])))
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL _ZdlPv(*($6 + [40]))
	$10 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$10 = [1]
	if ( (*($6) & [1]) ){ goto $label$22 }
	
.LABEL $label$23
	if ( (*($6 + [80]) & $10) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($6 + [80]) & $10) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv(*(($6 + [88])))
	$10 = [1]
	if ( ((*($6 + [160]) & [1]) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$10 = [1]
	if ( (*($6 + [160]) & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( (*($6 + [144]) & $10) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*($6 + [168]))
	if ( ((*($6 + [144]) & $10) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*($6 + [152]))
	$10 = [1]
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$10 = [1]
	if ( (*($6 + [96]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($6 + [128]) & $10) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($6 + [104])))
	if ( ((*($6 + [128]) & $10) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($6 + [136]))
	$9 = [1]
	if ( (*($6 + [112]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$9 = [1]
	if ( ((*($6 + [112]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($6 + [120]))
	
.LABEL $label$10
	$10 = *($6 + [192])
	$7 = ($10 & $9)
	CALL sha256(( *(($6 + [200])) ? (($6 + [192]) | $9) : $7 ), ( *($6 + [196]) ? uint_32($10 >> $9) : $7 ), ($6 + [32]))
	$10 = [0]
	*($6 + [168]) = [0]
	*($6 + [160]) = (int_64)0
	
.LOOP $label$27:
	$7 = *((($6 + [32]) + $10))
	CALL $183(($6 + [160]), *((uint_32($7 >> [4]) + [8373])))
	CALL $183(($6 + [160]), *((($7 & [15]) + [8373])))
	$10 = ($10 + $9)
	if ( ((int_32)$10 != (int_32)[32]) ){ goto $label$27 }
	CALL $121($6, ($6 + [192]), [21417])
	$10 = *($1 + [28])
	$7 = ($10 & [1])
	$10 = CALL $184($6, ( *(($1 + [36])) ? ($1 + [29]) : $7 ), ( *(($1 + [32])) ? uint_32($10 >> [1]) : $7 ))
	$9 = *($10 + [4])
	$7 = *($10)
	*($10) = (int_64)0
	$11 = *($10 + [8])
	*($10 + [8]) = [0]
	if ( (*($6 + [176]) & [1]) ){ goto $label$29 }
	*($6 + [176]) = [0]
	goto $label$28 
	
.LABEL $label$29
	*(*(($6 + [184]))) = [0]
	*($6 + [180]) = [0]
	
.LABEL $label$28
	$10 = [0]
	CALL $178(($6 + [176]), [0])
	*(($1 = ($6 + [184]))) = $11
	*($6 + [180]) = $9
	*($6 + [176]) = $7
	if ( ((*($6) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($6 + [8]))
	$11 = *($1)
	$9 = *($6 + [180])
	$7 = *($6 + [176])
	
.LABEL $label$30
	$1 = ($7 & [1])
	CALL sha256(( $11 ? (($6 + [176]) | [1]) : $1 ), ( $9 ? uint_32(($7 & [254]) >> [1]) : $1 ), $6)
	*($6 + [152]) = [0]
	*($6 + [144]) = (int_64)0
	
.LOOP $label$31:
	$7 = *(($6 + $10))
	CALL $183(($6 + [144]), *((uint_32($7 >> [4]) + [8373])))
	CALL $183(($6 + [144]), *((($7 & [15]) + [8373])))
	$10 = ($10 + [1])
	if ( ((int_32)$10 != (int_32)[32]) ){ goto $label$31 }
	$10 = *($6 + [160])
	$7 = ($10 & [1])
	$3 = ( *(($6 + [168])) ? (($6 + [160]) | [1]) : $7 )
	$1 = ( *($6 + [164]) ? uint_32($10 >> [1]) : $7 )
	if ( ($1 <= [4]) ){ goto $label$35 }
	$9 = $1
	$10 = $3
	$7 = $1
	
.LOOP $label$36:
	CALL memcpy(($6 + [128]), $10, [4])
	$11 = ((int_32)*($6 + [128]) * (int_32)[1540483477])
	$7 = ((int_32)((int_32)((int_32)uint_32($11 >> [24]) ^ (int_32)$11) * (int_32)[1540483477]) ^ (int_32)((int_32)$7 * (int_32)[1540483477]))
	$10 = ($10 + [4])
	$9 = ($9 + [-4])
	if ( ((uint_32)$9 > (uint_32)[3]) ){ goto $label$36 }
	$10 = ($1 + [-4])
	$9 = ($10 & [-4])
	$3 = (($3 + $9) + [4])
	$1 = ($10 - $9)
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = $1
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ((int_32)$1 == (int_32)[2]) ){ goto $label$37 }
	if ( ((int_32)$1 != (int_32)[3]) ){ goto $label$32 }
	$7 = ((int_32)(*($3 + [2]) << [16]) ^ (int_32)$7)
	
.LABEL $label$37
	$7 = ((int_32)(*($3 + [1]) << [8]) ^ (int_32)$7)
	
.LABEL $label$33
	$7 = ((int_32)((int_32)$7 ^ (int_32)*($3)) * (int_32)[1540483477])
	
.LABEL $label$32
	$10 = ((int_32)((int_32)uint_32($7 >> [13]) ^ (int_32)$7) * (int_32)[1540483477])
	$8 = ((int_32)uint_32($10 >> [15]) ^ (int_32)$10)
	$10 = *($6 + [144])
	$7 = ($10 & [1])
	$3 = ( *(($6 + [152])) ? (($6 + [144]) | [1]) : $7 )
	$1 = ( *($6 + [148]) ? uint_32($10 >> [1]) : $7 )
	if ( ($1 <= [4]) ){ goto $label$41 }
	$9 = $1
	$10 = $3
	$7 = $1
	
.LOOP $label$42:
	CALL memcpy(($6 + [128]), $10, [4])
	$11 = ((int_32)*($6 + [128]) * (int_32)[1540483477])
	$7 = ((int_32)((int_32)((int_32)uint_32($11 >> [24]) ^ (int_32)$11) * (int_32)[1540483477]) ^ (int_32)((int_32)$7 * (int_32)[1540483477]))
	$10 = ($10 + [4])
	$9 = ($9 + [-4])
	if ( ((uint_32)$9 > (uint_32)[3]) ){ goto $label$42 }
	$9 = ($1 + [-4])
	$11 = ($9 & [-4])
	$3 = (($3 + $11) + [4])
	$10 = ($8 + [-1640531527])
	$1 = ($9 - $11)
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$39 }
	goto $label$40 
	
.LABEL $label$41
	$7 = $1
	$10 = ($8 + [-1640531527])
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$39 }
	
.LABEL $label$40
	if ( ((int_32)$1 == (int_32)[2]) ){ goto $label$43 }
	if ( ((int_32)$1 != (int_32)[3]) ){ goto $label$38 }
	$7 = ((int_32)(*($3 + [2]) << [16]) ^ (int_32)$7)
	
.LABEL $label$43
	$7 = ((int_32)(*($3 + [1]) << [8]) ^ (int_32)$7)
	
.LABEL $label$39
	$7 = ((int_32)((int_32)$7 ^ (int_32)*($3)) * (int_32)[1540483477])
	
.LABEL $label$38
	$7 = ((int_32)((int_32)uint_32($7 >> [13]) ^ (int_32)$7) * (int_32)[1540483477])
	*($0) = (((uint_32)((int_32)(((($10 << [6]) + uint_32($10 >> [2])) + ((int_32)uint_32($7 >> [15]) ^ (int_32)$7)) + [-1640531527]) ^ (int_32)$10) % (uint_32)$5) + [1])
	CALL $175(($0 + [4]), ($6 + [160]))
	CALL $175(($0 + [16]), ($6 + [144]))
	if ( (*($6 + [144]) & [1]) ){ goto $label$50 }
	if ( (*($6 + [160]) & [1]) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	CALL _ZdlPv(*(($6 + [152])))
	if ( ((*($6 + [160]) & [1]) == 0) ){ goto $label$48 }
	
.LABEL $label$49
	CALL _ZdlPv(*(($6 + [168])))
	$10 = [1]
	if ( ((*($6 + [176]) & [1]) == 0) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$10 = [1]
	if ( (*($6 + [176]) & [1]) ){ goto $label$46 }
	
.LABEL $label$47
	if ( (*($6 + [192]) & $10) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	CALL _ZdlPv(*(($6 + [184])))
	if ( ((*($6 + [192]) & $10) == 0) ){ goto $label$44 }
	
.LABEL $label$45
	CALL _ZdlPv(*(($6 + [200])))
	$global$0 = ($6 + [208])
	return 
	
.LABEL $label$44
	$global$0 = ($6 + [208])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	$8 = *($2)
	$2 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($9 = ((int_32)$5 * (int_32)[24]))))) = $2
	*($1 + [8]) = $8
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $9) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3020384829779738624, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4 + [72]) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$7), [19850])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $79($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-3020384829779738624, $6))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$7), [19850])
	
.LABEL $label$2
	*(($4 + [88])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	*(($4 = $2) + [16]) = [17898]
	*($4 + [20]) = CALL $237([17898])
	*($4 + [8]) = *($4 + [16])
	*($1) = *(CALL $13(($4 + [24]), ($4 + [8])))
	$5 = CALL $237([18058])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [20700])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [18057]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)4
	
.LABEL $label$1
	*($1 + [16]) = (int_64)1000000
	*($1 + [8]) = $6
	$5 = $2
	$7 = ($5 + [-32])
	$global$0 = $7
	CALL eosio_assert([1], [20157])
	CALL memcpy($7, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [20157])
	CALL memcpy(($5 + [-24]), ($4 + [24]), [8])
	CALL eosio_assert([1], [20157])
	CALL memcpy(($5 + [-16]), ($1 + [16]), [8])
	$6 = ((int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8) + (int_64)*($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-3665743317141815296, *(*($0 + [8])), $6), $7, [24])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$7 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$global$0 = ($4 + [32])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = ($0 + [48])
	*($2 + [72]) = $3
	CALL $77(($2 + [64]), ($2 + [72]), $1)
	$4 = *($2 + [68])
	if ( ((int_64)*($4) != (int_64)*($1)) ){ goto $label$4 }
	CALL $2((uint_64)(((int_64)*($1 + [8]) + (int_64)*($4 + [8])) <= (int_64)10000000000000000), [21442], [20018])
	CALL $2((uint_64)(((int_64)*($1 + [16]) + (int_64)*(*($2 + [68]) + [16])) <= (int_64)10000000000000000), [21442], [20018])
	CALL $2((uint_64)(((int_64)*($1 + [24]) + (int_64)*(*($2 + [68]) + [24])) <= (int_64)10000000000000000), [21470], [20018])
	CALL $2((uint_64)(((int_64)*($1 + [32]) + (int_64)*(*($2 + [68]) + [32])) <= (int_64)10000000000000000), [21495], [20018])
	CALL $2((uint_64)(((int_64)*($1 + [40]) + (int_64)*(*($2 + [68]) + [40])) <= (int_64)10000000000000000), [21520], [20018])
	CALL $2((uint_64)(((int_64)*($1 + [48]) + (int_64)*(*($2 + [68]) + [48])) <= (int_64)10000000000000000), [21549], [20018])
	CALL $2((uint_64)(((int_64)*($1 + [56]) + (int_64)*(*($2 + [68]) + [56])) <= (int_64)10000000000000000), [21575], [20018])
	CALL $2((uint_64)(((int_64)*($1 + [64]) + (int_64)1) <= (int_64)10000000000000001), [21602], [20018])
	$5 = *(*($2 + [68]) + [72])
	$7 = *(($0 + [76]))
	$6 = *(($0 + [72]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$5:
	$4 = ($7 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8 + [72]) == (int_64)$5) ){ goto $label$3 }
	$7 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	CALL $2((uint_64)(*($1 + [8]) <= (int_64)10000000000000000), [21442], [20018])
	CALL $2((uint_64)(*($1 + [16]) <= (int_64)10000000000000000), [21442], [20018])
	CALL $2((uint_64)(*($1 + [24]) <= (int_64)10000000000000000), [21470], [20018])
	CALL $2((uint_64)(*($1 + [32]) <= (int_64)10000000000000000), [21495], [20018])
	CALL $2((uint_64)(*($1 + [40]) <= (int_64)10000000000000000), [21520], [20018])
	CALL $2((uint_64)(*($1 + [48]) <= (int_64)10000000000000000), [21549], [20018])
	CALL $2((uint_64)(*($1 + [56]) <= (int_64)10000000000000000), [21575], [20018])
	CALL $2((uint_64)(((int_64)*($1 + [64]) + (int_64)1) <= (int_64)10000000000000001), [21602], [20018])
	*($2 + [48]) = [17911]
	*($2 + [52]) = CALL $237([17911])
	*($2 + [8]) = *($2 + [48])
	$4 = CALL $13(($2 + [56]), ($2 + [8]))
	*($2 + [44]) = $0
	*($2 + [40]) = $1
	CALL $123(($2 + [32]), $3, *($4), ($2 + [40]))
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$3), [19850])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$4 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3020384829779738624, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $79($3, $4)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$3), [19850])
	
.LABEL $label$1
	*($2 + [16]) = [17911]
	*($2 + [20]) = CALL $237([17911])
	*($2) = *($2 + [16])
	$4 = CALL $13(($2 + [24]), $2)
	*($2 + [40]) = $1
	$5 = *($4)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [20481])
	CALL $124($3, $8, $5, ($2 + [40]))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [19901])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $243($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [72]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [80]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [72])
	CALL $149(($3 + [40]), ($3 + [32]))
	*($5 + [88]) = [-1]
	*($5 + [84]) = $1
	*($3 + [32]) = $5
	$6 = *($5 + [72])
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $145(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $247($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $241 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $198())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $242($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $223 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL $222([22064], *([0] + [20]))
	$1 = [0]
	
.LOOP $label$4:
	if ( ((int_32)*(($1 + [21968])) == (int_32)$0) ){ goto $label$3 }
	$2 = [87]
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[87]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = [22064]
	
.LOOP $label$5:
	$0 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $0 ){ goto $label$5 }
	$1 = $3
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	return CALL $222($3, *([0] + [20]))
	return .LABEL $label$1
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [19924])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [16])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [19924])
	CALL memcpy(($4 + [24]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $155(*($1), ($4 + [28]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy(($4 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [19924])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [48])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $155(*($1), ($4 + [56]))
	CALL $155(*($1), ($4 + [68]))
	$global$0 = ($2 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [224])
	$global$0 = $2
	*(($3 = (($2 + [96]) + [8]))) = *(($1 + [16]))
	*($2 + [96]) = *($1 + [8])
	$4 = *($1)
	$5 = *($1 + [24])
	$6 = CALL $175(($2 + [80]), ($1 + [28]))
	*(($7 = (($2 + [64]) + [8]))) = *(($1 + [48]))
	*($2 + [64]) = *($1 + [40])
	$8 = CALL $175(($2 + [48]), ($1 + [56]))
	$1 = CALL $175(($2 + [32]), ($1 + [68]))
	*((($2 + [128]) + [8])) = *($7)
	*((($2 + [112]) + [8])) = *($3)
	*($2 + [128]) = *($2 + [64])
	*($2 + [112]) = *($2 + [96])
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$3 = (*($0) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($9 = (($2 + [208]) + [8]))) = *((($2 + [112]) + [8]))
	*($2 + [208]) = *($2 + [112])
	$7 = CALL $175(($2 + [192]), $6)
	*(($10 = (($2 + [176]) + [8]))) = *((($2 + [128]) + [8]))
	*($2 + [176]) = *($2 + [128])
	$11 = CALL $175(($2 + [160]), $8)
	$12 = CALL $175(($2 + [144]), $1)
	*((($2 + [16]) + [8])) = *($9)
	*(($2 + [8])) = *($10)
	*($2 + [16]) = *($2 + [208])
	*($2) = *($2 + [176])
	CALL void $3((int_32 $4), (int_64 ($2 + [16])), (int_32 ($5 & [255])), (int_32 $7), (int_32 $2), (int_32 $11), (int_32 $12), (int_32 $0))
	if ( (*($2 + [144]) & [1]) ){ goto $label$12 }
	if ( (*($2 + [160]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($2 + [160]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($11 + [8]))
	$0 = [1]
	if ( ((*($2 + [192]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$0 = [1]
	if ( (*($2 + [192]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($1) & $0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($1) & $0) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($1 + [8]))
	$1 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($8) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($6) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($6) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [224])
}

void .FUNC $239 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL $235($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

void .FUNC $94 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = *($2)
	$2 = CALL $237([18058])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [20700])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($2 + [18057]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [19929])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [19978])
	CALL $2(((int_64)$5 < (int_64)10000000000000000), [20672], [20018])
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$12 }
	*($4 + [128]) = [17898]
	*($4 + [132]) = CALL $237([17898])
	*($4 + [32]) = *($4 + [128])
	$2 = CALL $13(($4 + [136]), ($4 + [32]))
	*($4 + [112]) = [17999]
	*($4 + [116]) = CALL $237([17999])
	*($4 + [24]) = *($4 + [112])
	$7 = CALL $13(($4 + [120]), ($4 + [24]))
	*($4 + [96]) = [17898]
	$6 = *($7)
	$9 = *($2)
	*($4 + [100]) = CALL $237([17898])
	*($4 + [16]) = *($4 + [96])
	$2 = CALL $13(($4 + [104]), ($4 + [16]))
	*($4 + [80]) = [20694]
	*($4 + [84]) = CALL $237([20694])
	*($4 + [8]) = *($4 + [80])
	$10 = CALL $13(($4 + [88]), ($4 + [8]))
	*((($4 + [40]) + [16])) = $8
	*($4 + [48]) = $5
	*($4 + [40]) = $1
	$7 = CALL $175((($4 + [40]) + [24]), $3)
	*($4 + [144]) = *($2)
	*($4 + [152]) = *($10)
	*(($2 = CALL _Znwj([16]))) = $9
	*($2 + [8]) = $6
	*(($4 + [180])) = [0]
	$10 = ($2 + [16])
	*((($4 + [144]) + [24])) = $10
	*(($4 + [164])) = $10
	*($4 + [160]) = $2
	*($4 + [172 align=4]) = (int_64)0
	$2 = *($7)
	$10 = ( *((($4 + [40]) + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($10 + [24])
	$6 = (CASTING uint_64)(uint_32 $10)
	$10 = (($4 + [144]) + [28])
	
.LOOP $label$13:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$13 }
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $105($10, $2)
	$10 = *(($4 + [176]))
	$2 = *(($4 + [172]))
	goto $label$14 
	
.LABEL $label$15
	$10 = [0]
	$2 = [0]
	
.LABEL $label$14
	*($4 + [184]) = $2
	*($4 + [192]) = $10
	$10 = ($10 - $2)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [20157])
	CALL memcpy($2, ($4 + [40]), [8])
	CALL eosio_assert(((int_32)($10 + [-8]) > (int_32)[7]), [20157])
	CALL memcpy(($2 + [8]), (($4 + [40]) + [8]), [8])
	*($4 + [200]) = *((($4 + [40]) + [16]))
	CALL eosio_assert(((int_32)($10 + [-16]) > (int_32)[7]), [20157])
	CALL memcpy(($2 + [16]), ($4 + [200]), [8])
	*($4 + [188]) = ($2 + [24])
	CALL $110(($4 + [184]), $7)
	CALL $56(($4 + [184]), ($4 + [144]))
	$2 = *($4 + [184])
	CALL send_inline($2, (*($4 + [188]) - $2))
	$2 = *($4 + [184])
	if ( ($2 == 0) ){ goto $label$16 }
	*($4 + [188]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$16
	$2 = *($4 + [172])
	if ( ($2 == 0) ){ goto $label$17 }
	*(($4 + [176])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$17
	$2 = *($4 + [160])
	if ( ($2 == 0) ){ goto $label$18 }
	*(($4 + [164])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$18
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$12
	$global$0 = ($4 + [208])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $237([20254])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [20254], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = [0]
	$5 = (($3 + [16]) | [1])
	$7 = *($2)
	
.LOOP $label$6:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $1(($3 + [32]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), ($3 + [16]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$8 }
	*($3 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	
.LABEL $label$7
	CALL $178(($3 + [16]), [0])
	*((($3 + [16]) + [8])) = *((($3 + [32]) + [8]))
	*($3 + [16]) = *($3 + [32])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$6 }
	$4 = *($3 + [16])
	$6 = ($4 & [1])
	CALL $184($0, ( *((($3 + [16]) + [8])) ? $5 : $6 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $6 ))
	CALL $182($0, [20262])
	$7 = *($2 + [8])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$12 }
	$5 = [0]
	$2 = *([0] + [20296])
	
.LOOP $label$14:
	*((($3 + [32]) + ($4 = $5))) = *(($2 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$5 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$13 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$11 }
	*($3) = ($5 << [1])
	$2 = ($3 | [1])
	goto $label$10 
	
.LABEL $label$12
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$5 = $4
	goto $label$9 
	
.LABEL $label$11
	$6 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $5
	
.LABEL $label$10
	$6 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$15:
	*(($2 + $4)) = *((($3 + [32]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$15 }
	$5 = ($2 + $5)
	$4 = ($3 | [1])
	
.LABEL $label$9
	*($5) = [0]
	$5 = *($3)
	$2 = ($5 & [1])
	CALL $184($0, ( *($3 + [8]) ? $4 : $2 ), ( *($3 + [4]) ? uint_32($5 >> [1]) : $2 ))
	CALL $182($0, [20798])
	if ( (*($3) & [1]) ){ goto $label$17 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$17
	CALL _ZdlPv(*(($3 + [8])))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($3 + [24])))
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [19901])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $243($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([160])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)0
	*($5 + [136]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [80])
	*($3 + [60]) = ($5 + [112])
	CALL $125(($3 + [32]), ($3 + [24]))
	*($5 + [140]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $126(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $247($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [20865])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert2()), [20910])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [20960])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [140])))
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [20157])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [20157])
	CALL memcpy(*($4 + [4]), $0, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$global$0 = ($2 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [76])) = (int_64)0
	*(($5 + [92])) = (int_64)0
	*(($5 + [100])) = (int_64)0
	*($5 + [60]) = [0]
	*($5 + [64]) = [0]
	*($5 + [68 align=4]) = (int_64)0
	*($5 + [84 align=4]) = (int_64)0
	*($5 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $107(($5 + [84]), $1, $2, $3, $4)
	*($5 + [68]) = [1]
	$6 = CALL $58($0)
	*($5 + [40]) = (int_64)0
	*($5 + [32]) = $6
	*($5 + [16]) = [17911]
	*($5 + [20]) = CALL $237([17911])
	*($5 + [8]) = *($5 + [16])
	$6 = *(CALL $13(($5 + [24]), ($5 + [8])))
	CALL $108(($5 + [112]), ($5 + [48]))
	$0 = *($5 + [112])
	CALL send_deferred(($5 + [32]), $6, $0, (*($5 + [116]) - $0), [0])
	$0 = *($5 + [112])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [116]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $109(($5 + [48]))
	$global$0 = ($5 + [128])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL $60(($2 + [32]), $0)
	CALL eosio_assert(((int_64)*($2 + [40]) == (int_64)*($1 + [8])), [20028])
	if ( ((int_64)*($2 + [32]) < (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*(($1 + [8])) == (int_64)*((($2 + [32]) + [8]))), [20163])
	$3 = (int_64)
	*($2 + [32]) = $3(*($2 + [32]) - *($1)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [20211])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [20233])
	
.LABEL $label$1
	*($2 + [16]) = [17911]
	*($2 + [20]) = CALL $237([17911])
	*($2 + [8]) = *($2 + [16])
	CALL $61(($0 + [128]), ($2 + [32]), *(CALL $13(($2 + [24]), ($2 + [8]))))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [19901])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$2 = CALL $243($6)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	$7 = ($0 + [24])
	CALL db_get_i64($1, $2, $6)
	*(($4 = CALL _Znwj([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[31]), [19924])
	CALL memcpy($4, $2, [32])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[32]), [19924])
	CALL memcpy(($4 + [32]), ($2 + [32]), [8])
	*($4 + [56]) = [-1]
	*($4 + [52]) = $1
	*($3 + [8]) = $4
	$5 = [0]
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	
.LOOP $label$6:
	$1 = *(($4 + $5))
	CALL $183(($3 + [16]), *((uint_32($1 >> [4]) + [8373])))
	CALL $183(($3 + [16]), *((($1 & [15]) + [8373])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$6 }
	$8 = CALL $4(($3 + [16]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$8 }
	$1 = $4
	goto $label$7 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [24])))
	$1 = *($3 + [8])
	
.LABEL $label$7
	*($3 + [16]) = $8
	$9 = *($1 + [52])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$5 = *($10)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($5 + [8]) = $8
	*($5 + [16]) = $9
	*($3 + [8]) = [0]
	*($5) = $1
	*($10) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $140($7, ($3 + [8]), ($3 + [16]), ($3 + [4]))
	if ( ($6 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $247($2)
	
.LABEL $label$9
	$5 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	*($1 + [32]) = *(*($4 + [4]))
	CALL eosio_assert([1], [20157])
	CALL memcpy($2, $1, [32])
	CALL eosio_assert([1], [20157])
	CALL memcpy(($2 + [32]), ($1 + [32]), [8])
	$5 = [0]
	*($2 + [48]) = [0]
	*($2 + [40]) = (int_64)0
	
.LOOP $label$1:
	$4 = *(($1 + $5))
	CALL $183(($2 + [40]), *((uint_32($4 >> [4]) + [8373])))
	CALL $183(($2 + [40]), *((($4 & [15]) + [8373])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	$6 = CALL $4(($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [48])))
	
.LABEL $label$2
	*($1 + [52]) = CALL db_store_i64(*($3 + [8]), (int_64)-4057510847608520704, *(*($0 + [8])), $6, $2, [40])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$3 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($2 + [44]) = $1
	*($2 + [52]) = $1
	*($2 + [48]) = *(($0 + [8]))
	*($2 + [40]) = $3
	*($2 + [56]) = ($2 + [40])
	CALL $141(($2 + [56]), ($3 + [36]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	$1 = *($2)
	$4 = *(*($2 + [4]))
	*($0) = *($4)
	*($0 + [8]) = *(($4 + [8]))
	CALL eosio_assert([1], [20157])
	CALL memcpy($3, $0, [8])
	*($3 + [24]) = *($0 + [8])
	CALL eosio_assert([1], [20157])
	CALL memcpy(($3 | [8]), ($3 + [24]), [8])
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, *(*($2 + [8])), (int_64)6820308914865700864, $3, [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [20157])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [20157])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [20157])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [20157])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [20157])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [20516])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert2()), [20562])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [20613])
	CALL eosio_assert([1], [20157])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($5)
	CALL eosio_assert([1], [20157])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert2()), [20106])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $136($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)6820308914865700864
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)6820308914865700864
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $131(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	$1 = *($2)
	$4 = *(*($2 + [4]))
	*($0) = *($4)
	*($0 + [8]) = *(($4 + [8]))
	CALL eosio_assert([1], [20157])
	CALL memcpy($3, $0, [8])
	*($3 + [24]) = *($0 + [8])
	CALL eosio_assert([1], [20157])
	CALL memcpy(($3 | [8]), ($3 + [24]), [8])
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, *(*($2 + [8])), (int_64)6820308914865700864, $3, [16])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $196($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $213 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

void .FUNC $208 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $209 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $202 (int_32 $0)
{
}

int_32 .FUNC $203 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL $201($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	if ( (*([0] + [9364]) == 0) ){ goto $label$8 }
	$4 = CALL $203(*([0] + [9364]))
	
.LABEL $label$8
	$0 = *(CALL $205())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL $201($0)
	
.LABEL $label$11
	$3 = *($0 + [28])
	$2 = *($0 + [20])
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$12 }
	$5 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $201($0)
	$3 = *(($0 + [28]))
	$2 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$2 = [-1]
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($5 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $202($0)
	
.LABEL $label$14
	$4 = ($2 | $4)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL $202($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL $206()
	return $4
	
.LABEL $label$3
	$2 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $202($0)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $200 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $239([9088])
	$3 = *([0] + [9096])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [9100])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [9104]
	*([0] + [9096]) = [9104]
	$4 = *([0] + [9100])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $246([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [9096])
	*([0] + [9096]) = $3
	*([0] + [9100]) = [0]
	
.LABEL $label$2
	*([0] + [9100]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $240([9088])
	return [0]
	
.LABEL $label$1
	CALL $240([9088])
	return [-1]
}

int_32 .FUNC $201 (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC $206 ()
{
	CALL $240([9368])
}

int_32 .FUNC $207 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [20] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $209($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $209($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $209($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $209($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [21872]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $209($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $209($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $209($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $204 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $225($0, $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $205 ()
{
	CALL $239([9368])
	return [9376]
}

void .FUNC $181 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $129 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert2()), [20106])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $130($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)6820308914865700864
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)6820308914865700864
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $131(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [19901])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $243($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [19924])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [19924])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	*($5 + [8]) = *($3 + [24])
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	*($3 + [24]) = (int_64)6820308914865700864
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)6820308914865700864
	*($7 + [16]) = $1
	*($3 + [16]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $131(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $247($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [176])
	$global$0 = $3
	$4 = [0]
	$5 = CALL $186($1, [95], [0])
	CALL $2(((int_32)$5 != (int_32)[-1]), [8776], [20029])
	$6 = CALL $176(($3 + [160]), $1, [0], $5, $1)
	$8 = *($3 + [160])
	$7 = CALL $237([8802])
	if ( ((int_32)$7 != (int_32)( *($6 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$1 }
	$4 = (CALL $187($6, [0], [-1], [8802], $7) == 0)
	
.LABEL $label$1
	CALL $2($4, [8806], [20029])
	$4 = ($5 + [1])
	$8 = CALL $186($1, [95], $4)
	CALL $2(((int_32)$8 != (int_32)[-1]), [8839], [20029])
	$4 = CALL $176(($3 + [144]), $1, $4, ($8 + ((int_32)$5 ^ (int_32)[-1])), $1)
	$5 = *($3 + [144])
	$7 = CALL $237([8865])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$4 }
	if ( (CALL $187($4, [0], [-1], [8865], $7) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = [0]
	$7 = *($3 + [144])
	$9 = CALL $237([8868])
	if ( ((int_32)$9 != (int_32)( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	$5 = (CALL $187($4, [0], [-1], [8868], $9) == 0)
	goto $label$2 
	
.LABEL $label$3
	$5 = [1]
	
.LABEL $label$2
	CALL $2($5, [8876], [20029])
	$5 = [0]
	$7 = *($3 + [144])
	$9 = CALL $237([8865])
	if ( ((int_32)$9 != (int_32)( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$5 }
	$5 = (CALL $187($4, [0], [-1], [8865], $9) == 0)
	
.LABEL $label$5
	$1 = *($3 + [128])
	$8 = CALL $176(($3 + [128]), $1, ($8 + [1]), [-1], $1)
	CALL $2(((int_32)( *($8 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) ) != (int_32)[0]), [8892], [20029])
	*($3 + [120]) = [0]
	*($3 + [112]) = (int_64)0
	CALL $2(CALL $6(( *($8 + [8]) ? ($8 + [1]) : (*($3 + [128]) & [1]) ), ($3 + [112])), [8914], [20029])
	CALL $2(((int_32)(*($3 + [116]) - *($3 + [112])) == (int_32)[69]), [8938], [20029])
	if ( (*($2) == 0) ){ goto $label$6 }
	CALL memmove(($3 + [40]), *($3 + [112]), [65])
	*($3 + [106]) = [49]
	*($3 + [105]) = ( [75] ? [82] : $5 )
	CALL ripemd160(($3 + [40]), [67], $3)
	CALL $2((CALL $236($3, (*($3 + [116]) + [-4]), [4]) == 0), [8956], [20029])
	
.LABEL $label$6
	*($0) = ((int_32)$5 ^ (int_32)[1])
	$0 = ($0 + [1])
	$1 = [0]
	$5 = *($3 + [112])
	
.LOOP $label$7:
	*(($0 + $1)) = *(($5 + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[65]) ){ goto $label$7 }
	*($3 + [116]) = $5
	CALL _ZdlPv($5)
	if ( (*($3 + [128]) & [1]) ){ goto $label$12 }
	if ( (*($3 + [144]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($8 + [8])))
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($3 + [160]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($3 + [176])
	return 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($3 + [176])
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert2()), [20106])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([96])) + [72]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [80]) = $1
	CALL $144(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3 + [72])
	*($4 + [16]) = $2
	$5 = *($3 + [84])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $145(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $105(($6 + [28]), [16])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [20157])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [20157])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($5 = ($2 + [-16]))) = [0]
	$3 = ($8 + [-24])
	*($4) = *($3)
	$4 = ($8 + [-16])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$5 = ($8 + [-12])
	*($4) = *($5)
	*($3) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $237($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL $184($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $174($0)
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [8])
	$5 = (CASTING uint_32)(uint_64 $4)
	$6 = ((int_64)$4 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = ((int_64)$6 + (int_64)1)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$5 = ($5 & [255])
	$10 = ($2 - (($5 + [16]) & [496]))
	$11 = $10
	$global$0 = $11
	*(($12 = ($10 + $5))) = [0]
	$13 = *($1)
	$2 = ((int_64)$13 < (int_64)0)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)( (int_64)-1 ? (int_64)1 : $2 ) * (int_64)((int_64)$13 % (int_64)$9))
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ($12 + [-1])
	
.LOOP $label$5:
	$14 = ((int_64)$8 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$14 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$8 = $14
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ( [21419] ? [21431] : $2 )
	$9 = ((int_64)$13 / (int_64)$9)
	$15 = ($5 + [32])
	$11 = ($11 - (($5 + [47]) & [496]))
	$global$0 = $11
	$8 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	*((($3 + [41]) + ($1 = $5))) = $8
	$5 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($5 << [1])
	$2 = (($3 + [24]) | [1])
	goto $label$7 
	
.LABEL $label$9
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [24]) = [0]
	$1 = (($3 + [24]) | [1])
	$5 = $1
	goto $label$6 
	
.LABEL $label$8
	$7 = (($5 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $2
	*($3 + [28]) = $5
	
.LABEL $label$7
	$7 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$12:
	*(($2 + $1)) = *((($3 + [41]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$12 }
	$5 = ($2 + $5)
	$1 = (($3 + [24]) | [1])
	
.LABEL $label$6
	*($5) = [0]
	*($3 + [8]) = $10
	*($3) = $9
	*($3 + [12]) = ( *($3 + [32]) ? $1 : (*($3 + [24]) & [1]) )
	CALL $211($11, $15, $12, $3)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$13
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $237($11)
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($1 << [1])
	$5 = ($0 + [1])
	if ( $1 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($1 + [16]) & [-16])
	$5 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $1
	
.LABEL $label$16
	CALL memcpy($5, $11, $1)
	
.LABEL $label$15
	*(($5 + $1)) = [0]
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$14
	CALL $174($0)
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	$4 = CALL $237($1)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($3 + [16]) = ($4 << [1])
	$5 = (($3 + [16]) | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [16]) = ($6 | [1])
	*($3 + [24]) = $5
	*($3 + [20]) = $4
	
.LABEL $label$3
	CALL memcpy($5, $1, $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	CALL $182(($3 + [16]), [8192])
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$5 = ($3 | [1])
	$7 = (CASTING uint_64)(uint_32 $2)
	
.LOOP $label$5:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $1(($3 + [32]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), $3)
	if ( (*($3) & [1]) ){ goto $label$7 }
	*($3) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($3 + [8]))) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$6
	CALL $178($3, [0])
	*(($3 + [8])) = *((($3 + [32]) + [8]))
	*($3) = *($3 + [32])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$5 }
	$4 = *($3)
	$1 = ($4 & [1])
	$2 = ($3 + [8])
	CALL $184(($3 + [16]), ( *($2) ? $5 : $1 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $1 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2))
	
.LABEL $label$8
	CALL $182(($3 + [16]), [8250])
	CALL eosio_assert($0, ( *($3 + [24]) ? (($3 + [16]) | [1]) : (*($3 + [16]) & [1]) ))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $174(($3 + [16]))
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [19924])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [19924])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [19924])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [19924])
	CALL memcpy($4, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [19924])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($4 + [8]) = *($2 + [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [19924])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [20516])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert2()), [20562])
	$5 = *($3)
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*($5 + [8]))
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*($5 + [16]))
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*($5 + [24]))
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*($5 + [32]))
	*(($3 = $4) + [24]) = *($1)
	$6 = *($1 + [72])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*($5 + [40]))
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*($5 + [48]))
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*($5 + [56]))
	$7 = ($1 + [64])
	$8 = ($1 + [56])
	$9 = ($1 + [48])
	$10 = ($1 + [40])
	$11 = ($1 + [32])
	$12 = ($1 + [24])
	$13 = ($1 + [16])
	$14 = ($1 + [8])
	$15 = ($1 + [72])
	$16 = *($5 + [64])
	if ( ((int_64)$16 < (int_64)0) ){ goto $label$1 }
	*($7) = $16
	
.LABEL $label$1
	CALL eosio_assert([1], [20613])
	$4 = $4
	$5 = ($4 + [-80])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $4
	*($3 + [32]) = ($3 + [8])
	*($3 + [44]) = $14
	*($3 + [48]) = $13
	*($3 + [52]) = $12
	*($3 + [56]) = $11
	*($3 + [60]) = $10
	*($3 + [64]) = $9
	*($3 + [68]) = $8
	*($3 + [72]) = $7
	*($3 + [76]) = $15
	*($3 + [40]) = $1
	CALL $147(($3 + [40]), ($3 + [32]))
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($3 + [40]) = *($1)
	if ( (CALL $236(($3 + [24]), ($3 + [40]), [8]) == 0) ){ goto $label$3 }
	$5 = ($1 + [88])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$4 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020384829779738624, ($3 + [32]), $6)
	*($5) = $1
	
.LABEL $label$4
	CALL db_idx64_update($1, $2, ($3 + [40]))
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $243($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $44(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	float_64 $17
	$5 = ($global$0 - [1248])
	$global$0 = $5
	*($5 + [1208]) = $1
	CALL memset(($5 + [672]), [0], [80])
	$6 = ($0 + [168])
	$7 = *(($0 + [196]))
	if ( ((int_32)$7 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$6), [19850])
	if ( $7 ){ goto $label$1 }
	$7 = ($5 + [672])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($6), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $45($6, $7)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$6), [19850])
	goto $label$1 
	
.LABEL $label$3
	$7 = ($5 + [672])
	
.LABEL $label$1
	CALL $2((*($7 + [17]) == 0), [17924], [20027])
	CALL require_auth($1)
	CALL $46(($5 + [1168]), [1], [0])
	*($5 + [1160]) = [17846]
	*($5 + [1164]) = CALL $237([17846])
	*($5 + [256]) = *($5 + [1160])
	$7 = CALL $13(($5 + [672]), ($5 + [256]))
	if ( ((int_64)*($5 + [1176]) != (int_64)*($7)) ){ goto $label$6 }
	*($5 + [1152]) = [17871]
	*($5 + [1156]) = CALL $237([17871])
	*($5 + [248]) = *($5 + [1152])
	$7 = CALL $13(($5 + [528]), ($5 + [248]))
	if ( ((int_64)*($5 + [1168]) != (int_64)*($7)) ){ goto $label$5 }
	CALL $2([1], [18098], [20025])
	goto $label$4 
	
.LABEL $label$6
	CALL $2([0], [18098], [20025])
	goto $label$4 
	
.LABEL $label$5
	*($5 + [1144]) = [17898]
	*($5 + [1148]) = CALL $237([17898])
	*($5 + [240]) = *($5 + [1144])
	$7 = CALL $13(($5 + [848]), ($5 + [240]))
	CALL $2(((int_64)*($5 + [1168]) == (int_64)*($7)), [18098], [20025])
	
.LABEL $label$4
	*($5 + [1136]) = [17911]
	*($5 + [1140]) = CALL $237([17911])
	*($5 + [232]) = *($5 + [1136])
	if ( ((int_64)*(CALL $13(($5 + [528]), ($5 + [232]))) != (int_64)$2) ){ goto $label$23 }
	$8 = [0]
	$7 = CALL $176(($5 + [672]), $4, [0], [5], $4)
	$10 = ($10 & [1])
	$10 = *($5 + [672])
	$9 = CALL $237([18112])
	if ( ((int_32)$9 != (int_32)( *($7 + [4]) ? uint_32($10 >> [1]) : $10 )) ){ goto $label$24 }
	$8 = (CALL $187($7, [0], [-1], [18112], $9) == 0)
	$10 = (*($5 + [672]) & [1])
	
.LABEL $label$24
	if ( ($10 == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$25
	if ( ($8 == 0) ){ goto $label$23 }
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$22 }
	$6 = uint_32($6 >> [1])
	$7 = ($4 + [1])
	$8 = ($7 + $6)
	if ( $6 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	*($5 + [1016]) = [17911]
	*($5 + [1020]) = CALL $237([17911])
	*($5 + [224]) = *($5 + [1016])
	$7 = CALL $13(($5 + [672]), ($5 + [224]))
	if ( ((int_64)*($5 + [1208]) == (int_64)*($7)) ){ goto $label$13 }
	*($5 + [1008]) = [17911]
	*($5 + [1012]) = CALL $237([17911])
	*($5 + [216]) = *($5 + [1008])
	if ( ((int_64)*(CALL $13(($5 + [528]), ($5 + [216]))) != (int_64)$2) ){ goto $label$13 }
	$7 = CALL $176(($5 + [672]), $4, [0], [6], $4)
	$8 = [1]
	$10 = ($10 & [1])
	$10 = *($5 + [672])
	$9 = CALL $237([18228])
	if ( ((int_32)$9 != (int_32)( *($7 + [4]) ? uint_32($10 >> [1]) : $10 )) ){ goto $label$26 }
	$8 = ((int_32)CALL $187($7, [0], [-1], [18228], $9) != (int_32)[0])
	$10 = (*($5 + [672]) & [1])
	
.LABEL $label$26
	if ( ($10 == 0) ){ goto $label$27 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$27
	if ( $8 ){ goto $label$13 }
	$7 = [1]
	if ( CALL $47($0, $3) ){ goto $label$28 }
	$7 = CALL $48($0, $3)
	
.LABEL $label$28
	CALL $2($7, [18235], [20002])
	*($5 + [840]) = (int_64)0
	$7 = CALL $175(($5 + [824]), $4)
	CALL $49($0, $7, ($5 + [1007]), ($5 + [1006]), ($5 + [960]), ($5 + [928]), ($5 + [920]), ($5 + [848]), ($5 + [840]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$29
	$1 = *($5 + [840])
	if ( (int_64)($1 == 0) ){ goto $label$30 }
	CALL $2(CALL $fimport$9($1), [18267], [20003])
	CALL $2(((int_64)*($5 + [840]) != (int_64)*($5 + [1208])), [18299], [20004])
	
.LABEL $label$30
	CALL $50($0, ($5 + [1007]), ($5 + [1006]), $3)
	CALL $51($0, $3)
	CALL $52($0, ($5 + [928]), ($5 + [920]))
	CALL $53($0, ($5 + [1208]), ($5 + [1006]), ($5 + [928]), ($5 + [920]), ($5 + [848]))
	$11 = ($0 + [208])
	$12 = *($5 + [1006])
	$8 = *(($0 + [236]))
	$10 = *(($0 + [232]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$15 }
	$9 = ($12 & [255])
	
.LOOP $label$31:
	$7 = ($8 + [-24])
	$4 = *($7)
	if ( ((int_32)*($4) == (int_32)$9) ){ goto $label$16 }
	$8 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$31 }
	goto $label$15 
	
.LABEL $label$22
	$6 = *($4 + [4])
	$7 = *($4 + [8])
	$8 = ($7 + $6)
	if ( ($6 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	
.LOOP $label$32:
	if ( CALL $197(*($7)) ){ goto $label$20 }
	$7 = ($7 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$32 }
	$7 = $8
	$6 = [1]
	$10 = *($4)
	if ( (($10 & [1]) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$33 }
	$6 = ($7 + [1])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$33 }
	
.LOOP $label$34:
	if ( (CALL $197(*($6)) == 0) ){ goto $label$35 }
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	*($7) = *($6)
	$7 = ($7 + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$34 }
	
.LABEL $label$33
	$6 = [1]
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	$8 = ($4 + $6)
	$6 = ($8 + uint_32($10 >> $6))
	goto $label$17 
	
.LABEL $label$18
	$8 = *($4 + [8])
	$6 = ($8 + *($4 + [4]))
	
.LABEL $label$17
	CALL $185($4, ($7 - $8), ($6 - $7))
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$38 }
	$7 = ($4 + [1])
	$10 = [0]
	$6 = [0]
	$8 = uint_32($8 >> [1])
	if ( $8 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$7 = *($4 + [8])
	$10 = [0]
	$6 = [0]
	$8 = *($4 + [4])
	if ( ($8 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	$6 = [0]
	
.LOOP $label$39:
	$6 = ($6 + ((int_32)*($7) == (int_32)[45]))
	$7 = ($7 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$39 }
	$6 = ((int_32)$6 == (int_32)[1])
	
.LABEL $label$36
	CALL $2($6, [18118], [20000])
	*($5 + [968]) = $10
	*($5 + [960]) = (int_64)0
	*($5 + [528]) = [45]
	*($5 + [672]) = $10
	*($5 + [848]) = [1]
	CALL $176(($5 + [672]), $4, (CALL $5($4, ($5 + [960]), ($5 + [528]), ($5 + [672]), ($5 + [848])) + [1]), [-1], $4)
	if ( (*($5 + [960]) & [1]) ){ goto $label$41 }
	*($5 + [960]) = [0]
	goto $label$40 
	
.LABEL $label$41
	*(*(($5 + [968]))) = [0]
	*($5 + [964]) = [0]
	
.LABEL $label$40
	CALL $178(($5 + [960]), [0])
	*((($5 + [960]) + [8])) = *((($5 + [672]) + [8]))
	*($5 + [960]) = *($5 + [672])
	$7 = *($5 + [960])
	CALL $2(((int_32)( *($5 + [964]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)[0]), [18131], [20000])
	if ( ((int_32)(CALL $188(($5 + [960]), [0], [10]) & [255]) != (int_32)[1]) ){ goto $label$42 }
	CALL $2(CALL $48($0, $3), [18145], [20001])
	*(($6 = (($5 + [1120]) + [8]))) = *(($3 + [8]))
	*($5 + [1120]) = *($3)
	$1 = *($5 + [1208])
	$7 = CALL $175(($5 + [1104]), $4)
	*((($5 + [48]) + [8])) = *($6)
	*($5 + [48]) = *($5 + [1120])
	CALL $54($0, $1, ($5 + [48]), $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$43
	*($5 + [1088]) = [17911]
	*($5 + [1092]) = CALL $237([17911])
	*($5 + [40]) = *($5 + [1088])
	$7 = CALL $13(($5 + [1096]), ($5 + [40]))
	*($5 + [1072]) = [17999]
	*($5 + [1076]) = CALL $237([17999])
	*($5 + [32]) = *($5 + [1072])
	$6 = CALL $13(($5 + [1080]), ($5 + [32]))
	*($5 + [848]) = *($7)
	*($5 + [856]) = *($6)
	*($5 + [1056]) = [17898]
	*($5 + [1060]) = CALL $237([17898])
	*($5 + [24]) = *($5 + [1056])
	$8 = CALL $13(($5 + [1064]), ($5 + [24]))
	*($5 + [1040]) = [17846]
	*($5 + [1044]) = CALL $237([17846])
	*($5 + [16]) = *($5 + [1040])
	$0 = CALL $13(($5 + [1048]), ($5 + [16]))
	*($5 + [1032]) = [17911]
	*($5 + [1036]) = CALL $237([17911])
	*($5 + [8]) = *($5 + [1032])
	$4 = CALL $13(($5 + [1216]), ($5 + [8]))
	*($5 + [1024]) = [18170]
	*($5 + [1028]) = CALL $237([18170])
	*($5) = *($5 + [1024])
	$10 = CALL $13(($5 + [1232]), $5)
	*(($5 + [936])) = [0]
	*($5 + [928]) = (int_64)0
	$7 = CALL $237([18183])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$46 }
	*($5 + [928]) = ($7 << [1])
	$6 = (($5 + [928]) | [1])
	if ( $7 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	$9 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($5 + [928]) = ($9 | [1])
	*($5 + [936]) = $6
	*($5 + [932]) = $7
	
.LABEL $label$45
	CALL memcpy($6, [18183], $7)
	
.LABEL $label$44
	*(($6 + $7)) = [0]
	*(($5 + [696])) = *(($3 + [8]))
	$7 = (($5 + [928]) + [8])
	*(($5 + [712])) = *($7)
	*($7) = [0]
	*($5 + [672]) = *($4)
	*($5 + [680]) = *($10)
	*($5 + [688]) = *($3)
	*($5 + [704]) = *($5 + [928])
	*($5 + [928]) = (int_64)0
	$7 = CALL $55(($5 + [528]), ($5 + [848]), *($8), *($0), ($5 + [672]))
	CALL $56(($5 + [472]), $7)
	$6 = *($5 + [472])
	CALL send_inline($6, (*($5 + [476]) - $6))
	$6 = *($5 + [472])
	if ( ($6 == 0) ){ goto $label$47 }
	*($5 + [476]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$47
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$48 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$48
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$49 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$49
	if ( ((*(($5 + [704])) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($5 + [712])))
	
.LABEL $label$50
	if ( ((*($5 + [928]) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($5 + [936])))
	
.LABEL $label$42
	if ( ((*($5 + [960]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [968])))
	$7 = *($5 + [1196])
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$11), [19850])
	goto $label$14 
	
.LABEL $label$15
	$4 = [0]
	$7 = CALL db_find_i64(*($11), *(($0 + [216])), (int_64)-6525023824864346112, ((int_64)(CASTING uint_64)(uint_32 $12) & (int_64)255))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	$4 = CALL $57($11, $7)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$11), [19850])
	
.LABEL $label$14
	CALL $2(((int_32)$4 != (int_32)[0]), [18324], [20005])
	$2 = *($4 + [4])
	$4 = *($4 + [1])
	*($5 + [672]) = CALL $58($0)
	*($5 + [680]) = *($5 + [1208])
	*($5 + [688]) = *($5 + [840])
	$1 = CALL current_time()
	*(($5 + [728])) = *($5 + [936])
	*(($5 + [736])) = *((($5 + [928]) + [16]))
	*(($5 + [744])) = *((($5 + [928]) + [24]))
	*((($5 + [672]) + [88])) = *($5 + [968])
	*(($5 + [768])) = *((($5 + [960]) + [16]))
	*(($5 + [776])) = *((($5 + [960]) + [24]))
	*($5 + [704]) = $4
	*($5 + [720]) = *($5 + [928])
	*($5 + [752]) = *($5 + [960])
	*($5 + [696]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*(($9 = (($5 + [672]) + [128]))) = *(($3 + [16]))
	*(($5 + [792])) = *(($3 + [8]))
	*($5 + [784]) = *($3)
	*($5 + [472]) = [17911]
	*($5 + [476]) = CALL $237([17911])
	*($5 + [208]) = *($5 + [472])
	$7 = CALL $13(($5 + [528]), ($5 + [208]))
	*($5 + [1232]) = ($5 + [672])
	CALL $59(($5 + [1216]), ($0 + [88]), *($7), ($5 + [1232]))
	if ( (CALL $47($0, $3) == 0) ){ goto $label$51 }
	CALL $60(($5 + [528]), $0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5 + [536])), [21337])
	$1 = ((int_64)*($5 + [528]) + (int_64)*($3))
	*($5 + [528]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [21380])
	CALL eosio_assert(((int_64)*($5 + [528]) < (int_64)4611686018427387904), [21399])
	*($5 + [1216]) = [17911]
	*($5 + [1220]) = CALL $237([17911])
	*($5 + [200]) = *($5 + [1216])
	CALL $61(($0 + [128]), ($5 + [528]), *(CALL $13(($5 + [472]), ($5 + [200]))))
	*($5 + [664]) = (int_64)0
	*($5 + [656]) = (int_64)0
	*($5 + [648]) = *($3)
	$11 = ($0 + [288])
	*($5 + [640]) = $11
	CALL $62(($5 + [632]), ($5 + [640]), (($5 + [672]) | [8]))
	$7 = *($5 + [636])
	if ( ((int_64)*($7) != (int_64)*($5 + [680])) ){ goto $label$54 }
	*($5 + [664]) = *($7 + [16])
	*($5 + [656]) = *($7 + [24])
	$1 = CALL current_time()
	$13 = CALL current_time()
	$8 = *($5 + [636])
	$7 = ((uint_64)*($8 + [48]) > (uint_64)(CASTING uint_64)(uint_32 ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) - ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000)) + [-1546444800]) % (uint_32)[86400]))))
	if ( $7 ){ goto $label$55 }
	*($5 + [656]) = (int_64)0
	
.LABEL $label$55
	if ( (uint_64)(*($5 + [648]) <= (int_64)10000) ){ goto $label$52 }
	if ( ($7 == 0) ){ goto $label$53 }
	if ( ((uint_64)*($8 + [24]) > (uint_64)(int_64)9) ){ goto $label$52 }
	*($5 + [656]) = ((int_64)*($5 + [656]) + (int_64)1)
	*($5 + [664]) = ((int_64)*($5 + [664]) + (int_64)1)
	goto $label$52 
	
.LABEL $label$54
	$1 = *($5 + [648])
	if ( (uint_64)($1 <= (int_64)10000) ){ goto $label$56 }
	*($5 + [656]) = (int_64)1
	*($5 + [664]) = (int_64)1
	
.LABEL $label$56
	CALL $2((uint_64)(((int_64)$1 + (int_64)-1) <= (int_64)9999999999999999), [18341], [20018])
	*($5 + [616]) = [17911]
	*($5 + [620]) = CALL $237([17911])
	*($5 + [192]) = *($5 + [616])
	$7 = CALL $13(($5 + [624]), ($5 + [192]))
	*($5 + [532]) = ($5 + [648])
	*($5 + [528]) = ($5 + [672])
	*($5 + [536]) = ($5 + [664])
	*($5 + [540]) = ($5 + [656])
	*($5 + [544]) = $0
	*($5 + [1216]) = *($7)
	CALL eosio_assert(((int_64)*(($0 + [288])) == (int_64)CALL eosio_assert2()), [20106])
	*($5 + [472]) = $11
	*($5 + [476]) = ($5 + [528])
	*($5 + [480]) = ($5 + [1216])
	*(($7 = CALL _Znwj([88])) + [32]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [40]) = (int_64)0
	*($7 + [56]) = (int_64)0
	*($7 + [64]) = (int_64)0
	*($7 + [72]) = $11
	CALL $63(($5 + [472]), $7)
	*($5 + [1232]) = $7
	$1 = *($7 + [64])
	*($5 + [472]) = $1
	$8 = *($7 + [76])
	*($5 + [392]) = $8
	$10 = ($0 + [316])
	$6 = *($10)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [320]))) ){ goto $label$58 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($5 + [1232]) = [0]
	*($6) = $7
	*($10) = ($6 + [24])
	$7 = *($5 + [1232])
	*($5 + [1232]) = [0]
	if ( $7 ){ goto $label$57 }
	goto $label$51 
	
.LABEL $label$58
	CALL $64(($0 + [312]), ($5 + [1232]), ($5 + [472]), ($5 + [392]))
	$7 = *($5 + [1232])
	*($5 + [1232]) = [0]
	if ( ($7 == 0) ){ goto $label$51 }
	
.LABEL $label$57
	CALL _ZdlPv($7)
	goto $label$51 
	
.LABEL $label$53
	*($5 + [656]) = (int_64)1
	*($5 + [664]) = ((int_64)*($5 + [664]) + (int_64)1)
	
.LABEL $label$52
	CALL memset(($5 + [528]), [0], [80])
	$7 = *(($0 + [196]))
	if ( ((int_32)$7 == (int_32)*(($0 + [192]))) ){ goto $label$60 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$6), [19850])
	if ( $7 ){ goto $label$59 }
	$7 = ($5 + [528])
	goto $label$59 
	
.LABEL $label$60
	$7 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$61 }
	$7 = CALL $45($6, $7)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$6), [19850])
	goto $label$59 
	
.LABEL $label$61
	$7 = ($5 + [528])
	
.LABEL $label$59
	$6 = *($5 + [636])
	$14 = ((int_64)( *($6 + [8]) ? (int_64)0 : ((uint_64)*($6 + [48]) > (uint_64)*(( ($7 + [72]) ? ($7 + [64]) : ((int_32)*($7 + [18]) == (int_32)[1]) ))) ) + (int_64)*($5 + [648]))
	CALL $2((uint_64)(((int_64)$14 + (int_64)-1) <= (int_64)9999999999999999), [18341], [20018])
	$1 = *(*($5 + [636]) + [64])
	$8 = *(($0 + [316]))
	$10 = *(($0 + [312]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$63 }
	
.LOOP $label$65:
	$6 = ($8 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7 + [64]) == (int_64)$1) ){ goto $label$64 }
	$8 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$64
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$63 }
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$11), [19850])
	goto $label$62 
	
.LABEL $label$63
	$7 = [0]
	$6 = CALL db_find_i64(*(($0 + [288])), *(($0 + [296])), (int_64)-3020371202490236928, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$62 }
	$7 = CALL $65($11, $6)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$11), [19850])
	
.LABEL $label$62
	*($5 + [512]) = [17911]
	*($5 + [516]) = CALL $237([17911])
	*($5 + [184]) = *($5 + [512])
	$13 = *(CALL $13(($5 + [520]), ($5 + [184])))
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [20481])
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$11), [20516])
	CALL eosio_assert(((int_64)*(($0 + [288])) == (int_64)CALL eosio_assert2()), [20562])
	*($7 + [48]) = *((($5 + [672]) + [24]))
	$6 = ($7 + [8])
	$1 = *($6)
	$15 = *($5 + [656])
	$16 = *($5 + [664])
	*($6) = $14
	*($7 + [16]) = $16
	*($7 + [24]) = $15
	*($5 + [1216]) = *($7)
	*($5 + [1224]) = ( (int_64))((int_64)0 - $1) ? (int_64)-1 : ((int_64)$1 > (int_64)0) )
	$1 = *($7 + [64])
	CALL eosio_assert([1], [20613])
	*($5 + [1240]) = (($5 + [528]) + [72])
	*($5 + [1236]) = ($5 + [528])
	*($5 + [1232]) = ($5 + [528])
	*($5 + [392]) = ($5 + [1232])
	*($5 + [476]) = $6
	*($5 + [472]) = $7
	*($5 + [480]) = ($7 + [16])
	*($5 + [484]) = ($7 + [24])
	*($5 + [488]) = ($7 + [32])
	*($5 + [492]) = ($7 + [40])
	*($5 + [496]) = ($7 + [48])
	*($5 + [500]) = ($7 + [56])
	*($5 + [504]) = ($7 + [64])
	CALL $66(($5 + [472]), ($5 + [392]))
	CALL db_update_i64(*($7 + [76]), $13, ($5 + [528]), [72])
	$8 = ($0 + [304])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$66 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$66
	$8 = (($5 + [1216]) + [8])
	*($5 + [472]) = *($7)
	if ( (CALL $236(($5 + [1216]), ($5 + [472]), [8]) == 0) ){ goto $label$67 }
	$11 = ($7 + [80])
	$10 = *($11)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$68 }
	$10 = CALL db_idx64_find_primary(*(($0 + [288])), *(($0 + [296])), (int_64)-3020371202490236928, ($5 + [392]), $1)
	*($11) = $10
	
.LABEL $label$68
	CALL db_idx64_update($10, $13, ($5 + [472]))
	
.LABEL $label$67
	$14 = *($6)
	*($5 + [472]) = ( (int_64))((int_64)0 - $14) ? (int_64)-1 : ((int_64)$14 > (int_64)0) )
	if ( (CALL $236($8, ($5 + [472]), [8]) == 0) ){ goto $label$51 }
	$6 = ($7 + [84])
	$7 = *($6)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$69 }
	$7 = CALL db_idx64_find_primary(*(($0 + [288])), *(($0 + [296])), (int_64)-3020371202490236927, ($5 + [392]), $1)
	*($6) = $7
	
.LABEL $label$69
	CALL db_idx64_update($7, $13, ($5 + [472]))
	
.LABEL $label$51
	*($5 + [456]) = [17911]
	*($5 + [460]) = CALL $237([17911])
	*($5 + [176]) = *($5 + [456])
	$7 = CALL $13(($5 + [464]), ($5 + [176]))
	*($5 + [440]) = [17999]
	*($5 + [444]) = CALL $237([17999])
	*($5 + [168]) = *($5 + [440])
	$6 = CALL $13(($5 + [448]), ($5 + [168]))
	*($5 + [1216]) = *($7)
	*($5 + [1224]) = *($6)
	$1 = *($9)
	*($5 + [424]) = [17846]
	*($5 + [428]) = CALL $237([17846])
	*($5 + [160]) = *($5 + [424])
	$8 = CALL $13(($5 + [432]), ($5 + [160]))
	*($5 + [416]) = [17911]
	*($5 + [420]) = CALL $237([17911])
	*($5 + [152]) = *($5 + [416])
	$0 = CALL $13(($5 + [664]), ($5 + [152]))
	*($5 + [408]) = [17986]
	*($5 + [412]) = CALL $237([17986])
	*($5 + [144]) = *($5 + [408])
	$10 = CALL $13(($5 + [656]), ($5 + [144]))
	*((($5 + [392]) + [8])) = [0]
	*($5 + [392]) = (int_64)0
	$7 = CALL $237([18376])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$72 }
	*($5 + [392]) = ($7 << [1])
	$6 = (($5 + [392]) | [1])
	if ( $7 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$72
	$9 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($5 + [392]) = ($9 | [1])
	*($5 + [400]) = $6
	*($5 + [396]) = $7
	
.LABEL $label$71
	CALL memcpy($6, [18376], $7)
	
.LABEL $label$70
	*(($6 + $7)) = [0]
	*(($5 + [552])) = *(($3 + [8]))
	$7 = (($5 + [392]) + [8])
	*(($5 + [568])) = *($7)
	*($7) = [0]
	*($5 + [528]) = *($0)
	*($5 + [536]) = *($10)
	*($5 + [544]) = *($3)
	*($5 + [560]) = *($5 + [392])
	*($5 + [392]) = (int_64)0
	$7 = CALL $55(($5 + [472]), ($5 + [1216]), $1, *($8), ($5 + [528]))
	CALL $56(($5 + [1232]), $7)
	$6 = *($5 + [1232])
	CALL send_inline($6, (*($5 + [1236]) - $6))
	$6 = *($5 + [1232])
	if ( ($6 == 0) ){ goto $label$73 }
	*($5 + [1236]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$73
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$74 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$74
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$75 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$75
	$1 = (CASTING uint_64)(uint_32 $4)
	if ( ((*(($5 + [560])) & [1]) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*(($5 + [568])))
	
.LABEL $label$76
	$1 = ((int_64)$1 & (int_64)255)
	if ( ((*($5 + [392]) & [1]) == 0) ){ goto $label$77 }
	CALL _ZdlPv(*(($5 + [400])))
	
.LABEL $label$77
	$1 = *($3)
	$17 = ((float_64)(CASTING float_64)(int_64 ((int_64)((int_64)$1 * (int_64)$2) * (int_64)$1)) / (float_64)(float_64)1e5)
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)9223372036854775808) ){ goto $label$79 }
	$13 = (int_64)-9223372036854775808
	goto $label$78 
	
.LABEL $label$79
	$13 = (Rounds 0)($17)
	
.LABEL $label$78
	$2 = *($3 + [8])
	$1 = (int_64)
	CALL $2(((int_64)$1($1 - $13)) < (int_64)10000000000000000), [18419], [20018])
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$80 }
	*($5 + [376]) = [17986]
	*($5 + [380]) = CALL $237([17986])
	*($5 + [136]) = *($5 + [376])
	$7 = CALL $13(($5 + [384]), ($5 + [136]))
	*($5 + [360]) = [17999]
	*($5 + [364]) = CALL $237([17999])
	*($5 + [128]) = *($5 + [360])
	$6 = CALL $13(($5 + [368]), ($5 + [128]))
	*($5 + [1216]) = *($7)
	*($5 + [1224]) = *($6)
	$13 = *(($5 + [800]))
	*($5 + [344]) = [17846]
	*($5 + [348]) = CALL $237([17846])
	*($5 + [120]) = *($5 + [344])
	$8 = CALL $13(($5 + [352]), ($5 + [120]))
	*($5 + [336]) = [17986]
	*($5 + [340]) = CALL $237([17986])
	*($5 + [112]) = *($5 + [336])
	$0 = CALL $13(($5 + [664]), ($5 + [112]))
	*($5 + [328]) = [18437]
	*($5 + [332]) = CALL $237([18437])
	*($5 + [104]) = *($5 + [328])
	$4 = CALL $13(($5 + [656]), ($5 + [104]))
	*(($5 + [400])) = [0]
	*($5 + [392]) = (int_64)0
	$7 = CALL $237([18450])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$83 }
	*($5 + [392]) = ($7 << [1])
	$6 = (($5 + [392]) | [1])
	if ( $7 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$83
	$3 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($3)
	*($5 + [392]) = ($3 | [1])
	*($5 + [400]) = $6
	*($5 + [396]) = $7
	
.LABEL $label$82
	CALL memcpy($6, [18450], $7)
	
.LABEL $label$81
	*(($6 + $7)) = [0]
	*(($5 + [552])) = $2
	$7 = ($5 + [400])
	*(($5 + [568])) = *($7)
	*($7) = [0]
	*($5 + [544]) = $1
	*($5 + [528]) = *($0)
	*($5 + [536]) = *($4)
	*($5 + [560]) = *($5 + [392])
	*($5 + [392]) = (int_64)0
	$7 = CALL $55(($5 + [472]), ($5 + [1216]), $13, *($8), ($5 + [528]))
	CALL $56(($5 + [1232]), $7)
	$6 = *($5 + [1232])
	CALL send_inline($6, (*($5 + [1236]) - $6))
	$6 = *($5 + [1232])
	if ( ($6 == 0) ){ goto $label$84 }
	*($5 + [1236]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$84
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$85 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$85
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$86 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$86
	if ( ((*(($5 + [560])) & [1]) == 0) ){ goto $label$87 }
	CALL _ZdlPv(*(($5 + [568])))
	
.LABEL $label$87
	if ( ((*($5 + [392]) & [1]) == 0) ){ goto $label$80 }
	CALL _ZdlPv(*(($5 + [400])))
	
.LABEL $label$80
	$17 = ((float_64)(CASTING float_64)(int_64 ((int_64)$1 * (int_64)40)) / (float_64)(float_64)100)
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)9223372036854775808) ){ goto $label$89 }
	$1 = (int_64)-9223372036854775808
	goto $label$88 
	
.LABEL $label$89
	$1 = (Rounds 0)($17)
	
.LABEL $label$88
	CALL $2(((int_64)$1 < (int_64)10000000000000000), [18502], [20018])
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$13 }
	*($5 + [312]) = [18437]
	*($5 + [316]) = CALL $237([18437])
	*($5 + [96]) = *($5 + [312])
	$7 = CALL $13(($5 + [320]), ($5 + [96]))
	*($5 + [296]) = [17999]
	*($5 + [300]) = CALL $237([17999])
	*($5 + [88]) = *($5 + [296])
	$6 = CALL $13(($5 + [304]), ($5 + [88]))
	*($5 + [1216]) = *($7)
	*($5 + [1224]) = *($6)
	$13 = *(($5 + [800]))
	*($5 + [280]) = [17846]
	*($5 + [284]) = CALL $237([17846])
	*($5 + [80]) = *($5 + [280])
	$8 = CALL $13(($5 + [288]), ($5 + [80]))
	*($5 + [272]) = [18437]
	*($5 + [276]) = CALL $237([18437])
	*($5 + [72]) = *($5 + [272])
	$0 = CALL $13(($5 + [664]), ($5 + [72]))
	*($5 + [264]) = [18085]
	*($5 + [268]) = CALL $237([18085])
	*($5 + [64]) = *($5 + [264])
	$4 = CALL $13(($5 + [656]), ($5 + [64]))
	*(($5 + [400])) = [0]
	*($5 + [392]) = (int_64)0
	$7 = CALL $237([18526])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$92 }
	*($5 + [392]) = ($7 << [1])
	$6 = (($5 + [392]) | [1])
	if ( $7 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	$3 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($3)
	*($5 + [392]) = ($3 | [1])
	*($5 + [400]) = $6
	*($5 + [396]) = $7
	
.LABEL $label$91
	CALL memcpy($6, [18526], $7)
	
.LABEL $label$90
	*(($6 + $7)) = [0]
	*(($5 + [552])) = $2
	$7 = ($5 + [400])
	*(($5 + [568])) = *($7)
	*($7) = [0]
	*($5 + [544]) = $1
	*($5 + [528]) = *($0)
	*($5 + [536]) = *($4)
	*($5 + [560]) = *($5 + [392])
	*($5 + [392]) = (int_64)0
	$7 = CALL $55(($5 + [472]), ($5 + [1216]), $13, *($8), ($5 + [528]))
	CALL $56(($5 + [1232]), $7)
	$6 = *($5 + [1232])
	CALL send_inline($6, (*($5 + [1236]) - $6))
	$6 = *($5 + [1232])
	if ( ($6 == 0) ){ goto $label$93 }
	*($5 + [1236]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$93
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$94 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$94
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$95 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$95
	if ( ((*(($5 + [560])) & [1]) == 0) ){ goto $label$96 }
	CALL _ZdlPv(*(($5 + [568])))
	
.LABEL $label$96
	if ( ((*($5 + [392]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [400])))
	
.LABEL $label$13
	$7 = *($5 + [1196])
	if ( ($7 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*(($5 + [1200])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$7 = *($5 + [1184])
	if ( ($7 == 0) ){ goto $label$97 }
	*(($5 + [1188])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$97
	$global$0 = ($5 + [1248])
	return (unreachable)
	
.LABEL $label$10
	CALL $174(($5 + [928]))
	
.LABEL $label$9
	CALL $174(($5 + [392]))
	
.LABEL $label$8
	CALL $174(($5 + [392]))
	
.LABEL $label$7
	CALL $174(($5 + [392]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL memset(($3 + [48]), [0], [80])
	$4 = ($0 + [168])
	$5 = *(($0 + [196]))
	if ( ((int_32)$5 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	if ( $5 ){ goto $label$1 }
	$5 = ($3 + [48])
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($4), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $45($4, $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [48])
	
.LABEL $label$1
	CALL $2((*($5 + [17]) == 0), [17924], [20027])
	*($3 + [32]) = [17911]
	*($3 + [36]) = CALL $237([17911])
	*($3 + [8]) = *($3 + [32])
	CALL require_auth(*(CALL $13(($3 + [40]), ($3 + [8]))))
	*($3 + [16]) = [17911]
	*($3 + [20]) = CALL $237([17911])
	*($3) = *($3 + [16])
	$6 = *(CALL $13(($3 + [24]), $3))
	CALL eosio_assert(((int_64)*($0 + [248]) == (int_64)CALL eosio_assert2()), [20106])
	*(($5 = CALL _Znwj([40])) + [24]) = ($0 + [248])
	*($5) = $1
	*($5 + [8]) = *($2 + [8])
	*($5 + [16]) = *($2)
	CALL eosio_assert([1], [20157])
	CALL memcpy(($3 + [48]), $5, [8])
	*($3 + [136]) = *($5 + [8])
	CALL eosio_assert([1], [20157])
	CALL memcpy((($3 + [48]) | [8]), ($3 + [136]), [8])
	CALL eosio_assert([1], [20157])
	CALL memcpy((($3 + [48]) + [16]), ($5 + [16]), [8])
	$1 = ((int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8) + (int_64)*($5)
	$4 = CALL db_store_i64(*(($0 + [256])), (int_64)-3665743317141815296, $6, $1), ($3 + [48]), [24]
	*($5 + [28]) = $4)
	$2 = ($0 + [264])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$4 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($3 + [136]) = $5
	$1 = ((int_64)(uint_64)*(($5 + [8])) >> (uint_64)(int_64)8) + (int_64)*($5)
	*($3 + [48]) = $1)
	*($3 + [132]) = $4
	$7 = ($0 + [276])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [280]))) ){ goto $label$7 }
	*($2 + [8]) = $1
	*($2 + [16]) = $4
	*($3 + [136]) = [0]
	*($2) = $5
	*($7) = ($2 + [24])
	$5 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $74(($0 + [272]), ($3 + [136]), ($3 + [48]), ($3 + [132]))
	$5 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($3 + [144])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [576])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $243($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [504]) + [16]))) = (int_64)0
	*($4 + [512]) = (int_64)0
	*($4 + [504]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [19924])
	CALL memcpy(($4 + [504]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [19924])
	CALL memcpy((($4 + [504]) + [8]), ($2 + [8]), [8])
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [19924])
	CALL memcpy(($4 + [56]), ($2 + [16]), [8])
	*($3) = *($4 + [56])
	$8 = ($2 + $7)
	*((($4 + [24]) + [8])) = $8
	*($4 + [44]) = ($2 + [24])
	*($4 + [40]) = $2
	*($4 + [48]) = $8
	*($4 + [24]) = *($4 + [40])
	$8 = CALL $67(($4 + [56]), $0, $1, ($4 + [24]))
	*(($9 = (($4 + [528]) + [8]))) = *($3)
	*($4 + [528]) = *($4 + [512])
	$0 = *($4 + [504])
	*((($4 + [544]) + [8])) = *($9)
	*($4 + [544]) = *($4 + [528])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [544]) + [8]))
	*((($4 + [560]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [544])
	*($4 + [8]) = $1
	*($4 + [560]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $247($2)
	
.LABEL $label$6
	CALL $68($8)
	$global$0 = ($4 + [576])
	return [1]
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($3 + [120])) = [0]
	*($3 + [112]) = (int_64)0
	$4 = CALL $237([8984])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [112]) = ($4 << [1])
	$5 = (($3 + [112]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [112]) = ($6 | [1])
	*($3 + [120]) = $5
	*($3 + [116]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [8984], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	$4 = *($3 + [112])
	$5 = CALL $176(($3 + [96]), $1, ( *($3 + [116]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], $1)
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	CALL $2(CALL $6(( *($5 + [8]) ? ($5 + [1]) : (*($3 + [96]) & [1]) ), ($3 + [80])), [8988], [20031])
	CALL $2(((int_32)(*($3 + [84]) - *($3 + [80])) == (int_32)[37]), [9013], [20031])
	if ( (*($2) == 0) ){ goto $label$6 }
	CALL memmove(($3 + [40]), *($3 + [80]), [33])
	CALL ripemd160(($3 + [40]), [33], $3)
	CALL $2((CALL $236($3, (*($3 + [84]) + [-4]), [4]) == 0), [9032], [20031])
	
.LABEL $label$6
	*($0) = [0]
	$4 = *($3 + [80])
	*($0 + [1 align=1]) = *($4)
	*($0 + [9 align=1]) = *($4 + [8 align=1])
	*($0 + [13 align=1]) = *($4 + [12 align=1])
	*($0 + [21 align=1]) = *($4 + [20 align=1])
	*($0 + [29 align=1]) = *($4 + [28 align=1])
	*($0 + [33]) = *($4 + [32])
	if ( ($4 == 0) ){ goto $label$7 }
	*($3 + [84]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( (*($3 + [96]) & [1]) ){ goto $label$9 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL _ZdlPv(*(($5 + [8])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv(*($3 + [120]))
	$global$0 = ($3 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $174(($3 + [112]))
	
.LABEL $label$1
	$global$0 = ($3 + [128])
}

void .FUNC $11 (int_32 $0)
{
	if ( ((*([0] + [9064]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [9072]))
	
.LABEL $label$1
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [960])
	$global$0 = $3
	*($3 + [936]) = [17846]
	*($3 + [940]) = CALL $237([17846])
	*($3 + [352]) = *($3 + [936])
	if ( ((int_64)*(CALL $13(($3 + [864]), ($3 + [352]))) != (int_64)$2) ){ goto $label$2 }
	*($3 + [928]) = [17871]
	*($3 + [932]) = CALL $237([17871])
	*($3 + [344]) = *($3 + [928])
	if ( ((int_64)*(CALL $13(($3 + [944]), ($3 + [344]))) == (int_64)$1) ){ goto $label$3 }
	*($3 + [912]) = [17898]
	*($3 + [916]) = CALL $237([17898])
	*($3 + [336]) = *($3 + [912])
	if ( ((int_64)*(CALL $13(($3 + [920]), ($3 + [336]))) != (int_64)$1) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $14(($3 + [864]))
	*(($4 = (($3 + [824]) + [8]))) = *(($3 + [888]))
	*($3 + [824]) = *($3 + [880])
	$2 = *($3 + [872])
	$5 = *($3 + [864])
	$6 = *($4)
	*((($3 + [944]) + [8])) = $6
	*(($7 = (($3 + [840]) + [8]))) = $6
	*($3 + [856]) = $1
	$1 = *($3 + [824])
	*($3 + [840]) = $1
	*($3 + [944]) = $1
	$8 = ($3 + [896])
	$4 = CALL $175(($3 + [808]), $8)
	*(($3 + [24])) = *($3 + [856])
	*((($3 + [8]) + [8])) = *($7)
	*($3 + [8]) = *($3 + [840])
	CALL $15($0, $5, $2, ($3 + [8]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$4
	if ( ((*($8) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($3 + [904])))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$2
	*($3 + [800]) = [17911]
	*($3 + [804]) = CALL $237([17911])
	*($3 + [328]) = *($3 + [800])
	if ( ((int_64)*(CALL $13(($3 + [864]), ($3 + [328]))) != (int_64)$1) ){ goto $label$1 }
	*($3 + [792]) = [17911]
	*($3 + [796]) = CALL $237([17911])
	*($3 + [320]) = *($3 + [792])
	if ( ((int_64)*(CALL $13(($3 + [864]), ($3 + [320]))) != (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)5037614637286162431) ){ goto $label$21 }
	if ( ((int_64)$2 <= (int_64)-4417058317630373889) ){ goto $label$20 }
	if ( ((int_64)$2 <= (int_64)-2977261804058050561) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)-2977261804058050560) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)3626324472015355904) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)3626411730319441920) ){ goto $label$1 }
	*($3 + [680]) = [17911]
	*($3 + [684]) = CALL $237([17911])
	*($3 + [104]) = *($3 + [680])
	$0 = CALL $13(($3 + [688]), ($3 + [104]))
	*($3 + [676]) = [0]
	*($3 + [672]) = [1]
	$2 = *($0)
	*($3 + [96]) = *($3 + [672])
	CALL $17($2, $1, ($3 + [96]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$21
	if ( ((int_64)$2 <= (int_64)5037623265597865983) ){ goto $label$19 }
	if ( ((int_64)$2 <= (int_64)5037623814286126591) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)5037623814286126592) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)5606352419916087296) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [752]) = [17911]
	*($3 + [756]) = CALL $237([17911])
	*($3 + [56]) = *($3 + [752])
	$0 = CALL $13(($3 + [760]), ($3 + [56]))
	*($3 + [748]) = [0]
	*($3 + [744]) = [2]
	$2 = *($0)
	*($3 + [48]) = *($3 + [744])
	CALL $19($2, $1, ($3 + [48]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$20
	if ( ((int_64)$2 > (int_64)-5002754493004120065) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)-8173735188944125952) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-8173734955062287872) ){ goto $label$1 }
	*($3 + [776]) = [17911]
	*($3 + [780]) = CALL $237([17911])
	*($3 + [40]) = *($3 + [776])
	$0 = CALL $13(($3 + [784]), ($3 + [40]))
	*($3 + [772]) = [0]
	*($3 + [768]) = [3]
	$2 = *($0)
	*($3 + [32]) = *($3 + [768])
	CALL $21($2, $1, ($3 + [32]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$19
	if ( ((int_64)$2 > (int_64)5037617939520712191) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)5037614637286162432) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)5037617939520221184) ){ goto $label$1 }
	*($3 + [608]) = [17911]
	*($3 + [612]) = CALL $237([17911])
	*($3 + [152]) = *($3 + [608])
	$0 = CALL $13(($3 + [616]), ($3 + [152]))
	*($3 + [604]) = [0]
	*($3 + [600]) = [4]
	$2 = *($0)
	*($3 + [144]) = *($3 + [600])
	CALL $23($2, $1, ($3 + [144]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-4417058317630373888) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-3841130677495922688) ){ goto $label$1 }
	*($3 + [416]) = [17911]
	*($3 + [420]) = CALL $237([17911])
	*($3 + [280]) = *($3 + [416])
	$0 = CALL $13(($3 + [424]), ($3 + [280]))
	*($3 + [412]) = [0]
	*($3 + [408]) = [5]
	$2 = *($0)
	*($3 + [272]) = *($3 + [408])
	CALL $25($2, $1, ($3 + [272]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)5037623265597865984) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)5037623814214008832) ){ goto $label$1 }
	*($3 + [464]) = [17911]
	*($3 + [468]) = CALL $237([17911])
	*($3 + [248]) = *($3 + [464])
	$0 = CALL $13(($3 + [472]), ($3 + [248]))
	*($3 + [460]) = [0]
	*($3 + [456]) = [6]
	$2 = *($0)
	*($3 + [240]) = *($3 + [456])
	CALL $27($2, $1, ($3 + [240]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)-5002754493004120064) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4994048603321270272) ){ goto $label$1 }
	*($3 + [656]) = [17911]
	*($3 + [660]) = CALL $237([17911])
	*($3 + [120]) = *($3 + [656])
	$0 = CALL $13(($3 + [664]), ($3 + [120]))
	*($3 + [652]) = [0]
	*($3 + [648]) = [7]
	$2 = *($0)
	*($3 + [112]) = *($3 + [648])
	CALL $25($2, $1, ($3 + [112]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)5037617939520712192) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)5037623255936316832) ){ goto $label$1 }
	*($3 + [512]) = [17911]
	*($3 + [516]) = CALL $237([17911])
	*($3 + [216]) = *($3 + [512])
	$0 = CALL $13(($3 + [520]), ($3 + [216]))
	*($3 + [508]) = [0]
	*($3 + [504]) = [8]
	$2 = *($0)
	*($3 + [208]) = *($3 + [504])
	CALL $25($2, $1, ($3 + [208]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$14
	*($3 + [392]) = [17911]
	*($3 + [396]) = CALL $237([17911])
	*($3 + [296]) = *($3 + [392])
	$0 = CALL $13(($3 + [400]), ($3 + [296]))
	*($3 + [388]) = [0]
	*($3 + [384]) = [9]
	$2 = *($0)
	*($3 + [288]) = *($3 + [384])
	CALL $31($2, $1, ($3 + [288]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$13
	*($3 + [728]) = [17911]
	*($3 + [732]) = CALL $237([17911])
	*($3 + [72]) = *($3 + [728])
	$0 = CALL $13(($3 + [736]), ($3 + [72]))
	*($3 + [724]) = [0]
	*($3 + [720]) = [10]
	$2 = *($0)
	*($3 + [64]) = *($3 + [720])
	CALL $33($2, $1, ($3 + [64]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$12
	*($3 + [488]) = [17911]
	*($3 + [492]) = CALL $237([17911])
	*($3 + [232]) = *($3 + [488])
	$0 = CALL $13(($3 + [496]), ($3 + [232]))
	*($3 + [484]) = [0]
	*($3 + [480]) = [11]
	$2 = *($0)
	*($3 + [224]) = *($3 + [480])
	CALL $27($2, $1, ($3 + [224]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$11
	*($3 + [560]) = [17911]
	*($3 + [564]) = CALL $237([17911])
	*($3 + [184]) = *($3 + [560])
	$0 = CALL $13(($3 + [568]), ($3 + [184]))
	*($3 + [556]) = [0]
	*($3 + [552]) = [12]
	$2 = *($0)
	*($3 + [176]) = *($3 + [552])
	CALL $25($2, $1, ($3 + [176]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$10
	*($3 + [368]) = [17911]
	*($3 + [372]) = CALL $237([17911])
	*($3 + [312]) = *($3 + [368])
	$0 = CALL $13(($3 + [376]), ($3 + [312]))
	*($3 + [364]) = [0]
	*($3 + [360]) = [13]
	$2 = *($0)
	*($3 + [304]) = *($3 + [360])
	CALL $25($2, $1, ($3 + [304]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$9
	*($3 + [584]) = [17911]
	*($3 + [588]) = CALL $237([17911])
	*($3 + [168]) = *($3 + [584])
	$0 = CALL $13(($3 + [592]), ($3 + [168]))
	*($3 + [580]) = [0]
	*($3 + [576]) = [14]
	$2 = *($0)
	*($3 + [160]) = *($3 + [576])
	CALL $27($2, $1, ($3 + [160]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$8
	*($3 + [704]) = [17911]
	*($3 + [708]) = CALL $237([17911])
	*($3 + [88]) = *($3 + [704])
	$0 = CALL $13(($3 + [712]), ($3 + [88]))
	*($3 + [700]) = [0]
	*($3 + [696]) = [15]
	$2 = *($0)
	*($3 + [80]) = *($3 + [696])
	CALL $39($2, $1, ($3 + [80]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$7
	*($3 + [440]) = [17911]
	*($3 + [444]) = CALL $237([17911])
	*($3 + [264]) = *($3 + [440])
	$0 = CALL $13(($3 + [448]), ($3 + [264]))
	*($3 + [436]) = [0]
	*($3 + [432]) = [16]
	$2 = *($0)
	*($3 + [256]) = *($3 + [432])
	CALL $41($2, $1, ($3 + [256]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$6
	*($3 + [536]) = [17911]
	*($3 + [540]) = CALL $237([17911])
	*($3 + [200]) = *($3 + [536])
	$0 = CALL $13(($3 + [544]), ($3 + [200]))
	*($3 + [532]) = [0]
	*($3 + [528]) = [17]
	$2 = *($0)
	*($3 + [192]) = *($3 + [528])
	CALL $17($2, $1, ($3 + [192]))
	$global$0 = ($3 + [960])
	return 
	
.LABEL $label$5
	*($3 + [632]) = [17911]
	*($3 + [636]) = CALL $237([17911])
	*($3 + [136]) = *($3 + [632])
	$0 = CALL $13(($3 + [640]), ($3 + [136]))
	*($3 + [628]) = [0]
	*($3 + [624]) = [18]
	$2 = *($0)
	*($3 + [128]) = *($3 + [624])
	CALL $23($2, $1, ($3 + [128]))
	
.LABEL $label$1
	$global$0 = ($3 + [960])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [19627])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [19732])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [19665])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [19732])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $185 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$1 = ($global$0 - [416])
	$global$0 = $1
	*($1 + [376]) = [17911]
	*($1 + [380]) = CALL $237([17911])
	*($1 + [64]) = *($1 + [376])
	CALL require_auth(*(CALL $13(($1 + [384]), ($1 + [64]))))
	CALL memset(($1 + [208]), [0], [80])
	$2 = ($0 + [168])
	$3 = *(($0 + [196]))
	if ( ((int_32)$3 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [19850])
	if ( $3 ){ goto $label$1 }
	$3 = ($1 + [208])
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_find_i64(*($2), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $45($2, $3)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$2), [19850])
	goto $label$1 
	
.LABEL $label$3
	$3 = ($1 + [208])
	
.LABEL $label$1
	CALL memcpy(($1 + [296]), $3, [80])
	CALL $2(((int_32)*($1 + [312]) != (int_32)[1]), [19608], [20017])
	*($1 + [320]) = (int_64)0
	*($1 + [304]) = (int_64)0
	*($1 + [328]) = (int_64)214748464800
	*($1 + [296]) = (int_64)515789
	*($1 + [312]) = [1]
	*($1 + [314]) = [0]
	*($1 + [336]) = (int_64)0
	*($1 + [344]) = (int_64)0
	*($1 + [352]) = (int_64)0
	*($1 + [360]) = (CASTING uint_64)(uint_32 ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [-1546444800]) % (uint_32)[3600])))
	$4 = CALL current_time()
	$5 = CALL current_time()
	*($1 + [192]) = [17911]
	*($1 + [368]) = (CASTING uint_64)(uint_32 ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) - ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [-1546444800]) % (uint_32)[86400])))
	*($1 + [196]) = CALL $237([17911])
	*($1 + [56]) = *($1 + [192])
	CALL $72($2, ($1 + [296]), *(CALL $13(($1 + [200]), ($1 + [56]))))
	*($1 + [176]) = [17911]
	*($1 + [180]) = CALL $237([17911])
	*($1 + [48]) = *($1 + [176])
	*($1 + [408]) = *(CALL $13(($1 + [184]), ($1 + [48])))
	CALL eosio_assert(((int_64)*($0 + [248]) == (int_64)CALL eosio_assert2()), [20106])
	$3 = ($0 + [248])
	*($1 + [208]) = $3
	*($1 + [212]) = ($1 + [168])
	*($1 + [216]) = ($1 + [408])
	*(($2 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [24]) = $3
	CALL $73(($1 + [208]), $2)
	*($1 + [400]) = $2
	$4 = ((int_64)(uint_64)*($2 + [8]) >> (uint_64)(int_64)8) + (int_64)*($2)
	*($1 + [208]) = $4)
	$6 = *($2 + [28])
	*($1 + [396]) = $6
	$7 = ($0 + [276])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [280]))) ){ goto $label$6 }
	*($8 + [8]) = $4
	*($8 + [16]) = $6
	*($1 + [400]) = [0]
	*($8) = $2
	*($7) = ($8 + [24])
	$2 = *($1 + [400])
	*($1 + [400]) = [0]
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $74(($0 + [272]), ($1 + [400]), ($1 + [208]), ($1 + [396]))
	$2 = *($1 + [400])
	*($1 + [400]) = [0]
	if ( ($2 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	*($1 + [152]) = [17911]
	*($1 + [156]) = CALL $237([17911])
	*($1 + [40]) = *($1 + [152])
	*($1 + [408]) = *(CALL $13(($1 + [160]), ($1 + [40])))
	CALL eosio_assert(((int_64)*(($0 + [248])) == (int_64)CALL eosio_assert2()), [20106])
	*($1 + [208]) = $3
	*($1 + [212]) = ($1 + [168])
	*($1 + [216]) = ($1 + [408])
	*(($2 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [24]) = $3
	CALL $75(($1 + [208]), $2)
	*($1 + [400]) = $2
	$4 = ((int_64)(uint_64)*($2 + [8]) >> (uint_64)(int_64)8) + (int_64)*($2)
	*($1 + [208]) = $4)
	$8 = *($2 + [28])
	*($1 + [396]) = $8
	$6 = ($0 + [276])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [280]))) ){ goto $label$9 }
	*($3 + [8]) = $4
	*($3 + [16]) = $8
	*($1 + [400]) = [0]
	*($3) = $2
	*($6) = ($3 + [24])
	$2 = *($1 + [400])
	*($1 + [400]) = [0]
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $74(($0 + [272]), ($1 + [400]), ($1 + [208]), ($1 + [396]))
	$2 = *($1 + [400])
	*($1 + [400]) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($2)
	
.LABEL $label$7
	*($1 + [136]) = [17911]
	*($1 + [140]) = CALL $237([17911])
	*($1 + [32]) = *($1 + [136])
	$5 = *(CALL $13(($1 + [144]), ($1 + [32])))
	CALL eosio_assert(((int_64)*($0 + [208]) == (int_64)CALL eosio_assert2()), [20106])
	$3 = ($0 + [208])
	*(($2 = CALL _Znwj([20])) + [8]) = $3
	*($2 + [4]) = [24620]
	*($2) = [1025]
	CALL eosio_assert([1], [20157])
	CALL memcpy(($1 + [208]), $2, [1])
	CALL eosio_assert([1], [20157])
	$8 = (($1 + [208]) | [1])
	CALL memcpy($8, ($2 + [1]), [1])
	CALL eosio_assert([1], [20157])
	$6 = (($1 + [208]) | [2])
	CALL memcpy($6, ($2 + [4]), [4])
	$4 = *($2)
	$9 = CALL db_store_i64(*(($0 + [216])), (int_64)-6525023824864346112, $5, $4, ($1 + [208]), [6])
	*($2 + [12]) = $9
	$7 = ($0 + [224])
	if ( ((uint_64)*($7) > (uint_64)$4) ){ goto $label$10 }
	*($7) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$10
	*($1 + [208]) = $2
	$10 = *($2)
	*($1 + [400]) = $10
	*($1 + [408]) = $9
	$11 = ($0 + [236])
	$7 = *($11)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [240]))) ){ goto $label$13 }
	*($7 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)255)
	*($7 + [16]) = $9
	*($1 + [208]) = [0]
	*($7) = $2
	*($11) = ($7 + [24])
	$2 = *($1 + [208])
	*($1 + [208]) = [0]
	if ( $2 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $76(($0 + [232]), ($1 + [208]), ($1 + [400]), ($1 + [408]))
	$2 = *($1 + [208])
	*($1 + [208]) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($2)
	
.LABEL $label$11
	*($1 + [120]) = [17911]
	*($1 + [124]) = CALL $237([17911])
	*($1 + [24]) = *($1 + [120])
	$5 = *(CALL $13(($1 + [128]), ($1 + [24])))
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL eosio_assert2()), [20106])
	*(($2 = CALL _Znwj([20])) + [8]) = $3
	*($2 + [4]) = [1330]
	*($2) = [18946]
	CALL eosio_assert([1], [20157])
	CALL memcpy(($1 + [208]), $2, [1])
	CALL eosio_assert([1], [20157])
	CALL memcpy($8, ($2 + [1]), [1])
	CALL eosio_assert([1], [20157])
	CALL memcpy($6, ($2 + [4]), [4])
	$4 = *($2)
	$9 = CALL db_store_i64(*(($0 + [216])), (int_64)-6525023824864346112, $5, $4, ($1 + [208]), [6])
	*($2 + [12]) = $9
	$7 = ($0 + [224])
	if ( ((uint_64)*($7) > (uint_64)$4) ){ goto $label$14 }
	*($7) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$14
	*($1 + [208]) = $2
	$10 = *($2)
	*($1 + [400]) = $10
	*($1 + [408]) = $9
	$11 = ($0 + [236])
	$7 = *($11)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [240]))) ){ goto $label$17 }
	*($7 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)255)
	*($7 + [16]) = $9
	*($1 + [208]) = [0]
	*($7) = $2
	*($11) = ($7 + [24])
	$2 = *($1 + [208])
	*($1 + [208]) = [0]
	if ( $2 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $76(($0 + [232]), ($1 + [208]), ($1 + [400]), ($1 + [408]))
	$2 = *($1 + [208])
	*($1 + [208]) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv($2)
	
.LABEL $label$15
	*($1 + [104]) = [17911]
	*($1 + [108]) = CALL $237([17911])
	*($1 + [16]) = *($1 + [104])
	$5 = *(CALL $13(($1 + [112]), ($1 + [16])))
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL eosio_assert2()), [20106])
	*(($2 = CALL _Znwj([20])) + [8]) = $3
	*($2 + [4]) = [1030]
	*($2) = [24323]
	CALL eosio_assert([1], [20157])
	CALL memcpy(($1 + [208]), $2, [1])
	CALL eosio_assert([1], [20157])
	CALL memcpy($8, ($2 + [1]), [1])
	CALL eosio_assert([1], [20157])
	CALL memcpy($6, ($2 + [4]), [4])
	$4 = *($2)
	$9 = CALL db_store_i64(*(($0 + [216])), (int_64)-6525023824864346112, $5, $4, ($1 + [208]), [6])
	*($2 + [12]) = $9
	$7 = ($0 + [224])
	if ( ((uint_64)*($7) > (uint_64)$4) ){ goto $label$18 }
	*($7) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$18
	*($1 + [208]) = $2
	$10 = *($2)
	*($1 + [400]) = $10
	*($1 + [408]) = $9
	$11 = ($0 + [236])
	$7 = *($11)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [240]))) ){ goto $label$21 }
	*($7 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)255)
	*($7 + [16]) = $9
	*($1 + [208]) = [0]
	*($7) = $2
	*($11) = ($7 + [24])
	$2 = *($1 + [208])
	*($1 + [208]) = [0]
	if ( $2 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL $76(($0 + [232]), ($1 + [208]), ($1 + [400]), ($1 + [408]))
	$2 = *($1 + [208])
	*($1 + [208]) = [0]
	if ( ($2 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv($2)
	
.LABEL $label$19
	*($1 + [88]) = [17911]
	*($1 + [92]) = CALL $237([17911])
	*($1 + [8]) = *($1 + [88])
	$5 = *(CALL $13(($1 + [96]), ($1 + [8])))
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL eosio_assert2()), [20106])
	*(($2 = CALL _Znwj([20])) + [8]) = $3
	*($2 + [4]) = [2010]
	*($2) = [12548]
	CALL eosio_assert([1], [20157])
	CALL memcpy(($1 + [208]), $2, [1])
	CALL eosio_assert([1], [20157])
	CALL memcpy($8, ($2 + [1]), [1])
	CALL eosio_assert([1], [20157])
	CALL memcpy($6, ($2 + [4]), [4])
	$4 = *($2)
	$9 = CALL db_store_i64(*(($0 + [216])), (int_64)-6525023824864346112, $5, $4, ($1 + [208]), [6])
	*($2 + [12]) = $9
	$7 = ($0 + [224])
	if ( ((uint_64)*($7) > (uint_64)$4) ){ goto $label$22 }
	*($7) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$22
	*($1 + [208]) = $2
	$10 = *($2)
	*($1 + [400]) = $10
	*($1 + [408]) = $9
	$11 = ($0 + [236])
	$7 = *($11)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [240]))) ){ goto $label$25 }
	*($7 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)255)
	*($7 + [16]) = $9
	*($1 + [208]) = [0]
	*($7) = $2
	*($11) = ($7 + [24])
	$2 = *($1 + [208])
	*($1 + [208]) = [0]
	if ( $2 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL $76(($0 + [232]), ($1 + [208]), ($1 + [400]), ($1 + [408]))
	$2 = *($1 + [208])
	*($1 + [208]) = [0]
	if ( ($2 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv($2)
	
.LABEL $label$23
	*($1 + [72]) = [17911]
	*($1 + [76]) = CALL $237([17911])
	*($1) = *($1 + [72])
	$5 = *(CALL $13(($1 + [80]), $1))
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL eosio_assert2()), [20106])
	*(($2 = CALL _Znwj([20])) + [8]) = $3
	*($2 + [4]) = [4100]
	*($2) = [6149]
	CALL eosio_assert([1], [20157])
	CALL memcpy(($1 + [208]), $2, [1])
	CALL eosio_assert([1], [20157])
	CALL memcpy($8, ($2 + [1]), [1])
	CALL eosio_assert([1], [20157])
	CALL memcpy($6, ($2 + [4]), [4])
	$4 = *($2)
	$8 = CALL db_store_i64(*(($0 + [216])), (int_64)-6525023824864346112, $5, $4, ($1 + [208]), [6])
	*($2 + [12]) = $8
	$3 = ($0 + [224])
	if ( ((uint_64)*($3) > (uint_64)$4) ){ goto $label$26 }
	*($3) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$26
	*($1 + [208]) = $2
	$6 = *($2)
	*($1 + [400]) = $6
	*($1 + [408]) = $8
	$7 = ($0 + [236])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [240]))) ){ goto $label$29 }
	*($3 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	*($3 + [16]) = $8
	*($1 + [208]) = [0]
	*($3) = $2
	*($7) = ($3 + [24])
	$0 = *($1 + [208])
	*($1 + [208]) = [0]
	if ( $0 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL $76(($0 + [232]), ($1 + [208]), ($1 + [400]), ($1 + [408]))
	$0 = *($1 + [208])
	*($1 + [208]) = [0]
	if ( ($0 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv($0)
	
.LABEL $label$27
	$global$0 = ($1 + [416])
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $243($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $67(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $247($2)
	
.LABEL $label$6
	CALL $68($8)
	$global$0 = ($4 + [480])
	return [1]
}

int_32 .FUNC $184 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $177($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $187 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $236(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $218 (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [2] ? [3] : (int_64)(((int_64)$2 | (int_64)$0) == 0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC $186 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $235(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $180 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $181($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $116 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [16])
	$global$0 = $3
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$6 = ($3 + [8])
	$7 = $5
	
.LOOP $label$3:
	$7 = ($7 + [-24])
	$8 = *($7)
	$9 = [0]
	*($6) = [0]
	*($3) = (int_64)0
	
.LOOP $label$4:
	$10 = *(($8 + $9))
	CALL $183($3, *((uint_32($10 >> [4]) + [8373])))
	CALL $183($3, *((($10 & [15]) + [8373])))
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$4 }
	$11 = CALL $4($3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$5
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$1 }
	$5 = $7
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = $4
	
.LABEL $label$1
	if ( ((int_32)$5 == (int_32)*(($1 + [24]))) ){ goto $label$7 }
	$9 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$1), [19850])
	*($0 + [4]) = $9
	goto $label$6 
	
.LABEL $label$7
	$9 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4057510847608520704, $2)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$8 }
	$9 = CALL $138($1, $9)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$1), [19850])
	*($0 + [4]) = $9
	goto $label$6 
	
.LABEL $label$8
	*($0 + [4]) = [0]
	
.LABEL $label$6
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $117 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [19998])
	$3 = *($0 + [4])
	$4 = *($3 + [56])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$5 = *($4 + [8])
	$6 = *($4)
	*($1 + [24]) = [0]
	*($1 + [16]) = (int_64)0
	
.LOOP $label$2:
	$4 = *(($3 + $2))
	CALL $183(($1 + [16]), *((uint_32($4 >> [4]) + [8373])))
	CALL $183(($1 + [16]), *((($4 & [15]) + [8373])))
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	$7 = CALL $4(($1 + [16]))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$3
	$4 = CALL db_idx64_find_primary($6, $5, (int_64)-4057510847608520704, ($1 + [16]), $7)
	*(*(($0 + [4])) + [56]) = $4
	
.LABEL $label$1
	*($1 + [16]) = (int_64)0
	$2 = CALL db_idx64_next($4, ($1 + [16]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$4 }
	CALL $116(($1 + [8]), *(*($0)), *($1 + [16]))
	$4 = *($1 + [12])
	*(($0 + [4])) = $4
	*(($4 + [56])) = $2
	$global$0 = ($1 + [32])
	return $0
	
.LABEL $label$4
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [32])
	return $0
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [21054])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $105($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [19924])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [19901])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $243($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [19924])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [19924])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	*($5 + [8]) = *($3 + [24])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [19924])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = ((int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8) + (int_64)*($5)
	*($3 + [24]) = $7)
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $247($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $112 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert2()), [20106])
	*(($5 = CALL _Znwj([96])) + [80]) = $1
	$3 = CALL memcpy($5, *($3), [80])
	*($4 + [88]) = ($4 + [75])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($3 + [8])
	*($4 + [104]) = $3
	*($4 + [112]) = ($3 + [16])
	*($4 + [116]) = ($3 + [17])
	*($4 + [120]) = ($3 + [18])
	*($4 + [124]) = ($3 + [24])
	*($4 + [128]) = ($3 + [32])
	*($4 + [132]) = ($3 + [36])
	*($4 + [136]) = ($3 + [40])
	*($4 + [140]) = ($3 + [48])
	*($4 + [144]) = ($3 + [56])
	*($4 + [148]) = ($3 + [64])
	*($4 + [152]) = ($3 + [72])
	CALL $154(($4 + [104]), ($4 + [96]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, $4, [75])
	*($3 + [84]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [104]) = $3
	*($4) = (int_64)7235159537265672192
	*($4 + [80]) = $6
	$7 = ($1 + [28])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($5 + [8]) = (int_64)7235159537265672192
	*($5 + [16]) = $6
	*($4 + [104]) = [0]
	*($5) = $3
	*($7) = ($5 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $153(($1 + [24]), ($4 + [104]), $4, ($4 + [80]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [104])
	*($4 + [104]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($4 + [160])
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [21054])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $137($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [19924])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [19924])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [20157])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [20157])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [20516])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert2()), [20562])
	$1 = CALL memcpy($1, *($3), [80])
	CALL eosio_assert([1], [20613])
	*($4 + [88]) = ($4 + [75])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [8])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [16])
	*($4 + [116]) = ($1 + [17])
	*($4 + [120]) = ($1 + [18])
	*($4 + [124]) = ($1 + [24])
	*($4 + [128]) = ($1 + [32])
	*($4 + [132]) = ($1 + [36])
	*($4 + [136]) = ($1 + [40])
	*($4 + [140]) = ($1 + [48])
	*($4 + [144]) = ($1 + [56])
	*($4 + [148]) = ($1 + [64])
	*($4 + [152]) = ($1 + [72])
	CALL $154(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [84]), $2, $4, [75])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [160])
}

int_32 .FUNC $237 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [20865])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert2()), [20910])
	$3 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	
.LOOP $label$1:
	$4 = *(($1 + $3))
	CALL $183($2, *((uint_32($4 >> [4]) + [8373])))
	CALL $183($2, *((($4 & [15]) + [8373])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$5 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$2
	$7 = ($0 + [28])
	$8 = *($7)
	$6 = *($0 + [24])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$4 }
	$9 = ($2 + [8])
	$10 = $8
	
.LOOP $label$5:
	$10 = ($10 + [-24])
	$11 = *($10)
	$3 = [0]
	*($9) = [0]
	*($2) = (int_64)0
	
.LOOP $label$6:
	$4 = *(($11 + $3))
	CALL $183($2, *((uint_32($4 >> [4]) + [8373])))
	CALL $183($2, *((($4 & [15]) + [8373])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$6 }
	$12 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$7
	if ( ((int_64)$12 == (int_64)$5) ){ goto $label$3 }
	$8 = $10
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = $6
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)*(($0 + [24]))), [20960])
	$10 = *($7)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$10 }
	$3 = $8
	
.LOOP $label$11:
	$11 = *($3)
	*($3) = [0]
	$8 = ($3 + [-24])
	$4 = *($8)
	*($8) = $11
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	*(($3 + [-8])) = *(($3 + [16]))
	*(($3 + [-16])) = *(($3 + [8]))
	$3 = ($3 + [24])
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$11 }
	$4 = ($3 + [-24])
	$8 = *(($0 + [28]))
	if ( ((int_32)($8 + [24]) != (int_32)$3) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = ($8 + [-24])
	
.LABEL $label$9
	
.LOOP $label$13:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	CALL _ZdlPv($3)
	
.LABEL $label$14
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$13 }
	
.LABEL $label$8
	*(($0 + [28])) = $4
	CALL db_remove_i64(*(($1 + [52])))
	$3 = *(($1 + [56]))
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$16 }
	$12 = *($0 + [8])
	$5 = *($0)
	$3 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	
.LOOP $label$17:
	$4 = *(($1 + $3))
	CALL $183($2, *((uint_32($4 >> [4]) + [8373])))
	CALL $183($2, *((($4 & [15]) + [8373])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$17 }
	$13 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$18
	$3 = CALL db_idx64_find_primary($5, $12, (int_64)-4057510847608520704, $2, $13)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($3)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [24]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert2()), [20106])
	*($4 + [36]) = $3
	*($4 + [32]) = $1
	*($4 + [40]) = ($4 + [24])
	*(($5 = CALL _Znwj([64])) + [48]) = $1
	CALL $139(($4 + [32]), $5)
	*($4 + [16]) = $5
	$3 = [0]
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	
.LOOP $label$1:
	$6 = *(($5 + $3))
	CALL $183(($4 + [32]), *((uint_32($6 >> [4]) + [8373])))
	CALL $183(($4 + [32]), *((($6 & [15]) + [8373])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$2 = CALL $4(($4 + [32]))
	if ( (*($4 + [32]) & [1]) ){ goto $label$3 }
	$6 = $5
	goto $label$2 
	
.LABEL $label$3
	CALL _ZdlPv(*(($4 + [40])))
	$6 = *($4 + [16])
	
.LABEL $label$2
	*($4 + [32]) = $2
	$7 = *($6 + [52])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$5 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [16]) = [0]
	*($3) = $6
	*($8) = ($3 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $140(($1 + [24]), ($4 + [16]), ($4 + [32]), ($4 + [12]))
	
.LABEL $label$4
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [16])
	*($4 + [16]) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
}

void .FUNC $29 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [400])
	$global$0 = $2
	CALL memset(($2 + [304]), [0], [80])
	$3 = ($0 + [168])
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	if ( $4 ){ goto $label$1 }
	$4 = ($2 + [304])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($3), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $45($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	goto $label$1 
	
.LABEL $label$3
	$4 = ($2 + [304])
	
.LABEL $label$1
	CALL $2((*($4 + [17]) == 0), [17924], [20027])
	*($2 + [296]) = [17911]
	*($2 + [300]) = CALL $237([17911])
	*($2 + [56]) = *($2 + [296])
	CALL $13(($2 + [304]), ($2 + [56]))
	*($2 + [288]) = [17944]
	*($2 + [292]) = CALL $237([17944])
	*($2 + [48]) = *($2 + [288])
	CALL $13(($2 + [96]), ($2 + [48]))
	CALL require_auth2((int_64)-2984964984929477328, (int_64)5037610434748743680)
	CALL $2(CALL $fimport$9($1), [19525], [20013])
	*($2 + [280]) = $1
	*($2 + [272]) = ($0 + [48])
	CALL $77(($2 + [264]), ($2 + [272]), ($2 + [280]))
	CALL $2(((int_64)*(*($2 + [268])) == (int_64)$1), [19430], [20015])
	CALL $2(((int_64)*(*($2 + [268]) + [56]) > (int_64)0), [19452], [20015])
	$5 = *(*($2 + [268]) + [56])
	$4 = CALL $237([18058])
	if ( ($4 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [20700])
	goto $label$6 
	
.LABEL $label$7
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = (int_64)0
	
.LOOP $label$8:
	$3 = *(($4 + [18057]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$9
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$8 }
	$7 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$4 
	
.LABEL $label$5
	$7 = (int_64)4
	
.LABEL $label$4
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [19929])
	$6 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$6 = $8
	$3 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$6 = $8
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $3 ){ goto $label$14 }
	$3 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$3 = [0]
	
.LABEL $label$10
	CALL eosio_assert($3, [19978])
	CALL $2(((int_64)$5 < (int_64)10000000000000000), [19551], [20018])
	$4 = *($2 + [268])
	*($2 + [304]) = *($4)
	*($2 + [312]) = (int_64)0
	*($2 + [320]) = (int_64)0
	$6 = *($4 + [56])
	*($2 + [328]) = $6
	*($2 + [336]) = (int_64)0
	*($2 + [344]) = (int_64)0
	*($2 + [352]) = (int_64)0
	*($2 + [368]) = (int_64)-1
	*($2 + [376]) = (int_64)0
	*($2 + [360]) = (int_64))((int_64)0 - $6)
	CALL $78($0, ($2 + [304]))
	*($2 + [192]) = [18170]
	*($2 + [196]) = CALL $237([18170])
	*($2 + [40]) = *($2 + [192])
	$4 = CALL $13(($2 + [200]), ($2 + [40]))
	*($2 + [176]) = [17999]
	*($2 + [180]) = CALL $237([17999])
	*($2 + [32]) = *($2 + [176])
	$3 = CALL $13(($2 + [184]), ($2 + [32]))
	*($2 + [208]) = *($4)
	*($2 + [216]) = *($3)
	*($2 + [160]) = [17898]
	*($2 + [164]) = CALL $237([17898])
	*($2 + [24]) = *($2 + [160])
	$9 = CALL $13(($2 + [168]), ($2 + [24]))
	*($2 + [144]) = [17846]
	*($2 + [148]) = CALL $237([17846])
	*($2 + [16]) = *($2 + [144])
	$0 = CALL $13(($2 + [152]), ($2 + [16]))
	*($2 + [80]) = [18170]
	*($2 + [84]) = CALL $237([18170])
	*($2 + [8]) = *($2 + [80])
	$10 = CALL $13(($2 + [88]), ($2 + [8]))
	*(($2 + [72])) = [0]
	*($2 + [64]) = (int_64)0
	$4 = CALL $237([19576])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$19 }
	*($2 + [64]) = ($4 << [1])
	$3 = (($2 + [64]) | [1])
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$11 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($11)
	*($2 + [64]) = ($11 | [1])
	*($2 + [72]) = $3
	*($2 + [68]) = $4
	
.LABEL $label$18
	CALL memcpy($3, [19576], $4)
	
.LABEL $label$17
	*(($3 + $4)) = [0]
	*(($2 + [120])) = $7
	$4 = ($2 + [72])
	*(($2 + [136])) = *($4)
	*($4) = [0]
	*($2 + [104]) = $1
	*($2 + [112]) = $5
	*($2 + [96]) = *($10)
	*($2 + [128]) = *($2 + [64])
	*($2 + [64]) = (int_64)0
	$4 = CALL $55(($2 + [224]), ($2 + [208]), *($9), *($0), ($2 + [96]))
	CALL $56(($2 + [384]), $4)
	$3 = *($2 + [384])
	CALL send_inline($3, (*($2 + [388]) - $3))
	$3 = *($2 + [384])
	if ( ($3 == 0) ){ goto $label$20 }
	*($2 + [388]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$3 = *($4 + [28])
	if ( ($3 == 0) ){ goto $label$21 }
	*(($4 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$3 = *($4 + [16])
	if ( ($3 == 0) ){ goto $label$22 }
	*(($4 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$22
	if ( (*(($2 + [128])) & [1]) ){ goto $label$24 }
	if ( (*($2 + [64]) & [1]) ){ goto $label$23 }
	goto $label$15 
	
.LABEL $label$24
	CALL _ZdlPv(*(($2 + [136])))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($2 + [72])))
	$global$0 = ($2 + [400])
	return (unreachable)
	
.LABEL $label$16
	CALL $174(($2 + [64]))
	
.LABEL $label$15
	$global$0 = ($2 + [400])
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [368])
	$global$0 = $2
	*($2 + [360]) = $1
	CALL memset(($2 + [200]), [0], [80])
	$3 = ($0 + [168])
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	if ( $4 ){ goto $label$1 }
	$4 = ($2 + [200])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($3), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $45($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	goto $label$1 
	
.LABEL $label$3
	$4 = ($2 + [200])
	
.LABEL $label$1
	CALL memcpy(($2 + [280]), $4, [80])
	CALL $2((*($2 + [297]) == 0), [17924], [20027])
	CALL $2(((uint_64)(int_64))(((int_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) & (int_64)4294967295) - *($2 + [344])) > (uint_64)(int_64)30), [18799], [20040])
	CALL require_auth($1)
	*($2 + [192]) = ($0 + [48])
	CALL $77(($2 + [184]), ($2 + [192]), ($2 + [360]))
	CALL $2(((int_64)*(*($2 + [188])) == (int_64)*($2 + [360])), [18845], [20007])
	$1 = *(*($2 + [188]) + [56])
	CALL $2(((int_64)$1 > (int_64)0), [18868], [20008])
	*($2 + [208]) = (int_64)0
	*($2 + [216]) = $1
	*($2 + [224]) = (int_64)0
	*($2 + [232]) = (int_64)0
	*($2 + [240]) = (int_64)0
	*($2 + [248]) = (int_64)0
	*($2 + [256]) = (int_64))((int_64)0 - $1)
	*($2 + [264]) = (int_64)-1
	*($2 + [272]) = (int_64)0
	*($2 + [200]) = *($2 + [360])
	CALL $78($0, ($2 + [200]))
	CALL memset(($2 + [24]), [0], [80])
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)*(($0 + [192]))) ){ goto $label$5 }
	$0 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$3), [19850])
	if ( $0 ){ goto $label$4 }
	$0 = ($2 + [24])
	goto $label$4 
	
.LABEL $label$5
	$0 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$6 }
	$0 = CALL $45($3, $0)
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$3), [19850])
	goto $label$4 
	
.LABEL $label$6
	$0 = ($2 + [24])
	
.LABEL $label$4
	CALL memcpy(($2 + [104]), $0, [80])
	CALL memcpy(($2 + [280]), ($2 + [104]), [80])
	*($2 + [288]) = ((int_64)*($2 + [288]) + (int_64)$1)
	*($2 + [8]) = [17911]
	*($2 + [12]) = CALL $237([17911])
	*($2) = *($2 + [8])
	CALL $72($3, ($2 + [280]), *(CALL $13(($2 + [16]), $2)))
	$global$0 = ($2 + [368])
}

int_32 .FUNC $235 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [512])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $243($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [488]) = (int_64)0
	*($4 + [480]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [19924])
	CALL memcpy(($4 + [480]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [19924])
	CALL memcpy((($4 + [480]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $67(($4 + [32]), $0, $1, $4)
	$0 = *($4 + [480])
	*($4 + [496]) = *($4 + [488])
	*($4 + [504]) = $0
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [504])), (int_32 ($4 + [496])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $247($2)
	
.LABEL $label$6
	CALL $68($8)
	$global$0 = ($4 + [512])
	return [1]
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [464])
	$global$0 = $3
	CALL memset(($3 + [352]), [0], [80])
	$4 = ($0 + [168])
	$5 = *(($0 + [196]))
	if ( ((int_32)$5 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	if ( $5 ){ goto $label$1 }
	$5 = ($3 + [352])
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($4), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $45($4, $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [352])
	
.LABEL $label$1
	CALL $2((*($5 + [17]) == 0), [17924], [20027])
	*($3 + [336]) = [17911]
	*($3 + [340]) = CALL $237([17911])
	*($3 + [88]) = *($3 + [336])
	CALL require_auth(*(CALL $13(($3 + [344]), ($3 + [88]))))
	$6 = ($0 + [408])
	$7 = *($2)
	$4 = *(($0 + [436]))
	$8 = *(($0 + [432]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$7:
	$5 = ($4 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$7) ){ goto $label$6 }
	$4 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$6), [19850])
	goto $label$4 
	
.LABEL $label$5
	$9 = [0]
	$5 = CALL db_find_i64(*($6), *(($0 + [416])), (int_64)-8173734943709462528, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$9 = CALL $69($6, $5)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$6), [19850])
	
.LABEL $label$4
	$5 = ((int_32)$9 != (int_32)[0])
	CALL $2($5, [18590], [20034])
	CALL $2(((int_64)*($9 + [8]) == (int_64)*($1)), [18613], [20035])
	CALL eosio_assert($5, [20831])
	CALL eosio_assert($5, [19998])
	$5 = CALL db_next_i64(*($9 + [20]), ($3 + [352]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	CALL $69($6, $5)
	
.LABEL $label$8
	CALL $70($6, $9)
	$5 = CALL db_lowerbound_i64(*(($0 + [408])), *(($0 + [416])), (int_64)-8173734943709462528, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $69($6, $5)
	if ( ((uint_64)*($4) >= (uint_64)*($2)) ){ goto $label$9 }
	$9 = [1]
	
.LOOP $label$10:
	$5 = [0]
	$8 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($8, [20831])
	CALL eosio_assert($8, [19998])
	$8 = CALL db_next_i64(*($4 + [20]), ($3 + [352]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$11 }
	$5 = CALL $69($6, $8)
	
.LABEL $label$11
	CALL $70($6, $4)
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((uint_32)$9 > (uint_32)[2]) ){ goto $label$9 }
	$9 = ($9 + [1])
	$4 = $5
	if ( (uint_64)(*($5) <= *($2)) ){ goto $label$10 }
	
.LABEL $label$9
	$10 = *($1)
	$5 = CALL $237([8984])
	if ( ($5 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [20700])
	goto $label$14 
	
.LABEL $label$15
	if ( ($5 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$7 = (int_64)0
	
.LOOP $label$16:
	$4 = *(($5 + [8983]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$16 }
	$11 = ((int_64)$7 << (int_64)8)
	goto $label$12 
	
.LABEL $label$13
	$11 = (int_64)0
	
.LABEL $label$12
	CALL eosio_assert([1], [19929])
	$7 = (uint_64)$11 >> (uint_64)(int_64)8)
	$12 = ((int_64)$11 | (int_64)4)
	$5 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$7 = $11
	$4 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$7 = $11
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $4 ){ goto $label$22 }
	$4 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$4 = [0]
	
.LABEL $label$18
	CALL eosio_assert($4, [19978])
	*($3 + [264]) = [17871]
	*($3 + [268]) = CALL $237([17871])
	*($3 + [80]) = *($3 + [264])
	$5 = CALL $13(($3 + [272]), ($3 + [80]))
	$7 = *($2)
	$13 = *($5)
	*(($3 + [72])) = $13
	*((($3 + [56]) + [8])) = $12
	*($3 + [288]) = $12
	$11 = (int_64)0
	*($3 + [280]) = (int_64)0
	*($3 + [296]) = $13
	*($3 + [56]) = (int_64)0
	CALL $71(($3 + [304]), $0, $10, ($3 + [56]), $7, [10000])
	$6 = *($3 + [304])
	$5 = CALL $237([8984])
	if ( ($5 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [20700])
	goto $label$24 
	
.LABEL $label$25
	if ( ($5 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$7 = (int_64)0
	
.LOOP $label$26:
	$4 = *(($5 + [8983]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$27
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$26 }
	$11 = ((int_64)$7 << (int_64)8)
	
.LABEL $label$23
	CALL eosio_assert([1], [19929])
	$7 = (uint_64)$11 >> (uint_64)(int_64)8)
	$10 = ((int_64)$11 | (int_64)4)
	$5 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$7 = $11
	$4 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$7 = $11
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $4 ){ goto $label$32 }
	$4 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	CALL eosio_assert($4, [19978])
	$11 = (int_64)5
	if ( ((($6 + [-1]) & [65535]) <= [9885]) ){ goto $label$33 }
	$11 = (int_64)50
	if ( ((($6 + [-9887]) & [65535]) <= [99]) ){ goto $label$33 }
	$11 = (int_64)500
	if ( ((($6 + [-9987]) & [65535]) <= [7]) ){ goto $label$33 }
	$11 = (int_64)5000
	if ( ((($6 + [-9995]) & [65535]) <= [3]) ){ goto $label$33 }
	$5 = ($6 & [65535])
	$11 = ( (int_64)50000 ? ( (int_64)500000 ? (int_64)0 : ((int_32)$5 == (int_32)[10000]) ) : ((int_32)$5 == (int_32)[9999]) )
	
.LABEL $label$33
	$8 = ($0 + [288])
	*($3 + [256]) = $8
	CALL $62(($3 + [248]), ($3 + [256]), $1)
	CALL $2(((int_64)*(*($3 + [252])) == (int_64)*($1)), [18638], [20006])
	CALL $2(((int_64)*(*($3 + [252]) + [16]) != (int_64)0), [18658], [20006])
	$13 = ((int_64)*(*($3 + [252]) + [16]) + (int_64)-1)
	CALL $2((uint_64)($13 <= (int_64)10000000000000000), [18681], [20018])
	$7 = *(*($3 + [252]) + [64])
	$9 = *(($0 + [316]))
	$6 = *(($0 + [312]))
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$35 }
	
.LOOP $label$37:
	$4 = ($9 + [-24])
	$5 = *($4)
	if ( ((int_64)*($5 + [64]) == (int_64)$7) ){ goto $label$36 }
	$9 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$35 }
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$8), [19850])
	goto $label$34 
	
.LABEL $label$35
	$5 = [0]
	$4 = CALL db_find_i64(*($8), *(($0 + [296])), (int_64)-3020371202490236928, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$34 }
	$5 = CALL $65($8, $4)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$8), [19850])
	
.LABEL $label$34
	*($3 + [232]) = [17911]
	*($3 + [236]) = CALL $237([17911])
	*($3 + [48]) = *($3 + [232])
	$12 = *(CALL $13(($3 + [240]), ($3 + [48])))
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [20481])
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$8), [20516])
	CALL eosio_assert(((int_64)*(($0 + [288])) == (int_64)CALL eosio_assert2()), [20562])
	*($5 + [16]) = $13
	*($5 + [40]) = $11
	*($3 + [432]) = *($5)
	$4 = ($5 + [8])
	$7 = *($4)
	*($3 + [440]) = ( (int_64))((int_64)0 - $7) ? (int_64)-1 : ((int_64)$7 > (int_64)0) )
	$7 = *($5 + [64])
	*($5 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$7 == (int_64)*($5 + [64])), [20613])
	*($3 + [456]) = (($3 + [352]) + [72])
	*($3 + [452]) = ($3 + [352])
	*($3 + [448]) = ($3 + [352])
	*($3 + [96]) = ($3 + [448])
	*($3 + [196]) = $4
	*($3 + [192]) = $5
	*($3 + [200]) = ($5 + [16])
	*($3 + [204]) = ($5 + [24])
	*($3 + [208]) = ($5 + [32])
	*($3 + [212]) = ($5 + [40])
	*($3 + [216]) = ($5 + [48])
	*($3 + [220]) = ($5 + [56])
	*($3 + [224]) = ($5 + [64])
	CALL $66(($3 + [192]), ($3 + [96]))
	CALL db_update_i64(*($5 + [76]), $12, ($3 + [352]), [72])
	$9 = ($0 + [304])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$38 }
	*($9) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$38
	$9 = (($3 + [432]) + [8])
	*($3 + [192]) = *($5)
	if ( (CALL $236(($3 + [432]), ($3 + [192]), [8]) == 0) ){ goto $label$39 }
	$8 = ($5 + [80])
	$6 = *($8)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$40 }
	$6 = CALL db_idx64_find_primary(*(($0 + [288])), *(($0 + [296])), (int_64)-3020371202490236928, ($3 + [96]), $7)
	*($8) = $6
	
.LABEL $label$40
	CALL db_idx64_update($6, $12, ($3 + [192]))
	
.LABEL $label$39
	$13 = *($4)
	*($3 + [192]) = ( (int_64))((int_64)0 - $13) ? (int_64)-1 : ((int_64)$13 > (int_64)0) )
	if ( (CALL $236($9, ($3 + [192]), [8]) == 0) ){ goto $label$41 }
	$4 = ($5 + [84])
	$5 = *($4)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$42 }
	$5 = CALL db_idx64_find_primary(*(($0 + [288])), *(($0 + [296])), (int_64)-3020371202490236927, ($3 + [96]), $7)
	*($4) = $5
	
.LABEL $label$42
	CALL db_idx64_update($5, $12, ($3 + [192]))
	
.LABEL $label$41
	*($3 + [176]) = [18702]
	*($3 + [180]) = CALL $237([18702])
	*($3 + [40]) = *($3 + [176])
	$5 = CALL $13(($3 + [184]), ($3 + [40]))
	*($3 + [160]) = [17999]
	*($3 + [164]) = CALL $237([17999])
	*($3 + [32]) = *($3 + [160])
	$4 = CALL $13(($3 + [168]), ($3 + [32]))
	*($3 + [432]) = *($5)
	*($3 + [440]) = *($4)
	*($3 + [144]) = [17871]
	*($3 + [148]) = CALL $237([17871])
	*($3 + [24]) = *($3 + [144])
	$9 = CALL $13(($3 + [152]), ($3 + [24]))
	*($3 + [128]) = [17846]
	*($3 + [132]) = CALL $237([17846])
	*($3 + [16]) = *($3 + [128])
	$6 = CALL $13(($3 + [136]), ($3 + [16]))
	*($3 + [112]) = [18702]
	*($3 + [116]) = CALL $237([18702])
	*($3 + [8]) = *($3 + [112])
	$8 = CALL $13(($3 + [120]), ($3 + [8]))
	*((($3 + [96]) + [8])) = [0]
	*($3 + [96]) = (int_64)0
	$5 = CALL $237([18715])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$48 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$51 }
	*($3 + [96]) = ($5 << [1])
	$4 = (($3 + [96]) | [1])
	if ( $5 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$0 = (($5 + [16]) & [-16])
	$4 = CALL _Znwj($0)
	*($3 + [96]) = ($0 | [1])
	*($3 + [104]) = $4
	*($3 + [100]) = $5
	
.LABEL $label$50
	CALL memcpy($4, [18715], $5)
	
.LABEL $label$49
	*(($4 + $5)) = [0]
	*(($3 + [376])) = $10
	$5 = ($3 + [104])
	*(($3 + [392])) = *($5)
	*($5) = [0]
	*($3 + [368]) = $11
	*($3 + [352]) = *($8)
	*($3 + [360]) = *($1)
	*($3 + [384]) = *($3 + [96])
	*($3 + [96]) = (int_64)0
	$5 = CALL $55(($3 + [192]), ($3 + [432]), *($9), *($6), ($3 + [352]))
	CALL $56(($3 + [448]), $5)
	$4 = *($3 + [448])
	CALL send_inline($4, (*($3 + [452]) - $4))
	$4 = *($3 + [448])
	if ( ($4 == 0) ){ goto $label$52 }
	*($3 + [452]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$52
	$4 = *($5 + [28])
	if ( ($4 == 0) ){ goto $label$53 }
	*(($5 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$53
	$4 = *($5 + [16])
	if ( ($4 == 0) ){ goto $label$54 }
	*(($5 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$54
	if ( (*(($3 + [384])) & [1]) ){ goto $label$56 }
	if ( (*($3 + [96]) & [1]) ){ goto $label$55 }
	goto $label$47 
	
.LABEL $label$56
	CALL _ZdlPv(*(($3 + [392])))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$47 }
	
.LABEL $label$55
	CALL _ZdlPv(*(($3 + [104])))
	$5 = [1]
	if ( ((*($3 + [320]) & [1]) == 0) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	CALL $174(($3 + [96]))
	
.LABEL $label$47
	$5 = [1]
	if ( (*($3 + [320]) & [1]) ){ goto $label$45 }
	
.LABEL $label$46
	if ( (*($3 + [308]) & $5) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	CALL _ZdlPv(*(($3 + [328])))
	if ( ((*($3 + [308]) & $5) == 0) ){ goto $label$43 }
	
.LABEL $label$44
	CALL _ZdlPv(*(($3 + [316])))
	$global$0 = ($3 + [464])
	return 
	
.LABEL $label$43
	$global$0 = ($3 + [464])
	(unreachable)
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [496])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $243($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [488]) = (int_64)0
	*($4 + [480]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [19924])
	CALL memcpy(($4 + [480]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [19924])
	CALL memcpy((($4 + [480]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $67(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [488])
	$1 = *($4 + [480])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $247($2)
	
.LABEL $label$6
	CALL $68($8)
	$global$0 = ($4 + [496])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	float_64 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	float_64 $23
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL memset(($3 + [48]), [0], [80])
	$4 = ($0 + [168])
	$5 = *(($0 + [196]))
	if ( ((int_32)$5 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	if ( $5 ){ goto $label$1 }
	$5 = ($3 + [48])
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_find_i64(*($4), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $45($4, $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$4), [19850])
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [48])
	
.LABEL $label$1
	$6 = *($5 + [40])
	$7 = *($5 + [8])
	$4 = *($5 + [16])
	CALL $2((*($5 + [17]) == 0), [17924], [20027])
	*($3 + [40]) = [17911]
	*($3 + [44]) = CALL $237([17911])
	*($3 + [8]) = *($3 + [40])
	CALL $13(($3 + [48]), ($3 + [8]))
	*($3 + [32]) = [17944]
	*($3 + [36]) = CALL $237([17944])
	*($3) = *($3 + [32])
	CALL $13(($3 + [16]), $3)
	CALL require_auth2((int_64)-2984964984929477328, (int_64)5037610434748743680)
	CALL $2(((int_32)$4 == (int_32)[1]), [18971], [20012])
	$5 = CALL $237([8984])
	if ( ($5 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [20700])
	goto $label$6 
	
.LABEL $label$7
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = (int_64)0
	
.LOOP $label$8:
	$4 = *(($5 + [8983]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$8 }
	$9 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$4 
	
.LABEL $label$5
	$9 = (int_64)4
	
.LABEL $label$4
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [19929])
	$8 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$8 = $10
	$4 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$8 = $10
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $4 ){ goto $label$14 }
	$4 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$4 = [0]
	
.LABEL $label$10
	CALL eosio_assert($4, [19978])
	$12 = ($0 + [48])
	$11 = *(($0 + [76]))
	$13 = *(($0 + [72]))
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$16 }
	
.LOOP $label$18:
	$4 = ($11 + [-24])
	$5 = *($4)
	if ( ((int_64)*($5 + [72]) == (int_64)$1) ){ goto $label$17 }
	$11 = $4
	if ( ((int_32)$13 != (int_32)$4) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$12), [19850])
	goto $label$15 
	
.LABEL $label$16
	$5 = [0]
	$4 = CALL db_find_i64(*($12), *(($0 + [56])), (int_64)-3020384829779738624, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$15 }
	$5 = CALL $79($12, $4)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$12), [19850])
	
.LABEL $label$15
	$14 = [0]
	CALL $2(((int_32)$5 != (int_32)[0]), [18985], [20039])
	$11 = *(($0 + [76]))
	$13 = *(($0 + [72]))
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$20 }
	
.LOOP $label$22:
	$4 = ($11 + [-24])
	$15 = *($4)
	if ( ((int_64)*($15 + [72]) == (int_64)$2) ){ goto $label$21 }
	$11 = $4
	if ( ((int_32)$13 != (int_32)$4) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*($15 + [80]) == (int_32)$12), [19850])
	$14 = $15
	goto $label$19 
	
.LABEL $label$20
	$4 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3020384829779738624, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$19 }
	$14 = CALL $79($12, $4)
	CALL eosio_assert(((int_32)*($14 + [80]) == (int_32)$12), [19850])
	
.LABEL $label$19
	CALL $2(((int_32)$14 != (int_32)[0]), [18985], [20039])
	if ( ($5 == 0) ){ goto $label$23 }
	if ( ((uint_64)*($5 + [72]) > (uint_64)$2) ){ goto $label$23 }
	if ( (int_64)($7 == 0) ){ goto $label$24 }
	$16 = (CASTING float_64)(uint_64 $7)
	$17 = (CASTING float_64)(int_64 $6)
	$11 = (($3 + [16]) + [8])
	$13 = ($3 + [64])
	$15 = ($3 + [72])
	$14 = ($3 + [80])
	$18 = ($3 + [88])
	$19 = ($3 + [96])
	$20 = ($3 + [104])
	$21 = ($3 + [112])
	$22 = ($3 + [120])
	$4 = $5
	
.LOOP $label$25:
	*($11) = $9
	*($3 + [16]) = $6
	$8 = (int_64)0
	$1 = *($5 + [16])
	if ( (int_64)($1 == 0) ){ goto $label$26 }
	$23 = ((float_64)((float_64)(CASTING float_64)(int_64 $1) / (float_64)$16) * (float_64)$17)
	if ( ((float_64)(float_64)|$23| < (float_64)(float_64)9223372036854775808) ){ goto $label$27 }
	$8 = (int_64)-9223372036854775808
	goto $label$26 
	
.LABEL $label$27
	$8 = (Rounds 0)($23)
	
.LABEL $label$26
	*($3 + [16]) = $8
	CALL $80([18999], $5, [19006], ($3 + [16]))
	$8 = *($5)
	*((($3 + [48]) + [8])) = (int_64)0
	*($13) = (int_64)0
	*($15) = (int_64)0
	$1 = *($3 + [16])
	*($14) = $1
	*($18) = $1
	*($19) = (int_64)0
	*($20) = (int_64)0
	*($21) = (int_64)0
	*($22) = (int_64)0
	*($3 + [48]) = $8
	CALL $78($0, ($3 + [48]))
	$5 = [0]
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [19998])
	$4 = CALL db_next_i64(*($4 + [84]), ($3 + [48]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$28 }
	$5 = CALL $79($12, $4)
	
.LABEL $label$28
	if ( ($5 == 0) ){ goto $label$23 }
	$4 = $5
	if ( ((uint_64)*($5 + [72]) <= (uint_64)$2) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$11 = ($3 + [64])
	$13 = ($3 + [72])
	$15 = ($3 + [80])
	$14 = ($3 + [88])
	$18 = ($3 + [96])
	$19 = ($3 + [104])
	$20 = ($3 + [112])
	$21 = ($3 + [120])
	$4 = $5
	
.LOOP $label$29:
	*((($3 + [16]) + [8])) = $9
	*($3 + [16]) = (int_64)0
	CALL $80([18999], $5, [19006], ($3 + [16]))
	$8 = *($5)
	*((($3 + [48]) + [8])) = (int_64)0
	*($11) = (int_64)0
	*($13) = (int_64)0
	$1 = *($3 + [16])
	*($15) = $1
	*($14) = $1
	*($18) = (int_64)0
	*($19) = (int_64)0
	*($20) = (int_64)0
	*($21) = (int_64)0
	*($3 + [48]) = $8
	CALL $78($0, ($3 + [48]))
	$5 = [0]
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [19998])
	$4 = CALL db_next_i64(*($4 + [84]), ($3 + [48]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$30 }
	$5 = CALL $79($12, $4)
	
.LABEL $label$30
	if ( ($5 == 0) ){ goto $label$23 }
	$4 = $5
	if ( ((uint_64)*($5 + [72]) <= (uint_64)$2) ){ goto $label$29 }
	
.LABEL $label$23
	$global$0 = ($3 + [128])
}

int_32 .FUNC $25 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [496])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $243($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [488]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [19924])
	CALL memcpy(($4 + [488]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $67(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [488])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $247($2)
	
.LABEL $label$6
	CALL $68($8)
	$global$0 = ($4 + [496])
	return [1]
}

void .FUNC $24 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = [17911]
	*($2 + [20]) = CALL $237([17911])
	*($2 + [8]) = *($2 + [16])
	CALL require_auth(*(CALL $13(($2 + [24]), ($2 + [8]))))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [496])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $243($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [488]) = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [19924])
	CALL memcpy(($4 + [488]), $2, [1])
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = ($2 + [1])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $67(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$9 = *($4 + [488])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($9 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $247($2)
	
.LABEL $label$5
	CALL $68($8)
	$global$0 = ($4 + [496])
	return [1]
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [224])
	$global$0 = $2
	*($2 + [216]) = [17911]
	*($2 + [220]) = CALL $237([17911])
	*($2 + [24]) = *($2 + [216])
	CALL $13(($2 + [128]), ($2 + [24]))
	*($2 + [208]) = [17944]
	*($2 + [212]) = CALL $237([17944])
	*($2 + [16]) = *($2 + [208])
	CALL $13(($2 + [48]), ($2 + [16]))
	CALL require_auth2((int_64)-2984964984929477328, (int_64)5037610434748743680)
	CALL $2(($1 <= [2]), [19589], [20026])
	CALL memset(($2 + [48]), [0], [80])
	$3 = ($0 + [168])
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$0 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$3), [19850])
	if ( $0 ){ goto $label$1 }
	$0 = ($2 + [48])
	goto $label$1 
	
.LABEL $label$2
	$0 = CALL db_find_i64(*($3), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $45($3, $0)
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$3), [19850])
	goto $label$1 
	
.LABEL $label$3
	$0 = ($2 + [48])
	
.LABEL $label$1
	CALL memcpy(($2 + [128]), $0, [80])
	*($2 + [146]) = $1
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$4 }
	*($2 + [164]) = [1000]
	
.LABEL $label$4
	*($2 + [32]) = [17911]
	*($2 + [36]) = CALL $237([17911])
	*($2 + [8]) = *($2 + [32])
	CALL $72($3, ($2 + [128]), *(CALL $13(($2 + [40]), ($2 + [8]))))
	$global$0 = ($2 + [224])
}

int_64 .FUNC $232 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $231($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $198()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $231($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [24353]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $230($0, (int_64)0)
	*(CALL $198()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $231($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $231($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $231($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $231($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [24353])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [24353]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [24353]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $231($0)
	$5 = *(($6 + [24353]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $231($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [24353]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8241]))
	$8 = (int_64)0
	$5 = *(($6 + [24353]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [24353]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $231($0)
	$5 = *(($6 + [24353]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $231($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [24353]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $230($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [24353]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [24353]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $231($0) + [24353]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $198()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $198()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $198()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [76])) = (int_64)0
	*(($5 + [92])) = (int_64)0
	*(($5 + [100])) = (int_64)0
	*($5 + [60]) = [0]
	*($5 + [64]) = [0]
	*($5 + [68 align=4]) = (int_64)0
	*($5 + [84 align=4]) = (int_64)0
	*($5 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $122(($5 + [84]), $1, $2, $3, $4)
	*($5 + [68]) = [1]
	$6 = CALL $58($0)
	*($5 + [40]) = (int_64)0
	*($5 + [32]) = $6
	*($5 + [16]) = [17911]
	*($5 + [20]) = CALL $237([17911])
	*($5 + [8]) = *($5 + [16])
	$6 = *(CALL $13(($5 + [24]), ($5 + [8])))
	CALL $108(($5 + [112]), ($5 + [48]))
	$0 = *($5 + [112])
	CALL send_deferred(($5 + [32]), $6, $0, (*($5 + [116]) - $0), [0])
	$0 = *($5 + [112])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [116]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $109(($5 + [48]))
	$global$0 = ($5 + [128])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	float_64 $11
	int_64 $12
	$4 = ($1 + [208])
	$5 = *($2)
	$7 = *(($1 + [236]))
	$6 = *(($1 + [232]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$8 = ($5 & [255])
	
.LOOP $label$4:
	$2 = ($7 + [-24])
	$9 = *($2)
	if ( ((int_32)*($9) == (int_32)$8) ){ goto $label$3 }
	$7 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [8]) == (int_32)$4), [19850])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$2 = CALL db_find_i64(*($4), *(($1 + [216])), (int_64)-6525023824864346112, ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $57($4, $2)
	CALL eosio_assert(((int_32)*($9 + [8]) == (int_32)$4), [19850])
	
.LABEL $label$1
	$2 = [0]
	CALL $2(((int_32)$9 != (int_32)[0]), [18324], [20005])
	$10 = *($3 + [8])
	*($0 + [8]) = $10
	$11 = ((float_64)(CASTING float_64)(int_64 ((int_64)*($3) * (int_64)*($9 + [4]))) / (float_64)(float_64)1e3)
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$6 }
	$12 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$12 = (Rounds 0)($11)
	
.LABEL $label$5
	*($0) = $12
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [19929])
	$12 = (uint_64)$10 >> (uint_64)(int_64)8)
	
.LOOP $label$8:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$12 = $10
	$6 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$12 = $10
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $7 ){ goto $label$10 }
	$6 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($6, [19978])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [480])
	$global$0 = $3
	CALL memory()
	*(($3 + [8])) = [0]
	*($3 + [24]) = [0]
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL $12(CALL $67(($3 + [32]), $0, $1, $3), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $196($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = *($2 + [16])
	*($3 + [8]) = [17986]
	*($3 + [12]) = CALL $237([17986])
	*($3) = *($3 + [8])
	$5 = CALL $13(($3 + [16]), $3)
	$6 = *($2 + [8])
	$7 = *($5)
	*(($3 + [56])) = [0]
	*($3 + [32]) = $7
	*($3 + [24]) = $4
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$5 = CALL $81(($3 + [24]), (uint_64)$6 >> (uint_64)(int_64)8), [21782]
	$6 = *($5) + [8])
	$4 = *($5)
	$8 = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$1 }
	$9 = ($3 + [52])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$5 }
	CALL _ZdlPv($10)
	
.LABEL $label$5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($3 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $8
	
.LABEL $label$2
	*($9) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$1
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	if ( (CALL $47($1, $2) == 0) ){ goto $label$6 }
	CALL $60(($3 + [24]), $1)
	$7 = *($3 + [24])
	CALL eosio_assert(((int_64)*($3 + [32]) == (int_64)$6), [20163])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($4 - $7)) > (int_64)-4611686018427387904), [20211])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [20233])
	
.LABEL $label$6
	*($0) = $4
	*(($0 + [8])) = $6
	CALL $2(((int_32)(CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [20087], [20023])
	$global$0 = ($3 + [64])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $196($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	$3 = [0]
	*(($8 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$10 = ($2 + [16])
	*($8) = $10
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $10
	*($5 + [16]) = [0]
	*($5 + [24]) = ($5 + [16])
	*($5) = $4
	$9 = ((int_32)$9 * (int_32)[40])
	CALL $157($5, ($5 + [24]))
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = ($7 + [28])
	CALL $105($1, $2)
	$3 = *(($7 + [32]))
	$2 = *($1)
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	$11 = ($6 + $9)
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $3
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $158(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$8 }
	$10 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$9:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($9 + [-24])
	*($4) = *($3)
	$4 = ($9 + [-16])
	*($6) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($9 + [-12])
	*($4) = *($6)
	*($3) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($6) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$9 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$4 = $2
	
.LABEL $label$7
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$12 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$12
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$13 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$2 = $9
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [20157])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $110(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $109 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $159($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $105($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $160($2, $1)
	CALL $162(CALL $161(CALL $161($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $212 (int_32 $0)
{
	return [0]
}

int_32 .FUNC $231 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $229($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $219 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL $198()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL $198()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL memset(($3 + [48]), [0], [80])
	$4 = ($0 + [168])
	$5 = *(($0 + [196]))
	if ( ((int_32)$5 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$0 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$4), [19850])
	if ( $0 ){ goto $label$1 }
	$0 = ($3 + [48])
	goto $label$1 
	
.LABEL $label$2
	$0 = CALL db_find_i64(*($4), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $45($4, $0)
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$4), [19850])
	goto $label$1 
	
.LABEL $label$3
	$0 = ($3 + [48])
	
.LABEL $label$1
	CALL memcpy(($3 + [128]), $0, [80])
	CALL $2((*($3 + [145]) == 0), [17924], [20027])
	*($3 + [32]) = [17911]
	*($3 + [36]) = CALL $237([17911])
	*($3 + [8]) = *($3 + [32])
	CALL require_auth(*(CALL $13(($3 + [40]), ($3 + [8]))))
	*($3 + [164]) = $2
	*($3 + [160]) = $1
	*($3 + [16]) = [17911]
	*($3 + [20]) = CALL $237([17911])
	*($3) = *($3 + [16])
	CALL $72($4, ($3 + [128]), *(CALL $13(($3 + [24]), $3)))
	$global$0 = ($3 + [208])
}

int_32 .FUNC $39 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [496])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $243($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [488]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [19924])
	CALL memcpy(($4 + [488]), $2, [4])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[4]), [19924])
	CALL memcpy((($4 + [488]) | [4]), ($2 + [4]), [4])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $67(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$9 = *($4 + [492])
	$10 = *($4 + [488])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $10), (int_32 $9), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $247($2)
	
.LABEL $label$6
	CALL $68($8)
	$global$0 = ($4 + [496])
	return [1]
}

void .FUNC $36 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [288])
	$global$0 = $2
	*($2 + [264]) = $1
	CALL memset(($2 + [184]), [0], [80])
	$3 = ($0 + [168])
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	if ( $4 ){ goto $label$1 }
	$4 = ($2 + [184])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($3), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $45($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	goto $label$1 
	
.LABEL $label$3
	$4 = ($2 + [184])
	
.LABEL $label$1
	CALL $2((*($4 + [17]) == 0), [17924], [20027])
	CALL $46(($2 + [184]), [1], [0])
	*($2 + [176]) = [18737]
	*($2 + [180]) = CALL $237([18737])
	*($2 + [48]) = *($2 + [176])
	$4 = CALL $13(($2 + [272]), ($2 + [48]))
	if ( ((int_64)*($2 + [192]) != (int_64)*($4)) ){ goto $label$5 }
	*($2 + [168]) = [17911]
	*($2 + [172]) = CALL $237([17911])
	*($2 + [40]) = *($2 + [168])
	$4 = CALL $13(($2 + [56]), ($2 + [40]))
	CALL $2(((int_64)*($2 + [184]) == (int_64)*($4)), [18098], [20025])
	goto $label$4 
	
.LABEL $label$5
	CALL $2([0], [18098], [20025])
	
.LABEL $label$4
	CALL require_auth(*($2 + [264]))
	*($2 + [160]) = ($0 + [288])
	CALL $62(($2 + [152]), ($2 + [160]), ($2 + [264]))
	CALL $2(((int_64)*(*($2 + [156])) == (int_64)*($2 + [264])), [18638], [20006])
	$1 = *(*($2 + [156]) + [32])
	CALL $2(((uint_64)(int_64))(((int_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) & (int_64)4294967295) - $1) > (uint_64)(int_64)3600), [18747], [20037])
	CALL $2(((int_64)*(*($2 + [156]) + [16]) != (int_64)0), [18658], [20006])
	$1 = CALL $58($0)
	*($2 + [136]) = [17911]
	*($2 + [140]) = CALL $237([17911])
	*($2 + [32]) = *($2 + [136])
	$5 = *(CALL $13(($2 + [144]), ($2 + [32])))
	CALL eosio_assert(((int_64)*($0 + [408]) == (int_64)CALL eosio_assert2()), [20106])
	*(($4 = CALL _Znwj([32])) + [16]) = ($0 + [408])
	*($4) = $1
	*($4 + [8]) = *($2 + [264])
	CALL eosio_assert([1], [20157])
	CALL memcpy(($2 + [272]), $4, [8])
	CALL eosio_assert([1], [20157])
	CALL memcpy((($2 + [272]) | [8]), ($4 + [8]), [8])
	$6 = *($4)
	$7 = CALL db_store_i64(*(($0 + [416])), (int_64)-8173734943709462528, $5, $6, ($2 + [272]), [16])
	*($4 + [20]) = $7
	$3 = ($0 + [424])
	if ( (uint_64)($6 <= *($3)) ){ goto $label$6 }
	*($3) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($2 + [56]) = $4
	$6 = *($4)
	*($2 + [272]) = $6
	*($2 + [96]) = $7
	$8 = ($0 + [436])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [440]))) ){ goto $label$9 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($2 + [56]) = [0]
	*($3) = $4
	*($8) = ($3 + [24])
	$4 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $4 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $100(($0 + [432]), ($2 + [56]), ($2 + [272]), ($2 + [96]))
	$4 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($4)
	
.LABEL $label$7
	*($2 + [120]) = [17911]
	*($2 + [124]) = CALL $237([17911])
	*($2 + [24]) = *($2 + [120])
	$4 = CALL $13(($2 + [128]), ($2 + [24]))
	*($2 + [104]) = [17999]
	*($2 + [108]) = CALL $237([17999])
	*($2 + [16]) = *($2 + [104])
	$3 = CALL $13(($2 + [112]), ($2 + [16]))
	*($2 + [272]) = *($4)
	*($2 + [280]) = *($3)
	*($2 + [88]) = [17911]
	*($2 + [92]) = CALL $237([17911])
	*($2 + [8]) = *($2 + [88])
	$4 = CALL $13(($2 + [96]), ($2 + [8]))
	*($2 + [72]) = [18787]
	*($2 + [76]) = CALL $237([18787])
	*($2) = *($2 + [72])
	$3 = CALL $13(($2 + [80]), $2)
	*($2 + [64]) = $1
	*($2 + [56]) = *($2 + [264])
	CALL $101($0, ($2 + [272]), $4, $3, ($2 + [56]))
	$0 = *($2 + [212])
	if ( ($0 == 0) ){ goto $label$10 }
	*(($2 + [216])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$0 = *($2 + [200])
	if ( ($0 == 0) ){ goto $label$11 }
	*(($2 + [204])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$global$0 = ($2 + [288])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	float_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$2 = ($global$0 - [992])
	$global$0 = $2
	CALL memset(($2 + [800]), [0], [80])
	$3 = ($0 + [168])
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	if ( $4 ){ goto $label$1 }
	$4 = ($2 + [800])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($3), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $45($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	goto $label$1 
	
.LABEL $label$3
	$4 = ($2 + [800])
	
.LABEL $label$1
	CALL memcpy(($2 + [880]), $4, [80])
	CALL $2((*($2 + [897]) == 0), [17924], [20027])
	*($2 + [792]) = [17911]
	*($2 + [796]) = CALL $237([17911])
	*($2 + [240]) = *($2 + [792])
	CALL $13(($2 + [800]), ($2 + [240]))
	*($2 + [784]) = [17944]
	*($2 + [788]) = CALL $237([17944])
	*($2 + [232]) = *($2 + [784])
	CALL $13(($2 + [672]), ($2 + [232]))
	CALL require_auth2((int_64)-2984964984929477328, (int_64)5037610434748743680)
	CALL $2(((int_32)*($2 + [896]) == (int_32)[1]), [18971], [20012])
	*($2 + [768]) = [17871]
	*($2 + [772]) = CALL $237([17871])
	*($2 + [224]) = *($2 + [768])
	$5 = CALL $13(($2 + [776]), ($2 + [224]))
	*($2 + [752]) = [18437]
	*($2 + [756]) = CALL $237([18437])
	*($2 + [216]) = *($2 + [752])
	$6 = CALL $13(($2 + [760]), ($2 + [216]))
	$4 = CALL $237([8984])
	if ( ($4 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [20700])
	goto $label$6 
	
.LABEL $label$7
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = (int_64)0
	
.LOOP $label$8:
	$8 = *(($4 + [8983]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$9
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$8 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$4 
	
.LABEL $label$5
	$7 = (int_64)0
	
.LABEL $label$4
	$9 = *($5)
	$10 = *($6)
	*(($2 + [832])) = [0]
	*($2 + [808]) = $10
	*($2 + [800]) = $9
	*($2 + [816]) = (int_64)-1
	*($2 + [824]) = (int_64)0
	$11 = *(CALL $81(($2 + [800]), $7, [21782]))
	$5 = *($2 + [824])
	if ( ($5 == 0) ){ goto $label$10 }
	$6 = ($2 + [828])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($2 + [824]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $5
	
.LABEL $label$11
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = CALL $237([8984])
	if ( ($4 <= [8]) ){ goto $label$18 }
	CALL eosio_assert([0], [20700])
	goto $label$17 
	
.LABEL $label$18
	if ( ($4 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$7 = (int_64)0
	
.LOOP $label$19:
	$8 = *(($4 + [8983]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$20
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$19 }
	$9 = ((int_64)$7 << (int_64)8)
	goto $label$15 
	
.LABEL $label$16
	$9 = (int_64)0
	
.LABEL $label$15
	CALL eosio_assert([1], [19929])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$12 = ((int_64)$9 | (int_64)4)
	$4 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$7 = $9
	$8 = [1]
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$7 = $9
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$5 = ($4 + [1])
	$4 = $5
	if ( $8 ){ goto $label$25 }
	$8 = [1]
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$8 = [0]
	
.LABEL $label$21
	CALL eosio_assert($8, [19978])
	$7 = *($2 + [928])
	CALL memset(($2 + [672]), [0], [80])
	$8 = *(($0 + [196]))
	$4 = ((int_32)$8 != (int_32)*(($0 + [192])))
	$7 = (int_64)
	$13 = ((float_64)(CASTING float_64)(int_64 ((int_64)( $7($11 - $7)) ? (int_64)0 : ((int_64)$7 > (int_64)0) ) * (int_64)50)) / (float_64)(float_64)60
	if ( ((float_64)(float_64)|$13)| < (float_64)(float_64)9223372036854775808) ){ goto $label$29 }
	$10 = (int_64)-9223372036854775808
	if ( ($4 == 0) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$10 = (Rounds 0)($13)
	if ( $4 ){ goto $label$27 }
	
.LABEL $label$28
	$4 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$30 }
	$4 = CALL $45($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	goto $label$26 
	
.LABEL $label$30
	$4 = ($2 + [672])
	goto $label$26 
	
.LABEL $label$27
	$4 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	if ( $4 ){ goto $label$26 }
	$4 = ($2 + [672])
	
.LABEL $label$26
	CALL memcpy(($2 + [800]), $4, [80])
	CALL memcpy(($2 + [880]), ($2 + [800]), [80])
	*(($4 = ($2 + [928]))) = (int_64)0
	*($2 + [920]) = $10
	*($2 + [936]) = (int_64)0
	$7 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $2(((uint_64)(int_64))($7 - *($2 + [944])) > (uint_64)(int_64)600), [19008], [20036])
	*($2 + [944]) = $7
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$31 }
	*($2 + [952]) = $7
	
.LABEL $label$31
	CALL $2((uint_64)(*(($2 + [920])) <= (int_64)10000000000000000), [19029], [20018])
	CALL $2((uint_64)(*($4) <= (int_64)10000000000000000), [19056], [20018])
	*($2 + [656]) = [17911]
	*($2 + [660]) = CALL $237([17911])
	*($2 + [208]) = *($2 + [656])
	CALL $72($3, ($2 + [880]), *(CALL $13(($2 + [664]), ($2 + [208]))))
	CALL $2(((int_64)$10 < (int_64)10000000000000000), [19083], [20018])
	if ( ((int_64)$10 < (int_64)1) ){ goto $label$34 }
	*($2 + [640]) = [18437]
	*($2 + [644]) = CALL $237([18437])
	*($2 + [200]) = *($2 + [640])
	$4 = CALL $13(($2 + [648]), ($2 + [200]))
	*($2 + [624]) = [17999]
	*($2 + [628]) = CALL $237([17999])
	*($2 + [192]) = *($2 + [624])
	$8 = CALL $13(($2 + [632]), ($2 + [192]))
	*($2 + [976]) = *($4)
	*($2 + [984]) = *($8)
	*($2 + [608]) = [17871]
	*($2 + [612]) = CALL $237([17871])
	*($2 + [184]) = *($2 + [608])
	$5 = CALL $13(($2 + [616]), ($2 + [184]))
	*($2 + [592]) = [17846]
	*($2 + [596]) = CALL $237([17846])
	*($2 + [176]) = *($2 + [592])
	$6 = CALL $13(($2 + [600]), ($2 + [176]))
	*($2 + [576]) = [18437]
	*($2 + [580]) = CALL $237([18437])
	*($2 + [168]) = *($2 + [576])
	$14 = CALL $13(($2 + [584]), ($2 + [168]))
	*($2 + [560]) = [19123]
	*($2 + [564]) = CALL $237([19123])
	*($2 + [160]) = *($2 + [560])
	$15 = CALL $13(($2 + [568]), ($2 + [160]))
	*(($2 + [552])) = [0]
	*($2 + [544]) = (int_64)0
	$4 = CALL $237([19136])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$37 }
	*($2 + [544]) = ($4 << [1])
	$8 = (($2 + [544]) | [1])
	if ( $4 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$16 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($16)
	*($2 + [544]) = ($16 | [1])
	*($2 + [552]) = $8
	*($2 + [548]) = $4
	
.LABEL $label$36
	CALL memcpy($8, [19136], $4)
	
.LABEL $label$35
	*(($8 + $4)) = [0]
	*(($2 + [824])) = $12
	$4 = ($2 + [552])
	*(($2 + [840])) = *($4)
	*($4) = [0]
	*($2 + [816]) = $10
	*($2 + [800]) = *($14)
	*($2 + [808]) = *($15)
	*($2 + [832]) = *($2 + [544])
	*($2 + [544]) = (int_64)0
	$4 = CALL $55(($2 + [672]), ($2 + [976]), *($5), *($6), ($2 + [800]))
	CALL $56(($2 + [960]), $4)
	$8 = *($2 + [960])
	CALL send_inline($8, (*($2 + [964]) - $8))
	$8 = *($2 + [960])
	if ( ($8 == 0) ){ goto $label$38 }
	*($2 + [964]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$38
	$8 = *($4 + [28])
	if ( ($8 == 0) ){ goto $label$39 }
	*(($4 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$39
	$8 = *($4 + [16])
	if ( ($8 == 0) ){ goto $label$40 }
	*(($4 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$40
	if ( ((*(($2 + [832])) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($2 + [840])))
	
.LABEL $label$41
	if ( ((*($2 + [544]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($2 + [552])))
	
.LABEL $label$34
	$4 = CALL $237([8984])
	if ( ($4 <= [8]) ){ goto $label$44 }
	CALL eosio_assert([0], [20700])
	goto $label$43 
	
.LABEL $label$44
	if ( ($4 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$7 = (int_64)0
	
.LOOP $label$45:
	$8 = *(($4 + [8983]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$46 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$46
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$45 }
	$9 = ((int_64)$7 << (int_64)8)
	goto $label$32 
	
.LABEL $label$42
	$9 = (int_64)0
	goto $label$32 
	
.LABEL $label$33
	CALL $174(($2 + [544]))
	
.LABEL $label$32
	CALL eosio_assert([1], [19929])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$12 = ((int_64)$9 | (int_64)4)
	$4 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$7 = $9
	$8 = [1]
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$7 = $9
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$5 = ($4 + [1])
	$4 = $5
	if ( $8 ){ goto $label$51 }
	$8 = [1]
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$8 = [0]
	
.LABEL $label$47
	CALL eosio_assert($8, [19978])
	$7 = (int_64)
	CALL $2(((int_64)$7($11 - $10)) < (int_64)10000000000000000), [19186], [20018])
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$54 }
	*($2 + [528]) = [18437]
	*($2 + [532]) = CALL $237([18437])
	*($2 + [152]) = *($2 + [528])
	$4 = CALL $13(($2 + [536]), ($2 + [152]))
	*($2 + [512]) = [17999]
	*($2 + [516]) = CALL $237([17999])
	*($2 + [144]) = *($2 + [512])
	$8 = CALL $13(($2 + [520]), ($2 + [144]))
	*($2 + [976]) = *($4)
	*($2 + [984]) = *($8)
	*($2 + [496]) = [17871]
	*($2 + [500]) = CALL $237([17871])
	*($2 + [136]) = *($2 + [496])
	$5 = CALL $13(($2 + [504]), ($2 + [136]))
	*($2 + [480]) = [17846]
	*($2 + [484]) = CALL $237([17846])
	*($2 + [128]) = *($2 + [480])
	$6 = CALL $13(($2 + [488]), ($2 + [128]))
	*($2 + [472]) = [18437]
	*($2 + [476]) = CALL $237([18437])
	*($2 + [120]) = *($2 + [472])
	$14 = CALL $13(($2 + [584]), ($2 + [120]))
	*($2 + [464]) = [19226]
	*($2 + [468]) = CALL $237([19226])
	*($2 + [112]) = *($2 + [464])
	$15 = CALL $13(($2 + [568]), ($2 + [112]))
	*(($2 + [552])) = [0]
	*($2 + [544]) = (int_64)0
	$4 = CALL $237([19239])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$53 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$57 }
	*($2 + [544]) = ($4 << [1])
	$8 = (($2 + [544]) | [1])
	if ( $4 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$16 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($16)
	*($2 + [544]) = ($16 | [1])
	*($2 + [552]) = $8
	*($2 + [548]) = $4
	
.LABEL $label$56
	CALL memcpy($8, [19239], $4)
	
.LABEL $label$55
	*(($8 + $4)) = [0]
	*(($2 + [824])) = $12
	$4 = ($2 + [552])
	*(($2 + [840])) = *($4)
	*($4) = [0]
	*($2 + [816]) = $7
	*($2 + [800]) = *($14)
	*($2 + [808]) = *($15)
	*($2 + [832]) = *($2 + [544])
	*($2 + [544]) = (int_64)0
	$4 = CALL $55(($2 + [672]), ($2 + [976]), *($5), *($6), ($2 + [800]))
	CALL $56(($2 + [960]), $4)
	$8 = *($2 + [960])
	CALL send_inline($8, (*($2 + [964]) - $8))
	$8 = *($2 + [960])
	if ( ($8 == 0) ){ goto $label$58 }
	*($2 + [964]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$58
	$8 = *($4 + [28])
	if ( ($8 == 0) ){ goto $label$59 }
	*(($4 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$59
	$8 = *($4 + [16])
	if ( ($8 == 0) ){ goto $label$60 }
	*(($4 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$60
	if ( ((*(($2 + [832])) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*(($2 + [840])))
	
.LABEL $label$61
	if ( ((*($2 + [544]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($2 + [552])))
	
.LABEL $label$54
	$4 = CALL $237([8984])
	if ( ($4 <= [8]) ){ goto $label$64 }
	CALL eosio_assert([0], [20700])
	goto $label$63 
	
.LABEL $label$64
	if ( ($4 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	$7 = (int_64)0
	
.LOOP $label$65:
	$8 = *(($4 + [8983]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$66 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$66
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$65 }
	$9 = ((int_64)$7 << (int_64)8)
	goto $label$52 
	
.LABEL $label$62
	$9 = (int_64)0
	goto $label$52 
	
.LABEL $label$53
	CALL $174(($2 + [544]))
	
.LABEL $label$52
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [19929])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$12 = ((int_64)$9 | (int_64)4)
	$4 = [0]
	
.LOOP $label$69:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$68 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$70 }
	$7 = $9
	$8 = [1]
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$69 }
	goto $label$67 
	
.LABEL $label$70
	$7 = $9
	
.LOOP $label$71:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$68 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$5 = ($4 + [1])
	$4 = $5
	if ( $8 ){ goto $label$71 }
	$8 = [1]
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$69 }
	goto $label$67 
	
.LABEL $label$68
	$8 = [0]
	
.LABEL $label$67
	CALL eosio_assert($8, [19978])
	CALL memset(($2 + [672]), [0], [80])
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)*(($0 + [192]))) ){ goto $label$73 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	if ( $4 ){ goto $label$72 }
	$4 = ($2 + [672])
	goto $label$72 
	
.LABEL $label$73
	$4 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$74 }
	$4 = CALL $45($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	goto $label$72 
	
.LABEL $label$74
	$4 = ($2 + [672])
	
.LABEL $label$72
	CALL memcpy(($2 + [800]), $4, [80])
	CALL memcpy(($2 + [880]), ($2 + [800]), [80])
	if ( (*($2 + [898]) == 0) ){ goto $label$81 }
	if ( ((int_32)$1 != (int_32)[1]) ){ goto $label$76 }
	*($2 + [352]) = [17871]
	*($2 + [356]) = CALL $237([17871])
	*($2 + [104]) = *($2 + [352])
	$5 = CALL $13(($2 + [360]), ($2 + [104]))
	*($2 + [336]) = [19332]
	*($2 + [340]) = CALL $237([19332])
	*($2 + [96]) = *($2 + [336])
	$3 = CALL $13(($2 + [344]), ($2 + [96]))
	$4 = CALL $237([8984])
	if ( ($4 <= [8]) ){ goto $label$80 }
	CALL eosio_assert([0], [20700])
	goto $label$79 
	
.LABEL $label$81
	$13 = ((float_64)(CASTING float_64)(int_64 ((int_64)$10 << (int_64)4)) / (float_64)(float_64)50)
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$83 }
	$10 = (int_64)-9223372036854775808
	if ( ((int_64)-9223372036854775808 >= (int_64)1) ){ goto $label$82 }
	goto $label$76 
	
.LABEL $label$83
	$10 = (Rounds 0)($13)
	if ( ((int_64)$10 < (int_64)1) ){ goto $label$76 }
	
.LABEL $label$82
	$1 = ($0 + [288])
	*($2 + [456]) = $1
	*($2 + [800]) = (int_64)0
	CALL $82(($2 + [584]), ($2 + [456]), ($2 + [800]))
	$4 = *($2 + [588])
	if ( ($4 == 0) ){ goto $label$76 }
	$17 = (($2 + [800]) + [72])
	$6 = (($2 + [976]) + [8])
	$14 = (($2 + [800]) + [32])
	$18 = (($2 + [544]) | [1])
	$19 = (($2 + [800]) + [16])
	$20 = (($2 + [800]) + [24])
	$16 = ($2 + [700])
	$21 = ($0 + [316])
	$22 = ($0 + [312])
	$23 = ($0 + [296])
	$24 = ($2 + [684])
	$25 = ($2 + [692])
	$26 = ($0 + [304])
	$3 = [0]
	$15 = [0]
	
.LOOP $label$84:
	if ( ((uint_32)($3 & [2147483647]) > (uint_32)[2]) ){ goto $label$85 }
	$15 = *((($3 << [2]) + [21804]))
	
.LABEL $label$85
	$4 = ((int_64)*($4 + [8]) < (int_64)1)
	$13 = ((float_64)(CASTING float_64)(int_64 ((int_64)(CASTING int_64)(int_32 $15) * (int_64)$10)) / (float_64)(float_64)100)
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$89 }
	$7 = (int_64)-9223372036854775808
	if ( $4 ){ goto $label$87 }
	goto $label$88 
	
.LABEL $label$89
	$7 = (Rounds 0)($13)
	if ( $4 ){ goto $label$87 }
	
.LABEL $label$88
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$87 }
	*($2 + [440]) = [18085]
	*($2 + [444]) = CALL $237([18085])
	*($2 + [40]) = *($2 + [440])
	CALL $13(($2 + [448]), ($2 + [40]))
	*($2 + [424]) = [17999]
	*($2 + [428]) = CALL $237([17999])
	*($2 + [32]) = *($2 + [424])
	CALL $13(($2 + [432]), ($2 + [32]))
	*($6) = *($2 + [432])
	*($2 + [976]) = *($2 + [448])
	*($2 + [408]) = [17871]
	*($2 + [412]) = CALL $237([17871])
	*($2 + [24]) = *($2 + [408])
	CALL $13(($2 + [416]), ($2 + [24]))
	*($2 + [392]) = [17846]
	*($2 + [396]) = CALL $237([17846])
	*($2 + [16]) = *($2 + [392])
	CALL $13(($2 + [400]), ($2 + [16]))
	*($2 + [384]) = [18085]
	*($2 + [388]) = CALL $237([18085])
	*($2 + [8]) = *($2 + [384])
	CALL $13(($2 + [568]), ($2 + [8]))
	$0 = *($2 + [588])
	*(($8 = (($2 + [544]) + [8]))) = [0]
	*($2 + [544]) = (int_64)0
	$4 = CALL $237([19285])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$86 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$92 }
	*($2 + [544]) = ($4 << [1])
	$5 = $18
	if ( $4 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	$27 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($27)
	*($8) = $5
	*($2 + [544]) = ($27 | [1])
	*($2 + [548]) = $4
	
.LABEL $label$91
	CALL memcpy($5, [19285], $4)
	
.LABEL $label$90
	*(($5 + $4)) = [0]
	$9 = *($0)
	*($19) = $7
	*($20) = $12
	*($14) = *($2 + [544])
	*(($14 + [8])) = *($8)
	*((($2 + [800]) + [8])) = $9
	*($8) = [0]
	*($2 + [800]) = *($2 + [568])
	*($2 + [544]) = (int_64)0
	CALL $56(($2 + [960]), CALL $55(($2 + [672]), ($2 + [976]), *($2 + [416]), *($2 + [400]), ($2 + [800])))
	$4 = *($2 + [960])
	CALL send_inline($4, (*($2 + [964]) - $4))
	$4 = *($2 + [960])
	if ( ($4 == 0) ){ goto $label$93 }
	*($2 + [964]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$93
	$4 = *($16)
	if ( ($4 == 0) ){ goto $label$94 }
	*((($2 + [672]) + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$94
	$27 = (($2 + [672]) + [16])
	$4 = *($27)
	if ( ($4 == 0) ){ goto $label$95 }
	*($25) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$95
	if ( ((*($14) & [1]) == 0) ){ goto $label$96 }
	CALL _ZdlPv(*((($2 + [800]) + [40])))
	
.LABEL $label$96
	if ( ((*($2 + [544]) & [1]) == 0) ){ goto $label$97 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$97
	$7 = *(*($2 + [588]) + [64])
	$5 = *($21)
	$0 = *($22)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$99 }
	
.LOOP $label$101:
	$4 = ($5 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8 + [64]) == (int_64)$7) ){ goto $label$100 }
	$5 = $4
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$101 }
	goto $label$99 
	
.LABEL $label$100
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$99 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$1), [19850])
	goto $label$98 
	
.LABEL $label$99
	$8 = [0]
	$4 = CALL db_find_i64(*($1), *($23), (int_64)-3020371202490236928, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$98 }
	$8 = CALL $65($1, $4)
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$1), [19850])
	
.LABEL $label$98
	$4 = ((int_32)$8 != (int_32)[0])
	CALL $2($4, [19307], [20013])
	*($2 + [368]) = [17911]
	*($2 + [372]) = CALL $237([17911])
	*($2) = *($2 + [368])
	CALL $13(($2 + [376]), $2)
	$9 = *($2 + [376])
	CALL eosio_assert($4, [20481])
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$1), [20516])
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert2()), [20562])
	*($8 + [56]) = (int_64)0
	$4 = ($8 + [8])
	$7 = *($4)
	*($6) = ( (int_64))((int_64)0 - $7) ? (int_64)-1 : ((int_64)$7 > (int_64)0) )
	*($2 + [976]) = *($8)
	$7 = *($8 + [64])
	CALL eosio_assert([1], [20613])
	*((($2 + [960]) + [8])) = $17
	*($2 + [964]) = ($2 + [800])
	*($2 + [960]) = ($2 + [800])
	*($2 + [544]) = ($2 + [960])
	*((($2 + [672]) + [8])) = ($8 + [16])
	*($24) = ($8 + [24])
	*($27) = ($8 + [32])
	*($25) = ($8 + [40])
	*((($2 + [672]) + [24])) = ($8 + [48])
	*($16) = ($8 + [56])
	*((($2 + [672]) + [32])) = ($8 + [64])
	*($2 + [676]) = $4
	*($2 + [672]) = $8
	CALL $66(($2 + [672]), ($2 + [544]))
	CALL db_update_i64(*($8 + [76]), $9, ($2 + [800]), [72])
	if ( (uint_64)($7 <= *($26)) ){ goto $label$102 }
	*($26) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$102
	*($2 + [672]) = *($8)
	if ( (CALL $236(($2 + [976]), ($2 + [672]), [8]) == 0) ){ goto $label$103 }
	$0 = ($8 + [80])
	$5 = *($0)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$104 }
	$5 = CALL db_idx64_find_primary(*($1), *($23), (int_64)-3020371202490236928, ($2 + [544]), $7)
	*($0) = $5
	
.LABEL $label$104
	CALL db_idx64_update($5, $9, ($2 + [672]))
	
.LABEL $label$103
	$11 = *($4)
	*($2 + [672]) = ( (int_64))((int_64)0 - $11) ? (int_64)-1 : ((int_64)$11 > (int_64)0) )
	if ( (CALL $236($6, ($2 + [672]), [8]) == 0) ){ goto $label$87 }
	$8 = ($8 + [84])
	$4 = *($8)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$105 }
	$4 = CALL db_idx64_find_primary(*($1), *($23), (int_64)-3020371202490236927, ($2 + [544]), $7)
	*($8) = $4
	
.LABEL $label$105
	CALL db_idx64_update($4, $9, ($2 + [672]))
	
.LABEL $label$87
	CALL $83(($2 + [584]))
	$3 = ($3 + [1])
	if ( ((uint_32)$3 > (uint_32)[2]) ){ goto $label$76 }
	$4 = *($2 + [588])
	if ( $4 ){ goto $label$84 }
	goto $label$76 
	
.LABEL $label$86
	CALL $174(($2 + [544]))
	
.LABEL $label$80
	if ( ($4 == 0) ){ goto $label$78 }
	
.LABEL $label$79
	$7 = (int_64)0
	
.LOOP $label$106:
	$8 = *(($4 + [8983]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$107 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$107
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$106 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	goto $label$77 
	
.LABEL $label$78
	$7 = (int_64)0
	
.LABEL $label$77
	$9 = *($5)
	$10 = *($3)
	*(($2 + [832])) = [0]
	*($2 + [808]) = $10
	*($2 + [800]) = $9
	*($2 + [816]) = (int_64)-1
	*($2 + [824]) = (int_64)0
	$7 = *(CALL $81(($2 + [800]), $7, [21782]))
	$5 = *($2 + [824])
	if ( ($5 == 0) ){ goto $label$108 }
	$3 = ($2 + [828])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$110 }
	
.LOOP $label$111:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$112 }
	CALL _ZdlPv($8)
	
.LABEL $label$112
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$111 }
	$4 = *(($2 + [824]))
	goto $label$109 
	
.LABEL $label$110
	$4 = $5
	
.LABEL $label$109
	*($3) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$108
	if ( ((int_64)$7 < (int_64)1000000) ){ goto $label$76 }
	$4 = CALL $237([8984])
	if ( ($4 <= [8]) ){ goto $label$116 }
	CALL eosio_assert([0], [20700])
	goto $label$115 
	
.LABEL $label$116
	if ( ($4 == 0) ){ goto $label$114 }
	
.LABEL $label$115
	$7 = (int_64)0
	
.LOOP $label$117:
	$8 = *(($4 + [8983]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$118 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$118
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$117 }
	$12 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$113 
	
.LABEL $label$114
	$12 = (int_64)4
	
.LABEL $label$113
	CALL eosio_assert([1], [19929])
	$7 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$121:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$120 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$122 }
	$7 = $9
	$8 = [1]
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$121 }
	goto $label$119 
	
.LABEL $label$122
	$7 = $9
	
.LOOP $label$123:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$120 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$5 = ($4 + [1])
	$4 = $5
	if ( $8 ){ goto $label$123 }
	$8 = [1]
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$121 }
	goto $label$119 
	
.LABEL $label$120
	$8 = [0]
	
.LABEL $label$119
	CALL eosio_assert($8, [19978])
	$1 = ($0 + [288])
	*($2 + [456]) = $1
	*($2 + [800]) = (int_64)0
	CALL $82(($2 + [584]), ($2 + [456]), ($2 + [800]))
	$4 = *($2 + [588])
	if ( ($4 == 0) ){ goto $label$76 }
	$23 = (($2 + [800]) + [72])
	$6 = (($2 + [976]) + [8])
	$14 = (($2 + [800]) + [32])
	$24 = (($2 + [544]) | [1])
	$17 = (($2 + [800]) + [16])
	$19 = (($2 + [800]) + [24])
	$15 = ($2 + [700])
	$20 = ($0 + [316])
	$21 = ($0 + [312])
	$26 = ($0 + [296])
	$22 = ($2 + [684])
	$27 = ($2 + [692])
	$25 = ($0 + [304])
	$3 = [0]
	$11 = (int_64)0
	
.LOOP $label$124:
	if ( ((uint_32)($3 & [2147483647]) > (uint_32)[4]) ){ goto $label$125 }
	$11 = *((($3 << [3]) + [21824]))
	
.LABEL $label$125
	if ( ((int_64)*($4 + [8]) < (int_64)1) ){ goto $label$126 }
	*($2 + [320]) = [19332]
	*($2 + [324]) = CALL $237([19332])
	*($2 + [88]) = *($2 + [320])
	CALL $13(($2 + [328]), ($2 + [88]))
	*($2 + [304]) = [17999]
	*($2 + [308]) = CALL $237([17999])
	*($2 + [80]) = *($2 + [304])
	CALL $13(($2 + [312]), ($2 + [80]))
	*($6) = *($2 + [312])
	*($2 + [976]) = *($2 + [328])
	*($2 + [288]) = [17871]
	*($2 + [292]) = CALL $237([17871])
	*($2 + [72]) = *($2 + [288])
	CALL $13(($2 + [296]), ($2 + [72]))
	*($2 + [272]) = [17846]
	*($2 + [276]) = CALL $237([17846])
	*($2 + [64]) = *($2 + [272])
	CALL $13(($2 + [280]), ($2 + [64]))
	*($2 + [264]) = [19332]
	*($2 + [268]) = CALL $237([19332])
	*($2 + [56]) = *($2 + [264])
	CALL $13(($2 + [568]), ($2 + [56]))
	$0 = *($2 + [588])
	*(($8 = (($2 + [544]) + [8]))) = [0]
	*($2 + [544]) = (int_64)0
	$4 = CALL $237([19285])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$75 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$129 }
	*($2 + [544]) = ($4 << [1])
	$5 = $24
	if ( $4 ){ goto $label$128 }
	goto $label$127 
	
.LABEL $label$129
	$16 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($16)
	*($8) = $5
	*($2 + [544]) = ($16 | [1])
	*($2 + [548]) = $4
	
.LABEL $label$128
	CALL memcpy($5, [19285], $4)
	
.LABEL $label$127
	*(($5 + $4)) = [0]
	$7 = *($0)
	*($17) = $11
	*($19) = $12
	*($14) = *($2 + [544])
	*(($14 + [8])) = *($8)
	*((($2 + [800]) + [8])) = $7
	*($8) = [0]
	*($2 + [800]) = *($2 + [568])
	*($2 + [544]) = (int_64)0
	CALL $56(($2 + [960]), CALL $55(($2 + [672]), ($2 + [976]), *($2 + [296]), *($2 + [280]), ($2 + [800])))
	$4 = *($2 + [960])
	CALL send_inline($4, (*($2 + [964]) - $4))
	$4 = *($2 + [960])
	if ( ($4 == 0) ){ goto $label$130 }
	*($2 + [964]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$130
	$4 = *($15)
	if ( ($4 == 0) ){ goto $label$131 }
	*((($2 + [672]) + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$131
	$16 = (($2 + [672]) + [16])
	$4 = *($16)
	if ( ($4 == 0) ){ goto $label$132 }
	*($27) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$132
	if ( ((*($14) & [1]) == 0) ){ goto $label$133 }
	CALL _ZdlPv(*((($2 + [800]) + [40])))
	
.LABEL $label$133
	if ( ((*($2 + [544]) & [1]) == 0) ){ goto $label$134 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$134
	$7 = *(*($2 + [588]) + [64])
	$5 = *($20)
	$0 = *($21)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$136 }
	
.LOOP $label$138:
	$4 = ($5 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8 + [64]) == (int_64)$7) ){ goto $label$137 }
	$5 = $4
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$138 }
	goto $label$136 
	
.LABEL $label$137
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$136 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$1), [19850])
	goto $label$135 
	
.LABEL $label$136
	$8 = [0]
	$4 = CALL db_find_i64(*($1), *($26), (int_64)-3020371202490236928, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$135 }
	$8 = CALL $65($1, $4)
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$1), [19850])
	
.LABEL $label$135
	$4 = ((int_32)$8 != (int_32)[0])
	CALL $2($4, [19307], [20013])
	*($2 + [248]) = [17911]
	*($2 + [252]) = CALL $237([17911])
	*($2 + [48]) = *($2 + [248])
	CALL $13(($2 + [256]), ($2 + [48]))
	$9 = *($2 + [256])
	CALL eosio_assert($4, [20481])
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$1), [20516])
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert2()), [20562])
	*($8 + [56]) = (int_64)0
	$4 = ($8 + [8])
	$7 = *($4)
	*($6) = ( (int_64))((int_64)0 - $7) ? (int_64)-1 : ((int_64)$7 > (int_64)0) )
	*($2 + [976]) = *($8)
	$7 = *($8 + [64])
	CALL eosio_assert([1], [20613])
	*((($2 + [960]) + [8])) = $23
	*($2 + [964]) = ($2 + [800])
	*($2 + [960]) = ($2 + [800])
	*($2 + [544]) = ($2 + [960])
	*((($2 + [672]) + [8])) = ($8 + [16])
	*($22) = ($8 + [24])
	*($16) = ($8 + [32])
	*($27) = ($8 + [40])
	*((($2 + [672]) + [24])) = ($8 + [48])
	*($15) = ($8 + [56])
	*((($2 + [672]) + [32])) = ($8 + [64])
	*($2 + [676]) = $4
	*($2 + [672]) = $8
	CALL $66(($2 + [672]), ($2 + [544]))
	CALL db_update_i64(*($8 + [76]), $9, ($2 + [800]), [72])
	if ( (uint_64)($7 <= *($25)) ){ goto $label$139 }
	*($25) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$139
	*($2 + [672]) = *($8)
	if ( (CALL $236(($2 + [976]), ($2 + [672]), [8]) == 0) ){ goto $label$140 }
	$0 = ($8 + [80])
	$5 = *($0)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$141 }
	$5 = CALL db_idx64_find_primary(*($1), *($26), (int_64)-3020371202490236928, ($2 + [544]), $7)
	*($0) = $5
	
.LABEL $label$141
	CALL db_idx64_update($5, $9, ($2 + [672]))
	
.LABEL $label$140
	$10 = *($4)
	*($2 + [672]) = ( (int_64))((int_64)0 - $10) ? (int_64)-1 : ((int_64)$10 > (int_64)0) )
	if ( (CALL $236($6, ($2 + [672]), [8]) == 0) ){ goto $label$126 }
	$8 = ($8 + [84])
	$4 = *($8)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$142 }
	$4 = CALL db_idx64_find_primary(*($1), *($26), (int_64)-3020371202490236927, ($2 + [544]), $7)
	*($8) = $4
	
.LABEL $label$142
	CALL db_idx64_update($4, $9, ($2 + [672]))
	
.LABEL $label$126
	CALL $83(($2 + [584]))
	$3 = ($3 + [1])
	if ( ((uint_32)$3 > (uint_32)[4]) ){ goto $label$76 }
	$4 = *($2 + [588])
	if ( $4 ){ goto $label$124 }
	
.LABEL $label$76
	$global$0 = ($2 + [992])
	return (unreachable)
	
.LABEL $label$75
	CALL $174(($2 + [544]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [224])
	$global$0 = $2
	*($2 + [216]) = [17911]
	*($2 + [220]) = CALL $237([17911])
	*($2 + [24]) = *($2 + [216])
	CALL $13(($2 + [128]), ($2 + [24]))
	*($2 + [208]) = [17944]
	*($2 + [212]) = CALL $237([17944])
	*($2 + [16]) = *($2 + [208])
	CALL $13(($2 + [48]), ($2 + [16]))
	CALL require_auth2((int_64)-2984964984929477328, (int_64)5037610434748743680)
	CALL $2(($1 <= [2]), [19589], [20026])
	CALL memset(($2 + [48]), [0], [80])
	$3 = ($0 + [168])
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$0 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$3), [19850])
	if ( $0 ){ goto $label$1 }
	$0 = ($2 + [48])
	goto $label$1 
	
.LABEL $label$2
	$0 = CALL db_find_i64(*($3), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $45($3, $0)
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$3), [19850])
	goto $label$1 
	
.LABEL $label$3
	$0 = ($2 + [48])
	
.LABEL $label$1
	CALL memcpy(($2 + [128]), $0, [80])
	*($2 + [145]) = $1
	*($2 + [32]) = [17911]
	*($2 + [36]) = CALL $237([17911])
	*($2 + [8]) = *($2 + [32])
	CALL $72($3, ($2 + [128]), *(CALL $13(($2 + [40]), ($2 + [8]))))
	$global$0 = ($2 + [224])
}

void .FUNC $35 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [368])
	$global$0 = $2
	CALL memset(($2 + [272]), [0], [80])
	$3 = ($0 + [168])
	$4 = *(($0 + [196]))
	if ( ((int_32)$4 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	if ( $4 ){ goto $label$1 }
	$4 = ($2 + [272])
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($3), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $45($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [19850])
	goto $label$1 
	
.LABEL $label$3
	$4 = ($2 + [272])
	
.LABEL $label$1
	CALL $2((*($4 + [17]) == 0), [17924], [20027])
	CALL require_auth($1)
	*($2 + [264]) = $1
	*($2 + [256]) = ($0 + [48])
	CALL $77(($2 + [248]), ($2 + [256]), ($2 + [264]))
	CALL $2(((int_64)*(*($2 + [252])) == (int_64)$1), [19345], [20014])
	CALL $2(((int_64)*(*($2 + [252]) + [40]) > (int_64)0), [19370], [20014])
	CALL $2(((int_64)*(*($2 + [252]) + [40]) < (int_64)10000000000000000), [19386], [20018])
	$5 = *(*($2 + [252]) + [40])
	$4 = CALL $237([8984])
	if ( ($4 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [20700])
	goto $label$6 
	
.LABEL $label$7
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = (int_64)0
	
.LOOP $label$8:
	$3 = *(($4 + [8983]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [20745])
	
.LABEL $label$9
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$8 }
	$7 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$4 
	
.LABEL $label$5
	$7 = (int_64)4
	
.LABEL $label$4
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [19929])
	$6 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$6 = $8
	$3 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$6 = $8
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $3 ){ goto $label$14 }
	$3 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$3 = [0]
	
.LABEL $label$10
	CALL eosio_assert($3, [19978])
	$4 = *($2 + [252])
	$6 = *($4)
	*($2 + [312]) = (int_64))((int_64)0 - *($4 + [40]))
	*($2 + [272]) = $6
	*($2 + [280]) = (int_64)0
	*($2 + [288]) = (int_64)0
	*($2 + [296]) = (int_64)0
	*($2 + [304]) = (int_64)0
	*($2 + [328]) = (int_64)0
	*($2 + [336]) = (int_64)-1
	*($2 + [344]) = (int_64)0
	*($2 + [320]) = *($4 + [40])
	CALL $78($0, ($2 + [272]))
	*($2 + [176]) = [19123]
	*($2 + [180]) = CALL $237([19123])
	*($2 + [40]) = *($2 + [176])
	$4 = CALL $13(($2 + [184]), ($2 + [40]))
	*($2 + [160]) = [17999]
	*($2 + [164]) = CALL $237([17999])
	*($2 + [32]) = *($2 + [160])
	$3 = CALL $13(($2 + [168]), ($2 + [32]))
	*($2 + [192]) = *($4)
	*($2 + [200]) = *($3)
	*($2 + [144]) = [17871]
	*($2 + [148]) = CALL $237([17871])
	*($2 + [24]) = *($2 + [144])
	$9 = CALL $13(($2 + [152]), ($2 + [24]))
	*($2 + [128]) = [17846]
	*($2 + [132]) = CALL $237([17846])
	*($2 + [16]) = *($2 + [128])
	$0 = CALL $13(($2 + [136]), ($2 + [16]))
	*($2 + [64]) = [19123]
	*($2 + [68]) = CALL $237([19123])
	*($2 + [8]) = *($2 + [64])
	$10 = CALL $13(($2 + [72]), ($2 + [8]))
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$4 = CALL $237([19419])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$19 }
	*($2 + [48]) = ($4 << [1])
	$3 = (($2 + [48]) | [1])
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$11 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($11)
	*($2 + [48]) = ($11 | [1])
	*($2 + [56]) = $3
	*($2 + [52]) = $4
	
.LABEL $label$18
	CALL memcpy($3, [19419], $4)
	
.LABEL $label$17
	*(($3 + $4)) = [0]
	*(($2 + [104])) = $7
	$4 = ($2 + [56])
	*(($2 + [120])) = *($4)
	*($4) = [0]
	*($2 + [88]) = $1
	*($2 + [96]) = $5
	*($2 + [80]) = *($10)
	*($2 + [112]) = *($2 + [48])
	*($2 + [48]) = (int_64)0
	$4 = CALL $55(($2 + [208]), ($2 + [192]), *($9), *($0), ($2 + [80]))
	CALL $56(($2 + [352]), $4)
	$3 = *($2 + [352])
	CALL send_inline($3, (*($2 + [356]) - $3))
	$3 = *($2 + [352])
	if ( ($3 == 0) ){ goto $label$20 }
	*($2 + [356]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$3 = *($4 + [28])
	if ( ($3 == 0) ){ goto $label$21 }
	*(($4 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$3 = *($4 + [16])
	if ( ($3 == 0) ){ goto $label$22 }
	*(($4 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$22
	if ( (*(($2 + [112])) & [1]) ){ goto $label$24 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$23 }
	goto $label$15 
	
.LABEL $label$24
	CALL _ZdlPv(*(($2 + [120])))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($2 + [56])))
	$global$0 = ($2 + [368])
	return (unreachable)
	
.LABEL $label$16
	CALL $174(($2 + [48]))
	
.LABEL $label$15
	$global$0 = ($2 + [368])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL memset(($4 + [48]), [0], [80])
	$5 = ($0 + [168])
	$6 = *(($0 + [196]))
	if ( ((int_32)$6 == (int_32)*(($0 + [192]))) ){ goto $label$2 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$5), [19850])
	if ( $6 ){ goto $label$1 }
	$6 = ($4 + [48])
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL db_find_i64(*($5), *(($0 + [176])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $45($5, $6)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$5), [19850])
	goto $label$1 
	
.LABEL $label$3
	$6 = ($4 + [48])
	
.LABEL $label$1
	CALL $2((*($6 + [17]) == 0), [17924], [20027])
	*($4 + [32]) = [17911]
	*($4 + [36]) = CALL $237([17911])
	*($4 + [8]) = *($4 + [32])
	CALL require_auth(*(CALL $13(($4 + [40]), ($4 + [8]))))
	*($4 + [16]) = [17911]
	*($4 + [20]) = CALL $237([17911])
	*($4) = *($4 + [16])
	$7 = *(CALL $13(($4 + [24]), $4))
	CALL eosio_assert(((int_64)*($0 + [208]) == (int_64)CALL eosio_assert2()), [20106])
	*(($6 = CALL _Znwj([20])) + [8]) = ($0 + [208])
	*($6 + [1]) = $2
	*($6) = $1
	*($6 + [4]) = $3
	CALL eosio_assert([1], [20157])
	CALL memcpy(($4 + [48]), $6, [1])
	CALL eosio_assert([1], [20157])
	CALL memcpy((($4 + [48]) | [1]), ($6 + [1]), [1])
	CALL eosio_assert([1], [20157])
	CALL memcpy((($4 + [48]) | [2]), ($6 + [4]), [4])
	$8 = *($6)
	$1 = CALL db_store_i64(*(($0 + [216])), (int_64)-6525023824864346112, $7, $8, ($4 + [48]), [6])
	*($6 + [12]) = $1
	$5 = ($0 + [224])
	if ( ((uint_64)*($5) > (uint_64)$8) ){ goto $label$4 }
	*($5) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$4
	*($4 + [48]) = $6
	$2 = *($6)
	*($4 + [143]) = $2
	*($4 + [136]) = $1
	$3 = ($0 + [236])
	$5 = *($3)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [240]))) ){ goto $label$7 }
	*($5 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $2) & (int_64)255)
	*($5 + [16]) = $1
	*($4 + [48]) = [0]
	*($5) = $6
	*($3) = ($5 + [24])
	$6 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( $6 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $76(($0 + [232]), ($4 + [48]), ($4 + [143]), ($4 + [136]))
	$6 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$global$0 = ($4 + [144])
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [496])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $243($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [492]) = [0]
	*($4 + [488]) = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [19924])
	CALL memcpy(($4 + [488]), $2, [1])
	CALL eosio_assert(((int_32)$7 != (int_32)[1]), [19924])
	CALL memcpy((($4 + [488]) | [1]), ($2 + [1]), [1])
	CALL eosio_assert(((uint_32)($7 + [-2]) > (uint_32)[3]), [19924])
	CALL memcpy((($4 + [488]) | [4]), ($2 + [2]), [4])
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = ($2 + [6])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $67(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$9 = *($4 + [492])
	$10 = *($4 + [489])
	$11 = *($4 + [488])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($11 & [255])), (int_32 ($10 & [255])), (int_32 $9), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $247($2)
	
.LABEL $label$5
	CALL $68($8)
	$global$0 = ($4 + [496])
	return [1]
}

void .FUNC $30 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	$8 = ($global$0 - [32])
	$global$0 = $8
	*($8 + [16]) = [17911]
	*($8 + [20]) = CALL $237([17911])
	*($8 + [8]) = *($8 + [16])
	CALL require_auth(*(CALL $13(($8 + [24]), ($8 + [8]))))
	CALL require_recipient($1)
	$global$0 = ($8 + [32])
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [592])
	$global$0 = $3
	*(($4 = $3) + [584]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $243($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [520])) = (int_64)0
	*(($4 + [540])) = [0]
	*(($4 + [552])) = (int_64)0
	*(($4 + [568])) = (int_64)0
	*(($4 + [576])) = (int_64)0
	*($4 + [512]) = (int_64)0
	*($4 + [504]) = (int_64)0
	*($4 + [528]) = [0]
	*($4 + [532 align=4]) = (int_64)0
	*($4 + [544]) = (int_64)0
	*($4 + [560]) = (int_64)0
	*($4 + [492]) = $2
	*($4 + [488]) = $2
	*($4 + [496]) = ($2 + $5)
	*($4 + [16]) = ($4 + [488])
	*($4 + [40]) = ($4 + [504])
	CALL $98(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [496])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [488])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $67(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [584])
	CALL $99(($4 + [16]), ($4 + [504]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $247($2)
	
.LABEL $label$4
	CALL $68($3)
	if ( (*($4 + [572]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [560]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [580])))
	if ( ((*($4 + [560]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [568])))
	$2 = [1]
	if ( ((*($4 + [532]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [532]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [592])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [540])))
	$global$0 = ($4 + [592])
	return $2
}

int_32 .FUNC $215 (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_64 .FUNC $214 (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC $217 (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC $216 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *($2 + [20])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	if ( CALL $215($2) ){ goto $label$2 }
	$4 = *($2 + [20])
	if ( ((*(($2 + [16])) - $4) <= $1) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$5 }
	$6 = [0]
	$5 = $0
	$3 = [0]
	
.LOOP $label$6:
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$5 }
	$3 = ($3 + [1])
	$7 = ($5 + $1)
	$8 = ($5 + [-1])
	$5 = $8
	if ( ((int_32)*(($7 + [-1])) != (int_32)[10]) ){ goto $label$6 }
	$6 = (($1 - $3) + [1])
	$5 = CALL int_32 $2((int_32 $0), (int_32 $6), (int_32 *($2 + [36])))
	if ( ($5 <= $6) ){ goto $label$2 }
	$0 = (($8 + $1) + [1])
	$4 = *(($2 + [20]))
	$1 = ($3 + [-1])
	
.LABEL $label$5
	CALL memcpy($4, $0, $1)
	*(($3 = ($2 + [20]))) = (*($3) + $1)
	$5 = ($6 + $1)
	
.LABEL $label$2
	return $5
	return .LABEL $label$1
}

int_32 .FUNC $211 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $207([21], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $210 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $198 ()
{
	return [9080]
}

void .FUNC $199 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL $204(*([0] + [21952]), [8196], $4)
	CALL $203([0])
	CALL abort()
	(unreachable)
}

void .FUNC $196 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $197 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $194 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $195 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $180(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $211(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8861], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $180(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $180(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $193 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $180(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $211(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8871], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $180(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $180(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $190 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $121($1, $0, [17855])
	CALL $195()
	(unreachable)
}

int_64 .FUNC $191 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $237([8448])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8448], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $198())
	*(CALL $198()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $233($4, ($3 + [12]), $2)
	$0 = CALL $198()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $189($3)
	
.LABEL $label$1
	CALL $190($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}