(data (i32.const 8192) "transfer\00")
(data (i32.const 8201) "bankofstaked\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8301) " \00")
(data (i32.const 8304) "\02\00\00\00\03\00\00\00")
(data (i32.const 8312) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> > >::n() [T = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]\00")
(data (i32.const 8534) "T = \00")
(data (i32.const 8539) "write\00")
(data (i32.const 8545) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8594) "invalid symbol name\00")
(data (i32.const 8614) "get\00")
(data (i32.const 8618) "read\00")
(import "env" "eosio_exit" (func $fimport$0 (param i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$6 (param i32 i32)))
(import "env" "__lttf2" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$8))
(import "env" "memset" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$16 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$17 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$18 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$19 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$20 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$21 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$24 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$26 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$27 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$28 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $35))
(export "_Znwj" (func $33))
(export "_Znaj" (func $34))
(export "_ZdaPv" (func $36))
(table $0 4 4 anyfunc)
(elem (i32.const 1) $5 $18 $20)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17032))
(global $global$2 i32 (i32.const 17032))


void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$4 }
	$0 = [0]
	
.LOOP $label$5:
	$2 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*((($0 + $2) + [8351])) != (int_32)*(($2 + [8534]))) ){ goto $label$6 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ((int_32)($0 + $2) != (int_32)[183]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	CALL $19($0, $1, $2)
	return 
	
.LABEL $label$3
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$1 }
	
.LABEL $label$2
	*($1) = [8351]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$1
	*($1) = ($0 + [8355])
	*($1 + [4]) = [0]
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$15
	$3 = *($0)
	$2 = CALL _Znwj([16])
	$4 = *($3 + [8])
	*($2) = [0]
	*($2 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$10 }
	$0 = $3
	$5 = $2
	goto $label$9 
	
.LABEL $label$14
	$4 = [0]
	
.LOOP $label$16:
	$2 = [0]
	
.LOOP $label$18:
	if ( ((int_32)*((($4 + $2) + [8351])) != (int_32)*(($2 + [8534]))) ){ goto $label$17 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)($4 + $2) != (int_32)[183]) ){ goto $label$18 }
	goto $label$7 
	
.LABEL $label$17
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$16 }
	goto $label$7 
	
.LABEL $label$13
	*($1) = *($0)
	*($0) = [0]
	return 
	
.LABEL $label$12
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$19 }
	if ( (*($2 + [8]) <= [9]) ){ goto $label$20 }
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdaPv($4)
	
.LABEL $label$20
	CALL _ZdlPv($2)
	
.LABEL $label$19
	*($1) = [0]
	return 
	
.LABEL $label$11
	$3 = *($1)
	$4 = [0]
	
.LOOP $label$21:
	$2 = [0]
	
.LOOP $label$23:
	if ( ((int_32)*((($4 + $2) + [8351])) != (int_32)*(($2 + [8534]))) ){ goto $label$22 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)($4 + $2) != (int_32)[183]) ){ goto $label$23 }
	goto $label$5 
	
.LABEL $label$22
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$21 }
	goto $label$5 
	
.LABEL $label$10
	$5 = CALL _Znaj($4)
	*($2) = $5
	$4 = *(($2 + [8]))
	$0 = *($3)
	
.LABEL $label$9
	CALL memcpy($5, $0, $4)
	$4 = *($3 + [12])
	*($1) = $2
	*($2 + [12]) = $4
	return 
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$4 }
	
.LABEL $label$7
	*($1) = [8351]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = [8351]
	$5 = [0]
	$4 = *($3)
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($1) = ($4 + [8355])
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$3
	$2 = ($4 + [8355])
	$5 = [0]
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($3 + [1])
	
.LOOP $label$25:
	if ( ((int_32)($4 & [255]) != (int_32)*($2)) ){ goto $label$24 }
	$2 = ($2 + [1])
	$4 = *($3)
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$25 }
	goto $label$1 
	
.LABEL $label$24
	$5 = $4
	
.LABEL $label$1
	if ( ((int_32)($5 & [255]) != (int_32)*($2)) ){ goto $label$26 }
	*($1) = *($0)
	return 
	
.LABEL $label$26
	*($1) = [0]
	$2
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8614])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $22($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8618])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $29($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $40($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $40($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $37($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4) = [0]
	$5 = *($1 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	$7 = $1
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$7 = *($1)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	$8 = *(($4 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$10 }
	if ( ((uint_32)$8 >= (uint_32)[9]) ){ goto $label$12 }
	$9 = ($4 + $8)
	if ( ($8 == 0) ){ goto $label$9 }
	
.LOOP $label$13:
	$10 = *($2)
	$5 = $4
	$6 = $8
	
.LOOP $label$14:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$14 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$15 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = *($4)
	$12 = ($9 + $8)
	
.LOOP $label$16:
	$10 = *($2)
	$5 = $9
	$6 = $8
	
.LOOP $label$17:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$17 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$18 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$18
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$11
	$2 = $3
	
.LABEL $label$10
	if ( ($8 <= [9]) ){ goto $label$8 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$7 }
	$5 = *($4)
	
.LOOP $label$19:
	if ( ((int_32)$5 <= (int_32)*($2)) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$19 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	if ( (*($1 + [12]) == 0) ){ goto $label$20 }
	$8 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$20
	$9 = *(($1 + [8]))
	if ( ((uint_32)$9 >= (uint_32)[9]) ){ goto $label$6 }
	$12 = ($1 + $9)
	if ( ($9 == 0) ){ goto $label$5 }
	$8 = $2
	
.LOOP $label$21:
	$10 = *($8)
	$5 = $1
	$6 = $9
	
.LOOP $label$22:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$22 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$21 }
	goto $label$4 
	
.LABEL $label$7
	$2 = $3
	goto $label$4 
	
.LABEL $label$6
	$12 = *($1)
	$1 = ($12 + $9)
	$8 = $2
	
.LOOP $label$23:
	$10 = *($8)
	$5 = $12
	$6 = $9
	
.LOOP $label$24:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$24 }
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$23 }
	goto $label$4 
	
.LABEL $label$5
	$6 = ((int_32)$12 == (int_32)$1)
	if ( $6 ){ goto $label$25 }
	$7 = ($3 + [-1])
	$5 = *($1)
	$8 = $2
	
.LOOP $label$26:
	if ( ((int_32)$5 > (int_32)*($8)) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [1])
	if ( ($6 == 0) ){ goto $label$26 }
	goto $label$3 
	
.LABEL $label$25
	$8 = $2
	goto $label$3 
	
.LABEL $label$4
	$8 = $3
	
.LABEL $label$3
	*($0 + [4]) = $8
	*($0) = $2
	$global$0 = ($4 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $21($0, *($1), $2, $3)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8539])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8539])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [8539])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [8539])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $25(*($1), ($0 + [32]))
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $43($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8539])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8539])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $22($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8539])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8539])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $27(CALL $26($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8539])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8539])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8539])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8539])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8539])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17020])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16828]
	$3 = (((int_32)$1 * (int_32)[12]) + [16828])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $43 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	return CALL $41($0, $1, $2, $3, CALL $44($3))
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$5 = uint_32($5 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($5 - $1)
	$2 = ( $7 ? $2 : ($7 <= $2) )
	$8 = [10]
	if ( ($6 == 0) ){ goto $label$4 }
	$8 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)(($2 - $5) + $8) >= (uint_32)$4) ){ goto $label$5 }
	CALL $39($0, $8, ((($5 + $4) - $2) - $8), $5, $1, $2, $4, $3)
	return $0
	
.LABEL $label$5
	if ( $6 ){ goto $label$11 }
	$8 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$8 = *($0 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$10
	$2 = $4
	$6 = $4
	if ( ($6 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = ($7 - $2)
	if ( ($9 == 0) ){ goto $label$13 }
	$7 = ($8 + $1)
	if ( ((uint_32)$2 <= (uint_32)$4) ){ goto $label$12 }
	if ( ($4 == 0) ){ goto $label$14 }
	CALL memmove($7, $3, $4)
	
.LABEL $label$14
	CALL memmove(($7 + $4), ($7 + $2), $9)
	goto $label$6 
	
.LABEL $label$13
	$6 = $4
	if ( $6 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$12
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$15 }
	if ( ((uint_32)($8 + $5) <= (uint_32)$3) ){ goto $label$15 }
	if ( ((uint_32)($7 + $2) <= (uint_32)$3) ){ goto $label$16 }
	if ( ($2 == 0) ){ goto $label$17 }
	CALL memmove($7, $3, $2)
	
.LABEL $label$17
	$6 = ($4 - $2)
	$3 = ($3 + $4)
	$1 = ($2 + $1)
	$2 = [0]
	$4 = ($8 + $1)
	CALL memmove(($6 + $4), ($4 + [0]), $9)
	if ( $6 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$16
	$3 = ($3 + ($4 - $2))
	
.LABEL $label$15
	$6 = $4
	CALL memmove(($7 + $6), ($7 + $2), $9)
	if ( $6 ){ goto $label$7 }
	
.LABEL $label$8
	$4 = [0]
	goto $label$6 
	
.LABEL $label$7
	CALL memmove(($8 + $1), $3, $6)
	$4 = $6
	
.LABEL $label$6
	$4 = (($4 - $2) + $5)
	if ( (*($0) & [1]) ){ goto $label$18 }
	*($0) = ($4 << [1])
	*(($8 + $4)) = [0]
	return $0
	
.LABEL $label$18
	*($0 + [4]) = $4
	*(($8 + $4)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8628]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8632])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8628]) = [1]
	$2 = ($2 << [16])
	*([0] + [8632]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8632])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8632]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8628]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8628]) = [1]
	$3 = ($3 << [16])
	*([0] + [8632]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8632])
	
.LABEL $label$10
	*([0] + [8632]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $47($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8214])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $45 (int_32 $0)
{
	return CALL $46([8636], $0)
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $8 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $22($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $23(($4 + [72]), ($4 + [64]))
	CALL $24(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $43(($4 + [8]))
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $28($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8618])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8618])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $45($5)
	CALL read_action_data($2, $5)
	CALL $48($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = [0]
	*($3 + [32]) = [0]
	*($3 + [24]) = (int_64)0
	$5 = CALL $44([8301])
	*($3 + [16]) = $5
	*($3 + [8]) = [0]
	if ( ((uint_32)$5 >= (uint_32)[9]) ){ goto $label$3 }
	$6 = ($3 + [8])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = CALL _Znaj($5)
	*($3 + [8]) = $6
	
.LABEL $label$2
	CALL memmove($6, [8301], $5)
	$4 = *(($3 + [16]))
	
.LABEL $label$1
	CALL $30($6, ($6 + $4), ($3 + [40]))
	CALL $10(($3 + [24]), $2, ($3 + [8]), [0])
	if ( (*(($3 + [16])) <= [9]) ){ goto $label$4 }
	$5 = *($3 + [8])
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdaPv($5)
	
.LABEL $label$4
	CALL $38($0, *($3 + [24]))
	$4 = *($3 + [24])
	if ( ($4 == 0) ){ goto $label$5 }
	$6 = *($3 + [28])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$9
	$6 = $5
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$8 }
	$5 = *($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	$5 = $4
	
.LABEL $label$6
	*($3 + [28]) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $4 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [176])
	$global$0 = $3
	$4 = *($1)
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [8201]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$1 }
	if ( ((int_64)$4 != (int_64)$8) ){ goto $label$5 }
	if ( ((int_64)*($1 + [8]) != (int_64)*($0)) ){ goto $label$5 }
	$11 = CALL $38(($3 + [96]), ($1 + [32]))
	CALL $7(($3 + [80]), $0, $11)
	$12 = *($3 + [80])
	$13 = ($12 & [1])
	$7 = ( *($3 + [88]) ? (($3 + [80]) | [1]) : $13 )
	$10 = [0]
	
.LOOP $label$6:
	$14 = ($7 + $10)
	$15 = ($10 + [1])
	$10 = $15
	if ( *($14) ){ goto $label$6 }
	$4 = (CASTING uint_64)(uint_32 ($15 + [-1]))
	$5 = (int_64)0
	$6 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$7:
	$9 = (int_64)0
	if ( ((uint_64)$5 >= (uint_64)$4) ){ goto $label$8 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$10 = ($10 + [-91])
	goto $label$9 
	
.LABEL $label$10
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$12 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$11 
	
.LABEL $label$12
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$11
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$7 }
	$10 = *($3 + [96])
	$7 = ( *($3 + [84]) ? uint_32($12 >> [1]) : $13 )
	$10 = CALL $38(($3 + [64]), CALL $42($11, [0], ($7 + ((uint_32)( *($11 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) ) > (uint_32)$7)), [8300]))
	$6 = *($0)
	$5 = (int_64)6
	
.LOOP $label$13:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$13 }
	*($3 + [56]) = (int_64)3617214756542218240
	*($3 + [48]) = $6
	*((($7 = CALL _Znwj([16])) + [8])) = *($3 + [56])
	*($7) = *($3 + [48])
	*(($14 = ($3 + [24]))) = *(($1 + [24]))
	*($3 + [8]) = $8
	*($3) = *($0)
	*($3 + [16]) = *($1 + [16])
	CALL $38(($3 + [32]), $10)
	*((($3 + [112]) + [24])) = *($14)
	$14 = ($3 + [40])
	*(($15 = (($3 + [112]) + [40]))) = *($14)
	*($14) = [0]
	$14 = ($7 + [16])
	*($3 + [164]) = $14
	*($3 + [160]) = $7
	*($3 + [168]) = $14
	*($3 + [112]) = *($3)
	*($3 + [120]) = *($3 + [8])
	*($3 + [128]) = *($3 + [16])
	*($3 + [144]) = *($3 + [32])
	*($3 + [32]) = (int_64)0
	CALL $8($2, (int_64)-3617168760277827584, ($3 + [160]), ($3 + [112]))
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($15))
	
.LABEL $label$14
	$7 = *($3 + [160])
	if ( ($7 == 0) ){ goto $label$15 }
	*($3 + [164]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( (*(($3 + [32])) & [1]) ){ goto $label$21 }
	if ( (*($3 + [64]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*($10 + [8]))
	$7 = [1]
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$7 = [1]
	if ( (*($3 + [80]) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( ((*($3 + [96]) & $7) == 0) ){ goto $label$5 }
	goto $label$16 
	
.LABEL $label$17
	CALL _ZdlPv(*(($3 + [88])))
	if ( ((*($3 + [96]) & $7) == 0) ){ goto $label$5 }
	
.LABEL $label$16
	CALL _ZdlPv(*($11 + [8]))
	
.LABEL $label$5
	$global$0 = ($3 + [176])
}

void .FUNC $5 (int_32 $0)
{
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8192]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $3(($3 + [16]))
	CALL $4($0, ($3 + [16]), $1)
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [56])))
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$8
	if ( ((int_64)$2 != (int_64)6101144942552285184) ){ goto $label$7 }
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	*($3 + [12]) = [0]
	*($3 + [8]) = [1]
	*($3) = *($3 + [8])
	CALL $6($0, $3)
	
.LABEL $label$7
	$global$0 = ($3 + [64])
}

void .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $45($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [8545])
	$5 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $6
	$7 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [8594])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($2 + [4]) = $4
	*($2) = $4
	*($2 + [8]) = ($4 + $3)
	CALL $9($2, $0)
	$global$0 = ($2 + [16])
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL memory()
	*($3 + [8]) = $0
	CALL $2(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*($0) = [0]
	*($3 + [16]) = [0]
	$1 = *(($3 + [8]))
	*($3 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $3
	$5 = ($3 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($3 + [16]) = $5
	$4 = *($3)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($3 + [28]) = *(($3 + [12]))
	CALL $16($0, ($3 + [16]))
	if ( (*((($3 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdaPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $43($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = [0]
	$3 = *($1 + [8])
	*($2 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $2
	$5 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL _Znaj($3)
	*($2) = $4
	$5 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $5, $3)
	*($2 + [12]) = *($1 + [12])
	*($2 + [16]) = [0]
	$1 = *(($2 + [8]))
	*($2 + [24]) = $1
	$3 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $2
	$5 = ($2 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($2 + [16]) = $5
	$4 = *($2)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($2 + [28]) = *(($2 + [12]))
	$1 = CALL $17([8304], ($2 + [16]), $3)
	if ( (*((($2 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdaPv($3)
	
.LABEL $label$5
	if ( (*(($2 + [8])) <= [9]) ){ goto $label$6 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdaPv($3)
	
.LABEL $label$6
	*($0) = ( [8304] ? [0] : $1 )
	$global$0 = ($2 + [32])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*(($1 = CALL _Znwj([16]))) = [0]
	$4 = *(($3 + [8]))
	*($1 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $3
	$6 = $1
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($4)
	*($1) = $6
	$4 = *(($1 + [8]))
	$5 = *($3)
	
.LABEL $label$3
	CALL memcpy($6, $5, $4)
	*($2) = $1
	*($1 + [12]) = *(($3 + [12]))
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4) = [0]
	$5 = *($2 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $2, $5)
	*($4 + [32]) = [0]
	$2 = *(($4 + [8]))
	*($4 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $4
	$6 = ($4 + [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($2)
	*($4 + [32]) = $6
	$5 = *($4)
	
.LABEL $label$3
	CALL memcpy($6, $5, $2)
	*($4 + [16]) = [0]
	$2 = *((($4 + [32]) + [8]))
	*($4 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$5 = ($4 + [16])
	$6 = ($4 + [32])
	goto $label$5 
	
.LABEL $label$6
	$5 = CALL _Znaj($2)
	*($4 + [16]) = $5
	$2 = *((($4 + [16]) + [8]))
	$6 = *($4 + [32])
	
.LABEL $label$5
	CALL memcpy($5, $6, $2)
	*($4 + [28]) = $3
	if ( (*((($4 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdaPv($2)
	
.LABEL $label$7
	$2 = CALL $11($0, $1, ($4 + [16]))
	if ( (*((($4 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	
.LABEL $label$8
	if ( (*(($4 + [8])) <= [9]) ){ goto $label$9 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdaPv($5)
	
.LABEL $label$9
	$global$0 = ($4 + [48])
	return $2
}

int_32 .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [272])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1 + [4])
	$6 = *($1)
	*($3 + [176]) = [0]
	$7 = *($2 + [8])
	*($3 + [184]) = $7
	$1 = ($6 & [1])
	$4 = ( $4 ? ($1 + [1]) : $1 )
	$1 = ($4 + ( $5 ? uint_32($6 >> [1]) : $1 ))
	if ( ((uint_32)$7 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($3 + [176])
	$5 = $2
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($7)
	*($3 + [176]) = $6
	$5 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $5, $7)
	*($3 + [188]) = *($2 + [12])
	$1 = CALL $12(($3 + [192]), $4, $1, ($3 + [176]))
	$2 = [0]
	*($3 + [232]) = [0]
	$7 = *($1)
	if ( ($7 == 0) ){ goto $label$3 }
	*($3 + [232]) = $7
	if ( ($7 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($3 + [232]) | [4])), (int_32 [0]), (int_32 *(($7 & [-2]))))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	*((($3 + [232]) + [12])) = *(($1 + [12]))
	*($3 + [236 align=4]) = *($1 + [4 align=4])
	$2 = $7
	
.LABEL $label$3
	*($3 + [248]) = *($1 + [16 align=4])
	*($3 + [256]) = *($1 + [24 align=4])
	*($3 + [264]) = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$7 = ($1 + [4])
	CALL void $7((int_32 $7), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($3 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($3 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdaPv($1)
	
.LABEL $label$7
	*(($3 + [116])) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [96]) = [0]
	*($3 + [124]) = [0]
	*($3 + [128]) = [1]
	*($3 + [136]) = [0]
	*($3 + [160]) = (int_64)0
	*($3 + [168]) = [1]
	*($3 + [152]) = *($3 + [112])
	*($3 + [40]) = [0]
	$1 = [0]
	$2 = *($3 + [232])
	if ( ($2 == 0) ){ goto $label$8 }
	*($3 + [40]) = $2
	if ( ($2 & [1]) ){ goto $label$9 }
	CALL void (($3 + [232]) | [4])((int_32 (($3 + [40]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($3 + [136])
	goto $label$8 
	
.LABEL $label$9
	*((($3 + [40]) + [12])) = *((($3 + [232]) + [12]))
	*($3 + [44 align=4]) = *($3 + [236 align=4])
	$1 = [0]
	
.LABEL $label$8
	*($3) = [0]
	*($3 + [56]) = *((($3 + [232]) + [16]))
	*($3 + [64]) = *((($3 + [232]) + [24]))
	*($3 + [72]) = *((($3 + [232]) + [32]))
	if ( ($1 == 0) ){ goto $label$10 }
	*($3) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($3 + [136]) | [4])((int_32 ($3 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	*(($3 + [12])) = *((($3 + [136]) + [12]))
	*($3 + [4 align=4]) = *($3 + [140 align=4])
	
.LABEL $label$10
	*($3 + [16]) = *((($3 + [136]) + [16]))
	*($3 + [24]) = *((($3 + [136]) + [24]))
	*($3 + [32]) = *((($3 + [136]) + [32]))
	$6 = CALL $13(($3 + [80]), ($3 + [40]), $3)
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($3 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($3) = [0]
	
.LABEL $label$12
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($3 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($3 + [40]) = [0]
	
.LABEL $label$14
	$7 = *($0)
	*($0) = *($6)
	*($6) = $7
	$8 = *($6 + [4 align=4])
	$2 = *($0 + [4])
	*($6 + [4]) = $2
	$1 = *($0 + [8])
	*($0 + [4 align=4]) = $8
	*($6 + [8]) = $1
	if ( ($7 == 0) ){ goto $label$16 }
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$1 = ($2 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$20
	$2 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	$1 = *($6)
	goto $label$17 
	
.LABEL $label$18
	$1 = $7
	
.LABEL $label$17
	*(($6 + [4])) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($3 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($3 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($3 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($3 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($3 + [232]) = [0]
	
.LABEL $label$23
	$global$0 = ($3 + [272])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [8]) = [0]
	$5 = *($3 + [8])
	*($4 + [16]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($4 + [8])
	$7 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4 + [8]) = $6
	$7 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	*($4 + [20]) = *($3 + [12])
	CALL $14($0, ($4 + [8]), [0])
	if ( (*(($4 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($4 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdaPv($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($4 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$2 = *($4 + [24])
	if ( ((int_32)$2 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$1 = *($4 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$1 = *($4 + [28])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$1) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $2
	$2 = ($0 + [24])
	*(($0 + [16])) = *($2)
	*($2) = $1
	
.LABEL $label$4
	$global$0 = ($4 + [32])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$5 = ($3 | [1])
	$6 = ($1 + [16])
	$7 = ($1 + [20])
	$8 = ($3 + [8])
	$9 = ($1 + [28])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	$12 = [1]
	if ( *($1) ){ goto $label$2 }
	$14 = [1]
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$64 
	
.LABEL $label$65
	*($7) = $13
	*($6) = *($11)
	*($11) = $12
	$12 = [1]
	if ( (*($1) == 0) ){ goto $label$31 }
	$14 = [0]
	goto $label$3 
	
.LABEL $label$64
	$12 = ((int_32)*($10) != (int_32)[0])
	$14 = [1]
	goto $label$3 
	
.LABEL $label$63
	if ( (*($2) == 0) ){ goto $label$30 }
	$14 = [2]
	goto $label$3 
	
.LABEL $label$62
	$13 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($12 | $13) == (int_32)[1]) ){ goto $label$29 }
	$14 = [3]
	goto $label$3 
	
.LABEL $label$61
	$13 = *(($2 + [16]))
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	if ( ((int_32)$16 != (int_32)(*(($2 + [20])) - $13)) ){ goto $label$27 }
	$14 = [24]
	goto $label$3 
	
.LABEL $label$60
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$8 }
	$14 = [25]
	goto $label$3 
	
.LABEL $label$59
	$17 = $12
	$14 = [26]
	goto $label$3 
	
.LABEL $label$58
	if ( ((int_32)*($17) != (int_32)*($13)) ){ goto $label$26 }
	$14 = [27]
	goto $label$3 
	
.LABEL $label$57
	$13 = ($13 + [1])
	$17 = ($17 + [1])
	if ( ((int_32)$15 != (int_32)$17) ){ goto $label$7 }
	$14 = [28]
	goto $label$3 
	
.LABEL $label$56
	if ( ((int_32)*($11) != (int_32)*(($2 + [24]))) ){ goto $label$28 }
	$14 = [29]
	goto $label$3 
	
.LABEL $label$55
	if ( ((int_32)*($9) != (int_32)*(($2 + [28]))) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$54
	$13 = [1]
	$14 = [32]
	goto $label$3 
	
.LABEL $label$53
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$4 }
	$14 = [30]
	goto $label$3 
	
.LABEL $label$52
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	$14 = [4]
	goto $label$3 
	
.LABEL $label$51
	*($8) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$25 }
	$14 = [5]
	goto $label$3 
	
.LABEL $label$50
	if ( ((uint_32)$16 > (uint_32)[10]) ){ goto $label$24 }
	$14 = [22]
	goto $label$3 
	
.LABEL $label$49
	*($3) = ($16 << [1])
	$17 = $5
	if ( ((int_32)$12 != (int_32)$15) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$48
	$13 = (($16 + [16]) & [-16])
	$17 = CALL _Znwj($13)
	*($8) = $17
	*($3) = ($13 | [1])
	*($3 + [4]) = $16
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$23 }
	$14 = [7]
	goto $label$3 
	
.LABEL $label$47
	$13 = $17
	$14 = [8]
	goto $label$3 
	
.LABEL $label$46
	*($13) = *($12)
	$13 = ($13 + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$20 }
	$14 = [9]
	goto $label$3 
	
.LABEL $label$45
	$17 = ($17 + $16)
	$14 = [10]
	goto $label$3 
	
.LABEL $label$44
	*($17) = [0]
	$12 = ($0 + [4])
	$13 = *($12)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [8]))) ){ goto $label$19 }
	$14 = [21]
	goto $label$3 
	
.LABEL $label$43
	*($13) = *($3)
	*(($13 + [8])) = *($8)
	*($8) = [0]
	*($12) = (*($12) + [12])
	*($3) = (int_64)0
	$12 = *($9)
	$13 = *($1)
	if ( $13 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$42
	CALL $15($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$18 }
	$14 = [12]
	goto $label$3 
	
.LABEL $label$41
	CALL _ZdlPv(*($8))
	$14 = [13]
	goto $label$3 
	
.LABEL $label$40
	$12 = *($9)
	$13 = *($1)
	if ( ($13 == 0) ){ goto $label$17 }
	$14 = [14]
	goto $label$3 
	
.LABEL $label$39
	CALL void $3((int_32 $4), (int_32 *($11)), (int_32 $12), (int_32 *(($13 & [-2]) + [4])))
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)*($9)) ){ goto $label$14 }
	$14 = [15]
	goto $label$3 
	
.LABEL $label$38
	$12 = *($3 + [4])
	goto $label$13 
	
.LABEL $label$37
	*($3 + [4]) = $12
	*($3) = $12
	$13 = $12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$36
	if ( ((int_32)*($7) != (int_32)$13) ){ goto $label$9 }
	$14 = [19]
	goto $label$3 
	
.LABEL $label$35
	*($10) = [1]
	goto $label$10 
	
.LABEL $label$34
	$12 = *($3 + [4])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$33
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$32
	CALL $37($3)
	
.LABEL $label$31
	$14 = [1]
	goto $label$3 
	
.LABEL $label$30
	$14 = [33]
	goto $label$3 
	
.LABEL $label$29
	$14 = [32]
	goto $label$3 
	
.LABEL $label$28
	$14 = [4]
	goto $label$3 
	
.LABEL $label$27
	$14 = [4]
	goto $label$3 
	
.LABEL $label$26
	$14 = [4]
	goto $label$3 
	
.LABEL $label$25
	$14 = [23]
	goto $label$3 
	
.LABEL $label$24
	$14 = [6]
	goto $label$3 
	
.LABEL $label$23
	$14 = [10]
	goto $label$3 
	
.LABEL $label$22
	$14 = [10]
	goto $label$3 
	
.LABEL $label$21
	$14 = [7]
	goto $label$3 
	
.LABEL $label$20
	$14 = [8]
	goto $label$3 
	
.LABEL $label$19
	$14 = [11]
	goto $label$3 
	
.LABEL $label$18
	$14 = [13]
	goto $label$3 
	
.LABEL $label$17
	$14 = [20]
	goto $label$3 
	
.LABEL $label$16
	$14 = [20]
	goto $label$3 
	
.LABEL $label$15
	$14 = [14]
	goto $label$3 
	
.LABEL $label$14
	$14 = [17]
	goto $label$3 
	
.LABEL $label$13
	$14 = [16]
	goto $label$3 
	
.LABEL $label$12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$11
	$14 = [16]
	goto $label$3 
	
.LABEL $label$10
	$14 = [16]
	goto $label$3 
	
.LABEL $label$9
	$14 = [16]
	goto $label$3 
	
.LABEL $label$8
	$14 = [28]
	goto $label$3 
	
.LABEL $label$7
	$14 = [26]
	goto $label$3 
	
.LABEL $label$6
	$14 = [31]
	goto $label$3 
	
.LABEL $label$5
	$14 = [30]
	goto $label$3 
	
.LABEL $label$4
	$14 = [31]
	goto $label$3 
	$14
	return (unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $37 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $48($0)
	
.LABEL $label$1
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = [1]
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$20 }
	goto $label$2 
	
.LABEL $label$21
	$5 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$2 }
	*($0) = $2
	*($4) = $5
	return [1]
	
.LABEL $label$20
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$16 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$13 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$12 
	
.LABEL $label$19
	$5 = ($1 + [-1])
	$4 = *($5)
	$6 = *($0)
	$2 = *($0 + [1])
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$8 }
	*($0) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$18
	CALL $31($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	return [1]
	
.LABEL $label$17
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$14 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$7 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$6 
	
.LABEL $label$16
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$10 }
	*(($0 + [2])) = $4
	*(($6 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$11 }
	*($0) = $2
	*($6) = $5
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$15
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	$3 = [1]
	*(($6 = ($0 + [1]))) = $4
	*($5) = $2
	$2 = *($0)
	$4 = *($6)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$14
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$4 }
	*(($0 + [2])) = $4
	*(($7 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$5 }
	*($0) = $2
	*($7) = $5
	$5 = *($6)
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$13
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$10 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$12
	$4 = $5
	
.LABEL $label$11
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$10
	$4 = $2
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$9
	$8 = [0]
	$9 = [0]
	
.LOOP $label$22:
	$5 = *($7)
	if ( ((int_32)$5 >= (int_32)int_32(($4 << [24]) >> [24])) ){ goto $label$23 }
	$3 = $8
	
.LOOP $label$25:
	*((($2 = ($0 + $3)) + $6)) = $4
	if ( ((int_32)$3 == (int_32)[-2]) ){ goto $label$24 }
	$3 = ($3 + [-1])
	$4 = *(($2 + [1]))
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$25 }
	*((($0 + $3) + $6)) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[8]) ){ goto $label$23 }
	goto $label$1 
	
.LABEL $label$24
	*($0) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 == (int_32)[8]) ){ goto $label$1 }
	
.LABEL $label$23
	$3 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	$8 = ($8 + [1])
	$4 = *($7)
	$7 = $2
	goto $label$22 
	
.LABEL $label$8
	*($0) = $2
	$3 = [1]
	*(($0 + [1])) = $6
	$4 = *($5)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$2 }
	*(($0 + [1])) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$7
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$4 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	$5 = *($6)
	if ( ((int_32)$5 >= (int_32)$4) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$4 = $2
	$5 = *($6)
	if ( ((int_32)$5 >= (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	*(($2 = ($0 + [2]))) = $5
	*($6) = $4
	$3 = [1]
	$5 = *(($0 + [1]))
	$4 = *($2)
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$2 }
	*($2) = $5
	$3 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$2
	return $3
	
.LABEL $label$1
	$4
	return ((int_32)($7 + [1]) == (int_32)$1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $45($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8624])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $45($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$5 = ($1 + [-2])
	$6 = ($1 + [-1])
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	
.LOOP $label$7:
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$19 }
	$7 = ($4 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$20 }
	$0 = uint_32($0 >> [2])
	$8 = CALL $31($4, ($4 + $0), $7, ($7 + $0), $6, $2)
	goto $label$18 
	
.LABEL $label$20
	$0 = *($6)
	$9 = *($4)
	$10 = *($7)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$23 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$22 }
	*($4) = $0
	*($6) = $9
	$8 = [1]
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$23
	$8 = [0]
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$18 }
	*($7) = $0
	*($6) = $10
	$8 = [1]
	$10 = *($4)
	$0 = *($7)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$18 }
	*($4) = $0
	*($7) = $10
	goto $label$21 
	
.LABEL $label$22
	*($4) = $10
	*($7) = $9
	$8 = [1]
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$18 }
	*($7) = $0
	*($6) = $9
	
.LABEL $label$21
	$8 = [2]
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$0 = *($4 + [2])
	$9 = *($4)
	$10 = *($4 + [1])
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$29 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$28 }
	*($4) = $0
	*(($4 + [2])) = $9
	goto $label$27 
	
.LABEL $label$29
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$25 }
	*(($4 + [2])) = $10
	*(($11 = ($4 + [1]))) = $0
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$26 }
	*($4) = $0
	*($11) = $9
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$28
	*($4) = $10
	*(($10 = ($4 + [1]))) = $9
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$25 }
	*(($4 + [2])) = $9
	*($10) = $0
	
.LABEL $label$27
	$10 = $9
	
.LABEL $label$26
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$25
	$10 = $0
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$24
	$7 = [0]
	
.LOOP $label$30:
	$11 = *($6)
	if ( ((int_32)$11 >= (int_32)int_32(($10 << [24]) >> [24])) ){ goto $label$31 }
	$0 = $7
	
.LOOP $label$34:
	*((($9 = ($4 + $0)) + $12)) = $10
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$33 }
	$0 = ($0 + [-1])
	$10 = *(($9 + [1]))
	if ( ((int_32)$11 < (int_32)$10) ){ goto $label$34 }
	$0 = (($4 + $0) + $12)
	goto $label$32 
	
.LABEL $label$33
	$0 = $4
	
.LABEL $label$32
	*($0) = $11
	
.LABEL $label$31
	$0 = ($6 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	$7 = ($7 + [1])
	$10 = *($6)
	$6 = $0
	goto $label$30 
	
.LABEL $label$18
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 >= (int_32)$9) ){ goto $label$16 }
	
.LABEL $label$17
	$10 = $6
	$3 = ($4 + [1])
	if ( ($3 <= $10) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$0 = $5
	
.LOOP $label$35:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$14 }
	$10 = *($0)
	$11 = ($0 + [-1])
	$0 = $11
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$35 }
	*($4) = $10
	*(($10 = ($11 + [1]))) = $3
	$8 = ($8 + [1])
	$3 = ($4 + [1])
	if ( ((uint_32)$3 >= (uint_32)$10) ){ goto $label$13 }
	
.LABEL $label$15
	
.LOOP $label$36:
	$0 = ($3 + [-1])
	$9 = *($7)
	
.LOOP $label$37:
	$0 = ($0 + [1])
	$11 = *($0)
	if ( ((int_32)$11 < (int_32)$9) ){ goto $label$37 }
	$3 = ($0 + [1])
	
.LOOP $label$38:
	$10 = ($10 + [-1])
	$12 = *($10)
	if ( ((int_32)$12 >= (int_32)$9) ){ goto $label$38 }
	if ( ((uint_32)$0 > (uint_32)$10) ){ goto $label$39 }
	*($0) = $12
	*($10) = $11
	$7 = ( $10 ? $7 : ((int_32)$7 == (int_32)$0) )
	$8 = ($8 + [1])
	goto $label$36 
	
.LABEL $label$39
	$3 = $0
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$12 = ($4 + [1])
	$9 = *($6)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$40 }
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$3 }
	$12 = ($4 + [2])
	
.LOOP $label$42:
	$0 = ($12 + [-1])
	$10 = *($0)
	if ( ((int_32)$3 < (int_32)$10) ){ goto $label$41 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$42 }
	goto $label$3 
	
.LABEL $label$41
	*($0) = $9
	*($6) = $10
	
.LABEL $label$40
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$43:
	$0 = ($12 + [-1])
	$10 = *($4)
	
.LOOP $label$44:
	$0 = ($0 + [1])
	$9 = *($0)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$44 }
	$12 = ($0 + [1])
	
.LOOP $label$45:
	$6 = ($6 + [-1])
	$11 = *($6)
	if ( ((int_32)$10 < (int_32)$11) ){ goto $label$45 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$46 }
	*($0) = $11
	*($6) = $9
	goto $label$43 
	
.LABEL $label$46
	$10 = ([4] & [7])
	if ( ((uint_32)$10 > (uint_32)[4]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$13
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$11 }
	
.LABEL $label$12
	$10 = *($3)
	$0 = *($7)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$11 }
	*($3) = $0
	*($7) = $10
	if ( ($8 + [1]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( $8 ){ goto $label$9 }
	
.LABEL $label$10
	$10 = CALL $32($4, $3, $2)
	$0 = ($3 + [1])
	if ( CALL $32($0, $1, $2) ){ goto $label$6 }
	if ( $10 ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $30($4, $3, $2)
	$0 = ($3 + [1])
	
.LABEL $label$8
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	goto $label$7 
	
.LABEL $label$6
	$1 = ( $1 ? $3 : $10 )
	$0 = $4
	$10 = (( [1] ? [2] : $10 ) & [7])
	if ( ((uint_32)$10 <= (uint_32)[4]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	goto $label$3 
	
.LABEL $label$59
	$9 = *($4)
	$0 = ($1 + [-1])
	$10 = *($0)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$3 }
	*($4) = $10
	*($0) = $9
	return 
	
.LABEL $label$58
	$9 = ($1 + [-1])
	$0 = *($9)
	$11 = *($4)
	$10 = *($4 + [1])
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$55 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$53 }
	*($4) = $0
	*($9) = $11
	return 
	
.LABEL $label$57
	CALL $31($4, ($4 + [1]), ($4 + [2]), ($4 + [3]), ($1 + [-1]), $2)
	return 
	
.LABEL $label$56
	$11 = ($1 + [-1])
	$10 = *($4 + [2])
	$9 = *($4)
	$0 = *($4 + [1])
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$54 }
	if ( ((int_32)$10 >= (int_32)$0) ){ goto $label$52 }
	*($4) = $10
	*(($4 + [2])) = $9
	goto $label$51 
	
.LABEL $label$55
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*(($11 = ($4 + [1]))) = $0
	*($9) = $10
	$10 = *($4)
	$0 = *($11)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*($4) = $0
	*($11) = $10
	return 
	
.LABEL $label$54
	if ( ((int_32)$10 >= (int_32)$0) ){ goto $label$50 }
	*(($4 + [2])) = $0
	*(($12 = ($4 + [1]))) = $10
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$48 }
	*($4) = $10
	*($12) = $9
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$53
	*($4) = $10
	*(($0 = ($4 + [1]))) = $11
	$10 = *($9)
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$3 }
	*($0) = $10
	*($9) = $11
	return 
	
.LABEL $label$52
	*($4) = $0
	*(($0 = ($4 + [1]))) = $9
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$49 }
	*(($4 + [2])) = $9
	*($0) = $10
	
.LABEL $label$51
	$0 = $9
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$50
	$0 = $10
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$49
	$0 = $10
	
.LABEL $label$48
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$47
	*(($10 = ($4 + [2]))) = $12
	*($11) = $0
	$9 = ($4 + [1])
	$11 = *($9)
	$0 = *($10)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$3 }
	*($10) = $11
	*($9) = $0
	$10 = *($4)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*($4) = $0
	*(($4 + [1])) = $10
	return 
	
.LABEL $label$4
	if ( (([1] << $10) & [21]) ){ goto $label$1 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	CALL $30(($3 + [1]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$5 }
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$4 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$2 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((int_32)$6 >= (int_32)$8) ){ goto $label$1 }
	*($0) = $6
	*($1) = $8
	$7 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$1 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$3
	$7 = $8
	goto $label$1 
	
.LABEL $label$2
	$7 = $6
	
.LABEL $label$1
	$6 = *($3)
	if ( ((int_32)$6 >= (int_32)int_32(($7 << [24]) >> [24])) ){ goto $label$10 }
	*($2) = $6
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$9 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$8 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	
.LABEL $label$10
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$7
	return $9
	
.LABEL $label$6
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$13 }
	*($2) = $7
	*($3) = $6
	$3 = *($1)
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$3) ){ goto $label$12 }
	*($1) = $7
	*($2) = $3
	$7 = *($0)
	$2 = *($1)
	if ( ((int_32)$2 >= (int_32)$7) ){ goto $label$11 }
	*($0) = $2
	*($1) = $7
	return ($9 + [4])
	
.LABEL $label$13
	return ($9 + [1])
	
.LABEL $label$12
	return ($9 + [2])
	
.LABEL $label$11
	return ($9 + [3])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}