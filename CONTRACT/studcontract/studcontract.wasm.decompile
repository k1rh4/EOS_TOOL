(data (i32.const 4) "\d0g\00\00")
(data (i32.const 16) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 80) "user does not exist\00")
(data (i32.const 112) "integer overflow adding withdraw balance\00")
(data (i32.const 160) "cannot pass end iterator to modify\00")
(data (i32.const 208) "object passed to modify is not in multi_index\00")
(data (i32.const 256) "cannot modify objects in table of another contract\00")
(data (i32.const 320) "updater cannot change primary key when modifying an object\00")
(data (i32.const 384) "write\00")
(data (i32.const 400) "active\00")
(data (i32.const 416) "eosio.token\00")
(data (i32.const 432) "transfer\00")
(data (i32.const 464) "error reading iterator\00")
(data (i32.const 496) "read\00")
(data (i32.const 512) "transfer not from eosio.token\00")
(data (i32.const 544) "transfer not made to this contract\00")
(data (i32.const 592) "quantity must be greater than minimum amount\00")
(data (i32.const 640) "invalid quantity\00")
(data (i32.const 672) "cannot create objects in table of another contract\00")
(data (i32.const 736) "integer overflow adding user balance total\00")
(data (i32.const 784) "integer overflow adding user balance balance\00")
(data (i32.const 832) "cannot increment end iterator\00")
(data (i32.const 864) "integer overflow adding team reward total\00")
(data (i32.const 912) "integer overflow adding team reward balance\00")
(data (i32.const 960) "integer underflow subtracting purchase amount\00")
(data (i32.const 1008) "integer overflow adding price increment\00")
(data (i32.const 1056) "integer overflow adding new keys\00")
(data (i32.const 1104) "integer overflow adding player amount\00")
(data (i32.const 1152) "integer overflow adding counter balance\00")
(data (i32.const 1200) "integer overflow adding pot\00")
(data (i32.const 1232) "integer overflow adding sold_keys\00")
(data (i32.const 1280) "integer overflow adding winner total\00")
(data (i32.const 1328) "integer overflow adding winner balance\00")
(data (i32.const 1376) "cannot pass end iterator to erase\00")
(data (i32.const 1424) "object passed to erase is not in multi_index\00")
(data (i32.const 1472) "cannot erase objects in table of another contract\00")
(data (i32.const 1536) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1600) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1664) "invalid symbol name\00")
(data (i32.const 1696) "get\00")
(data (i32.const 10096) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$12 (param i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z9price_incy" (func $5))
(export "_ZN14grab_the_bench8withdrawEyN5eosio5assetE" (func $6))
(export "_ZN14grab_the_bench2onERKN5eosio8currency8transferEy" (func $15))
(export "_ZN14grab_the_bench4pingEv" (func $16))
(export "_ZN14grab_the_bench2hiEy" (func $26))
(export "_ZN14grab_the_bench5eraseEv" (func $27))
(export "_ZN14grab_the_bench8maintainEv" (func $29))
(export "_ZN14grab_the_bench5applyEyy" (func $30))
(export "apply" (func $37))
(export "malloc" (func $40))
(export "free" (func $43))
(export "memcmp" (func $49))
(export "strlen" (func $50))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $51 $16 $26 $29 $27)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [464])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $44([40])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [496])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [496])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [496])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $19(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $45($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $44(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $48($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $45($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $45($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [672])
	$4 = CALL $44([80])
	$5 = CALL current_time()
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)5000
	*($4 + [64]) = $1
	$5 = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($4 + [16]) = $5
	*($4 + [24]) = ((int_64)$5 + (int_64)28800)
	$3 = *($3)
	*($4) = *($3)
	*($4 + [8]) = *($3)
	*($8 + [88]) = (($8 + [16]) + [64])
	*($8 + [84]) = ($8 + [16])
	*($8 + [80]) = ($8 + [16])
	CALL $21(($8 + [80]), $4)
	$5 = *($4)
	*($4 + [68]) = CALL db_store_i64(*($1 + [8]), (int_64)4986958866982895616, $2, $5, ($8 + [16]), [64])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [80]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [68])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [80]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $23(($1 + [24]), ($8 + [80]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $45($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [96])
}

void .FUNC _ZN14grab_the_bench8maintainEv (int_32 $0)
{
	CALL require_auth(*($0 + [8]))
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1424])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1472])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1536])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $45($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $45($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	float_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [208])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [256])
	$4 = *($1)
	$5 = *(*($3))
	if ( (((float_64)$5 < (float_64)(float_64)1) | ((float_64)$5 != (float_64)$5)) ){ goto $label$1 }
	*($1 + [8]) = *(*($3 + [4]))
	$7 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [16]) = $7
	$6 = ((int_64)*($1 + [24]) + (int_64)10)
	$7 = ((int_64)$7 + (int_64)28800)
	*($1 + [24]) = ( $7 ? $6 : (uint_64)($7 <= $6) )
	
.LABEL $label$1
	$7 = *($1 + [32])
	CALL eosio_assert(((uint_64)((int_64)*(*($3 + [8]) + [16]) + (int_64)$7) > (uint_64)$7), [1152])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3 + [8]) + [16]))
	$7 = *($1 + [40])
	CALL eosio_assert(((uint_64)(int_64))((int_64))(((int_64)*(*($3 + [8]) + [16]) + (int_64)$7) - *(*($3 + [12]))) - *(*($3 + [16]))) > (uint_64)$7), [1200])
	*($1 + [40]) = ((int_64))((int_64))(*(*($3 + [8]) + [16]) - *(*($3 + [12]))) - *(*($3 + [16]))) + (int_64)*($1 + [40]))
	$5 = *($1 + [48])
	CALL eosio_assert(((float_64)((float_64)$5 + (float_64)*(*($3))) > (float_64)$5), [1232])
	*($1 + [48]) = ((float_64)*(*($3)) + (float_64)*($1 + [48]))
	*($1 + [56]) = *(*($3 + [20]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [320])
	$9 = $9
	$3 = ($9 + [-64])
	*([0] + [4]) = $3
	*($8 + [4]) = $3
	*($8) = $3
	*($8 + [8]) = $9
	CALL $21($8, $1)
	CALL db_update_i64(*($1 + [68]), $2, $3, [64])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $44(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $48($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $45($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $45($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1424])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1472])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1536])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $45($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $45($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [1424])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1472])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1536])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $45($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $45($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC _ZN14grab_the_bench5eraseEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL require_auth(*($0 + [8]))
	$4 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$1 = ($0 + [96])
	$3 = CALL $17($1, $4)
	
.LOOP $label$2:
	CALL eosio_assert([1], [1376])
	CALL eosio_assert([1], [832])
	$4 = [0]
	$2 = CALL db_next_i64(*($3 + [68]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $17($1, $2)
	
.LABEL $label$3
	CALL $24($1, $3)
	$3 = $4
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$1 = ($0 + [56])
	$3 = CALL $18($1, $4)
	
.LOOP $label$5:
	CALL eosio_assert([1], [1376])
	CALL eosio_assert([1], [832])
	$4 = [0]
	$2 = CALL db_next_i64(*($3 + [28]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $18($1, $2)
	
.LABEL $label$6
	CALL $25($1, $3)
	$3 = $4
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$4
	$4 = CALL db_lowerbound_i64(*($0 + [16]), *(($0 + [24])), (int_64)-3020380869172259840, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$1 = ($0 + [16])
	$3 = CALL $7($1, $4)
	
.LOOP $label$8:
	CALL eosio_assert([1], [1376])
	CALL eosio_assert([1], [832])
	$4 = [0]
	$2 = CALL db_next_i64(*($3 + [28]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $7($1, $2)
	
.LABEL $label$9
	CALL $28($1, $3)
	$3 = $4
	if ( $4 ){ goto $label$8 }
	
.LABEL $label$7
	*([0] + [4]) = ($5 + [16])
}

void .FUNC _ZN14grab_the_bench2hiEy (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $48 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10084])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9892]
	$1 = (((int_32)$2 * (int_32)[12]) + [9892])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $42 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10182]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10184])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10182]) = [1]
	$7 = ($7 << [16])
	*([0] + [10184]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10184])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10184]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10182]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10182]) = [1]
	$3 = ($3 << [16])
	*([0] + [10184]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10184])
	
.LABEL $label$8
	*([0] + [10184]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $42($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10096])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $41([1700], $0)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $44(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $45($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $46 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $45 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10188])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $51 ()
{
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $44($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $48($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $45($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $13(*($1), ($0 + [32]))
}

void .FUNC _ZN14grab_the_bench8withdrawEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [16])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020380869172259840, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $7($6, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [16])
	
.LABEL $label$3
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [80])
	$10 = *($2)
	CALL eosio_assert(((uint_64)((int_64)*($8 + [16]) + (int_64)$10) > (uint_64)$10), [112])
	*($2) = ((int_64)$10 + (int_64)*($8 + [16]))
	$9 = *($0 + [8])
	CALL eosio_assert($7, [160])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [208])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [256])
	$10 = (int_64)0
	*($8 + [16]) = (int_64)0
	$12 = *($8)
	CALL eosio_assert([1], [320])
	CALL eosio_assert([1], [384])
	CALL memcpy(($15 + [16]), $8, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy((($15 + [16]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy((($15 + [16]) + [16]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), $9, ($15 + [16]), [24])
	$8 = ($0 + [32])
	if ( (uint_64)($12 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = *(($0 + [8]))
	$9 = (int_64)59
	$8 = [400]
	$11 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$11 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$6 = ($6 + [165])
	goto $label$9 
	
.LABEL $label$11
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$7
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$6 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [416]
	$13 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$17 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$6 = ($6 + [165])
	goto $label$15 
	
.LABEL $label$17
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$12 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [432]
	$14 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$23 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$6 = ($6 + [165])
	goto $label$21 
	
.LABEL $label$23
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$18 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$8 = CALL strlen([448])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$27 }
	*($15) = ($8 << [1])
	$6 = ($15 | [1])
	if ( $8 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$7 = (($8 + [16]) & [-16])
	$6 = CALL $44($7)
	*($15) = ($7 | [1])
	*($15 + [8]) = $6
	*($15 + [4]) = $8
	
.LABEL $label$26
	CALL memcpy($6, [448], $8)
	
.LABEL $label$25
	*(($6 + $8)) = [0]
	*((($15 + [16]) + [28])) = *(($2 + [12]))
	*((($15 + [16]) + [24])) = *(($2 + [8]))
	*((($15 + [16]) + [20])) = *(($2 + [4]))
	*($15 + [24]) = $1
	*($15 + [16]) = *(($0 + [8]))
	*($15 + [32]) = *($2)
	$8 = ($15 + [8])
	*(($15 + [56])) = *($8)
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($8) = [0]
	*($15 + [72]) = $13
	*($15 + [80]) = $14
	*(($8 = CALL $44([16]))) = $5
	*($8 + [8]) = $11
	*((($15 + [72]) + [32])) = [0]
	$6 = ($8 + [16])
	*((($15 + [72]) + [24])) = $6
	*((($15 + [72]) + [20])) = $6
	*($15 + [88]) = $8
	*($15 + [100]) = [0]
	*((($15 + [72]) + [36])) = [0]
	$8 = *($15 + [48])
	$6 = ( *((($15 + [16]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($6 + [32])
	$10 = (CASTING uint_64)(uint_32 $6)
	$6 = (($15 + [72]) + [28])
	
.LOOP $label$28:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$28 }
	if ( ($8 == 0) ){ goto $label$30 }
	CALL $8($6, $8)
	$6 = *(($15 + [104]))
	$8 = *(($15 + [100]))
	goto $label$29 
	
.LABEL $label$30
	$6 = [0]
	$8 = [0]
	
.LABEL $label$29
	*($15 + [132]) = $8
	*($15 + [128]) = $8
	*($15 + [136]) = $6
	*($15 + [112]) = ($15 + [128])
	*($15 + [120]) = ($15 + [16])
	CALL $9(($15 + [120]), ($15 + [112]))
	CALL $10(($15 + [128]), ($15 + [72]))
	$8 = *($15 + [128])
	CALL send_inline($8, (*($15 + [132]) - $8))
	$8 = *($15 + [128])
	if ( ($8 == 0) ){ goto $label$31 }
	*($15 + [132]) = $8
	CALL $45($8)
	
.LABEL $label$31
	$8 = *($15 + [100])
	if ( ($8 == 0) ){ goto $label$32 }
	*(($15 + [104])) = $8
	CALL $45($8)
	
.LABEL $label$32
	$8 = *($15 + [88])
	if ( ($8 == 0) ){ goto $label$33 }
	*(($15 + [92])) = $8
	CALL $45($8)
	
.LABEL $label$33
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$34 }
	CALL $45(*(($15 + [56])))
	
.LABEL $label$34
	if ( ((*($15) & [1]) == 0) ){ goto $label$35 }
	CALL $45(*(($15 + [8])))
	
.LABEL $label$35
	*([0] + [4]) = ($15 + [144])
	return (unreachable)
	
.LABEL $label$24
	CALL $46($15)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [464])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $44([40])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [496])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [496])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [496])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $14(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $45($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _Z9price_incy (int_64 $0)
{
	return (int_64)1
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $44(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $48($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $45($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $45($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN14grab_the_bench2onERKN5eosio8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	float_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$26 = (*([0] + [4]) - [112])
	*([0] + [4]) = $26
	CALL _ZN14grab_the_bench4pingEv($0)
	if ( ((int_64)*($1) == (int_64)*($0 + [8])) ){ goto $label$1 }
	$9 = (int_64)0
	$17 = (int_64)59
	$24 = [416]
	$18 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$7 }
	$12 = *($24)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$12 = ($12 + [165])
	goto $label$5 
	
.LABEL $label$7
	$19 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$3
	$24 = ($24 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$18 == (int_64)$2), [512])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*(($0 + [8]))), [544])
	$24 = ($1 + [16])
	$9 = *($1 + [16])
	if ( ((int_64)$9 != (int_64)1) ){ goto $label$8 }
	*(($12 = (($26 + [64]) + [12]))) = *(($24 + [12]))
	*(($25 = (($26 + [64]) + [8]))) = *(($24 + [8]))
	*($26 + [64]) = *($24)
	*($26 + [68]) = *(($24 + [4]))
	$9 = *($1)
	*((($26 + [8]) + [12])) = *($12)
	*((($26 + [8]) + [8])) = *($25)
	*($26 + [12]) = *($26 + [68])
	*($26 + [8]) = *($26 + [64])
	CALL _ZN14grab_the_bench8withdrawEyN5eosio5assetE($0, $9, ($26 + [8]))
	goto $label$1 
	
.LABEL $label$8
	CALL eosio_assert(((uint_64)$9 > (uint_64)(int_64)4999), [592])
	$20 = [0]
	$12 = [0]
	if ( ((uint_64)((int_64)*($24) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$9 = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	$24 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$12 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$12 = [0]
	
.LABEL $label$9
	CALL eosio_assert($12, [640])
	*($26 + [56]) = *($1)
	$3 = ($0 + [96])
	$19 = *(($1 + [16]))
	$9 = (int_64)0
	$24 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$14 }
	$20 = CALL $17($3, $24)
	
.LABEL $label$14
	*($26 + [48]) = *($20 + [56])
	$4 = ($0 + [56])
	$24 = ($0 + [64])
	$12 = CALL db_lowerbound_i64(*($0 + [56]), *($24), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$15 }
	CALL $18($4, $12)
	$9 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $19) * (float_64)(float_64)0.45))
	
.LABEL $label$15
	*($26 + [40]) = $9
	$24 = CALL db_lowerbound_i64(*($4), *($24), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$24 <= (int_32)[-1]) ){ goto $label$17 }
	$21 = ($0 + [40])
	$7 = ($0 + [44])
	$22 = ($0 + [16])
	$23 = CALL $18($4, $24)
	$6 = (($26 + [80]) + [16])
	$5 = (($26 + [80]) | [8])
	$13 = ($20 + [48])
	$15 = ($0 + [24])
	$16 = ($0 + [32])
	
.LOOP $label$18:
	$8 = ((float_64)*($23 + [8]) / (float_64)*($13))
	$14 = (CASTING float_64)(uint_64 $9)
	$9 = *($23)
	$10 = *($21)
	$25 = *($7)
	if ( ((int_32)$25 == (int_32)$10) ){ goto $label$19 }
	$24 = ($25 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$20:
	if ( ((int_64)*(*($24)) == (int_64)$9) ){ goto $label$19 }
	$25 = $24
	$12 = ($24 + [-24])
	$24 = $12
	if ( ((int_32)($12 + $11) != (int_32)[-24]) ){ goto $label$20 }
	
.LABEL $label$19
	$8 = ((float_64)$14 * (float_64)$8)
	if ( ((int_32)$25 == (int_32)$10) ){ goto $label$23 }
	$24 = *(($25 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [16])
	if ( $24 ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	$24 = CALL db_find_i64(*(($0 + [16])), *($15), (int_64)-3020380869172259840, $9)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$22 }
	$24 = CALL $7($22, $24)
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [16])
	goto $label$21 
	
.LABEL $label$22
	$17 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*($22) == (int_64)CALL $fimport$2()), [672])
	*(($24 = CALL $44([40])) + [16]) = (int_64)0
	*($24 + [8]) = (int_64)0
	*($24 + [24]) = $22
	*($24) = *($23)
	CALL eosio_assert([1], [384])
	CALL memcpy(($26 + [80]), $24, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($5, ($24 + [8]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($6, ($24 + [16]), [8])
	$9 = *($24)
	$25 = CALL db_store_i64(*($15), (int_64)-3020380869172259840, $17, $9, ($26 + [80]), [24])
	*($24 + [28]) = $25
	if ( (uint_64)($9 <= *($16)) ){ goto $label$24 }
	*($16) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*($26 + [32]) = $24
	$9 = *($24)
	*($26 + [80]) = $9
	*($26 + [24]) = $25
	$12 = *(($0 + [44]))
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [48]))) ){ goto $label$26 }
	*($12 + [8]) = $9
	*($12 + [16]) = $25
	*($26 + [32]) = [0]
	*($12) = $24
	*($7) = ($12 + [24])
	goto $label$25 
	
.LABEL $label$26
	CALL $14($21, ($26 + [32]), ($26 + [80]), ($26 + [24]))
	
.LABEL $label$25
	$12 = *($26 + [32])
	*($26 + [32]) = [0]
	if ( ($12 == 0) ){ goto $label$21 }
	CALL $45($12)
	
.LABEL $label$21
	$17 = *(($0 + [8]))
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [160])
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [208])
	CALL eosio_assert(((int_64)*($22) == (int_64)CALL $fimport$2()), [256])
	$9 = *($24)
	$14 = (CASTING float_64)(uint_64 *($24 + [8]))
	CALL eosio_assert(((float_64)((float_64)$8 + (float_64)$14) > (float_64)$14), [736])
	*($24 + [8]) = (Rounds 0)(((float_64)$8 + (float_64)(CASTING float_64)(uint_64 *($24 + [8]))))
	$14 = (CASTING float_64)(uint_64 *($24 + [16]))
	CALL eosio_assert(((float_64)((float_64)$8 + (float_64)$14) > (float_64)$14), [784])
	*($24 + [16]) = (Rounds 0)(((float_64)$8 + (float_64)(CASTING float_64)(uint_64 *($24 + [16]))))
	CALL eosio_assert(((int_64)$9 == (int_64)*($24)), [320])
	CALL eosio_assert([1], [384])
	CALL memcpy(($26 + [80]), $24, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($5, ($24 + [8]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($6, ($24 + [16]), [8])
	CALL db_update_i64(*($24 + [28]), $17, ($26 + [80]), [24])
	if ( (uint_64)($9 <= *($16)) ){ goto $label$27 }
	*($16) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	CALL eosio_assert([1], [832])
	$24 = CALL db_next_i64(*($23 + [28]), ($26 + [80]))
	if ( ((int_32)$24 <= (int_32)[-1]) ){ goto $label$16 }
	$23 = CALL $18($4, $24)
	$9 = *($26 + [40])
	goto $label$18 
	
.LABEL $label$17
	$21 = ($0 + [40])
	$7 = ($0 + [44])
	$22 = ($0 + [16])
	
.LABEL $label$16
	*($26 + [32]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $19) * (float_64)(float_64)0.05))
	$23 = *($21)
	$25 = *($7)
	if ( ((int_32)$25 == (int_32)$23) ){ goto $label$28 }
	$24 = ($25 + [-24])
	$11 = ([0] - $23)
	
.LOOP $label$29:
	if ( ((int_64)*(*($24)) == (int_64)6138860560169325968) ){ goto $label$28 }
	$25 = $24
	$12 = ($24 + [-24])
	$24 = $12
	if ( ((int_32)($12 + $11) != (int_32)[-24]) ){ goto $label$29 }
	
.LABEL $label$28
	if ( ((int_32)$25 == (int_32)$23) ){ goto $label$33 }
	$24 = *(($25 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [16])
	if ( $24 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$24 = CALL db_find_i64(*($0 + [16]), *(($0 + [24])), (int_64)-3020380869172259840, (int_64)6138860560169325968)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$31 }
	$24 = CALL $7($22, $24)
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [16])
	
.LABEL $label$32
	$12 = ($0 + [32])
	$10 = ($26 + [96])
	$16 = (($26 + [80]) | [8])
	$23 = ($26 + [80])
	goto $label$30 
	
.LABEL $label$31
	$17 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*($0 + [16]) == (int_64)CALL $fimport$2()), [672])
	*(($24 = CALL $44([40])) + [16]) = (int_64)0
	*($24 + [8]) = (int_64)0
	*($24 + [24]) = $22
	*($24) = (int_64)6138860560169325968
	CALL eosio_assert([1], [384])
	CALL memcpy(($26 + [80]), $24, [8])
	CALL eosio_assert([1], [384])
	$16 = (($26 + [80]) | [8])
	CALL memcpy($16, ($24 + [8]), [8])
	CALL eosio_assert([1], [384])
	$10 = (($26 + [80]) + [16])
	CALL memcpy($10, ($24 + [16]), [8])
	$9 = *($24)
	$11 = CALL db_store_i64(*(($0 + [24])), (int_64)-3020380869172259840, $17, $9, ($26 + [80]), [24])
	*($24 + [28]) = $11
	$12 = ($0 + [32])
	if ( (uint_64)($9 <= *($12)) ){ goto $label$34 }
	*($12) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$34
	*($26 + [24]) = $24
	$9 = *($24)
	*($26 + [80]) = $9
	*($26 + [108]) = $11
	$25 = *(($0 + [44]))
	if ( ((uint_32)$25 >= (uint_32)*(($0 + [48]))) ){ goto $label$36 }
	*($25 + [8]) = $9
	*($25 + [16]) = $11
	*($26 + [24]) = [0]
	*($25) = $24
	*($7) = ($25 + [24])
	goto $label$35 
	
.LABEL $label$36
	CALL $14(($0 + [40]), ($26 + [24]), ($26 + [80]), ($26 + [108]))
	
.LABEL $label$35
	$25 = *($26 + [24])
	*($26 + [24]) = [0]
	if ( ($25 == 0) ){ goto $label$37 }
	CALL $45($25)
	
.LABEL $label$37
	$23 = ($26 + [80])
	
.LABEL $label$30
	$18 = *(($0 + [8]))
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [160])
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$22), [208])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [256])
	$9 = *($24)
	$2 = *($24 + [8])
	$17 = *($26 + [32])
	CALL eosio_assert(((uint_64)((int_64)$17 + (int_64)$2) > (uint_64)$2), [864])
	*($24 + [8]) = ((int_64)$17 + (int_64)*($24 + [8]))
	$2 = *($24 + [16])
	CALL eosio_assert(((uint_64)((int_64)$17 + (int_64)$2) > (uint_64)$2), [912])
	*($24 + [16]) = ((int_64)$17 + (int_64)*($24 + [16]))
	CALL eosio_assert(((int_64)$9 == (int_64)*($24)), [320])
	CALL eosio_assert([1], [384])
	CALL memcpy($23, $24, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($16, ($24 + [8]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($10, ($24 + [16]), [8])
	CALL db_update_i64(*($24 + [28]), $18, $23, [24])
	if ( (uint_64)($9 <= *(($0 + [32]))) ){ goto $label$38 }
	*($12) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$38
	$9 = *($26 + [56])
	$22 = *(($0 + [80]))
	$25 = *(($0 + [84]))
	if ( ((int_32)$25 == (int_32)$22) ){ goto $label$39 }
	$24 = ($25 + [-24])
	$11 = ([0] - $22)
	
.LOOP $label$40:
	if ( ((int_64)*(*($24)) == (int_64)$9) ){ goto $label$39 }
	$25 = $24
	$12 = ($24 + [-24])
	$24 = $12
	if ( ((int_32)($12 + $11) != (int_32)[-24]) ){ goto $label$40 }
	
.LABEL $label$39
	if ( ((int_32)$25 == (int_32)$22) ){ goto $label$43 }
	$24 = *(($25 + [-24]))
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$4), [16])
	if ( $24 ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$43
	$24 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030912129153084416, $9)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$42 }
	$24 = CALL $18($4, $24)
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$4), [16])
	goto $label$41 
	
.LABEL $label$42
	$17 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [672])
	*(($24 = CALL $44([40])) + [16]) = (int_64)0
	*($24 + [8]) = (int_64)0
	*($24 + [24]) = $4
	*($24) = *($26 + [56])
	CALL eosio_assert([1], [384])
	CALL memcpy($23, $24, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($16, ($24 + [8]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($10, ($24 + [16]), [8])
	$9 = *($24)
	$25 = CALL db_store_i64(*(($0 + [64])), (int_64)-6030912129153084416, $17, $9, $23, [24])
	*($24 + [28]) = $25
	$12 = ($0 + [72])
	if ( (uint_64)($9 <= *($12)) ){ goto $label$44 }
	*($12) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$44
	*($26 + [24]) = $24
	$9 = *($24)
	*($26 + [80]) = $9
	*($26 + [108]) = $25
	$11 = ($0 + [84])
	$12 = *($11)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [88]))) ){ goto $label$46 }
	*($12 + [8]) = $9
	*($12 + [16]) = $25
	*($26 + [24]) = [0]
	*($12) = $24
	*($11) = ($12 + [24])
	goto $label$45 
	
.LABEL $label$46
	CALL $19(($0 + [80]), ($26 + [24]), ($26 + [80]), ($26 + [108]))
	
.LABEL $label$45
	$12 = *($26 + [24])
	*($26 + [24]) = [0]
	if ( ($12 == 0) ){ goto $label$41 }
	CALL $45($12)
	
.LABEL $label$41
	*($26 + [24]) = (int_64)0
	$8 = (float_64)0
	$9 = *($26 + [48])
	if ( ((uint_64)$19 <= (uint_64)$9) ){ goto $label$47 }
	$8 = (float_64)0
	
.LOOP $label$48:
	*($26 + [24]) = ((float_64)$8 + (float_64)(float_64)1)
	CALL eosio_assert((uint_64)((int_64))($19 - $9) <= $19), [960])
	$17 = *($26 + [48])
	CALL eosio_assert(((int_64)$17 != (int_64)-1), [1008])
	$9 = ((int_64)*($26 + [48]) + (int_64)1)
	*($26 + [48]) = $9
	$8 = *($26 + [24])
	$19 = (int_64)
	if ( ((uint_64)$19($19 - $17)) > (uint_64)$9) ){ goto $label$48 }
	
.LABEL $label$47
	$8 = ((float_64)((float_64)(CASTING float_64)(int_64 $19) / (float_64)(CASTING float_64)(uint_64 $9)) + (float_64)$8)
	*($26 + [24]) = $8
	CALL eosio_assert(((int_64)$9 != (int_64)-1), [1008])
	*($26 + [48]) = ((int_64)$9 + (int_64)1)
	$12 = ($0 + [8])
	$19 = *($12)
	CALL eosio_assert(((int_32)$24 != (int_32)[0]), [160])
	CALL eosio_assert(((int_32)*($24 + [24]) == (int_32)$4), [208])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [256])
	$9 = *($24)
	$14 = *($24 + [8])
	CALL eosio_assert(((float_64)((float_64)$14 + (float_64)$8) > (float_64)$14), [1056])
	*($24 + [8]) = ((float_64)$8 + (float_64)*($24 + [8]))
	$17 = *($24 + [16])
	CALL eosio_assert(((uint_64)((int_64)*($1 + [16]) + (int_64)$17) > (uint_64)$17), [1104])
	*($24 + [16]) = ((int_64)*($24 + [16]) + (int_64)*($1 + [16]))
	CALL eosio_assert(((int_64)$9 == (int_64)*($24)), [320])
	CALL eosio_assert([1], [384])
	CALL memcpy($23, $24, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($16, ($24 + [8]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($10, ($24 + [16]), [8])
	CALL db_update_i64(*($24 + [28]), $19, $23, [24])
	$24 = ($0 + [72])
	if ( (uint_64)($9 <= *($24)) ){ goto $label$49 }
	*($24) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$49
	$9 = *($12)
	*($26 + [88]) = $1
	*($26 + [84]) = ($26 + [56])
	*($26 + [80]) = ($26 + [24])
	*($26 + [92]) = ($26 + [40])
	*($26 + [96]) = ($26 + [32])
	*($26 + [100]) = ($26 + [48])
	CALL eosio_assert(((int_32)$20 != (int_32)[0]), [160])
	CALL $20($3, $20, $9, ($26 + [80]))
	
.LABEL $label$1
	*([0] + [4]) = ($26 + [112])
}

void .FUNC _ZN14grab_the_bench4pingEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [96])
	*([0] + [4]) = $15
	$1 = ($0 + [96])
	$10 = [0]
	$14 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $17($1, $14)
	
.LABEL $label$1
	if ( ((uint_64)*($10 + [24]) > (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$2 }
	$2 = *($10 + [8])
	$3 = *(($0 + [40]))
	$4 = *(($0 + [44]))
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	$14 = ($4 + [-24])
	$5 = ([0] - $3)
	
.LOOP $label$4:
	if ( ((int_64)*(*($14)) == (int_64)$2) ){ goto $label$3 }
	$4 = $14
	$13 = ($14 + [-24])
	$14 = $13
	if ( ((int_32)($13 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$13 = ($0 + [16])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$8 }
	$14 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$13), [16])
	if ( $14 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$14 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020380869172259840, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$6 }
	$14 = CALL $7($13, $14)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$13), [16])
	
.LABEL $label$7
	$5 = ($0 + [32])
	$3 = ($0 + [8])
	$11 = ($15 + [32])
	$12 = (($15 + [16]) | [8])
	$4 = ($15 + [16])
	goto $label$5 
	
.LABEL $label$6
	$7 = *($0 + [8])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [672])
	*(($14 = CALL $44([40])) + [16]) = (int_64)0
	*($14 + [8]) = (int_64)0
	*($14 + [24]) = $13
	*($14) = $2
	CALL eosio_assert([1], [384])
	CALL memcpy(($15 + [16]), $14, [8])
	CALL eosio_assert([1], [384])
	$12 = (($15 + [16]) | [8])
	CALL memcpy($12, ($14 + [8]), [8])
	CALL eosio_assert([1], [384])
	$11 = (($15 + [16]) + [16])
	CALL memcpy($11, ($14 + [16]), [8])
	$2 = *($14)
	$3 = CALL db_store_i64(*(($0 + [24])), (int_64)-3020380869172259840, $7, $2, ($15 + [16]), [24])
	*($14 + [28]) = $3
	$5 = ($0 + [32])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$9 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($15 + [80]) = $14
	$2 = *($14)
	*($15 + [16]) = $2
	*($15 + [12]) = $3
	$6 = ($0 + [44])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [48]))) ){ goto $label$11 }
	*($4 + [8]) = $2
	*($4 + [16]) = $3
	*($15 + [80]) = [0]
	*($4) = $14
	*($6) = ($4 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $14(($0 + [40]), ($15 + [80]), ($15 + [16]), ($15 + [12]))
	
.LABEL $label$10
	$4 = *($15 + [80])
	*($15 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $45($4)
	
.LABEL $label$12
	$3 = ($0 + [8])
	$4 = ($15 + [16])
	
.LABEL $label$5
	$7 = *($3)
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [160])
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$13), [208])
	CALL eosio_assert(((int_64)*($13) == (int_64)CALL $fimport$2()), [256])
	$2 = *($14)
	$8 = *($14 + [8])
	CALL eosio_assert(((uint_64)((int_64)*($10 + [40]) + (int_64)$8) > (uint_64)$8), [1280])
	$8 = *($10 + [40])
	*($14 + [8]) = ((int_64)*($14 + [8]) + (int_64)$8)
	$9 = *($14 + [16])
	CALL eosio_assert(((uint_64)((int_64)$8 + (int_64)$9) > (uint_64)$9), [1328])
	*($14 + [16]) = ((int_64)*($14 + [16]) + (int_64)*($10 + [40]))
	CALL eosio_assert(((int_64)$2 == (int_64)*($14)), [320])
	CALL eosio_assert([1], [384])
	CALL memcpy($4, $14, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($12, ($14 + [8]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy($11, ($14 + [16]), [8])
	CALL db_update_i64(*($14 + [28]), $7, $4, [24])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$13 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$14 = CALL db_lowerbound_i64(*(($0 + [96])), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$14 }
	$13 = CALL $17($1, $14)
	
.LOOP $label$15:
	CALL eosio_assert([1], [1376])
	CALL eosio_assert([1], [832])
	$14 = [0]
	$4 = CALL db_next_i64(*($13 + [68]), ($15 + [16]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$16 }
	$14 = CALL $17($1, $4)
	
.LABEL $label$16
	CALL $24($1, $13)
	$13 = $14
	if ( $14 ){ goto $label$15 }
	
.LABEL $label$14
	$14 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$17 }
	$4 = ($0 + [56])
	$13 = CALL $18($4, $14)
	
.LOOP $label$18:
	CALL eosio_assert([1], [1376])
	CALL eosio_assert([1], [832])
	$14 = [0]
	$5 = CALL db_next_i64(*($13 + [28]), ($15 + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$19 }
	$14 = CALL $18($4, $5)
	
.LABEL $label$19
	CALL $25($4, $13)
	$13 = $14
	if ( $14 ){ goto $label$18 }
	
.LABEL $label$17
	$13 = ($0 + [8])
	$7 = *($13)
	CALL eosio_assert(((int_64)*(($0 + [96])) == (int_64)CALL $fimport$2()), [672])
	$14 = CALL $44([80])
	$2 = CALL current_time()
	*($14 + [32]) = (int_64)0
	*($14 + [40]) = (int_64)0
	*($14 + [48]) = (int_64)0
	*($14 + [56]) = (int_64)5000
	*($14 + [64]) = $1
	$2 = ((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($14 + [16]) = $2
	*($14 + [24]) = ((int_64)$2 + (int_64)28800)
	$2 = *($13)
	*($14) = $2
	*($14 + [8]) = $2
	*($15 + [88]) = (($15 + [16]) + [64])
	*($15 + [84]) = ($15 + [16])
	*($15 + [80]) = ($15 + [16])
	CALL $21(($15 + [80]), $14)
	$2 = *($14)
	$1 = CALL db_store_i64(*(($0 + [104])), (int_64)4986958866982895616, $7, $2, ($15 + [16]), [64])
	*($14 + [68]) = $1
	$13 = ($0 + [112])
	if ( (uint_64)($2 <= *($13)) ){ goto $label$20 }
	*($13) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*($15 + [80]) = $14
	$2 = *($14)
	*($15 + [16]) = $2
	*($15 + [12]) = $1
	$4 = ($0 + [124])
	$13 = *($4)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [128]))) ){ goto $label$22 }
	*($13 + [8]) = $2
	*($13 + [16]) = $1
	*($15 + [80]) = [0]
	*($13) = $14
	*($4) = ($13 + [24])
	goto $label$21 
	
.LABEL $label$22
	CALL $23(($0 + [120]), ($15 + [80]), ($15 + [16]), ($15 + [12]))
	
.LABEL $label$21
	$14 = *($15 + [80])
	*($15 + [80]) = [0]
	if ( ($14 == 0) ){ goto $label$2 }
	CALL $45($14)
	
.LABEL $label$2
	*([0] + [4]) = ($15 + [96])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $44([80])
	$5 = CALL current_time()
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)5000
	*($6 + [64]) = $0
	$5 = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($6 + [16]) = $5
	*($6 + [24]) = ((int_64)$5 + (int_64)28800)
	CALL $22(($8 + [32]), $6)
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $23(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $45($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $8($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [384])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [384])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $12(CALL $11($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [384])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [384])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [384])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [384])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [384])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [384])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [384])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1696])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $8($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [496])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	CALL _ZN14grab_the_bench5applyEyy(CALL $38(($3 + [8]), $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $35($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [496])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [496])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $36($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $47($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $44($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $47($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $45($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $46($7)
	return (unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [496])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN14grab_the_bench5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [432]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $31(($9 + [64]))
	CALL _ZN14grab_the_bench2onERKN5eosio8currency8transferEy($0, ($9 + [64]), $1)
	if ( ((*($9 + [96]) & [1]) == 0) ){ goto $label$7 }
	CALL $45(*(($9 + [104])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0 + [8]) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)6182744098496053247) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-7954134735498772480) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-6077959540857372672) ){ goto $label$7 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [1]
	*($9) = *($9 + [56])
	CALL $32($0, $9)
	goto $label$7 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)6182744098496053248) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)7746191359077253120) ){ goto $label$7 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [2]
	*($9 + [8 align=4]) = *($9 + [48])
	CALL $33($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [36]) = [0]
	*($9 + [32]) = [3]
	*($9 + [24 align=4]) = *($9 + [32])
	CALL $32($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [44]) = [0]
	*($9 + [40]) = [4]
	*($9 + [16 align=4]) = *($9 + [40])
	CALL $32($0, ($9 + [16]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1600])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1664])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $34($6, $0)
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $38 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($0) = $1
	*($0 + [8]) = $1
	*($0 + [16]) = $1
	*(($0 + [24])) = $1
	*(($0 + [32])) = (int_64)-1
	*(($0 + [40])) = [0]
	*($4 + [24]) = $1
	*(($0 + [44])) = [0]
	*(($0 + [48])) = [0]
	*($0 + [56]) = $1
	*(($0 + [64])) = $1
	*(($0 + [72])) = (int_64)-1
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*(($0 + [88])) = [0]
	*($0 + [96]) = $1
	*(($0 + [104])) = $1
	*(($0 + [112])) = (int_64)-1
	*(($0 + [120])) = [0]
	*(($0 + [124])) = [0]
	*(($0 + [128])) = [0]
	$2 = ($0 + [96])
	$3 = CALL db_lowerbound_i64($1, $1, (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $17($2, $3)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [16]) = ($4 + [24])
	CALL $39(($4 + [8]), $2, $1, ($4 + [16]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
	return $0
}