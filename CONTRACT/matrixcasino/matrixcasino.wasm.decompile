(data (i32.const 8192) "gametbl\00\00\01\02\04\07\03\06\05\00unexpected error in fixed_bytes constructor\00")
(data (i32.const 8253) "waittbl\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8347) "schedtbl\00")
(data (i32.const 8356) "herotbl\00")
(data (i32.const 8364) "winnertbl\00")
(data (i32.const 8374) "config\00stoull\00")
(data (i32.const 8388) "not found user\00")
(data (i32.const 8403) "fee < 0\00")
(data (i32.const 8411) "width > MAXSIZE, invalid\00")
(data (i32.const 8436) "height > MAXSIZE, invalid\00")
(data (i32.const 8462) "invalid status\00")
(data (i32.const 8477) "error height & width\00")
(data (i32.const 8498) "invalid st_game status\00%lu\00")
(data (i32.const 8525) "st_game not foud\00")
(data (i32.const 8542) "awards <= 0\00%llu\00")
(data (i32.const 8559) "sawards <= 0\00%f\00")
(data (i32.const 8575) "sawards < awards\00")
(data (i32.const 8592) "not found this game\00")
(data (i32.const 8612) "game is not over\00")
(data (i32.const 8629) "game is not start\00")
(data (i32.const 8647) "bug? the schedule pool is already full, sched_num: \00")
(data (i32.const 8699) "bug ? st_game not found.\00")
(data (i32.const 8724) "bug ? st_game does not start\00")
(data (i32.const 8753) "bug? not found user\00")
(data (i32.const 8773) "not found st_game\00")
(data (i32.const 8791) "winner not in st_game\00: no conversion\00")
(data (i32.const 8829) "sender id: \00: out of range\00")
(data (i32.const 8856) ", \00")
(data (i32.const 8859) "stop_remove_sched: \00")
(data (i32.const 8879) "sched_no: \00")
(data (i32.const 8890) "num_sched_users: \00")
(data (i32.const 8908) "token_exchange_rate: \00")
(data (i32.const 8930) "airdrop_flag: \00")
(data (i32.const 8945) "global_seed: \00")
(data (i32.const 8959) "{\00")
(data (i32.const 8961) "\"msg\": \"transfer action is trigger by platform, ignore it\"\00")
(data (i32.const 9020) "}\00")
(data (i32.const 9022) "gameuuid: \00")
(data (i32.const 9033) "not found st_game.\00")
(data (i32.const 9052) "free map\00")
(data (i32.const 9061) "fake tokens\00")
(data (i32.const 9073) "didn\'t transfer tokens to me\00")
(data (i32.const 9102) "invalid quantity\00")
(data (i32.const 9119) "must transfer positive quantity\00")
(data (i32.const 9151) "EOS\00")
(data (i32.const 9155) "symbol precision mismatch\00")
(data (i32.const 9181) "memo has more than 256 bytes\00")
(data (i32.const 9210) "st_game is over\00")
(data (i32.const 9226) "MYEOS\00")
(data (i32.const 9232) "User: \00")
(data (i32.const 9239) " -- Enjoy airdrop! Play: matr0x\00")
(data (i32.const 9271) "user must exist at this step\00")
(data (i32.const 9300) "\"msg\": \"crackers come\"\00")
(data (i32.const 9323) "\"msg\": \"transfer action is trigger by platform, bug ?\"\00")
(data (i32.const 9378) "must be MYEOS token\00")
(data (i32.const 9398) "didn\'t transfer tokens to me.\00")
(data (i32.const 9428) "not a MYEOS game\00")
(data (i32.const 9445) "\"dice_number\": \00")
(data (i32.const 9461) "\"user\": \"\00")
(data (i32.const 9471) "\", \00")
(data (i32.const 9475) "\"gameuuid\": \00")
(data (i32.const 9488) "\"update_ts\": \00")
(data (i32.const 9502) "\"expired_ts\": \00")
(data (i32.const 9517) "\"expired\":\00")
(data (i32.const 9528) "\"toss\": \00")
(data (i32.const 9537) "\"msg\": \00")
(data (i32.const 9545) "\"user found\"\00")
(data (i32.const 9558) "\"user not found\"\00")
(data (i32.const 9575) "\"expired\": \00")
(data (i32.const 9587) "st_game does not start\00")
(data (i32.const 9610) "user not in st_game\00")
(data (i32.const 9630) "bug ? expired user\00")
(data (i32.const 9649) "inner steps error\00")
(data (i32.const 9667) "right steps error: \00")
(data (i32.const 9687) "left steps error: \00")
(data (i32.const 9706) "up steps error: \00")
(data (i32.const 9723) "down steps error: \00")
(data (i32.const 9742) "invalid combination of steps.\00")
(data (i32.const 9772) "total steps error\00")
(data (i32.const 9790) "error\00")
(data (i32.const 9796) "\"awards\": \00")
(data (i32.const 9807) "\"origin_pos\": [\00")
(data (i32.const 9823) "], \00")
(data (i32.const 9827) "\"current_pos\": [\00")
(data (i32.const 9844) "\"direction\": \00")
(data (i32.const 9858) "\"right_first\":\00")
(data (i32.const 9873) "\"up_first\": \00")
(data (i32.const 9886) "\"right\": \00")
(data (i32.const 9896) "\"left\": \00")
(data (i32.const 9905) "\"up\": \00")
(data (i32.const 9912) ",\00")
(data (i32.const 9914) "\"down\": \00")
(data (i32.const 9923) "}, \00")
(data (i32.const 9927) "\"last_goal\": \00")
(data (i32.const 9941) "\"win\": \00")
(data (i32.const 9949) "upper overflow\00")
(data (i32.const 9964) "right steps: \00")
(data (i32.const 9978) "invalid right steps\00")
(data (i32.const 9998) "lower overflow\00")
(data (i32.const 10013) "left steps: \00")
(data (i32.const 10026) "invalid left steps\00")
(data (i32.const 10045) "up steps: \00")
(data (i32.const 10056) "invlaid up steps\00")
(data (i32.const 10073) "down steps: \00")
(data (i32.const 10086) "invalid down steps\00")
(data (i32.const 10105) "bug ? no awards in pool\00")
(data (i32.const 10129) "not MYEOS-token game\00")
(data (i32.const 10150) "no reached goals. bug?\00")
(data (i32.const 10173) "total amount < 0, bug?\00")
(data (i32.const 10196) "Congratulations. You got \00")
(data (i32.const 10222) " EOS\00")
(data (i32.const 10227) "referuser not existent.\00")
(data (i32.const 10251) "user already exists\00")
(data (i32.const 10271) "user existent\00")
(data (i32.const 10285) "onerror action are only valid from the \"eosio\" system account\00")
(data (i32.const 10347) "error reading iterator\00")
(data (i32.const 10370) "read\00")
(data (i32.const 10375) "cannot create objects in table of another contract\00")
(data (i32.const 10426) "write\00")
(data (i32.const 10432) "cannot pass end iterator to modify\00")
(data (i32.const 10467) "object passed to modify is not in multi_index\00")
(data (i32.const 10513) "cannot modify objects in table of another contract\00")
(data (i32.const 10564) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10623) "no random generator engine\00")
(data (i32.const 10650) "cannot increment end iterator\00")
(data (i32.const 10680) "free\00")
(data (i32.const 10688) "\14\00\00\00\15\00\00\00")
(data (i32.const 10696) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<(lambda at /Users/zxchen/ares/backend/contract/dice.hpp:662:37)> >::n() [T = boost::algorithm::detail::token_finderF<(lambda at /Users/zxchen/ares/backend/contract/dice.hpp:662:37)>]\00")
(data (i32.const 10958) "T = \00")
(data (i32.const 10963) "string is too long to be a valid symbol_code\00")
(data (i32.const 11008) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 11061) "incr game shadow overflow\00")
(data (i32.const 11087) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 11136) "invalid symbol name\00")
(data (i32.const 11156) "\98+\00\00")
(data (i32.const 11160) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 11193) "incr game awards overflow\00")
(data (i32.const 11219) "desc game shadow overflow\00")
(data (i32.const 11245) "desc game awards overflow\00")
(data (i32.const 11271) "0.9.0\00")
(data (i32.const 11277) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 11328) "get\00")
(data (i32.const 11332) "cannot pass end iterator to erase\00")
(data (i32.const 11366) "object passed to erase is not in multi_index\00")
(data (i32.const 11411) "cannot erase objects in table of another contract\00")
(data (i32.const 11461) "attempt to remove object that was not in multi_index\00")
(data (i32.const 11514) "next primary key in table is at autoincrement limit\00")
(data (i32.const 11566) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 11620) "cannot decrement iterator at beginning of table\00")
(data (i32.const 11668) "true\00")
(data (i32.const 11673) "false\00")
(data (i32.const 20096) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 20176) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "memcpy" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$6 (result i64)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "prints" (func $fimport$8 (param i32)))
(import "env" "printui" (func $fimport$9 (param i64)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$11 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$13 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$14 (param i32 i64 i32)))
(import "env" "printui128" (func $fimport$15 (param i32)))
(import "env" "send_inline" (func $fimport$16 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$17 (result i32)))
(import "env" "read_action_data" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$19 (param i32 i64 i32 i32 i32)))
(import "env" "printn" (func $fimport$20 (param i64)))
(import "env" "printi" (func $fimport$21 (param i64)))
(import "env" "db_get_i64" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "db_remove_i64" (func $fimport$24 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$25 (param i32)))
(import "env" "db_previous_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$27 (param i64 i64 i64) (result i32)))
(import "env" "memset" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$30 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$41 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$45 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$47 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$48 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$49 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$50 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$51 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$52 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$53 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$54 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$55 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$56 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$57 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$58 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$59 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$60 (param i32 i32 i32 i32 i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $109))
(export "_Znwj" (func $172))
(export "_ZdlPv" (func $174))
(export "_Znaj" (func $173))
(export "_ZdaPv" (func $175))
(export "_ZnwjSt11align_val_t" (func $176))
(export "_ZnajSt11align_val_t" (func $177))
(export "_ZdlPvSt11align_val_t" (func $178))
(export "_ZdaPvSt11align_val_t" (func $179))
(table $0 24 24 anyfunc)
(elem (i32.const 1) $18 $62 $107 $32 $61 $30 $17 $45 $60 $87 $28 $63 $108 $36 $88 $55 $59 $1 $35 $142 $143 $202 $204)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20433))
(global $global$2 i32 (i32.const 20433))


void .FUNC $220 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$1 == (int_32)[1]), [8209])
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$4 }
	if ( ($1 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$5
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $219($0)
	
.LABEL $label$1
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [100])) == (int_32)$0), [11366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11411])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11461])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [104])))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $158(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $214(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11680])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $214(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy(($2 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy(($3 + [56]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy(($3 + [60]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy(($3 + [64]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[15]), [10370])
	CALL memcpy(($3 + [80]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [10370])
	CALL memcpy(($3 + [96]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy(($2 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy(($3 + [40]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy(($3 + [44]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy(($3 + [48]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy(($3 + [52]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $216($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11680])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $216($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10347])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [100]) = $0
	*($5 + [48]) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [60])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [97])
	CALL $157(($3 + [32]), ($3 + [24]))
	*($5 + [104]) = $1
	*($5 + [108 align=4]) = (int_64)-1
	*($5 + [116 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $219($0)
	
.LABEL $label$1
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10347])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [100]) = $0
	*($5 + [48]) = (int_64)0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [60])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [97])
	CALL $157(($3 + [32]), ($3 + [24]))
	*($5 + [104]) = $1
	*($5 + [108 align=4]) = (int_64)-1
	*($5 + [116 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $70(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $5 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)-1)
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	$6 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [48])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$6 = (($11 & [-4]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL $216($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	*($4 + [24]) = ($4 + [8])
	*($4 + [64]) = $8
	*($4 + [76]) = $7
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [12])
	*($4 + [44]) = ($1 + [16])
	*($4 + [48]) = ($1 + [24])
	*($4 + [52]) = ($1 + [28])
	*($4 + [56]) = ($1 + [32])
	*($4 + [60]) = ($1 + [40])
	*($4 + [68]) = ($1 + [56])
	*($4 + [72]) = ($1 + [64])
	CALL $106(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

int_32 .FUNC $127 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [400]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [404])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [400]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [360]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [364])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [360]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [320]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [324])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [320]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [272]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [276])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [272]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [236])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [232]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [196])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [192]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$2 = *(($0 + [152]))
	if ( ($2 == 0) ){ goto $label$31 }
	$5 = ($0 + [156])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$35 }
	$1 = *($4 + [72])
	if ( ($1 == 0) ){ goto $label$36 }
	*(($4 + [76])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$36
	CALL _ZdlPv($4)
	
.LABEL $label$35
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$34 }
	$3 = *(($0 + [152]))
	goto $label$32 
	
.LABEL $label$33
	$3 = $2
	
.LABEL $label$32
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$37 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$39 }
	
.LOOP $label$40:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$41 }
	CALL _ZdlPv($4)
	
.LABEL $label$41
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$40 }
	$3 = *(($0 + [112]))
	goto $label$38 
	
.LABEL $label$39
	$3 = $1
	
.LABEL $label$38
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$37
	$3 = *($0 + [76])
	if ( ($3 == 0) ){ goto $label$42 }
	*(($0 + [80])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$42
	$3 = *($0 + [64])
	if ( ($3 == 0) ){ goto $label$43 }
	*(($0 + [68])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$43
	$3 = *($0 + [52])
	if ( ($3 == 0) ){ goto $label$44 }
	*(($0 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$44
	$3 = *($0 + [40])
	if ( ($3 == 0) ){ goto $label$45 }
	*(($0 + [44])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$45
	if ( ((*($0 + [28]) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($0 + [36])))
	
.LABEL $label$46
	return $0
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [11366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11411])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11461])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [72])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [88]))
}

void .FUNC $189 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $195($1, $0, [8841])
	CALL $196()
	(unreachable)
}

int_32 .FUNC $188 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = CALL $213($3)
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $212(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $49 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $2
	*($3 + [24]) = $1
	$4 = ($0 + [248])
	$6 = *(($0 + [276]))
	$5 = *(($0 + [272]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$4), [11277])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [256])), (int_64)7687447330970140672, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $10($4, $7)
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$4), [11277])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [10432])
	CALL $53($4, $8, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [12]) = ($3 + [16])
	*($3 + [8]) = ($3 + [24])
	CALL $54($3, $4, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	float_32 $7
	float_32 $8
	int_64 $9
	int_64 $10
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($1 + [24])
	$7 = (CASTING float_32)(uint_64 $4)
	$8 = ((float_32)$7 * (float_32)(float_32)0.10000000149011612)
	if ( ((float_32)(float_32)|$8| < (float_32)(float_32)9223372036854775808) ){ goto $label$2 }
	$9 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$9 = (Rounds 0)($8)
	
.LABEL $label$1
	$6 = ((int_32)$6 == (int_32)[4])
	$7 = ((float_32)$7 * (float_32)(float_32)0.8500000238418579)
	if ( ((float_32)(float_32)|$7| < (float_32)(float_32)9223372036854775808) ){ goto $label$6 }
	$10 = ( $4 ? (int_64)-9223372036854775808 : $6 )
	if ( ((int_64)$10 >= (int_64)1) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$10 = ( $4 ? (Rounds 0)($7) : $6 )
	if ( ((int_64)$10 < (int_64)1) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $50($0, *($0), *($2), $10, [0])
	goto $label$3 
	
.LABEL $label$4
	if ( (int_64)($4 == 0) ){ goto $label$7 }
	CALL $50($0, *($0), *($2), $4, [0])
	goto $label$3 
	
.LABEL $label$7
	CALL eosio_assert([0], [10105])
	
.LABEL $label$3
	if ( ((int_32)*(($1 + [24])) == (int_32)[4]) ){ goto $label$9 }
	$10 = *($1 + [40])
	$4 = ( (int_64)0 ? $9 : $6 )
	if ( ((int_64)$4 >= (int_64)$10) ){ goto $label$8 }
	*($5 + [8]) = $4
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [11193])
	$4 = *($0)
	*($5) = ($5 + [8])
	CALL $52(($0 + [128]), $1, $4, $5)
	
.LABEL $label$9
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	*($5 + [8]) = $10
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$10 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [11193])
	$4 = *($0)
	*($5) = ($5 + [8])
	CALL $52(($0 + [128]), $1, $4, $5)
	$global$0 = ($5 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[15]), [10426])
	CALL memcpy(*($3 + [4]), $2, [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[15]), [10426])
	CALL memcpy(*($3 + [4]), $2, [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [10426])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [10426])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [104]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11620])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4460071177754247168)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [11566])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11566])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $7(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $40($0, *($1))
	CALL $40($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	float_64 $10
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(CALL $46($0, $1), [10129])
	$6 = *(($1 + [76]))
	$5 = *($1 + [72])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$7 = [0]
	
.LOOP $label$3:
	$7 = ($7 + ((int_32)*($5) == (int_32)[-1]))
	$5 = ($5 + [4])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$3 }
	if ( $7 ){ goto $label$1 }
	
.LABEL $label$2
	$7 = [0]
	CALL eosio_assert([0], [10150])
	
.LABEL $label$1
	$8 = *($1 + [40])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [10173])
	$9 = *($1 + [32])
	*($4 + [24]) = $9
	$5 = (int_32((*(($1 + [76])) - *($1 + [72])) >> [2]) - $7)
	$7 = ($5 + [1])
	$10 = ((float_64)(CASTING float_64)(int_64 (int_64))($8 - ((int_64)$9 * (int_64)(CASTING int_64)(int_32 $7)))) / (float_64)((float_64)(CASTING float_64)(int_32 ((int_32)$7 * (int_32)$5)) * (float_64)(float_64)0.5)
	if ( ((float_64)(float_64)|$10)| < (float_64)(float_64)9223372036854775808) ){ goto $label$5 }
	$8 = (int_64)-9223372036854775808
	goto $label$4 
	
.LABEL $label$5
	$8 = (Rounds 0)($10)
	
.LABEL $label$4
	*($4 + [16]) = ((int_64)$9 + (int_64)$8)
	CALL $50($0, *($0), *($2), $9, [0])
	*($3) = $9
	$9 = *($0)
	*($4 + [12]) = ($4 + [24])
	*($4 + [8]) = ($4 + [16])
	CALL $51(($0 + [128]), $1, $9, ($4 + [8]))
	$global$0 = ($4 + [32])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [64])
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$4 }
	$4 = [0]
	$5 = *([0] + [11156])
	
.LOOP $label$6:
	*((($2 + [19]) + ($1 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$1 == (int_32)[12]) )))))
	$4 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[11]) ){ goto $label$5 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	*($2) = [0]
	$1 = ($2 | [1])
	goto $label$1 
	
.LABEL $label$3
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$2
	$6 = ($1 + [1])
	$1 = [0]
	
.LOOP $label$7:
	*(($5 + $1)) = *((($2 + [19]) + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$7 }
	$1 = ($5 + $4)
	
.LABEL $label$1
	*($1) = [0]
	$1 = CALL $188($2, [0], [4], [10680])
	if ( ((*($2) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$8
	$global$0 = ($2 + [32])
	return ($1 == 0)
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $1
	CALL require_auth((int_64)-7947877572870428864)
	$4 = ($0 + [128])
	$6 = *(($0 + [156]))
	$5 = *(($0 + [152]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [84]) == (int_32)$4), [11277])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [136])), (int_64)7035938313001238528, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $2($4, $7)
	CALL eosio_assert(((int_32)*($8 + [84]) == (int_32)$4), [11277])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8773])
	$6 = ($0 + [296])
	$7 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [296]), *(($0 + [304])), (int_64)-2042605223187841024, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $12($6, $5)
	if ( ((int_64)*($7 + [16]) != (int_64)$1) ){ goto $label$7 }
	$9 = [2]
	goto $label$5 
	
.LABEL $label$7
	$9 = [0]
	goto $label$5 
	
.LABEL $label$6
	$9 = [3]
	
.LABEL $label$5
	
.LOOP $label$8:
	goto $label$27 
	
.LABEL $label$29
	$7 = CALL $12($6, $7)
	if ( ((int_64)*($7 + [16]) != (int_64)$1) ){ goto $label$14 }
	$9 = [2]
	goto $label$8 
	
.LABEL $label$28
	if ( ((int_64)*($7 + [8]) == (int_64)$2) ){ goto $label$15 }
	$9 = [0]
	goto $label$8 
	
.LABEL $label$27
	CALL eosio_assert([1], [10650])
	$7 = CALL db_next_i64(*($7 + [60]), ($3 + [24]))
	if ( ((int_32)$7 >= (int_32)[0]) ){ goto $label$16 }
	$9 = [12]
	goto $label$8 
	
.LABEL $label$26
	$7 = [0]
	$9 = [3]
	goto $label$8 
	
.LABEL $label$25
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [8791])
	*($3 + [8]) = (int_64)0
	if ( (CALL $46($0, $8) == 0) ){ goto $label$13 }
	$9 = [11]
	goto $label$8 
	
.LABEL $label$24
	CALL $47($0, $8, ($3 + [16]), ($3 + [8]))
	$2 = *($3 + [8])
	goto $label$10 
	
.LABEL $label$23
	CALL $48($0, $8, ($3 + [16]), $7, *($7 + [24]))
	$10 = ((float_32)(CASTING float_32)(int_64 *($7 + [24])) * (float_32)(float_32)0.8500000238418579)
	if ( (((float_32)$10 < (float_32)(float_32)18446744073709551615) & ((float_32)$10 >= (float_32)(float_32)0)) ){ goto $label$12 }
	$9 = [10]
	goto $label$8 
	
.LABEL $label$22
	$2 = (int_64)0
	goto $label$11 
	
.LABEL $label$21
	$2 = (Rounds 0)($10)
	$9 = [6]
	goto $label$8 
	
.LABEL $label$20
	*($3 + [8]) = $2
	$9 = [7]
	goto $label$8 
	
.LABEL $label$19
	CALL $49($0, $1, $2)
	CALL eosio_assert($5, [11332])
	CALL eosio_assert($5, [10650])
	$8 = CALL db_next_i64(*($7 + [60]), ($3 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$9 }
	$9 = [8]
	goto $label$8 
	
.LABEL $label$18
	CALL $12($6, $8)
	$9 = [9]
	goto $label$8 
	
.LABEL $label$17
	CALL $13($6, $7)
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$16
	$9 = [1]
	goto $label$8 
	
.LABEL $label$15
	$9 = [3]
	goto $label$8 
	
.LABEL $label$14
	$9 = [0]
	goto $label$8 
	
.LABEL $label$13
	$9 = [4]
	goto $label$8 
	
.LABEL $label$12
	$9 = [5]
	goto $label$8 
	
.LABEL $label$11
	$9 = [6]
	goto $label$8 
	
.LABEL $label$10
	$9 = [7]
	goto $label$8 
	
.LABEL $label$9
	$9 = [9]
	goto $label$8 
	$9
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)1)
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	$6 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [56])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$6 = (($11 & [-4]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL $216($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	*($4 + [24]) = ($4 + [8])
	*($4 + [68]) = $8
	*($4 + [76]) = $7
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [12])
	*($4 + [44]) = ($1 + [16])
	*($4 + [48]) = ($1 + [24])
	*($4 + [52]) = ($1 + [28])
	*($4 + [56]) = ($1 + [32])
	*($4 + [60]) = ($1 + [40])
	*($4 + [64]) = ($1 + [48])
	*($4 + [72]) = ($1 + [64])
	CALL $106(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [10370])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10426])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10426])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), ($2 + [48]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($3 + [56]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($3 + [60]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($3 + [64]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[15]), [10426])
	CALL memcpy(*($0 + [4]), ($3 + [80]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [10426])
	CALL memcpy(*($1 + [4]), ($3 + [96]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [11328])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $73($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10370])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $198($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $161 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [88]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11620])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035938313001238528)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [11566])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11566])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $2(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $160 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [16])
	$global$0 = $6
	$7 = *($0)
	$8 = *($7 + [4])
	$9 = *($8 + [64])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$2 }
	$9 = *($7)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)7687447330970140672, ($6 + [8]), *($8))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($9)
	
.LABEL $label$1
	$7 = *($0)
	$8 = *($7 + [4])
	$9 = *(($8 + [68]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$4 }
	$9 = *($7)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)7687447330970140673, ($6 + [8]), *($8))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($9)
	
.LABEL $label$3
	$7 = *($0)
	$8 = *($7 + [4])
	$9 = *(($8 + [72]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$6 }
	$9 = *($7)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)7687447330970140674, ($6 + [8]), *($8))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($9)
	
.LABEL $label$5
	$7 = *($0)
	$8 = *($7 + [4])
	$9 = *(($8 + [76]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$8 }
	$9 = *($7)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)7687447330970140675, ($6 + [8]), *($8))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($9)
	
.LABEL $label$7
	$9 = *($0)
	$7 = *($9 + [4])
	$0 = *(($7 + [80]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$10 }
	$0 = *($9)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7687447330970140676, ($6 + [8]), *($7))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($0)
	
.LABEL $label$9
	$global$0 = ($6 + [16])
}

void .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), ($2 + [48]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($3 + [56]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($3 + [60]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($3 + [64]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[15]), [10426])
	CALL memcpy(*($0 + [4]), ($3 + [80]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($1 + [4]), ($3 + [96]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), ($2 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($3 + [40]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($3 + [44]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($3 + [48]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($1 + [4]), ($3 + [52]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [10375])
	*(($5 = CALL _Znwj([96])) + [40]) = (int_64)1
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [56]) = (int_64)1676034
	*($5 + [64]) = (int_64)10
	*($5 + [80]) = $1
	$5 = CALL memcpy($5, *($3), [72])
	*($4 + [80]) = ($4 + [64])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($5 + [16])
	*($4 + [96]) = $5
	*($4 + [104]) = ($5 + [24])
	*($4 + [108]) = ($5 + [32])
	*($4 + [112]) = ($5 + [40])
	*($4 + [116]) = ($5 + [48])
	*($4 + [120]) = ($5 + [56])
	*($4 + [124]) = ($5 + [64])
	CALL $153(($4 + [96]), ($4 + [88]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, $2, (int_64)4982871454518345728, $4, [64])
	*($5 + [84]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	*($4 + [96]) = $5
	*($4) = (int_64)4982871454518345728
	*($4 + [72]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4982871454518345728
	*($3 + [16]) = $6
	*($4 + [96]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $152(($1 + [24]), ($4 + [96]), $4, ($4 + [72]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth((int_64)-7947877572870428864)
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = [0]
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)1
	*($2 + [48]) = [0]
	*($2 + [56]) = (int_64)1676034
	*($2 + [64]) = (int_64)10
	$3 = ($0 + [88])
	$4 = *(($0 + [116]))
	if ( ((int_32)$4 == (int_32)*(($0 + [112]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [11277])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $15($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [11277])
	goto $label$1 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	CALL memcpy(($2 + [80]), $4, [80])
	*($2 + [128]) = $1
	CALL $56($3, ($2 + [80]), *($0))
	$global$0 = ($2 + [160])
}

void .FUNC $50 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [224])
	$global$0 = $5
	$6 = CALL $213([9151])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [10963])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [9150]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [11008])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)$7 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [11087])
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$10 = ((int_64)$9 | (int_64)4)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $9
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [11136])
	$7 = CALL current_time()
	*(($5 + [156])) = (int_64)0
	*(($5 + [172])) = (int_64)0
	*(($5 + [180])) = (int_64)0
	*($5 + [140]) = [0]
	*($5 + [144]) = [0]
	*($5 + [148 align=4]) = (int_64)0
	*($5 + [164 align=4]) = (int_64)0
	*($5 + [128]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$6 = CALL $213([10196])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$21 }
	*($5 + [80]) = ($6 << [1])
	$8 = (($5 + [80]) | [1])
	if ( $6 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$11 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($5 + [80]) = ($11 | [1])
	*($5 + [88]) = $8
	*($5 + [84]) = $6
	
.LABEL $label$20
	CALL memcpy($8, [10196], $6)
	
.LABEL $label$19
	*(($8 + $6)) = [0]
	CALL $194(($5 + [192]), ((float_64)(CASTING float_64)(int_64 $3) / (float_64)(float_64)1e4))
	$6 = *($5 + [192])
	$8 = ($6 & [1])
	$6 = CALL $186(($5 + [80]), ( *($5 + [200]) ? (($5 + [192]) | [1]) : $8 ), ( *($5 + [196]) ? uint_32($6 >> [1]) : $8 ))
	$8 = ($6 + [8])
	*((($5 + [16]) + [8])) = *($8)
	*($5 + [16]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	*((($5 + [96]) + [8])) = [0]
	*($5 + [96]) = (int_64)0
	$6 = CALL $213([10222])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$24 }
	*($5 + [96]) = ($6 << [1])
	$11 = (($5 + [96]) | [1])
	$8 = $11
	if ( $6 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$11 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($5 + [96]) = ($11 | [1])
	*($5 + [104]) = $8
	*($5 + [100]) = $6
	$11 = (($5 + [96]) | [1])
	
.LABEL $label$23
	CALL memcpy($8, [10222], $6)
	
.LABEL $label$22
	*(($8 + $6)) = [0]
	$6 = *($5 + [96])
	$8 = ($6 & [1])
	$6 = CALL $186(($5 + [16]), ( *($5 + [104]) ? $11 : $8 ), ( *($5 + [100]) ? uint_32($6 >> [1]) : $8 ))
	$8 = ($6 + [8])
	*((($5 + [112]) + [8])) = *($8)
	*($5 + [112]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	if ( (*($5 + [96]) & [1]) ){ goto $label$26 }
	if ( (*($5 + [16]) & [1]) ){ goto $label$25 }
	goto $label$16 
	
.LABEL $label$26
	CALL _ZdlPv(*((($5 + [96]) + [8])))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$25
	CALL _ZdlPv(*($5 + [24]))
	$6 = [1]
	if ( ((*($5 + [192]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	CALL $180(($5 + [80]))
	
.LABEL $label$17
	CALL $180(($5 + [96]))
	
.LABEL $label$16
	$6 = [1]
	if ( (*($5 + [192]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( ((*($5 + [80]) & $6) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	CALL _ZdlPv(*(($5 + [200])))
	if ( ((*($5 + [80]) & $6) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($5 + [88]))
	
.LABEL $label$12
	*($5 + [88]) = (int_64)3617214756542218240
	*($5 + [80]) = $1
	*($5 + [96]) = (int_64)6138663591592764928
	*($5 + [72]) = (int_64)-3617168760277827584
	*((($5 + [16]) + [24])) = $10
	*($5 + [24]) = $2
	*($5 + [16]) = $1
	*($5 + [32]) = $3
	$11 = CALL $181((($5 + [16]) + [32]), ($5 + [112]))
	$8 = *(($5 + [168]))
	if ( ((uint_32)$8 >= (uint_32)*(($5 + [172]))) ){ goto $label$31 }
	*($8 + [8]) = (int_64)-3617168760277827584
	*($8) = (int_64)6138663591592764928
	*($8 + [16 align=4]) = (int_64)0
	*(($12 = ($8 + [24]))) = [0]
	$6 = CALL _Znwj([16])
	*($8 + [16]) = $6
	$13 = ($6 + [16])
	*($12) = $13
	*(($6 + [8])) = *((($5 + [80]) + [8]))
	*($6) = *($5 + [80])
	*(($8 + [20])) = $13
	*($8 + [28 align=4]) = (int_64)0
	*(($8 + [36])) = [0]
	$6 = *($11)
	$11 = ( *((($5 + [16]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($11 + [32])
	$7 = (CASTING uint_64)(uint_32 $11)
	$11 = ($8 + [28])
	
.LOOP $label$32:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$32 }
	if ( ($6 == 0) ){ goto $label$30 }
	CALL $73($11, $6)
	$11 = *(($8 + [32]))
	$6 = *(($8 + [28]))
	goto $label$29 
	
.LABEL $label$31
	CALL $83(($5 + [164]), ($5 + [80]), ($5 + [96]), ($5 + [72]), ($5 + [16]))
	if ( (*($5 + [48]) & [1]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$11 = [0]
	$6 = [0]
	
.LABEL $label$29
	*($5 + [196]) = $6
	*($5 + [192]) = $6
	*($5 + [200]) = $11
	*($5 + [208]) = ($5 + [192])
	*($5 + [216]) = ($5 + [16])
	CALL $77(($5 + [216]), ($5 + [208]))
	*(($6 = (($5 + [128]) + [40]))) = (*($6) + [40])
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$27
	*(($5 + [148])) = $4
	CALL $84($5, $0)
	*($5 + [24]) = *(($5 + [8]))
	*($5 + [16]) = *($5)
	CALL $85(($5 + [80]), ($5 + [128]))
	$6 = *($5 + [80])
	CALL send_deferred(($5 + [16]), $1, $6, (*($5 + [84]) - $6), [0])
	$6 = *($5 + [80])
	if ( ($6 == 0) ){ goto $label$33 }
	*($5 + [84]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$33
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($5 + [120]))
	
.LABEL $label$34
	CALL $86(($5 + [128]))
	$global$0 = ($5 + [224])
	(unreachable)
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [32]) = *(*($3))
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*(($3 + [4]))))
	$6 = *($1)
	CALL eosio_assert([1], [10564])
	$3 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [40])
	$9 = ($1 + [32])
	$11 = *($1 + [72])
	$10 = *(($1 + [76]))
	$12 = ($10 - $11)
	$13 = (CASTING uint_64)(uint_32 int_32($12 >> [2]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$2 }
	$3 = (($12 & [-4]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [56]) = $9
	*($5 + [60]) = $8
	*($5 + [76]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [28])
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [56])
	*($5 + [72]) = ($1 + [64])
	CALL $106(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	$6 = *($1)
	CALL eosio_assert([1], [10564])
	$3 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [32])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$3 = (($11 & [-4]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [56]) = $8
	*($5 + [76]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [28])
	*($5 + [60]) = ($1 + [40])
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [56])
	*($5 + [72]) = ($1 + [64])
	CALL $106(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [120]) = $2
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($4 + [80]) = *($1 + [8])
	*($4 + [88]) = *($1 + [24])
	$5 = *($1 + [32])
	*($4 + [96]) = $5
	*($4 + [104]) = *($1 + [52])
	*($4 + [112]) = *($1 + [16])
	$2 = *($1)
	*($4 + [72]) = $2
	$3 = *($3)
	*($1 + [24]) = *($3)
	*($1 + [32]) = ((int_64)$5 + (int_64)*($3))
	*($1 + [52]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [10564])
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	*($4 + [128]) = ($4 + [56])
	*($4 + [140]) = ($1 + [8])
	*($4 + [136]) = $1
	*($4 + [144]) = ($1 + [16])
	*($4 + [148]) = ($1 + [24])
	*($4 + [152]) = ($1 + [32])
	*($4 + [156]) = ($1 + [40])
	*($4 + [160]) = ($1 + [44])
	*($4 + [164]) = ($1 + [48])
	*($4 + [168]) = ($1 + [52])
	CALL $96(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($1 + [60]), *($4 + [120]), $4, [56])
	$3 = ($0 + [36])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [140]) = $1
	*($4 + [136]) = $0
	*($4 + [148]) = $1
	*($4 + [144]) = ($4 + [80])
	*($4 + [152]) = ($4 + [72])
	*($4 + [156]) = ($4 + [120])
	*($4 + [128]) = ($4 + [136])
	CALL $139(($4 + [128]), $3, ($3 + [1]), ($3 + [2]), ($3 + [3]), ($3 + [4]))
	$global$0 = ($4 + [176])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [10375])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([88])) + [56]) = $1
	*($3 + [16]) = (int_64)0
	CALL $136(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $137(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $55 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth((int_64)-7947877572870428864)
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = [0]
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)1
	*($2 + [48]) = [0]
	*($2 + [56]) = (int_64)1676034
	*($2 + [64]) = (int_64)10
	$3 = ($0 + [88])
	$4 = *(($0 + [116]))
	if ( ((int_32)$4 == (int_32)*(($0 + [112]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [11277])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $15($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [11277])
	goto $label$1 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	CALL memcpy(($2 + [80]), $4, [80])
	*($2 + [120]) = ( (int_64)1 ? $1 : (int_64)($1 == 0) )
	CALL $56($3, ($2 + [80]), *($0))
	$global$0 = ($2 + [160])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$0), [11277])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $15($0, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$0), [11277])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10432])
	CALL $57($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $58($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	$1 = CALL memcpy($1, *($3), [72])
	CALL eosio_assert([1], [10564])
	*($4 + [80]) = ($4 + [64])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [16])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [24])
	*($4 + [108]) = ($1 + [32])
	*($4 + [112]) = ($1 + [40])
	*($4 + [116]) = ($1 + [48])
	*($4 + [120]) = ($1 + [56])
	*($4 + [124]) = ($1 + [64])
	CALL $153(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [84]), $2, $4, [64])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[15]), [10426])
	CALL memcpy(*($3 + [4]), $2, [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10426])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [10426])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $146($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[15]), [10370])
	CALL memcpy($2, *($3 + [4]), [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [2])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($2 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $198($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [2]))
	$3 = ($2 + ($3 << [2]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [2]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[15]), [10370])
	CALL memcpy($2, *($3 + [4]), [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[15]), [10370])
	CALL memcpy($2, *($3 + [4]), [16])
	*($3 + [4]) = (*($3 + [4]) + [16])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [10370])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [10370])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $155(*($1), *($0 + [44]))
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [11328])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [2])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $156($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [2]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($5) - $3) > (uint_32)[3]), [10370])
	CALL memcpy($7, *($2), [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$7 = ($7 + [4])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $158 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *($7 + [108])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$2 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-2189421640876556288, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($8)
	
.LABEL $label$1
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [112]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$4 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-2189421640876556287, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($8)
	
.LABEL $label$3
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [116]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$6 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-2189421640876556286, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($8)
	
.LABEL $label$5
	$8 = *($0)
	$6 = *($8 + [4])
	$0 = *(($6 + [120]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$8 }
	$0 = *($8)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2189421640876556285, ($5 + [8]), *($6))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($0)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *($7 + [108])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$2 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-4460071177754247168, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($8)
	
.LABEL $label$1
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [112]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$4 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-4460071177754247167, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($8)
	
.LABEL $label$3
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [116]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$6 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-4460071177754247166, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($8)
	
.LABEL $label$5
	$8 = *($0)
	$6 = *($8 + [4])
	$0 = *(($6 + [120]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$8 }
	$0 = *($8)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4460071177754247165, ($5 + [8]), *($6))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($0)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [104]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11620])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-2189421640876556288)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [11566])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11566])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $4(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3)))
	$6 = *($1)
	CALL eosio_assert([1], [10564])
	$3 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [40])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$3 = (($11 & [-4]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [60]) = $8
	*($5 + [76]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [28])
	*($5 + [56]) = ($1 + [32])
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [56])
	*($5 + [72]) = ($1 + [64])
	CALL $106(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

void .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $216($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $81(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $64 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	float_32 $18
	float_64 $19
	float_64 $20
	$2 = ($global$0 - [384])
	$global$0 = $2
	CALL $65(($2 + [312]))
	if ( ((int_64)*($2 + [312]) != (int_64)*($0)) ){ goto $label$3 }
	CALL prints([8959])
	CALL prints([8961])
	CALL prints([9020])
	if ( (*(($2 + [344])) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = ($2 + [344])
	$4 = CALL $181(($2 + [296]), $3)
	*($2 + [176]) = (int_64)0
	*($2 + [184]) = [0]
	*($2 + [20]) = [1]
	*($2 + [8]) = *($2 + [16])
	CALL $66(($2 + [176]), $4, ($2 + [8]))
	$5 = CALL $191((*($2 + [176]) + [12]), [0], [10])
	$6 = *($2 + [176])
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = *($2 + [180])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = ($7 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$8
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$7 }
	$8 = *($2 + [176])
	goto $label$5 
	
.LABEL $label$6
	$8 = $6
	
.LABEL $label$5
	*($2 + [180]) = $6
	CALL _ZdlPv($8)
	
.LABEL $label$4
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$9
	CALL prints([9022])
	CALL printui($5)
	$9 = ($0 + [128])
	$7 = *(($0 + [156]))
	$4 = *(($0 + [152]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$13:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$5) ){ goto $label$12 }
	$7 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$9), [11277])
	goto $label$10 
	
.LABEL $label$11
	$6 = [0]
	$8 = CALL db_find_i64(*($9), *(($0 + [136])), (int_64)7035938313001238528, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$10 }
	$6 = CALL $2($9, $8)
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$9), [11277])
	
.LABEL $label$10
	$10 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($10, [9033])
	if ( (CALL $46($0, $6) == 0) ){ goto $label$14 }
	CALL eosio_assert(((int_64)$1 == (int_64)-7947877563513002112), [9052])
	CALL $67($0, $1)
	if ( (*($3) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$14
	CALL eosio_assert(((int_64)$1 == (int_64)6138663591592764928), [9061])
	$5 = *($0)
	if ( ((int_64)*($2 + [312]) != (int_64)$5) ){ goto $label$15 }
	CALL prints([8959])
	CALL prints([9323])
	CALL prints([9020])
	if ( (*($3) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$15
	CALL eosio_assert(((int_64)*($2 + [320]) == (int_64)$5), [9073])
	$7 = [0]
	if ( ((uint_64)((int_64)*($2 + [328]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$16 }
	$5 = (uint_64)*((($2 + [312]) + [24])) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$5 = $1
	$7 = [1]
	$4 = $8
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$5 = $1
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$4 = ($8 + [1])
	$8 = $4
	if ( $7 ){ goto $label$20 }
	$7 = [1]
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$7 = [0]
	
.LABEL $label$16
	CALL eosio_assert($7, [9102])
	$5 = (int_64)0
	CALL eosio_assert(((int_64)*(($2 + [328])) > (int_64)0), [9119])
	$8 = CALL $213([9151])
	if ( ($8 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [10963])
	goto $label$22 
	
.LABEL $label$23
	if ( ($8 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$5 = (int_64)0
	
.LOOP $label$24:
	$7 = *(($8 + [9150]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$25 }
	CALL eosio_assert([0], [11008])
	
.LABEL $label$25
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$24 }
	$5 = ((int_64)$5 << (int_64)8)
	
.LABEL $label$21
	CALL eosio_assert(((int_64)*(($2 + [336])) == (int_64)((int_64)$5 | (int_64)4)), [9155])
	$8 = *(($2 + [344]))
	CALL eosio_assert((( *(($2 + [348])) ? uint_32($8 >> [1]) : ($8 & [1]) ) <= [257]), [9181])
	CALL eosio_assert(((int_32)*($6 + [24]) != (int_32)[4]), [9210])
	$5 = *($6 + [16])
	if ( ((int_64)*($2 + [328]) >= (int_64)$5) ){ goto $label$26 }
	CALL prints([8959])
	CALL prints([9300])
	CALL prints([9020])
	if ( (*($3) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$26
	*($2 + [176]) = $5
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [11061])
	$5 = *($0)
	*($2 + [16]) = ($2 + [176])
	CALL $68($9, $6, $5, ($2 + [16]))
	$7 = ($0 + [168])
	$4 = ($0 + [184])
	$5 = *($4)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$27 }
	$5 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($7), *(($0 + [176])), (int_64)-2189421640876556288, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$28 }
	CALL $4($7, $8)
	*($2 + [180]) = [0]
	*($2 + [176]) = $7
	$5 = *(*(CALL $69(($2 + [176])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	*(($0 + [184])) = $5
	goto $label$27 
	
.LABEL $label$28
	*(($0 + [184])) = (int_64)0
	
.LABEL $label$27
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [11514])
	$1 = *($4)
	$5 = *($0)
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$7()), [10375])
	*(($8 = CALL _Znwj([128])) + [100]) = $7
	*($8 + [48]) = (int_64)0
	*(($8 + [40])) = (int_64)-1
	*($8 + [32]) = (int_64)-1
	*($8) = $1
	*($8 + [16]) = [0]
	$11 = *($6)
	*($8 + [48]) = *($2 + [312])
	*($8 + [8]) = $11
	*($8 + [56]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$11 = CALL current_time()
	*($8 + [96]) = [0]
	*($8 + [64]) = [-1]
	*($8 + [60]) = ((uint_64)$11 / (uint_64)(int_64)1000000)
	*($2 + [144]) = (($2 + [176]) + [74])
	*($2 + [140]) = ($2 + [176])
	*($2 + [136]) = ($2 + [176])
	*($2 + [368]) = ($2 + [136])
	$12 = ($8 + [8])
	*($2 + [20]) = $12
	*($2 + [16]) = $8
	*($2 + [24]) = ($8 + [16])
	*($2 + [28]) = ($8 + [32])
	$13 = ($8 + [48])
	*($2 + [32]) = $13
	*($2 + [36]) = ($8 + [56])
	$14 = ($8 + [60])
	*($2 + [40]) = $14
	*($2 + [44]) = ($8 + [64])
	*($2 + [48]) = ($8 + [80])
	$15 = ($8 + [96])
	*($2 + [52]) = $15
	*($2 + [56]) = ($8 + [97])
	CALL $42(($2 + [16]), ($2 + [368]))
	$11 = *($8)
	$7 = ($0 + [176])
	*($8 + [104]) = CALL db_store_i64(*($7), (int_64)-2189421640876556288, $5, $11, ($2 + [176]), [74])
	if ( (uint_64)($11 <= *($4)) ){ goto $label$29 }
	*(($0 + [184])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$29
	$11 = *($7)
	$16 = *($8)
	*($2 + [16]) = *($12)
	*($8 + [108]) = CALL db_idx64_store($11, (int_64)-2189421640876556288, $5, $16, ($2 + [16]))
	$11 = *($7)
	$16 = *($8)
	*($2 + [16]) = *($14)
	*($8 + [112]) = CALL db_idx64_store($11, (int_64)-2189421640876556287, $5, $16, ($2 + [16]))
	$11 = *($7)
	$16 = *($8)
	*($2 + [16]) = *($13)
	*($8 + [116]) = CALL db_idx64_store($11, (int_64)-2189421640876556286, $5, $16, ($2 + [16]))
	$11 = *($7)
	$16 = *($8)
	*($2 + [16]) = *($15)
	*($8 + [120]) = CALL db_idx64_store($11, (int_64)-2189421640876556285, $5, $16, ($2 + [16]))
	*($2 + [16]) = $8
	$5 = *($8)
	*($2 + [176]) = $5
	$4 = *(($8 + [104]))
	*($2 + [136]) = $4
	$12 = ($0 + [196])
	$7 = *($12)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [200]))) ){ goto $label$32 }
	*($7 + [8]) = $5
	*($7 + [16]) = $4
	*($2 + [16]) = [0]
	*($7) = $8
	*($12) = ($7 + [24])
	$7 = *($2 + [16])
	$8 = [0]
	*($2 + [16]) = [0]
	if ( ($7 == 0) ){ goto $label$30 }
	goto $label$31 
	
.LABEL $label$32
	CALL $70(($0 + [192]), ($2 + [16]), ($2 + [176]), ($2 + [136]))
	$7 = *($2 + [16])
	$8 = [0]
	*($2 + [16]) = [0]
	if ( ($7 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv($7)
	
.LABEL $label$30
	$5 = *($0)
	CALL eosio_assert($10, [10432])
	CALL $71($9, $6, $5)
	CALL $72($0, ((int_64)*($2 + [312]) + (int_64)((int_64)((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	$5 = *($0)
	$11 = CALL current_time()
	$16 = CALL current_time()
	*(($2 + [216])) = (int_64)-1
	*(($2 + [264])) = (int_64)-1
	*(($4 = ($2 + [40]))) = $8
	*($2 + [176]) = $1
	*($2 + [208]) = (int_64)-1
	*($2 + [256]) = (int_64)-1
	*($2 + [192]) = $8
	*($2 + [232]) = ((uint_64)$11 / (uint_64)(int_64)1000000)
	*($2 + [240]) = [-1]
	*($2 + [272]) = $8
	*($2 + [32]) = (int_64)0
	$1 = *($6)
	*($2 + [16]) = $5
	*($2 + [24]) = (int_64)-4417158001692655616
	*($2 + [184]) = $1
	*($2 + [224]) = *($2 + [312])
	*($2 + [236]) = ((uint_64)$16 / (uint_64)(int_64)1000000)
	*(($7 = CALL _Znwj([16]))) = $5
	*($7 + [8]) = (int_64)3617214756542218240
	*(($2 + [52])) = $8
	$8 = ($7 + [16])
	*($4) = $8
	*(($2 + [36])) = $8
	*($2 + [32]) = $7
	*($2 + [44 align=4]) = (int_64)0
	CALL $73(($2 + [44]), [73])
	$8 = *(($2 + [48]))
	$7 = *($2 + [44])
	*($2 + [140]) = $7
	*($2 + [136]) = $7
	*($2 + [144]) = $8
	*($2 + [120]) = ($2 + [136])
	*($2 + [368]) = ($2 + [176])
	CALL $74(($2 + [368]), ($2 + [120]))
	CALL $75(($2 + [136]), ($2 + [16]))
	$8 = *($2 + [136])
	CALL send_inline($8, (*($2 + [140]) - $8))
	$8 = *($2 + [136])
	if ( ($8 == 0) ){ goto $label$33 }
	*($2 + [140]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$33
	$8 = *($2 + [44])
	if ( ($8 == 0) ){ goto $label$34 }
	*(($2 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$34
	$8 = *($2 + [32])
	if ( ($8 == 0) ){ goto $label$35 }
	*(($2 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$35
	$4 = ($0 + [88])
	$8 = *(($0 + [116]))
	if ( ((int_32)$8 == (int_32)*(($0 + [112]))) ){ goto $label$38 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$4), [11277])
	if ( ($8 == 0) ){ goto $label$36 }
	if ( ((int_32)*($8 + [48]) == (int_32)[1]) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$8 = CALL db_find_i64(*($4), *(($0 + [96])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$36 }
	$8 = CALL $15($4, $8)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$4), [11277])
	if ( ((int_32)*($8 + [48]) != (int_32)[1]) ){ goto $label$36 }
	
.LABEL $label$37
	$8 = *(($0 + [116]))
	if ( ((int_32)$8 == (int_32)*(($0 + [112]))) ){ goto $label$42 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$4), [11277])
	if ( $8 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$8 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$40 }
	$8 = CALL $15($4, $8)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$4), [11277])
	
.LABEL $label$41
	$5 = *($8 + [40])
	goto $label$39 
	
.LABEL $label$40
	$5 = (int_64)1
	
.LABEL $label$39
	$11 = ((int_64)((int_64)$5 * (int_64)*(($2 + [328]))) * (int_64)100)
	$8 = CALL $213([9226])
	if ( ($8 <= [8]) ){ goto $label$46 }
	CALL eosio_assert([0], [10963])
	goto $label$45 
	
.LABEL $label$46
	if ( ($8 == 0) ){ goto $label$44 }
	
.LABEL $label$45
	$5 = (int_64)0
	
.LOOP $label$47:
	$7 = *(($8 + [9225]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$48 }
	CALL eosio_assert([0], [11008])
	
.LABEL $label$48
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$47 }
	$5 = ((int_64)$5 << (int_64)8)
	goto $label$43 
	
.LABEL $label$44
	$5 = (int_64)0
	
.LABEL $label$43
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [11087])
	$17 = ((int_64)$5 | (int_64)6)
	$8 = [0]
	$16 = (uint_64)$5 >> (uint_64)(int_64)8
	$5 = $16)
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$1 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$52 }
	$5 = $1
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$52
	$5 = $1
	
.LOOP $label$53:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$50 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$53 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	$7 = [0]
	
.LABEL $label$49
	CALL eosio_assert($7, [11136])
	*(($2 + [168])) = [0]
	*($2 + [152]) = (int_64)-1
	*($2 + [160]) = (int_64)0
	$5 = *($0)
	*($2 + [144]) = $5
	*($2 + [136]) = (int_64)-7947877563513002112
	$8 = CALL db_find_i64((int_64)-7947877563513002112, $5, (int_64)3607749779137757184, $16)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$69 }
	$8 = CALL $76(($2 + [136]), $8)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($2 + [136])), [11277])
	if ( ((uint_64)*($8) >= (uint_64)$11) ){ goto $label$68 }
	
.LABEL $label$69
	*($2 + [24]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = [0]
	*($2 + [40]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = (int_64)1
	*($2 + [64]) = [0]
	*($2 + [72]) = (int_64)1676034
	*($2 + [80]) = (int_64)10
	$8 = *(($0 + [116]))
	if ( ((int_32)$8 == (int_32)*(($0 + [112]))) ){ goto $label$67 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$4), [11277])
	if ( $8 ){ goto $label$62 }
	$8 = ($2 + [16])
	goto $label$62 
	
.LABEL $label$68
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$8 = CALL $213([9232])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$61 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$66 }
	*($2 + [16]) = ($8 << [1])
	$6 = (($2 + [16]) | [1])
	if ( $8 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$67
	$8 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$63 }
	$8 = CALL $15($4, $8)
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$4), [11277])
	goto $label$62 
	
.LABEL $label$66
	$7 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($2 + [16]) = ($7 | [1])
	*($2 + [24]) = $6
	*($2 + [20]) = $8
	
.LABEL $label$65
	CALL memcpy($6, [9232], $8)
	
.LABEL $label$64
	$7 = [0]
	*(($6 + $8)) = [0]
	$5 = *($2 + [312])
	if ( ((int_64)$5 == (int_64)0) ){ goto $label$73 }
	$6 = *([0] + [11156])
	
.LOOP $label$75:
	*((($2 + [176]) + ($8 = $7))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$5 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$74 }
	$5 = ((int_64)$5 << (int_64)5)
	if ( ((int_64)$5 != (int_64)0) ){ goto $label$75 }
	
.LABEL $label$74
	*(($2 + [376])) = [0]
	*($2 + [368]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$72 }
	*($2 + [368]) = ($7 << [1])
	$6 = (($2 + [368]) | [1])
	goto $label$71 
	
.LABEL $label$73
	*(($2 + [376])) = [0]
	*($2 + [368]) = (int_64)0
	*($2 + [368]) = [0]
	$8 = (($2 + [368]) | [1])
	$7 = $8
	goto $label$70 
	
.LABEL $label$72
	$4 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($4)
	*($2 + [368]) = ($4 | [1])
	*($2 + [376]) = $6
	*($2 + [372]) = $7
	
.LABEL $label$71
	$4 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$76:
	*(($6 + $8)) = *((($2 + [176]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$76 }
	$7 = ($6 + $7)
	$8 = (($2 + [368]) | [1])
	
.LABEL $label$70
	*($7) = [0]
	$7 = *($2 + [368])
	$6 = ($7 & [1])
	$8 = CALL $186(($2 + [16]), ( *($2 + [376]) ? $8 : $6 ), ( *($2 + [372]) ? uint_32($7 >> [1]) : $6 ))
	$7 = ($8 + [8])
	*((($2 + [176]) + [8])) = *($7)
	*($2 + [176]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	*((($2 + [104]) + [8])) = [0]
	*($2 + [104]) = (int_64)0
	$8 = CALL $213([9239])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$60 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$79 }
	*($2 + [104]) = ($8 << [1])
	$6 = (($2 + [104]) | [1])
	$7 = $6
	if ( $8 ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$79
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($2 + [104]) = ($6 | [1])
	*($2 + [112]) = $7
	*($2 + [108]) = $8
	$6 = (($2 + [104]) | [1])
	
.LABEL $label$78
	CALL memcpy($7, [9239], $8)
	
.LABEL $label$77
	*(($7 + $8)) = [0]
	$8 = *($2 + [104])
	$7 = ($8 & [1])
	$8 = CALL $186(($2 + [176]), ( *($2 + [112]) ? $6 : $7 ), ( *($2 + [108]) ? uint_32($8 >> [1]) : $7 ))
	$7 = ($8 + [8])
	*((($2 + [120]) + [8])) = *($7)
	*($2 + [120]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	if ( (*($2 + [104]) & [1]) ){ goto $label$81 }
	if ( (*($2 + [176]) & [1]) ){ goto $label$80 }
	goto $label$59 
	
.LABEL $label$81
	CALL _ZdlPv(*((($2 + [104]) + [8])))
	if ( ((*($2 + [176]) & [1]) == 0) ){ goto $label$59 }
	
.LABEL $label$80
	CALL _ZdlPv(*($2 + [184]))
	$8 = [1]
	if ( ((*($2 + [368]) & [1]) == 0) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$63
	$8 = ($2 + [16])
	
.LABEL $label$62
	CALL memcpy(($2 + [176]), $8, [80])
	*($2 + [216]) = (int_64)1
	*($2 + [224]) = [0]
	CALL $56($4, ($2 + [176]), *($0))
	$6 = *($2 + [160])
	if ( ($6 == 0) ){ goto $label$36 }
	goto $label$54 
	
.LABEL $label$61
	CALL $180(($2 + [16]))
	
.LABEL $label$60
	CALL $180(($2 + [104]))
	
.LABEL $label$59
	$8 = [1]
	if ( (*($2 + [368]) & [1]) ){ goto $label$57 }
	
.LABEL $label$58
	if ( ((*($2 + [16]) & $8) == 0) ){ goto $label$55 }
	goto $label$56 
	
.LABEL $label$57
	CALL _ZdlPv(*(($2 + [376])))
	if ( ((*($2 + [16]) & $8) == 0) ){ goto $label$55 }
	
.LABEL $label$56
	CALL _ZdlPv(*($2 + [24]))
	
.LABEL $label$55
	$5 = *($0)
	*((($2 + [176]) + [24])) = $17
	*($2 + [176]) = $5
	*($2 + [192]) = $11
	*($2 + [184]) = *($2 + [312])
	$7 = CALL $181((($2 + [176]) + [32]), ($2 + [120]))
	*(($6 = (($2 + [16]) + [24]))) = [0]
	*($2 + [24]) = (int_64)-3617168760277827584
	*($2 + [16]) = (int_64)-7947877563513002112
	*($2 + [32]) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = $5
	*($8 + [8]) = (int_64)3617214756542218240
	*((($2 + [16]) + [36])) = [0]
	$4 = ($8 + [16])
	*($6) = $4
	*(($2 + [36])) = $4
	*($2 + [32]) = $8
	*($2 + [44 align=4]) = (int_64)0
	$8 = *($7)
	$7 = ( *((($2 + [176]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($7 + [32])
	$5 = (CASTING uint_64)(uint_32 $7)
	$7 = ($2 + [44])
	
.LOOP $label$82:
	$8 = ($8 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$82 }
	if ( ($8 == 0) ){ goto $label$84 }
	CALL $73($7, $8)
	$7 = *(($2 + [48]))
	$8 = *(($2 + [44]))
	goto $label$83 
	
.LABEL $label$84
	$7 = [0]
	$8 = [0]
	
.LABEL $label$83
	*($2 + [372]) = $8
	*($2 + [368]) = $8
	*($2 + [376]) = $7
	*($2 + [360]) = ($2 + [368])
	*($2 + [104]) = ($2 + [176])
	CALL $77(($2 + [104]), ($2 + [360]))
	CALL $75(($2 + [368]), ($2 + [16]))
	$8 = *($2 + [368])
	CALL send_inline($8, (*($2 + [372]) - $8))
	$8 = *($2 + [368])
	if ( ($8 == 0) ){ goto $label$85 }
	*($2 + [372]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$85
	$8 = *($2 + [44])
	if ( ($8 == 0) ){ goto $label$86 }
	*(($2 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$86
	$8 = *($2 + [32])
	if ( ($8 == 0) ){ goto $label$87 }
	*(($2 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$87
	if ( (*($2 + [208]) & [1]) ){ goto $label$90 }
	if ( (*($2 + [120]) & [1]) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$90
	CALL _ZdlPv(*(($2 + [216])))
	if ( ((*($2 + [120]) & [1]) == 0) ){ goto $label$88 }
	
.LABEL $label$89
	CALL _ZdlPv(*($2 + [128]))
	$6 = *($2 + [160])
	if ( $6 ){ goto $label$54 }
	goto $label$36 
	
.LABEL $label$88
	$6 = *($2 + [160])
	if ( ($6 == 0) ){ goto $label$36 }
	
.LABEL $label$54
	$4 = ($2 + [164])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$92 }
	
.LOOP $label$93:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$94 }
	CALL _ZdlPv($7)
	
.LABEL $label$94
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$93 }
	$8 = *(($2 + [160]))
	goto $label$91 
	
.LABEL $label$92
	$8 = $6
	
.LABEL $label$91
	*($4) = $6
	CALL _ZdlPv($8)
	
.LABEL $label$36
	$18 = ((float_32)(CASTING float_32)(int_64 *(($2 + [328]))) * (float_32)(float_32)0.012000000104308128)
	if ( ((float_32)(float_32)|$18| < (float_32)(float_32)9223372036854775808) ){ goto $label$97 }
	$5 = (int_64)-9223372036854775808
	if ( ((int_64)-9223372036854775808 < (int_64)1) ){ goto $label$95 }
	goto $label$96 
	
.LABEL $label$97
	$5 = (Rounds 0)($18)
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$95 }
	
.LABEL $label$96
	CALL $50($0, *($0), (int_64)-7947877572197772640, $5, [0])
	
.LABEL $label$95
	$9 = ($0 + [336])
	$5 = *($2 + [312])
	$7 = *(($0 + [364]))
	$4 = *(($0 + [360]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$101 }
	
.LOOP $label$103:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$5) ){ goto $label$102 }
	$7 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$103 }
	goto $label$101 
	
.LABEL $label$102
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$101 }
	CALL eosio_assert(((int_32)*(($6 + [28])) == (int_32)$9), [11277])
	if ( $6 ){ goto $label$100 }
	$10 = ($0 + [344])
	goto $label$99 
	
.LABEL $label$101
	$10 = ($0 + [344])
	$8 = CALL db_find_i64(*($9), *($10), (int_64)-5000987459492009680, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$99 }
	$6 = CALL $78($9, $8)
	CALL eosio_assert(((int_32)*($6 + [28]) == (int_32)$9), [11277])
	
.LABEL $label$100
	if ( *($6 + [24]) ){ goto $label$98 }
	$1 = *($0)
	CALL eosio_assert([1], [10432])
	CALL eosio_assert(((int_32)*($6 + [28]) == (int_32)$9), [10467])
	CALL eosio_assert(((int_64)*(($0 + [336])) == (int_64)CALL $fimport$7()), [10513])
	$8 = ($6 + [24])
	*($2 + [120]) = *($8)
	*($8) = [1]
	$5 = *($6)
	CALL eosio_assert([1], [10564])
	*($2 + [144]) = (($2 + [176]) + [25])
	*($2 + [140]) = ($2 + [176])
	*($2 + [136]) = ($2 + [176])
	*($2 + [368]) = ($2 + [136])
	*($2 + [20]) = ($6 + [8])
	*($2 + [16]) = $6
	*($2 + [24]) = ($6 + [16])
	*($2 + [28]) = ($6 + [20])
	*($2 + [32]) = $8
	CALL $79(($2 + [16]), ($2 + [368]))
	CALL db_update_i64(*($6 + [32]), $1, ($2 + [176]), [25])
	$7 = ($0 + [352])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$104 }
	*($7) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$104
	*($2 + [16]) = *($8)
	if ( (CALL $212(($2 + [120]), ($2 + [16]), [8]) == 0) ){ goto $label$98 }
	$8 = *($6 + [36])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$105 }
	$8 = CALL db_idx64_find_primary(*(($0 + [336])), *(($0 + [344])), (int_64)-5000987459492009680, ($2 + [368]), $5)
	*(($6 + [36])) = $8
	
.LABEL $label$105
	CALL db_idx64_update($8, $1, ($2 + [16]))
	goto $label$98 
	
.LABEL $label$99
	$5 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [336])) == (int_64)CALL $fimport$7()), [10375])
	*(($8 = CALL _Znwj([40])) + [28]) = $9
	*($8 + [8]) = (int_64)-7947877567501544080
	*($8) = *($2 + [312])
	*($8 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$1 = CALL current_time()
	*($8 + [24]) = [1]
	*($8 + [20]) = ((uint_64)$1 / (uint_64)(int_64)1000000)
	*($2 + [144]) = (($2 + [176]) + [25])
	*($2 + [140]) = ($2 + [176])
	*($2 + [136]) = ($2 + [176])
	*($2 + [368]) = ($2 + [136])
	*($2 + [20]) = ($8 + [8])
	*($2 + [16]) = $8
	*($2 + [24]) = ($8 + [16])
	*($2 + [28]) = ($8 + [20])
	$7 = ($8 + [24])
	*($2 + [32]) = $7
	CALL $79(($2 + [16]), ($2 + [368]))
	$1 = *($8)
	$6 = ($0 + [344])
	*($8 + [32]) = CALL db_store_i64(*($6), (int_64)-5000987459492009680, $5, $1, ($2 + [176]), [25])
	$4 = ($0 + [352])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$106 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$106
	$1 = *($6)
	$11 = *($8)
	*($2 + [16]) = *($7)
	*($8 + [36]) = CALL db_idx64_store($1, (int_64)-5000987459492009680, $5, $11, ($2 + [16]))
	*($2 + [16]) = $8
	$5 = *($8)
	*($2 + [176]) = $5
	$6 = *(($8 + [32]))
	*($2 + [136]) = $6
	$4 = ($0 + [364])
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [368]))) ){ goto $label$109 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($2 + [16]) = [0]
	*($7) = $8
	*($4) = ($7 + [24])
	$8 = *($2 + [16])
	*($2 + [16]) = [0]
	if ( ($8 == 0) ){ goto $label$107 }
	goto $label$108 
	
.LABEL $label$109
	CALL $80(($0 + [360]), ($2 + [16]), ($2 + [176]), ($2 + [136]))
	$8 = *($2 + [16])
	*($2 + [16]) = [0]
	if ( ($8 == 0) ){ goto $label$107 }
	
.LABEL $label$108
	CALL _ZdlPv($8)
	
.LABEL $label$107
	$5 = *($2 + [312])
	$7 = *(($0 + [364]))
	$4 = *(($0 + [360]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$110 }
	
.LOOP $label$112:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$5) ){ goto $label$111 }
	$7 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$112 }
	goto $label$110 
	
.LABEL $label$111
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$110 }
	CALL eosio_assert(((int_32)*(($6 + [28])) == (int_32)$9), [11277])
	goto $label$98 
	
.LABEL $label$110
	$6 = [0]
	$8 = CALL db_find_i64(*($9), *($10), (int_64)-5000987459492009680, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$98 }
	$6 = CALL $78($9, $8)
	CALL eosio_assert(((int_32)*($6 + [28]) == (int_32)$9), [11277])
	
.LABEL $label$98
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9271])
	$19 = (PROMOTE float_64)(float_32 ((float_32)(CASTING float_32)(int_64 *(($2 + [328]))) * (float_32)(float_32)0.019999999552965164))
	$5 = *($6 + [8])
	if ( ((int_64)$5 != (int_64)-7947877567501544080) ){ goto $label$119 }
	$19 = ((float_64)$19 * (float_64)(float_64)0.4)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$118 }
	$5 = (int_64)-9223372036854775808
	if ( ((int_64)-9223372036854775808 >= (int_64)1) ){ goto $label$117 }
	goto $label$113 
	
.LABEL $label$119
	$20 = ((float_64)$19 * (float_64)(float_64)0.1)
	if ( ((float_64)(float_64)|$20| < (float_64)(float_64)9223372036854775808) ){ goto $label$116 }
	$1 = (int_64)-9223372036854775808
	if ( ((int_64)-9223372036854775808 < (int_64)1) ){ goto $label$114 }
	goto $label$115 
	
.LABEL $label$118
	$5 = (Rounds 0)($19)
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$113 }
	
.LABEL $label$117
	CALL $50($0, *($0), (int_64)-7947877567501544080, $5, [0])
	if ( (*($3) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$116
	$1 = (Rounds 0)($20)
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$114 }
	
.LABEL $label$115
	CALL $50($0, *($0), $5, $1, [0])
	$19 = (PROMOTE float_64)(float_32 ((float_32)(CASTING float_32)(int_64 *(($2 + [328]))) * (float_32)(float_32)0.019999999552965164))
	
.LABEL $label$114
	$19 = ((float_64)$19 * (float_64)(float_64)0.3)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$121 }
	$5 = (int_64)-9223372036854775808
	if ( ((int_64)-9223372036854775808 >= (int_64)1) ){ goto $label$120 }
	goto $label$113 
	
.LABEL $label$121
	$5 = (Rounds 0)($19)
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$113 }
	
.LABEL $label$120
	CALL $50($0, *($0), (int_64)-7947877567501544080, $5, [0])
	
.LABEL $label$113
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($2 + [352])))
	
.LABEL $label$1
	$global$0 = ($2 + [384])
	(unreachable)
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$2 = ($global$0 - [272])
	$global$0 = $2
	CALL eosio_assert(((int_64)$1 == (int_64)-7947877563513002112), [9378])
	CALL $65(($2 + [144]))
	$1 = *($0)
	if ( ((int_64)*($2 + [144]) != (int_64)$1) ){ goto $label$2 }
	CALL prints([8959])
	CALL prints([9323])
	CALL prints([9020])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($2 + [152]) == (int_64)$1), [9398])
	$1 = (int_64)0
	CALL eosio_assert(((int_64)*($2 + [160]) > (int_64)0), [9119])
	$3 = CALL $213([9226])
	if ( ($3 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [10963])
	goto $label$4 
	
.LABEL $label$5
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = (int_64)0
	
.LOOP $label$6:
	$4 = *(($3 + [9225]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [11008])
	
.LABEL $label$7
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$6 }
	$1 = ((int_64)$1 << (int_64)8)
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*(($2 + [168])) == (int_64)((int_64)$1 | (int_64)6)), [9155])
	$3 = *($2 + [176])
	CALL eosio_assert((( *(($2 + [180])) ? uint_32($3 >> [1]) : ($3 & [1]) ) <= [257]), [9181])
	$5 = CALL $181(($2 + [128]), ($2 + [176]))
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [196]) = [1]
	*($2 + [8]) = *($2 + [192])
	CALL $66(($2 + [16]), $5, ($2 + [8]))
	$1 = CALL $191((*($2 + [16]) + [12]), [0], [10])
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$8 }
	$4 = *($2 + [20])
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$12
	$4 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$11 }
	$3 = *($2 + [16])
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($2 + [20]) = $6
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((*($5) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$13
	$7 = ($0 + [128])
	$4 = *(($0 + [156]))
	$5 = *(($0 + [152]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$17:
	$3 = ($4 + [-24])
	$6 = *($3)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$16 }
	$4 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$7), [11277])
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	$3 = CALL db_find_i64(*($7), *(($0 + [136])), (int_64)7035938313001238528, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$14 }
	$6 = CALL $2($7, $3)
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$7), [11277])
	
.LABEL $label$14
	$5 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($5, [9033])
	CALL eosio_assert(((int_32)*($6 + [24]) != (int_32)[4]), [9210])
	CALL eosio_assert(CALL $46($0, $6), [9428])
	if ( ((int_64)*(($2 + [160])) >= (int_64)*($6 + [16])) ){ goto $label$18 }
	CALL prints([8959])
	CALL prints([9300])
	CALL prints([9020])
	goto $label$1 
	
.LABEL $label$18
	$4 = ($0 + [168])
	$8 = ($0 + [184])
	$1 = *($8)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$19 }
	$1 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($4), *(($0 + [176])), (int_64)-2189421640876556288, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$20 }
	CALL $4($4, $3)
	*($2 + [20]) = [0]
	*($2 + [16]) = $4
	$1 = *(*(CALL $69(($2 + [16])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	*(($0 + [184])) = $1
	goto $label$19 
	
.LABEL $label$20
	*(($0 + [184])) = (int_64)0
	
.LABEL $label$19
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [11514])
	$9 = *($8)
	$1 = *($0)
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$7()), [10375])
	*(($3 = CALL _Znwj([128])) + [100]) = $4
	*($3 + [48]) = (int_64)0
	*(($3 + [40])) = (int_64)-1
	*($3 + [32]) = (int_64)-1
	*($3) = $9
	*($3 + [16]) = [0]
	$10 = *($6)
	*($3 + [48]) = *($2 + [144])
	*($3 + [8]) = $10
	*($3 + [56]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$10 = CALL current_time()
	*($3 + [96]) = [0]
	*($3 + [64]) = [-1]
	*($3 + [60]) = ((uint_64)$10 / (uint_64)(int_64)1000000)
	*($2 + [264]) = (($2 + [16]) + [74])
	*($2 + [260]) = ($2 + [16])
	*($2 + [256]) = ($2 + [16])
	*($2 + [248]) = ($2 + [256])
	$11 = ($3 + [8])
	*($2 + [196]) = $11
	*($2 + [192]) = $3
	*($2 + [200]) = ($3 + [16])
	*($2 + [204]) = ($3 + [32])
	$12 = ($3 + [48])
	*($2 + [208]) = $12
	*($2 + [212]) = ($3 + [56])
	$13 = ($3 + [60])
	*($2 + [216]) = $13
	*($2 + [220]) = ($3 + [64])
	*($2 + [224]) = ($3 + [80])
	$14 = ($3 + [96])
	*($2 + [228]) = $14
	*($2 + [232]) = ($3 + [97])
	CALL $42(($2 + [192]), ($2 + [248]))
	$10 = *($3)
	$4 = ($0 + [176])
	*($3 + [104]) = CALL db_store_i64(*($4), (int_64)-2189421640876556288, $1, $10, ($2 + [16]), [74])
	if ( (uint_64)($10 <= *($8)) ){ goto $label$21 }
	*(($0 + [184])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	$10 = *($4)
	$15 = *($3)
	*($2 + [192]) = *($11)
	*($3 + [108]) = CALL db_idx64_store($10, (int_64)-2189421640876556288, $1, $15, ($2 + [192]))
	$10 = *($4)
	$15 = *($3)
	*($2 + [192]) = *($13)
	*($3 + [112]) = CALL db_idx64_store($10, (int_64)-2189421640876556287, $1, $15, ($2 + [192]))
	$10 = *($4)
	$15 = *($3)
	*($2 + [192]) = *($12)
	*($3 + [116]) = CALL db_idx64_store($10, (int_64)-2189421640876556286, $1, $15, ($2 + [192]))
	$10 = *($4)
	$15 = *($3)
	*($2 + [192]) = *($14)
	*($3 + [120]) = CALL db_idx64_store($10, (int_64)-2189421640876556285, $1, $15, ($2 + [192]))
	*($2 + [192]) = $3
	$1 = *($3)
	*($2 + [16]) = $1
	$8 = *(($3 + [104]))
	*($2 + [256]) = $8
	$11 = ($0 + [196])
	$4 = *($11)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [200]))) ){ goto $label$24 }
	*($4 + [8]) = $1
	*($4 + [16]) = $8
	*($2 + [192]) = [0]
	*($4) = $3
	*($11) = ($4 + [24])
	$4 = *($2 + [192])
	$3 = [0]
	*($2 + [192]) = [0]
	if ( $4 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL $70(($0 + [192]), ($2 + [192]), ($2 + [16]), ($2 + [256]))
	$4 = *($2 + [192])
	$3 = [0]
	*($2 + [192]) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$1 = *($0)
	CALL eosio_assert($5, [10432])
	CALL $82($7, $6, $1)
	CALL $72($0, ((int_64)*($2 + [144]) + (int_64)((int_64)((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000) & (int_64)4294967295)))
	$1 = *($0)
	$10 = CALL current_time()
	$15 = CALL current_time()
	*(($2 + [56])) = (int_64)-1
	*(($2 + [104])) = (int_64)-1
	*($2 + [16]) = $9
	*($2 + [48]) = (int_64)-1
	*($2 + [96]) = (int_64)-1
	*($2 + [32]) = $3
	*($2 + [72]) = ((uint_64)$10 / (uint_64)(int_64)1000000)
	*($2 + [80]) = [-1]
	*($2 + [112]) = $3
	$9 = *($6)
	*($2 + [192]) = $1
	*($2 + [200]) = (int_64)-4417158001692655616
	*($2 + [24]) = $9
	*($2 + [64]) = *($2 + [144])
	*($2 + [76]) = ((uint_64)$15 / (uint_64)(int_64)1000000)
	*(($4 = CALL _Znwj([16]))) = $1
	*($4 + [8]) = (int_64)3617214756542218240
	*(($2 + [228])) = $3
	$3 = ($4 + [16])
	*(($2 + [216])) = $3
	*(($2 + [212])) = $3
	*($2 + [208]) = $4
	*($2 + [220 align=4]) = (int_64)0
	CALL $73(($2 + [220]), [73])
	$3 = *(($2 + [224]))
	$4 = *($2 + [220])
	*($2 + [260]) = $4
	*($2 + [256]) = $4
	*($2 + [264]) = $3
	*($2 + [240]) = ($2 + [256])
	*($2 + [248]) = ($2 + [16])
	CALL $74(($2 + [248]), ($2 + [240]))
	CALL $75(($2 + [256]), ($2 + [192]))
	$3 = *($2 + [256])
	CALL send_inline($3, (*($2 + [260]) - $3))
	$3 = *($2 + [256])
	if ( ($3 == 0) ){ goto $label$25 }
	*($2 + [260]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$25
	$3 = *($2 + [220])
	if ( ($3 == 0) ){ goto $label$26 }
	*(($2 + [224])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$3 = *($2 + [208])
	if ( ($3 == 0) ){ goto $label$1 }
	*(($2 + [212])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	if ( ((*(($2 + [176])) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($2 + [184])))
	
.LABEL $label$27
	$global$0 = ($2 + [272])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [256])
	$global$0 = $3
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = ($5 & [1])
	$1 = ( *($1 + [8]) ? ($1 + [1]) : $6 )
	*(($3 + [196])) = $1
	$7 = ([10688] | [1])
	*($3 + [176]) = $7
	*($3 + [208]) = [0]
	*($3 + [180 align=4]) = *($2)
	*($3 + [192]) = $1
	*($3 + [200]) = $1
	$4 = ( $4 ? uint_32($5 >> [1]) : $6 )
	$2 = ($1 + $4)
	*($3 + [204]) = $2
	$5 = (($3 + [176]) | [4])
	if ( ($4 == 0) ){ goto $label$6 }
	CALL void ($3 + [216])((int_32 $5), (int_32 $1), (int_32 $2), (int_32 *((([10688] & [-2]) + [4]))))
	$2 = *($3 + [204])
	$7 = *($3 + [216])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$5 }
	$1 = *($3 + [220])
	goto $label$4 
	
.LABEL $label$6
	*($3 + [216]) = [0]
	*($3 + [216]) = $7
	if ( (($7 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$1 = *($3 + [220])
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$4 }
	if ( ((int_32)*(($3 + [196])) != (int_32)$1) ){ goto $label$4 }
	*(($3 + [208])) = [1]
	
.LABEL $label$4
	*(($3 + [196])) = $7
	$7 = ($3 + [200])
	*(($3 + [192])) = *($7)
	*($7) = $1
	$4 = [0]
	*($3 + [216]) = [0]
	$7 = *($3 + [176])
	if ( ($7 == 0) ){ goto $label$1 }
	*($3 + [216]) = $7
	if ( ($7 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	CALL void $5((int_32 (($3 + [216]) | [4])), (int_32 [0]), (int_32 *(($7 & [-2]))))
	$2 = *(($3 + [204]))
	$1 = *(($3 + [200]))
	$4 = *($3 + [176])
	goto $label$1 
	
.LABEL $label$2
	*(($3 + [228])) = *(($5 + [8]))
	*($3 + [220 align=4]) = *($5)
	$4 = $7
	
.LABEL $label$1
	*($3 + [240]) = $1
	*($3 + [244]) = $2
	*($3 + [232]) = *(($3 + [192]))
	*($3 + [248]) = *(($3 + [208]))
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ($4 & [1]) ){ goto $label$8 }
	$1 = *(($4 & [-2]))
	if ( ($1 == 0) ){ goto $label$8 }
	CALL void $5((int_32 $5), (int_32 [2]), (int_32 $1))
	
.LABEL $label$8
	*($3 + [176]) = [0]
	
.LABEL $label$7
	*(($3 + [116])) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [96]) = [0]
	*($3 + [124]) = [0]
	*($3 + [128]) = [1]
	*($3 + [136]) = [0]
	*($3 + [160]) = (int_64)0
	*($3 + [168]) = [1]
	*($3 + [152]) = *($3 + [112])
	*($3 + [40]) = [0]
	$1 = [0]
	$7 = *($3 + [216])
	if ( ($7 == 0) ){ goto $label$9 }
	*($3 + [40]) = $7
	if ( ($7 & [1]) ){ goto $label$10 }
	CALL void (($3 + [216]) | [4])((int_32 (($3 + [40]) | [4])), (int_32 [0]), (int_32 *(($7 & [-2]))))
	$1 = *($3 + [136])
	goto $label$9 
	
.LABEL $label$10
	*((($3 + [40]) + [12])) = *((($3 + [216]) + [12]))
	*($3 + [44 align=4]) = *($3 + [220 align=4])
	$1 = [0]
	
.LABEL $label$9
	*($3) = [0]
	*($3 + [56]) = *((($3 + [216]) + [16]))
	*($3 + [64]) = *((($3 + [216]) + [24]))
	*($3 + [72]) = *((($3 + [216]) + [32]))
	if ( ($1 == 0) ){ goto $label$11 }
	*($3) = $1
	if ( ($1 & [1]) ){ goto $label$12 }
	CALL void (($3 + [136]) | [4])((int_32 ($3 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$11 
	
.LABEL $label$12
	*(($3 + [12])) = *((($3 + [136]) + [12]))
	*($3 + [4 align=4]) = *($3 + [140 align=4])
	
.LABEL $label$11
	*($3 + [16]) = *((($3 + [136]) + [16]))
	*($3 + [24]) = *((($3 + [136]) + [24]))
	*($3 + [32]) = *((($3 + [136]) + [32]))
	$4 = CALL $140(($3 + [80]), ($3 + [40]), $3)
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$13 }
	if ( ($1 & [1]) ){ goto $label$14 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$14 }
	$7 = ($3 | [4])
	CALL void $7((int_32 $7), (int_32 [2]), (int_32 $1))
	
.LABEL $label$14
	*($3) = [0]
	
.LABEL $label$13
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$15 }
	if ( ($1 & [1]) ){ goto $label$16 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$16 }
	$7 = (($3 + [40]) | [4])
	CALL void $7((int_32 $7), (int_32 [2]), (int_32 $1))
	
.LABEL $label$16
	*($3 + [40]) = [0]
	
.LABEL $label$15
	$2 = *($0)
	*($0) = *($4)
	*($4) = $2
	$8 = *($4 + [4 align=4])
	$7 = *($0 + [4])
	*($4 + [4]) = $7
	$1 = *($0 + [8])
	*($0 + [4 align=4]) = $8
	*($4 + [8]) = $1
	if ( ($2 == 0) ){ goto $label$17 }
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = ($7 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$21
	$7 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$20 }
	$1 = *($4)
	goto $label$18 
	
.LABEL $label$19
	$1 = $2
	
.LABEL $label$18
	*(($4 + [4])) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$17
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$22 }
	if ( ($1 & [1]) ){ goto $label$23 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$23 }
	$7 = (($3 + [136]) | [4])
	CALL void $7((int_32 $7), (int_32 [2]), (int_32 $1))
	
.LABEL $label$23
	*($3 + [136]) = [0]
	
.LABEL $label$22
	$1 = *($3 + [216])
	if ( ($1 == 0) ){ goto $label$24 }
	if ( ($1 & [1]) ){ goto $label$25 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$25 }
	$7 = (($3 + [216]) | [4])
	CALL void $7((int_32 $7), (int_32 [2]), (int_32 $1))
	
.LABEL $label$25
	*($3 + [216]) = [0]
	
.LABEL $label$24
	$global$0 = ($3 + [256])
	return $0
}

void .FUNC $61 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth((int_64)-7947877572870428864)
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = [0]
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)1
	*($2 + [48]) = [0]
	*($2 + [56]) = (int_64)1676034
	*($2 + [64]) = (int_64)10
	$3 = ($0 + [88])
	$4 = *(($0 + [116]))
	if ( ((int_32)$4 == (int_32)*(($0 + [112]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [11277])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $15($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [11277])
	goto $label$1 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	CALL memcpy(($2 + [80]), $4, [80])
	*($2 + [144]) = $1
	CALL $56($3, ($2 + [80]), *($0))
	$global$0 = ($2 + [160])
}

void .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth((int_64)-7947877572870428864)
	$2 = ($0 + [88])
	$3 = *(($0 + [116]))
	if ( ((int_32)$3 == (int_32)*(($0 + [112]))) ){ goto $label$4 }
	$0 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$2), [11277])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$0 = CALL db_find_i64(*($2), *(($0 + [96])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $15($2, $0)
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$2), [11277])
	
.LABEL $label$3
	$4 = *(($0 + [8]))
	$5 = *($0)
	$6 = *($0 + [48])
	$7 = *($0 + [16])
	$8 = *($0 + [56])
	$9 = *($0 + [40])
	$10 = *($0 + [32])
	$11 = *($0 + [24])
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	$9 = (int_64)1
	$8 = (int_64)1676034
	$10 = (int_64)0
	$11 = (int_64)0
	$7 = (int_64)0
	$5 = (int_64)0
	$4 = (int_64)0
	
.LABEL $label$1
	CALL prints([8829])
	*($1 + [8]) = $4
	*($1) = $5
	CALL printui128($1)
	CALL prints([8856])
	CALL prints([8859])
	CALL printui($7)
	CALL prints([8856])
	CALL prints([8879])
	CALL printui($11)
	CALL prints([8856])
	CALL prints([8890])
	CALL printui($10)
	CALL prints([8856])
	CALL prints([8908])
	CALL printui($9)
	CALL prints([8856])
	CALL prints([8930])
	CALL printui($6)
	CALL prints([8856])
	CALL prints([8945])
	CALL printui($8)
	CALL prints([8856])
	$global$0 = ($1 + [16])
}

void .FUNC $63 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9)
{
	CALL require_auth(*($0))
}

void .FUNC $62 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_64 $5, int_64 $6, int_32 $7, int_32 $8, int_32 $9, int_64 $10, int_64 $11, int_32 $12)
{
	CALL require_auth(*($0))
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth((int_64)-7947877572870428864)
	$4 = *($1)
	$3 = CALL $213([8192])
	if ( ((int_32)$3 != (int_32)( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$3 }
	if ( CALL $187($1, [0], [-1], [8192], $3) ){ goto $label$3 }
	*(($2 + [32])) = [0]
	*($2 + [24]) = (int_64)0
	$4 = CALL $213([8253])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($2 + [24]) = ($4 << [1])
	$3 = (($2 + [24]) | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [24]) = ($5 | [1])
	*($2 + [32]) = $3
	*($2 + [28]) = $4
	
.LABEL $label$5
	CALL memcpy($3, [8253], $4)
	
.LABEL $label$4
	*(($3 + $4)) = [0]
	CALL $1($0, ($2 + [24]))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($2 + [32]))
	
.LABEL $label$7
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$4 = CALL $213([8347])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$10 }
	*($2 + [8]) = ($4 << [1])
	$3 = (($2 + [8]) | [1])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($2 + [8]) = ($5 | [1])
	*($2 + [16]) = $3
	*($2 + [12]) = $4
	
.LABEL $label$9
	CALL memcpy($3, [8347], $4)
	
.LABEL $label$8
	*(($3 + $4)) = [0]
	CALL $1($0, ($2 + [8]))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$11
	$4 = CALL db_lowerbound_i64(*($0 + [128]), *(($0 + [136])), (int_64)7035938313001238528, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$5 = ($0 + [128])
	$3 = CALL $2($5, $4)
	
.LOOP $label$12:
	CALL eosio_assert([1], [11332])
	CALL eosio_assert([1], [10650])
	$4 = [0]
	$6 = CALL db_next_i64(*($3 + [88]), ($2 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL $2($5, $6)
	
.LABEL $label$13
	CALL $3($5, $3)
	$3 = $4
	if ( $4 ){ goto $label$12 }
	
.LABEL $label$3
	$4 = *($1)
	$7 = ($1 + [4])
	$3 = CALL $213([8253])
	if ( ((int_32)$3 != (int_32)( *($7) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$14 }
	if ( CALL $187($1, [0], [-1], [8253], $3) ){ goto $label$14 }
	$4 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)-2189421640876556288, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$14 }
	$8 = ($0 + [128])
	$9 = ($0 + [168])
	$10 = CALL $4($9, $4)
	$11 = ($0 + [156])
	$12 = ($0 + [152])
	$13 = ($0 + [136])
	
.LOOP $label$15:
	$14 = *($10 + [8])
	$3 = *($11)
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$17 }
	
.LOOP $label$19:
	$4 = ($3 + [-24])
	$5 = *($4)
	if ( ((int_64)*($5) == (int_64)$14) ){ goto $label$18 }
	$3 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*($5 + [84]) == (int_32)$8), [11277])
	goto $label$16 
	
.LABEL $label$17
	$5 = [0]
	$4 = CALL db_find_i64(*($8), *($13), (int_64)7035938313001238528, $14)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$16 }
	$5 = CALL $2($8, $4)
	CALL eosio_assert(((int_32)*($5 + [84]) == (int_32)$8), [11277])
	
.LABEL $label$16
	$4 = [0]
	$14 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [10432])
	CALL $5($8, $5, $14)
	$3 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($3, [11332])
	CALL eosio_assert($3, [10650])
	$3 = CALL db_next_i64(*($10 + [104]), ($2 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$20 }
	$4 = CALL $4($9, $3)
	
.LABEL $label$20
	CALL $6($9, $10)
	$10 = $4
	if ( $4 ){ goto $label$15 }
	
.LABEL $label$14
	$4 = *($1)
	$3 = CALL $213([8347])
	if ( ((int_32)$3 != (int_32)( *($7) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$21 }
	if ( CALL $187($1, [0], [-1], [8347], $3) ){ goto $label$21 }
	$4 = CALL db_lowerbound_i64(*($0 + [208]), *(($0 + [216])), (int_64)-4460071177754247168, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$21 }
	$8 = ($0 + [128])
	$9 = ($0 + [208])
	$10 = CALL $7($9, $4)
	$11 = ($0 + [156])
	$12 = ($0 + [152])
	$13 = ($0 + [136])
	
.LOOP $label$22:
	$14 = *($10 + [8])
	$3 = *($11)
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$24 }
	
.LOOP $label$26:
	$4 = ($3 + [-24])
	$5 = *($4)
	if ( ((int_64)*($5) == (int_64)$14) ){ goto $label$25 }
	$3 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$24 }
	CALL eosio_assert(((int_32)*($5 + [84]) == (int_32)$8), [11277])
	goto $label$23 
	
.LABEL $label$24
	$5 = [0]
	$4 = CALL db_find_i64(*($8), *($13), (int_64)7035938313001238528, $14)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$23 }
	$5 = CALL $2($8, $4)
	CALL eosio_assert(((int_32)*($5 + [84]) == (int_32)$8), [11277])
	
.LABEL $label$23
	$4 = [0]
	$14 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [10432])
	CALL $8($8, $5, $14)
	$3 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($3, [11332])
	CALL eosio_assert($3, [10650])
	$3 = CALL db_next_i64(*($10 + [104]), ($2 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$27 }
	$4 = CALL $7($9, $3)
	
.LABEL $label$27
	CALL $9($9, $10)
	$10 = $4
	if ( $4 ){ goto $label$22 }
	
.LABEL $label$21
	$4 = *($1)
	$10 = ($1 + [4])
	$3 = CALL $213([8356])
	if ( ((int_32)$3 != (int_32)( *($10) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$28 }
	if ( CALL $187($1, [0], [-1], [8356], $3) ){ goto $label$28 }
	$4 = CALL db_lowerbound_i64(*($0 + [248]), *(($0 + [256])), (int_64)7687447330970140672, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$28 }
	$5 = ($0 + [248])
	$3 = CALL $10($5, $4)
	
.LOOP $label$29:
	CALL eosio_assert([1], [11332])
	CALL eosio_assert([1], [10650])
	$4 = [0]
	$6 = CALL db_next_i64(*($3 + [60]), ($2 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$30 }
	$4 = CALL $10($5, $6)
	
.LABEL $label$30
	CALL $11($5, $3)
	$3 = $4
	if ( $4 ){ goto $label$29 }
	
.LABEL $label$28
	$4 = *($1)
	$3 = CALL $213([8364])
	if ( ((int_32)$3 != (int_32)( *($10) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$31 }
	if ( CALL $187($1, [0], [-1], [8364], $3) ){ goto $label$31 }
	$4 = CALL db_lowerbound_i64(*($0 + [296]), *(($0 + [304])), (int_64)-2042605223187841024, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$31 }
	$5 = ($0 + [296])
	$3 = CALL $12($5, $4)
	
.LOOP $label$32:
	CALL eosio_assert([1], [11332])
	CALL eosio_assert([1], [10650])
	$4 = [0]
	$6 = CALL db_next_i64(*($3 + [60]), ($2 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$33 }
	$4 = CALL $12($5, $6)
	
.LABEL $label$33
	CALL $13($5, $3)
	$3 = $4
	if ( $4 ){ goto $label$32 }
	
.LABEL $label$31
	$4 = *($1)
	$3 = CALL $213([8374])
	if ( ((int_32)$3 != (int_32)( *(($1 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$35 }
	if ( (CALL $187($1, [0], [-1], [8374], $3) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$34
	CALL $14(($0 + [88]))
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $180(($2 + [24]))
	
.LABEL $label$1
	CALL $180(($2 + [8]))
}

void .FUNC $89 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($0 + [128])
	$7 = *(($0 + [156]))
	$6 = *(($0 + [152]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$4 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [136])), (int_64)7035938313001238528, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $2($5, $8)
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	
.LABEL $label$2
	$8 = *($9 + [28])
	$6 = uint_32($8 >> [16])
	*($4) = $6
	$7 = ($8 & [65535])
	$8 = ($7 + $3)
	CALL eosio_assert(((uint_32)$8 >= (uint_32)$7), [9949])
	*($4 + [4]) = $8
	if ( ((uint_32)$8 > (uint_32)*($9 + [8])) ){ goto $label$7 }
	if ( ((uint_32)$6 <= (uint_32)*($9 + [12])) ){ goto $label$6 }
	
.LABEL $label$7
	CALL prints([9964])
	CALL printui((CASTING uint_64)(uint_32 $3))
	CALL prints([8856])
	CALL eosio_assert([0], [9978])
	
.LABEL $label$6
	$2 = *($0)
	*($4 + [8]) = $4
	CALL $105($5, $9, $2, ($4 + [8]))
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $88 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL require_auth($1)
	$5 = ($0 + [128])
	$7 = *(($0 + [156]))
	$6 = *(($0 + [152]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [136])), (int_64)7035938313001238528, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $2($5, $8)
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [8773])
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)[2]), [9587])
	if ( CALL $46($0, $9) ){ goto $label$5 }
	$11 = *($9 + [16])
	*($4) = $11
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [11193])
	$11 = *($0)
	*($4 + [176]) = $4
	CALL $52($5, $9, $11, ($4 + [176]))
	
.LABEL $label$5
	$7 = ($0 + [208])
	$8 = CALL db_lowerbound_i64(*($0 + [208]), *(($0 + [216])), (int_64)-4460071177754247168, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$7 }
	$8 = CALL $7($7, $8)
	*($4 + [116]) = $8
	if ( ((int_64)*($8 + [48]) != (int_64)$1) ){ goto $label$8 }
	$12 = [2]
	goto $label$6 
	
.LABEL $label$8
	$12 = [0]
	goto $label$6 
	
.LABEL $label$7
	$12 = [152]
	
.LABEL $label$6
	
.LOOP $label$9:
	goto $label$278 
	
.LABEL $label$280
	$8 = CALL $7($7, $8)
	if ( ((int_64)*($8 + [48]) != (int_64)$1) ){ goto $label$124 }
	$12 = [2]
	goto $label$9 
	
.LABEL $label$279
	if ( ((int_64)*($8 + [8]) == (int_64)$2) ){ goto $label$125 }
	$12 = [0]
	goto $label$9 
	
.LABEL $label$278
	CALL eosio_assert([1], [10650])
	$8 = CALL db_next_i64(*($8 + [104]), $4)
	if ( ((int_32)$8 >= (int_32)[0]) ){ goto $label$126 }
	$12 = [152]
	goto $label$9 
	
.LABEL $label$277
	$8 = [0]
	*($4 + [116]) = [0]
	$12 = [3]
	goto $label$9 
	
.LABEL $label$276
	*($4 + [116]) = $8
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9610])
	CALL eosio_assert(((uint_32)*($8 + [64]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000))), [9630])
	$13 = *($8 + [16])
	CALL eosio_assert((($13 + [-1]) <= [6]), [9649])
	*(($4 + [184])) = [0]
	*($4 + [176]) = (int_64)0
	$6 = CALL $213([9667])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$123 }
	$12 = [4]
	goto $label$9 
	
.LABEL $label$275
	$11 = (uint_64)$3 >> (uint_64)(int_64)48
	$8 = (CASTING uint_32)(uint_64 $11)
	$14 = ($8) <= [7])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$122 }
	$12 = [150]
	goto $label$9 
	
.LABEL $label$274
	*($4 + [176]) = ($6 << [1])
	$15 = (($4 + [176]) | [1])
	if ( $6 ){ goto $label$120 }
	goto $label$121 
	
.LABEL $label$273
	$16 = (($6 + [16]) & [-16])
	$15 = CALL _Znwj($16)
	*($4 + [176]) = ($16 | [1])
	*($4 + [184]) = $15
	*($4 + [180]) = $6
	$12 = [6]
	goto $label$9 
	
.LABEL $label$272
	CALL memcpy($15, [9667], $6)
	$12 = [7]
	goto $label$9 
	
.LABEL $label$271
	*(($15 + $6)) = [0]
	CALL $192(($4 + [136]), $8)
	$6 = *($4 + [136])
	$16 = ($6 & [1])
	$6 = CALL $186(($4 + [176]), ( *($4 + [144]) ? (($4 + [136]) | [1]) : $16 ), ( *($4 + [140]) ? uint_32($6 >> [1]) : $16 ))
	$16 = ($6 + [8])
	*(($15 = ($4 + [8]))) = *($16)
	*($4) = *($6)
	*($6) = (int_64)0
	*($16) = [0]
	CALL eosio_assert($14, ( *($15) ? ($4 | [1]) : (*($4) & [1]) ))
	if ( (*($4) & [1]) ){ goto $label$119 }
	$12 = [149]
	goto $label$9 
	
.LABEL $label$270
	if ( (*($4 + [136]) & [1]) ){ goto $label$118 }
	$12 = [148]
	goto $label$9 
	
.LABEL $label$269
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$116 }
	$12 = [10]
	goto $label$9 
	
.LABEL $label$268
	CALL _ZdlPv(*($4 + [184]))
	$12 = [11]
	goto $label$9 
	
.LABEL $label$267
	*(($4 + [184])) = [0]
	*($4 + [176]) = (int_64)0
	$6 = CALL $213([9687])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$113 }
	$12 = [12]
	goto $label$9 
	
.LABEL $label$266
	$17 = ((CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)) & [65535]
	$14 = ($17) <= [7])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$112 }
	$12 = [146]
	goto $label$9 
	
.LABEL $label$265
	*($4 + [176]) = ($6 << [1])
	$15 = (($4 + [176]) | [1])
	if ( $6 ){ goto $label$110 }
	goto $label$111 
	
.LABEL $label$264
	CALL _ZdlPv(*($15))
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$117 }
	$12 = [9]
	goto $label$9 
	
.LABEL $label$263
	CALL _ZdlPv(*(($4 + [144])))
	if ( (*($4 + [176]) & [1]) ){ goto $label$114 }
	goto $label$115 
	
.LABEL $label$262
	$16 = (($6 + [16]) & [-16])
	$15 = CALL _Znwj($16)
	*($4 + [176]) = ($16 | [1])
	*($4 + [184]) = $15
	*($4 + [180]) = $6
	$12 = [14]
	goto $label$9 
	
.LABEL $label$261
	CALL memcpy($15, [9687], $6)
	$12 = [15]
	goto $label$9 
	
.LABEL $label$260
	*(($15 + $6)) = [0]
	CALL $192(($4 + [136]), $17)
	$6 = *($4 + [136])
	$16 = ($6 & [1])
	$6 = CALL $186(($4 + [176]), ( *($4 + [144]) ? (($4 + [136]) | [1]) : $16 ), ( *($4 + [140]) ? uint_32($6 >> [1]) : $16 ))
	$16 = ($6 + [8])
	*(($15 = ($4 + [8]))) = *($16)
	*($4) = *($6)
	*($6) = (int_64)0
	*($16) = [0]
	CALL eosio_assert($14, ( *($15) ? ($4 | [1]) : (*($4) & [1]) ))
	if ( (*($4) & [1]) ){ goto $label$109 }
	$12 = [145]
	goto $label$9 
	
.LABEL $label$259
	if ( (*($4 + [136]) & [1]) ){ goto $label$108 }
	$12 = [144]
	goto $label$9 
	
.LABEL $label$258
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$106 }
	$12 = [18]
	goto $label$9 
	
.LABEL $label$257
	CALL _ZdlPv(*($4 + [184]))
	$12 = [19]
	goto $label$9 
	
.LABEL $label$256
	*(($4 + [184])) = [0]
	*($4 + [176]) = (int_64)0
	$6 = CALL $213([9706])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$103 }
	$12 = [20]
	goto $label$9 
	
.LABEL $label$255
	$16 = (CASTING uint_32)(uint_64 $3)
	$14 = uint_32($16 >> [16])
	$18 = ($14 <= [7])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$102 }
	$12 = [142]
	goto $label$9 
	
.LABEL $label$254
	*($4 + [176]) = ($6 << [1])
	$15 = (($4 + [176]) | [1])
	if ( $6 ){ goto $label$100 }
	goto $label$101 
	
.LABEL $label$253
	CALL _ZdlPv(*($15))
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$107 }
	$12 = [17]
	goto $label$9 
	
.LABEL $label$252
	CALL _ZdlPv(*(($4 + [144])))
	if ( (*($4 + [176]) & [1]) ){ goto $label$104 }
	goto $label$105 
	
.LABEL $label$251
	$19 = (($6 + [16]) & [-16])
	$15 = CALL _Znwj($19)
	*($4 + [176]) = ($19 | [1])
	*($4 + [184]) = $15
	*($4 + [180]) = $6
	$12 = [22]
	goto $label$9 
	
.LABEL $label$250
	CALL memcpy($15, [9706], $6)
	$12 = [23]
	goto $label$9 
	
.LABEL $label$249
	*(($15 + $6)) = [0]
	CALL $192(($4 + [136]), $14)
	$6 = *($4 + [136])
	$19 = ($6 & [1])
	$6 = CALL $186(($4 + [176]), ( *($4 + [144]) ? (($4 + [136]) | [1]) : $19 ), ( *($4 + [140]) ? uint_32($6 >> [1]) : $19 ))
	$19 = ($6 + [8])
	*(($15 = ($4 + [8]))) = *($19)
	*($4) = *($6)
	*($6) = (int_64)0
	*($19) = [0]
	CALL eosio_assert($18, ( *($15) ? ($4 | [1]) : (*($4) & [1]) ))
	if ( (*($4) & [1]) ){ goto $label$99 }
	$12 = [141]
	goto $label$9 
	
.LABEL $label$248
	if ( (*($4 + [136]) & [1]) ){ goto $label$98 }
	$12 = [140]
	goto $label$9 
	
.LABEL $label$247
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$96 }
	$12 = [26]
	goto $label$9 
	
.LABEL $label$246
	CALL _ZdlPv(*($4 + [184]))
	$12 = [27]
	goto $label$9 
	
.LABEL $label$245
	*(($4 + [184])) = [0]
	*($4 + [176]) = (int_64)0
	$6 = CALL $213([9723])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$93 }
	$12 = [28]
	goto $label$9 
	
.LABEL $label$244
	$18 = ($16 & [65535])
	$16 = ($18 <= [7])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$92 }
	$12 = [138]
	goto $label$9 
	
.LABEL $label$243
	*($4 + [176]) = ($6 << [1])
	$15 = (($4 + [176]) | [1])
	if ( $6 ){ goto $label$90 }
	goto $label$91 
	
.LABEL $label$242
	CALL _ZdlPv(*($15))
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$97 }
	$12 = [25]
	goto $label$9 
	
.LABEL $label$241
	CALL _ZdlPv(*(($4 + [144])))
	if ( (*($4 + [176]) & [1]) ){ goto $label$94 }
	goto $label$95 
	
.LABEL $label$240
	$19 = (($6 + [16]) & [-16])
	$15 = CALL _Znwj($19)
	*($4 + [176]) = ($19 | [1])
	*($4 + [184]) = $15
	*($4 + [180]) = $6
	$12 = [30]
	goto $label$9 
	
.LABEL $label$239
	CALL memcpy($15, [9723], $6)
	$12 = [31]
	goto $label$9 
	
.LABEL $label$238
	*(($15 + $6)) = [0]
	CALL $192(($4 + [136]), $18)
	$6 = *($4 + [136])
	$19 = ($6 & [1])
	$6 = CALL $186(($4 + [176]), ( *($4 + [144]) ? (($4 + [136]) | [1]) : $19 ), ( *($4 + [140]) ? uint_32($6 >> [1]) : $19 ))
	$19 = ($6 + [8])
	*(($15 = ($4 + [8]))) = *($19)
	*($4) = *($6)
	*($6) = (int_64)0
	*($19) = [0]
	CALL eosio_assert($16, ( *($15) ? ($4 | [1]) : (*($4) & [1]) ))
	if ( (*($4) & [1]) ){ goto $label$89 }
	$12 = [137]
	goto $label$9 
	
.LABEL $label$237
	if ( (*($4 + [136]) & [1]) ){ goto $label$88 }
	$12 = [136]
	goto $label$9 
	
.LABEL $label$236
	if ( (*($4 + [176]) & [1]) ){ goto $label$86 }
	$12 = [135]
	goto $label$9 
	
.LABEL $label$235
	$6 = [0]
	if ( ((int_32)$14 != (int_32)([0] - $18)) ){ goto $label$84 }
	$12 = [134]
	goto $label$9 
	
.LABEL $label$234
	if ( ((int_32)$17 * (int_32)$8) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$233
	CALL _ZdlPv(*($15))
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$87 }
	$12 = [33]
	goto $label$9 
	
.LABEL $label$232
	CALL _ZdlPv(*(($4 + [144])))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$85 }
	$12 = [34]
	goto $label$9 
	
.LABEL $label$231
	CALL _ZdlPv(*($4 + [184]))
	$6 = [0]
	if ( ((int_32)$14 == (int_32)([0] - $18)) ){ goto $label$81 }
	$12 = [35]
	goto $label$9 
	
.LABEL $label$230
	if ( ((int_32)$8 != (int_32)($6 - $17)) ){ goto $label$80 }
	$12 = [132]
	goto $label$9 
	
.LABEL $label$229
	if ( (((int_32)$14 * (int_32)$18) == 0) ){ goto $label$79 }
	$12 = [133]
	goto $label$9 
	
.LABEL $label$228
	CALL eosio_assert([0], [9742])
	$12 = [36]
	goto $label$9 
	
.LABEL $label$227
	CALL eosio_assert(((int_32)((($18 + $8) + $17) + $14) == (int_32)$13), [9772])
	$6 = *($9 + [28])
	$19 = uint_32($6 >> [16])
	$15 = *($9 + [8])
	$20 = ($6 & [65535])
	$6 = ($20 + $8)
	if ( ((uint_32)$6 <= (uint_32)$15) ){ goto $label$78 }
	$12 = [127]
	goto $label$9 
	
.LABEL $label$226
	if ( ((uint_32)$20 >= (uint_32)$17) ){ goto $label$11 }
	$12 = [131]
	goto $label$9 
	
.LABEL $label$225
	CALL eosio_assert([0], [9790])
	$21 = [1]
	if ( ($19 <= $14) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$224
	$21 = [1]
	if ( ((uint_32)$6 >= (uint_32)$17) ){ goto $label$76 }
	$12 = [126]
	goto $label$9 
	
.LABEL $label$223
	CALL eosio_assert([0], [9790])
	if ( ($19 <= $14) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$222
	$6 = ($20 - $17)
	$13 = ($6 + $8)
	if ( ($13 <= $6) ){ goto $label$10 }
	$12 = [129]
	goto $label$9 
	
.LABEL $label$221
	$21 = [0]
	if ( ((uint_32)$13 > (uint_32)$15) ){ goto $label$77 }
	$12 = [38]
	goto $label$9 
	
.LABEL $label$220
	if ( ((uint_32)$19 >= (uint_32)$14) ){ goto $label$75 }
	$12 = [122]
	goto $label$9 
	
.LABEL $label$219
	$6 = ($19 + $18)
	if ( ((uint_32)$6 <= (uint_32)*($9 + [12])) ){ goto $label$12 }
	$12 = [125]
	goto $label$9 
	
.LABEL $label$218
	CALL eosio_assert([0], [9790])
	goto $label$14 
	
.LABEL $label$217
	$22 = [0]
	if ( ((uint_32)$6 >= (uint_32)$14) ){ goto $label$67 }
	$12 = [124]
	goto $label$9 
	
.LABEL $label$216
	CALL eosio_assert([0], [9790])
	goto $label$13 
	
.LABEL $label$215
	CALL eosio_assert([0], [9790])
	$21 = [1]
	if ( ($19 <= $14) ){ goto $label$70 }
	$12 = [39]
	goto $label$9 
	
.LABEL $label$214
	$6 = ($19 - $14)
	$15 = ($6 + $18)
	if ( ($15 <= $6) ){ goto $label$69 }
	$12 = [40]
	goto $label$9 
	
.LABEL $label$213
	$22 = [1]
	if ( ((uint_32)$15 <= (uint_32)*($9 + [12])) ){ goto $label$68 }
	$12 = [120]
	goto $label$9 
	
.LABEL $label$212
	CALL eosio_assert([0], [9790])
	$12 = [121]
	goto $label$9 
	
.LABEL $label$211
	$22 = [1]
	$12 = [41]
	goto $label$9 
	
.LABEL $label$210
	if ( ($21 == 0) ){ goto $label$66 }
	$12 = [42]
	goto $label$9 
	
.LABEL $label$209
	CALL $89($0, $1, $2, $8)
	CALL $90($0, $1, $2, $17)
	if ( ($22 == 0) ){ goto $label$64 }
	$12 = [43]
	goto $label$9 
	
.LABEL $label$208
	CALL $91($0, $1, $2, $14)
	CALL $92($0, $1, $2, $18)
	goto $label$63 
	
.LABEL $label$207
	CALL $90($0, $1, $2, $17)
	CALL $89($0, $1, $2, $8)
	if ( $22 ){ goto $label$65 }
	$12 = [118]
	goto $label$9 
	
.LABEL $label$206
	CALL $92($0, $1, $2, $18)
	CALL $91($0, $1, $2, $14)
	$12 = [44]
	goto $label$9 
	
.LABEL $label$205
	CALL eosio_assert(((int_32)*(($9 + [24])) == (int_32)[2]), [8498])
	*($4) = [0]
	$16 = *(($9 + [28]))
	$13 = *(($9 + [76]))
	$8 = *($9 + [72])
	if ( ((int_32)$8 == (int_32)$13) ){ goto $label$62 }
	$12 = [45]
	goto $label$9 
	
.LABEL $label$204
	$6 = [1]
	$12 = [46]
	goto $label$9 
	
.LABEL $label$203
	$15 = *($8)
	if ( ((int_32)$15 == (int_32)[-1]) ){ goto $label$60 }
	$12 = [47]
	goto $label$9 
	
.LABEL $label$202
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$59 }
	$12 = [116]
	goto $label$9 
	
.LABEL $label$201
	*($4) = $6
	$6 = ($6 + [1])
	$8 = ($8 + [4])
	if ( ((int_32)$13 != (int_32)$8) ){ goto $label$61 }
	$12 = [117]
	goto $label$9 
	
.LABEL $label$200
	CALL prints([8959])
	CALL prints([9475])
	CALL printui($2)
	CALL prints([8856])
	CALL prints([9461])
	CALL printn($1)
	CALL prints([9471])
	CALL prints([9796])
	CALL printi(*($9 + [32]))
	CALL prints([8856])
	CALL prints([9807])
	CALL printui((CASTING uint_64)(uint_32 $19))
	CALL prints([8856])
	CALL printui((CASTING uint_64)(uint_32 $20))
	CALL prints([9823])
	CALL prints([9827])
	CALL printui((CASTING uint_64)(uint_32 uint_32($16 >> [16])))
	CALL prints([8856])
	CALL printui((CASTING uint_64)(uint_32 ($16 & [65535])))
	CALL prints([9823])
	$2 = CALL current_time()
	CALL prints([9488])
	CALL printui(((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	CALL prints([8856])
	CALL prints([9844])
	CALL prints([8959])
	CALL prints([9858])
	CALL prints(( [11668] ? [11673] : $21 ))
	CALL prints([8856])
	CALL prints([9873])
	CALL prints(( [11668] ? [11673] : $22 ))
	CALL prints([8856])
	CALL prints([9886])
	CALL printui($11)
	CALL prints([8856])
	CALL prints([9896])
	CALL printui((CASTING uint_64)(uint_32 $17))
	CALL prints([8856])
	CALL prints([9905])
	CALL printui((CASTING uint_64)(uint_32 $14))
	CALL prints([9912])
	CALL prints([9914])
	CALL printui((CASTING uint_64)(uint_32 $18))
	CALL prints([9923])
	CALL prints([9927])
	CALL prints([11673])
	CALL prints([8856])
	CALL prints([9941])
	CALL prints([11673])
	CALL prints([9020])
	goto $label$38 
	
.LABEL $label$199
	$3 = *($0)
	*($4 + [176]) = $4
	CALL $93($5, $9, $3, ($4 + [176]))
	$6 = *(($9 + [76]))
	$8 = *(($9 + [72]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$58 }
	$12 = [49]
	goto $label$9 
	
.LABEL $label$198
	$12 = [50]
	goto $label$9 
	
.LABEL $label$197
	if ( ((int_32)*($8) != (int_32)[-1]) ){ goto $label$56 }
	$12 = [114]
	goto $label$9 
	
.LABEL $label$196
	$8 = ($8 + [4])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$57 }
	$12 = [115]
	goto $label$9 
	
.LABEL $label$195
	CALL $94($5, $9, *($0), $4)
	$12 = [51]
	goto $label$9 
	
.LABEL $label$194
	$8 = *(($9 + [28]))
	CALL prints([8959])
	CALL prints([9475])
	CALL printui($2)
	CALL prints([8856])
	CALL prints([9461])
	CALL printn($1)
	CALL prints([9471])
	CALL prints([9796])
	CALL printi(*($9 + [32]))
	CALL prints([8856])
	CALL prints([9807])
	CALL printui((CASTING uint_64)(uint_32 $19))
	CALL prints([8856])
	CALL printui((CASTING uint_64)(uint_32 $20))
	CALL prints([9823])
	CALL prints([9827])
	$15 = uint_32($8 >> [16])
	CALL printui((CASTING uint_64)(uint_32 $15))
	CALL prints([8856])
	$13 = ($8 & [65535])
	CALL printui((CASTING uint_64)(uint_32 $13))
	CALL prints([9823])
	$2 = CALL current_time()
	CALL prints([9488])
	CALL printui(((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	CALL prints([8856])
	CALL prints([9844])
	CALL prints([8959])
	CALL prints([9858])
	CALL prints(( [11668] ? [11673] : $21 ))
	CALL prints([8856])
	CALL prints([9873])
	CALL prints(( [11668] ? [11673] : $22 ))
	CALL prints([8856])
	CALL prints([9886])
	CALL printui($11)
	CALL prints([8856])
	CALL prints([9896])
	CALL printui((CASTING uint_64)(uint_32 $17))
	CALL prints([8856])
	CALL prints([9905])
	CALL printui((CASTING uint_64)(uint_32 $14))
	CALL prints([9912])
	CALL prints([9914])
	CALL printui((CASTING uint_64)(uint_32 $18))
	CALL prints([9923])
	$8 = *(($9 + [24]))
	CALL prints([9927])
	if ( ((int_32)$8 != (int_32)[4]) ){ goto $label$55 }
	$12 = [113]
	goto $label$9 
	
.LABEL $label$193
	CALL prints([11668])
	goto $label$54 
	
.LABEL $label$192
	CALL prints([11673])
	$12 = [53]
	goto $label$9 
	
.LABEL $label$191
	CALL prints([8856])
	CALL prints([9941])
	CALL prints([11668])
	CALL prints([9020])
	$6 = ($0 + [296])
	$8 = ($0 + [312])
	$2 = *($8)
	if ( ((int_64)$2 != (int_64)-1) ){ goto $label$53 }
	$12 = [110]
	goto $label$9 
	
.LABEL $label$190
	$2 = (int_64)0
	$14 = CALL db_lowerbound_i64(*($6), *(($0 + [304])), (int_64)-2042605223187841024, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$15 }
	$12 = [111]
	goto $label$9 
	
.LABEL $label$189
	CALL $12($6, $14)
	*($4 + [4]) = [0]
	*($4) = $6
	$2 = *(*(CALL $95($4) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$12 = [112]
	goto $label$9 
	
.LABEL $label$188
	*(($0 + [312])) = $2
	$12 = [54]
	goto $label$9 
	
.LABEL $label$187
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [11514])
	$2 = *($8)
	$8 = *(($9 + [24]))
	$3 = *($0)
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$7()), [10375])
	if ( ((int_32)$8 != (int_32)[4]) ){ goto $label$52 }
	$12 = [102]
	goto $label$9 
	
.LABEL $label$186
	*(($8 = CALL _Znwj([72])) + [56]) = $6
	*($8 + [16]) = $1
	*($8) = $2
	*($8 + [8]) = *($9)
	*($8 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$11 = CALL current_time()
	*($8 + [40]) = $15
	*($8 + [44]) = $13
	*($8 + [32]) = (int_64)0
	*($8 + [52]) = ((uint_64)$11 / (uint_64)(int_64)1000000)
	*($8 + [24]) = *($9 + [40])
	*($4 + [144]) = ($4 + [56])
	*($4 + [140]) = $4
	*($4 + [136]) = $4
	*($4 + [120]) = ($4 + [136])
	*($4 + [180]) = ($8 + [8])
	*($4 + [176]) = $8
	*($4 + [184]) = ($8 + [16])
	*($4 + [188]) = ($8 + [24])
	*($4 + [192]) = ($8 + [32])
	*($4 + [196]) = ($8 + [40])
	*($4 + [200]) = ($8 + [44])
	*($4 + [204]) = ($8 + [48])
	*($4 + [208]) = ($8 + [52])
	CALL $96(($4 + [176]), ($4 + [120]))
	$11 = *($8)
	$14 = CALL db_store_i64(*(($0 + [304])), (int_64)-2042605223187841024, $3, $11, $4, [56])
	*($8 + [60]) = $14
	$6 = ($0 + [312])
	if ( (uint_64)($11 <= *($6)) ){ goto $label$20 }
	$12 = [103]
	goto $label$9 
	
.LABEL $label$185
	*($6) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$12 = [104]
	goto $label$9 
	
.LABEL $label$184
	*($4 + [176]) = $8
	$3 = *($8)
	*($4) = $3
	*($4 + [136]) = $14
	$16 = ($0 + [324])
	$6 = *($16)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [328]))) ){ goto $label$19 }
	$12 = [109]
	goto $label$9 
	
.LABEL $label$183
	*($6 + [8]) = $3
	*($6 + [16]) = $14
	*($4 + [176]) = [0]
	*($6) = $8
	*($16) = ($6 + [24])
	$8 = *($4 + [176])
	*($4 + [176]) = [0]
	if ( $8 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$182
	*(($8 = CALL _Znwj([72])) + [56]) = $6
	*($8 + [16]) = $1
	*($8) = $2
	*($8 + [8]) = *($9)
	*($8 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$11 = CALL current_time()
	*($8 + [40]) = $15
	*($8 + [44]) = $13
	*($8 + [32]) = (int_64)0
	*($8 + [52]) = ((uint_64)$11 / (uint_64)(int_64)1000000)
	*($8 + [24]) = *(($9 + [32]))
	*($4 + [144]) = ($4 + [56])
	*($4 + [140]) = $4
	*($4 + [136]) = $4
	*($4 + [120]) = ($4 + [136])
	*($4 + [180]) = ($8 + [8])
	*($4 + [176]) = $8
	*($4 + [184]) = ($8 + [16])
	*($4 + [188]) = ($8 + [24])
	*($4 + [192]) = ($8 + [32])
	*($4 + [196]) = ($8 + [40])
	*($4 + [200]) = ($8 + [44])
	*($4 + [204]) = ($8 + [48])
	*($4 + [208]) = ($8 + [52])
	CALL $96(($4 + [176]), ($4 + [120]))
	$11 = *($8)
	$14 = CALL db_store_i64(*(($0 + [304])), (int_64)-2042605223187841024, $3, $11, $4, [56])
	*($8 + [60]) = $14
	$6 = ($0 + [312])
	if ( (uint_64)($11 <= *($6)) ){ goto $label$51 }
	$12 = [56]
	goto $label$9 
	
.LABEL $label$181
	*($6) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$12 = [57]
	goto $label$9 
	
.LABEL $label$180
	*($4 + [176]) = $8
	$3 = *($8)
	*($4) = $3
	*($4 + [136]) = $14
	$16 = ($0 + [324])
	$6 = *($16)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [328]))) ){ goto $label$50 }
	$12 = [101]
	goto $label$9 
	
.LABEL $label$179
	*($6 + [8]) = $3
	*($6 + [16]) = $14
	*($4 + [176]) = [0]
	*($6) = $8
	*($16) = ($6 + [24])
	$8 = *($4 + [176])
	*($4 + [176]) = [0]
	if ( $8 ){ goto $label$47 }
	goto $label$48 
	
.LABEL $label$178
	CALL $97(($0 + [320]), ($4 + [176]), $4, ($4 + [136]))
	$8 = *($4 + [176])
	*($4 + [176]) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	$12 = [106]
	goto $label$9 
	
.LABEL $label$177
	CALL _ZdlPv($8)
	$12 = [107]
	goto $label$9 
	
.LABEL $label$176
	$8 = ($9 + [40])
	$11 = *($8)
	if ( CALL $46($0, $9) ){ goto $label$45 }
	$12 = [108]
	goto $label$9 
	
.LABEL $label$175
	$3 = *($8)
	*($4) = $3
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [11219])
	$3 = *($0)
	*($4 + [176]) = $4
	CALL $98($5, $9, $3, ($4 + [176]))
	$3 = *(($9 + [32]))
	*($4) = $3
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [11245])
	$3 = *($0)
	*($4 + [176]) = $4
	CALL $99($5, $9, $3, ($4 + [176]))
	if ( ((int_64)*($9 + [40]) > (int_64)-1) ){ goto $label$42 }
	goto $label$43 
	
.LABEL $label$174
	CALL $97(($0 + [320]), ($4 + [176]), $4, ($4 + [136]))
	$8 = *($4 + [176])
	*($4 + [176]) = [0]
	if ( ($8 == 0) ){ goto $label$49 }
	$12 = [59]
	goto $label$9 
	
.LABEL $label$173
	CALL _ZdlPv($8)
	$12 = [60]
	goto $label$9 
	
.LABEL $label$172
	$8 = ($9 + [32])
	$11 = *($8)
	if ( CALL $46($0, $9) ){ goto $label$46 }
	$12 = [61]
	goto $label$9 
	
.LABEL $label$171
	$3 = *($8)
	*($4) = $3
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [11219])
	$3 = *($0)
	*($4 + [176]) = $4
	CALL $98($5, $9, $3, ($4 + [176]))
	$3 = *($8)
	*($4) = $3
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [11245])
	$3 = *($0)
	*($4 + [176]) = $4
	CALL $99($5, $9, $3, ($4 + [176]))
	$12 = [62]
	goto $label$9 
	
.LABEL $label$170
	if ( ((int_64)*($9 + [40]) > (int_64)-1) ){ goto $label$44 }
	$12 = [100]
	goto $label$9 
	
.LABEL $label$169
	$3 = *($0)
	CALL eosio_assert($10, [10432])
	CALL $100($5, $9, $3)
	$12 = [63]
	goto $label$9 
	
.LABEL $label$168
	$3 = *($0)
	$23 = *($9)
	$24 = CALL current_time()
	$25 = CALL current_time()
	*(($6 = ($4 + [200]))) = [0]
	*($4 + [8]) = $23
	*($4) = $2
	*($4 + [16]) = $1
	*($4 + [24]) = $11
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = $15
	*($4 + [44]) = $13
	*($4 + [48]) = ((uint_64)$24 / (uint_64)(int_64)1000000)
	*($4 + [176]) = $3
	*($4 + [184]) = (int_64)-4417158008900091904
	*($4 + [192]) = (int_64)0
	*($4 + [52]) = ((uint_64)$25 / (uint_64)(int_64)1000000)
	*(($8 = CALL _Znwj([16]))) = $3
	*($8 + [8]) = (int_64)3617214756542218240
	*(($4 + [212])) = [0]
	$15 = ($8 + [16])
	*($6) = $15
	*(($4 + [196])) = $15
	*($4 + [192]) = $8
	*($4 + [204 align=4]) = (int_64)0
	CALL $73(($4 + [204]), [56])
	$8 = *(($4 + [208]))
	$6 = *($4 + [204])
	*($4 + [140]) = $6
	*($4 + [136]) = $6
	*($4 + [144]) = $8
	*($4 + [168]) = ($4 + [136])
	*($4 + [120]) = $4
	CALL $101(($4 + [120]), ($4 + [168]))
	CALL $75(($4 + [136]), ($4 + [176]))
	$8 = *($4 + [136])
	CALL send_inline($8, (*($4 + [140]) - $8))
	$8 = *($4 + [136])
	if ( ($8 == 0) ){ goto $label$41 }
	$12 = [64]
	goto $label$9 
	
.LABEL $label$167
	*($4 + [140]) = $8
	CALL _ZdlPv($8)
	$12 = [65]
	goto $label$9 
	
.LABEL $label$166
	$8 = *($4 + [204])
	if ( ($8 == 0) ){ goto $label$40 }
	$12 = [66]
	goto $label$9 
	
.LABEL $label$165
	*(($4 + [208])) = $8
	CALL _ZdlPv($8)
	$12 = [67]
	goto $label$9 
	
.LABEL $label$164
	$8 = *($4 + [192])
	if ( ($8 == 0) ){ goto $label$39 }
	$12 = [68]
	goto $label$9 
	
.LABEL $label$163
	*(($4 + [196])) = $8
	CALL _ZdlPv($8)
	$12 = [69]
	goto $label$9 
	
.LABEL $label$162
	$2 = *($0)
	$8 = *($4 + [116])
	*(($4 + [40])) = *(($8 + [40]))
	$1 = *($8 + [56 align=4])
	*(($4 + [88])) = *(($8 + [88]))
	*($4) = *($8)
	*($4 + [32]) = *($8 + [32])
	*($4 + [80]) = *($8 + [80])
	*($4 + [8]) = *($8 + [8])
	*($4 + [16]) = *($8 + [16])
	*($4 + [48]) = *($8 + [48])
	*($4 + [56]) = $1
	*($4 + [64]) = *($8 + [64])
	*($4 + [96]) = [1]
	*(($15 = ($4 + [200]))) = [0]
	*($4 + [184]) = (int_64)-4417158001692655616
	*($4 + [176]) = $2
	*($4 + [192]) = (int_64)0
	*(($6 = CALL _Znwj([16]))) = $2
	*($6 + [8]) = (int_64)3617214756542218240
	*(($4 + [212])) = [0]
	$13 = ($6 + [16])
	*($15) = $13
	*(($4 + [196])) = $13
	*($4 + [192]) = $6
	*($4 + [204 align=4]) = (int_64)0
	CALL $73(($4 + [204]), [76])
	$6 = *(($4 + [208]))
	$15 = *($4 + [204])
	*($4 + [140]) = $15
	*($4 + [136]) = $15
	*($4 + [144]) = $6
	*($4 + [168]) = ($4 + [136])
	*($4 + [120]) = $4
	CALL $102(($4 + [120]), ($4 + [168]))
	CALL $75(($4 + [136]), ($4 + [176]))
	$6 = *($4 + [136])
	CALL send_inline($6, (*($4 + [140]) - $6))
	$6 = *($4 + [136])
	if ( ($6 == 0) ){ goto $label$37 }
	$12 = [70]
	goto $label$9 
	
.LABEL $label$161
	*($4 + [140]) = $6
	CALL _ZdlPv($6)
	$12 = [71]
	goto $label$9 
	
.LABEL $label$160
	$6 = *($4 + [204])
	if ( ($6 == 0) ){ goto $label$36 }
	$12 = [72]
	goto $label$9 
	
.LABEL $label$159
	*(($4 + [208])) = $6
	CALL _ZdlPv($6)
	$12 = [73]
	goto $label$9 
	
.LABEL $label$158
	$6 = *($4 + [192])
	if ( ($6 == 0) ){ goto $label$35 }
	$12 = [74]
	goto $label$9 
	
.LABEL $label$157
	*(($4 + [196])) = $6
	CALL _ZdlPv($6)
	$12 = [75]
	goto $label$9 
	
.LABEL $label$156
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [11332])
	CALL eosio_assert($6, [10650])
	$6 = CALL db_next_i64(*($8 + [104]), $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$34 }
	$12 = [76]
	goto $label$9 
	
.LABEL $label$155
	CALL $7($7, $6)
	$12 = [77]
	goto $label$9 
	
.LABEL $label$154
	CALL $9($7, $8)
	$2 = *($0)
	CALL eosio_assert($10, [10432])
	CALL $103($5, $9, $2)
	$2 = *($0)
	CALL eosio_assert($10, [10432])
	CALL $104($5, $9, $2)
	$2 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$21 = ($0 + [216])
	$5 = ($0 + [208])
	$8 = CALL db_lowerbound_i64(*($5), *($21), (int_64)-4460071177754247168, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$33 }
	$12 = [78]
	goto $label$9 
	
.LABEL $label$153
	$19 = (CASTING uint_32)(uint_64 $2)
	$20 = ($4 + [74])
	$16 = (($4 + [136]) + [24])
	$17 = (($4 + [136]) + [16])
	$18 = (($4 + [136]) + [8])
	$26 = ($4 + [188])
	$27 = ($4 + [196])
	$28 = ($4 + [204])
	$29 = ($4 + [212])
	$30 = ($4 + [216])
	$10 = ($0 + [224])
	$22 = [0]
	$8 = CALL $7($7, $8)
	if ( ((int_64)*($8 + [8]) != (int_64)*($9)) ){ goto $label$30 }
	goto $label$31 
	
.LABEL $label$152
	$8 = CALL $7($7, $8)
	if ( ((int_64)*($8 + [8]) != (int_64)*($9)) ){ goto $label$29 }
	$12 = [81]
	goto $label$9 
	
.LABEL $label$151
	$2 = *($0)
	CALL eosio_assert([1], [10432])
	CALL eosio_assert(((int_32)*($8 + [100]) == (int_32)$7), [10467])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$7()), [10513])
	$6 = ($8 + [60])
	*($18) = *($6)
	$13 = ($8 + [48])
	*($17) = *($13)
	$15 = ($8 + [64])
	*($16) = *($15)
	$22 = ($22 + [1])
	*($15) = (((int_32)$22 * (int_32)[90]) + $19)
	*($6) = $19
	$14 = ($8 + [8])
	*($4 + [136]) = *($14)
	$1 = *($8)
	CALL eosio_assert([1], [10564])
	*((($4 + [120]) + [8])) = $20
	*($4 + [124]) = $4
	*($4 + [120]) = $4
	*($4 + [168]) = ($4 + [120])
	*((($4 + [176]) + [8])) = ($8 + [16])
	*($26) = ($8 + [32])
	*((($4 + [176]) + [16])) = $13
	*($27) = ($8 + [56])
	*((($4 + [176]) + [24])) = $6
	*($28) = $15
	*((($4 + [176]) + [32])) = ($8 + [80])
	*($29) = ($8 + [96])
	*($30) = ($8 + [97])
	*($4 + [180]) = $14
	*($4 + [176]) = $8
	CALL $42(($4 + [176]), ($4 + [168]))
	CALL db_update_i64(*($8 + [104]), $2, $4, [74])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$28 }
	$12 = [82]
	goto $label$9 
	
.LABEL $label$150
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$12 = [83]
	goto $label$9 
	
.LABEL $label$149
	*($4 + [176]) = *($14)
	if ( (CALL $212(($4 + [136]), ($4 + [176]), [8]) == 0) ){ goto $label$27 }
	$12 = [84]
	goto $label$9 
	
.LABEL $label$148
	$14 = *($8 + [108])
	if ( ((int_32)$14 > (int_32)[-1]) ){ goto $label$26 }
	$12 = [98]
	goto $label$9 
	
.LABEL $label$147
	$14 = CALL db_idx64_find_primary(*($5), *($21), (int_64)-4460071177754247168, ($4 + [168]), $1)
	*(($8 + [108])) = $14
	$12 = [85]
	goto $label$9 
	
.LABEL $label$146
	CALL db_idx64_update($14, $2, ($4 + [176]))
	$12 = [86]
	goto $label$9 
	
.LABEL $label$145
	*($4 + [176]) = *($6)
	if ( (CALL $212($18, ($4 + [176]), [8]) == 0) ){ goto $label$25 }
	$12 = [87]
	goto $label$9 
	
.LABEL $label$144
	$14 = ($8 + [112])
	$6 = *($14)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$24 }
	$12 = [97]
	goto $label$9 
	
.LABEL $label$143
	$6 = CALL db_idx64_find_primary(*($5), *($21), (int_64)-4460071177754247167, ($4 + [168]), $1)
	*($14) = $6
	$12 = [88]
	goto $label$9 
	
.LABEL $label$142
	CALL db_idx64_update($6, $2, ($4 + [176]))
	$12 = [89]
	goto $label$9 
	
.LABEL $label$141
	*($4 + [176]) = *($13)
	if ( (CALL $212($17, ($4 + [176]), [8]) == 0) ){ goto $label$23 }
	$12 = [90]
	goto $label$9 
	
.LABEL $label$140
	$13 = ($8 + [116])
	$6 = *($13)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$22 }
	$12 = [96]
	goto $label$9 
	
.LABEL $label$139
	$6 = CALL db_idx64_find_primary(*($5), *($21), (int_64)-4460071177754247166, ($4 + [168]), $1)
	*($13) = $6
	$12 = [91]
	goto $label$9 
	
.LABEL $label$138
	CALL db_idx64_update($6, $2, ($4 + [176]))
	$12 = [92]
	goto $label$9 
	
.LABEL $label$137
	*($4 + [176]) = *($15)
	if ( (CALL $212($16, ($4 + [176]), [8]) == 0) ){ goto $label$32 }
	$12 = [93]
	goto $label$9 
	
.LABEL $label$136
	$15 = ($8 + [120])
	$6 = *($15)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$21 }
	$12 = [95]
	goto $label$9 
	
.LABEL $label$135
	$6 = CALL db_idx64_find_primary(*($5), *($21), (int_64)-4460071177754247165, ($4 + [168]), $1)
	*($15) = $6
	$12 = [94]
	goto $label$9 
	
.LABEL $label$134
	CALL db_idx64_update($6, $2, ($4 + [176]))
	$12 = [79]
	goto $label$9 
	
.LABEL $label$133
	CALL eosio_assert([1], [10650])
	$8 = CALL db_next_i64(*(($8 + [104])), $4)
	if ( ((int_32)$8 >= (int_32)[0]) ){ goto $label$127 }
	$12 = [99]
	goto $label$9 
	
.LABEL $label$132
	$global$0 = ($4 + [224])
	return (unreachable)
	
.LABEL $label$131
	CALL $180(($4 + [176]))
	
.LABEL $label$130
	CALL $180(($4 + [176]))
	
.LABEL $label$129
	CALL $180(($4 + [176]))
	
.LABEL $label$128
	CALL $180(($4 + [176]))
	
.LABEL $label$127
	$12 = [80]
	goto $label$9 
	
.LABEL $label$126
	$12 = [1]
	goto $label$9 
	
.LABEL $label$125
	$12 = [3]
	goto $label$9 
	
.LABEL $label$124
	$12 = [0]
	goto $label$9 
	
.LABEL $label$123
	$12 = [151]
	goto $label$9 
	
.LABEL $label$122
	$12 = [5]
	goto $label$9 
	
.LABEL $label$121
	$12 = [7]
	goto $label$9 
	
.LABEL $label$120
	$12 = [6]
	goto $label$9 
	
.LABEL $label$119
	$12 = [8]
	goto $label$9 
	
.LABEL $label$118
	$12 = [9]
	goto $label$9 
	
.LABEL $label$117
	$12 = [148]
	goto $label$9 
	
.LABEL $label$116
	$12 = [11]
	goto $label$9 
	
.LABEL $label$115
	$12 = [11]
	goto $label$9 
	
.LABEL $label$114
	$12 = [10]
	goto $label$9 
	
.LABEL $label$113
	$12 = [147]
	goto $label$9 
	
.LABEL $label$112
	$12 = [13]
	goto $label$9 
	
.LABEL $label$111
	$12 = [15]
	goto $label$9 
	
.LABEL $label$110
	$12 = [14]
	goto $label$9 
	
.LABEL $label$109
	$12 = [16]
	goto $label$9 
	
.LABEL $label$108
	$12 = [17]
	goto $label$9 
	
.LABEL $label$107
	$12 = [144]
	goto $label$9 
	
.LABEL $label$106
	$12 = [19]
	goto $label$9 
	
.LABEL $label$105
	$12 = [19]
	goto $label$9 
	
.LABEL $label$104
	$12 = [18]
	goto $label$9 
	
.LABEL $label$103
	$12 = [143]
	goto $label$9 
	
.LABEL $label$102
	$12 = [21]
	goto $label$9 
	
.LABEL $label$101
	$12 = [23]
	goto $label$9 
	
.LABEL $label$100
	$12 = [22]
	goto $label$9 
	
.LABEL $label$99
	$12 = [24]
	goto $label$9 
	
.LABEL $label$98
	$12 = [25]
	goto $label$9 
	
.LABEL $label$97
	$12 = [140]
	goto $label$9 
	
.LABEL $label$96
	$12 = [27]
	goto $label$9 
	
.LABEL $label$95
	$12 = [27]
	goto $label$9 
	
.LABEL $label$94
	$12 = [26]
	goto $label$9 
	
.LABEL $label$93
	$12 = [139]
	goto $label$9 
	
.LABEL $label$92
	$12 = [29]
	goto $label$9 
	
.LABEL $label$91
	$12 = [31]
	goto $label$9 
	
.LABEL $label$90
	$12 = [30]
	goto $label$9 
	
.LABEL $label$89
	$12 = [32]
	goto $label$9 
	
.LABEL $label$88
	$12 = [33]
	goto $label$9 
	
.LABEL $label$87
	$12 = [136]
	goto $label$9 
	
.LABEL $label$86
	$12 = [34]
	goto $label$9 
	
.LABEL $label$85
	$12 = [135]
	goto $label$9 
	
.LABEL $label$84
	$12 = [35]
	goto $label$9 
	
.LABEL $label$83
	$12 = [133]
	goto $label$9 
	
.LABEL $label$82
	$12 = [35]
	goto $label$9 
	
.LABEL $label$81
	$12 = [134]
	goto $label$9 
	
.LABEL $label$80
	$12 = [36]
	goto $label$9 
	
.LABEL $label$79
	$12 = [36]
	goto $label$9 
	
.LABEL $label$78
	$12 = [37]
	goto $label$9 
	
.LABEL $label$77
	$12 = [130]
	goto $label$9 
	
.LABEL $label$76
	$12 = [38]
	goto $label$9 
	
.LABEL $label$75
	$12 = [39]
	goto $label$9 
	
.LABEL $label$74
	$12 = [122]
	goto $label$9 
	
.LABEL $label$73
	$12 = [39]
	goto $label$9 
	
.LABEL $label$72
	$12 = [122]
	goto $label$9 
	
.LABEL $label$71
	$12 = [39]
	goto $label$9 
	
.LABEL $label$70
	$12 = [122]
	goto $label$9 
	
.LABEL $label$69
	$12 = [120]
	goto $label$9 
	
.LABEL $label$68
	$12 = [41]
	goto $label$9 
	
.LABEL $label$67
	$12 = [41]
	goto $label$9 
	
.LABEL $label$66
	$12 = [119]
	goto $label$9 
	
.LABEL $label$65
	$12 = [43]
	goto $label$9 
	
.LABEL $label$64
	$12 = [118]
	goto $label$9 
	
.LABEL $label$63
	$12 = [44]
	goto $label$9 
	
.LABEL $label$62
	$12 = [117]
	goto $label$9 
	
.LABEL $label$61
	$12 = [46]
	goto $label$9 
	
.LABEL $label$60
	$12 = [116]
	goto $label$9 
	
.LABEL $label$59
	$12 = [48]
	goto $label$9 
	
.LABEL $label$58
	$12 = [115]
	goto $label$9 
	
.LABEL $label$57
	$12 = [50]
	goto $label$9 
	
.LABEL $label$56
	$12 = [51]
	goto $label$9 
	
.LABEL $label$55
	$12 = [52]
	goto $label$9 
	
.LABEL $label$54
	$12 = [53]
	goto $label$9 
	
.LABEL $label$53
	$12 = [54]
	goto $label$9 
	
.LABEL $label$52
	$12 = [55]
	goto $label$9 
	
.LABEL $label$51
	$12 = [57]
	goto $label$9 
	
.LABEL $label$50
	$12 = [58]
	goto $label$9 
	
.LABEL $label$49
	$12 = [60]
	goto $label$9 
	
.LABEL $label$48
	$12 = [60]
	goto $label$9 
	
.LABEL $label$47
	$12 = [59]
	goto $label$9 
	
.LABEL $label$46
	$12 = [62]
	goto $label$9 
	
.LABEL $label$45
	$12 = [62]
	goto $label$9 
	
.LABEL $label$44
	$12 = [63]
	goto $label$9 
	
.LABEL $label$43
	$12 = [100]
	goto $label$9 
	
.LABEL $label$42
	$12 = [63]
	goto $label$9 
	
.LABEL $label$41
	$12 = [65]
	goto $label$9 
	
.LABEL $label$40
	$12 = [67]
	goto $label$9 
	
.LABEL $label$39
	$12 = [69]
	goto $label$9 
	
.LABEL $label$38
	$12 = [69]
	goto $label$9 
	
.LABEL $label$37
	$12 = [71]
	goto $label$9 
	
.LABEL $label$36
	$12 = [73]
	goto $label$9 
	
.LABEL $label$35
	$12 = [75]
	goto $label$9 
	
.LABEL $label$34
	$12 = [77]
	goto $label$9 
	
.LABEL $label$33
	$12 = [99]
	goto $label$9 
	
.LABEL $label$32
	$12 = [79]
	goto $label$9 
	
.LABEL $label$31
	$12 = [81]
	goto $label$9 
	
.LABEL $label$30
	$12 = [79]
	goto $label$9 
	
.LABEL $label$29
	$12 = [79]
	goto $label$9 
	
.LABEL $label$28
	$12 = [83]
	goto $label$9 
	
.LABEL $label$27
	$12 = [86]
	goto $label$9 
	
.LABEL $label$26
	$12 = [85]
	goto $label$9 
	
.LABEL $label$25
	$12 = [89]
	goto $label$9 
	
.LABEL $label$24
	$12 = [88]
	goto $label$9 
	
.LABEL $label$23
	$12 = [92]
	goto $label$9 
	
.LABEL $label$22
	$12 = [91]
	goto $label$9 
	
.LABEL $label$21
	$12 = [94]
	goto $label$9 
	
.LABEL $label$20
	$12 = [104]
	goto $label$9 
	
.LABEL $label$19
	$12 = [105]
	goto $label$9 
	
.LABEL $label$18
	$12 = [107]
	goto $label$9 
	
.LABEL $label$17
	$12 = [107]
	goto $label$9 
	
.LABEL $label$16
	$12 = [106]
	goto $label$9 
	
.LABEL $label$15
	$12 = [112]
	goto $label$9 
	
.LABEL $label$14
	$12 = [121]
	goto $label$9 
	
.LABEL $label$13
	$12 = [121]
	goto $label$9 
	
.LABEL $label$12
	$12 = [123]
	goto $label$9 
	
.LABEL $label$11
	$12 = [128]
	goto $label$9 
	
.LABEL $label$10
	$12 = [130]
	goto $label$9 
	$12
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$4 = ($global$0 - [496])
	$global$0 = $4
	CALL require_auth($1)
	$5 = CALL db_lowerbound_i64(*($0 + [208]), *(($0 + [216])), (int_64)-4460071177754247168, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$6 = ($0 + [208])
	$5 = CALL $7($6, $5)
	if ( ((int_64)*(($5 + [8])) == (int_64)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL eosio_assert([1], [10650])
	$5 = CALL db_next_i64(*($5 + [104]), ($4 + [64]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $7($6, $5)
	if ( ((int_64)*(($5 + [8])) != (int_64)$2) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_64)*(($5 + [48])) != (int_64)$1) ){ goto $label$3 }
	$7 = ($5 + [16])
	if ( (*($5 + [16]) == 0) ){ goto $label$2 }
	CALL prints([8959])
	CALL prints([9445])
	CALL printui(*($7))
	CALL prints([8856])
	CALL prints([9461])
	CALL printn($1)
	CALL prints([9471])
	CALL prints([9475])
	CALL printui($2)
	CALL prints([8856])
	$2 = CALL current_time()
	CALL prints([9488])
	CALL printui(((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	CALL prints([8856])
	CALL prints([9502])
	CALL printi(*($5 + [64]))
	CALL prints([8856])
	CALL prints([9517])
	CALL prints([11673])
	CALL prints([8856])
	CALL prints([9528])
	CALL prints([11668])
	CALL prints([9020])
	$global$0 = ($4 + [496])
	return 
	
.LABEL $label$4
	CALL prints([8959])
	CALL prints([9445])
	CALL printi((int_64)-1)
	CALL prints([8856])
	CALL prints([9461])
	CALL printn($1)
	CALL prints([9471])
	CALL prints([9475])
	CALL printui($2)
	CALL prints([8856])
	CALL prints([9488])
	CALL printi((int_64)-1)
	CALL prints([8856])
	CALL prints([9502])
	CALL printi((int_64)-1)
	CALL prints([8856])
	CALL prints([9537])
	CALL prints([9558])
	CALL prints([8856])
	CALL prints([9575])
	CALL printi((int_64)0)
	CALL prints([8856])
	CALL prints([9528])
	CALL prints([11673])
	CALL prints([9020])
	$global$0 = ($4 + [496])
	return 
	
.LABEL $label$3
	CALL prints([8959])
	CALL prints([9445])
	CALL printi((int_64)-1)
	CALL prints([8856])
	CALL prints([9461])
	CALL printn($1)
	CALL prints([9471])
	CALL prints([9475])
	CALL printui($2)
	CALL prints([8856])
	$2 = CALL current_time()
	CALL prints([9488])
	CALL printui(((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	CALL prints([8856])
	CALL prints([9502])
	CALL printi(*($5 + [64]))
	CALL prints([8856])
	CALL prints([9537])
	CALL prints([9545])
	CALL prints([8856])
	CALL prints([9517])
	CALL printi((int_64)0)
	CALL prints([8856])
	CALL prints([9528])
	CALL prints([11673])
	CALL prints([9020])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($5 + [64])
	if ( ((uint_32)*($8) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$7 }
	CALL prints([8959])
	CALL prints([9445])
	CALL printui(*($7))
	CALL prints([8856])
	CALL prints([9461])
	CALL printn($1)
	CALL prints([9471])
	CALL prints([9475])
	CALL printui($2)
	CALL prints([8856])
	$2 = CALL current_time()
	CALL prints([9488])
	CALL printui(((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	CALL prints([8856])
	CALL prints([9502])
	CALL printi(*($8))
	CALL prints([8856])
	CALL prints([9517])
	CALL prints([11668])
	CALL prints([8856])
	CALL prints([9528])
	CALL prints([11673])
	CALL prints([9020])
	$global$0 = ($4 + [496])
	return 
	
.LABEL $label$7
	CALL $192(($4 + [288]), $3)
	$9 = *($4 + [288])
	$10 = ($9 & [1])
	CALL $220(($4 + [256]), ( *($4 + [296]) ? (($4 + [288]) | [1]) : $10 ), ( *($4 + [292]) ? uint_32($9 >> [1]) : $10 ))
	$9 = ($0 + [88])
	$10 = *(($0 + [116]))
	if ( ((int_32)$10 == (int_32)*(($0 + [112]))) ){ goto $label$11 }
	$10 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$9), [11277])
	if ( $10 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$10 = CALL db_find_i64(*($9), *(($0 + [96])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$9 }
	$10 = CALL $15($9, $10)
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$9), [11277])
	
.LABEL $label$10
	$11 = *($10 + [56])
	goto $label$8 
	
.LABEL $label$9
	$11 = (int_64)1676034
	
.LABEL $label$8
	$9 = ($5 + [8])
	CALL $193(($4 + [240]), $11)
	$10 = *($4 + [240])
	$12 = ($10 & [1])
	CALL $220(($4 + [208]), ( *($4 + [248]) ? (($4 + [240]) | [1]) : $12 ), ( *($4 + [244]) ? uint_32($10 >> [1]) : $12 ))
	CALL $72($0, (CASTING uint_64)(uint_32 $3))
	CALL $193(($4 + [192]), *($5 + [80]))
	$3 = *($4 + [192])
	$10 = ($3 & [1])
	CALL $220(($4 + [160]), ( *($4 + [200]) ? (($4 + [192]) | [1]) : $10 ), ( *($4 + [196]) ? uint_32($3 >> [1]) : $10 ))
	*((($4 + [64]) + [24])) = *((($4 + [256]) + [24]))
	*((($4 + [64]) + [16])) = *((($4 + [256]) + [16]))
	*(($4 + [104])) = *($4 + [216])
	*(($4 + [112])) = *((($4 + [208]) + [16]))
	*(($4 + [120])) = *((($4 + [208]) + [24]))
	*(($4 + [136])) = *($4 + [168])
	*((($4 + [64]) + [80])) = *((($4 + [160]) + [16]))
	*(($4 + [152])) = *((($4 + [160]) + [24]))
	*($4 + [72]) = *($4 + [264])
	*($4 + [64]) = *($4 + [256])
	*($4 + [96]) = *($4 + [208])
	*($4 + [128]) = *($4 + [160])
	CALL $220(($4 + [32]), ($4 + [64]), [96])
	$13 = *((($4 + [32]) + [24]))
	*(($4 + [24])) = $13
	$11 = *((($4 + [32]) + [16]))
	*(($4 + [16])) = $11
	$14 = *($4 + [40])
	*($4 + [8]) = $14
	$15 = *($4 + [32])
	*($4) = $15
	$13 = ((int_64)$11 + (int_64)$15)
	CALL $19($0, ((int_64)((int_64)$13 + (int_64)$14) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($13 <= $11))), $13)
	$10 = ($5 + [80])
	
.LOOP $label$12:
	$3 = CALL $20($0)
	if ( ($3 <= [4]) ){ goto $label$12 }
	CALL prints([8959])
	CALL prints([9445])
	$3 = (((uint_32)$3 % (uint_32)[6]) + [1])
	CALL printui((CASTING uint_64)(uint_32 $3))
	CALL prints([8856])
	CALL prints([9461])
	CALL printn($1)
	CALL prints([9471])
	CALL prints([9475])
	CALL printui($2)
	CALL prints([8856])
	$2 = CALL current_time()
	CALL prints([9488])
	CALL printui(((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	CALL prints([8856])
	CALL prints([9502])
	$12 = ($5 + [64])
	CALL printi(*($12))
	CALL prints([8856])
	CALL prints([9517])
	CALL prints([11673])
	CALL prints([8856])
	CALL prints([9528])
	CALL prints([11668])
	CALL prints([9020])
	$1 = *($0)
	CALL eosio_assert([1], [10432])
	CALL eosio_assert(((int_32)*($5 + [100]) == (int_32)$6), [10467])
	CALL eosio_assert(((int_64)*(($0 + [208])) == (int_64)CALL $fimport$7()), [10513])
	*(($5 + [16])) = $3
	*($4 + [408]) = *(($5 + [8]))
	$6 = ($5 + [60])
	*($4 + [416]) = *($6)
	$3 = ($5 + [48])
	*($4 + [424]) = *($3)
	*($4 + [432]) = *($12)
	$2 = *($5)
	*($6) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$2 == (int_64)*($5)), [10564])
	*($4 + [400]) = (($4 + [304]) + [74])
	*($4 + [396]) = ($4 + [304])
	*($4 + [392]) = ($4 + [304])
	*($4 + [440]) = ($4 + [392])
	*($4 + [452]) = $9
	*($4 + [448]) = $5
	*($4 + [456]) = $7
	*($4 + [460]) = ($5 + [32])
	*($4 + [464]) = $3
	*($4 + [468]) = ($5 + [56])
	*($4 + [472]) = $6
	*($4 + [476]) = $8
	*($4 + [480]) = $10
	*($4 + [484]) = ($5 + [96])
	*($4 + [488]) = ($5 + [97])
	CALL $42(($4 + [448]), ($4 + [440]))
	CALL db_update_i64(*($5 + [104]), $1, ($4 + [304]), [74])
	$3 = ($0 + [224])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$13 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$3 = (($4 + [408]) + [8])
	*($4 + [448]) = *($9)
	if ( (CALL $212(($4 + [408]), ($4 + [448]), [8]) == 0) ){ goto $label$14 }
	$7 = *($5 + [108])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$15 }
	$7 = CALL db_idx64_find_primary(*(($0 + [208])), *(($0 + [216])), (int_64)-4460071177754247168, ($4 + [440]), $2)
	*(($5 + [108])) = $7
	
.LABEL $label$15
	CALL db_idx64_update($7, $1, ($4 + [448]))
	
.LABEL $label$14
	$7 = (($4 + [408]) + [16])
	*($4 + [448]) = *($6)
	if ( (CALL $212($3, ($4 + [448]), [8]) == 0) ){ goto $label$16 }
	$3 = ($5 + [112])
	$6 = *($3)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*(($0 + [208])), *(($0 + [216])), (int_64)-4460071177754247167, ($4 + [440]), $2)
	*($3) = $6
	
.LABEL $label$17
	CALL db_idx64_update($6, $1, ($4 + [448]))
	
.LABEL $label$16
	$6 = ($4 + [432])
	*($4 + [448]) = *(($5 + [48]))
	if ( (CALL $212($7, ($4 + [448]), [8]) == 0) ){ goto $label$18 }
	$7 = ($5 + [116])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$19 }
	$3 = CALL db_idx64_find_primary(*(($0 + [208])), *(($0 + [216])), (int_64)-4460071177754247166, ($4 + [440]), $2)
	*($7) = $3
	
.LABEL $label$19
	CALL db_idx64_update($3, $1, ($4 + [448]))
	
.LABEL $label$18
	*($4 + [448]) = *($8)
	if ( (CALL $212($6, ($4 + [448]), [8]) == 0) ){ goto $label$20 }
	$6 = ($5 + [120])
	$5 = *($6)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$21 }
	$5 = CALL db_idx64_find_primary(*(($0 + [208])), *(($0 + [216])), (int_64)-4460071177754247165, ($4 + [440]), $2)
	*($6) = $5
	
.LABEL $label$21
	CALL db_idx64_update($5, $1, ($4 + [448]))
	
.LABEL $label$20
	if ( (*($4 + [192]) & [1]) ){ goto $label$25 }
	if ( (*($4 + [240]) & [1]) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*(($4 + [200])))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($4 + [248])))
	if ( ((*($4 + [288]) & [1]) == 0) ){ goto $label$1 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($4 + [288]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($4 + [296])))
	$global$0 = ($4 + [496])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [496])
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $147($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $73($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $148($2, $1)
	CALL $150(CALL $149(CALL $149($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [160])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = [0]
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)1
	*($2 + [48]) = [0]
	*($2 + [56]) = (int_64)1676034
	*($2 + [64]) = (int_64)10
	$3 = ($1 + [88])
	$4 = *(($1 + [116]))
	if ( ((int_32)$4 == (int_32)*(($1 + [112]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [11277])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($1 + [96])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $15($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [11277])
	goto $label$1 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	CALL memcpy(($2 + [80]), $4, [80])
	$5 = *($2 + [80])
	$6 = ((int_64)$5 + (int_64)1)
	*($2 + [80]) = $6
	*($2 + [88]) = ((int_64)*($2 + [88]) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($6 <= $5)))
	CALL $56($3, ($2 + [80]), *($1))
	$5 = *($2 + [80])
	*($0 + [8]) = *($2 + [88])
	*($0) = $5
	$global$0 = ($2 + [160])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $73($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $77(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	$6 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [48])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$6 = (($11 & [-4]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL $216($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	*($4 + [24]) = ($4 + [8])
	*($4 + [64]) = $8
	*($4 + [76]) = $7
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [12])
	*($4 + [44]) = ($1 + [16])
	*($4 + [48]) = ($1 + [24])
	*($4 + [52]) = ($1 + [28])
	*($4 + [56]) = ($1 + [32])
	*($4 + [60]) = ($1 + [40])
	*($4 + [68]) = ($1 + [56])
	*($4 + [72]) = ($1 + [64])
	CALL $106(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10370])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $128(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $182 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10426])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10426])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [10426])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $146(CALL $145($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [10426])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [10426])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [10426])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [10426])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10426])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10426])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10426])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10426])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[3]), [10426])
	$7 = ($0 + [4])
	CALL memcpy(*($7), $6, [4])
	$4 = (*($7) + [4])
	*($7) = $4
	$6 = ($6 + [4])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10426])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10426])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$5 = ($3 | [1])
	$6 = ($1 + [16])
	$7 = ($1 + [20])
	$8 = ($3 + [8])
	$9 = ($1 + [28])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	$12 = [1]
	if ( *($1) ){ goto $label$2 }
	$14 = [1]
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$64 
	
.LABEL $label$65
	*($7) = $13
	*($6) = *($11)
	*($11) = $12
	$12 = [1]
	if ( (*($1) == 0) ){ goto $label$31 }
	$14 = [0]
	goto $label$3 
	
.LABEL $label$64
	$12 = ((int_32)*($10) != (int_32)[0])
	$14 = [1]
	goto $label$3 
	
.LABEL $label$63
	if ( (*($2) == 0) ){ goto $label$30 }
	$14 = [2]
	goto $label$3 
	
.LABEL $label$62
	$13 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($12 | $13) == (int_32)[1]) ){ goto $label$29 }
	$14 = [3]
	goto $label$3 
	
.LABEL $label$61
	$13 = *(($2 + [16]))
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	if ( ((int_32)$16 != (int_32)(*(($2 + [20])) - $13)) ){ goto $label$27 }
	$14 = [24]
	goto $label$3 
	
.LABEL $label$60
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$8 }
	$14 = [25]
	goto $label$3 
	
.LABEL $label$59
	$17 = $12
	$14 = [26]
	goto $label$3 
	
.LABEL $label$58
	if ( ((int_32)*($17) != (int_32)*($13)) ){ goto $label$26 }
	$14 = [27]
	goto $label$3 
	
.LABEL $label$57
	$13 = ($13 + [1])
	$17 = ($17 + [1])
	if ( ((int_32)$15 != (int_32)$17) ){ goto $label$7 }
	$14 = [28]
	goto $label$3 
	
.LABEL $label$56
	if ( ((int_32)*($11) != (int_32)*(($2 + [24]))) ){ goto $label$28 }
	$14 = [29]
	goto $label$3 
	
.LABEL $label$55
	if ( ((int_32)*($9) != (int_32)*(($2 + [28]))) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$54
	$13 = [1]
	$14 = [32]
	goto $label$3 
	
.LABEL $label$53
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$4 }
	$14 = [30]
	goto $label$3 
	
.LABEL $label$52
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	$14 = [4]
	goto $label$3 
	
.LABEL $label$51
	*($8) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$25 }
	$14 = [5]
	goto $label$3 
	
.LABEL $label$50
	if ( ((uint_32)$16 > (uint_32)[10]) ){ goto $label$24 }
	$14 = [22]
	goto $label$3 
	
.LABEL $label$49
	*($3) = ($16 << [1])
	$17 = $5
	if ( ((int_32)$12 != (int_32)$15) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$48
	$13 = (($16 + [16]) & [-16])
	$17 = CALL _Znwj($13)
	*($8) = $17
	*($3) = ($13 | [1])
	*($3 + [4]) = $16
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$23 }
	$14 = [7]
	goto $label$3 
	
.LABEL $label$47
	$13 = $17
	$14 = [8]
	goto $label$3 
	
.LABEL $label$46
	*($13) = *($12)
	$13 = ($13 + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$20 }
	$14 = [9]
	goto $label$3 
	
.LABEL $label$45
	$17 = ($17 + $16)
	$14 = [10]
	goto $label$3 
	
.LABEL $label$44
	*($17) = [0]
	$12 = ($0 + [4])
	$13 = *($12)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [8]))) ){ goto $label$19 }
	$14 = [21]
	goto $label$3 
	
.LABEL $label$43
	*($13) = *($3)
	*(($13 + [8])) = *($8)
	*($8) = [0]
	*($12) = (*($12) + [12])
	*($3) = (int_64)0
	$12 = *($9)
	$13 = *($1)
	if ( $13 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$42
	CALL $141($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$18 }
	$14 = [12]
	goto $label$3 
	
.LABEL $label$41
	CALL _ZdlPv(*($8))
	$14 = [13]
	goto $label$3 
	
.LABEL $label$40
	$12 = *($9)
	$13 = *($1)
	if ( ($13 == 0) ){ goto $label$17 }
	$14 = [14]
	goto $label$3 
	
.LABEL $label$39
	CALL void $3((int_32 $4), (int_32 *($11)), (int_32 $12), (int_32 *(($13 & [-2]) + [4])))
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)*($9)) ){ goto $label$14 }
	$14 = [15]
	goto $label$3 
	
.LABEL $label$38
	$12 = *($3 + [4])
	goto $label$13 
	
.LABEL $label$37
	*($3 + [4]) = $12
	*($3) = $12
	$13 = $12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$36
	if ( ((int_32)*($7) != (int_32)$13) ){ goto $label$9 }
	$14 = [19]
	goto $label$3 
	
.LABEL $label$35
	*($10) = [1]
	goto $label$10 
	
.LABEL $label$34
	$12 = *($3 + [4])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$33
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$32
	CALL $180($3)
	
.LABEL $label$31
	$14 = [1]
	goto $label$3 
	
.LABEL $label$30
	$14 = [33]
	goto $label$3 
	
.LABEL $label$29
	$14 = [32]
	goto $label$3 
	
.LABEL $label$28
	$14 = [4]
	goto $label$3 
	
.LABEL $label$27
	$14 = [4]
	goto $label$3 
	
.LABEL $label$26
	$14 = [4]
	goto $label$3 
	
.LABEL $label$25
	$14 = [23]
	goto $label$3 
	
.LABEL $label$24
	$14 = [6]
	goto $label$3 
	
.LABEL $label$23
	$14 = [10]
	goto $label$3 
	
.LABEL $label$22
	$14 = [10]
	goto $label$3 
	
.LABEL $label$21
	$14 = [7]
	goto $label$3 
	
.LABEL $label$20
	$14 = [8]
	goto $label$3 
	
.LABEL $label$19
	$14 = [11]
	goto $label$3 
	
.LABEL $label$18
	$14 = [13]
	goto $label$3 
	
.LABEL $label$17
	$14 = [20]
	goto $label$3 
	
.LABEL $label$16
	$14 = [20]
	goto $label$3 
	
.LABEL $label$15
	$14 = [14]
	goto $label$3 
	
.LABEL $label$14
	$14 = [17]
	goto $label$3 
	
.LABEL $label$13
	$14 = [16]
	goto $label$3 
	
.LABEL $label$12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$11
	$14 = [16]
	goto $label$3 
	
.LABEL $label$10
	$14 = [16]
	goto $label$3 
	
.LABEL $label$9
	$14 = [16]
	goto $label$3 
	
.LABEL $label$8
	$14 = [28]
	goto $label$3 
	
.LABEL $label$7
	$14 = [26]
	goto $label$3 
	
.LABEL $label$6
	$14 = [31]
	goto $label$3 
	
.LABEL $label$5
	$14 = [30]
	goto $label$3 
	
.LABEL $label$4
	$14 = [31]
	goto $label$3 
	$14
	return (unreachable)
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	
.LOOP $label$2:
	if ( ((int_32)*($2) == (int_32)[58]) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$2 }
	*($0 + [4]) = $3
	*($0) = $3
	return 
	
.LABEL $label$1
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	if ( (*($1 + [4]) == 0) ){ goto $label$3 }
	*($0 + [4]) = ($2 + [1])
	*($0) = $2
	return 
	
.LABEL $label$4
	*($0 + [4]) = $3
	*($0) = $3
	return 
	
.LABEL $label$3
	$1 = $2
	
.LOOP $label$6:
	if ( ((int_32)*($1) != (int_32)[58]) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$6 }
	*($0 + [4]) = $3
	*($0) = $2
	return 
	
.LABEL $label$5
	*($0 + [4]) = $1
	*($0) = $2
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$16 }
	$3 = [0]
	
.LOOP $label$17:
	$2 = [0]
	
.LOOP $label$19:
	if ( ((int_32)*((($3 + $2) + [10735])) != (int_32)*(($2 + [10958]))) ){ goto $label$18 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$15 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[223]) ){ goto $label$19 }
	goto $label$14 
	
.LABEL $label$18
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[223]) ){ goto $label$17 }
	goto $label$14 
	
.LABEL $label$16
	if ( ((uint_32)$2 > (uint_32)[1]) ){ goto $label$13 }
	*($1) = *($0)
	return 
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)[223]) ){ goto $label$12 }
	
.LABEL $label$14
	*($1) = [10735]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$13
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)[3]) ){ goto $label$11 }
	$4 = *($1)
	$3 = [0]
	
.LOOP $label$20:
	$2 = [0]
	
.LOOP $label$22:
	if ( ((int_32)*((($3 + $2) + [10735])) != (int_32)*(($2 + [10958]))) ){ goto $label$21 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$10 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[223]) ){ goto $label$22 }
	goto $label$9 
	
.LABEL $label$21
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[223]) ){ goto $label$20 }
	goto $label$9 
	
.LABEL $label$12
	*($1) = ($3 + [10739])
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$11
	$3 = [0]
	
.LOOP $label$23:
	$2 = [0]
	
.LOOP $label$25:
	if ( ((int_32)*((($3 + $2) + [10735])) != (int_32)*(($2 + [10958]))) ){ goto $label$24 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[223]) ){ goto $label$25 }
	goto $label$7 
	
.LABEL $label$24
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[223]) ){ goto $label$23 }
	goto $label$7 
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)[223]) ){ goto $label$6 }
	
.LABEL $label$9
	$2 = [10735]
	$5 = [0]
	$3 = *($4)
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)[223]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = [10735]
	goto $label$2 
	
.LABEL $label$6
	$2 = ($3 + [10739])
	$5 = [0]
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$4 = ($4 + [1])
	
.LOOP $label$27:
	if ( ((int_32)($3 & [255]) != (int_32)*($2)) ){ goto $label$26 }
	$2 = ($2 + [1])
	$3 = *($4)
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$27 }
	goto $label$4 
	
.LABEL $label$26
	$5 = $3
	
.LABEL $label$4
	if ( ((int_32)($5 & [255]) != (int_32)*($2)) ){ goto $label$28 }
	*($1) = $0
	return 
	
.LABEL $label$28
	*($1) = [0]
	return 
	
.LABEL $label$3
	$2 = ($3 + [10739])
	
.LABEL $label$2
	*($1) = $2
	*($1 + [4]) = [0]
	
.LABEL $label$1
}

int_64 .FUNC $72 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [160])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = [0]
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)1
	*($2 + [48]) = [0]
	*($2 + [56]) = (int_64)1676034
	*($2 + [64]) = (int_64)10
	$3 = ($0 + [88])
	$4 = *(($0 + [116]))
	if ( ((int_32)$4 == (int_32)*(($0 + [112]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [11277])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($0 + [96])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $15($3, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$3), [11277])
	goto $label$1 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	CALL memcpy(($2 + [80]), $4, [80])
	*($2 + [136]) = ((int_64)*($2 + [136]) + (int_64)$1)
	CALL $56($3, ($2 + [80]), *($0))
	$1 = *($2 + [136])
	$global$0 = ($2 + [160])
	return $1
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $198($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	$6 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [48])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$6 = (($11 & [-4]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL $216($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	*($4 + [24]) = ($4 + [8])
	*($4 + [64]) = $8
	*($4 + [76]) = $7
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [12])
	*($4 + [44]) = ($1 + [16])
	*($4 + [48]) = ($1 + [24])
	*($4 + [52]) = ($1 + [28])
	*($4 + [56]) = ($1 + [32])
	*($4 + [60]) = ($1 + [40])
	*($4 + [68]) = ($1 + [56])
	*($4 + [72]) = ($1 + [64])
	CALL $106(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10347])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10370])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10370])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $165(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10426])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $166(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[15]), [10426])
	CALL memcpy(*($0 + [4]), ($4 + [32]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	*($2 + [8]) = $4
	CALL $164(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $73($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10426])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10426])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $146(CALL $145($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10347])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [28]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [20])
	*($3 + [56]) = ($5 + [24])
	CALL $167(($3 + [40]), ($3 + [32]))
	*($5 + [36]) = [-1]
	*($5 + [32]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $80(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [10426])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [40]) = (int_64))(*($1 + [40]) - *(*($3)))
	$6 = *($1)
	CALL eosio_assert([1], [10564])
	$3 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [40])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$3 = (($11 & [-4]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [60]) = $8
	*($5 + [76]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [28])
	*($5 + [56]) = ($1 + [32])
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [56])
	*($5 + [72]) = ($1 + [64])
	CALL $106(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [32]) = (int_64))(*($1 + [32]) - *(*($3)))
	$6 = *($1)
	CALL eosio_assert([1], [10564])
	$3 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [32])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$3 = (($11 & [-4]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [56]) = $8
	*($5 + [76]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [28])
	*($5 + [60]) = ($1 + [40])
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [56])
	*($5 + [72]) = ($1 + [64])
	CALL $106(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [24]) = [4]
	$6 = *($1)
	CALL eosio_assert([1], [10564])
	$7 = [72]
	$8 = ($1 + [72])
	$9 = ($1 + [24])
	$11 = *($1 + [72])
	$10 = *(($1 + [76]))
	$12 = ($10 - $11)
	$13 = (CASTING uint_64)(uint_32 int_32($12 >> [2]))
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$2 }
	$7 = (($12 & [-4]) + $7)
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($7)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $7)
	*($5 + [24]) = ($5 + [8])
	*($5 + [48]) = $9
	*($5 + [76]) = $8
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [52]) = ($1 + [28])
	*($5 + [56]) = ($1 + [32])
	*($5 + [60]) = ($1 + [40])
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [56])
	*($5 + [72]) = ($1 + [64])
	CALL $106(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11620])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-2042605223187841024)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [11566])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11566])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $12(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $90 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($0 + [128])
	$7 = *(($0 + [156]))
	$6 = *(($0 + [152]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$4 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [136])), (int_64)7035938313001238528, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $2($5, $8)
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	
.LABEL $label$2
	$8 = *($9 + [28])
	$7 = uint_32($8 >> [16])
	*($4) = $7
	$8 = ($8 & [65535])
	CALL eosio_assert(((uint_32)$8 >= (uint_32)$3), [9998])
	$8 = ($8 - $3)
	*($4 + [4]) = $8
	if ( ((uint_32)$8 > (uint_32)*($9 + [8])) ){ goto $label$7 }
	if ( ((uint_32)$7 <= (uint_32)*($9 + [12])) ){ goto $label$6 }
	
.LABEL $label$7
	CALL prints([10013])
	CALL printui((CASTING uint_64)(uint_32 $3))
	CALL prints([8856])
	CALL eosio_assert([0], [10026])
	
.LABEL $label$6
	$2 = *($0)
	*($4 + [8]) = $4
	CALL $105($5, $9, $2, ($4 + [8]))
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $91 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($0 + [128])
	$7 = *(($0 + [156]))
	$6 = *(($0 + [152]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$4 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [136])), (int_64)7035938313001238528, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $2($5, $8)
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	
.LABEL $label$2
	$8 = *($9 + [28])
	$7 = ($8 & [65535])
	*($4 + [4]) = $7
	$8 = uint_32($8 >> [16])
	CALL eosio_assert(((uint_32)$8 >= (uint_32)$3), [9949])
	$8 = ($8 - $3)
	*($4) = $8
	if ( ((uint_32)$7 > (uint_32)*($9 + [8])) ){ goto $label$7 }
	if ( ((uint_32)$8 <= (uint_32)*($9 + [12])) ){ goto $label$6 }
	
.LABEL $label$7
	CALL prints([10045])
	CALL printui((CASTING uint_64)(uint_32 $3))
	CALL prints([8856])
	CALL eosio_assert([0], [10056])
	
.LABEL $label$6
	$2 = *($0)
	*($4 + [8]) = $4
	CALL $105($5, $9, $2, ($4 + [8]))
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $92 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($0 + [128])
	$7 = *(($0 + [156]))
	$6 = *(($0 + [152]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$4 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [136])), (int_64)7035938313001238528, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $2($5, $8)
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	
.LABEL $label$2
	$8 = *($9 + [28])
	$7 = ($8 & [65535])
	*($4 + [4]) = $7
	$6 = uint_32($8 >> [16])
	$8 = ($6 + $3)
	CALL eosio_assert(((uint_32)$8 >= (uint_32)$6), [9998])
	*($4) = $8
	if ( ((uint_32)$7 > (uint_32)*($9 + [8])) ){ goto $label$7 }
	if ( ((uint_32)$8 <= (uint_32)*($9 + [12])) ){ goto $label$6 }
	
.LABEL $label$7
	CALL prints([10073])
	CALL printui((CASTING uint_64)(uint_32 $3))
	CALL prints([8856])
	CALL eosio_assert([0], [10086])
	
.LABEL $label$6
	$2 = *($0)
	*($4 + [8]) = $4
	CALL $105($5, $9, $2, ($4 + [8]))
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*((*($1 + [72]) + (*(*($3)) << [2]))) = [-1]
	$6 = *($1)
	CALL eosio_assert([1], [10564])
	$3 = [72]
	$7 = ($1 + [72])
	$9 = *($1 + [72])
	$8 = *(($1 + [76]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [2]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$2 }
	$3 = (($10 & [-4]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [76]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [28])
	*($5 + [56]) = ($1 + [32])
	*($5 + [60]) = ($1 + [40])
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [56])
	*($5 + [72]) = ($1 + [64])
	CALL $106(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$6 = ($global$0 - [16])
	$global$0 = $6
	$7 = *($0)
	$8 = *($7 + [12])
	$9 = *($8)
	$10 = *(*($7 + [8]))
	$11 = *(*($7) + [8])
	*($6 + [8]) = *($8 + [8])
	$8 = CALL db_idx64_store($11, (int_64)7687447330970140672, $10, $9, ($6 + [8]))
	*(*($7 + [4]) + [64]) = $8
	$7 = *($0)
	$8 = *($7 + [12])
	$9 = *($8)
	$10 = *(*($7 + [8]))
	$11 = *(*($7) + [8])
	*($6 + [8]) = *($8 + [24])
	$8 = CALL db_idx64_store($11, (int_64)7687447330970140673, $10, $9, ($6 + [8]))
	*((*($7 + [4]) + [68])) = $8
	$7 = *($0)
	$8 = *($7 + [12])
	$9 = *($8)
	$10 = *(*($7 + [8]))
	$11 = *(*($7) + [8])
	*($6 + [8]) = *($8 + [32])
	$8 = CALL db_idx64_store($11, (int_64)7687447330970140674, $10, $9, ($6 + [8]))
	*((*($7 + [4]) + [72])) = $8
	$7 = *($0)
	$8 = *($7 + [12])
	$9 = *($8)
	$10 = *(*($7 + [8]))
	$11 = *(*($7) + [8])
	*($6 + [8]) = *($8 + [52])
	$8 = CALL db_idx64_store($11, (int_64)7687447330970140675, $10, $9, ($6 + [8]))
	*((*($7 + [4]) + [76])) = $8
	$0 = *($0)
	$7 = *($0 + [12])
	$9 = *($7)
	$10 = *(*($0 + [8]))
	$11 = *(*($0) + [8])
	*($6 + [8]) = *($7 + [16])
	$7 = CALL db_idx64_store($11, (int_64)7687447330970140676, $10, $9, ($6 + [8]))
	*((*($0 + [4]) + [80])) = $7
	$global$0 = ($6 + [16])
}

void .FUNC $139 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [16])
	$global$0 = $6
	$7 = *($0)
	$8 = *($7)
	*($6 + [8]) = *(*($7 + [4]) + [8])
	if ( (CALL $212(*($7 + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$1 }
	$9 = *(*($7 + [12]) + [64])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$2 }
	$9 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)7687447330970140672, $6, *(*($7 + [16])))
	*(*(($7 + [12])) + [64]) = $9
	
.LABEL $label$2
	CALL db_idx64_update($9, *(*($7 + [20])), ($6 + [8]))
	
.LABEL $label$1
	$7 = *($0)
	$8 = *($7)
	*($6 + [8]) = *(*($7 + [4]) + [24])
	if ( (CALL $212((*($7 + [8]) + [8]), ($6 + [8]), [8]) == 0) ){ goto $label$3 }
	$9 = *((*($7 + [12]) + [68]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$4 }
	$9 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)7687447330970140673, $6, *(*($7 + [16])))
	*((*(($7 + [12])) + [68])) = $9
	
.LABEL $label$4
	CALL db_idx64_update($9, *(*($7 + [20])), ($6 + [8]))
	
.LABEL $label$3
	$7 = *($0)
	$8 = *($7)
	*($6 + [8]) = *(*($7 + [4]) + [32])
	if ( (CALL $212((*($7 + [8]) + [16]), ($6 + [8]), [8]) == 0) ){ goto $label$5 }
	$9 = *((*($7 + [12]) + [72]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$6 }
	$9 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)7687447330970140674, $6, *(*($7 + [16])))
	*((*(($7 + [12])) + [72])) = $9
	
.LABEL $label$6
	CALL db_idx64_update($9, *(*($7 + [20])), ($6 + [8]))
	
.LABEL $label$5
	$7 = *($0)
	$8 = *($7)
	*($6 + [8]) = *(*($7 + [4]) + [52])
	if ( (CALL $212((*($7 + [8]) + [24]), ($6 + [8]), [8]) == 0) ){ goto $label$7 }
	$9 = *((*($7 + [12]) + [76]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$8 }
	$9 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)7687447330970140675, $6, *(*($7 + [16])))
	*((*(($7 + [12])) + [76])) = $9
	
.LABEL $label$8
	CALL db_idx64_update($9, *(*($7 + [20])), ($6 + [8]))
	
.LABEL $label$7
	$0 = *($0)
	$9 = *($0)
	*($6 + [8]) = *(*($0 + [4]) + [16])
	if ( (CALL $212((*($0 + [8]) + [32]), ($6 + [8]), [8]) == 0) ){ goto $label$9 }
	$7 = *((*($0 + [12]) + [80]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)7687447330970140676, $6, *(*($0 + [16])))
	*((*(($0 + [12])) + [80])) = $7
	
.LABEL $label$10
	CALL db_idx64_update($7, *(*($0 + [20])), ($6 + [8]))
	
.LABEL $label$9
	$global$0 = ($6 + [16])
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy(($4 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[15]), [10370])
	CALL memcpy(($4 + [32]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	*($2 + [8]) = $4
	CALL $170(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $171(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = ((int_64)((int_64)*(*(*($0 + [4]))) << (int_64)1) | (int_64)1)
	$3 = *($0)
	CALL eosio_assert([1], [10426])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [10426])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [10426])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	$4 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-6189782467562438656, *(*($0 + [8])), $4, $2, [24])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $134 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [8]) = ((int_64)((int_64)*(*($3)) * (int_64)6364136223846793005) + (int_64)*($1 + [16]))
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	CALL eosio_assert([1], [10426])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [10426])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [10426])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($3)
	*($1) = *($4)
	*($1 + [16]) = *($4)
	$3 = *($3 + [4])
	*($1 + [24]) = *($3)
	*($1 + [32]) = *($3)
	$3 = *($0)
	*($1 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [52]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($2 + [72]) = ($2 + [56])
	*($2 + [68]) = $2
	*($2 + [64]) = $2
	*($2 + [80]) = ($2 + [64])
	*($2 + [92]) = ($1 + [8])
	*($2 + [88]) = $1
	*($2 + [96]) = ($1 + [16])
	*($2 + [100]) = ($1 + [24])
	*($2 + [104]) = ($1 + [32])
	*($2 + [108]) = ($1 + [40])
	*($2 + [112]) = ($1 + [44])
	*($2 + [116]) = ($1 + [48])
	*($2 + [120]) = ($1 + [52])
	CALL $96(($2 + [88]), ($2 + [80]))
	$5 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($3 + [8]), (int_64)7687447330970140672, *(*($0 + [8])), $5, $2, [56])
	if ( (uint_64)($5 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($2 + [92]) = $1
	*($2 + [100]) = $1
	*($2 + [96]) = *(($0 + [8]))
	*($2 + [88]) = $3
	*($2 + [80]) = ($2 + [88])
	CALL $138(($2 + [80]), ($3 + [36]), ($3 + [37]), ($3 + [38]), ($3 + [39]), ($3 + [40]))
	$global$0 = ($2 + [128])
}

void .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $213 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $208 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $209 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $207($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $202 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $203 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $200 (int_32 $0)
{
}

int_32 .FUNC $201 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [22] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $203($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $203($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $203($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $203($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [20096]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $203($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $203($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $203($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $206 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $207 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $206($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $204 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $205 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $201([23], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy(($3 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy(($3 + [12]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [10370])
	CALL memcpy(($3 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [10370])
	CALL memcpy(($3 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $163($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $183($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $183($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $180($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)-1)
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	$6 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [56])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$6 = (($11 & [-4]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL $216($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	*($4 + [24]) = ($4 + [8])
	*($4 + [68]) = $8
	*($4 + [76]) = $7
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [12])
	*($4 + [44]) = ($1 + [16])
	*($4 + [48]) = ($1 + [24])
	*($4 + [52]) = ($1 + [28])
	*($4 + [56]) = ($1 + [32])
	*($4 + [60]) = ($1 + [40])
	*($4 + [64]) = ($1 + [48])
	*($4 + [72]) = ($1 + [64])
	CALL $106(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [100])) == (int_32)$0), [11366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11411])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11461])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [104])))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $159(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $123 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [464]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [472]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [456]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [10370])
	CALL memcpy((($4 + [456]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [10370])
	CALL memcpy((($4 + [456]) + [16]), ($2 + [16]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [24])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $126(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [472])
	$1 = *($4 + [464])
	$9 = *($4 + [456])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $219($2)
	
.LABEL $label$6
	CALL $127($8)
	$global$0 = ($4 + [480])
	return [1]
}

int_32 .FUNC $122 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [456]) = (int_64)0
	*($4 + [448]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [448]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10370])
	CALL memcpy((($4 + [448]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $126(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [456])
	$1 = *($4 + [448])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $219($2)
	
.LABEL $label$6
	CALL $127($8)
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $121 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [456]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [456]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $126(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [456])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $219($2)
	
.LABEL $label$6
	CALL $127($8)
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $120 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [528])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [472]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [488]) = (int_64)0
	*($4 + [496]) = (int_64)0
	*($4 + [504]) = (int_64)0
	*($4 + [512]) = (int_64)0
	*($4 + [452]) = $2
	*($4 + [448]) = $2
	*($4 + [456]) = ($2 + $7)
	*($4 + [520]) = ($4 + [448])
	*($4 + [32]) = ($4 + [464])
	CALL $131(($4 + [32]), ($4 + [520]))
	$3 = *($4 + [456])
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$8 = *($4 + [448])
	*($4) = $8
	*($4 + [16]) = $8
	$9 = CALL $126(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$10 = *($4 + [516])
	$11 = *($4 + [512])
	$12 = *($4 + [508])
	$13 = *($4 + [504])
	$0 = *($4 + [496])
	$1 = *($4 + [488])
	$8 = *($4 + [480])
	$14 = *($4 + [472])
	$15 = *($4 + [464])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $15), (int_64 $14), (int_64 $8), (int_64 $1), (int_64 $0), (int_64 $13), (int_32 $12), (int_32 $11), (int_32 $10), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $219($2)
	
.LABEL $label$6
	CALL $127($9)
	$global$0 = ($4 + [528])
	return [1]
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10347])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [64]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80]) = [0]
	*($5 + [84]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [12])
	*($3 + [44]) = ($5 + [16])
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [28])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [72])
	CALL $154(($3 + [32]), ($3 + [24]))
	*($5 + [88]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $23(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $126 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($5 = (($4 + [96]) + [8]))) = *(($3 + [8]))
	*($4 + [96]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [96])
	*($0 + [16]) = $6
	*(($0 + [24])) = $3
	*($4 + [8]) = $6
	*(($0 + [36])) = [0]
	*($0 + [28 align=4]) = (int_64)0
	$5 = ($0 + [28])
	$3 = CALL $213([11271])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($7)
	*($0 + [28]) = ($7 | [1])
	*(($0 + [36])) = $5
	*(($0 + [32])) = $3
	
.LABEL $label$3
	CALL memcpy($5, [11271], $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	*($0 + [40 align=4]) = (int_64)0
	*(($5 = ($0 + [48]))) = [0]
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)9
	*($4 + [24]) = (int_64)21
	*($4 + [32]) = (int_64)30064771085
	*($4 + [40]) = (int_64)38654705664
	*($4 + [48]) = (int_64)42949672981
	*($4 + [56]) = (int_64)55834574855
	*($4 + [64]) = (int_64)64424509455
	*($4 + [72]) = (int_64)90194313216
	*($4 + [80]) = (int_64)90194313226
	*($4 + [88]) = (int_64)90194313237
	$3 = CALL _Znwj([88])
	*($0 + [40]) = $3
	$7 = ($3 + [88])
	*($5) = $7
	*($3) = *($4 + [8])
	*($3 + [8 align=4]) = *($4 + [16])
	*($3 + [16 align=4]) = *($4 + [24])
	*($3 + [24 align=4]) = *($4 + [32])
	*($3 + [32 align=4]) = *($4 + [40])
	*($3 + [40 align=4]) = *($4 + [48])
	*($3 + [48 align=4]) = *($4 + [56])
	*($3 + [56 align=4]) = *($4 + [64])
	*(($0 + [44])) = $7
	*($3 + [64 align=4]) = *($4 + [72])
	*($3 + [72 align=4]) = *($4 + [80])
	*($3 + [80 align=4]) = *($4 + [88])
	*($0 + [52 align=4]) = (int_64)0
	*(($5 = ($0 + [60]))) = [0]
	*($4 + [8]) = (int_64)4294967298
	*($4 + [16]) = (int_64)8589934601
	*($4 + [24]) = (int_64)12884901906
	*($4 + [32]) = (int_64)34359738380
	*($4 + [40]) = (int_64)38654705665
	*($4 + [48]) = (int_64)42949672979
	*($4 + [56]) = (int_64)51539607560
	*($4 + [64]) = (int_64)60129542158
	*($4 + [72]) = (int_64)77309411331
	*($4 + [80]) = (int_64)81604378633
	*($4 + [88]) = (int_64)81604378642
	$3 = CALL _Znwj([88])
	*($0 + [52]) = $3
	$7 = ($3 + [88])
	*($5) = $7
	*($3) = *($4 + [8])
	*($3 + [8 align=4]) = *($4 + [16])
	*($3 + [16 align=4]) = *($4 + [24])
	*($3 + [24 align=4]) = *($4 + [32])
	*($3 + [32 align=4]) = *($4 + [40])
	*($3 + [40 align=4]) = *($4 + [48])
	*($3 + [48 align=4]) = *($4 + [56])
	*($3 + [56 align=4]) = *($4 + [64])
	*(($0 + [56])) = $7
	*($3 + [64 align=4]) = *($4 + [72])
	*($3 + [72 align=4]) = *($4 + [80])
	*($3 + [80 align=4]) = *($4 + [88])
	*($0 + [64 align=4]) = (int_64)0
	*(($5 = ($0 + [72]))) = [0]
	*($4 + [8]) = (int_64)8589934594
	*($4 + [16]) = (int_64)8589934600
	*($4 + [24]) = (int_64)12884901904
	*($4 + [32]) = (int_64)30064771083
	*($4 + [40]) = (int_64)34359738370
	*($4 + [48]) = (int_64)38654705681
	*($4 + [56]) = (int_64)47244640263
	*($4 + [64]) = (int_64)51539607564
	*($4 + [72]) = (int_64)68719476739
	*($4 + [80]) = (int_64)73014444041
	*($4 + [88]) = (int_64)73014444049
	$3 = CALL _Znwj([88])
	*($0 + [64]) = $3
	$7 = ($3 + [88])
	*($5) = $7
	*($3) = *($4 + [8])
	*($3 + [8 align=4]) = *($4 + [16])
	*($3 + [16 align=4]) = *($4 + [24])
	*($3 + [24 align=4]) = *($4 + [32])
	*($3 + [32 align=4]) = *($4 + [40])
	*($3 + [40 align=4]) = *($4 + [48])
	*($3 + [48 align=4]) = *($4 + [56])
	*($3 + [56 align=4]) = *($4 + [64])
	*(($0 + [68])) = $7
	*($3 + [64 align=4]) = *($4 + [72])
	*($3 + [72 align=4]) = *($4 + [80])
	*($3 + [80 align=4]) = *($4 + [88])
	*($0 + [76 align=4]) = (int_64)0
	*(($5 = ($0 + [84]))) = [0]
	*($4 + [8]) = (int_64)8589934594
	*($4 + [16]) = (int_64)4294967303
	*($4 + [24]) = (int_64)8589934605
	*($4 + [32]) = (int_64)25769803784
	*($4 + [40]) = (int_64)30064771073
	*($4 + [48]) = (int_64)30064771085
	*($4 + [56]) = (int_64)34359738374
	*($4 + [64]) = (int_64)42949672970
	*($4 + [72]) = (int_64)55834574850
	*($4 + [80]) = (int_64)55834574855
	*($4 + [88]) = (int_64)51539607565
	$3 = CALL _Znwj([88])
	*($0 + [76]) = $3
	$7 = ($3 + [88])
	*($5) = $7
	*($3) = *($4 + [8])
	*($3 + [8 align=4]) = *($4 + [16])
	*($3 + [16 align=4]) = *($4 + [24])
	*($3 + [24 align=4]) = *($4 + [32])
	*($3 + [32 align=4]) = *($4 + [40])
	*($3 + [40 align=4]) = *($4 + [48])
	*($3 + [48 align=4]) = *($4 + [56])
	*($3 + [56 align=4]) = *($4 + [64])
	*(($0 + [80])) = $7
	*($3 + [64 align=4]) = *($4 + [72])
	*($3 + [72 align=4]) = *($4 + [80])
	*($3 + [80 align=4]) = *($4 + [88])
	*(($0 + [96])) = $2
	*($0 + [88]) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*($0 + [128]) = $1
	*(($0 + [136])) = $2
	*(($0 + [144])) = (int_64)-1
	*(($0 + [152])) = (int_64)0
	*(($0 + [160])) = [0]
	*($0 + [168]) = $1
	*(($0 + [176])) = $2
	*(($0 + [184])) = (int_64)-1
	*(($0 + [192])) = (int_64)0
	*(($0 + [200])) = (int_64)0
	*($0 + [208]) = $1
	*(($0 + [216])) = $2
	*(($0 + [224])) = (int_64)-1
	*(($0 + [232])) = (int_64)0
	*(($0 + [240])) = (int_64)0
	*($0 + [248]) = $1
	*(($0 + [256])) = $2
	*(($0 + [264])) = (int_64)-1
	*(($0 + [272])) = (int_64)0
	*(($0 + [280])) = (int_64)0
	*(($0 + [288])) = [0]
	*($0 + [296]) = $1
	*(($0 + [304])) = $2
	*(($0 + [312])) = (int_64)-1
	*(($0 + [320])) = (int_64)0
	*(($0 + [328])) = [0]
	*($0 + [336]) = $1
	*(($0 + [344])) = $2
	*(($0 + [352])) = (int_64)-1
	*(($0 + [360])) = [0]
	*(($0 + [372])) = [0]
	*(($0 + [364])) = (int_64)0
	*($0 + [376]) = $1
	*(($0 + [384])) = $2
	*(($0 + [392])) = (int_64)-1
	*(($0 + [400])) = (int_64)0
	*(($0 + [408])) = [0]
	$global$0 = ($4 + [112])
	return $0
	
.LABEL $label$1
	CALL $180($5)
	return (unreachable)
}

int_32 .FUNC $125 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [512])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [472]) = [0]
	*($4 + [464]) = (int_64)0
	*($4 + [452]) = $2
	*($4 + [448]) = $2
	*($4 + [456]) = ($2 + $7)
	CALL $128(($4 + [448]), ($4 + [464]))
	$3 = *($4 + [456])
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$8 = *($4 + [448])
	*($4) = $8
	*($4 + [16]) = $8
	$9 = CALL $126(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$10 = CALL $181(($4 + [480]), ($4 + [464]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $181(($4 + [496]), $10)
	CALL void $3((int_32 $5), (int_32 $6))
	if ( (*($4 + [496]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [480]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [480]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($10 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $219($2)
	
.LABEL $label$5
	CALL $127($9)
	if ( ((*($4 + [464]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [472])))
	
.LABEL $label$10
	$global$0 = ($4 + [512])
	return [1]
}

int_32 .FUNC $124 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [456]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [10370])
	CALL memcpy(($4 + [456]), $2, [4])
	$3 = ($2 + $7)
	*(($4 + [16])) = $3
	*($4 + [28]) = ($2 + [4])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $126(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$9 = *($4 + [456])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $9), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $127($8)
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *(($0 + [28]))
	if ( ((int_32)$2 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$0), [11277])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $15($0, $2)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$0), [11277])
	
.LABEL $label$2
	CALL eosio_assert([1], [11332])
	CALL eosio_assert([1], [10650])
	$3 = CALL db_next_i64(*($2 + [84]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	CALL $15($0, $3)
	
.LABEL $label$4
	CALL $16($0, $2)
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10347])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [40]) = (int_64)1
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [56]) = (int_64)1676034
	*($5 + [64]) = (int_64)10
	*($5 + [80]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [64])
	CALL $151(($3 + [32]), ($3 + [24]))
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)4982871454518345728
	*($3 + [4]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4982871454518345728
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $152(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [11366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11411])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [11461])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [84]))
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth((int_64)-7947877572870428864)
	$5 = *($1)
	$4 = CALL $213([8374])
	if ( ((int_32)$4 != (int_32)( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$1 }
	if ( CALL $187($1, [0], [-1], [8374], $4) ){ goto $label$1 }
	CALL $14(($0 + [88]))
	
.LABEL $label$1
	$5 = *($1)
	$6 = ($1 + [4])
	$4 = CALL $213([8253])
	if ( ((int_32)$4 != (int_32)( *($6) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$2 }
	if ( CALL $187($1, [0], [-1], [8253], $4) ){ goto $label$2 }
	$7 = ($0 + [168])
	$4 = *(($0 + [196]))
	$8 = *(($0 + [192]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($4 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$5 }
	$4 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($9 + [100])) == (int_32)$7), [11277])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$5 = CALL db_find_i64(*($7), *(($0 + [176])), (int_64)-2189421640876556288, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $4($7, $5)
	CALL eosio_assert(((int_32)*($9 + [100]) == (int_32)$7), [11277])
	
.LABEL $label$3
	$5 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($5, [8388])
	CALL eosio_assert($5, [11332])
	CALL eosio_assert($5, [10650])
	$5 = CALL db_next_i64(*($9 + [104]), ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	CALL $4($7, $5)
	
.LABEL $label$7
	CALL $6($7, $9)
	
.LABEL $label$2
	$5 = *($1)
	$4 = CALL $213([8347])
	if ( ((int_32)$4 != (int_32)( *($6) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$8 }
	if ( CALL $187($1, [0], [-1], [8347], $4) ){ goto $label$8 }
	$6 = ($0 + [208])
	$4 = *(($0 + [236]))
	$8 = *(($0 + [232]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$12:
	$5 = ($4 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$11 }
	$4 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*(($9 + [100])) == (int_32)$6), [11277])
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	$5 = CALL db_find_i64(*($6), *(($0 + [216])), (int_64)-4460071177754247168, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$9 = CALL $7($6, $5)
	CALL eosio_assert(((int_32)*($9 + [100]) == (int_32)$6), [11277])
	
.LABEL $label$9
	$5 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($5, [8388])
	CALL eosio_assert($5, [11332])
	CALL eosio_assert($5, [10650])
	$5 = CALL db_next_i64(*($9 + [104]), ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$13 }
	CALL $7($6, $5)
	
.LABEL $label$13
	CALL $9($6, $9)
	
.LABEL $label$8
	$5 = *($1)
	$6 = ($1 + [4])
	$4 = CALL $213([8356])
	if ( ((int_32)$4 != (int_32)( *($6) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$14 }
	if ( CALL $187($1, [0], [-1], [8356], $4) ){ goto $label$14 }
	$7 = ($0 + [248])
	$4 = *(($0 + [276]))
	$8 = *(($0 + [272]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$16 }
	
.LOOP $label$18:
	$5 = ($4 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$17 }
	$4 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$7), [11277])
	goto $label$15 
	
.LABEL $label$16
	$9 = [0]
	$5 = CALL db_find_i64(*($7), *(($0 + [256])), (int_64)7687447330970140672, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$15 }
	$9 = CALL $10($7, $5)
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$7), [11277])
	
.LABEL $label$15
	$5 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($5, [8388])
	CALL eosio_assert($5, [11332])
	CALL eosio_assert($5, [10650])
	$5 = CALL db_next_i64(*($9 + [60]), ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$19 }
	CALL $10($7, $5)
	
.LABEL $label$19
	CALL $11($7, $9)
	
.LABEL $label$14
	$5 = *($1)
	$4 = CALL $213([8364])
	if ( ((int_32)$4 != (int_32)( *($6) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$21 }
	if ( (CALL $187($1, [0], [-1], [8364], $4) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$20
	$8 = ($0 + [296])
	$5 = *(($0 + [324]))
	$9 = *(($0 + [320]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$23 }
	
.LOOP $label$25:
	$1 = ($5 + [-24])
	$4 = *($1)
	if ( ((int_64)*($4) == (int_64)$2) ){ goto $label$24 }
	$5 = $1
	if ( ((int_32)$9 != (int_32)$1) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$23 }
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$8), [11277])
	goto $label$22 
	
.LABEL $label$23
	$4 = [0]
	$1 = CALL db_find_i64(*($8), *(($0 + [304])), (int_64)-2042605223187841024, $2)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$22 }
	$4 = CALL $12($8, $1)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$8), [11277])
	
.LABEL $label$22
	$1 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($1, [8388])
	CALL eosio_assert($1, [11332])
	CALL eosio_assert($1, [10650])
	$1 = CALL db_next_i64(*($4 + [60]), ($3 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$26 }
	CALL $12($8, $1)
	
.LABEL $label$26
	CALL $13($8, $4)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10347])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [56]) = $0
	*($5 + [16]) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [44])
	*($3 + [68]) = ($5 + [48])
	*($3 + [72]) = ($5 + [52])
	CALL $135(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = $1
	*($5 + [64 align=4]) = (int_64)-1
	*($5 + [72 align=4]) = (int_64)-1
	*($5 + [80]) = [-1]
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $137(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [11366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11411])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11461])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [60]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $160(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]), ($0 + [40]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10347])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [56]) = $0
	*($5 + [16]) = (int_64)0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [44])
	*($3 + [68]) = ($5 + [48])
	*($3 + [72]) = ($5 + [52])
	CALL $135(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $97(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [11366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11411])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11461])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $185 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$6 = ($global$0 - [128])
	$global$0 = $6
	*($6 + [76]) = $2
	*($6 + [80]) = $1
	*($6 + [72]) = $3
	*($6 + [68]) = $4
	*($6 + [56]) = $5
	CALL require_auth((int_64)-7947877572870428864)
	CALL eosio_assert(((int_64)$5 > (int_64)0), [8403])
	CALL eosio_assert(($2 <= [50]), [8411])
	CALL eosio_assert(($3 <= [50]), [8436])
	CALL eosio_assert((($4 + [-1]) <= [2]), [8462])
	CALL $19($0, ((int_64)((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000) & (int_64)4294967295), (int_64)66)
	if ( ((int_32)$2 != (int_32)[23]) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)[23]) ){ goto $label$2 }
	$7 = ($0 + [40])
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$2 != (int_32)[21]) ){ goto $label$3 }
	if ( ((int_32)$3 != (int_32)[21]) ){ goto $label$3 }
	$7 = ($0 + [52])
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$2 != (int_32)[19]) ){ goto $label$4 }
	if ( ((int_32)$3 != (int_32)[19]) ){ goto $label$4 }
	$7 = ($0 + [64])
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$2 != (int_32)[17]) ){ goto $label$5 }
	if ( ((int_32)$3 != (int_32)[17]) ){ goto $label$5 }
	$7 = ($0 + [76])
	goto $label$1 
	
.LABEL $label$5
	$7 = [0]
	CALL eosio_assert([0], [8477])
	
.LABEL $label$1
	$8 = int_32((*($7 + [4]) - *($7)) >> [3])
	$2 = ((uint_32)([0] - $8) % (uint_32)$8)
	
.LOOP $label$6:
	$3 = CALL $20($0)
	if ( ($3 <= $2) ){ goto $label$6 }
	$9 = ((uint_32)$3 % (uint_32)$8)
	$4 = *($7)
	$5 = *(($4 + ($9 << [3])))
	*($6 + [52]) = (((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)) & [65535]) | ((CASTING uint_32)(uint_64 $5) << [16]))
	$2 = [0]
	*($6 + [48]) = [0]
	*($6 + [40]) = (int_64)0
	$10 = ($7 + [4])
	$8 = *($10)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$7 }
	$3 = [4]
	
.LOOP $label$8:
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$9 }
	$11 = ($4 + $3)
	$12 = (*($11) | (*(($11 + [-4])) << [16]))
	*($6 + [8]) = $12
	$11 = *($6 + [44])
	if ( ((uint_32)$11 >= (uint_32)*((($6 + [40]) + [8]))) ){ goto $label$10 }
	*($11) = $12
	*($6 + [44]) = ($11 + [4])
	goto $label$9 
	
.LABEL $label$10
	CALL $21(($6 + [40]), ($6 + [8]))
	$8 = *($10)
	$4 = *($7)
	
.LABEL $label$9
	$3 = ($3 + [8])
	$2 = ($2 + [1])
	if ( ($2 <= int_32(($8 - $4) >> [3])) ){ goto $label$8 }
	
.LABEL $label$7
	$5 = *($0)
	*($6 + [8]) = $0
	*($6 + [12]) = ($6 + [52])
	*($6 + [16]) = ($6 + [68])
	*($6 + [20]) = ($6 + [76])
	*($6 + [24]) = ($6 + [72])
	*($6 + [28]) = ($6 + [56])
	*($6 + [32]) = ($6 + [80])
	*($6 + [36]) = ($6 + [40])
	*($6 + [120]) = $5
	CALL eosio_assert(((int_64)*($0 + [128]) == (int_64)CALL $fimport$7()), [10375])
	$3 = ($0 + [128])
	*($6 + [96]) = $3
	*($6 + [100]) = ($6 + [8])
	*($6 + [104]) = ($6 + [120])
	*(($2 = CALL _Znwj([96])) + [64]) = (int_64)0
	*($2 + [72 align=4]) = (int_64)0
	*($2 + [80]) = [0]
	*($2 + [84]) = $3
	CALL $22(($6 + [96]), $2)
	*($6 + [112]) = $2
	$5 = *($2)
	*($6 + [96]) = $5
	$4 = *($2 + [88])
	*($6 + [92]) = $4
	$8 = ($0 + [156])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [160]))) ){ goto $label$15 }
	*($3 + [8]) = $5
	*($3 + [16]) = $4
	*($6 + [112]) = [0]
	*($3) = $2
	*($8) = ($3 + [24])
	$2 = *($6 + [112])
	*($6 + [112]) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $23(($0 + [152]), ($6 + [112]), ($6 + [96]), ($6 + [92]))
	$2 = *($6 + [112])
	*($6 + [112]) = [0]
	if ( $2 ){ goto $label$13 }
	
.LABEL $label$14
	$2 = *($6 + [40])
	if ( ($2 == 0) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$0 = *($2 + [72])
	if ( ($0 == 0) ){ goto $label$16 }
	*(($2 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$16
	CALL _ZdlPv($2)
	$2 = *($6 + [40])
	if ( ($2 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	*($6 + [44]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($6 + [128])
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $2
	*($3 + [24]) = $1
	$4 = ($0 + [376])
	$5 = CALL db_lowerbound_i64(*($0 + [376]), *(($0 + [384])), (int_64)-6189782467562438656, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL $24($4, $5)
	$1 = *($0)
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [10432])
	CALL $25($4, $5, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	*($3) = ($3 + [16])
	CALL $26(($3 + [8]), $4, $1, $3)
	$5 = *($3 + [12])
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [8]) = ($3 + [24])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [10432])
	CALL $27($4, $5, $1, ($3 + [8]))
	$global$0 = ($3 + [32])
}

void .FUNC $184 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $187 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $212(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $218 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11692]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11696])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11692]) = [1]
	$2 = ($2 << [16])
	*([0] + [11696]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11696])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11696]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11692]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11692]) = [1]
	$3 = ($3 << [16])
	*([0] + [11696]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11696])
	
.LABEL $label$10
	*([0] + [11696]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $186 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $182($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $180 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $116 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [528])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [480]) = [0]
	*($4 + [472]) = (int_64)0
	*($4 + [488]) = (int_64)0
	*($4 + [460]) = $2
	*($4 + [456]) = $2
	*($4 + [464]) = ($2 + $7)
	CALL $128(($4 + [456]), ($4 + [472]))
	CALL eosio_assert(((uint_32)(*($4 + [464]) - *($4 + [460])) > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [488]), *($4 + [460]), [8])
	*($4 + [460]) = (*($4 + [460]) + [8])
	$3 = *($4 + [464])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [456])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	$9 = CALL $126(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$10 = CALL $181(($4 + [496]), ($4 + [472]))
	$0 = *($4 + [488])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $181(($4 + [512]), $10)
	CALL void $3((int_32 $5), (int_32 $0), (int_64 $6))
	if ( (*($4 + [512]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [496]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [496]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($10 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $219($2)
	
.LABEL $label$5
	CALL $127($9)
	if ( ((*($4 + [472]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [480])))
	
.LABEL $label$10
	$global$0 = ($4 + [528])
	return [1]
}

int_32 .FUNC $117 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [456]) = (int_64)0
	*($4 + [448]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [448]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10370])
	CALL memcpy((($4 + [448]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $126(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [456])
	$1 = *($4 + [448])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $219($2)
	
.LABEL $label$6
	CALL $127($8)
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $114 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [456]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [456]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $126(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [456])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $219($2)
	
.LABEL $label$6
	CALL $127($8)
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $115 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [464]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [472]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [456]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [10370])
	CALL memcpy((($4 + [456]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [10370])
	CALL memcpy((($4 + [456]) + [16]), ($2 + [16]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [24])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $126(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [472])
	$1 = *($4 + [464])
	$9 = *($4 + [456])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $219($2)
	
.LABEL $label$6
	CALL $127($8)
	$global$0 = ($4 + [480])
	return [1]
}

int_32 .FUNC $112 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [456]) = (int_64)0
	*($4 + [448]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [448]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10370])
	CALL memcpy((($4 + [448]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $126(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [456])
	$1 = *($4 + [448])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $219($2)
	
.LABEL $label$6
	CALL $127($8)
	$global$0 = ($4 + [464])
	return [1]
}

int_32 .FUNC $113 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [448])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $126(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $219($2)
	
.LABEL $label$6
	CALL $127($8)
	$global$0 = ($4 + [448])
	return [1]
}

int_32 .FUNC $110 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [512])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [472]) = (int_64)0
	*($4 + [480]) = (int_64)0
	*($4 + [488]) = [0]
	*($4 + [496]) = (int_64)0
	*($4 + [460]) = $2
	*($4 + [456]) = $2
	*($4 + [464]) = ($2 + $7)
	*($4 + [504]) = ($4 + [456])
	*($4 + [40]) = ($4 + [472])
	CALL $129(($4 + [40]), ($4 + [504]))
	$3 = *($4 + [464])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [456])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	$9 = CALL $126(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [496])
	$10 = *($4 + [488])
	$11 = *($4 + [484])
	$12 = *($4 + [480])
	$1 = *($4 + [472])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $12), (int_32 $11), (int_32 $10), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $127($9)
	$global$0 = ($4 + [512])
	return [1]
}

int_32 .FUNC $111 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_64 $17
	int_64 $18
	$3 = ($global$0 - [592])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [504]))) = (int_64)0
	*(($9 = ($4 + [552]))) = (int_64)0
	*($4 + [496]) = (int_64)0
	*($4 + [544]) = (int_64)0
	*($4 + [472]) = (int_64)0
	*($4 + [464]) = (int_64)0
	*($4 + [480]) = [0]
	*($4 + [512]) = (int_64)0
	*($4 + [520]) = (int_64)0
	*($4 + [528]) = [0]
	*($4 + [560]) = [0]
	*($4 + [452]) = $2
	*($4 + [448]) = $2
	*($4 + [456]) = ($2 + $7)
	*($4 + [584]) = ($4 + [448])
	*($4 + [32]) = ($4 + [464])
	CALL $130(($4 + [32]), ($4 + [584]))
	$3 = *($4 + [456])
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$10 = *($4 + [448])
	*($4) = $10
	*($4 + [16]) = $10
	$11 = CALL $126(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($9)
	$1 = *($8)
	$10 = *($4 + [544])
	$12 = *($4 + [496])
	$8 = *($4 + [560])
	$9 = *($4 + [528])
	$13 = *($4 + [524])
	$14 = *($4 + [520])
	$15 = *($4 + [512])
	$16 = *($4 + [480])
	$17 = *($4 + [472])
	$18 = *($4 + [464])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $18), (int_64 $17), (int_64 $16), (int_32 $12), (int_64 $1), (int_64 $15), (int_64 $14), (int_32 $13), (int_32 $9), (int_32 $10), (int_64 $0), (int_64 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $127($11)
	$global$0 = ($4 + [592])
	return [1]
}

int_32 .FUNC $118 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [464]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [472]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [456]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10370])
	CALL memcpy((($4 + [456]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[16]), [10370])
	CALL memcpy((($4 + [456]) + [16]), ($2 + [16]), [4])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [20])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $126(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$9 = *($4 + [472])
	$0 = *($4 + [464])
	$1 = *($4 + [456])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $9), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $127($8)
	$global$0 = ($4 + [480])
	return [1]
}

int_32 .FUNC $119 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [464])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $216($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [456]) = [0]
	*($4 + [448]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10370])
	CALL memcpy(($4 + [448]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[8]), [10370])
	CALL memcpy((($4 + [448]) + [8]), ($2 + [8]), [4])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [12])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $126(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$9 = *($4 + [456])
	$0 = *($4 + [448])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $9), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $219($2)
	
.LABEL $label$5
	CALL $127($8)
	$global$0 = ($4 + [464])
	return [1]
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [24]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [10564])
	$3 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [24])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$3 = (($11 & [-4]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [48]) = $8
	*($5 + [76]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [52]) = ($1 + [28])
	*($5 + [56]) = ($1 + [32])
	*($5 + [60]) = ($1 + [40])
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [56])
	*($5 + [72]) = ($1 + [64])
	CALL $106(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	CALL require_auth((int_64)-7947877572870428864)
	if ( ((uint_32)$2 > (uint_32)[4]) ){ goto $label$2 }
	if ( (([1] << $2) & [22]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8498])
	
.LABEL $label$1
	$4 = ($0 + [128])
	$6 = *(($0 + [156]))
	$5 = *(($0 + [152]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$4), [11277])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$2 = CALL db_find_i64(*($4), *(($0 + [136])), (int_64)7035938313001238528, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $2($4, $2)
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$4), [11277])
	
.LABEL $label$3
	$2 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($2, [8525])
	$1 = *($0)
	*($3 + [8]) = ($3 + [12])
	CALL eosio_assert($2, [10432])
	CALL $29($4, $7, $1, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $198($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = ($0 + [376])
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($0 + [376]), *(($0 + [384])), (int_64)-6189782467562438656, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $24($2, $4)
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [10623])
	
.LABEL $label$1
	$5 = *($3 + [8])
	*($1 + [8]) = $5
	$6 = *($0)
	*($1) = ($1 + [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [10432])
	CALL $134($2, $3, $6, $1)
	$global$0 = ($1 + [16])
	(rotr((int_32) (CASTING uint_32)(uint_64 (uint_64)((int_64)$5 ^ (int_64)(uint_64)$5 >> (uint_64)(int_64)18)) >> (uint_64)(int_64)27))))
	return (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [72])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [76])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [144])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [128])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [136])), (int_64)7035938313001238528, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $2($9, $10)
	*($3 + [36]) = [0]
	*($3 + [32]) = $9
	$8 = *(*(CALL $161(($3 + [32])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [144])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [11514])
	$8 = *($7)
	*($1 + [28]) = *(*($5 + [4]))
	*($1 + [24]) = *(*($5 + [8]))
	*($1) = $8
	*($1 + [8]) = *(*($5 + [12]))
	*($1 + [16]) = *(*($5 + [20]))
	*($1 + [12]) = *(*($5 + [16]))
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = *(*($5 + [24]))
	$9 = *($6 + [4])
	$6 = *($5 + [28])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$4 }
	$11 = ($1 + [72])
	$12 = ($1 + [76])
	$10 = ($1 + [80])
	
.LOOP $label$5:
	$7 = *($5)
	*($3 + [32]) = $7
	$6 = *(($1 + [76]))
	if ( ((int_32)$6 == (int_32)*($10)) ){ goto $label$6 }
	*($6) = $7
	*($12) = ($6 + [4])
	$5 = ($5 + [4])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	CALL $162($11, ($3 + [32]))
	$5 = ($5 + [4])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$12 = ($1 + [76])
	$11 = ($1 + [72])
	
.LABEL $label$3
	$7 = ($1 + [56])
	$9 = ($1 + [48])
	$10 = ($1 + [40])
	$13 = ($1 + [32])
	$14 = ($1 + [16])
	$15 = ($1 + [12])
	$16 = ($1 + [8])
	$17 = ($1 + [24])
	$18 = ($1 + [28])
	$12 = *($11)
	$6 = *($12)
	$19 = ($6 - $12)
	$8 = (CASTING uint_64)(uint_32 int_32($19 >> [2]))
	$5 = [72]
	
.LOOP $label$7:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$8 }
	$5 = (($19 & [-4]) + $5)
	
.LABEL $label$8
	if ( ($5 <= [513]) ){ goto $label$10 }
	$6 = CALL $216($5)
	goto $label$9 
	
.LABEL $label$10
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$9
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $16
	*($3 + [32]) = $1
	*($3 + [40]) = $15
	*($3 + [44]) = $14
	*($3 + [48]) = $17
	*($3 + [52]) = $18
	*($3 + [56]) = $13
	*($3 + [60]) = $10
	*($3 + [64]) = $9
	*($3 + [68]) = $7
	*($3 + [72]) = ($1 + [64])
	*($3 + [76]) = $11
	CALL $106(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($4 + [8]), (int_64)7035938313001238528, *(*($0 + [8])), $8, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$13 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $219($6)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$11 }
	
.LABEL $label$12
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$11
	$global$0 = ($3 + [80])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = ((int_64)((int_64)*(*($3)) << (int_64)1) | (int_64)1)
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	CALL eosio_assert([1], [10426])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [10426])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [10426])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10347])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $216($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)-2720673578348880933
	*($5 + [8]) = (int_64)-8846114313915602277
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10370])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [10370])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [10370])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $133(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $219($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	$5 = *($1 + [16])
	$6 = ((int_64)((int_64)*($1 + [8]) * (int_64)6364136223846793005) + (int_64)$5)
	*($1 + [8]) = $6
	*($1 + [8]) = ((int_64)$5 + (int_64)((int_64)((int_64)*(*($3)) + (int_64)$6) * (int_64)6364136223846793005))
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	CALL eosio_assert([1], [10426])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [10426])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [10426])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [10375])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [16]) = (int_64)-2720673578348880933
	*($3 + [8]) = (int_64)-8846114313915602277
	*($3 + [24]) = $1
	CALL $132(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $133(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($0 + [4]), ($4 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $168(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	$4 = *($1)
	$5 = $3
	CALL memcpy(($5 + [16]), $1, [72])
	*(($5 + [96])) = [0]
	*($5 + [88]) = (int_64)0
	$6 = (*(($1 + [76])) - *($1 + [72]))
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = int_32($6 >> [2])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$6 = CALL _Znwj($6)
	*((($5 + [16]) + [72])) = $6
	*(($8 = (($5 + [16]) + [76]))) = $6
	*(($5 + [96])) = ($6 + ($7 << [2]))
	$9 = *(($1 + [72]))
	$7 = (*(($1 + [76])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($6, $9, $7)
	*($8) = ($6 + $7)
	
.LABEL $label$5
	*($5 + [56]) = (int_64)0
	if ( ($6 == 0) ){ goto $label$3 }
	*(($5 + [92])) = $6
	CALL _ZdlPv($6)
	goto $label$3 
	
.LABEL $label$4
	*($5 + [56]) = (int_64)0
	
.LABEL $label$3
	$7 = ($1 + [72])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [10564])
	$6 = [72]
	$9 = *(($1 + [72]))
	$8 = *(($1 + [76]))
	$10 = ($8 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [2]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$7 }
	$6 = (($10 & [-4]) + $6)
	
.LABEL $label$7
	if ( ($6 <= [513]) ){ goto $label$9 }
	$3 = CALL $216($6)
	goto $label$8 
	
.LABEL $label$9
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$8
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	*($5 + [104]) = $5
	*($5 + [156]) = $7
	*($5 + [112]) = $1
	*($5 + [116]) = ($1 + [8])
	*($5 + [120]) = ($1 + [12])
	*($5 + [124]) = ($1 + [16])
	*($5 + [128]) = ($1 + [24])
	*($5 + [132]) = ($1 + [28])
	*($5 + [136]) = ($1 + [32])
	*($5 + [140]) = ($1 + [40])
	*($5 + [144]) = ($1 + [48])
	*($5 + [148]) = ($1 + [56])
	*($5 + [152]) = ($1 + [64])
	CALL $106(($5 + [112]), ($5 + [104]))
	CALL db_update_i64(*($1 + [88]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	CALL $219($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [160])
	return (unreachable)
	
.LABEL $label$2
	CALL $198((($5 + [16]) + [72]))
	
.LABEL $label$1
	$global$0 = ($5 + [160])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)-1)
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	$6 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [56])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$6 = (($11 & [-4]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL $216($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	*($4 + [24]) = ($4 + [8])
	*($4 + [68]) = $8
	*($4 + [76]) = $7
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [12])
	*($4 + [44]) = ($1 + [16])
	*($4 + [48]) = ($1 + [24])
	*($4 + [52]) = ($1 + [28])
	*($4 + [56]) = ($1 + [32])
	*($4 + [60]) = ($1 + [40])
	*($4 + [64]) = ($1 + [48])
	*($4 + [72]) = ($1 + [64])
	CALL $106(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[15]), [10426])
	CALL memcpy(*($0 + [4]), ($4 + [32]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	*($2 + [8]) = $4
	CALL $169(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	$3 = *($3)
	*($1 + [28]) = (*($3 + [4]) | (*($3) << [16]))
	$6 = *($1)
	CALL eosio_assert([1], [10564])
	$3 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [28])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$3 = (($11 & [-4]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [52]) = $8
	*($5 + [76]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [24])
	*($5 + [56]) = ($1 + [32])
	*($5 + [60]) = ($1 + [40])
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [56])
	*($5 + [72]) = ($1 + [64])
	CALL $106(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)-1)
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	$6 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [48])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$6 = (($11 & [-4]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL $216($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	*($4 + [24]) = ($4 + [8])
	*($4 + [64]) = $8
	*($4 + [76]) = $7
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [12])
	*($4 + [44]) = ($1 + [16])
	*($4 + [48]) = ($1 + [24])
	*($4 + [52]) = ($1 + [28])
	*($4 + [56]) = ($1 + [32])
	*($4 + [60]) = ($1 + [40])
	*($4 + [68]) = ($1 + [56])
	*($4 + [72]) = ($1 + [64])
	CALL $106(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

void .FUNC $107 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth((int_64)-7947877572870428864)
	$4 = ($0 + [336])
	$6 = *(($0 + [364]))
	$5 = *(($0 + [360]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($8 + [28])) == (int_32)$4), [11277])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [344])), (int_64)-5000987459492009680, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $78($4, $7)
	CALL eosio_assert(((int_32)*($8 + [28]) == (int_32)$4), [11277])
	
.LABEL $label$1
	$9 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10227])
	$6 = *(($0 + [364]))
	$8 = *(($0 + [360]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(($5 + [28])) == (int_32)$4), [11277])
	$9 = $5
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL db_find_i64(*(($0 + [336])), *(($0 + [344])), (int_64)-5000987459492009680, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$9 = CALL $78($4, $7)
	CALL eosio_assert(((int_32)*($9 + [28]) == (int_32)$4), [11277])
	
.LABEL $label$5
	CALL eosio_assert(($9 == 0), [10251])
	$10 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [336])) == (int_64)CALL $fimport$7()), [10375])
	*(($7 = CALL _Znwj([40])) + [28]) = $4
	*($7 + [8]) = $2
	*($7) = $1
	*($7 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$1 = CALL current_time()
	*($7 + [24]) = [0]
	*($7 + [20]) = ((uint_64)$1 / (uint_64)(int_64)1000000)
	*($3 + [40]) = ($3 + [25])
	*($3 + [36]) = $3
	*($3 + [32]) = $3
	*($3 + [48]) = ($3 + [32])
	*($3 + [60]) = ($7 + [8])
	*($3 + [56]) = $7
	*($3 + [64]) = ($7 + [16])
	*($3 + [68]) = ($7 + [20])
	$6 = ($7 + [24])
	*($3 + [72]) = $6
	CALL $79(($3 + [56]), ($3 + [48]))
	$1 = *($7)
	$8 = ($0 + [344])
	*($7 + [32]) = CALL db_store_i64(*($8), (int_64)-5000987459492009680, $10, $1, $3, [25])
	$5 = ($0 + [352])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$9 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$1 = *($8)
	$2 = *($7)
	*($3 + [56]) = *($6)
	*($7 + [36]) = CALL db_idx64_store($1, (int_64)-5000987459492009680, $10, $2, ($3 + [56]))
	*($3 + [56]) = $7
	$1 = *($7)
	*($3) = $1
	$8 = *(($7 + [32]))
	*($3 + [32]) = $8
	$5 = ($0 + [364])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [368]))) ){ goto $label$12 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [56]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [56])
	*($3 + [56]) = [0]
	if ( $7 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $80(($0 + [360]), ($3 + [56]), $3, ($3 + [32]))
	$7 = *($3 + [56])
	*($3 + [56]) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [10426])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [10426])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $144(*($1), *($0 + [44]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [752])
	$4 = $3
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [10285])
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)6121143409794088960) ){ goto $label$23 }
	if ( ((int_64)$2 <= (int_64)-4417059930817691649) ){ goto $label$22 }
	if ( ((int_64)$2 > (int_64)4923678524482519039) ){ goto $label$20 }
	if ( ((int_64)$2 <= (int_64)-4365742505489924097) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)-4365742505489924096) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-3661004284587147264) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)3626175369360441344) ){ goto $label$2 }
	*($4 + [732]) = [0]
	*($4 + [728]) = [1]
	*($4 + [16]) = *($4 + [728])
	CALL $110($1, $1, ($4 + [16]))
	goto $label$2 
	
.LABEL $label$23
	if ( ((int_64)$1 == (int_64)-7947877563513002112) ){ goto $label$21 }
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$22
	if ( ((int_64)$2 <= (int_64)-4417354634433839105) ){ goto $label$19 }
	if ( ((int_64)$2 <= (int_64)-4417253564707393025) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)-4417253564707393024) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-4417158008900091904) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-4417158001692655616) ){ goto $label$2 }
	*($4 + [676]) = [0]
	*($4 + [672]) = [2]
	*($4 + [72]) = *($4 + [672])
	CALL $111($1, $1, ($4 + [72]))
	goto $label$2 
	
.LABEL $label$21
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$20
	if ( ((int_64)$2 <= (int_64)6714450730209509375) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)6714450730209509376) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)6714450746337804288) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)8428183958969122816) ){ goto $label$2 }
	*($4 + [620]) = [0]
	*($4 + [616]) = [3]
	*($4 + [128]) = *($4 + [616])
	CALL $112($1, $1, ($4 + [128]))
	goto $label$2 
	
.LABEL $label$19
	if ( ((int_64)$2 > (int_64)-4848011305303019521) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-7694786991455469568) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4857736126719852544) ){ goto $label$2 }
	*($4 + [692]) = [0]
	*($4 + [688]) = [4]
	*($4 + [56]) = *($4 + [688])
	CALL $113($1, $1, ($4 + [56]))
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-4417059930817691648) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4417041445117058048) ){ goto $label$2 }
	*($4 + [636]) = [0]
	*($4 + [632]) = [5]
	*($4 + [112]) = *($4 + [632])
	CALL $114($1, $1, ($4 + [112]))
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)-4417354634433839104) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4417347222627155968) ){ goto $label$2 }
	*($4 + [604]) = [0]
	*($4 + [600]) = [6]
	*($4 + [144]) = *($4 + [600])
	CALL $115($1, $1, ($4 + [144]))
	goto $label$2 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)4923678524482519040) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4923678541662388224) ){ goto $label$2 }
	*($4 + [740]) = [0]
	*($4 + [736]) = [7]
	*($4 + [8]) = *($4 + [736])
	CALL $116($1, $1, ($4 + [8]))
	goto $label$2 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-4848011305303019520) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4420673558282371072) ){ goto $label$2 }
	*($4 + [700]) = [0]
	*($4 + [696]) = [8]
	*($4 + [48]) = *($4 + [696])
	CALL $117($1, $1, ($4 + [48]))
	goto $label$2 
	
.LABEL $label$14
	*($4 + [644]) = [0]
	*($4 + [640]) = [9]
	*($4 + [104]) = *($4 + [640])
	CALL $113($1, $1, ($4 + [104]))
	goto $label$2 
	
.LABEL $label$13
	*($4 + [708]) = [0]
	*($4 + [704]) = [10]
	*($4 + [40]) = *($4 + [704])
	CALL $118($1, $1, ($4 + [40]))
	goto $label$2 
	
.LABEL $label$12
	*($4 + [724]) = [0]
	*($4 + [720]) = [11]
	*($4 + [24]) = *($4 + [720])
	CALL $119($1, $1, ($4 + [24]))
	goto $label$2 
	
.LABEL $label$11
	*($4 + [668]) = [0]
	*($4 + [664]) = [12]
	*($4 + [80]) = *($4 + [664])
	CALL $120($1, $1, ($4 + [80]))
	goto $label$2 
	
.LABEL $label$10
	*($4 + [612]) = [0]
	*($4 + [608]) = [13]
	*($4 + [136]) = *($4 + [608])
	CALL $121($1, $1, ($4 + [136]))
	goto $label$2 
	
.LABEL $label$9
	*($4 + [684]) = [0]
	*($4 + [680]) = [14]
	*($4 + [64]) = *($4 + [680])
	CALL $122($1, $1, ($4 + [64]))
	goto $label$2 
	
.LABEL $label$8
	*($4 + [716]) = [0]
	*($4 + [712]) = [15]
	*($4 + [32]) = *($4 + [712])
	CALL $123($1, $1, ($4 + [32]))
	goto $label$2 
	
.LABEL $label$7
	*($4 + [660]) = [0]
	*($4 + [656]) = [16]
	*($4 + [88]) = *($4 + [656])
	CALL $114($1, $1, ($4 + [88]))
	goto $label$2 
	
.LABEL $label$6
	*($4 + [652]) = [0]
	*($4 + [648]) = [17]
	*($4 + [96]) = *($4 + [648])
	CALL $124($1, $1, ($4 + [96]))
	goto $label$2 
	
.LABEL $label$5
	*($4 + [748]) = [0]
	*($4 + [744]) = [18]
	*($4) = *($4 + [744])
	CALL $125($1, $1, $4)
	goto $label$2 
	
.LABEL $label$4
	*($4 + [628]) = [0]
	*($4 + [624]) = [19]
	*($4 + [120]) = *($4 + [624])
	CALL $114($1, $1, ($4 + [120]))
	goto $label$2 
	
.LABEL $label$3
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$27 }
	if ( ($5 <= [513]) ){ goto $label$26 }
	$3 = CALL $216($5)
	goto $label$25 
	
.LABEL $label$27
	$3 = [0]
	goto $label$24 
	
.LABEL $label$26
	$3 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$25
	CALL read_action_data($3, $5)
	
.LABEL $label$24
	$5 = ($3 + $5)
	*(($4 + [160])) = $5
	*($4 + [172]) = $3
	*($4 + [168]) = $3
	*($4 + [176]) = $5
	*($4 + [152]) = *($4 + [168])
	$3 = CALL $126(($4 + [184]), $0, $0, ($4 + [152]))
	CALL $64($3, $1)
	CALL $127($3)
	
.LABEL $label$2
	CALL $200([0])
	$global$0 = ($4 + [752])
}

void .FUNC $108 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth((int_64)-7947877572870428864)
	$3 = ($0 + [336])
	$5 = *(($0 + [364]))
	$4 = *(($0 + [360]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [28])) == (int_32)$3), [11277])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [344])), (int_64)-5000987459492009680, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $78($3, $6)
	CALL eosio_assert(((int_32)*($7 + [28]) == (int_32)$3), [11277])
	
.LABEL $label$1
	CALL eosio_assert(($7 == 0), [10271])
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [336])) == (int_64)CALL $fimport$7()), [10375])
	*(($6 = CALL _Znwj([40])) + [28]) = $3
	*($6 + [8]) = (int_64)-7947877567501544080
	*($6) = $1
	*($6 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$1 = CALL current_time()
	*($6 + [24]) = [1]
	*($6 + [20]) = ((uint_64)$1 / (uint_64)(int_64)1000000)
	*($2 + [40]) = ($2 + [25])
	*($2 + [36]) = $2
	*($2 + [32]) = $2
	*($2 + [48]) = ($2 + [32])
	*($2 + [60]) = ($6 + [8])
	*($2 + [56]) = $6
	*($2 + [64]) = ($6 + [16])
	*($2 + [68]) = ($6 + [20])
	$5 = ($6 + [24])
	*($2 + [72]) = $5
	CALL $79(($2 + [56]), ($2 + [48]))
	$1 = *($6)
	$7 = ($0 + [344])
	*($6 + [32]) = CALL db_store_i64(*($7), (int_64)-5000987459492009680, $8, $1, $2, [25])
	$4 = ($0 + [352])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$1 = *($7)
	$9 = *($6)
	*($2 + [56]) = *($5)
	*($6 + [36]) = CALL db_idx64_store($1, (int_64)-5000987459492009680, $8, $9, ($2 + [56]))
	*($2 + [56]) = $6
	$1 = *($6)
	*($2) = $1
	$7 = *(($6 + [32]))
	*($2 + [32]) = $7
	$4 = ($0 + [364])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [368]))) ){ goto $label$8 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [56]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $80(($0 + [360]), ($2 + [56]), $2, ($2 + [32]))
	$6 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($2 + [80])
}

int_32 .FUNC $212 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $219 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [20084])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19892]
	$3 = (((int_32)$1 * (int_32)[12]) + [19892])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	$6 = ($global$0 - [192])
	$global$0 = $6
	CALL require_auth((int_64)-7947877572870428864)
	$7 = ($0 + [128])
	$9 = *(($0 + [156]))
	$8 = *(($0 + [152]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [84]) == (int_32)$7), [11277])
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	$10 = CALL db_find_i64(*($7), *(($0 + [136])), (int_64)7035938313001238528, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $2($7, $10)
	CALL eosio_assert(((int_32)*($11 + [84]) == (int_32)$7), [11277])
	
.LABEL $label$1
	$9 = [0]
	$12 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($12, [8699])
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)[2]), [8724])
	$13 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	$14 = ($13 + ((int_32)*($11 + [56]) * (int_32)[90]))
	$15 = ($0 + [168])
	$8 = *(($0 + [196]))
	$16 = *(($0 + [192]))
	if ( ((int_32)$16 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$8:
	$10 = ($8 + [-24])
	$17 = *($10)
	if ( ((int_64)*($17) == (int_64)$1) ){ goto $label$7 }
	$8 = $10
	if ( ((int_32)$16 != (int_32)$10) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$16 == (int_32)$8) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(($17 + [100])) == (int_32)$15), [11277])
	$9 = $17
	goto $label$5 
	
.LABEL $label$6
	$10 = CALL db_find_i64(*($15), *(($0 + [176])), (int_64)-2189421640876556288, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	$9 = CALL $4($15, $10)
	CALL eosio_assert(((int_32)*($9 + [100]) == (int_32)$15), [11277])
	
.LABEL $label$5
	$16 = ($14 + [90])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8753])
	$8 = ($0 + [208])
	$17 = ($0 + [224])
	$1 = *($17)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$9 }
	$1 = (int_64)0
	$10 = CALL db_lowerbound_i64(*($8), *(($0 + [216])), (int_64)-4460071177754247168, (int_64)0)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$10 }
	CALL $7($8, $10)
	*($6 + [4]) = [0]
	*($6) = $8
	$1 = *(*(CALL $41($6) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	*(($0 + [224])) = $1
	goto $label$9 
	
.LABEL $label$10
	*(($0 + [224])) = (int_64)0
	
.LABEL $label$9
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [11514])
	$18 = *($17)
	$1 = *($0)
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$7()), [10375])
	*(($10 = CALL _Znwj([128])) + [100]) = $8
	*($10 + [48]) = (int_64)0
	*($10 + [8]) = $2
	*($10) = $18
	*(($10 + [40])) = (int_64)0
	*($10 + [32]) = (int_64)-1
	*(($10 + [88])) = $5
	*($10 + [80]) = $4
	*($10 + [16]) = [0]
	*($10 + [56]) = $3
	*($10 + [60]) = $13
	*($10 + [64]) = $16
	*($10 + [96]) = [1]
	*($10 + [48]) = *(($9 + [48]))
	$3 = ($6 + [74])
	*($6 + [112]) = $3
	*($6 + [108]) = $6
	*($6 + [104]) = $6
	*($6 + [88]) = ($6 + [104])
	$13 = ($10 + [8])
	*($6 + [148]) = $13
	*($6 + [144]) = $10
	*($6 + [152]) = ($10 + [16])
	*($6 + [156]) = ($10 + [32])
	$14 = ($10 + [48])
	*($6 + [160]) = $14
	*($6 + [164]) = ($10 + [56])
	$19 = ($10 + [60])
	*($6 + [168]) = $19
	$20 = ($10 + [64])
	*($6 + [172]) = $20
	*($6 + [176]) = ($10 + [80])
	*($6 + [180]) = ($10 + [96])
	*($6 + [184]) = ($10 + [97])
	CALL $42(($6 + [144]), ($6 + [88]))
	$2 = *($10)
	$8 = ($0 + [216])
	*($10 + [104]) = CALL db_store_i64(*($8), (int_64)-4460071177754247168, $1, $2, $6, [74])
	if ( (uint_64)($2 <= *($17)) ){ goto $label$11 }
	*(($0 + [224])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$2 = *($8)
	$4 = *($10)
	*($6 + [144]) = *($13)
	*($10 + [108]) = CALL db_idx64_store($2, (int_64)-4460071177754247168, $1, $4, ($6 + [144]))
	$2 = *($8)
	$4 = *($10)
	*($6 + [144]) = *($19)
	*($10 + [112]) = CALL db_idx64_store($2, (int_64)-4460071177754247167, $1, $4, ($6 + [144]))
	$2 = *($8)
	$4 = *($10)
	*($6 + [144]) = *($14)
	*($10 + [116]) = CALL db_idx64_store($2, (int_64)-4460071177754247166, $1, $4, ($6 + [144]))
	$2 = *($8)
	$4 = *($10)
	*($6 + [144]) = *($20)
	*($10 + [120]) = CALL db_idx64_store($2, (int_64)-4460071177754247165, $1, $4, ($6 + [144]))
	*($6 + [144]) = $10
	$2 = *($10)
	*($6) = $2
	$17 = *(($10 + [104]))
	*($6 + [104]) = $17
	$13 = ($0 + [236])
	$8 = *($13)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [240]))) ){ goto $label$14 }
	*($8 + [8]) = $2
	*($8 + [16]) = $17
	*($6 + [144]) = [0]
	*($8) = $10
	*($13) = ($8 + [24])
	$10 = *($6 + [144])
	*($6 + [144]) = [0]
	if ( $10 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $43(($0 + [232]), ($6 + [144]), $6, ($6 + [104]))
	$10 = *($6 + [144])
	*($6 + [144]) = [0]
	if ( ($10 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv($10)
	
.LABEL $label$12
	$2 = *($0)
	CALL eosio_assert($12, [10432])
	CALL $44($7, $11, $2)
	$2 = *($0)
	CALL eosio_assert(((int_32)*($9 + [100]) == (int_32)$15), [10467])
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$7()), [10513])
	*($9 + [64]) = $16
	$10 = ($9 + [96])
	$1 = *($10)
	*($10) = [1]
	$8 = ($9 + [8])
	*($6 + [104]) = *($8)
	$11 = ($9 + [60])
	*($6 + [112]) = *($11)
	$16 = ($9 + [48])
	*($6 + [120]) = *($16)
	*($6 + [128]) = $1
	$1 = *($9)
	CALL eosio_assert([1], [10564])
	*($6 + [96]) = $3
	*($6 + [92]) = $6
	*($6 + [88]) = $6
	*($6 + [136]) = ($6 + [88])
	*($6 + [148]) = $8
	*($6 + [144]) = $9
	*($6 + [152]) = ($9 + [16])
	*($6 + [156]) = ($9 + [32])
	*($6 + [160]) = $16
	*($6 + [164]) = ($9 + [56])
	*($6 + [168]) = $11
	*($6 + [172]) = ($9 + [64])
	*($6 + [176]) = ($9 + [80])
	*($6 + [180]) = $10
	*($6 + [184]) = ($9 + [97])
	CALL $42(($6 + [144]), ($6 + [136]))
	CALL db_update_i64(*($9 + [104]), $2, $6, [74])
	$16 = ($0 + [184])
	if ( (uint_64)($1 <= *($16)) ){ goto $label$15 }
	*($16) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$16 = (($6 + [104]) + [8])
	*($6 + [144]) = *($8)
	if ( (CALL $212(($6 + [104]), ($6 + [144]), [8]) == 0) ){ goto $label$16 }
	$8 = *($9 + [108])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$17 }
	$8 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-2189421640876556288, ($6 + [136]), $1)
	*(($9 + [108])) = $8
	
.LABEL $label$17
	CALL db_idx64_update($8, $2, ($6 + [144]))
	
.LABEL $label$16
	$8 = (($6 + [104]) + [16])
	*($6 + [144]) = *($11)
	if ( (CALL $212($16, ($6 + [144]), [8]) == 0) ){ goto $label$18 }
	$16 = ($9 + [112])
	$11 = *($16)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$19 }
	$11 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-2189421640876556287, ($6 + [136]), $1)
	*($16) = $11
	
.LABEL $label$19
	CALL db_idx64_update($11, $2, ($6 + [144]))
	
.LABEL $label$18
	$11 = ($6 + [128])
	*($6 + [144]) = *(($9 + [48]))
	if ( (CALL $212($8, ($6 + [144]), [8]) == 0) ){ goto $label$20 }
	$16 = ($9 + [116])
	$8 = *($16)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$21 }
	$8 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-2189421640876556286, ($6 + [136]), $1)
	*($16) = $8
	
.LABEL $label$21
	CALL db_idx64_update($8, $2, ($6 + [144]))
	
.LABEL $label$20
	*($6 + [144]) = *($10)
	if ( (CALL $212($11, ($6 + [144]), [8]) == 0) ){ goto $label$22 }
	$9 = ($9 + [120])
	$10 = *($9)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$23 }
	$10 = CALL db_idx64_find_primary(*(($0 + [168])), *(($0 + [176])), (int_64)-2189421640876556285, ($6 + [136]), $1)
	*($9) = $10
	
.LABEL $label$23
	CALL db_idx64_update($10, $2, ($6 + [144]))
	
.LABEL $label$22
	$global$0 = ($6 + [192])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth((int_64)-7947877572870428864)
	$4 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = ((int_64)$4 << (int_64)32)
	$6 = (int_64)$5 >> (int_64)32
	CALL $19($0, $2, $6))
	$7 = ($0 + [128])
	$9 = *(($0 + [156]))
	$8 = *(($0 + [152]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [84]) == (int_32)$7), [11277])
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	$10 = CALL db_find_i64(*($7), *(($0 + [136])), (int_64)7035938313001238528, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $2($7, $10)
	CALL eosio_assert(((int_32)*($11 + [84]) == (int_32)$7), [11277])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)[2]), [8629])
	$10 = ($0 + [88])
	$1 = *($11 + [56])
	$9 = *(($0 + [116]))
	if ( ((int_32)$9 == (int_32)*(($0 + [112]))) ){ goto $label$8 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$10), [11277])
	if ( ($9 == 0) ){ goto $label$7 }
	$12 = *($9 + [64])
	if ( ((uint_64)$12 <= (uint_64)$1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$9 = CALL db_find_i64(*($10), *(($0 + [96])), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $15($10, $9)
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$10), [11277])
	$12 = *($9 + [64])
	if ( ((uint_64)$12 <= (uint_64)$1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$12 = (int_64)10
	if ( ((uint_64)(int_64)10 > (uint_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	CALL prints([8647])
	CALL printui($1)
	$global$0 = ($3 + [128])
	return $19
	
.LABEL $label$5
	$9 = [0]
	*($3 + [120]) = [0]
	$1 = (int_64))($12 - $1)
	$12 = *(($0 + [176]))
	*($3 + [112]) = (int_64)0
	$10 = CALL db_lowerbound_i64(*($0 + [168]), $12, (int_64)-2189421640876556288, (int_64)0)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$10 }
	$8 = ($0 + [168])
	$9 = CALL $4($8, $10)
	$13 = ($3 + [96])
	$14 = ($3 + [120])
	
.LOOP $label$11:
	$10 = CALL memcpy($3, $9, [112])
	if ( ((int_64)*($10 + [8]) != (int_64)*($11)) ){ goto $label$12 }
	if ( (*($13) & [255]) ){ goto $label$12 }
	$7 = *($10 + [116])
	if ( ((int_32)$7 == (int_32)*($14)) ){ goto $label$13 }
	*($10 + [116]) = (CALL memcpy($7, $10, [112]) + [112])
	goto $label$12 
	
.LABEL $label$13
	CALL $37(($10 + [112]), $10)
	
.LABEL $label$12
	CALL eosio_assert([1], [10650])
	$9 = CALL db_next_i64(*($9 + [104]), $10)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $4($8, $9)
	goto $label$11 
	
.LABEL $label$14
	$9 = *($10 + [112])
	$10 = *($10 + [116])
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	*($3 + [4 align=4]) = (int_64)0
	$13 = ($3 | [4])
	*($3) = $13
	$12 = (CASTING uint_64)(uint_32 ((int_32)($10 - $9) / (int_32)[112]))
	$15 = ( $12 ? $1 : ((uint_64)$1 > (uint_64)$12) )
	if ( (int_64)($15 == 0) ){ goto $label$17 }
	$5 = ((int_64)$2 | (int_64)$5 >> (int_64)63))
	$16 = (CASTING uint_32)(uint_64 $4)
	$17 = (CASTING uint_32)(uint_64 $15)
	$7 = ((uint_32)([0] - $17) % (uint_32)$17)
	$18 = ($3 + [8])
	$12 = (int_64)0
	
.LOOP $label$18:
	$10 = CALL $20($0)
	if ( ($10 <= $7) ){ goto $label$18 }
	$14 = ((uint_32)$10 % (uint_32)$17)
	$1 = (CASTING uint_64)(uint_32 $14)
	$8 = *($3 + [4])
	if ( ($8 == 0) ){ goto $label$22 }
	$9 = $13
	$10 = $8
	
.LOOP $label$23:
	$11 = (uint_64)(*($10 + [16]) <= $1)
	$9 = ( $9 ? $10 : $11 )
	$10 = *(($10 + ($11 << [2])))
	if ( $10 ){ goto $label$23 }
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$24 }
	if ( ((uint_64)*($9 + [16]) <= (uint_64)$1) ){ goto $label$20 }
	
.LABEL $label$24
	$10 = $13
	$2 = *($8 + [16])
	if ( ((uint_64)$2 > (uint_64)$1) ){ goto $label$21 }
	$19 = [2]
	goto $label$19 
	
.LABEL $label$22
	$8 = $13
	$10 = $13
	$19 = [3]
	goto $label$19 
	
.LABEL $label$21
	$19 = [10]
	goto $label$19 
	
.LABEL $label$20
	$19 = [5]
	
.LABEL $label$19
	
.LOOP $label$25:
	goto $label$43 
	
.LABEL $label$45
	if ( ((uint_64)$2 >= (uint_64)$1) ){ goto $label$30 }
	$19 = [9]
	goto $label$25 
	
.LABEL $label$44
	$10 = ($8 + [4])
	$9 = *($8 + [4])
	if ( ($9 == 0) ){ goto $label$32 }
	$19 = [0]
	goto $label$25 
	
.LABEL $label$43
	$8 = $10
	$19 = [1]
	goto $label$25 
	
.LABEL $label$42
	$10 = $8
	$8 = $9
	$2 = *($8 + [16])
	if ( ((uint_64)$2 <= (uint_64)$1) ){ goto $label$33 }
	$19 = [10]
	goto $label$25 
	
.LABEL $label$41
	$9 = *($8)
	if ( $9 ){ goto $label$31 }
	$19 = [11]
	goto $label$25 
	
.LABEL $label$40
	$10 = $8
	if ( *($10) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$39
	if ( *($10) ){ goto $label$29 }
	$19 = [6]
	goto $label$25 
	
.LABEL $label$38
	*(($9 = CALL _Znwj([24]))) = (int_64)0
	*($9 + [8]) = $8
	*($10) = $9
	*($9 + [16]) = $1
	$11 = *(*($3))
	if ( ($11 == 0) ){ goto $label$26 }
	$19 = [7]
	goto $label$25 
	
.LABEL $label$37
	*($3) = $11
	$9 = *($10)
	$19 = [8]
	goto $label$25 
	
.LABEL $label$36
	CALL $38(*($3 + [4]), $9)
	*($18) = (*($18) + [1])
	$19 = [4]
	goto $label$25 
	
.LABEL $label$35
	$10 = (*($3 + [112]) + ((int_32)$14 * (int_32)[112]))
	CALL $39($0, *($10), *($10 + [8]), $16, $6, $5)
	$12 = ((int_64)$12 + (int_64)1)
	$19 = [5]
	goto $label$25 
	
.LABEL $label$34
	if ( (uint_64)($12 <= $15) ){ goto $label$18 }
	CALL $40($3, *($3 + [4]))
	$10 = *($3 + [112])
	if ( ($10 == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$33
	$19 = [2]
	goto $label$25 
	
.LABEL $label$32
	$19 = [3]
	goto $label$25 
	
.LABEL $label$31
	$19 = [1]
	goto $label$25 
	
.LABEL $label$30
	$19 = [3]
	goto $label$25 
	
.LABEL $label$29
	$19 = [4]
	goto $label$25 
	
.LABEL $label$28
	$19 = [6]
	goto $label$25 
	
.LABEL $label$27
	$19 = [4]
	goto $label$25 
	
.LABEL $label$26
	$19 = [8]
	goto $label$25 
	
.LABEL $label$17
	CALL $40($3, [0])
	$10 = *($3 + [112])
	if ( ($10 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	*($3 + [116]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$15
	$global$0 = ($3 + [128])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[112])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[38347923]) ){ goto $label$2 }
	$6 = [38347922]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[112])
	if ( ((uint_32)$7 > (uint_32)[19173960]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[112]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $198($0)
	
.LABEL $label$1
	$2 = ($2 - $3)
	$4 = CALL memcpy(($5 + ((int_32)$4 * (int_32)[112])), $1, [112])
	$1 = ($4 + ((int_32)((int_32)$2 / (int_32)[-112]) * (int_32)[112]))
	$6 = ($5 + ((int_32)$6 * (int_32)[112]))
	$5 = ($4 + [112])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)-1)
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	$6 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [48])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$6 = (($11 & [-4]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL $216($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	*($4 + [24]) = ($4 + [8])
	*($4 + [64]) = $8
	*($4 + [76]) = $7
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [12])
	*($4 + [44]) = ($1 + [16])
	*($4 + [48]) = ($1 + [24])
	*($4 + [52]) = ($1 + [28])
	*($4 + [56]) = ($1 + [32])
	*($4 + [60]) = ($1 + [40])
	*($4 + [68]) = ($1 + [56])
	*($4 + [72]) = ($1 + [64])
	CALL $106(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

void .FUNC $35 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth((int_64)-7947877572870428864)
	$3 = ($0 + [128])
	$5 = *(($0 + [156]))
	$4 = *(($0 + [152]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$3), [11277])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [136])), (int_64)7035938313001238528, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $2($3, $6)
	CALL eosio_assert(((int_32)*($7 + [84]) == (int_32)$3), [11277])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8592])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)[4]), [8612])
	$6 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)-2189421640876556288, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$7 = ($0 + [168])
	$6 = CALL $4($7, $6)
	
.LOOP $label$6:
	if ( ((int_64)*($6 + [8]) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_32)*($6 + [96]) != (int_32)[1]) ){ goto $label$7 }
	$5 = [0]
	$4 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($4, [11332])
	CALL eosio_assert($4, [10650])
	$4 = CALL db_next_i64(*($6 + [104]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $4($7, $4)
	
.LABEL $label$8
	CALL $6($7, $6)
	$6 = $5
	if ( $6 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([1], [10650])
	$5 = *($6 + [104])
	$6 = [0]
	$5 = CALL db_next_i64($5, ($2 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $4($7, $5)
	
.LABEL $label$9
	if ( $6 ){ goto $label$6 }
	
.LABEL $label$5
	$global$0 = ($2 + [16])
}

void .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth((int_64)-7947877572870428864)
	$2 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$3 = CALL db_lowerbound_i64(*($0 + [208]), *(($0 + [216])), (int_64)-4460071177754247168, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = (CASTING uint_32)(uint_64 $2)
	$5 = ($0 + [128])
	$6 = ($0 + [208])
	$7 = CALL $7($6, $3)
	$8 = ($0 + [156])
	$9 = ($0 + [152])
	$10 = ($0 + [136])
	
.LOOP $label$2:
	if ( ((int_32)*($7 + [64]) <= (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert([1], [10650])
	$3 = *($7 + [104])
	$7 = [0]
	$3 = CALL db_next_i64($3, ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $7($6, $3)
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = *($7 + [8])
	$12 = *($8)
	$11 = *($9)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$7 }
	
.LOOP $label$9:
	$3 = ($12 + [-24])
	$13 = *($3)
	if ( ((int_64)*($13) == (int_64)$2) ){ goto $label$8 }
	$12 = $3
	if ( ((int_32)$11 != (int_32)$3) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($13 + [84]) == (int_32)$5), [11277])
	if ( $13 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$3 = CALL db_find_i64(*($5), *($10), (int_64)7035938313001238528, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$13 = CALL $2($5, $3)
	CALL eosio_assert(((int_32)*($13 + [84]) == (int_32)$5), [11277])
	
.LABEL $label$6
	$2 = *($0)
	CALL eosio_assert([1], [10432])
	CALL $33($5, $13, $2)
	$2 = *($0)
	CALL eosio_assert([1], [10432])
	CALL $34($5, $13, $2)
	
.LABEL $label$5
	$3 = [0]
	$12 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($12, [11332])
	CALL eosio_assert($12, [10650])
	$12 = CALL db_next_i64(*($7 + [104]), ($1 + [8]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$10 }
	$3 = CALL $7($6, $12)
	
.LABEL $label$10
	CALL $9($6, $7)
	$7 = $3
	if ( $7 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)-1)
	$5 = *($1)
	CALL eosio_assert([1], [10564])
	$6 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [56])
	$10 = *($1 + [72])
	$9 = *(($1 + [76]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [2]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$6 = (($11 & [-4]) + $6)
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL $216($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	*($4 + [24]) = ($4 + [8])
	*($4 + [68]) = $8
	*($4 + [76]) = $7
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [12])
	*($4 + [44]) = ($1 + [16])
	*($4 + [48]) = ($1 + [24])
	*($4 + [52]) = ($1 + [28])
	*($4 + [56]) = ($1 + [32])
	*($4 + [60]) = ($1 + [40])
	*($4 + [64]) = ($1 + [48])
	*($4 + [72]) = ($1 + [64])
	CALL $106(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($3)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [16]) = $3
	*($4 + [24]) = $2
	CALL require_auth((int_64)-7947877572870428864)
	CALL eosio_assert(((int_64)$2 > (int_64)0), [8542])
	CALL eosio_assert(((int_64)$3 > (int_64)0), [8559])
	CALL eosio_assert(((int_64)$3 > (int_64)$2), [8575])
	$5 = ($0 + [128])
	$7 = *(($0 + [156]))
	$6 = *(($0 + [152]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [136])), (int_64)7035938313001238528, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $2($5, $8)
	CALL eosio_assert(((int_32)*($9 + [84]) == (int_32)$5), [11277])
	
.LABEL $label$1
	$8 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($8, [8525])
	$1 = *($0)
	*($4 + [12]) = ($4 + [16])
	*($4 + [8]) = ($4 + [24])
	CALL eosio_assert($8, [10432])
	CALL $31($5, $9, $1, ($4 + [8]))
	$global$0 = ($4 + [32])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [10467])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10513])
	*($1 + [32]) = *(*($3))
	*($1 + [40]) = *(*(($3 + [4])))
	$6 = *($1)
	CALL eosio_assert([1], [10564])
	$3 = [72]
	$7 = ($1 + [72])
	$8 = ($1 + [40])
	$9 = ($1 + [32])
	$11 = *($1 + [72])
	$10 = *(($1 + [76]))
	$12 = ($10 - $11)
	$13 = (CASTING uint_64)(uint_32 int_32($12 >> [2]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$2 }
	$3 = (($12 & [-4]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $216($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [56]) = $9
	*($5 + [60]) = $8
	*($5 + [76]) = $7
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [12])
	*($5 + [44]) = ($1 + [16])
	*($5 + [48]) = ($1 + [24])
	*($5 + [52]) = ($1 + [28])
	*($5 + [64]) = ($1 + [48])
	*($5 + [68]) = ($1 + [56])
	*($5 + [72]) = ($1 + [64])
	CALL $106(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $219($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [80])
}

int_32 .FUNC $215 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $216($1)
	
.LABEL $label$2
	*(CALL $199()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $216(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $219($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $214 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $199())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $215($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $217 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $218($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8261])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $216 (int_32 $0)
{
	return CALL $217([11700], $0)
}

int_64 .FUNC $211 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $208($3, (int_64)0)
	$4 = CALL $210($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_64 .FUNC $210 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $209($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $199()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $209($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [20177]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $208($0, (int_64)0)
	*(CALL $199()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $209($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $209($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $209($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $209($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [20177])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [20177]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20177]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $209($0)
	$5 = *(($6 + [20177]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $209($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [20177]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8200]))
	$8 = (int_64)0
	$5 = *(($6 + [20177]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20177]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $209($0)
	$5 = *(($6 + [20177]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $209($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [20177]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $208($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [20177]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [20177]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $209($0) + [20177]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $199()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $199()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $199()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $198 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $199 ()
{
	return [11684]
}

void .FUNC $196 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $197 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $194 (int_32 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $184(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $205(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8572], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $184(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $184(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $195 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $213($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $182($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $184(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $205(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8521], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $184(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $184(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $193 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $184(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $205(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8554], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $184(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $184(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $190 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $195($1, $0, [8813])
	CALL $197()
	(unreachable)
}

int_64 .FUNC $191 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $213([8381])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8381], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $199())
	*(CALL $199()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $211($4, ($3 + [12]), $2)
	$0 = CALL $199()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $189($3)
	
.LABEL $label$1
	CALL $190($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}