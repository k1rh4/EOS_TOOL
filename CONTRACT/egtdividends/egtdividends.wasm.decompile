(data (i32.const 4) "\00l\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "transfer\00")
(data (i32.const 128) "eosio.token\00")
(data (i32.const 144) "eosiotokener\00")
(data (i32.const 160) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 224) "no pledge account\00")
(data (i32.const 256) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 320) "invalid symbol name\00")
(data (i32.const 352) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 416) "\e5\8f\af\e6\8f\90\e7\8e\b0\e5\88\86\e7\ba\a2\e4\bd\99\e9\a2\9d\e5\bf\85\e9\a1\bb\e5\a4\a7\e4\ba\8e0\00")
(data (i32.const 464) "cannot pass end iterator to modify\00")
(data (i32.const 512) "active\00")
(data (i32.const 528) "EOS Dividends Withdraw From EGT Dividends Pool. http://eosgametoken.com\00")
(data (i32.const 608) "write\00")
(data (i32.const 624) "object passed to modify is not in multi_index\00")
(data (i32.const 672) "cannot modify objects in table of another contract\00")
(data (i32.const 736) "updater cannot change primary key when modifying an object\00")
(data (i32.const 800) "error reading iterator\00")
(data (i32.const 832) "read\00")
(data (i32.const 848) "EGT\e8\a7\a3\e9\99\a4\e6\8a\b5\e6\8a\bc\e9\a2\9d\e5\bf\85\e9\a1\bb\e5\a4\a7\e4\ba\8e0\00")
(data (i32.const 880) "\e8\a7\a3\e9\99\a4\e8\b4\a8\e6\8a\bc\e6\97\b6\e9\97\b4\e5\bf\85\e9\a1\bb\e5\a4\a7\e4\ba\8e24\e5\b0\8f\e6\97\b6\00")
(data (i32.const 928) "unpledge\00")
(data (i32.const 944) "attempt to add asset with different symbol\00")
(data (i32.const 992) "addition underflow\00")
(data (i32.const 1024) "addition overflow\00")
(data (i32.const 1056) "only EGT can pledge\00")
(data (i32.const 1088) "invalid quantity\00")
(data (i32.const 1120) "quantity must > 0\00")
(data (i32.const 1152) "EGT\e6\8a\b5\e6\8a\bc\e9\a2\9d\e4\b8\ba0\ef\bc\8c\e4\b8\8d\e8\83\bd\e9\a2\86\e5\8f\96\00")
(data (i32.const 1184) "\e8\a7\a3\e9\99\a4\e8\b4\a8\e6\8a\bc\e9\a2\9d\e9\ab\98\e4\ba\8e\e8\b4\a8\e6\8a\bc\e9\a2\9d\00")
(data (i32.const 1216) "attempt to subtract asset with different symbol\00")
(data (i32.const 1264) "subtraction underflow\00")
(data (i32.const 1296) "subtraction overflow\00")
(data (i32.const 1328) "blackjackrev\00")
(data (i32.const 1344) "\n weekDiv:\00")
(data (i32.const 1360) ".\00")
(data (i32.const 1376) " \00")
(data (i32.const 1392) ",\00")
(data (i32.const 1408) "tttblackjack\00")
(data (i32.const 1424) "\n signin day num : \00")
(data (i32.const 1456) "\e4\bb\8a\e6\97\a5\e5\b7\b2\e9\a2\86\e5\8f\96\00")
(data (i32.const 1472) "\n --------------assert\e8\bf\87\e4\ba\86--------\00")
(data (i32.const 1520) "\n --------------\e6\98\a8\e6\97\a5\e5\a2\9e\e5\8a\a0\e5\88\86\e7\ba\a2\e9\a2\9d:\00")
(data (i32.const 1568) "\n \e7\8e\a9\e5\ae\b6\e6\8a\b5\e6\8a\bc\ef\bc\9a\00")
(data (i32.const 1600) ",\e6\80\bb\e9\87\8a\e6\94\be:\00")
(data (i32.const 1616) ",\e6\80\bb\e6\8a\b5\e6\8a\bc:\00")
(data (i32.const 1632) ",\e6\98\a8\e6\97\a5\e5\88\86\e7\ba\a2\e6\b1\a0\e4\bd\99\e9\a2\9d\e5\bf\ab\e7\85\a7:\00")
(data (i32.const 1664) ",\e6\98\a8\e6\97\a5\e5\88\86\e7\ba\a2:\00")
(data (i32.const 1680) "\n egt_pledge_qty.amount:\00")
(data (i32.const 1712) "\n et:\00")
(data (i32.const 1728) ",d1:\00")
(data (i32.const 1744) ",d2:\00")
(data (i32.const 1760) "\n signinDiv:\00")
(data (i32.const 1776) "\e5\88\86\e7\ba\a2\e9\a2\9d\e4\b8\ba0\ef\bc\8c\e4\b8\8d\e8\83\bd\e9\a2\86\e5\8f\96\00")
(data (i32.const 1808) "\n ---------- transfer to \00")
(data (i32.const 1840) " , div : \00")
(data (i32.const 1856) "Day sigin Div From EGT Dividends Pool. http://eosgametoken.com\00")
(data (i32.const 1920) "pledge\00")
(data (i32.const 1936) "cannot create objects in table of another contract\00")
(data (i32.const 2000) "only EOS can init\00")
(data (i32.const 2032) "only EOS can sub div pool\00")
(data (i32.const 2064) "quantity overdrawn total_dividents\00")
(data (i32.const 2112) "quantity overdrawn dividents_balance\00")
(data (i32.const 2160) "cannot pass end iterator to erase\00")
(data (i32.const 2208) "cannot increment end iterator\00")
(data (i32.const 2240) "object passed to erase is not in multi_index\00")
(data (i32.const 2288) "cannot erase objects in table of another contract\00")
(data (i32.const 2352) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2416) "get\00")
(data (i32.const 2432) "\n symbol: \00")
(data (i32.const 2448) "\n amount: \00")
(data (i32.const 2464) "only EGT or EOS\00")
(data (i32.const 2480) "Invalid token transfer\00")
(data (i32.const 2512) "Quantity must be positive\00")
(data (i32.const 2544) "\e5\a4\87\e6\b3\a8\e4\bf\a1\e6\81\af\e4\b8\8d\e8\83\bd\e8\b6\85\e8\bf\87256\e4\bd\8d\00")
(data (i32.const 2576) "\n memo:\00")
(data (i32.const 2608) "addDivPool\00")
(data (i32.const 2624) "\n -----buy:\00")
(data (i32.const 2640) "|||||\00")
(data (i32.const 2656) "\n -----!=addDivPool else:\00")
(data (i32.const 2688) "\n -----< 10 else:\00")
(data (i32.const 2720) "only EOS can add div pool\00")
(data (i32.const 2752) "egtgametoken\00")
(data (i32.const 11168) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "memcpy" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "printdf" (func $fimport$12 (param f64)))
(import "env" "printi" (func $fimport$13 (param i64)))
(import "env" "prints" (func $fimport$14 (param i32)))
(import "env" "prints_l" (func $fimport$15 (param i32 i32)))
(import "env" "printui" (func $fimport$16 (param i64)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$18 (param i64)))
(import "env" "require_auth2" (func $fimport$19 (param i64 i64)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z11SplitStringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_" (func $5))
(export "_Z10gbk_strlenPKcPi" (func $7))
(export "apply" (func $8))
(export "_ZN12egtdividends8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $10))
(export "_ZN12egtdividends5claimEy" (func $12))
(export "_ZN12egtdividends4delgEv" (func $14))
(export "_ZN12egtdividends4delpEy" (func $16))
(export "_ZN12egtdividends10subdivpollEN5eosio5assetE" (func $17))
(export "_ZN12egtdividends12resetsigndayEy" (func $19))
(export "_ZN12egtdividends12resetbalanceEyN5eosio5assetE" (func $20))
(export "_ZN12egtdividends4initEN5eosio5assetES1_S1_S1_S1_" (func $22))
(export "_ZN12egtdividends10initpremonEN5eosio5assetE" (func $24))
(export "_ZN12egtdividends6pledgeEyN5eosio5assetE" (func $25))
(export "_ZN12egtdividends6signinEy" (func $26))
(export "_ZN12egtdividends12startweekdivEv" (func $27))
(export "_ZN12egtdividends12allocweekdivEy" (func $28))
(export "_ZN12egtdividends11startmondivEv" (func $29))
(export "_ZN12egtdividends11allocmondivEy" (func $30))
(export "_ZN12egtdividends8unpledgeEyN5eosio5assetE" (func $31))
(export "_ZN12egtdividends12cancelunpledEy" (func $32))
(export "_ZN12egtdividends11withdrawegtEy" (func $33))
(export "_ZN12egtdividends11withdrawdivEy" (func $34))
(export "_ZN12egtdividends12add_div_pollEN5eosio5assetE" (func $75))
(export "malloc" (func $78))
(export "free" (func $81))
(export "memchr" (func $90))
(export "memcmp" (func $91))
(export "strlen" (func $92))
(table $0 20 20 anyfunc)
(elem (i32.const 0) $93 $32 $31 $24 $20 $33 $27 $14 $26 $30 $28 $17 $10 $16 $22 $25 $34 $29 $12 $19)



int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $93 ()
{
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $42(*($1), ($0 + [32]))
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [672])
	$6 = *(($2 + [4]))
	$3 = *($1)
	$2 = *($2)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [16]))), [944])
	$5 = ((int_64)*($1 + [8]) + (int_64)*($2))
	*($1 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1024])
	$4 = *($6 + [16])
	CALL eosio_assert([1], [256])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [320])
	*(($1 + [56])) = $4
	*($1 + [48]) = (int_64)0
	*($1 + [64]) = [0]
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [736])
	$6 = $8
	$2 = ($6 + [-80])
	*([0] + [4]) = $2
	*($7 + [4]) = $2
	*($7) = $2
	*($7 + [8]) = ($6 + [-4])
	CALL $43($7, $1)
	CALL db_update_i64(*($1 + [84]), (int_64)0, $2, [76])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$6 = CALL $82([16])
	*($0 + [16]) = $6
	*(($7 = ($0 + [20]))) = $6
	$8 = ($6 + [16])
	*($5) = $8
	*(($6 + [8])) = *(($1 + [8]))
	*($6) = *($1)
	*($7) = $8
	*($0 + [28]) = [0]
	*(($6 = ($0 + [32]))) = [0]
	*(($0 + [36])) = [0]
	CALL $37(($0 + [28]), [24])
	$6 = *($0 + [28])
	$1 = (*($6) - $6)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [608])
	CALL memcpy($6, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [608])
	CALL memcpy(($6 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [608])
	CALL memcpy(($6 + [16]), ($4 + [16]), [8])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [68]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [76]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [608])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [608])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [608])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [608])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [608])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [608])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [608])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [672])
	$4 = *((*($2) + [16]))
	$3 = *($1)
	CALL eosio_assert([1], [256])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [320])
	*(($1 + [56])) = $4
	*($1 + [48]) = (int_64)0
	*($1 + [64]) = [0]
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [736])
	$6 = $8
	$2 = ($6 + [-80])
	*([0] + [4]) = $2
	*($7 + [4]) = $2
	*($7) = $2
	*($7 + [8]) = ($6 + [-4])
	CALL $43($7, $1)
	CALL db_update_i64(*($1 + [84]), (int_64)0, $2, [76])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $82(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $83($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $83($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [832])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [832])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [832])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [832])
	CALL memcpy(($1 + [68]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [832])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [832])
	CALL memcpy(($1 + [76]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $44 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [320])
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [416])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$7 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$10 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$10 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [128]
	$10 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$28 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$24
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$23 }
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$29 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$10 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$35 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$3 = ($3 + [165])
	goto $label$33 
	
.LABEL $label$35
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$31
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$30 }
	if ( ((int_64)$10 == (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$29
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [144]
	$10 = (int_64)0
	
.LOOP $label$36:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$37 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$37
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$36 }
	if ( ((int_64)$10 != (int_64)$1) ){ goto $label$14 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$10 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$45 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$3 = ($3 + [165])
	goto $label$43 
	
.LABEL $label$45
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$41
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$40 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = CALL $9(($12 + [312]), $0)
	if ( ((int_64)$2 <= (int_64)-2039333636191570433) ){ goto $label$64 }
	if ( ((int_64)$2 > (int_64)4921564679018381311) ){ goto $label$63 }
	if ( ((int_64)$2 <= (int_64)3774935999756088831) ){ goto $label$61 }
	if ( ((int_64)$2 == (int_64)3774935999756088832) ){ goto $label$57 }
	if ( ((int_64)$2 == (int_64)3774936166038658480) ){ goto $label$56 }
	if ( ((int_64)$2 != (int_64)4730614999992259728) ){ goto $label$46 }
	*($12 + [180]) = [0]
	*($12 + [176]) = [1]
	*($12 + [136 align=4]) = *($12 + [176])
	CALL $13($4, ($12 + [136]))
	goto $label$46 
	
.LABEL $label$64
	if ( ((int_64)$2 <= (int_64)-4157529671496649217) ){ goto $label$62 }
	if ( ((int_64)$2 <= (int_64)-4139204505775620097) ){ goto $label$60 }
	if ( ((int_64)$2 == (int_64)-4139204505775620096) ){ goto $label$55 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$54 }
	if ( ((int_64)$2 != (int_64)-3104364267168595968) ){ goto $label$46 }
	*($12 + [188]) = [0]
	*($12 + [184]) = [2]
	*($12 + [128 align=4]) = *($12 + [184])
	CALL $21($4, ($12 + [128]))
	goto $label$46 
	
.LABEL $label$63
	if ( ((int_64)$2 <= (int_64)5378230340940726271) ){ goto $label$59 }
	if ( ((int_64)$2 == (int_64)5378230340940726272) ){ goto $label$53 }
	if ( ((int_64)$2 == (int_64)8421045207927095296) ){ goto $label$52 }
	if ( ((int_64)$2 != (int_64)8421057153617674240) ){ goto $label$46 }
	*($12 + [244]) = [0]
	*($12 + [240]) = [3]
	*($12 + [72 align=4]) = *($12 + [240])
	CALL $18($4, ($12 + [72]))
	goto $label$46 
	
.LABEL $label$62
	if ( ((int_64)$2 > (int_64)-4994301900953596449) ){ goto $label$58 }
	if ( ((int_64)$2 == (int_64)-6029028902599393280) ){ goto $label$51 }
	if ( ((int_64)$2 != (int_64)-4994302197229104992) ){ goto $label$46 }
	*($12 + [260]) = [0]
	*($12 + [256]) = [4]
	*($12 + [56 align=4]) = *($12 + [256])
	CALL $21($4, ($12 + [56]))
	goto $label$46 
	
.LABEL $label$61
	if ( ((int_64)$2 == (int_64)-2039333636191570432) ){ goto $label$50 }
	if ( ((int_64)$2 != (int_64)-2039333636191079936) ){ goto $label$46 }
	*($12 + [172]) = [0]
	*($12 + [168]) = [5]
	*($12 + [144 align=4]) = *($12 + [168])
	CALL $13($4, ($12 + [144]))
	goto $label$46 
	
.LABEL $label$60
	if ( ((int_64)$2 == (int_64)-4157529671496649216) ){ goto $label$49 }
	if ( ((int_64)$2 != (int_64)-4157529505214079568) ){ goto $label$46 }
	*($12 + [220]) = [0]
	*($12 + [216]) = [6]
	*($12 + [96 align=4]) = *($12 + [216])
	CALL $15($4, ($12 + [96]))
	goto $label$46 
	
.LABEL $label$59
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$48 }
	if ( ((int_64)$2 != (int_64)5378072011266326528) ){ goto $label$46 }
	*($12 + [292]) = [0]
	*($12 + [288]) = [7]
	*($12 + [24 align=4]) = *($12 + [288])
	CALL $15($4, ($12 + [24]))
	goto $label$46 
	
.LABEL $label$58
	if ( ((int_64)$2 == (int_64)-4994301900953596448) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)-4352386765319831552) ){ goto $label$46 }
	*($12 + [228]) = [0]
	*($12 + [224]) = [8]
	*($12 + [88 align=4]) = *($12 + [224])
	CALL $13($4, ($12 + [88]))
	goto $label$46 
	
.LABEL $label$57
	*($12 + [196]) = [0]
	*($12 + [192]) = [9]
	*($12 + [120 align=4]) = *($12 + [192])
	CALL $13($4, ($12 + [120]))
	goto $label$46 
	
.LABEL $label$56
	*($12 + [212]) = [0]
	*($12 + [208]) = [10]
	*($12 + [104 align=4]) = *($12 + [208])
	CALL $13($4, ($12 + [104]))
	goto $label$46 
	
.LABEL $label$55
	*($12 + [276]) = [0]
	*($12 + [272]) = [11]
	*($12 + [40 align=4]) = *($12 + [272])
	CALL $18($4, ($12 + [40]))
	goto $label$46 
	
.LABEL $label$54
	*($12 + [308]) = [0]
	*($12 + [304]) = [12]
	*($12 + [8 align=4]) = *($12 + [304])
	CALL $11($4, ($12 + [8]))
	goto $label$46 
	
.LABEL $label$53
	*($12 + [284]) = [0]
	*($12 + [280]) = [13]
	*($12 + [32 align=4]) = *($12 + [280])
	CALL $13($4, ($12 + [32]))
	goto $label$46 
	
.LABEL $label$52
	*($12 + [252]) = [0]
	*($12 + [248]) = [14]
	*($12 + [64 align=4]) = *($12 + [248])
	CALL $23($4, ($12 + [64]))
	goto $label$46 
	
.LABEL $label$51
	*($12 + [236]) = [0]
	*($12 + [232]) = [15]
	*($12 + [80 align=4]) = *($12 + [232])
	CALL $21($4, ($12 + [80]))
	goto $label$46 
	
.LABEL $label$50
	*($12 + [164]) = [0]
	*($12 + [160]) = [16]
	*($12 + [152 align=4]) = *($12 + [160])
	CALL $13($4, ($12 + [152]))
	goto $label$46 
	
.LABEL $label$49
	*($12 + [204]) = [0]
	*($12 + [200]) = [17]
	*($12 + [112 align=4]) = *($12 + [200])
	CALL $15($4, ($12 + [112]))
	goto $label$46 
	
.LABEL $label$48
	*($12 + [300]) = [0]
	*($12 + [296]) = [18]
	*($12 + [16 align=4]) = *($12 + [296])
	CALL $13($4, ($12 + [16]))
	goto $label$46 
	
.LABEL $label$47
	*($12 + [268]) = [0]
	*($12 + [264]) = [19]
	*($12 + [48 align=4]) = *($12 + [264])
	CALL $13($4, ($12 + [48]))
	
.LABEL $label$46
	$5 = *(($4 + [88]))
	if ( ($5 == 0) ){ goto $label$65 }
	$6 = ($4 + [92])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$67 }
	
.LOOP $label$68:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$69 }
	CALL $83($3)
	
.LABEL $label$69
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$68 }
	$7 = *(($4 + [88]))
	goto $label$66 
	
.LABEL $label$67
	$7 = $5
	
.LABEL $label$66
	*($6) = $5
	CALL $83($7)
	
.LABEL $label$65
	$5 = *(($4 + [48]))
	if ( ($5 == 0) ){ goto $label$14 }
	$6 = ($4 + [52])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$71 }
	
.LOOP $label$72:
	$7 = ($7 + [-24])
	$3 = *($7)
	*($7) = [0]
	if ( ($3 == 0) ){ goto $label$73 }
	CALL $83($3)
	
.LABEL $label$73
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$72 }
	$7 = *(($4 + [48]))
	goto $label$70 
	
.LABEL $label$71
	$7 = $5
	
.LABEL $label$70
	*($6) = $5
	CALL $83($7)
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [416])
}

int_32 .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($0 + [8]) = (int_64)1397703940
	*($0) = $1
	*($0 + [16]) = (int_64)1413956868
	*($0 + [24]) = $1
	*(($0 + [32])) = $1
	*(($0 + [40])) = (int_64)-1
	*(($0 + [48])) = [0]
	*(($0 + [52])) = [0]
	*(($0 + [56])) = [0]
	$2 = ($0 + [24])
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2752]
	$9 = (int_64)0
	
.LOOP $label$5:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$3 = ($3 + [165])
	goto $label$7 
	
.LABEL $label$8
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$6
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$5 }
	*($0 + [64]) = $7
	*(($0 + [72])) = $9
	*(($0 + [80])) = (int_64)-1
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = [0]
	$4 = CALL db_find_i64($1, $1, (int_64)7235159537265672192, (uint_64)(int_64)1397703936 >> (uint_64)(int_64)8)
	if ( ((int_32)$4) < (int_32)[0]) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*(CALL $50($2, $4) + [232]) == (int_32)$2), [160])
	goto $label$9 
	
.LABEL $label$10
	*($10 + [28]) = ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[86400])
	$6 = *($0)
	*($10 + [16]) = $0
	*($10 + [20]) = ($10 + [28])
	CALL $76(($10 + [8]), $2, $6, ($10 + [16]))
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [32])
	return $0
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $82(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $83(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $83($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z10gbk_strlenPKcPi (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$1 }
	$5 = ($1 + [4])
	$4 = ($1 + [16])
	$3 = ($1 + [12])
	$2 = ($1 + [8])
	
.LOOP $label$2:
	$7 = $5
	$8 = [1]
	if ( ((int_32)($6 & [192]) != (int_32)[192]) ){ goto $label$3 }
	$8 = [2]
	$7 = $2
	if ( (($6 & [32]) == 0) ){ goto $label$3 }
	$6 = ($6 & [16])
	$7 = ( $4 ? $3 : $6 )
	$8 = (uint_32($6 >> [4]) + [3])
	
.LABEL $label$3
	*($7) = (*($7) + [1])
	*($1) = (*($1) + [1])
	$0 = ($0 + $8)
	$6 = *($0)
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z11SplitStringRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIS5_NS3_IS5_EEEES7_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [16])
	*([0] + [4]) = $14
	$4 = ($2 + [1])
	$3 = ($0 + [1])
	$13 = *($2 + [4])
	$7 = *($2)
	$11 = ($0 + [4])
	$12 = [0]
	
.LOOP $label$2:
	$9 = ($10 & [1])
	$10 = *($0)
	$8 = ( *($11) ? uint_32($10 >> [1]) : $9 )
	if ( ($8 <= $12) ){ goto $label$1 }
	$10 = $12
	$6 = ($7 & [1])
	$7 = ( $13 ? uint_32(($7 & [254]) >> [1]) : $6 )
	if ( ($7 == 0) ){ goto $label$3 }
	$13 = ($5 + $12)
	$5 = ( *(($0 + [8])) ? $3 : $9 )
	$8 = ($5 + $8)
	$10 = ($8 - $13)
	if ( ((int_32)$10 < (int_32)$7) ){ goto $label$1 }
	$6 = ( *(($2 + [8])) ? $4 : $6 )
	$9 = *($6)
	
.LOOP $label$4:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$1 }
	$10 = CALL memchr($13, $9, $10)
	if ( ($10 == 0) ){ goto $label$1 }
	if ( (CALL memcmp($10, $6, $7) == 0) ){ goto $label$5 }
	$13 = ($10 + [1])
	$10 = ($8 - $13)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$1 }
	$10 = ($10 - $5)
	
.LABEL $label$3
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$1 }
	CALL $89($14, $0, $12, ($10 - $12), $0)
	$7 = ($1 + [4])
	$13 = *($7)
	if ( ((uint_32)$13 >= (uint_32)*(($1 + [8]))) ){ goto $label$7 }
	*($13) = *($14)
	$13 = ($14 + [8])
	*(($13 + [8])) = *($13)
	*($13) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*($7) = (*($7) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $6($1, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$6 }
	CALL $83(*(($14 + [8])))
	
.LABEL $label$6
	$7 = *($2)
	$13 = *(($2 + [4]))
	$12 = (( $13 ? uint_32($7 >> [1]) : ($7 & [1]) ) + $10)
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	if ( ((int_32)$12 == (int_32)( *(($0 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$8 }
	CALL $89($14, $0, $12, [-1], $0)
	$7 = *(($1 + [4]))
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [8]))) ){ goto $label$9 }
	*($7) = *($14)
	$7 = ($14 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($14) = [0]
	*($14 + [4]) = [0]
	*(($7 = ($1 + [4]))) = (*($7) + [12])
	goto $label$8 
	
.LABEL $label$9
	CALL $6($1, $14)
	if ( ((*($14) & [1]) == 0) ){ goto $label$8 }
	CALL $83(*($14 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($14 + [16])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN12egtdividends4delgEv (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = *(($0 + [48]))
	$6 = *(($0 + [52]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($5) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [24])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [232]) == (int_32)$5), [160])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $50($5, $4)
	CALL eosio_assert(((int_32)*($4 + [232]) == (int_32)$5), [160])
	
.LABEL $label$4
	CALL eosio_assert([1], [2160])
	CALL eosio_assert([1], [2208])
	$6 = CALL db_next_i64(*($4 + [236]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $50($5, $6)
	
.LABEL $label$6
	CALL $70($5, $4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN12egtdividends4delpEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)-6029028889714491392, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $35($6, $0)
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$6), [160])
	CALL eosio_assert([1], [2160])
	CALL eosio_assert([1], [2208])
	$3 = CALL db_next_i64(*($0 + [84]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $35($6, $3)
	
.LABEL $label$2
	CALL $69($6, $0)
	
.LABEL $label$1
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $83($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $83($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC _ZN12egtdividends10subdivpollEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [256])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	$2 = *($1 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)*($0 + [8])), [2032])
	$6 = [0]
	$3 = *($1)
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1088])
	$7 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	$4 = *(($0 + [48]))
	$9 = *(($0 + [52]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$6 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)(uint_64)*(*($8) + [8]) >> (uint_64)(int_64)8) == (int_64)$7) ){ goto $label$6 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = ($0 + [24])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$9 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [232]) == (int_32)$6), [160])
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $7)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$8 }
	$8 = CALL $50($6, $9)
	CALL eosio_assert(((int_32)*($8 + [232]) == (int_32)$6), [160])
	
.LABEL $label$8
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$2), [352])
	CALL eosio_assert(((int_64)*($8) >= (int_64)$3), [2064])
	$9 = ($8 + [24])
	CALL eosio_assert(((int_64)*($9) == (int_64)$2), [352])
	CALL eosio_assert(((int_64)*($8 + [16]) >= (int_64)$3), [2112])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($8 + [232]) == (int_32)$6), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	$7 = *($8 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)$7), [1216])
	$3 = (int_64)
	*($8) = $3(*($8) - $3))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$2 == (int_64)*($9)), [1216])
	$2 = (int_64)
	*($8 + [16]) = $2(*($8 + [16]) - *($1)))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($8 + [16]) < (int_64)4611686018427387904), [1296])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8)), [736])
	*($10 + [248]) = ($10 + [228])
	*($10 + [244]) = $10
	*($10 + [240]) = $10
	CALL $51(($10 + [240]), $8)
	CALL db_update_i64(*($8 + [236]), (int_64)0, $10, [228])
	$8 = ($0 + [40])
	if ( (uint_64)($7 <= *($8)) ){ goto $label$10 }
	*($8) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [256])
}

void .FUNC _ZN12egtdividends8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	CALL prints([2432])
	$8 = [1]
	$5 = ($3 + [8])
	CALL $57($5, [1])
	CALL prints([2448])
	CALL printi(*($3))
	$1 = *($3 + [8])
	if ( ((int_64)$1 == (int_64)*($0 + [8])) ){ goto $label$2 }
	$8 = ((int_64)$1 == (int_64)*($0 + [16]))
	
.LABEL $label$2
	CALL eosio_assert($8, [2464])
	$9 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$1 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	
.LABEL $label$3
	CALL eosio_assert($9, [2480])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [2512])
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$9 }
	$10 = ($4 + [4])
	$8 = uint_32($8 >> [1])
	goto $label$8 
	
.LABEL $label$9
	$10 = ($4 + [4])
	$8 = *($4 + [4])
	
.LABEL $label$8
	CALL eosio_assert(($8 <= [257]), [2544])
	CALL prints([2576])
	$7 = ($4 + [4])
	$8 = *($4)
	$9 = ($8 & [1])
	CALL prints_l(( *($4 + [8]) ? ($4 + [1]) : $9 ), ( *($7) ? uint_32($8 >> [1]) : $9 ))
	$8 = *($4)
	$9 = CALL strlen([2592])
	if ( ((int_32)$9 != (int_32)( *($7) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$13 }
	if ( (CALL $86($4, [0], [-1], [2592], $9) == 0) ){ goto $label$12 }
	$8 = *($4)
	
.LABEL $label$13
	if ( ($8 & [1]) ){ goto $label$15 }
	$8 = uint_32(($8 & [254]) >> [1])
	goto $label$14 
	
.LABEL $label$15
	$8 = *($10)
	
.LABEL $label$14
	if ( ($8 <= [10]) ){ goto $label$12 }
	CALL $89(($11 + [32]), $4, [0], [10], $4)
	$8 = *($11 + [32])
	$4 = CALL strlen([2608])
	if ( ((int_32)$4 != (int_32)( *($11 + [36]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$11 }
	if ( CALL $86(($11 + [32]), [0], [-1], [2608], $4) ){ goto $label$11 }
	$1 = *($5)
	if ( ((int_64)$1 != (int_64)*(($0 + [8]))) ){ goto $label$11 }
	CALL prints([2624])
	$8 = *($11 + [32])
	$4 = ($8 & [1])
	CALL prints_l(( *($11 + [40]) ? (($11 + [32]) | [1]) : $4 ), ( *($11 + [36]) ? uint_32($8 >> [1]) : $4 ))
	CALL prints([2640])
	CALL printui((uint_64)$1 >> (uint_64)(int_64)8))
	*(($8 = (($11 + [16]) + [8]))) = *(($3 + [8]))
	$1 = *($3)
	*(($11 + [12])) = *((($11 + [16]) + [12]))
	*(($11 + [8])) = *($8)
	*($11 + [16]) = $1
	*($11 + [4]) = *($11 + [20])
	*($11) = *($11 + [16])
	CALL _ZN12egtdividends12add_div_pollEN5eosio5assetE($0, $11)
	goto $label$10 
	
.LABEL $label$12
	CALL prints([2688])
	goto $label$1 
	
.LABEL $label$11
	CALL prints([2656])
	$8 = *($11 + [32])
	$4 = ($8 & [1])
	CALL prints_l(( *($11 + [40]) ? (($11 + [32]) | [1]) : $4 ), ( *($11 + [36]) ? uint_32($8 >> [1]) : $4 ))
	CALL prints([2640])
	
.LABEL $label$10
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL $83(*($11 + [40]))
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [256])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [320])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $71(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $72(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $83(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN12egtdividends5claimEy (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [832])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN12egtdividends12add_div_pollEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [288])
	*([0] + [4]) = $12
	$2 = *($1 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)*($0 + [8])), [2720])
	$6 = [0]
	$3 = *($1)
	if ( ((uint_64)((int_64)$3 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)$2 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [1088])
	$9 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	$4 = *(($0 + [48]))
	$11 = *(($0 + [52]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$6 }
	$10 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)(uint_64)*(*($10) + [8]) >> (uint_64)(int_64)8) == (int_64)$9) ){ goto $label$6 }
	$11 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = ($0 + [24])
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$9 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [232]) == (int_32)$6), [160])
	goto $label$8 
	
.LABEL $label$9
	$10 = [0]
	$11 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $9)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $50($6, $11)
	CALL eosio_assert(((int_32)*($10 + [232]) == (int_32)$6), [160])
	
.LABEL $label$8
	$9 = CALL current_time()
	$11 = ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$9 / (uint_64)(int_64)1000000)) / (uint_32)[86400])
	if ( ((int_32)*($10 + [104]) != (int_32)$11) ){ goto $label$11 }
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($10 + [232]) == (int_32)$6), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	$9 = *($10 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)$9), [944])
	$3 = ((int_64)*($10) + (int_64)$3)
	*($10) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$2 == (int_64)*(($10 + [24]))), [944])
	$3 = ((int_64)*($10 + [16]) + (int_64)*($1))
	*($10 + [16]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($10 + [16]) < (int_64)4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$2 == (int_64)*(($10 + [120]))), [944])
	$3 = ((int_64)*($10 + [112]) + (int_64)*($1))
	*($10 + [112]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($10 + [112]) < (int_64)4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$2 == (int_64)*(($10 + [168]))), [944])
	$3 = ((int_64)*($10 + [160]) + (int_64)*($1))
	*($10 + [160]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($10 + [160]) < (int_64)4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$2 == (int_64)*(($10 + [200]))), [944])
	$2 = ((int_64)*($10 + [192]) + (int_64)*($1))
	*($10 + [192]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($10 + [192]) < (int_64)4611686018427387904), [1024])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($10 + [8]) >> (uint_64)(int_64)8)), [736])
	*($12 + [24]) = (($12 + [32]) + [228])
	*($12 + [20]) = ($12 + [32])
	*($12 + [16]) = ($12 + [32])
	CALL $51(($12 + [16]), $10)
	CALL db_update_i64(*($10 + [236]), (int_64)0, ($12 + [32]), [228])
	$10 = ($0 + [40])
	if ( (uint_64)($9 <= *($10)) ){ goto $label$10 }
	*($10) = ((int_64)$9 + (int_64)1)
	goto $label$10 
	
.LABEL $label$11
	$4 = ($10 + [120])
	*(($5 = (($12 + [16]) + [8]))) = *($4)
	*($12 + [16]) = *($10 + [112])
	$7 = ($10 + [24])
	*(($8 = ($12 + [8]))) = *($7)
	*($12) = *($10 + [16])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($10 + [232]) == (int_32)$6), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	*(($10 + [44])) = *(($12 + [12]))
	*(($10 + [40])) = *($8)
	*(($10 + [36])) = *($12 + [4])
	*($10 + [32]) = *($12)
	$2 = *($10 + [8])
	*(($10 + [136])) = *($5)
	*($10 + [128]) = *($12 + [16])
	$6 = ($1 + [8])
	*($4) = *($6)
	*($10 + [112]) = *($1)
	$9 = *($6)
	CALL eosio_assert(((int_64)$2 == (int_64)$9), [944])
	$3 = ((int_64)*($10) + (int_64)*($1))
	*($10) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$9 == (int_64)*($7)), [944])
	$3 = ((int_64)*($10 + [16]) + (int_64)*($1))
	*($10 + [16]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($10 + [16]) < (int_64)4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$9 == (int_64)*(($10 + [168]))), [944])
	$3 = ((int_64)*($10 + [160]) + (int_64)*($1))
	*($10 + [160]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($10 + [160]) < (int_64)4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$9 == (int_64)*(($10 + [200]))), [944])
	$9 = ((int_64)*($10 + [192]) + (int_64)*($1))
	*($10 + [192]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($10 + [192]) < (int_64)4611686018427387904), [1024])
	*($10 + [104]) = $11
	$9 = (uint_64)$2 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($10 + [8]) >> (uint_64)(int_64)8)), [736])
	*($12 + [280]) = (($12 + [32]) + [228])
	*($12 + [276]) = ($12 + [32])
	*($12 + [272]) = ($12 + [32])
	CALL $51(($12 + [272]), $10)
	CALL db_update_i64(*($10 + [236]), (int_64)0, ($12 + [32]), [228])
	$10 = ($0 + [40])
	if ( (uint_64)($9 <= *($10)) ){ goto $label$10 }
	*($10) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$10
	*([0] + [4]) = ($12 + [288])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [80])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	CALL $68(($6 + [16]), $4, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*(($1 = (($6 + [32]) + [8]))) = *((($6 + [16]) + [8]))
	*($6 + [32]) = *($6 + [16])
	*((($6 + [48]) + [8])) = *($1)
	*($6 + [48]) = *($6 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$3 = *((($6 + [48]) + [8]))
	*((($6 + [64]) + [8])) = $3
	*(($6 + [8])) = $3
	$3 = *($6 + [48])
	*($6 + [64]) = $3
	*($6) = $3
	CALL void $1((int_32 $6), (int_32 $5))
	*([0] + [4]) = ($6 + [80])
	return [1]
}

void .FUNC _ZN12egtdividends12resetsigndayEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [144])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	$0 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-6029028889714491392, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $35(($6 + [8]), $3)
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)($6 + [8])), [160])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)($6 + [8])), [624])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$2()), [672])
	*($0 + [68 align=4]) = (int_64)0
	*($0 + [76]) = [0]
	$4 = *($0)
	CALL eosio_assert([1], [736])
	*($6 + [136]) = (($6 + [48]) + [76])
	*($6 + [132]) = ($6 + [48])
	*($6 + [128]) = ($6 + [48])
	CALL $43(($6 + [128]), $0)
	CALL db_update_i64(*($0 + [84]), (int_64)0, ($6 + [48]), [76])
	$0 = ($6 + [24])
	if ( (uint_64)($4 <= *($0)) ){ goto $label$2 }
	*($0) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $83($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $83($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [144])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [232]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [672])
	$5 = *($2 + [8])
	$7 = *($2)
	*($1 + [48]) = *($7)
	*(($1 + [60])) = *(($7 + [12]))
	*(($1 + [56])) = *(($7 + [8]))
	*(($1 + [52])) = *(($7 + [4]))
	$6 = *($1 + [8])
	*($1 + [208]) = ((int_64)*($1 + [208]) + (int_64)1)
	$2 = *($2 + [4])
	*($1 + [144]) = *($2)
	*(($1 + [152])) = *(($2 + [8]))
	$4 = *($5 + [8])
	CALL eosio_assert([1], [256])
	$3 = (uint_64)$6 >> (uint_64)(int_64)8)
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [320])
	*(($1 + [168])) = $4
	*($1 + [160]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [736])
	$7 = $9
	$2 = ($7 + [-240])
	*([0] + [4]) = $2
	*($8 + [4]) = $2
	*($8) = $2
	*($8 + [8]) = ($7 + [-12])
	CALL $51($8, $1)
	CALL db_update_i64(*($1 + [236]), (int_64)0, $2, [228])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $82([32])
	$6 = CALL $61($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $62(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $83($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $82([248])
	$4 = CALL $52($6)
	*($6 + [232]) = $0
	CALL $53(($8 + [32]), $4)
	*($6 + [236]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8
	*($8 + [16]) = $5)
	$7 = *($6 + [236])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $54(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $83($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [168]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [176]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [184]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [192]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [200]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [208]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [216]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [224]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $52 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$3 = [0]
	
.LABEL $label$26
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [120]))) = (int_64)1398362884
	*($0 + [112]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$3 = [0]
	
.LABEL $label$31
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [136]))) = (int_64)1398362884
	*($0 + [128]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$3 = [0]
	
.LABEL $label$36
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [152]))) = (int_64)1398362884
	*($0 + [144]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	
.LOOP $label$45:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$42 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$45 }
	
.LABEL $label$44
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$3 = [0]
	
.LABEL $label$41
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [168]))) = (int_64)1398362884
	*($0 + [160]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	
.LOOP $label$50:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$50 }
	
.LABEL $label$49
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$3 = [0]
	
.LABEL $label$46
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [184]))) = (int_64)1398362884
	*($0 + [176]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	
.LOOP $label$55:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$55 }
	
.LABEL $label$54
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$3 = [0]
	
.LABEL $label$51
	CALL eosio_assert($3, [320])
	*(($2 = ($0 + [200]))) = (int_64)1398362884
	*($0 + [192]) = (int_64)0
	CALL eosio_assert([1], [256])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$59 }
	
.LOOP $label$60:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$57 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$60 }
	
.LABEL $label$59
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$3 = [0]
	
.LABEL $label$56
	CALL eosio_assert($3, [320])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [832])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [832])
	CALL memcpy(($1 + [104]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [168]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [176]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [184]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [192]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [200]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [208]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [216]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($1 + [224]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $82(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $83($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $83($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN12egtdividends11withdrawdivEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [192])
	*([0] + [4]) = $14
	CALL require_auth($1)
	$7 = [0]
	*(($14 + [152])) = [0]
	*($14 + [136]) = (int_64)-1
	*($14 + [144]) = (int_64)0
	$9 = *($0)
	*($14 + [120]) = $9
	*($14 + [128]) = $9
	$5 = [0]
	$6 = CALL db_find_i64($9, $9, (int_64)-6029028889714491392, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $35(($14 + [120]), $6)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)($14 + [120])), [160])
	
.LABEL $label$1
	$2 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($2, [224])
	$11 = *($0 + [8])
	CALL eosio_assert([1], [256])
	$3 = ($5 + [24])
	$9 = (uint_64)$11 >> (uint_64)(int_64)8)
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	
.LABEL $label$2
	CALL eosio_assert($6, [320])
	CALL eosio_assert(((int_64)*(($5 + [32])) == (int_64)$11), [352])
	$9 = (int_64)0
	CALL eosio_assert(((int_64)*(($5 + [24])) > (int_64)0), [416])
	*((($14 + [104]) + [8])) = *(($3 + [8]))
	*($14 + [104]) = *($3)
	*($14 + [16]) = $0
	CALL eosio_assert($2, [464])
	CALL $36(($14 + [120]), $5, ($14 + [16]))
	$4 = *($0)
	$8 = (int_64)59
	$7 = [512]
	$10 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$12 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [128]
	$12 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$18 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$5 = ($5 + [165])
	goto $label$16 
	
.LABEL $label$18
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$14
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$12 = ((int_64)$11 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$13 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$13 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$24 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$5 = ($5 + [165])
	goto $label$22 
	
.LABEL $label$24
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$20
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$19 }
	*(($14 + [8])) = [0]
	*($14) = (int_64)0
	$7 = CALL strlen([528])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$28 }
	*($14) = ($7 << [1])
	$5 = ($14 | [1])
	if ( $7 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$6 = (($7 + [16]) & [-16])
	$5 = CALL $82($6)
	*($14) = ($6 | [1])
	*($14 + [8]) = $5
	*($14 + [4]) = $7
	
.LABEL $label$27
	CALL memcpy($5, [528], $7)
	
.LABEL $label$26
	*(($5 + $7)) = [0]
	*((($14 + [16]) + [20])) = *($14 + [108])
	*($14 + [24]) = $1
	*((($14 + [16]) + [28])) = *(($14 + [116]))
	*((($14 + [16]) + [24])) = *((($14 + [104]) + [8]))
	*($14 + [16]) = *($0)
	*($14 + [32]) = *($14 + [104])
	$7 = ($14 + [8])
	*(($14 + [56])) = *($7)
	*($14 + [48]) = *($14)
	*($14) = [0]
	*($14 + [4]) = [0]
	*($7) = [0]
	*($14 + [64]) = $12
	*($14 + [72]) = $13
	*(($7 = CALL $82([16]))) = $4
	*($7 + [8]) = $10
	*((($14 + [64]) + [32])) = [0]
	$5 = ($7 + [16])
	*((($14 + [64]) + [24])) = $5
	*((($14 + [64]) + [20])) = $5
	*($14 + [80]) = $7
	*($14 + [92]) = [0]
	*((($14 + [64]) + [36])) = [0]
	$7 = *($14 + [48])
	$5 = ( *((($14 + [16]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [32])
	$9 = (CASTING uint_64)(uint_32 $5)
	$5 = (($14 + [64]) + [28])
	
.LOOP $label$29:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$29 }
	if ( ($7 == 0) ){ goto $label$31 }
	CALL $37($5, $7)
	$5 = *(($14 + [96]))
	$7 = *(($14 + [92]))
	goto $label$30 
	
.LABEL $label$31
	$5 = [0]
	$7 = [0]
	
.LABEL $label$30
	*($14 + [180]) = $7
	*($14 + [176]) = $7
	*($14 + [184]) = $5
	*($14 + [160]) = ($14 + [176])
	*($14 + [168]) = ($14 + [16])
	CALL $38(($14 + [168]), ($14 + [160]))
	CALL $39(($14 + [176]), ($14 + [64]))
	$7 = *($14 + [176])
	CALL send_inline($7, (*($14 + [180]) - $7))
	$7 = *($14 + [176])
	if ( ($7 == 0) ){ goto $label$32 }
	*($14 + [180]) = $7
	CALL $83($7)
	
.LABEL $label$32
	$7 = *($14 + [92])
	if ( ($7 == 0) ){ goto $label$33 }
	*(($14 + [96])) = $7
	CALL $83($7)
	
.LABEL $label$33
	$7 = *($14 + [80])
	if ( ($7 == 0) ){ goto $label$34 }
	*(($14 + [84])) = $7
	CALL $83($7)
	
.LABEL $label$34
	if ( ((*(($14 + [48])) & [1]) == 0) ){ goto $label$35 }
	CALL $83(*(($14 + [56])))
	
.LABEL $label$35
	if ( ((*($14) & [1]) == 0) ){ goto $label$36 }
	CALL $83(*(($14 + [8])))
	
.LABEL $label$36
	$0 = *($14 + [144])
	if ( ($0 == 0) ){ goto $label$37 }
	$6 = ($14 + [148])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$39 }
	
.LOOP $label$40:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$41 }
	CALL $83($5)
	
.LABEL $label$41
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$40 }
	$7 = *(($14 + [144]))
	goto $label$38 
	
.LABEL $label$39
	$7 = $0
	
.LABEL $label$38
	*($6) = $0
	CALL $83($7)
	
.LABEL $label$37
	*([0] + [4]) = ($14 + [192])
	return (unreachable)
	
.LABEL $label$25
	CALL $84($14)
}

void .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([1360])
	CALL prints_l($2, $3)
	CALL prints([1376])
	CALL $57($1, [0])
	*([0] + [4]) = $10
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([1392])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $82([96])
	$4 = CALL $44($6)
	*($6 + [80]) = $0
	CALL $45(($8 + [32]), $4)
	*($6 + [84]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [84])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $46(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $83($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN12egtdividends11startmondivEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1328]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = *(($0 + [48]))
	$9 = *(($0 + [52]))
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$5 }
	$4 = ($9 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$6:
	if ( ((int_64)(uint_64)*(*($4) + [8]) >> (uint_64)(int_64)8) == (int_64)$6) ){ goto $label$5 }
	$9 = $4
	$1 = ($4 + [-24])
	$4 = $1
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$1 = ($0 + [24])
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$8 }
	$4 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [232]) == (int_32)$1), [160])
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	$9 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $50($1, $9)
	CALL eosio_assert(((int_32)*($4 + [232]) == (int_32)$1), [160])
	
.LABEL $label$7
	*((($10 + [32]) + [8])) = *(($4 + [200]))
	*($10 + [32]) = *($4 + [192])
	*((($10 + [16]) + [8])) = *(($4 + [24]))
	*($10 + [16]) = *($4 + [16])
	*($10 + [8]) = $0
	*($10 + [4]) = ($10 + [32])
	*($10) = ($10 + [16])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [464])
	CALL $55($1, $4, $10)
	*([0] + [4]) = ($10 + [48])
}

void .FUNC _ZN12egtdividends12allocweekdivEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [320])
	*([0] + [4]) = $13
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1328]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($7)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($10)
	$7 = [0]
	*(($13 + [56])) = [0]
	*($13 + [40]) = (int_64)-1
	*($13 + [48]) = (int_64)0
	$9 = *($0)
	*($13 + [24]) = $9
	*($13 + [32]) = $9
	$12 = [0]
	$2 = CALL db_find_i64($9, $9, (int_64)-6029028889714491392, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$12 = CALL $35(($13 + [24]), $2)
	CALL eosio_assert(((int_32)*($12 + [80]) == (int_32)($13 + [24])), [160])
	
.LABEL $label$5
	$3 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($3, [224])
	$8 = *($0 + [16])
	CALL eosio_assert([1], [256])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	
.LOOP $label$7:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert($2, [320])
	CALL eosio_assert(((int_64)*(($12 + [16])) == (int_64)$8), [352])
	CALL eosio_assert(((int_64)*($12 + [8]) != (int_64)0), [1152])
	$9 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = *(($0 + [48]))
	$6 = *(($0 + [52]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$10 }
	$7 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$11:
	if ( ((int_64)(uint_64)*(*($7) + [8]) >> (uint_64)(int_64)8) == (int_64)$9) ){ goto $label$10 }
	$6 = $7
	$2 = ($7 + [-24])
	$7 = $2
	if ( ((int_32)($2 + $5) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$5 = ($0 + [24])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$13 }
	$2 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [232]) == (int_32)$5), [160])
	goto $label$12 
	
.LABEL $label$13
	$2 = [0]
	$7 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $50($5, $7)
	CALL eosio_assert(((int_32)*($2 + [232]) == (int_32)$5), [160])
	
.LABEL $label$12
	if ( ((int_64)*($2 + [208]) == (int_64)*($12 + [72])) ){ goto $label$14 }
	$9 = *(($12 + [8]))
	$8 = *($2 + [80])
	$11 = *($2 + [144])
	$10 = *(($0 + [8]))
	*($13 + [16]) = $10
	$9 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 $9) / (float_64)(CASTING float_64)(int_64 $8)) * (float_64)((float_64)((float_64)(CASTING float_64)(int_64 $11) * (float_64)(float_64)0.1) + (float_64)((float_64)(CASTING float_64)(int_64 *($2 + [48])) * (float_64)(float_64)0.03))))
	*($13 + [8]) = $9
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [256])
	$9 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$6 = [0]
	
.LABEL $label$15
	CALL eosio_assert($6, [320])
	CALL prints([1344])
	CALL $56(($13 + [8]))
	CALL eosio_assert($3, [464])
	CALL eosio_assert(((int_32)*($12 + [80]) == (int_32)($13 + [24])), [624])
	CALL eosio_assert(((int_64)*($13 + [24]) == (int_64)CALL $fimport$2()), [672])
	*($12 + [72]) = *(($2 + [208]))
	$9 = *($12)
	$7 = ($13 + [16])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($12 + [32]))), [944])
	$8 = ((int_64)*($12 + [24]) + (int_64)*($13 + [8]))
	*($12 + [24]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($12 + [24]) < (int_64)4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$9 == (int_64)*($12)), [736])
	*($13 + [312]) = (($13 + [64]) + [76])
	*($13 + [308]) = ($13 + [64])
	*($13 + [304]) = ($13 + [64])
	CALL $43(($13 + [304]), $12)
	CALL db_update_i64(*($12 + [84]), (int_64)0, ($13 + [64]), [76])
	$6 = ($13 + [40])
	if ( (uint_64)($9 <= *($6)) ){ goto $label$20 }
	*($6) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($2 + [232]) == (int_32)$5), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	$9 = *($2 + [8])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($2 + [24]))), [1216])
	$8 = (int_64)
	*($2 + [16]) = $8(*($2 + [16]) - *($13 + [8])))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($2 + [16]) < (int_64)4611686018427387904), [1296])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($2 + [8]) >> (uint_64)(int_64)8)), [736])
	*($13 + [312]) = (($13 + [64]) + [228])
	*($13 + [308]) = ($13 + [64])
	*($13 + [304]) = ($13 + [64])
	CALL $51(($13 + [304]), $2)
	CALL db_update_i64(*($2 + [236]), (int_64)0, ($13 + [64]), [228])
	$7 = ($0 + [40])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$14 }
	*($7) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$14
	$6 = *($13 + [48])
	if ( ($6 == 0) ){ goto $label$21 }
	$12 = ($13 + [52])
	$7 = *($12)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$23 }
	
.LOOP $label$24:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$25 }
	CALL $83($2)
	
.LABEL $label$25
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$24 }
	$7 = *(($13 + [48]))
	goto $label$22 
	
.LABEL $label$23
	$7 = $6
	
.LABEL $label$22
	*($12) = $6
	CALL $83($7)
	
.LABEL $label$21
	*([0] + [4]) = ($13 + [320])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [232]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [672])
	$5 = *($2 + [8])
	$7 = *($2)
	*($1 + [64]) = *($7)
	*(($1 + [76])) = *(($7 + [12]))
	*(($1 + [72])) = *(($7 + [8]))
	*(($1 + [68])) = *(($7 + [4]))
	$6 = *($1 + [8])
	*($1 + [216]) = ((int_64)*($1 + [216]) + (int_64)1)
	$2 = *($2 + [4])
	*($1 + [176]) = *($2)
	*(($1 + [184])) = *(($2 + [8]))
	$4 = *($5 + [8])
	CALL eosio_assert([1], [256])
	$3 = (uint_64)$6 >> (uint_64)(int_64)8)
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [320])
	*(($1 + [200])) = $4
	*($1 + [192]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [736])
	$7 = $9
	$2 = ($7 + [-240])
	*([0] + [4]) = $2
	*($8 + [4]) = $2
	*($8) = $2
	*($8 + [8]) = ($7 + [-12])
	CALL $51($8, $1)
	CALL db_update_i64(*($1 + [236]), (int_64)0, $2, [228])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [256])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [320])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [832])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [832])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [832])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC _ZN12egtdividends12resetbalanceEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [144])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$4 = *($2 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)*($0 + [8])), [2000])
	$3 = [0]
	$5 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1088])
	*((($7 + [8]) + [32])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$4 = *($0)
	*($7 + [8]) = $4
	*($7 + [16]) = $4
	$6 = CALL db_find_i64($4, $4, (int_64)-6029028889714491392, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $35(($7 + [8]), $6)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)($7 + [8])), [160])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)($7 + [8])), [624])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$2()), [672])
	*(($3 + [36])) = *(($2 + [12]))
	*(($3 + [32])) = *(($2 + [8]))
	*(($3 + [28])) = *(($2 + [4]))
	*($3 + [24]) = *($2)
	$4 = *($3)
	CALL eosio_assert([1], [736])
	*($7 + [136]) = (($7 + [48]) + [76])
	*($7 + [132]) = ($7 + [48])
	*($7 + [128]) = ($7 + [48])
	CALL $43(($7 + [128]), $3)
	CALL db_update_i64(*($3 + [84]), (int_64)0, ($7 + [48]), [76])
	$6 = ($7 + [24])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$7 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$2 = *($7 + [32])
	if ( ($2 == 0) ){ goto $label$8 }
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL $83($3)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$11 }
	$6 = *(($7 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$6 = $2
	
.LABEL $label$9
	*($5) = $2
	CALL $83($6)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [144])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [400])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	CALL $66(($8 + [80]), $6, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	*(($1 = (($8 + [224]) + [8]))) = *((($8 + [80]) + [8]))
	*(($6 = (($8 + [208]) + [8]))) = *(($8 + [104]))
	*($8 + [224]) = *($8 + [80])
	*($8 + [208]) = *($8 + [96])
	*(($3 = (($8 + [192]) + [8]))) = *(($8 + [120]))
	*($8 + [192]) = *($8 + [112])
	*(($4 = (($8 + [176]) + [8]))) = *(($8 + [136]))
	*($8 + [176]) = *($8 + [128])
	*(($5 = (($8 + [160]) + [8]))) = *(($8 + [152]))
	*($8 + [160]) = *($8 + [144])
	*((($8 + [304]) + [8])) = *($5)
	*((($8 + [288]) + [8])) = *($4)
	*($8 + [304]) = *($8 + [160])
	*($8 + [288]) = *($8 + [176])
	*((($8 + [272]) + [8])) = *($3)
	*($8 + [272]) = *($8 + [192])
	*((($8 + [256]) + [8])) = *($6)
	*($8 + [256]) = *($8 + [208])
	*((($8 + [240]) + [8])) = *($1)
	*($8 + [240]) = *($8 + [224])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	*(($6 = (($8 + [384]) + [8]))) = *((($8 + [240]) + [8]))
	*(($2 = (($8 + [368]) + [8]))) = *((($8 + [256]) + [8]))
	*($8 + [384]) = *($8 + [240])
	*($8 + [368]) = *($8 + [256])
	*(($0 = (($8 + [352]) + [8]))) = *((($8 + [272]) + [8]))
	*($8 + [352]) = *($8 + [272])
	*(($3 = (($8 + [336]) + [8]))) = *((($8 + [288]) + [8]))
	*($8 + [336]) = *($8 + [288])
	*(($4 = (($8 + [320]) + [8]))) = *((($8 + [304]) + [8]))
	*($8 + [320]) = *($8 + [304])
	*((($8 + [64]) + [8])) = *($6)
	*($8 + [64]) = *($8 + [384])
	*((($8 + [48]) + [8])) = *($2)
	*($8 + [48]) = *($8 + [368])
	*((($8 + [32]) + [8])) = *($0)
	*($8 + [32]) = *($8 + [352])
	*((($8 + [16]) + [8])) = *($3)
	*($8 + [16]) = *($8 + [336])
	*(($8 + [8])) = *($4)
	*($8) = *($8 + [320])
	CALL void $1((int_32 ($8 + [64])), (int_32 ($8 + [48])), (int_32 ($8 + [32])), (int_32 ($8 + [16])), (int_32 $8), (int_32 $7))
	*([0] + [4]) = ($8 + [400])
	return [1]
}

void .FUNC _ZN12egtdividends4initEN5eosio5assetES1_S1_S1_S1_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [256])
	*([0] + [4]) = $14
	CALL require_auth(*($0))
	$9 = [0]
	$12 = [0]
	$11 = *($1 + [8])
	if ( ((int_64)$11 != (int_64)*($0 + [8])) ){ goto $label$1 }
	$12 = [0]
	if ( ((int_64)*($2 + [8]) != (int_64)$11) ){ goto $label$1 }
	$12 = [0]
	if ( ((int_64)*($3 + [8]) != (int_64)$11) ){ goto $label$1 }
	$12 = ((int_64)*($4 + [8]) == (int_64)$11)
	
.LABEL $label$1
	CALL eosio_assert($12, [2000])
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$9 = [0]
	$12 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$3 }
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$11 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	$12 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$6 }
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$11 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	$12 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$9 }
	if ( ((uint_64)((int_64)*($4) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$11 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$9 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$13 }
	goto $label$2 
	
.LABEL $label$12
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [1088])
	$10 = CALL current_time()
	$11 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	$6 = ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000)) / (uint_32)[86400])
	$7 = *(($0 + [48]))
	$13 = *(($0 + [52]))
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$16 }
	$12 = ($13 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$17:
	if ( ((int_64)(uint_64)*(*($12) + [8]) >> (uint_64)(int_64)8) == (int_64)$11) ){ goto $label$16 }
	$13 = $12
	$9 = ($12 + [-24])
	$12 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	$9 = ($0 + [24])
	if ( ((int_32)$13 == (int_32)$7) ){ goto $label$19 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [232]) == (int_32)$9), [160])
	goto $label$18 
	
.LABEL $label$19
	$12 = [0]
	$13 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $11)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$18 }
	$12 = CALL $50($9, $13)
	CALL eosio_assert(((int_32)*($12 + [232]) == (int_32)$9), [160])
	
.LABEL $label$18
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($12 + [232]) == (int_32)$9), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	$11 = *($12 + [8])
	$9 = ($1 + [8])
	*($12 + [8]) = *($9)
	*($12) = *($1)
	*(($12 + [20])) = *(($1 + [4]))
	*(($12 + [28])) = *(($1 + [12]))
	*($12 + [16]) = *($1)
	*(($12 + [24])) = *($9)
	*(($12 + [40])) = *($9)
	*($12 + [32]) = *($1)
	*(($12 + [56])) = *($9)
	*($12 + [48]) = *($1)
	*(($12 + [72])) = *($9)
	*($12 + [64]) = *($1)
	*(($12 + [136])) = *(($2 + [8]))
	*($12 + [128]) = *($2)
	*(($12 + [152])) = *(($3 + [8]))
	*($12 + [144]) = *($3)
	*(($12 + [184])) = *(($4 + [8]))
	*($12 + [176]) = *($4)
	*(($12 + [200])) = *(($5 + [8]))
	*($12 + [192]) = *($5)
	*($12 + [104]) = $6
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$11) == (int_64)(uint_64)*($12 + [8]) >> (uint_64)(int_64)8)), [736])
	*($14 + [248]) = ($14 + [228])
	*($14 + [244]) = $14
	*($14 + [240]) = $14
	CALL $51(($14 + [240]), $12)
	CALL db_update_i64(*($12 + [236]), (int_64)0, $14, [228])
	$12 = ($0 + [40])
	if ( (uint_64)($11 <= *($12)) ){ goto $label$20 }
	*($12) = ((int_64)$11 + (int_64)1)
	
.LABEL $label$20
	*([0] + [4]) = ($14 + [256])
}

void .FUNC _ZN12egtdividends6pledgeEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [336])
	*([0] + [4]) = $13
	*($13 + [88]) = $1
	CALL require_auth($1)
	$8 = *($2 + [8])
	CALL eosio_assert(((int_64)$8 == (int_64)*($0 + [16])), [1056])
	$3 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1088])
	$11 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [512]
	$9 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$11 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$3 = ($3 + [165])
	goto $label$9 
	
.LABEL $label$11
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$7
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$6 }
	*($13 + [80]) = $9
	*($13 + [72]) = $11
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [144]
	$9 = (int_64)0
	
.LOOP $label$12:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$3 = ($3 + [165])
	goto $label$14 
	
.LABEL $label$15
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$12 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [1920]
	$11 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$16 }
	*(($13 + [44])) = *(($2 + [12]))
	*(($13 + [40])) = *(($2 + [8]))
	*((($13 + [24]) + [12])) = *(($2 + [4]))
	*($13 + [24]) = $1
	*($13 + [32]) = *($2)
	$6 = CALL $48(($13 + [96]), ($13 + [72]), $9, $11, ($13 + [24]))
	CALL $39(($13 + [8]), $6)
	$3 = *($13 + [8])
	CALL send_inline($3, (*($13 + [12]) - $3))
	$3 = *($13 + [8])
	if ( ($3 == 0) ){ goto $label$22 }
	*($13 + [12]) = $3
	CALL $83($3)
	
.LABEL $label$22
	$3 = *($6 + [28])
	if ( ($3 == 0) ){ goto $label$23 }
	*(($6 + [32])) = $3
	CALL $83($3)
	
.LABEL $label$23
	$3 = *($6 + [16])
	if ( ($3 == 0) ){ goto $label$24 }
	*(($6 + [20])) = $3
	CALL $83($3)
	
.LABEL $label$24
	*($13 + [68]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($13 + [64]) = ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[86400])
	*(($3 = ($13 + [56]))) = [0]
	$8 = *($0)
	*($13 + [24]) = $8
	*($13 + [40]) = (int_64)-1
	*($13 + [48]) = (int_64)0
	*($13 + [32]) = $8
	$6 = CALL db_find_i64($8, $8, (int_64)-6029028889714491392, *($13 + [88]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$32 }
	$6 = CALL $35(($13 + [24]), $6)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)($13 + [24])), [160])
	CALL eosio_assert([1], [464])
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)($13 + [24])), [624])
	CALL eosio_assert(((int_64)*($13 + [24]) == (int_64)CALL $fimport$2()), [672])
	$8 = *($6)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($6 + [16]))), [944])
	$10 = ((int_64)*($6 + [8]) + (int_64)*($2))
	*($6 + [8]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($6 + [8]) < (int_64)4611686018427387904), [1024])
	*($6 + [40]) = *($13 + [68])
	CALL eosio_assert(((int_64)$8 == (int_64)*($6)), [736])
	*($13 + [80]) = (($13 + [96]) + [76])
	*($13 + [76]) = ($13 + [96])
	*($13 + [72]) = ($13 + [96])
	CALL $43(($13 + [72]), $6)
	CALL db_update_i64(*($6 + [84]), (int_64)0, ($13 + [96]), [76])
	$6 = (($13 + [24]) + [16])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$33 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$33
	$8 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = *(($0 + [48]))
	$12 = *(($0 + [52]))
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$34 }
	$6 = ($12 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$35:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$8) ){ goto $label$34 }
	$12 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$35 }
	
.LABEL $label$34
	$3 = ($0 + [24])
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$31 }
	$6 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [232]) == (int_32)$3), [160])
	goto $label$30 
	
.LABEL $label$32
	$8 = *($13 + [88])
	*($13 + [100]) = $2
	*($13 + [104]) = $0
	*($13 + [96]) = ($13 + [88])
	*($13 + [108]) = ($13 + [68])
	*($13 + [8]) = $8
	CALL eosio_assert(((int_64)*($13 + [24]) == (int_64)CALL $fimport$2()), [1936])
	*($13 + [76]) = ($13 + [96])
	*($13 + [72]) = ($13 + [24])
	*($13 + [80]) = ($13 + [8])
	$6 = CALL $82([96])
	CALL $44($6)
	*($6 + [80]) = ($13 + [24])
	CALL $63(($13 + [72]), $6)
	*($13 + [328]) = $6
	$8 = *($6)
	*($13 + [72]) = $8
	$5 = *($6 + [84])
	*($13 + [324]) = $5
	$4 = ($13 + [52])
	$12 = *($4)
	if ( ((uint_32)$12 >= (uint_32)*($3)) ){ goto $label$29 }
	*($12 + [8]) = $8
	*($12 + [16]) = $5
	*($13 + [328]) = [0]
	*($12) = $6
	*($4) = ($12 + [24])
	goto $label$28 
	
.LABEL $label$31
	$6 = [0]
	$12 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $8)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$30 }
	$6 = CALL $50($3, $12)
	CALL eosio_assert(((int_32)*($6 + [232]) == (int_32)$3), [160])
	
.LABEL $label$30
	if ( ((int_32)*($6 + [104]) != (int_32)*($13 + [64])) ){ goto $label$36 }
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($6 + [232]) == (int_32)$3), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	$8 = *($6 + [8])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($6 + [88]))), [944])
	$10 = ((int_64)*($6 + [80]) + (int_64)*($2))
	*($6 + [80]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($6 + [80]) < (int_64)4611686018427387904), [1024])
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [736])
	*($13 + [80]) = (($13 + [96]) + [228])
	*($13 + [76]) = ($13 + [96])
	*($13 + [72]) = ($13 + [96])
	CALL $51(($13 + [72]), $6)
	CALL db_update_i64(*($6 + [236]), (int_64)0, ($13 + [96]), [228])
	$6 = ($0 + [40])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$27 }
	*($6) = ((int_64)$8 + (int_64)1)
	$0 = *($13 + [48])
	if ( $0 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$36
	*((($13 + [72]) + [8])) = *(($6 + [120]))
	*($13 + [72]) = *($6 + [112])
	*((($13 + [8]) + [8])) = *(($6 + [24]))
	*($13 + [8]) = *($6 + [16])
	*($13 + [104]) = $0
	*($13 + [112]) = $2
	*($13 + [100]) = ($13 + [72])
	*($13 + [96]) = ($13 + [8])
	*($13 + [108]) = ($13 + [64])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [464])
	CALL $65($3, $6, ($13 + [96]))
	$0 = *($13 + [48])
	if ( $0 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$29
	CALL $46(($13 + [48]), ($13 + [328]), ($13 + [72]), ($13 + [324]))
	
.LABEL $label$28
	$6 = *($13 + [328])
	*($13 + [328]) = [0]
	if ( ($6 == 0) ){ goto $label$37 }
	CALL $83($6)
	
.LABEL $label$37
	$8 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = *(($0 + [48]))
	$12 = *(($0 + [52]))
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$38 }
	$6 = ($12 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$39:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$8) ){ goto $label$38 }
	$12 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$39 }
	
.LABEL $label$38
	$3 = ($0 + [24])
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$41 }
	$6 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [232]) == (int_32)$3), [160])
	goto $label$40 
	
.LABEL $label$41
	$6 = [0]
	$12 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $8)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$40 }
	$6 = CALL $50($3, $12)
	CALL eosio_assert(((int_32)*($6 + [232]) == (int_32)$3), [160])
	
.LABEL $label$40
	if ( ((int_32)*($6 + [104]) != (int_32)*($13 + [64])) ){ goto $label$42 }
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($6 + [232]) == (int_32)$3), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	$8 = *($6 + [8])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($6 + [88]))), [944])
	$10 = ((int_64)*($6 + [80]) + (int_64)*($2))
	*($6 + [80]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($6 + [80]) < (int_64)4611686018427387904), [1024])
	*($6 + [96]) = ((int_64)*($6 + [96]) + (int_64)1)
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8)), [736])
	*($13 + [80]) = (($13 + [96]) + [228])
	*($13 + [76]) = ($13 + [96])
	*($13 + [72]) = ($13 + [96])
	CALL $51(($13 + [72]), $6)
	CALL db_update_i64(*($6 + [236]), (int_64)0, ($13 + [96]), [228])
	$6 = ($0 + [40])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$27 }
	*($6) = ((int_64)$8 + (int_64)1)
	$0 = *($13 + [48])
	if ( $0 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$42
	*((($13 + [72]) + [8])) = *(($6 + [120]))
	*($13 + [72]) = *($6 + [112])
	*((($13 + [8]) + [8])) = *(($6 + [24]))
	*($13 + [8]) = *($6 + [16])
	*($13 + [104]) = $0
	*($13 + [112]) = $2
	*($13 + [100]) = ($13 + [72])
	*($13 + [96]) = ($13 + [8])
	*($13 + [108]) = ($13 + [64])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [464])
	CALL $64($3, $6, ($13 + [96]))
	
.LABEL $label$27
	$0 = *($13 + [48])
	if ( ($0 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$2 = ($13 + [52])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$44 }
	
.LOOP $label$45:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$46 }
	CALL $83($3)
	
.LABEL $label$46
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$45 }
	$6 = *(($13 + [48]))
	goto $label$43 
	
.LABEL $label$44
	$6 = $0
	
.LABEL $label$43
	*($2) = $0
	CALL $83($6)
	
.LABEL $label$25
	*([0] + [4]) = ($13 + [336])
}

void .FUNC _ZN12egtdividends10initpremonEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [256])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	$5 = *($1 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)*($0 + [8])), [2000])
	$4 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [1088])
	$5 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)
	$2 = *(($0 + [48]))
	$7 = *(($0 + [52]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$7:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$5) ){ goto $label$6 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = ($0 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$9 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [232]) == (int_32)$4), [160])
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $50($4, $7)
	CALL eosio_assert(((int_32)*($6 + [232]) == (int_32)$4), [160])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($6 + [232]) == (int_32)$4), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	*(($6 + [188])) = *(($1 + [12]))
	*(($6 + [184])) = *(($1 + [8]))
	*(($6 + [180])) = *(($1 + [4]))
	*($6 + [176]) = *($1)
	$5 = *($6 + [8])
	CALL eosio_assert([1], [736])
	*($8 + [248]) = ($8 + [228])
	*($8 + [244]) = $8
	*($8 + [240]) = $8
	CALL $51(($8 + [240]), $6)
	CALL db_update_i64(*($6 + [236]), (int_64)0, $8, [228])
	$6 = ($0 + [40])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($5) <= *($6)) ){ goto $label$10 }
	*($6) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$10
	*([0] + [4]) = ($8 + [256])
}

void .FUNC _ZN12egtdividends12startweekdivEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1328]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($4)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = *(($0 + [48]))
	$9 = *(($0 + [52]))
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$5 }
	$4 = ($9 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$6:
	if ( ((int_64)(uint_64)*(*($4) + [8]) >> (uint_64)(int_64)8) == (int_64)$6) ){ goto $label$5 }
	$9 = $4
	$1 = ($4 + [-24])
	$4 = $1
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$1 = ($0 + [24])
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$8 }
	$4 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [232]) == (int_32)$1), [160])
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	$9 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $6)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $50($1, $9)
	CALL eosio_assert(((int_32)*($4 + [232]) == (int_32)$1), [160])
	
.LABEL $label$7
	*((($10 + [32]) + [8])) = *(($4 + [168]))
	*($10 + [32]) = *($4 + [160])
	*((($10 + [16]) + [8])) = *(($4 + [24]))
	*($10 + [16]) = *($4 + [16])
	*($10 + [8]) = $0
	*($10 + [4]) = ($10 + [32])
	*($10) = ($10 + [16])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [464])
	CALL $58($1, $4, $10)
	*([0] + [4]) = ($10 + [48])
}

void .FUNC _ZN12egtdividends6signinEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	float_64 $9
	float_64 $10
	float_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	$22 = (*([0] + [4]) - [432])
	*([0] + [4]) = $22
	$18 = (int_64)0
	$19 = (int_64)59
	$12 = [1408]
	$13 = (int_64)0
	
.LOOP $label$1:
	$17 = (int_64)0
	if ( ((uint_64)$18 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($12)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$2
	$12 = ($12 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$13 = ((int_64)$17 | (int_64)$13)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($13)
	$12 = ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[86400])
	*($22 + [172]) = $12
	CALL prints([1424])
	CALL printui((CASTING uint_64)(uint_32 $12))
	$12 = [0]
	*(($22 + [160])) = [0]
	*($22 + [144]) = (int_64)-1
	*($22 + [152]) = (int_64)0
	$18 = *($0)
	*($22 + [128]) = $18
	*($22 + [136]) = $18
	$14 = [0]
	$2 = CALL db_find_i64($18, $18, (int_64)-6029028889714491392, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$14 = CALL $35(($22 + [128]), $2)
	CALL eosio_assert(((int_32)*($14 + [80]) == (int_32)($22 + [128])), [160])
	
.LABEL $label$5
	$3 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($3, [224])
	$19 = *($0 + [16])
	CALL eosio_assert([1], [256])
	$4 = ($14 + [8])
	$18 = (uint_64)$19 >> (uint_64)(int_64)8)
	
.LOOP $label$7:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert($2, [320])
	CALL eosio_assert(((int_64)*(($14 + [16])) == (int_64)$19), [352])
	CALL eosio_assert(((int_64)*(($14 + [8])) != (int_64)0), [1152])
	CALL eosio_assert(((int_32)*($14 + [68]) != (int_32)*($22 + [172])), [1456])
	CALL prints([1472])
	$18 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$7 = *(($0 + [48]))
	$15 = *(($0 + [52]))
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$10 }
	$12 = ($15 + [-24])
	$16 = ([0] - $7)
	
.LOOP $label$11:
	if ( ((int_64)(uint_64)*(*($12) + [8]) >> (uint_64)(int_64)8) == (int_64)$18) ){ goto $label$10 }
	$15 = $12
	$2 = ($12 + [-24])
	$12 = $2
	if ( ((int_32)($2 + $16) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$5 = ($0 + [24])
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$13 }
	$15 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [232]) == (int_32)$5), [160])
	goto $label$12 
	
.LABEL $label$13
	$15 = [0]
	$12 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $18)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$12 }
	$15 = CALL $50($5, $12)
	CALL eosio_assert(((int_32)*($15 + [232]) == (int_32)$5), [160])
	
.LABEL $label$12
	*(($22 + [120])) = *(($15 + [136]))
	*($22 + [112]) = *($15 + [128])
	CALL prints([1520])
	CALL printi(*($22 + [112]))
	$18 = (uint_64)*(($0 + [16])) >> (uint_64)(int_64)8)
	$6 = *(($0 + [88]))
	$16 = *(($0 + [92]))
	if ( ((int_32)$16 == (int_32)$6) ){ goto $label$14 }
	$12 = ($16 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$15:
	if ( ((int_64)(uint_64)*(*($12) + [8]) >> (uint_64)(int_64)8) == (int_64)$18) ){ goto $label$14 }
	$16 = $12
	$2 = ($12 + [-24])
	$12 = $2
	if ( ((int_32)($2 + $7) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	$12 = ($0 + [64])
	if ( ((int_32)$16 == (int_32)$6) ){ goto $label$17 }
	$16 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)$12), [160])
	goto $label$16 
	
.LABEL $label$17
	$16 = [0]
	$2 = CALL db_find_i64(*(($0 + [64])), *(($0 + [72])), (int_64)3607749779137757184, $18)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$16 }
	$16 = CALL $59($12, $2)
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)$12), [160])
	
.LABEL $label$16
	$19 = *(($0 + [16]))
	CALL eosio_assert([1], [256])
	$18 = (uint_64)$19 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$2 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$2 = [0]
	
.LABEL $label$18
	CALL eosio_assert($2, [320])
	*($22 + [104]) = $19
	CALL eosio_assert(((int_64)*($16 + [8]) == (int_64)$19), [1216])
	$18 = (int_64)
	*($22 + [96]) = $18((int_64)10000000000000 - *($16)))
	CALL eosio_assert(((int_64)$18 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)$18 < (int_64)4611686018427387904), [1296])
	CALL prints([1568])
	CALL $56($4)
	CALL prints([1600])
	CALL $56(($22 + [96]))
	CALL prints([1616])
	CALL $56(($15 + [80]))
	CALL prints([1632])
	CALL $56(($15 + [32]))
	CALL prints([1664])
	CALL $56(($22 + [112]))
	$18 = *($14 + [8])
	CALL prints([1680])
	$9 = (CASTING float_64)(int_64 $18)
	CALL printdf($9)
	$18 = *($15 + [32])
	$19 = *($22 + [112])
	$17 = *($22 + [96])
	CALL prints([1712])
	$9 = ((float_64)$9 / (float_64)(CASTING float_64)(int_64 $17))
	CALL printdf($9)
	CALL prints([1728])
	$10 = ((float_64)(CASTING float_64)(int_64 $18) * (float_64)(float_64)0.01)
	CALL printdf($10)
	CALL prints([1744])
	$11 = ((float_64)(CASTING float_64)(int_64 $19) * (float_64)(float_64)0.05)
	CALL printdf($11)
	*($22 + [88]) = *(($0 + [8]))
	$18 = (Rounds 0)(((float_64)$9 * (float_64)((float_64)$10 + (float_64)$11)))
	*($22 + [80]) = $18
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [256])
	$18 = (uint_64)*($22 + [88]) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$2 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$2 = [0]
	
.LABEL $label$23
	CALL eosio_assert($2, [320])
	CALL prints([1760])
	CALL printi(*($22 + [80]))
	$19 = *(($0 + [8]))
	CALL eosio_assert([1], [256])
	$18 = (uint_64)$19 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	
.LOOP $label$32:
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$18) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$32 }
	
.LABEL $label$31
	$2 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$2 = [0]
	
.LABEL $label$28
	CALL eosio_assert($2, [320])
	CALL eosio_assert(((int_64)*(($22 + [88])) == (int_64)$19), [352])
	CALL eosio_assert(((int_64)*($22 + [80]) != (int_64)0), [1776])
	CALL eosio_assert($3, [464])
	CALL eosio_assert(((int_32)*($14 + [80]) == (int_32)($22 + [128])), [624])
	CALL eosio_assert(((int_64)*($22 + [128]) == (int_64)CALL $fimport$2()), [672])
	*($14 + [68]) = *($22 + [172])
	$18 = *($14)
	CALL eosio_assert([1], [736])
	*($22 + [32]) = (($22 + [176]) + [76])
	*($22 + [28]) = ($22 + [176])
	*($22 + [24]) = ($22 + [176])
	CALL $43(($22 + [24]), $14)
	CALL db_update_i64(*($14 + [84]), (int_64)0, ($22 + [176]), [76])
	$12 = ($22 + [144])
	if ( (uint_64)($18 <= *($12)) ){ goto $label$33 }
	*($12) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$33
	CALL prints([1808])
	CALL printui($1)
	CALL prints([1840])
	CALL $56(($22 + [80]))
	if ( ((int_32)*($15 + [104]) != (int_32)*($22 + [172])) ){ goto $label$35 }
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($15 + [232]) == (int_32)$5), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	$18 = *($15 + [8])
	CALL eosio_assert(((int_64)*(($22 + [88])) == (int_64)*(($15 + [24]))), [1216])
	$19 = (int_64)
	*($15 + [16]) = $19(*($15 + [16]) - *($22 + [80])))
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($15 + [16]) < (int_64)4611686018427387904), [1296])
	$18 = (uint_64)$18 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$18) == (int_64)(uint_64)*($15 + [8]) >> (uint_64)(int_64)8)), [736])
	*($22 + [32]) = (($22 + [176]) + [228])
	*($22 + [28]) = ($22 + [176])
	*($22 + [24]) = ($22 + [176])
	CALL $51(($22 + [24]), $15)
	CALL db_update_i64(*($15 + [236]), (int_64)0, ($22 + [176]), [228])
	$12 = ($0 + [40])
	if ( (uint_64)($18 <= *($12)) ){ goto $label$34 }
	*($12) = ((int_64)$18 + (int_64)1)
	goto $label$34 
	
.LABEL $label$35
	*((($22 + [24]) + [8])) = *(($15 + [120]))
	*($22 + [24]) = *($15 + [112])
	*((($22 + [64]) + [8])) = *(($15 + [24]))
	*($22 + [64]) = *($15 + [16])
	*($22 + [184]) = $0
	*($22 + [180]) = ($22 + [24])
	*($22 + [176]) = ($22 + [64])
	*($22 + [188]) = ($22 + [172])
	*($22 + [192]) = ($22 + [80])
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [464])
	CALL $60($5, $15, ($22 + [176]))
	
.LABEL $label$34
	$8 = *($0)
	$18 = (int_64)0
	$17 = (int_64)59
	$12 = [512]
	$13 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$18 > (uint_64)(int_64)5) ){ goto $label$41 }
	$2 = *($12)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$2 = ($2 + [165])
	goto $label$39 
	
.LABEL $label$41
	$19 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$37
	$12 = ($12 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$13 = ((int_64)$19 | (int_64)$13)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$36 }
	$18 = (int_64)0
	$17 = (int_64)59
	$12 = [128]
	$20 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$18 > (uint_64)(int_64)10) ){ goto $label$47 }
	$2 = *($12)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$2 = ($2 + [165])
	goto $label$45 
	
.LABEL $label$47
	$19 = (int_64)0
	if ( ((int_64)$18 == (int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$43
	$12 = ($12 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$20 = ((int_64)$19 | (int_64)$20)
	$18 = ((int_64)$18 + (int_64)1)
	if ( ((int_64)$18 != (int_64)13) ){ goto $label$42 }
	$18 = (int_64)0
	$17 = (int_64)59
	$12 = [112]
	$21 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$18 > (uint_64)(int_64)7) ){ goto $label$53 }
	$2 = *($12)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$2 = ($2 + [165])
	goto $label$51 
	
.LABEL $label$53
	$19 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$49
	$12 = ($12 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$21 = ((int_64)$19 | (int_64)$21)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$48 }
	*(($22 + [16])) = [0]
	*($22 + [8]) = (int_64)0
	$12 = CALL strlen([1856])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$54 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$57 }
	*($22 + [8]) = ($12 << [1])
	$2 = (($22 + [8]) | [1])
	if ( $12 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$15 = (($12 + [16]) & [-16])
	$2 = CALL $82($15)
	*($22 + [8]) = ($15 | [1])
	*($22 + [16]) = $2
	*($22 + [12]) = $12
	
.LABEL $label$56
	CALL memcpy($2, [1856], $12)
	
.LABEL $label$55
	*(($2 + $12)) = [0]
	*((($22 + [176]) + [20])) = *($22 + [84])
	*($22 + [184]) = $1
	*((($22 + [176]) + [28])) = *(($22 + [92]))
	*((($22 + [176]) + [24])) = *((($22 + [80]) + [8]))
	*($22 + [176]) = *($0)
	*($22 + [192]) = *($22 + [80])
	$12 = (($22 + [8]) + [8])
	*(($22 + [216])) = *($12)
	*($22 + [208]) = *($22 + [8])
	*($22 + [8]) = [0]
	*($22 + [12]) = [0]
	*($12) = [0]
	*($22 + [24]) = $20
	*($22 + [32]) = $21
	*(($12 = CALL $82([16]))) = $8
	*($12 + [8]) = $13
	*((($22 + [24]) + [32])) = [0]
	$2 = ($12 + [16])
	*((($22 + [24]) + [24])) = $2
	*((($22 + [24]) + [20])) = $2
	*($22 + [40]) = $12
	*($22 + [52]) = [0]
	*((($22 + [24]) + [36])) = [0]
	$12 = *($22 + [208])
	$2 = ( *((($22 + [176]) + [36])) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$12 = ($2 + [32])
	$18 = (CASTING uint_64)(uint_32 $2)
	$2 = (($22 + [24]) + [28])
	
.LOOP $label$58:
	$12 = ($12 + [1])
	$18 = (uint_64)$18 >> (uint_64)(int_64)7
	if ( ((int_64)$18) != (int_64)0) ){ goto $label$58 }
	if ( ($12 == 0) ){ goto $label$60 }
	CALL $37($2, $12)
	$2 = *(($22 + [56]))
	$12 = *(($22 + [52]))
	goto $label$59 
	
.LABEL $label$60
	$2 = [0]
	$12 = [0]
	
.LABEL $label$59
	*($22 + [68]) = $12
	*($22 + [64]) = $12
	*($22 + [72]) = $2
	*($22 + [416]) = ($22 + [64])
	*($22 + [424]) = ($22 + [176])
	CALL $38(($22 + [424]), ($22 + [416]))
	CALL $39(($22 + [64]), ($22 + [24]))
	$12 = *($22 + [64])
	CALL send_inline($12, (*($22 + [68]) - $12))
	$12 = *($22 + [64])
	if ( ($12 == 0) ){ goto $label$61 }
	*($22 + [68]) = $12
	CALL $83($12)
	
.LABEL $label$61
	$12 = *($22 + [52])
	if ( ($12 == 0) ){ goto $label$62 }
	*(($22 + [56])) = $12
	CALL $83($12)
	
.LABEL $label$62
	$12 = *($22 + [40])
	if ( ($12 == 0) ){ goto $label$63 }
	*(($22 + [44])) = $12
	CALL $83($12)
	
.LABEL $label$63
	if ( ((*(($22 + [208])) & [1]) == 0) ){ goto $label$64 }
	CALL $83(*(($22 + [216])))
	
.LABEL $label$64
	if ( ((*($22 + [8]) & [1]) == 0) ){ goto $label$65 }
	CALL $83(*(($22 + [16])))
	
.LABEL $label$65
	$0 = *($22 + [152])
	if ( ($0 == 0) ){ goto $label$66 }
	$15 = ($22 + [156])
	$12 = *($15)
	if ( ((int_32)$12 == (int_32)$0) ){ goto $label$68 }
	
.LOOP $label$69:
	$12 = ($12 + [-24])
	$2 = *($12)
	*($12) = [0]
	if ( ($2 == 0) ){ goto $label$70 }
	CALL $83($2)
	
.LABEL $label$70
	if ( ((int_32)$0 != (int_32)$12) ){ goto $label$69 }
	$12 = *(($22 + [152]))
	goto $label$67 
	
.LABEL $label$68
	$12 = $0
	
.LABEL $label$67
	*($15) = $0
	CALL $83($12)
	
.LABEL $label$66
	*([0] + [4]) = ($22 + [432])
	return (unreachable)
	
.LABEL $label$54
	CALL $84(($22 + [8]))
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [2240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [2288])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2352])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $83($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $83($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [256])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [320])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [832])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [832])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [232]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [672])
	$7 = *($2 + [8])
	$6 = *($2)
	*($1 + [32]) = *($6)
	*(($1 + [44])) = *(($6 + [12]))
	*(($1 + [40])) = *(($6 + [8]))
	*(($1 + [36])) = *(($6 + [4]))
	$5 = *($1 + [8])
	$6 = *($2 + [4])
	*($1 + [128]) = *($6)
	*(($1 + [136])) = *(($6 + [8]))
	$4 = *($7 + [8])
	CALL eosio_assert([1], [256])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [320])
	*(($1 + [120])) = $4
	*($1 + [112]) = (int_64)0
	*($1 + [104]) = *(*($2 + [12]))
	$6 = *($2 + [16])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [88]))), [944])
	$5 = ((int_64)*($1 + [80]) + (int_64)*($6))
	*($1 + [80]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$3 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [736])
	$2 = $9
	$6 = ($2 + [-240])
	*([0] + [4]) = $6
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($2 + [-12])
	CALL $51($8, $1)
	CALL db_update_i64(*($1 + [236]), (int_64)0, $6, [228])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [232]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [672])
	$7 = *($2 + [8])
	$6 = *($2)
	*($1 + [32]) = *($6)
	*(($1 + [44])) = *(($6 + [12]))
	*(($1 + [40])) = *(($6 + [8]))
	*(($1 + [36])) = *(($6 + [4]))
	$5 = *($1 + [8])
	$6 = *($2 + [4])
	*($1 + [128]) = *($6)
	*(($1 + [136])) = *(($6 + [8]))
	$4 = *($7 + [8])
	CALL eosio_assert([1], [256])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [320])
	*(($1 + [120])) = $4
	*($1 + [112]) = (int_64)0
	*($1 + [104]) = *(*($2 + [12]))
	$6 = *($2 + [16])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [88]))), [944])
	$5 = ((int_64)*($1 + [80]) + (int_64)*($6))
	*($1 + [80]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [1024])
	*($1 + [96]) = ((int_64)*($1 + [96]) + (int_64)1)
	CALL eosio_assert(((int_64)$3 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [736])
	$2 = $9
	$6 = ($2 + [-240])
	*([0] + [4]) = $6
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($2 + [-12])
	CALL $51($8, $1)
	CALL db_update_i64(*($1 + [236]), (int_64)0, $6, [228])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [832])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [832])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [832])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [832])
	CALL memcpy(($2 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [832])
	CALL memcpy(($2 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [832])
	CALL memcpy(($2 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [832])
	CALL memcpy(($2 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [832])
	CALL memcpy(($2 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [832])
	CALL memcpy(($2 + [64]), *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [832])
	CALL memcpy(($2 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [256])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [320])
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [256])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [320])
	*(($0 + [40])) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [256])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [320])
	*(($0 + [56])) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [256])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$5 = [0]
	
.LABEL $label$16
	CALL eosio_assert($5, [320])
	*(($0 + [72])) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [256])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$5 = [0]
	
.LABEL $label$21
	CALL eosio_assert($5, [320])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $67(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [256])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [320])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [832])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [832])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [232]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [672])
	$7 = *($2 + [8])
	$6 = *($2)
	*($1 + [32]) = *($6)
	*(($1 + [44])) = *(($6 + [12]))
	*(($1 + [40])) = *(($6 + [8]))
	*(($1 + [36])) = *(($6 + [4]))
	$5 = *($1 + [8])
	$6 = *($2 + [4])
	*($1 + [128]) = *($6)
	*(($1 + [136])) = *(($6 + [8]))
	$4 = *($7 + [8])
	CALL eosio_assert([1], [256])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [320])
	*(($1 + [120])) = $4
	*($1 + [112]) = (int_64)0
	*($1 + [104]) = *(*($2 + [12]))
	$6 = *($2 + [16])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [24]))), [1216])
	$5 = (int_64)
	*($1 + [16]) = $5(*($1 + [16]) - *($6)))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$3 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)), [736])
	$2 = $9
	$6 = ($2 + [-240])
	*([0] + [4]) = $6
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($2 + [-12])
	CALL $51($8, $1)
	CALL db_update_i64(*($1 + [236]), (int_64)0, $6, [228])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$2 = *($0)
	$4 = *($3 + [8])
	$7 = *($3 + [4])
	*($1 + [8]) = *($7)
	*(($1 + [16])) = *(($7 + [8]))
	$5 = *($4 + [8])
	CALL eosio_assert([1], [256])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [320])
	*(($1 + [32])) = $5
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = *(*($3 + [12]))
	$5 = *($4 + [16])
	CALL eosio_assert([1], [256])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [320])
	*(($1 + [56])) = $5
	*($1 + [48]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = (int_64)0
	$8 = $10
	$7 = ($8 + [-80])
	*([0] + [4]) = $7
	*($9 + [4]) = $7
	*($9) = $7
	*($9 + [8]) = ($8 + [-4])
	CALL $43($9, $1)
	$6 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($2 + [8]), (int_64)-6029028889714491392, *(*($0 + [8])), $6, $7, [76])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $82(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $87($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $83($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $83($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $82($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $82($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $87 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $82(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $83($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $84 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $83 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11260])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11152])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10960]
	$1 = (((int_32)$2 * (int_32)[12]) + [10960])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11254]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11256])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11254]) = [1]
	$7 = ($7 << [16])
	*([0] + [11256]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11256])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11256]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11254]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11254]) = [1]
	$3 = ($3 << [16])
	*([0] + [11256]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11256])
	
.LABEL $label$8
	*([0] + [11256]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $88(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $88(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $83(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $83(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $74($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $85($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $82($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $85($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $83($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $84($7)
	return (unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [232]) == (int_32)$0), [2240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [2288])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [8])
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( (uint_64)(((int_64)*(*($8) + [8]) ^ (int_64)$2) <= (int_64)256) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2352])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $83($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $83($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [236]))
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [832])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [832])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [832])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [832])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $73(*($1), ($0 + [32]))
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [272])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1936])
	$4 = CALL $82([248])
	$6 = CALL $52($4)
	*($4 + [232]) = $1
	CALL $77($3, $6)
	*($8 + [264]) = (($8 + [16]) + [228])
	*($8 + [260]) = ($8 + [16])
	*($8 + [256]) = ($8 + [16])
	CALL $51(($8 + [256]), $6)
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($4 + [236]) = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, $5), ($8 + [16]), [228])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	*($8 + [256]) = $4
	$5 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($8 + [16]) = $5)
	$3 = *($4 + [236])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [256]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $54(($1 + [24]), ($8 + [256]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [256])
	*($8 + [256]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $83($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [272])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = *($2 + [8])
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [320])
	*($1 + [8]) = $3
	*($1) = (int_64)0
	$3 = *(($2 + [8]))
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [320])
	*(($1 + [24])) = $3
	*($1 + [16]) = (int_64)0
	$3 = *(($2 + [8]))
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$6 = [0]
	
.LABEL $label$11
	CALL eosio_assert($6, [320])
	*(($1 + [40])) = $3
	*($1 + [32]) = (int_64)0
	$3 = *(($2 + [8]))
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$6 = [0]
	
.LABEL $label$16
	CALL eosio_assert($6, [320])
	*(($1 + [56])) = $3
	*($1 + [48]) = (int_64)0
	$3 = *(($2 + [8]))
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$6 = [0]
	
.LABEL $label$21
	CALL eosio_assert($6, [320])
	*(($1 + [72])) = $3
	*($1 + [64]) = (int_64)0
	$3 = *($2 + [16])
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$6 = [0]
	
.LABEL $label$26
	CALL eosio_assert($6, [320])
	*($1 + [96]) = (int_64)0
	*(($1 + [88])) = $3
	*($1 + [80]) = (int_64)0
	*($1 + [104]) = *(*($0 + [4]))
	$3 = *(($2 + [8]))
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$6 = [0]
	
.LABEL $label$31
	CALL eosio_assert($6, [320])
	*(($1 + [120])) = $3
	*($1 + [112]) = (int_64)0
	$3 = *(($2 + [8]))
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$6 = [0]
	
.LABEL $label$36
	CALL eosio_assert($6, [320])
	*(($1 + [136])) = $3
	*($1 + [128]) = (int_64)0
	$3 = *(($2 + [8]))
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	
.LOOP $label$45:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$42 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$45 }
	
.LABEL $label$44
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$6 = [0]
	
.LABEL $label$41
	CALL eosio_assert($6, [320])
	*(($1 + [152])) = $3
	*($1 + [144]) = (int_64)0
	$3 = *(($2 + [8]))
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	
.LOOP $label$50:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$50 }
	
.LABEL $label$49
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$6 = [0]
	
.LABEL $label$46
	CALL eosio_assert($6, [320])
	*(($1 + [168])) = $3
	*($1 + [160]) = (int_64)0
	$3 = *(($2 + [8]))
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	
.LOOP $label$55:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$55 }
	
.LABEL $label$54
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$6 = [0]
	
.LABEL $label$51
	CALL eosio_assert($6, [320])
	*(($1 + [184])) = $3
	*($1 + [176]) = (int_64)0
	$3 = *(($2 + [8]))
	CALL eosio_assert([1], [256])
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$59 }
	
.LOOP $label$60:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$57 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$60 }
	
.LABEL $label$59
	$2 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$2 = [0]
	
.LABEL $label$56
	CALL eosio_assert($2, [320])
	*(($1 + [200])) = $3
	*($1 + [192]) = (int_64)0
	*($1 + [208]) = (int_64)0
	*($1 + [216]) = (int_64)0
	*($1 + [224]) = (int_64)1
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [2416])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $37($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [832])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $37($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [608])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [608])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $41(CALL $40($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [672])
	$4 = *((*($2) + [8]))
	$3 = *($1)
	CALL eosio_assert([1], [256])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [320])
	*(($1 + [32])) = $4
	*($1 + [24]) = (int_64)0
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [736])
	$6 = $8
	$2 = ($6 + [-80])
	*([0] + [4]) = $2
	*($7 + [4]) = $2
	*($7) = $2
	*($7 + [8]) = ($6 + [-4])
	CALL $43($7, $1)
	CALL db_update_i64(*($1 + [84]), (int_64)0, $2, [76])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $82($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $87($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $83($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $79([2768], $0)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $80($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11168])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC _ZN12egtdividends12cancelunpledEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [320])
	*([0] + [4]) = $8
	CALL require_auth($1)
	$7 = [0]
	*(($8 + [56])) = [0]
	*($8 + [40]) = (int_64)-1
	*($8 + [48]) = (int_64)0
	$6 = *($0)
	*($8 + [24]) = $6
	*($8 + [32]) = $6
	$4 = [0]
	$5 = CALL db_find_i64($6, $6, (int_64)-6029028889714491392, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $35(($8 + [24]), $5)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)($8 + [24])), [160])
	
.LABEL $label$1
	$2 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($2, [224])
	$1 = *($0 + [16])
	CALL eosio_assert([1], [256])
	$3 = ($4 + [48])
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($5, [320])
	CALL eosio_assert(((int_64)*(($4 + [56])) == (int_64)$1), [352])
	CALL eosio_assert(((int_64)*(($4 + [48])) > (int_64)0), [848])
	*((($8 + [8]) + [8])) = *(($3 + [8]))
	*($8 + [8]) = *($3)
	*($8 + [64]) = ($8 + [8])
	*($8 + [68]) = $0
	CALL eosio_assert($2, [464])
	CALL $49(($8 + [24]), $4, ($8 + [64]))
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = *(($0 + [48]))
	$4 = *(($0 + [52]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	$7 = ($4 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$7:
	if ( ((int_64)(uint_64)*(*($7) + [8]) >> (uint_64)(int_64)8) == (int_64)$6) ){ goto $label$6 }
	$4 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $3) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = ($0 + [24])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$9 }
	$7 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [232]) == (int_32)$5), [160])
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	$4 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$7 = CALL $50($5, $4)
	CALL eosio_assert(((int_32)*($7 + [232]) == (int_32)$5), [160])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($7 + [232]) == (int_32)$5), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	$6 = *($7 + [8])
	CALL eosio_assert(((int_64)*($8 + [16]) == (int_64)*(($7 + [88]))), [944])
	$1 = ((int_64)*($7 + [80]) + (int_64)*($8 + [8]))
	*($7 + [80]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($7 + [80]) < (int_64)4611686018427387904), [1024])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$6) == (int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8)), [736])
	*($8 + [312]) = (($8 + [64]) + [228])
	*($8 + [308]) = ($8 + [64])
	*($8 + [304]) = ($8 + [64])
	CALL $51(($8 + [304]), $7)
	CALL db_update_i64(*($7 + [236]), (int_64)0, ($8 + [64]), [228])
	$7 = ($0 + [40])
	if ( (uint_64)($6 <= *($7)) ){ goto $label$10 }
	*($7) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$10
	$4 = *($8 + [48])
	if ( ($4 == 0) ){ goto $label$11 }
	$0 = ($8 + [52])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($7 + [-24])
	$5 = *($7)
	*($7) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $83($5)
	
.LABEL $label$15
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$14 }
	$7 = *(($8 + [48]))
	goto $label$12 
	
.LABEL $label$13
	$7 = $4
	
.LABEL $label$12
	*($0) = $4
	CALL $83($7)
	
.LABEL $label$11
	*([0] + [4]) = ($8 + [320])
}

void .FUNC _ZN12egtdividends11withdrawegtEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [160])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$6 = [0]
	*(($12 + [136])) = [0]
	*($12 + [120]) = (int_64)-1
	*($12 + [128]) = (int_64)0
	$8 = *($0)
	*($12 + [104]) = $8
	*($12 + [112]) = $8
	$4 = [0]
	$5 = CALL db_find_i64($8, $8, (int_64)-6029028889714491392, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $35(($12 + [104]), $5)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)($12 + [104])), [160])
	
.LABEL $label$1
	$2 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($2, [224])
	$10 = *($0 + [16])
	CALL eosio_assert([1], [256])
	$3 = ($4 + [48])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [320])
	CALL eosio_assert(((int_64)*(($4 + [56])) == (int_64)$10), [352])
	$8 = (int_64)0
	CALL eosio_assert(((int_64)*(($4 + [48])) > (int_64)0), [848])
	CALL eosio_assert(((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000)) - *($4 + [64])) > (uint_32)[86400]), [880])
	*((($12 + [88]) + [8])) = *(($3 + [8]))
	*($12 + [88]) = *($3)
	*($12 + [48]) = $0
	CALL eosio_assert($2, [464])
	CALL $47(($12 + [104]), $4, ($12 + [48]))
	$11 = *($0)
	$7 = (int_64)59
	$6 = [512]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$12 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	*($12 + [40]) = $9
	*($12 + [32]) = $11
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [144]
	$9 = (int_64)0
	
.LOOP $label$13:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$14 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$4 = ($4 + [165])
	goto $label$15 
	
.LABEL $label$16
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$13 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [928]
	$11 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$22 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$4 = ($4 + [165])
	goto $label$20 
	
.LABEL $label$22
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$18
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$17 }
	*((($12 + [8]) + [12])) = *($12 + [92])
	*(($12 + [28])) = *((($12 + [88]) + [12]))
	*(($12 + [24])) = *(($12 + [96]))
	*($12 + [8]) = $1
	*($12 + [16]) = *($12 + [88])
	$6 = CALL $48(($12 + [48]), ($12 + [32]), $9, $11, ($12 + [8]))
	CALL $39(($12 + [144]), $6)
	$4 = *($12 + [144])
	CALL send_inline($4, (*($12 + [148]) - $4))
	$4 = *($12 + [144])
	if ( ($4 == 0) ){ goto $label$23 }
	*($12 + [148]) = $4
	CALL $83($4)
	
.LABEL $label$23
	$4 = *($6 + [28])
	if ( ($4 == 0) ){ goto $label$24 }
	*(($6 + [32])) = $4
	CALL $83($4)
	
.LABEL $label$24
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$25 }
	*(($6 + [20])) = $4
	CALL $83($4)
	
.LABEL $label$25
	$5 = *($12 + [128])
	if ( ($5 == 0) ){ goto $label$26 }
	$0 = ($12 + [132])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$28 }
	
.LOOP $label$29:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL $83($4)
	
.LABEL $label$30
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$29 }
	$6 = *(($12 + [128]))
	goto $label$27 
	
.LABEL $label$28
	$6 = $5
	
.LABEL $label$27
	*($0) = $5
	CALL $83($6)
	
.LABEL $label$26
	*([0] + [4]) = ($12 + [160])
}

void .FUNC _ZN12egtdividends11allocmondivEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [304])
	*([0] + [4]) = $13
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [1328]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($7)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($10)
	$7 = [0]
	*(($13 + [40])) = [0]
	*($13 + [24]) = (int_64)-1
	*($13 + [32]) = (int_64)0
	$9 = *($0)
	*($13 + [8]) = $9
	*($13 + [16]) = $9
	$12 = [0]
	$2 = CALL db_find_i64($9, $9, (int_64)-6029028889714491392, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$12 = CALL $35(($13 + [8]), $2)
	CALL eosio_assert(((int_32)*($12 + [80]) == (int_32)($13 + [8])), [160])
	
.LABEL $label$5
	$3 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($3, [224])
	$8 = *($0 + [16])
	CALL eosio_assert([1], [256])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	
.LOOP $label$7:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert($2, [320])
	CALL eosio_assert(((int_64)*(($12 + [16])) == (int_64)$8), [352])
	CALL eosio_assert(((int_64)*($12 + [8]) != (int_64)0), [1152])
	$9 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = *(($0 + [48]))
	$6 = *(($0 + [52]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$10 }
	$7 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$11:
	if ( ((int_64)(uint_64)*(*($7) + [8]) >> (uint_64)(int_64)8) == (int_64)$9) ){ goto $label$10 }
	$6 = $7
	$2 = ($7 + [-24])
	$7 = $2
	if ( ((int_32)($2 + $5) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$5 = ($0 + [24])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$13 }
	$2 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [232]) == (int_32)$5), [160])
	goto $label$12 
	
.LABEL $label$13
	$2 = [0]
	$7 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $50($5, $7)
	CALL eosio_assert(((int_32)*($2 + [232]) == (int_32)$5), [160])
	
.LABEL $label$12
	if ( ((int_64)*($2 + [216]) == (int_64)*($12 + [76])) ){ goto $label$14 }
	$8 = *(($0 + [8]))
	$11 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 *(($12 + [8]))) / (float_64)(CASTING float_64)(int_64 *($2 + [80]))) * (float_64)((float_64)((float_64)(CASTING float_64)(int_64 *($2 + [176])) * (float_64)(float_64)0.1) + (float_64)((float_64)(CASTING float_64)(int_64 *($2 + [64])) * (float_64)(float_64)0.06))))
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [256])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$6 = [0]
	
.LABEL $label$15
	CALL eosio_assert($6, [320])
	CALL eosio_assert($3, [464])
	CALL eosio_assert(((int_32)*($12 + [80]) == (int_32)($13 + [8])), [624])
	CALL eosio_assert(((int_64)*($13 + [8]) == (int_64)CALL $fimport$2()), [672])
	*($12 + [76]) = *(($2 + [216]))
	$9 = *($12)
	CALL eosio_assert(((int_64)$8 == (int_64)*(($12 + [32]))), [944])
	$10 = ((int_64)*($12 + [24]) + (int_64)$11)
	*($12 + [24]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($12 + [24]) < (int_64)4611686018427387904), [1024])
	CALL eosio_assert(((int_64)$9 == (int_64)*($12)), [736])
	*($13 + [296]) = (($13 + [48]) + [76])
	*($13 + [292]) = ($13 + [48])
	*($13 + [288]) = ($13 + [48])
	CALL $43(($13 + [288]), $12)
	CALL db_update_i64(*($12 + [84]), (int_64)0, ($13 + [48]), [76])
	$7 = ($13 + [24])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$20 }
	*($7) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($2 + [232]) == (int_32)$5), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	$9 = *($2 + [8])
	CALL eosio_assert(((int_64)$8 == (int_64)*(($2 + [24]))), [1216])
	$8 = (int_64)
	*($2 + [16]) = $8(*($2 + [16]) - $11))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($2 + [16]) < (int_64)4611686018427387904), [1296])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$9) == (int_64)(uint_64)*($2 + [8]) >> (uint_64)(int_64)8)), [736])
	*($13 + [296]) = (($13 + [48]) + [228])
	*($13 + [292]) = ($13 + [48])
	*($13 + [288]) = ($13 + [48])
	CALL $51(($13 + [288]), $2)
	CALL db_update_i64(*($2 + [236]), (int_64)0, ($13 + [48]), [228])
	$7 = ($0 + [40])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$14 }
	*($7) = ((int_64)$9 + (int_64)1)
	
.LABEL $label$14
	$6 = *($13 + [32])
	if ( ($6 == 0) ){ goto $label$21 }
	$12 = ($13 + [36])
	$7 = *($12)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$23 }
	
.LOOP $label$24:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$25 }
	CALL $83($2)
	
.LABEL $label$25
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$24 }
	$7 = *(($13 + [32]))
	goto $label$22 
	
.LABEL $label$23
	$7 = $6
	
.LABEL $label$22
	*($12) = $6
	CALL $83($7)
	
.LABEL $label$21
	*([0] + [4]) = ($13 + [304])
}

void .FUNC _ZN12egtdividends8unpledgeEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [304])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$3 = *($2 + [8])
	CALL eosio_assert(((int_64)$3 == (int_64)*($0 + [16])), [1056])
	$11 = [0]
	$8 = [0]
	$4 = *($2)
	if ( ((uint_64)((int_64)$4 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$10 = (uint_64)$3 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [1088])
	$5 = *(($0 + [16]))
	CALL eosio_assert([1], [256])
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	
.LOOP $label$8:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$8 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [320])
	CALL eosio_assert(((int_64)$3 == (int_64)$5), [352])
	CALL eosio_assert(((int_64)$4 > (int_64)0), [1120])
	*(($12 + [40])) = [0]
	*($12 + [24]) = (int_64)-1
	*($12 + [32]) = (int_64)0
	$10 = *($0)
	*($12 + [8]) = $10
	*($12 + [16]) = $10
	$11 = CALL db_find_i64($10, $10, (int_64)-6029028889714491392, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$11 }
	$9 = CALL $35(($12 + [8]), $11)
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)($12 + [8])), [160])
	
.LABEL $label$11
	$7 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($7, [224])
	$1 = *(($0 + [16]))
	CALL eosio_assert([1], [256])
	$10 = (uint_64)$1 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$8 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$8 = [0]
	
.LABEL $label$12
	CALL eosio_assert($8, [320])
	$11 = ($9 + [16])
	CALL eosio_assert(((int_64)*($11) == (int_64)$1), [352])
	CALL eosio_assert(((int_64)*($9 + [8]) != (int_64)0), [1152])
	CALL eosio_assert(((int_64)*($11) == (int_64)$3), [352])
	CALL eosio_assert(((int_64)*($9 + [8]) >= (int_64)$4), [1184])
	$1 = CALL current_time()
	CALL eosio_assert($7, [464])
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)($12 + [8])), [624])
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)CALL $fimport$2()), [672])
	$10 = *($9)
	CALL eosio_assert(((int_64)$3 == (int_64)*($11)), [1216])
	$4 = (int_64)
	*($9 + [8]) = $4(*($9 + [8]) - $4))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($9 + [8]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$3 == (int_64)*(($9 + [56]))), [944])
	$4 = ((int_64)*($9 + [48]) + (int_64)*($2))
	*($9 + [48]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [992])
	CALL eosio_assert(((int_64)*($9 + [48]) < (int_64)4611686018427387904), [1024])
	*($9 + [64]) = ((uint_64)$1 / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$10 == (int_64)*($9)), [736])
	*($12 + [296]) = (($12 + [48]) + [76])
	*($12 + [292]) = ($12 + [48])
	*($12 + [288]) = ($12 + [48])
	CALL $43(($12 + [288]), $9)
	CALL db_update_i64(*($9 + [84]), (int_64)0, ($12 + [48]), [76])
	$11 = (($12 + [8]) + [16])
	if ( (uint_64)($10 <= *($11)) ){ goto $label$17 }
	*($11) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	$10 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$6 = *(($0 + [48]))
	$8 = *(($0 + [52]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$18 }
	$11 = ($8 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$19:
	if ( ((int_64)(uint_64)*(*($11) + [8]) >> (uint_64)(int_64)8) == (int_64)$10) ){ goto $label$18 }
	$8 = $11
	$9 = ($11 + [-24])
	$11 = $9
	if ( ((int_32)($9 + $7) != (int_32)[-24]) ){ goto $label$19 }
	
.LABEL $label$18
	$9 = ($0 + [24])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$21 }
	$11 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [232]) == (int_32)$9), [160])
	goto $label$20 
	
.LABEL $label$21
	$11 = [0]
	$8 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7235159537265672192, $10)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$20 }
	$11 = CALL $50($9, $8)
	CALL eosio_assert(((int_32)*($11 + [232]) == (int_32)$9), [160])
	
.LABEL $label$20
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [464])
	CALL eosio_assert(((int_32)*($11 + [232]) == (int_32)$9), [624])
	CALL eosio_assert(((int_64)*(($0 + [24])) == (int_64)CALL $fimport$2()), [672])
	$10 = *($11 + [8])
	CALL eosio_assert(((int_64)$3 == (int_64)*(($11 + [88]))), [1216])
	$3 = (int_64)
	*($11 + [80]) = $3(*($11 + [80]) - *($2)))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($11 + [80]) < (int_64)4611686018427387904), [1296])
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$10) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [736])
	*($12 + [296]) = (($12 + [48]) + [228])
	*($12 + [292]) = ($12 + [48])
	*($12 + [288]) = ($12 + [48])
	CALL $51(($12 + [288]), $11)
	CALL db_update_i64(*($11 + [236]), (int_64)0, ($12 + [48]), [228])
	$11 = ($0 + [40])
	if ( (uint_64)($10 <= *($11)) ){ goto $label$22 }
	*($11) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$22
	$8 = *($12 + [32])
	if ( ($8 == 0) ){ goto $label$23 }
	$0 = ($12 + [36])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$25 }
	
.LOOP $label$26:
	$11 = ($11 + [-24])
	$9 = *($11)
	*($11) = [0]
	if ( ($9 == 0) ){ goto $label$27 }
	CALL $83($9)
	
.LABEL $label$27
	if ( ((int_32)$8 != (int_32)$11) ){ goto $label$26 }
	$11 = *(($12 + [32]))
	goto $label$24 
	
.LABEL $label$25
	$11 = $8
	
.LABEL $label$24
	*($0) = $8
	CALL $83($11)
	
.LABEL $label$23
	*([0] + [4]) = ($12 + [304])
}