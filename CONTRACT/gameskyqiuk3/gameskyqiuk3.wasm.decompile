(data (i32.const 16624) "contract has initialized\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 16658) "contract not initialize\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 16768) "bet paused!\00")
(data (i32.const 16780) "bet doesn\'t exist\00")
(data (i32.const 16798) "transfer dividend to tokenpool\00")
(data (i32.const 16829) "Award! Play k3.qiulot.io\00stoull\00")
(data (i32.const 16861) "K3 contract paused!\00")
(data (i32.const 16881) "select number can\'t be 0\00")
(data (i32.const 16906) "select number can\'t be same\00")
(data (i32.const 16934) ":\00")
(data (i32.const 16936) "Winner SHOT AWARD! Play: k3.qiulot.io\00")
(data (i32.const 16974) "Super Winner! Play: k3.qiulot.io\00")
(data (i32.const 17008) "invalid bettor name\00")
(data (i32.const 17028) "contract is not involved in this transfer\00%llu\00")
(data (i32.const 17075) "only accept 1.0000 EOS per bet\00")
(data (i32.const 17106) "-\00")
(data (i32.const 17108) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17157) "invalid symbol name\00")
(data (i32.const 17177) "active")
(data (i32.const 17183) "transfer")
(data (i32.const 17191) "write\00")
(data (i32.const 17197) "betreceipt")
(data (i32.const 17207) "mine")
(data (i32.const 17211) "attempt to add asset with different symbol\00")
(data (i32.const 17254) "addition underflow\00")
(data (i32.const 17273) "addition overflow\00")
(data (i32.const 17291) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 17350) "string is too long to be a valid name\00: no conversion\00")
(data (i32.const 17404) "thirteenth character in name cannot be a letter that comes after j\00: out of range\00")
(data (i32.const 17486) "character is not in allowed character set for names\00")
(data (i32.const 17538) "eosio.token")
(data (i32.const 17549) "error reading iterator\00")
(data (i32.const 17572) "read\00")
(data (i32.const 17577) "cannot create objects in table of another contract\00")
(data (i32.const 17628) "next primary key in table is at autoincrement limit\00")
(data (i32.const 17680) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 17734) "cannot decrement iterator at beginning of table\00")
(data (i32.const 17782) "get\00")
(data (i32.const 17786) "cannot pass end iterator to modify\00")
(data (i32.const 17821) "object passed to modify is not in multi_index\00")
(data (i32.const 17867) "cannot modify objects in table of another contract\00")
(data (i32.const 17918) "updater cannot change primary key when modifying an object\00")
(data (i32.const 17977) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18028) "cannot pass end iterator to erase\00")
(data (i32.const 18062) "cannot increment end iterator\00")
(data (i32.const 18092) "object passed to erase is not in multi_index\00")
(data (i32.const 18137) "cannot erase objects in table of another contract\00")
(data (i32.const 18187) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18240) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 18320) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_update_i64" (func $fimport$4 (param i32 i64 i32 i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$7 (param i32 i32 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$8 (param i32 i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "send_deferred" (func $fimport$10 (param i32 i64 i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$12 (param i64)))
(import "env" "is_account" (func $fimport$13 (param i64) (result i32)))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$20 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$23 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$24 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$25 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$27 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$28 (param i32)))
(import "env" "db_idx64_update" (func $fimport$29 (param i32 i64 i32)))
(import "env" "prints_l" (func $fimport$30 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$41 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$45 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$47 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$48 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$49 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $56))
(export "_Znwj" (func $102))
(export "_ZdlPv" (func $104))
(export "_Znaj" (func $103))
(export "_ZdaPv" (func $105))
(export "_ZnwjSt11align_val_t" (func $106))
(export "_ZnajSt11align_val_t" (func $107))
(export "_ZdlPvSt11align_val_t" (func $108))
(export "_ZdaPvSt11align_val_t" (func $109))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $55 $11 $1 $9 $15 $12 $50 $131 $133)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18577))
(global $global$2 i32 (i32.const 18577))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [17572])
	CALL memcpy(($3 + [32]), *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$0 = *($0)
	CALL $84(*($1), ($0 + [36]))
	CALL $84(*($1), ($0 + [48]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($0 + [64]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [72])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2) = $0
	CALL $99($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($3 + [80]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [17572])
	CALL memcpy(($0 + [88]), *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($0 + [96]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [104])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($0 + [112]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [120])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $100(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [17191])
	CALL memcpy(*($4 + [4]), ($3 + [128]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$5 = *($0)
	$6 = *($5 + [160])
	$7 = *($1)
	$0 = *($7 + [4])
	$8 = ($7 + [8])
	$4 = ($7 + [4])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$9 = ((int_64)$6) != (int_64)0
	*($2 + [15]) = (($9) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($8) - $0) > (int_32)[0]), [17191])
	CALL memcpy(*($4), ($2 + [15]), [1])
	$0 = (*($4) + [1])
	*($4) = $0
	if ( $9 ){ goto $label$1 }
	CALL eosio_assert(((int_32)(*(($7 + [8])) - $0) > (int_32)[64]), [17191])
	$4 = ($7 + [4])
	CALL memcpy(*($4), ($5 + [164]), [65])
	*($4) = (*($4) + [65])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [17191])
	CALL memcpy(*($4 + [4]), ($5 + [240]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = CALL $86(CALL $86($0, ($1 + [28])), ($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[1]), [17572])
	CALL memcpy(($1 + [32]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$3 = CALL $84(CALL $84($0, ($1 + [36])), ($1 + [48]))
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [64]), *($3 + [4]), [8])
	$0 = (*($3 + [4]) + [8])
	*($3 + [4]) = $0
	$4 = (int_64)0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]), [17572])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [72])) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [80]), *($3 + [4]), [8])
	$0 = (*($3 + [4]) + [8])
	*($3 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $0) > (uint_32)[1]), [17572])
	CALL memcpy(($1 + [88]), *($3 + [4]), [2])
	$0 = (*($3 + [4]) + [2])
	*($3 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [96]), *($3 + [4]), [8])
	$0 = (*($3 + [4]) + [8])
	*($3 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]), [17572])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [104])) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [112]), *($3 + [4]), [8])
	$0 = (*($3 + [4]) + [8])
	*($3 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]), [17572])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [120])) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17572])
	CALL memcpy(($2 + [8]), *($3 + [4]), [1])
	$0 = (*($3 + [4]) + [1])
	*($3 + [4]) = $0
	$5 = [0]
	*($1 + [128]) = ((int_32)*($2 + [8]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)$0), [17572])
	CALL memcpy(($2 + [8]), *($3 + [4]), [1])
	$0 = (*($3 + [4]) + [1])
	*($3 + [4]) = $0
	*($1 + [129]) = ((int_32)*($2 + [8]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $0) > (uint_32)[31]), [17572])
	CALL memcpy(($1 + [144]), *($3 + [4]), [32])
	$6 = (*($3 + [4]) + [32])
	*($3 + [4]) = $6
	$7 = ($3 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($6 <= *(($3 + [8]))), [17782])
	$6 = *($7)
	$0 = *($6)
	$6 = ($6 + [1])
	*($7) = $6
	$5 = ($5 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $5)))
	$5 = ($5 + [7])
	if ( ($0 & [128]) ){ goto $label$1 }
	*($1 + [176]) = $4
	$5 = ($3 + [8])
	CALL eosio_assert(((uint_32)(*($5) - $6) > (uint_32)[64]), [17572])
	$0 = ($3 + [4])
	CALL memcpy(($1 + [180]), *($0), [65])
	$6 = (*($0) + [65])
	*($0) = $6
	CALL eosio_assert(((uint_32)(*($5) - $6) > (uint_32)[31]), [17572])
	CALL memcpy(($1 + [256]), *($0), [32])
	*($0) = (*($0) + [32])
	$global$0 = ($2 + [16])
	return $3
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	if ( ((int_32)$4 <= (int_32)[-3]) ){ goto $label$2 }
	$4 = (*($0 + [8]) - $3)
	$5 = int_32($4 >> [1])
	$6 = ($5 + [1])
	$4 = ( ( $6 ? $4 : ($4 <= $6) ) ? [2147483647] : (int_32($4 >> [1]) <= [1073741823]) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL _Znwj(($4 << [1]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	
.LABEL $label$3
	*(($5 = ($6 + ($5 << [1])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($5 - $2)
	$4 = ($6 + ($4 << [1]))
	$6 = ($5 + [2])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	CALL abort()
	(unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $127($0)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$3 = CALL $86(CALL $86($0, ($1 + [36])), ($1 + [48]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($3 + [4]), ($1 + [64]), [8])
	$0 = (*($3 + [4]) + [8])
	*($3 + [4]) = $0
	*($2 + [8]) = *(($1 + [72]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - $0) > (int_32)[7]), [17191])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($3 + [4]), ($1 + [80]), [8])
	$0 = (*($3 + [4]) + [8])
	*($3 + [4]) = $0
	CALL eosio_assert(((int_32)(*($3 + [8]) - $0) > (int_32)[1]), [17191])
	CALL memcpy(*($3 + [4]), ($1 + [88]), [2])
	$0 = (*($3 + [4]) + [2])
	*($3 + [4]) = $0
	CALL eosio_assert(((int_32)(*($3 + [8]) - $0) > (int_32)[7]), [17191])
	CALL memcpy(*($3 + [4]), ($1 + [96]), [8])
	$0 = (*($3 + [4]) + [8])
	*($3 + [4]) = $0
	*($2 + [8]) = *(($1 + [104]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - $0) > (int_32)[7]), [17191])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($3 + [4]), ($1 + [112]), [8])
	$0 = (*($3 + [4]) + [8])
	*($3 + [4]) = $0
	*($2 + [8]) = *(($1 + [120]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - $0) > (int_32)[7]), [17191])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($2 + [8]) = *($1 + [128])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [17191])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [1])
	$0 = (*($3 + [4]) + [1])
	*($3 + [4]) = $0
	*($2 + [8]) = *($1 + [129])
	CALL eosio_assert(((int_32)(*($3 + [8]) - $0) > (int_32)[0]), [17191])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [1])
	$0 = (*($3 + [4]) + [1])
	*($3 + [4]) = $0
	CALL eosio_assert(((int_32)(*($3 + [8]) - $0) > (int_32)[31]), [17191])
	CALL memcpy(*($3 + [4]), ($1 + [144]), [32])
	$4 = (*($3 + [4]) + [32])
	*($3 + [4]) = $4
	$5 = *($1 + [176])
	$0 = ($3 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$7 = ((int_64)$5) != (int_64)0
	*($2 + [8]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*(($3 + [8])) - $4) > (int_32)[0]), [17191])
	CALL memcpy(*($0), ($2 + [8]), [1])
	$4 = (*($0) + [1])
	*($0) = $4
	if ( $7 ){ goto $label$1 }
	$6 = ($3 + [8])
	CALL eosio_assert(((int_32)(*($6) - $4) > (int_32)[64]), [17191])
	$0 = ($3 + [4])
	CALL memcpy(*($0), ($1 + [180]), [65])
	$4 = (*($0) + [65])
	*($0) = $4
	CALL eosio_assert(((int_32)(*($6) - $4) > (int_32)[31]), [17191])
	CALL memcpy(*($0), ($1 + [256]), [32])
	*($0) = (*($0) + [32])
	$global$0 = ($2 + [16])
	return $3
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[1]), [17191])
	CALL memcpy(*($4 + [4]), ($3 + [32]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$0 = *($0)
	CALL $86(*($1), ($0 + [36]))
	CALL $86(*($1), ($0 + [48]))
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($0 + [64]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [72]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2) = $0
	CALL $93($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($3 + [80]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[1]), [17191])
	CALL memcpy(*($4 + [4]), ($0 + [88]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($0 + [96]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [104]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($0 + [112]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [120]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $94(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $138 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $136($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $123 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $116(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $134(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [17070], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $116(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $116(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_64 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $143([16854])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [16854], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $128())
	*(CALL $128()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $140($4, ($3 + [12]), $2)
	$0 = CALL $128()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $120($3)
	
.LABEL $label$1
	CALL $121($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [8] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18240]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $132($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $130([9], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $121 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $124($1, $0, [17388])
	CALL $126()
	(unreachable)
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $135($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $137 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $120 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $124($1, $0, [17471])
	CALL $125()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $69($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $35($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $70($2, $1)
	CALL $72(CALL $71(CALL $71($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $126 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($3 + [168])) = [0]
	*($3 + [152]) = (int_64)-1
	$4 = *($0)
	*($3 + [136]) = $4
	*($3 + [144]) = $4
	*($3 + [160]) = (int_64)0
	$5 = [0]
	$6 = CALL db_lowerbound_i64($4, $4, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $2(($3 + [136]), $6)
	
.LABEL $label$1
	$4 = *($0)
	*($3 + [100]) = [6]
	*($3 + [96]) = [17177]
	*($3 + [8]) = *($3 + [96])
	*($3 + [88]) = *(CALL $17(($3 + [32]), ($3 + [8])))
	*($3 + [80]) = $4
	*($3 + [96]) = [17183]
	*($3 + [100]) = [8]
	*($3) = *($3 + [96])
	$4 = *(CALL $17(($3 + [32]), $3))
	*((($3 + [16]) + [8])) = [0]
	*($3 + [16]) = (int_64)0
	$6 = CALL $143([16974])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [16]) = ($6 << [1])
	$7 = (($3 + [16]) | [1])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($3 + [16]) = ($8 | [1])
	*($3 + [24]) = $7
	*($3 + [20]) = $6
	
.LABEL $label$4
	CALL memcpy($7, [16974], $6)
	
.LABEL $label$3
	*(($7 + $6)) = [0]
	*(($3 + [56])) = *(($2 + [8]))
	$6 = (($3 + [16]) + [8])
	*(($3 + [72])) = *($6)
	*($6) = [0]
	*($3 + [40]) = $1
	*($3 + [32]) = *($0)
	*($3 + [48]) = *($2)
	*($3 + [64]) = *($3 + [16])
	*($3 + [16]) = (int_64)0
	$6 = CALL $18(($3 + [96]), ($3 + [80]), (int_64)6138663591592764928, $4, ($3 + [32]))
	CALL $19(($3 + [176]), $6)
	$7 = *($3 + [176])
	CALL send_inline($7, (*($3 + [180]) - $7))
	$7 = *($3 + [176])
	if ( ($7 == 0) ){ goto $label$6 }
	*($3 + [180]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	if ( ((*(($3 + [64])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$9
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$10
	*(($3 + [64])) = [0]
	*($3 + [48]) = (int_64)-1
	$4 = *($0)
	*($3 + [32]) = $4
	*($3 + [40]) = $4
	*($3 + [56]) = (int_64)0
	$6 = CALL db_lowerbound_i64($4, $4, (int_64)7035937441983234048, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	$6 = CALL $24(($3 + [32]), $6)
	$2 = ($5 + [8])
	
.LOOP $label$12:
	if ( ((uint_64)((int_64)*($6) + (int_64)6) >= (uint_64)*($2)) ){ goto $label$11 }
	$0 = [0]
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [18028])
	CALL eosio_assert($7, [18062])
	$7 = CALL db_next_i64(*($6 + [60]), ($3 + [96]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	$0 = CALL $24(($3 + [32]), $7)
	
.LABEL $label$13
	CALL $54(($3 + [32]), $6)
	$6 = $0
	if ( $0 ){ goto $label$12 }
	
.LABEL $label$11
	$2 = *($3 + [56])
	if ( ($2 == 0) ){ goto $label$14 }
	$5 = ($3 + [60])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$18 }
	$7 = *($0 + [28])
	if ( ($7 == 0) ){ goto $label$19 }
	*(($0 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$19
	CALL _ZdlPv($0)
	
.LABEL $label$18
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$17 }
	$6 = *(($3 + [56]))
	goto $label$15 
	
.LABEL $label$16
	$6 = $2
	
.LABEL $label$15
	*($5) = $2
	CALL _ZdlPv($6)
	
.LABEL $label$14
	$7 = *($3 + [160])
	if ( ($7 == 0) ){ goto $label$20 }
	$2 = ($3 + [164])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$24 }
	CALL _ZdlPv($0)
	
.LABEL $label$24
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$23 }
	$6 = *(($3 + [160]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $7
	
.LABEL $label$21
	*($2) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$global$0 = ($3 + [192])
	return (unreachable)
	
.LABEL $label$2
	CALL $110(($3 + [16]))
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17867])
	*($1 + [24]) = *(*($3))
	$6 = *($1)
	*($1 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [17108])
	$7 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $3
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$3 < (int_32)[6])
	$10 = ($3 + [1])
	$3 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [17157])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	*($1 + [42]) = [0]
	*(($3 = ($1 + [48]))) = *($1 + [44])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17918])
	$10 = *($1 + [44])
	$9 = *($3)
	$11 = ($9 - $10)
	$7 = (CASTING uint_64)(uint_32 int_32($11 >> [1]))
	$3 = [43]
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$7 }
	$3 = (($11 & [-2]) + $3)
	
.LABEL $label$7
	if ( ($3 <= [513]) ){ goto $label$9 }
	$9 = CALL $146($3)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$8
	*($5 + [4]) = $9
	*($5) = $9
	*($5 + [8]) = ($9 + $3)
	CALL $76($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$12 }
	CALL $149($9)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	
.LABEL $label$11
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
}

void .FUNC $125 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17549])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([304])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [44 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [176]) = [0]
	*($5 + [288]) = $0
	CALL $96(($3 + [32]), $5)
	*($5 + [292]) = $1
	*($5 + [296 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $30(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$10
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $86(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17867])
	$6 = *($1)
	$7 = *($1 + [8])
	$8 = ($1 + [16])
	$9 = *($8)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [17211])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [17254])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [17273])
	*($8) = $9
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17918])
	$10 = *($1 + [44])
	$8 = *(($1 + [48]))
	$11 = ($8 - $10)
	$7 = (CASTING uint_64)(uint_32 int_32($11 >> [1]))
	$3 = [43]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$2 }
	$3 = (($11 & [-2]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $146($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $76($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $149($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17867])
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [48])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)*(($1 + [52]))) ){ goto $label$2 }
	*($8) = ($9 + [2])
	*($9) = *($6)
	$9 = ($1 + [44])
	goto $label$1 
	
.LABEL $label$2
	$9 = ($1 + [44])
	CALL $97($9, $6)
	
.LABEL $label$1
	*($1 + [42]) = (*($1 + [42]) + [1])
	$10 = *($1 + [8])
	$6 = ($1 + [16])
	$11 = *($6)
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$11), [17211])
	$10 = ((int_64)$10 + (int_64)*($3))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [17254])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [17273])
	*($6) = $11
	*($1 + [8]) = $10
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [17918])
	$9 = *($9)
	$6 = *(($1 + [48]))
	$8 = ($6 - $9)
	$10 = (CASTING uint_64)(uint_32 int_32($8 >> [1]))
	$3 = [43]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$4 }
	$3 = (($8 & [-2]) + $3)
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $146($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $76($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $149($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17867])
	$6 = *($1)
	$7 = *($1 + [8])
	$8 = ($1 + [16])
	$9 = *($8)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$9), [17211])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [17254])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [17273])
	*($8) = $9
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17918])
	$10 = *($1 + [44])
	$8 = *(($1 + [48]))
	$11 = ($8 - $10)
	$7 = (CASTING uint_64)(uint_32 int_32($11 >> [1]))
	$3 = [43]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$2 }
	$3 = (($11 & [-2]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $146($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $76($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $149($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [288]) == (int_32)$0), [17821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17867])
	*(($5 = $4) + [16]) = *(($1 + [8]))
	*($5 + [24]) = *(($1 + [24]))
	$3 = *($3)
	*($1 + [112]) = *($3)
	*(($1 + [120])) = *(($3 + [8]))
	$6 = *($1)
	CALL eosio_assert([1], [17918])
	$3 = *($1 + [36])
	$7 = ( *(($1 + [40])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [223])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = (($5 + [16]) + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$9 = *($1 + [48])
	$9 = ( *(($1 + [52])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$3 = ($9 + $3)
	$8 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$8 = *($1 + [176])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $146($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $91($5, $1)
	CALL db_update_i64(*($1 + [292]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$6 }
	CALL $149($4)
	
.LABEL $label$6
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $142(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$8 }
	$4 = ($1 + [296])
	$3 = *($4)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$9 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229853544465301504, ($5 + [32]), $6)
	*($4) = $3
	
.LABEL $label$9
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$8
	*($5 + [40]) = *(($1 + [24]))
	if ( (CALL $142($7, ($5 + [40]), [8]) == 0) ){ goto $label$10 }
	$1 = ($1 + [300])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$11 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229853544465301505, ($5 + [32]), $6)
	*($1) = $3
	
.LABEL $label$11
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$10
	$global$0 = ($5 + [48])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $143($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $114($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $128 ()
{
	return [8212]
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [28])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth(*($0))
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = [0]
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2(($2 + [8]), $5)
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [16658])
	$6 = *($0)
	CALL eosio_assert($5, [17786])
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($2 + [8])), [17821])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$3()), [17867])
	*($4 + [16 align=1]) = *($1)
	*(($4 + [24])) = *(($1 + [8]))
	*(($4 + [32])) = *(($1 + [16]))
	*(($4 + [40])) = *(($1 + [24]))
	*(($4 + [48])) = *(($1 + [32]))
	$3 = *($4)
	CALL eosio_assert([1], [17918])
	*($2 + [152]) = (($2 + [48]) + [83])
	*($2 + [148]) = ($2 + [48])
	*($2 + [144]) = ($2 + [48])
	CALL $10(($2 + [144]), $4)
	CALL db_update_i64(*($4 + [92]), $6, ($2 + [48]), [83])
	$4 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = ($2 + [36])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $0
	
.LABEL $label$4
	*($5) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($2 + [160])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [44])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [48])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)1
	$5 = *($1 + [28])
	$4 = *(($1 + [32]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	$8 = *($0)
	$9 = [25]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$2 }
	$9 = (($6 & [-8]) + $9)
	
.LABEL $label$2
	$4 = ($9 + [16])
	if ( ($4 <= [513]) ){ goto $label$4 }
	$9 = CALL $146($4)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$3
	*($3 + [4]) = $9
	*($3) = $9
	*($3 + [8]) = ($9 + $4)
	CALL $81($3, $1)
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($8 + [8]), (int_64)7035937441983234048, *(*($0 + [8])), $7, $9, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($8 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $149($9)
	if ( (uint_64)($7 <= *($8 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	$6 = *($5 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)-4131301023690375168, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $13($5, $7)
	*($3 + [4]) = [0]
	*($3) = $5
	$6 = *(*(CALL $75($3) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [17628])
	*($1) = *(($5 + [16]))
	CALL eosio_assert([1], [17108])
	$6 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$6 = $8
	$7 = [1]
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$6 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$9 = ($5 + [1])
	$5 = $9
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [17157])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	*($1 + [40]) = [1]
	$9 = *($1 + [44])
	$7 = *(($1 + [48]))
	$10 = ($7 - $9)
	$6 = (CASTING uint_64)(uint_32 int_32($10 >> [1]))
	$5 = [43]
	
.LOOP $label$8:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$9 }
	$5 = (($10 & [-2]) + $5)
	
.LABEL $label$9
	if ( ($5 <= [513]) ){ goto $label$11 }
	$7 = CALL $146($5)
	goto $label$10 
	
.LABEL $label$11
	$7 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$10
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($7 + $5)
	CALL $76($3, $1)
	$6 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)-4131301023690375168, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$14 }
	CALL $149($7)
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( ((uint_64)$6 >= (uint_64)*($4 + [16])) ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17549])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [72]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [88]) = $0
	CALL $73(($3 + [32]), $5)
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $4(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $2($6, $8)
	*($3 + [4]) = [0]
	*($3) = $6
	$7 = *(*(CALL $74($3) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [17628])
	$7 = *(($6 + [16]))
	*($1 + [8]) = (int_64)1
	*($1) = $7
	*($1 + [50]) = [0]
	$6 = *($5 + [4])
	*($1 + [16 align=1]) = *($6)
	*(($1 + [48])) = *(($6 + [32]))
	*(($1 + [40])) = *(($6 + [24]))
	*(($1 + [32])) = *(($6 + [16]))
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [56]) = (int_64)1546257600
	CALL eosio_assert([1], [17108])
	$7 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$7 = $9
	$5 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$7 = $9
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $5 ){ goto $label$7 }
	$5 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [17157])
	*(($1 + [72])) = (int_64)1397703940
	*($1 + [64]) = (int_64)0
	*($1 + [80]) = (int_64)10000
	$5 = $2
	$6 = ($5 + [-96])
	$global$0 = $6
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($5 + [-13])
	CALL $10($3, $1)
	$7 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159551873908736, *(*($0 + [8])), $7, $6, [83])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$8 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$global$0 = ($3 + [16])
}

void .FUNC memory ()
{
	CALL $101()
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [176])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($4 = ($2 + [128]))) = [0]
	*($2 + [112]) = (int_64)-1
	$5 = *($0)
	*($2 + [96]) = $5
	*($2 + [104]) = $5
	*($2 + [120]) = (int_64)0
	$6 = CALL db_lowerbound_i64($5, $5, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2(($2 + [96]), $6)
	
.LABEL $label$1
	CALL eosio_assert(($3 == 0), [16624])
	$5 = *($0)
	*($2 + [148]) = $1
	*($2 + [144]) = ($2 + [96])
	*($2 + [16]) = $5
	CALL eosio_assert(((int_64)*($2 + [96]) == (int_64)CALL $fimport$3()), [17577])
	*($2 + [60]) = ($2 + [144])
	*($2 + [56]) = ($2 + [96])
	*($2 + [64]) = ($2 + [16])
	*(($3 = CALL _Znwj([104])) + [72]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [88]) = ($2 + [96])
	CALL $3(($2 + [56]), $3)
	*($2 + [168]) = $3
	$5 = *($3)
	*($2 + [56]) = $5
	$6 = *($3 + [92])
	*($2 + [160]) = $6
	$7 = ($2 + [124])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*($4)) ){ goto $label$4 }
	*($1 + [8]) = $5
	*($1 + [16]) = $6
	*($2 + [168]) = [0]
	*($1) = $3
	*($7) = ($1 + [24])
	$3 = *($2 + [168])
	$1 = [0]
	*($2 + [168]) = [0]
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $4(($2 + [120]), ($2 + [168]), ($2 + [56]), ($2 + [160]))
	$3 = *($2 + [168])
	$1 = [0]
	*($2 + [168]) = [0]
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	*(($4 = ($2 + [88]))) = $1
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	$5 = *($0)
	*($2 + [56]) = $5
	*($2 + [64]) = $5
	*($2 + [136]) = ($2 + [56])
	*($2 + [144]) = $5
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [17577])
	*($2 + [20]) = ($2 + [136])
	*($2 + [16]) = ($2 + [56])
	*($2 + [24]) = ($2 + [144])
	*(($3 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [44 align=4]) = (int_64)0
	*($3 + [52]) = $1
	*($3 + [56]) = ($2 + [56])
	CALL $5(($2 + [16]), $3)
	*($2 + [168]) = $3
	$5 = *($3)
	*($2 + [16]) = $5
	$6 = *($3 + [60])
	*($2 + [160]) = $6
	$7 = ($2 + [84])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*($4)) ){ goto $label$7 }
	*($1 + [8]) = $5
	*($1 + [16]) = $6
	*($2 + [168]) = [0]
	*($1) = $3
	*($7) = ($1 + [24])
	$3 = *($2 + [168])
	$1 = [0]
	*($2 + [168]) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL $6(($2 + [80]), ($2 + [168]), ($2 + [16]), ($2 + [160]))
	$3 = *($2 + [168])
	$1 = [0]
	*($2 + [168]) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = *($3 + [44])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($4 = ($2 + [48]))) = $1
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$5 = *($0)
	*($2 + [16]) = $5
	*($2 + [24]) = $5
	*($2 + [168]) = $5
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [17577])
	*($2 + [148]) = ($2 + [8])
	*($2 + [144]) = ($2 + [16])
	*($2 + [152]) = ($2 + [168])
	*(($3 = CALL _Znwj([72])) + [36]) = $1
	*($3 + [28 align=4]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = ($2 + [16])
	CALL $7(($2 + [144]), $3)
	*($2 + [160]) = $3
	$5 = *($3)
	*($2 + [144]) = $5
	$1 = *($3 + [60])
	*($2 + [136]) = $1
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)*($4)) ){ goto $label$13 }
	*($0 + [8]) = $5
	*($0 + [16]) = $1
	*($2 + [160]) = [0]
	*($0) = $3
	*($6) = ($0 + [24])
	$3 = *($2 + [160])
	*($2 + [160]) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $8(($2 + [40]), ($2 + [160]), ($2 + [144]), ($2 + [136]))
	$3 = *($2 + [160])
	*($2 + [160]) = [0]
	if ( $3 ){ goto $label$11 }
	
.LABEL $label$12
	$4 = *($2 + [40])
	if ( ($4 == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$0 = *($3 + [28])
	if ( ($0 == 0) ){ goto $label$14 }
	*(($3 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$14
	CALL _ZdlPv($3)
	$4 = *($2 + [40])
	if ( ($4 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$6 = ($2 + [44])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$16 }
	
.LOOP $label$17:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$18 }
	$1 = *($0 + [28])
	if ( ($1 == 0) ){ goto $label$19 }
	*(($0 + [32])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$19
	CALL _ZdlPv($0)
	
.LABEL $label$18
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$17 }
	$3 = *(($2 + [40]))
	goto $label$15 
	
.LABEL $label$16
	$3 = $4
	
.LABEL $label$15
	*($6) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$4 = *($2 + [80])
	if ( ($4 == 0) ){ goto $label$20 }
	$6 = ($2 + [84])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$22 }
	
.LOOP $label$23:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$24 }
	$1 = *($0 + [44])
	if ( ($1 == 0) ){ goto $label$25 }
	*(($0 + [48])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$25
	CALL _ZdlPv($0)
	
.LABEL $label$24
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$23 }
	$3 = *(($2 + [80]))
	goto $label$21 
	
.LABEL $label$22
	$3 = $4
	
.LABEL $label$21
	*($6) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$1 = *($2 + [120])
	if ( ($1 == 0) ){ goto $label$26 }
	$4 = ($2 + [124])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$30 }
	CALL _ZdlPv($0)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($2 + [120]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($4) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$global$0 = ($2 + [176])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17867])
	*($1 + [40]) = *(*($3))
	$6 = *($1)
	CALL eosio_assert([1], [17918])
	$8 = *($1 + [44])
	$7 = *(($1 + [48]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [1]))
	$3 = [43]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	$3 = (($9 & [-2]) + $3)
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $146($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $76($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $149($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	$5 = ($global$0 - [832])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = [0]
	*((($5 + [760]) + [32])) = [0]
	*($5 + [776]) = (int_64)-1
	$7 = *($0)
	*($5 + [760]) = $7
	*($5 + [768]) = $7
	*($5 + [784]) = (int_64)0
	$8 = [0]
	$9 = CALL db_lowerbound_i64($7, $7, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $2(($5 + [760]), $9)
	
.LABEL $label$1
	$10 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($10, [16658])
	CALL eosio_assert(((int_32)*($8 + [50]) ^ (int_32)[1]), [16768])
	*((($5 + [720]) + [32])) = [0]
	*($5 + [736]) = (int_64)-1
	*($5 + [744]) = (int_64)0
	$7 = *($0)
	*($5 + [720]) = $7
	*($5 + [728]) = $7
	$9 = CALL db_find_i64($7, $7, (int_64)3617214760481193984, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $16(($5 + [720]), $9)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)($5 + [720])), [17977])
	
.LABEL $label$2
	$11 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($11, [16780])
	$12 = ($5 + [710])
	$7 = *($2)
	$13 = ($5 + [640])
	
.LOOP $label$3:
	$9 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$14 = ((int_64)$7) != (int_64)0
	*($5 + [80]) = (($14) << [7]) | ($9 & [127]))
	$9 = $13
	CALL eosio_assert(((int_32)($12 - $9) > (int_32)[0]), [17191])
	CALL memcpy($9, ($5 + [80]), [1])
	$13 = ($9 + [1])
	if ( $14 ){ goto $label$3 }
	CALL eosio_assert(((int_32)($12 - $13) > (int_32)[64]), [17191])
	CALL memcpy($13, ($2 + [4]), [65])
	CALL assert_recover_key($3, ($5 + [640]), (($9 + [66]) - ($5 + [640])), ($8 + [16]), [34])
	*($5 + [632]) = *($8 + [8])
	$7 = ((int_64)*($6 + [56]) * (int_64)400)
	*($5 + [624]) = ((uint_64)$7 / (uint_64)(int_64)10000)
	if ( (uint_64)($7 <= (int_64)10000) ){ goto $label$9 }
	$7 = *($0)
	*($5 + [380]) = [6]
	*($5 + [376]) = [17177]
	*($5 + [72]) = *($5 + [376])
	*($5 + [528]) = *(CALL $17(($5 + [80]), ($5 + [72])))
	*($5 + [520]) = $7
	*($5 + [380]) = [8]
	*($5 + [376]) = [17183]
	*($5 + [64]) = *($5 + [376])
	$15 = *(CALL $17(($5 + [80]), ($5 + [64])))
	$16 = *(($6 + [64]))
	$17 = *($5 + [624])
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17108])
	$7 = (uint_64)$16 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$7 = $1
	$13 = [1]
	$14 = $9
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$7 = $1
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$13 = ((int_32)$9 < (int_32)[6])
	$14 = ($9 + [1])
	$9 = $14
	if ( $13 ){ goto $label$14 }
	$13 = [1]
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$13 = [0]
	
.LABEL $label$10
	CALL eosio_assert($13, [17157])
	*(($5 + [368])) = [0]
	*($5 + [360]) = (int_64)0
	$9 = CALL $143([16798])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$17 }
	*($5 + [360]) = ($9 << [1])
	$13 = (($5 + [360]) | [1])
	if ( $9 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$14 = (($9 + [16]) & [-16])
	$13 = CALL _Znwj($14)
	*($5 + [360]) = ($14 | [1])
	*($5 + [368]) = $13
	*($5 + [364]) = $9
	
.LABEL $label$16
	CALL memcpy($13, [16798], $9)
	
.LABEL $label$15
	*(($13 + $9)) = [0]
	*(($5 + [104])) = $16
	$9 = ($5 + [368])
	*(($5 + [120])) = *($9)
	*($9) = [0]
	*($5 + [88]) = (int_64)7035937925206713216
	*($5 + [96]) = $17
	*($5 + [80]) = *($0)
	*($5 + [112]) = *($5 + [360])
	*($5 + [360]) = (int_64)0
	$9 = CALL $18(($5 + [376]), ($5 + [520]), (int_64)6138663591592764928, $15, ($5 + [80]))
	CALL $19(($5 + [440]), $9)
	$13 = *($5 + [440])
	CALL send_inline($13, (*($5 + [444]) - $13))
	$13 = *($5 + [440])
	if ( ($13 == 0) ){ goto $label$18 }
	*($5 + [444]) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$18
	$13 = *($9 + [28])
	if ( ($13 == 0) ){ goto $label$19 }
	*(($9 + [32])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$19
	$13 = *($9 + [16])
	if ( ($13 == 0) ){ goto $label$20 }
	*(($9 + [20])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$20
	if ( ((*(($5 + [112])) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$21
	if ( ((*($5 + [360]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($5 + [368])))
	
.LABEL $label$22
	$7 = *($0)
	*($5 + [80]) = ($5 + [624])
	CALL eosio_assert($10, [17786])
	CALL $20(($5 + [760]), $8, $7, ($5 + [80]))
	
.LABEL $label$9
	$1 = *($6 + [8])
	$12 = ($6 + [56])
	$16 = *(($12 + [8]))
	*((($5 + [608]) + [8])) = $16
	$15 = *($6 + [16])
	$7 = *($12)
	*((($5 + [48]) + [8])) = $16
	*($5 + [608]) = $7
	*($5 + [48]) = $7
	CALL $21($0, $1, $15, ($5 + [48]))
	$18 = (int_64)
	*($5 + [600]) = $18(*($12) - *($5 + [624])))
	$19 = ((int_64)((int_64)((int_64)*($4 + [30]) << (int_64)8) | (int_64)((int_64)*($4 + [29]) << (int_64)16)) | (int_64)*($4 + [31]))
	$20 = ((uint_64)$19 / (uint_64)(int_64)9)
	$7 = (int_64))(((int_64)$20 * (int_64)9) - $19)
	$15 = ((int_64)((int_64)((int_64)*($4 + [27]) << (int_64)8) | (int_64)((int_64)*($4 + [26]) << (int_64)16)) | (int_64)*($4 + [28]))
	$1 = (int_64))(((int_64)((int_64)((int_64)$19 * (int_64)100) + (int_64)((int_64)$15 * (int_64)10)) + (int_64)100) - ((int_64)$20 * (int_64)900))
	$16 = (int_64))((int_64)1 - $15)
	$15 = ((int_64)$15 + (int_64)-1)
	$17 = *($4 + [25])
	$21 = *($4 + [24])
	$22 = *($4 + [23])
	
.LOOP $label$23:
	$1 = ((int_64)$1 + (int_64)10)
	$16 = ((int_64)$16 + (int_64)-1)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)((int_64)$7 + (int_64)((int_64)((uint_64)$15 / (uint_64)(int_64)9) * (int_64)-9)) == (int_64)$16) ){ goto $label$23 }
	$7 = ((int_64)((int_64)((int_64)$21 << (int_64)8) | (int_64)((int_64)$22 << (int_64)16)) | (int_64)$17)
	$17 = ((int_64)$7 + (int_64)-1)
	$21 = ((uint_64)$15 / (uint_64)(int_64)9)
	$15 = ((int_64)$7 + (int_64))($1 - ((int_64)$21 * (int_64)90)))
	$1 = (int_64))((int_64))($19 - $7) - ((int_64)$20 * (int_64)9))
	$16 = (int_64))((int_64))(((int_64)$21 * (int_64)-9) - $7) - $16)
	
.LOOP $label$24:
	$17 = ((int_64)$17 + (int_64)1)
	$15 = ((int_64)$15 + (int_64)1)
	$19 = ((int_64)((uint_64)$7 / (uint_64)(int_64)9) * (int_64)9)
	$20 = ((int_64)$16 + (int_64)$19)
	$19 = ((int_64)$1 + (int_64)$19)
	$21 = ((int_64)$1 + (int_64)-1)
	$1 = $21
	$22 = ((int_64)$16 + (int_64)-1)
	$16 = $22
	$23 = ((int_64)$7 + (int_64)1)
	$7 = $23
	if ( (int_64)($19 == 0) ){ goto $label$24 }
	$1 = $21
	$16 = $22
	$7 = $23
	if ( (int_64)($20 == 0) ){ goto $label$24 }
	$9 = (CASTING uint_32)(uint_64 (int_64))($15 - ((int_64)((uint_64)$17 / (uint_64)(int_64)9) * (int_64)9))
	*($5 + [598]) = $9)
	$13 = *($6 + [24])
	*($5 + [584]) = (int_64)0
	*($5 + [576]) = (int_64)0
	$13 = ((uint_32)$13 % (uint_32)[10])
	$14 = ((uint_32)(($13 - ((int_32)$14 * (int_32)[100])) & [65535]) / (uint_32)[10])
	$24 = ((uint_32)(($9 - ((int_32)$8 * (int_32)[100])) & [65535]) / (uint_32)[10])
	$8 = ((uint_32)$8 / (uint_32)[100])
	$8 = ($9 & [65535])
	$10 = ((uint_32)$8 % (uint_32)[10])
	$14 = ((uint_32)$13 / (uint_32)[100])
	$25 = (((int_32)$14 == (int_32)$10) | (((int_32)$14 == (int_32)$8) | ((int_32)$14 == (int_32)$24)))
	$26 = ( [2] ? [1] : $25 )
	$13 = (( $26 ? ( $26 ? ( $26 ? $25 : ((int_32)$14 == (int_32)$24) ) : ((int_32)$14 == (int_32)$8) ) : ((int_32)$14 == (int_32)$10) ) + (((int_32)$13 == (int_32)$10) | (((int_32)$13 == (int_32)$8) | ((int_32)$13 == (int_32)$24))))
	if ( ((int_32)$13 == (int_32)[3]) ){ goto $label$26 }
	if ( ((int_32)$13 == (int_32)[2]) ){ goto $label$27 }
	if ( ((int_32)$13 != (int_32)[1]) ){ goto $label$25 }
	*($5 + [584]) = ((uint_64)((int_64)$18 * (int_64)10) / (uint_64)(int_64)100)
	goto $label$25 
	
.LABEL $label$27
	*($5 + [584]) = ((uint_64)((int_64)$18 * (int_64)20) / (uint_64)(int_64)100)
	goto $label$25 
	
.LABEL $label$26
	*($5 + [584]) = ((uint_64)((int_64)$18 * (int_64)100) / (uint_64)(int_64)100)
	
.LABEL $label$25
	$8 = [0]
	*($5 + [575]) = [0]
	CALL $22(($5 + [560]), $0, ($9 & [65535]), *($5 + [632]))
	if ( ((int_32)*($5 + [598]) != (int_32)*(($6 + [24]))) ){ goto $label$28 }
	$9 = *($5 + [564])
	if ( ((int_32)$9 == (int_32)*($5 + [568])) ){ goto $label$29 }
	*($9) = *($6)
	*($5 + [564]) = ($9 + [8])
	goto $label$28 
	
.LABEL $label$29
	CALL $23(($5 + [560]), $6)
	
.LABEL $label$28
	*(($5 + [552])) = [0]
	*($5 + [536]) = (int_64)-1
	*($5 + [544]) = (int_64)0
	$7 = *($0)
	*($5 + [520]) = $7
	*($5 + [528]) = $7
	$9 = CALL db_find_i64($7, $7, (int_64)7035937441983234048, *($5 + [632]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$30 }
	$8 = CALL $24(($5 + [520]), $9)
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)($5 + [520])), [17977])
	
.LABEL $label$30
	$1 = *($8 + [16])
	$7 = *($5 + [584])
	$16 = *($5 + [600])
	*($5 + [512]) = (int_64)0
	$9 = (*($5 + [564]) - *($5 + [560]))
	if ( ($9 == 0) ){ goto $label$4 }
	$13 = int_32($9 >> [3])
	$7 = ((uint_64)((int_64)$7 * (int_64)10) / (uint_64)(int_64)100)
	$7 = (int_64)
	$1 = ((uint_64)(int_64))($7(((int_64)$16 + (int_64)$1) - $7)) - $7
	*($5 + [512]) = $1 / (uint_64)(CASTING uint_64)(uint_32 $13)))
	if ( ((int_32)*($5 + [598]) != (int_32)*(($6 + [24]))) ){ goto $label$31 }
	*($5 + [576]) = $1
	
.LABEL $label$31
	*($5 + [504]) = [0]
	*($5 + [496]) = (int_64)0
	if ( ((uint_32)$13 >= (uint_32)[536870912]) ){ goto $label$32 }
	$9 = CALL _Znwj($9)
	*(($5 + [504])) = ($9 + ($13 << [3]))
	*($5 + [496]) = $9
	*($5 + [500]) = $9
	$14 = *($5 + [560])
	$13 = (*($5 + [564]) - $14)
	if ( ((int_32)$13 < (int_32)[1]) ){ goto $label$33 }
	CALL memcpy($9, $14, $13)
	*($5 + [500]) = (*($5 + [500]) + $13)
	
.LABEL $label$33
	CALL $25($0, ($5 + [496]), *($5 + [512]), *($6))
	$9 = *($5 + [496])
	if ( ($9 == 0) ){ goto $label$34 }
	*($5 + [500]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$34
	$16 = *(($6 + [8]))
	*($5 + [480]) = $7
	*($5 + [488]) = *(($6 + [64]))
	$10 = *($5 + [598])
	CALL eosio_assert([1], [17108])
	$7 = (uint_64)*($5 + [488]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$38 }
	$7 = $1
	$13 = [1]
	$14 = $9
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$38
	$7 = $1
	
.LOOP $label$39:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$36 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$13 = ((int_32)$9 < (int_32)[6])
	$14 = ($9 + [1])
	$9 = $14
	if ( $13 ){ goto $label$39 }
	$13 = [1]
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	$13 = [0]
	
.LABEL $label$35
	CALL eosio_assert($13, [17157])
	*((($5 + [32]) + [8])) = *((($5 + [480]) + [8]))
	*($5 + [32]) = *($5 + [480])
	*($5 + [575]) = CALL $26($0, $16, ($10 & [65535]), ($5 + [32]))
	*(($5 + [408])) = [0]
	*($5 + [392]) = (int_64)-1
	$7 = *($0)
	*($5 + [376]) = $7
	*($5 + [384]) = $7
	*($5 + [400]) = (int_64)0
	$9 = [0]
	$13 = CALL db_lowerbound_i64($7, $7, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$40 }
	$9 = CALL $2(($5 + [376]), $13)
	
.LABEL $label$40
	$1 = *($0)
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [17786])
	CALL eosio_assert(((int_32)*($9 + [88]) == (int_32)($5 + [376])), [17821])
	CALL eosio_assert(((int_64)*($5 + [376]) == (int_64)CALL $fimport$3()), [17867])
	*($9 + [8]) = ((int_64)*($5 + [632]) + (int_64)1)
	$7 = *($9)
	CALL eosio_assert([1], [17918])
	*($5 + [448]) = (($5 + [80]) + [83])
	*($5 + [444]) = ($5 + [80])
	*($5 + [440]) = ($5 + [80])
	CALL $10(($5 + [440]), $9)
	CALL db_update_i64(*($9 + [92]), $1, ($5 + [80]), [83])
	$9 = ($5 + [392])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$41 }
	*($9) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$41
	$7 = *($0)
	*($5 + [352]) = ($5 + [632])
	*($5 + [440]) = $7
	CALL eosio_assert(((int_64)*($5 + [520]) == (int_64)CALL $fimport$3()), [17577])
	*($5 + [84]) = ($5 + [352])
	*($5 + [80]) = ($5 + [520])
	*($5 + [88]) = ($5 + [440])
	*(($9 = CALL _Znwj([72])) + [36]) = [0]
	*($9 + [28 align=4]) = (int_64)0
	*($9 + [40]) = (int_64)0
	*($9 + [48]) = (int_64)0
	*($9 + [56]) = ($5 + [520])
	CALL $27(($5 + [80]), $9)
	*($5 + [360]) = $9
	$7 = *($9)
	*($5 + [80]) = $7
	$14 = *($9 + [60])
	*($5 + [800]) = $14
	$10 = ($5 + [548])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($5 + [552]))) ){ goto $label$43 }
	*($13 + [8]) = $7
	*($13 + [16]) = $14
	*($5 + [360]) = [0]
	*($13) = $9
	*($10) = ($13 + [24])
	$9 = *($5 + [360])
	*($5 + [360]) = [0]
	if ( ($9 == 0) ){ goto $label$42 }
	goto $label$7 
	
.LABEL $label$43
	CALL $8(($5 + [544]), ($5 + [360]), ($5 + [80]), ($5 + [800]))
	$9 = *($5 + [360])
	*($5 + [360]) = [0]
	if ( $9 ){ goto $label$7 }
	
.LABEL $label$42
	$14 = *($5 + [400])
	if ( ($14 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$32
	CALL $127(($5 + [496]))
	
.LABEL $label$8
	CALL $110(($5 + [360]))
	
.LABEL $label$7
	$13 = *($9 + [28])
	if ( ($13 == 0) ){ goto $label$44 }
	*(($9 + [32])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$44
	CALL _ZdlPv($9)
	$14 = *($5 + [400])
	if ( ($14 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$10 = ($5 + [404])
	$9 = *($10)
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$46 }
	
.LOOP $label$47:
	$9 = ($9 + [-24])
	$13 = *($9)
	*($9) = [0]
	if ( ($13 == 0) ){ goto $label$48 }
	CALL _ZdlPv($13)
	
.LABEL $label$48
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$47 }
	$9 = *(($5 + [400]))
	goto $label$45 
	
.LABEL $label$46
	$9 = $14
	
.LABEL $label$45
	*($10) = $14
	CALL _ZdlPv($9)
	
.LABEL $label$5
	$7 = *($5 + [584])
	
.LABEL $label$4
	$1 = *($5 + [576])
	if ( ((int_64)$1 == (int_64))((int_64)0 - $7)) ){ goto $label$53 }
	$16 = *(($6 + [64]))
	$15 = ((int_64)$7 + (int_64)$1)
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17108])
	$7 = (uint_64)$16 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$56:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$57 }
	$7 = $1
	$13 = [1]
	$14 = $9
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$57
	$7 = $1
	
.LOOP $label$58:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$55 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$13 = ((int_32)$9 < (int_32)[6])
	$14 = ($9 + [1])
	$9 = $14
	if ( $13 ){ goto $label$58 }
	$13 = [1]
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	$13 = [0]
	
.LABEL $label$54
	CALL eosio_assert($13, [17157])
	$7 = *($0)
	*($5 + [380]) = [6]
	*($5 + [376]) = [17177]
	*($5 + [24]) = *($5 + [376])
	*($5 + [448]) = *(CALL $17(($5 + [80]), ($5 + [24])))
	*($5 + [440]) = $7
	*($5 + [376]) = [17183]
	*($5 + [380]) = [8]
	*($5 + [16]) = *($5 + [376])
	$7 = *(CALL $17(($5 + [80]), ($5 + [16])))
	*((($5 + [800]) + [8])) = [0]
	*($5 + [800]) = (int_64)0
	$9 = CALL $143([16829])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$52 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$61 }
	*($5 + [800]) = ($9 << [1])
	$13 = (($5 + [800]) | [1])
	if ( $9 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	$14 = (($9 + [16]) & [-16])
	$13 = CALL _Znwj($14)
	*($5 + [800]) = ($14 | [1])
	*($5 + [808]) = $13
	*($5 + [804]) = $9
	
.LABEL $label$60
	CALL memcpy($13, [16829], $9)
	
.LABEL $label$59
	*(($13 + $9)) = [0]
	$1 = *(($6 + [8]))
	*(($5 + [104])) = $16
	$9 = (($5 + [800]) + [8])
	*(($5 + [120])) = *($9)
	*($9) = [0]
	*($5 + [80]) = *($0)
	$16 = *($5 + [800])
	*($5 + [800]) = (int_64)0
	*($5 + [96]) = $15
	*($5 + [112]) = $16
	*($5 + [88]) = $1
	$9 = CALL $18(($5 + [376]), ($5 + [440]), (int_64)6138663591592764928, $7, ($5 + [80]))
	CALL $19(($5 + [360]), $9)
	$13 = *($5 + [360])
	CALL send_inline($13, (*($5 + [364]) - $13))
	$13 = *($5 + [360])
	if ( ($13 == 0) ){ goto $label$62 }
	*($5 + [364]) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$62
	$13 = *($9 + [28])
	if ( ($13 == 0) ){ goto $label$63 }
	*(($9 + [32])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$63
	$13 = *($9 + [16])
	if ( ($13 == 0) ){ goto $label$64 }
	*(($9 + [20])) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$64
	if ( ((*(($5 + [112])) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$65
	if ( ((*($5 + [800]) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*(($5 + [808])))
	
.LABEL $label$53
	$7 = *($0)
	*($5 + [100]) = $6
	*($5 + [84]) = ($5 + [584])
	*($5 + [80]) = ($5 + [600])
	*($5 + [88]) = ($5 + [560])
	*($5 + [92]) = ($5 + [598])
	*($5 + [96]) = ($5 + [512])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [17786])
	CALL $28(($5 + [520]), $8, $7, ($5 + [80]))
	*(($14 = ($5 + [472]))) = [0]
	*($5 + [456]) = (int_64)-1
	*($5 + [464]) = (int_64)0
	*($5 + [476]) = [0]
	$7 = *($0)
	*($5 + [440]) = $7
	*($5 + [448]) = $7
	*($5 + [80]) = $6
	*($5 + [108]) = $3
	*($5 + [112]) = $2
	*($5 + [116]) = $4
	*($5 + [84]) = ($5 + [632])
	*($5 + [88]) = ($5 + [598])
	*($5 + [92]) = ($5 + [584])
	*($5 + [96]) = ($5 + [576])
	*($5 + [100]) = ($5 + [560])
	*($5 + [104]) = ($5 + [575])
	*($5 + [360]) = $7
	CALL eosio_assert(((int_64)$7 == (int_64)CALL $fimport$3()), [17577])
	*($5 + [380]) = ($5 + [80])
	*($5 + [376]) = ($5 + [440])
	*($5 + [384]) = ($5 + [360])
	*(($9 = CALL _Znwj([304])) + [16]) = (int_64)0
	*($9 + [8]) = (int_64)0
	*($9 + [36 align=4]) = (int_64)0
	*($9 + [44 align=4]) = (int_64)0
	*($9 + [52 align=4]) = (int_64)0
	*($9 + [64]) = (int_64)0
	*($9 + [72]) = (int_64)0
	*($9 + [96]) = (int_64)0
	*($9 + [104]) = (int_64)0
	*($9 + [112]) = (int_64)0
	*($9 + [120]) = (int_64)0
	*($9 + [176]) = [0]
	*($9 + [288]) = ($5 + [440])
	CALL $29(($5 + [376]), $9)
	*($5 + [800]) = $9
	$7 = *($9)
	*($5 + [376]) = $7
	$8 = *($9 + [292])
	*($5 + [352]) = $8
	$10 = ($5 + [468])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($14)) ){ goto $label$67 }
	*($13 + [8]) = $7
	*($13 + [16]) = $8
	*($5 + [800]) = [0]
	*($13) = $9
	*($10) = ($13 + [24])
	$9 = *($5 + [800])
	*($5 + [800]) = [0]
	if ( ($9 == 0) ){ goto $label$66 }
	goto $label$51 
	
.LABEL $label$67
	CALL $30(($5 + [464]), ($5 + [800]), ($5 + [376]), ($5 + [352]))
	$9 = *($5 + [800])
	*($5 + [800]) = [0]
	if ( $9 ){ goto $label$51 }
	
.LABEL $label$66
	if ( ((int_32)*($5 + [564]) != (int_32)*($5 + [560])) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	CALL $110(($5 + [800]))
	
.LABEL $label$51
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($9 + [56])))
	
.LABEL $label$68
	if ( ((*($9 + [36]) & [1]) == 0) ){ goto $label$69 }
	CALL _ZdlPv(*(($9 + [44])))
	
.LABEL $label$69
	CALL _ZdlPv($9)
	if ( ((int_32)*($5 + [564]) == (int_32)*($5 + [560])) ){ goto $label$49 }
	
.LABEL $label$50
	$7 = *($5 + [632])
	if ( (uint_64)($7 <= (int_64)5) ){ goto $label$49 }
	*($5 + [376]) = ((int_64)$7 + (int_64)-5)
	*($5 + [360]) = ($5 + [440])
	CALL $31(($5 + [80]), ($5 + [360]), ($5 + [376]))
	$9 = *($5 + [84])
	if ( ($9 == 0) ){ goto $label$49 }
	if ( ((int_64)*($5 + [376]) != (int_64)*($9 + [24])) ){ goto $label$49 }
	$13 = *($5 + [80])
	
.LOOP $label$70:
	if ( ((int_64)*($9 + [24]) != (int_64)*($5 + [376])) ){ goto $label$49 }
	*($5 + [80]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $13))
	CALL eosio_assert([1], [18028])
	CALL $32(($5 + [80]))
	CALL $33(*($5 + [360]), $9)
	$7 = *($5 + [80])
	$13 = (CASTING uint_32)(uint_64 $7)
	$9 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	if ( $9) ){ goto $label$70 }
	
.LABEL $label$49
	$7 = CALL current_time()
	*((($5 + [376]) + [28])) = (int_64)0
	*(($5 + [420])) = (int_64)0
	*(($5 + [428])) = (int_64)0
	*($5 + [388]) = [0]
	*($5 + [392]) = [0]
	*($5 + [396 align=4]) = (int_64)0
	*($5 + [412 align=4]) = (int_64)0
	*($5 + [376]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	$7 = *($0)
	*($5 + [364]) = [6]
	*($5 + [360]) = [17177]
	*($5 + [8]) = *($5 + [360])
	*($5 + [368]) = *(CALL $17(($5 + [80]), ($5 + [8])))
	*($5 + [360]) = $7
	*($5 + [804]) = [10]
	*($5 + [800]) = [17197]
	*($5) = *($5 + [800])
	*($5 + [352]) = *(CALL $17(($5 + [80]), $5))
	$16 = *(($6 + [64]))
	$17 = *($5 + [584])
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17108])
	$8 = ($6 + [40])
	$10 = ($6 + [28])
	$7 = (uint_64)$16 >> (uint_64)(int_64)8)
	$24 = ($5 + [412])
	$9 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$74 }
	$7 = $1
	$13 = [1]
	$14 = $9
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$74
	$7 = $1
	
.LOOP $label$75:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$13 = ((int_32)$9 < (int_32)[6])
	$14 = ($9 + [1])
	$9 = $14
	if ( $13 ){ goto $label$75 }
	$13 = [1]
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$13 = [0]
	
.LABEL $label$71
	CALL eosio_assert($13, [17157])
	$15 = *(($6 + [64]))
	$19 = *($5 + [576])
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17108])
	$7 = (uint_64)$15 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$78:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$77 }
	$1 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$79 }
	$7 = $1
	$13 = [1]
	$14 = $9
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$78 }
	goto $label$76 
	
.LABEL $label$79
	$7 = $1
	
.LOOP $label$80:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$77 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$13 = ((int_32)$9 < (int_32)[6])
	$14 = ($9 + [1])
	$9 = $14
	if ( $13 ){ goto $label$80 }
	$13 = [1]
	$9 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$78 }
	goto $label$76 
	
.LABEL $label$77
	$13 = [0]
	
.LABEL $label$76
	CALL eosio_assert($13, [17157])
	*($5 + [80]) = *($6)
	*($5 + [88]) = *(($6 + [8]))
	*($5 + [96]) = *(($6 + [16]))
	*($5 + [104]) = *($5 + [632])
	*($5 + [112]) = *(($6 + [24]))
	CALL $111((($5 + [80]) + [36]), $10)
	CALL $111(($5 + [128]), $8)
	*((($5 + [80]) + [72])) = *(($12 + [8]))
	*($5 + [144]) = *($12)
	$7 = *(($6 + [72]))
	*(($5 + [184])) = $16
	*(($5 + [200])) = $15
	*(($5 + [216])) = *(($3 + [8]))
	*(($5 + [224])) = *(($3 + [16]))
	*(($5 + [232])) = *(($3 + [24]))
	*($5 + [168]) = *($5 + [598])
	*($5 + [176]) = $17
	*($5 + [192]) = $19
	*($5 + [208]) = *($3)
	*($5 + [160]) = $7
	CALL memcpy(($5 + [240]), $2, [72])
	*(($5 + [344])) = *(($4 + [24]))
	*(($5 + [336])) = *(($4 + [16]))
	*(($5 + [328])) = *(($4 + [8]))
	*($5 + [320]) = *($4)
	$9 = *(($5 + [416]))
	if ( ((uint_32)$9 >= (uint_32)*(($5 + [420]))) ){ goto $label$85 }
	$7 = *($0)
	*($9 + [8]) = *($5 + [352])
	*($9) = $7
	*($9 + [16 align=4]) = (int_64)0
	$14 = [0]
	*(($12 = ($9 + [24]))) = [0]
	$13 = CALL _Znwj([16])
	*($9 + [16]) = $13
	$4 = ($13 + [16])
	*($12) = $4
	*(($13 + [8])) = *((($5 + [360]) + [8]))
	*($13) = *($5 + [360])
	*(($9 + [20])) = $4
	*($9 + [28 align=4]) = (int_64)0
	*(($9 + [36])) = [0]
	*($5 + [816]) = [32]
	*($5 + [824]) = ($5 + [816])
	*($5 + [800]) = ($5 + [80])
	CALL $34(($5 + [800]), ($5 + [824]))
	$13 = *($5 + [816])
	if ( ($13 == 0) ){ goto $label$84 }
	$12 = ($9 + [28])
	CALL $35($12, $13)
	$14 = *(($9 + [32]))
	$9 = *($12)
	goto $label$83 
	
.LABEL $label$85
	CALL $36($24, ($5 + [360]), $0, ($5 + [352]), ($5 + [80]))
	$9 = [1]
	if ( (*($5 + [128]) & [1]) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$84
	$9 = [0]
	
.LABEL $label$83
	*($5 + [804]) = $9
	*($5 + [800]) = $9
	*($5 + [808]) = $14
	*($5 + [816]) = ($5 + [800])
	*($5 + [824]) = ($5 + [80])
	CALL $37(($5 + [824]), ($5 + [816]))
	*(($9 = (($5 + [376]) + [40]))) = (*($9) + [40])
	$9 = [1]
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$81 }
	
.LABEL $label$82
	CALL _ZdlPv(*(($5 + [136])))
	
.LABEL $label$81
	if ( ((*($5 + [116]) & $9) == 0) ){ goto $label$86 }
	CALL _ZdlPv(*(($5 + [124])))
	
.LABEL $label$86
	*(($5 + [396])) = [5]
	*($5 + [88]) = (int_64)0
	*($5 + [80]) = *($6)
	$7 = *($0)
	CALL $38(($5 + [360]), ($5 + [376]))
	$9 = *($5 + [360])
	CALL send_deferred(($5 + [80]), $7, $9, (*($5 + [364]) - $9), [0])
	$9 = *($5 + [360])
	if ( ($9 == 0) ){ goto $label$87 }
	*($5 + [364]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$87
	CALL eosio_assert($11, [18028])
	CALL eosio_assert($11, [18062])
	$9 = CALL db_next_i64(*($6 + [84]), ($5 + [80]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$88 }
	CALL $16(($5 + [720]), $9)
	
.LABEL $label$88
	CALL $39(($5 + [720]), $6)
	CALL $40(($5 + [376]))
	$14 = *($5 + [464])
	if ( ($14 == 0) ){ goto $label$89 }
	$12 = ($5 + [468])
	$13 = *($12)
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$91 }
	
.LOOP $label$92:
	$13 = ($13 + [-24])
	$9 = *($13)
	*($13) = [0]
	if ( ($9 == 0) ){ goto $label$93 }
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$94 }
	CALL _ZdlPv(*(($9 + [56])))
	
.LABEL $label$94
	if ( ((*($9 + [36]) & [1]) == 0) ){ goto $label$95 }
	CALL _ZdlPv(*(($9 + [44])))
	
.LABEL $label$95
	CALL _ZdlPv($9)
	
.LABEL $label$93
	if ( ((int_32)$14 != (int_32)$13) ){ goto $label$92 }
	$9 = *(($5 + [464]))
	goto $label$90 
	
.LABEL $label$91
	$9 = $14
	
.LABEL $label$90
	*($12) = $14
	CALL _ZdlPv($9)
	
.LABEL $label$89
	$12 = *($5 + [544])
	if ( ($12 == 0) ){ goto $label$96 }
	$6 = ($5 + [548])
	$9 = *($6)
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$98 }
	
.LOOP $label$99:
	$9 = ($9 + [-24])
	$13 = *($9)
	*($9) = [0]
	if ( ($13 == 0) ){ goto $label$100 }
	$14 = *($13 + [28])
	if ( ($14 == 0) ){ goto $label$101 }
	*(($13 + [32])) = $14
	CALL _ZdlPv($14)
	
.LABEL $label$101
	CALL _ZdlPv($13)
	
.LABEL $label$100
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$99 }
	$9 = *(($5 + [544]))
	goto $label$97 
	
.LABEL $label$98
	$9 = $12
	
.LABEL $label$97
	*($6) = $12
	CALL _ZdlPv($9)
	
.LABEL $label$96
	$9 = *($5 + [560])
	if ( ($9 == 0) ){ goto $label$102 }
	*($5 + [564]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$102
	$14 = *($5 + [744])
	if ( ($14 == 0) ){ goto $label$103 }
	$12 = ($5 + [748])
	$13 = *($12)
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$105 }
	
.LOOP $label$106:
	$13 = ($13 + [-24])
	$9 = *($13)
	*($13) = [0]
	if ( ($9 == 0) ){ goto $label$107 }
	if ( ((*($9 + [40]) & [1]) == 0) ){ goto $label$108 }
	CALL _ZdlPv(*(($9 + [48])))
	
.LABEL $label$108
	if ( ((*($9 + [28]) & [1]) == 0) ){ goto $label$109 }
	CALL _ZdlPv(*(($9 + [36])))
	
.LABEL $label$109
	CALL _ZdlPv($9)
	
.LABEL $label$107
	if ( ((int_32)$14 != (int_32)$13) ){ goto $label$106 }
	$9 = *(($5 + [744]))
	goto $label$104 
	
.LABEL $label$105
	$9 = $14
	
.LABEL $label$104
	*($12) = $14
	CALL _ZdlPv($9)
	
.LABEL $label$103
	$14 = *($5 + [784])
	if ( ($14 == 0) ){ goto $label$110 }
	$12 = ($5 + [788])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$14) ){ goto $label$112 }
	
.LOOP $label$113:
	$9 = ($9 + [-24])
	$13 = *($9)
	*($9) = [0]
	if ( ($13 == 0) ){ goto $label$114 }
	CALL _ZdlPv($13)
	
.LABEL $label$114
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$113 }
	$9 = *(($5 + [784]))
	goto $label$111 
	
.LABEL $label$112
	$9 = $14
	
.LABEL $label$111
	*($12) = $14
	CALL _ZdlPv($9)
	
.LABEL $label$110
	$global$0 = ($5 + [832])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17549])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [28 align=4]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [44 align=4]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [80]) = $0
	CALL $83(($3 + [32]), $5)
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $53(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$10
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [36])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17350])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17486])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17404])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17486])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[33]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [34])
	$3 = (*($0 + [4]) + [34])
	*($0 + [4]) = $3
	*($2 + [7]) = *($1 + [50])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [17191])
	CALL memcpy(*($0 + [4]), ($2 + [7]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [32]) = (int_64)0
	$4 = [0]
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2(($2 + [8]), $5)
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [16658])
	$6 = *($0)
	CALL eosio_assert($5, [17786])
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($2 + [8])), [17821])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$3()), [17867])
	*($4 + [50]) = $1
	$3 = *($4)
	CALL eosio_assert([1], [17918])
	*($2 + [152]) = (($2 + [48]) + [83])
	*($2 + [148]) = ($2 + [48])
	*($2 + [144]) = ($2 + [48])
	CALL $10(($2 + [144]), $4)
	CALL db_update_i64(*($4 + [92]), $6, ($2 + [48]), [83])
	$4 = ($2 + [24])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$3 }
	$5 = ($2 + [36])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $1
	
.LABEL $label$4
	*($5) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($2 + [160])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [63]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	*($2 + [40]) = (int_64)0
	$1 = [0]
	$4 = CALL db_lowerbound_i64($3, $3, (int_64)-4131301023690375168, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $13(($2 + [16]), $4)
	
.LABEL $label$1
	$3 = *($0)
	*($2 + [8]) = ($2 + [63])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [17786])
	CALL $14(($2 + [16]), $1, $3, ($2 + [8]))
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($1 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17549])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [44 align=4]) = (int_64)0
	*($5 + [52]) = [0]
	*($5 + [56]) = $0
	CALL $78(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17734])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4131301023690375168)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17680])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17680])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $13(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $35($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $41(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $35($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17191])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17191])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $68(CALL $67($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $58 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [17572])
	CALL memcpy($4, $2, [1])
	$8 = *($4)
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $149($2)
	
.LABEL $label$5
	$global$0 = ($4 + [32])
	return [1]
}

int_32 .FUNC $59 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [80]) + [32]))) = [0]
	*(($8 = (($4 + [80]) + [24]))) = (int_64)0
	*(($9 = (($4 + [80]) + [16]))) = (int_64)0
	*(($10 = (($4 + [80]) + [8]))) = (int_64)0
	*($4 + [80]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[33]), [17572])
	CALL memcpy(($4 + [80]), $2, [34])
	*(($4 + [68])) = ($2 + [34])
	*((($4 + [48]) + [24])) = ($2 + $7)
	*($4 + [56]) = $1
	*($4 + [48]) = $0
	*($4 + [64]) = $2
	*(($11 = (($4 + [120]) + [32]))) = *($3)
	*(($3 = (($4 + [120]) + [24]))) = *($8)
	*(($8 = (($4 + [120]) + [16]))) = *($9)
	*(($9 = (($4 + [120]) + [8]))) = *($10)
	*($4 + [120]) = *($4 + [80])
	*((($4 + [160]) + [32])) = *($11)
	*((($4 + [160]) + [24])) = *($3)
	*((($4 + [160]) + [16])) = *($8)
	*((($4 + [160]) + [8])) = *($9)
	*($4 + [160]) = *($4 + [120])
	$3 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	*(($5 = (($4 + [200]) + [32]))) = *((($4 + [160]) + [32]))
	$0 = *((($4 + [160]) + [24]))
	*((($4 + [200]) + [24])) = $0
	$1 = *((($4 + [160]) + [16]))
	*((($4 + [200]) + [16])) = $1
	$12 = *((($4 + [160]) + [8]))
	*((($4 + [200]) + [8])) = $12
	*((($4 + [8]) + [8])) = $12
	*((($4 + [8]) + [16])) = $1
	*((($4 + [8]) + [24])) = $0
	*((($4 + [8]) + [32])) = *($5)
	$0 = *($4 + [160])
	*($4 + [8]) = $0
	*($4 + [200]) = $0
	CALL void $3((int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $149($2)
	
.LABEL $label$5
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $50 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_64 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_32 $15)
{
	CALL require_auth(*($0))
	CALL require_recipient($2)
}

void .FUNC $51 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [336])
	$global$0 = $5
	*($5 + [208]) = $4
	*($5 + [216]) = $1
	*($5 + [206]) = $2
	CALL require_auth($1)
	*((($5 + [160]) + [32])) = [0]
	*($5 + [176]) = (int_64)-1
	$1 = *($0)
	*($5 + [160]) = $1
	*($5 + [168]) = $1
	*($5 + [184]) = (int_64)0
	$2 = [0]
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)7235159551873908736, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $2(($5 + [160]), $6)
	
.LABEL $label$1
	$7 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($7, [16658])
	CALL eosio_assert(((int_32)*($2 + [50]) ^ (int_32)[1]), [16861])
	$9 = ((uint_32)$6 / (uint_32)[100])
	$6 = (($6 - ((int_32)$9 * (int_32)[100])) & [65535])
	$6 = *($5 + [206])
	$8 = ((uint_32)$6 % (uint_32)[10])
	CALL eosio_assert((((int_32)$8 != (int_32)[0]) & (((uint_32)$6 > (uint_32)[99]) & ((uint_32)$6 > (uint_32)[9]))), [16881])
	$6 = ((uint_32)$6 / (uint_32)[10])
	CALL eosio_assert((((int_32)$9 != (int_32)$8) & (((int_32)$6 != (int_32)$8) & ((int_32)$9 != (int_32)$6))), [16906])
	*((($5 + [120]) + [32])) = [0]
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	$1 = *($0)
	*($5 + [120]) = $1
	*($5 + [128]) = $1
	*($5 + [112]) = *($2 + [80])
	*($5 + [104]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL $123(($5 + [56]), *($5 + [112]))
	*(($5 + [48])) = [0]
	*($5 + [40]) = (int_64)0
	$6 = CALL $143([16934])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$17 }
	*($5 + [40]) = ($6 << [1])
	$9 = (($5 + [40]) | [1])
	$8 = $9
	if ( $6 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$9 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [40]) = ($9 | [1])
	*($5 + [48]) = $8
	*($5 + [44]) = $6
	$9 = (($5 + [40]) | [1])
	
.LABEL $label$16
	CALL memcpy($8, [16934], $6)
	
.LABEL $label$15
	*(($8 + $6)) = [0]
	$6 = *($5 + [40])
	$8 = ($6 & [1])
	$6 = CALL $118(($5 + [56]), ( *($5 + [48]) ? $9 : $8 ), ( *($5 + [44]) ? uint_32($6 >> [1]) : $8 ))
	$8 = ($6 + [8])
	*((($5 + [72]) + [8])) = *($8)
	*($5 + [72]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	$6 = *($3)
	$8 = ($6 & [1])
	$6 = CALL $118(($5 + [72]), ( *($3 + [8]) ? ($3 + [1]) : $8 ), ( *($3 + [4]) ? uint_32($6 >> [1]) : $8 ))
	$8 = ($6 + [8])
	*((($5 + [320]) + [8])) = *($8)
	*($5 + [320]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	*((($5 + [24]) + [8])) = [0]
	*($5 + [24]) = (int_64)0
	$6 = CALL $143([16934])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$20 }
	*($5 + [24]) = ($6 << [1])
	$9 = (($5 + [24]) | [1])
	$8 = $9
	if ( $6 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$9 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($5 + [24]) = ($9 | [1])
	*($5 + [32]) = $8
	*($5 + [28]) = $6
	$9 = (($5 + [24]) | [1])
	
.LABEL $label$19
	CALL memcpy($8, [16934], $6)
	
.LABEL $label$18
	*(($8 + $6)) = [0]
	$6 = *($5 + [24])
	$8 = ($6 & [1])
	$6 = CALL $118(($5 + [320]), ( *($5 + [32]) ? $9 : $8 ), ( *($5 + [28]) ? uint_32($6 >> [1]) : $8 ))
	$8 = ($6 + [8])
	*((($5 + [224]) + [8])) = *($8)
	*($5 + [224]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	CALL $123(($5 + [8]), *($5 + [104]))
	$6 = *($5 + [8])
	$8 = ($6 & [1])
	$6 = CALL $118(($5 + [224]), ( *($5 + [16]) ? (($5 + [8]) | [1]) : $8 ), ( *($5 + [12]) ? uint_32($6 >> [1]) : $8 ))
	$8 = ($6 + [8])
	*((($5 + [88]) + [8])) = *($8)
	*($5 + [88]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	if ( (*($5 + [8]) & [1]) ){ goto $label$22 }
	if ( (*($5 + [224]) & [1]) ){ goto $label$21 }
	goto $label$12 
	
.LABEL $label$22
	CALL _ZdlPv(*((($5 + [8]) + [8])))
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$21
	CALL _ZdlPv(*($5 + [232]))
	$6 = [1]
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$14
	CALL $110(($5 + [40]))
	
.LABEL $label$13
	CALL $110(($5 + [24]))
	
.LABEL $label$12
	$6 = [1]
	if ( (*($5 + [24]) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($5 + [320]) & $6) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($5 + [32])))
	if ( ((*($5 + [320]) & $6) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [328]))
	$6 = [1]
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$6 = [1]
	if ( (*($5 + [72]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($5 + [40]) & $6) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [80]))
	if ( ((*($5 + [40]) & $6) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($5 + [48])))
	$6 = [1]
	if ( (*($5 + [56]) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = [1]
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [64]))
	
.LABEL $label$2
	$4 = *($0)
	CALL eosio_assert($7, [17786])
	CALL eosio_assert(((int_32)*($2 + [88]) == (int_32)($5 + [160])), [17821])
	CALL eosio_assert(((int_64)*($5 + [160]) == (int_64)CALL $fimport$3()), [17867])
	*(($8 = ($2 + [80]))) = ((int_64)*($8) + (int_64)1)
	$1 = *($2)
	CALL eosio_assert($6, [17918])
	*($5 + [328]) = (($5 + [224]) + [83])
	*($5 + [324]) = ($5 + [224])
	*($5 + [320]) = ($5 + [224])
	CALL $10(($5 + [320]), $2)
	CALL db_update_i64(*($2 + [92]), $4, ($5 + [224]), [83])
	$2 = ($5 + [176])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$23 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$1 = *($0)
	*($5 + [240]) = $3
	*($5 + [228]) = ($5 + [216])
	*($5 + [224]) = ($5 + [112])
	*($5 + [232]) = ($5 + [208])
	*($5 + [236]) = ($5 + [206])
	*($5 + [244]) = ($5 + [88])
	*($5 + [248]) = ($5 + [104])
	*($5 + [72]) = $1
	CALL eosio_assert(((int_64)*($5 + [120]) == (int_64)CALL $fimport$3()), [17577])
	*($5 + [324]) = ($5 + [224])
	*($5 + [320]) = ($5 + [120])
	*($5 + [328]) = ($5 + [72])
	*(($2 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [28 align=4]) = (int_64)0
	*($2 + [36 align=4]) = (int_64)0
	*($2 + [44 align=4]) = (int_64)0
	*($2 + [56]) = (int_64)0
	*($2 + [64]) = (int_64)0
	*($2 + [80]) = ($5 + [120])
	CALL $52(($5 + [320]), $2)
	*($5 + [56]) = $2
	$1 = *($2)
	*($5 + [320]) = $1
	$6 = *($2 + [84])
	*($5 + [40]) = $6
	$0 = ($5 + [148])
	$3 = *($0)
	if ( ((uint_32)$3 >= (uint_32)*(($5 + [152]))) ){ goto $label$28 }
	*($3 + [8]) = $1
	*($3 + [16]) = $6
	*($5 + [56]) = [0]
	*($3) = $2
	*($0) = ($3 + [24])
	$2 = *($5 + [56])
	*($5 + [56]) = [0]
	if ( ($2 == 0) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL $53(($5 + [144]), ($5 + [56]), ($5 + [320]), ($5 + [40]))
	$2 = *($5 + [56])
	*($5 + [56]) = [0]
	if ( $2 ){ goto $label$26 }
	
.LABEL $label$27
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$26
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($2 + [48])))
	
.LABEL $label$29
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($2 + [36])))
	
.LABEL $label$30
	CALL _ZdlPv($2)
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL _ZdlPv(*($5 + [96]))
	
.LABEL $label$24
	$6 = *($5 + [144])
	if ( ($6 == 0) ){ goto $label$31 }
	$0 = ($5 + [148])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$35 }
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($2 + [48])))
	
.LABEL $label$36
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($2 + [36])))
	
.LABEL $label$37
	CALL _ZdlPv($2)
	
.LABEL $label$35
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$34 }
	$2 = *(($5 + [144]))
	goto $label$32 
	
.LABEL $label$33
	$2 = $6
	
.LABEL $label$32
	*($0) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$31
	$6 = *($5 + [184])
	if ( ($6 == 0) ){ goto $label$38 }
	$0 = ($5 + [188])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$40 }
	
.LOOP $label$41:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$42 }
	CALL _ZdlPv($3)
	
.LABEL $label$42
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$41 }
	$2 = *(($5 + [184]))
	goto $label$39 
	
.LABEL $label$40
	$2 = $6
	
.LABEL $label$39
	*($0) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$38
	$global$0 = ($5 + [336])
	(unreachable)
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [24]) = *(*($4 + [12]))
	*($1 + [16]) = *(*($4 + [8]))
	$5 = *($0)
	CALL $113(($1 + [28]), *($4 + [16]))
	CALL $113(($1 + [40]), *($4 + [20]))
	*(($1 + [64])) = *([0] + [8200])
	*($1 + [56]) = *([0] + [8192])
	*($1 + [72]) = *(*($4 + [24]))
	$4 = *($1 + [28])
	$6 = ( *(($1 + [32])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [50])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$6 = *(($1 + [40]))
	$6 = ( *(($1 + [44])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$4 = ($6 + $4)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $146($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $95($3, $1)
	$7 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($5 + [8]), (int_64)3617214760481193984, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $149($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$11
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [36])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [18092])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18137])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18187])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [28])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [28])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = (*($2) + [2])
	*(($2 = *($1))) = $1
	$3 = *($0 + [36])
	$0 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [40])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *(($0 + [36]))
	$3 = ( *(($0 + [40])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$3 = *($0 + [48])
	$4 = (CASTING uint_64)(uint_32 ( *(($0 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *(($0 + [48]))
	$3 = ( *(($0 + [52])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	*($2) = ($1 + [90])
	$1 = ($1 + [187])
	$4 = *($0 + [160])
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL memory()
	*($3 + [132]) = [11]
	*($3 + [128]) = [17538]
	*($3 + [64]) = *($3 + [128])
	CALL $17(($3 + [136]), ($3 + [64]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [132]) = [8]
	*($3 + [128]) = [17183]
	*($3 + [56]) = *($3 + [128])
	CALL $17(($3 + [136]), ($3 + [56]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [1]
	*($3) = *($3 + [120])
	CALL $57($0, (int_64)6138663591592764928, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-4994130327835885569) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-7297699337563275264) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-6533249255602651136) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-6217917475468607488) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [2]
	*($3 + [16]) = *($3 + [104])
	CALL $58($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4994130327835885568) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)4229853260945440768) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421049960203129232) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [8]) = *($3 + [112])
	CALL $59($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [92]) = [0]
	*($3 + [88]) = [4]
	*($3 + [32]) = *($3 + [88])
	CALL $59($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [84]) = [0]
	*($3 + [80]) = [5]
	*($3 + [40]) = *($3 + [80])
	CALL $60($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [100]) = [0]
	*($3 + [96]) = [6]
	*($3 + [24]) = *($3 + [96])
	CALL $58($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [76]) = [0]
	*($3 + [72]) = [7]
	*($3 + [48]) = *($3 + [72])
	CALL $61($1, $1, ($3 + [48]))
	
.LABEL $label$1
	CALL $129([0])
	$global$0 = ($3 + [144])
}

int_32 .FUNC $57 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $62(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $63(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $149($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $117($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $127($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $114($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $110 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_64 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $138($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $128()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $138($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18321]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $137($0, (int_64)0)
	*(CALL $128()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $138($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $138($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $138($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $138($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18321])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18321]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18321]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $138($0)
	$5 = *(($6 + [18321]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $138($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18321]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16649]))
	$8 = (int_64)0
	$5 = *(($6 + [18321]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18321]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $138($0)
	$5 = *(($6 + [18321]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $138($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18321]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $137($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18321]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18321]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $138($0) + [18321]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $128()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $128()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $128()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $114($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $142(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5 + [16])
	*($1 + [32]) = *($5 + [24])
	*($1 + [24]) = *(*($4 + [4]))
	$6 = *($0)
	CALL $113(($1 + [36]), ($5 + [28]))
	CALL $113(($1 + [48]), (*($4) + [40]))
	$5 = *($4)
	*($1 + [64]) = *($5 + [56])
	*(($1 + [72])) = *(($5 + [64]))
	*($1 + [88]) = *(*($4 + [8]))
	$5 = *($4)
	*($1 + [80]) = *($5 + [72])
	$7 = *(($5 + [64]))
	$8 = *(*($4 + [12]))
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17108])
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $10
	$11 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $11 ){ goto $label$5 }
	$11 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [17157])
	*(($1 + [104])) = $7
	*($1 + [96]) = $8
	$7 = *((*($4) + [64]))
	$8 = *(*($4 + [16]))
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17108])
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$9 = $10
	$11 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$9 = $10
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $11 ){ goto $label$10 }
	$11 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$11 = [0]
	
.LABEL $label$6
	CALL eosio_assert($11, [17157])
	*(($1 + [120])) = $7
	*($1 + [112]) = $8
	$5 = *($4 + [20])
	*($1 + [128]) = ((int_32)*($5 + [4]) != (int_32)*($5))
	*($1 + [129]) = *(*($4 + [24]))
	$5 = *($4 + [28])
	*(($1 + [168])) = *(($5 + [24]))
	*(($1 + [160])) = *(($5 + [16]))
	*(($1 + [152])) = *(($5 + [8]))
	*($1 + [144]) = *($5)
	CALL memcpy(($1 + [176]), *($4 + [32]), [69])
	$5 = *($4 + [36])
	*($1 + [256]) = *($5)
	*(($1 + [280])) = *(($5 + [24]))
	*(($1 + [272])) = *(($5 + [16]))
	*(($1 + [264])) = *(($5 + [8]))
	$5 = *(($1 + [36]))
	$11 = ( *(($1 + [40])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($11 + [223])
	$9 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$11:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$11 }
	$11 = *(($1 + [48]))
	$11 = ( *(($1 + [52])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$5 = ($11 + $5)
	$9 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$12:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$12 }
	$9 = *($1 + [176])
	
.LOOP $label$13:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$13 }
	if ( ($5 <= [513]) ){ goto $label$15 }
	$11 = CALL $146($5)
	goto $label$14 
	
.LABEL $label$15
	$11 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$14
	*($3 + [12]) = $11
	*($3 + [8]) = $11
	*($3 + [16]) = ($11 + $5)
	CALL $91(($3 + [8]), $1)
	$9 = *($1)
	*($1 + [292]) = CALL db_store_i64(*($6 + [8]), (int_64)4229853544465301504, *(*($0 + [8])), $9, $11, $5)
	if ( ($5 <= [513]) ){ goto $label$16 }
	CALL $149($11)
	
.LABEL $label$16
	if ( (uint_64)($9 <= *($6 + [16])) ){ goto $label$17 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	$5 = ($6 + [8])
	$9 = *($5)
	$11 = *(($0 + [8]))
	$10 = *($11)
	$7 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [296]) = CALL db_idx64_store($9, (int_64)4229853544465301504, $10, $7, ($3 + [24]))
	$9 = *($11)
	$10 = *($5)
	$7 = *($1)
	*($3 + [24]) = *(($1 + [24]))
	*(($1 + [300])) = CALL db_idx64_store($10, (int_64)4229853544465301505, $9, $7, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17867])
	*($1 + [16]) = ((int_64))(*(*($3)) - *(*($3 + [4]))) + (int_64)*($1 + [16]))
	$6 = *($1)
	$9 = *($7)
	$7 = *($3 + [8])
	$8 = *($7 + [4])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$2 }
	$10 = ($1 + [28])
	$11 = $6
	goto $label$1 
	
.LABEL $label$2
	*($1 + [24]) = [1]
	*($1 + [8]) = *(*($3 + [12]))
	$10 = ($1 + [28])
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$3 }
	CALL $90($10, $9, $8)
	
.LABEL $label$3
	$12 = *((*($3 + [20]) + [64]))
	$13 = *(*($3 + [16]))
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17108])
	$11 = (uint_64)$12 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$14 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$11 = $14
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$11 = $14
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$8 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [17157])
	*(($1 + [48])) = $12
	*($1 + [40]) = $13
	$11 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)$11), [17918])
	$8 = *($10)
	$7 = *(($1 + [32]))
	$10 = ($7 - $8)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [3]))
	$3 = [25]
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	$3 = (($10 & [-8]) + $3)
	
.LABEL $label$10
	$7 = ($3 + [16])
	if ( ($7 <= [513]) ){ goto $label$12 }
	$3 = CALL $146($7)
	goto $label$11 
	
.LABEL $label$12
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$11
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	CALL $81($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$15 }
	CALL $149($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$13 }
	
.LABEL $label$14
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$13
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
}

void .FUNC $55 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [160])
	$global$0 = $5
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	$7 = *($4)
	$6 = CALL $143([17007])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	if ( (CALL $119($4, [0], [-1], [17007], $6) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert(CALL $fimport$13($1), [17008])
	CALL eosio_assert(((int_64)*($0) == (int_64)$2), [17028])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*([0] + [8200])), [17291])
	CALL eosio_assert(((int_64)*($3) == (int_64)*([0] + [8192])), [17075])
	$3 = *($4)
	if ( ($3 & [1]) ){ goto $label$4 }
	$3 = uint_32($3 >> [1])
	$8 = ($4 + [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *(($4 + [4]))
	$8 = *($4 + [8])
	
.LABEL $label$3
	$6 = [0]
	$7 = CALL $143([17106])
	if ( ($7 == 0) ){ goto $label$5 }
	$9 = ($8 + $3)
	if ( ((int_32)$3 < (int_32)$7) ){ goto $label$7 }
	$6 = $8
	
.LOOP $label$8:
	$3 = (($3 - $7) + [1])
	if ( ($3 == 0) ){ goto $label$7 }
	$3 = CALL $141($6, [45], $3)
	if ( ($3 == 0) ){ goto $label$7 }
	if ( (CALL $142($3, [17106], $7) == 0) ){ goto $label$6 }
	$6 = ($3 + [1])
	$3 = ($9 - $6)
	if ( ((int_32)$3 >= (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	$3 = $9
	
.LABEL $label$6
	$6 = ( [-1] ? ($3 - $8) : ((int_32)$3 == (int_32)$9) )
	
.LABEL $label$5
	$8 = CALL $112(($5 + [144]), $4, [0], $6, $4)
	$10 = CALL $122($8, [0], [10])
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$3 = CALL $143([17007])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$15 }
	*($5 + [128]) = ($3 << [1])
	$7 = (($5 + [128]) | [1])
	if ( $3 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$9 = (($3 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($5 + [128]) = ($9 | [1])
	*($5 + [136]) = $7
	*($5 + [132]) = $3
	
.LABEL $label$14
	CALL memcpy($7, [17007], $3)
	
.LABEL $label$13
	*(($7 + $3)) = [0]
	*(($5 + [120])) = [0]
	*($5 + [112]) = (int_64)0
	$3 = CALL $143([17007])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$18 }
	*($5 + [112]) = ($3 << [1])
	$7 = (($5 + [112]) | [1])
	if ( $3 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$9 = (($3 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($5 + [112]) = ($9 | [1])
	*($5 + [120]) = $7
	*($5 + [116]) = $3
	
.LABEL $label$17
	CALL memcpy($7, [17007], $3)
	
.LABEL $label$16
	$9 = [0]
	*(($7 + $3)) = [0]
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$9 }
	$7 = CALL $112(($5 + [96]), $4, ($6 + [1]), [-1], $4)
	$3 = *($5 + [96])
	$11 = *($7 + [8])
	$6 = *($7 + [4])
	$4 = CALL $143([17106])
	if ( ($4 == 0) ){ goto $label$22 }
	$9 = ($3 & [1])
	$3 = ( $6 ? uint_32($3 >> [1]) : $9 )
	if ( ((int_32)$3 < (int_32)$4) ){ goto $label$21 }
	$11 = ( $11 ? ($7 + [1]) : $9 )
	$9 = ($11 + $3)
	$6 = $11
	
.LOOP $label$23:
	$3 = (($3 - $4) + [1])
	if ( ($3 == 0) ){ goto $label$21 }
	$3 = CALL $141($6, [45], $3)
	if ( ($3 == 0) ){ goto $label$21 }
	if ( (CALL $142($3, [17106], $4) == 0) ){ goto $label$24 }
	$6 = ($3 + [1])
	$3 = ($9 - $6)
	if ( ((int_32)$3 >= (int_32)$4) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$21 }
	$9 = ($3 - $11)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$21 }
	
.LABEL $label$22
	CALL $112(($5 + [80]), $7, [0], $9, $7)
	if ( (*($5 + [128]) & [1]) ){ goto $label$20 }
	*($5 + [128]) = [0]
	goto $label$19 
	
.LABEL $label$21
	CALL $113(($5 + [128]), $7)
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$20
	*(*($5 + [136])) = [0]
	*($5 + [132]) = [0]
	
.LABEL $label$19
	CALL $115(($5 + [128]), [0])
	*((($5 + [128]) + [8])) = *((($5 + [80]) + [8]))
	*($5 + [128]) = *($5 + [80])
	CALL $112(($5 + [80]), $7, ($9 + [1]), [-1], $7)
	if ( (*($5 + [112]) & [1]) ){ goto $label$26 }
	*($5 + [112]) = [0]
	goto $label$25 
	
.LABEL $label$26
	*(*($5 + [120])) = [0]
	*($5 + [116]) = [0]
	
.LABEL $label$25
	CALL $115(($5 + [112]), [0])
	*((($5 + [112]) + [8])) = *((($5 + [80]) + [8]))
	*($5 + [112]) = *($5 + [80])
	if ( (*($5 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL $110(($5 + [128]))
	
.LABEL $label$11
	CALL $110(($5 + [112]))
	
.LABEL $label$10
	CALL _ZdlPv(*(($7 + [8])))
	
.LABEL $label$9
	*($5 + [84]) = [0]
	*($5 + [80]) = [17211]
	*($5 + [24]) = *($5 + [80])
	$2 = *(CALL $17(($5 + [96]), ($5 + [24])))
	$4 = ($4 & [1])
	$4 = *($5 + [128])
	$7 = uint_32($4 >> [1])
	$3 = *($5 + [132])
	$6 = CALL $143([17007])
	if ( ((int_32)$6 != (int_32)( $3 ? $7 : $4 )) ){ goto $label$28 }
	if ( (CALL $119(($5 + [128]), [0], [-1], [17007], $6) == 0) ){ goto $label$27 }
	$4 = *($5 + [128])
	$7 = uint_32($4 >> [1])
	$4 = ($4 & [1])
	$3 = *($5 + [132])
	
.LABEL $label$28
	*($5 + [68]) = ( $3 ? $7 : $4 )
	$3 = (($5 + [128]) | [1])
	*($5 + [64]) = ( *($5 + [136]) ? $3 : $4 )
	*($5 + [16]) = *($5 + [64])
	if ( (CALL is_account(*(CALL $17(($5 + [72]), ($5 + [16])))) == 0) ){ goto $label$27 }
	$4 = *($5 + [128])
	$7 = ($4 & [1])
	$6 = ($5 + [136])
	*($5 + [56]) = ( *($6) ? $3 : $7 )
	*($5 + [60]) = ( *($5 + [132]) ? uint_32($4 >> [1]) : $7 )
	*($5 + [8]) = *($5 + [56])
	if ( ((int_64)*(CALL $17(($5 + [96]), ($5 + [8]))) == (int_64)$1) ){ goto $label$27 }
	$4 = *($5 + [128])
	$7 = ($4 & [1])
	*($5 + [48]) = ( *($6) ? $3 : $7 )
	*($5 + [52]) = ( *($5 + [132]) ? uint_32($4 >> [1]) : $7 )
	*($5) = *($5 + [48])
	$2 = *(CALL $17(($5 + [96]), $5))
	
.LABEL $label$27
	$4 = CALL $111(($5 + [32]), ($5 + [112]))
	CALL $51($0, $1, ((CASTING uint_32)(uint_64 $10) & [65535]), $4, $2)
	if ( (*($4) & [1]) ){ goto $label$34 }
	if ( (*($5 + [112]) & [1]) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$32 }
	
.LABEL $label$33
	CALL _ZdlPv(*($5 + [120]))
	$4 = [1]
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$4 = [1]
	if ( (*($5 + [128]) & [1]) ){ goto $label$30 }
	
.LABEL $label$31
	if ( ((*($5 + [144]) & $4) == 0) ){ goto $label$1 }
	goto $label$29 
	
.LABEL $label$30
	CALL _ZdlPv(*($5 + [136]))
	if ( ((*($5 + [144]) & $4) == 0) ){ goto $label$1 }
	
.LABEL $label$29
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [160])
	(unreachable)
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $144(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8208])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $144(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = *($0)
	*($4 + [44]) = [6]
	*($4 + [40]) = [17177]
	*($4 + [32]) = *($4 + [40])
	$6 = *(CALL $17(($4 + [72]), ($4 + [32])))
	*($4 + [44]) = [4]
	*($4 + [40]) = [17207]
	*($4 + [24]) = *($4 + [40])
	$7 = *(CALL $17(($4 + [72]), ($4 + [24])))
	*((($4 + [40]) + [16])) = *(($3 + [8]))
	*($4 + [40]) = $1
	*($4 + [72]) = (int_64)7035937925206713216
	*($4 + [80]) = $7
	*($4 + [48]) = *($3)
	*($4 + [64]) = *($0)
	*(($8 = CALL _Znwj([16]))) = $5
	*($8 + [8]) = $6
	*(($4 + [108])) = [0]
	$9 = ($8 + [16])
	*(($4 + [96])) = $9
	*(($4 + [92])) = $9
	*($4 + [88]) = $8
	*($4 + [100 align=4]) = (int_64)0
	CALL $35(($4 + [100]), [32])
	$8 = *((($4 + [72]) + [32]))
	$9 = *($4 + [100])
	*($4 + [132]) = $9
	*($4 + [128]) = $9
	*($4 + [136]) = $8
	*($4 + [112]) = ($4 + [128])
	*($4 + [120]) = ($4 + [40])
	CALL $42(($4 + [120]), ($4 + [112]))
	CALL $19(($4 + [128]), ($4 + [72]))
	$8 = *($4 + [128])
	CALL send_inline($8, (*($4 + [132]) - $8))
	$8 = *($4 + [128])
	if ( ($8 == 0) ){ goto $label$1 }
	*($4 + [132]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$8 = *($4 + [100])
	if ( ($8 == 0) ){ goto $label$2 }
	*(($4 + [104])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$2
	$8 = *($4 + [88])
	if ( ($8 == 0) ){ goto $label$3 }
	*(($4 + [92])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$3
	$8 = [0]
	*($4 + [44]) = [0]
	*($4 + [40]) = [17211]
	*($4 + [16]) = *($4 + [40])
	if ( ((int_64)*(CALL $17(($4 + [72]), ($4 + [16]))) == (int_64)$2) ){ goto $label$4 }
	$7 = *($0)
	*($4 + [44]) = [6]
	*($4 + [40]) = [17177]
	*($4 + [8]) = *($4 + [40])
	$10 = *(CALL $17(($4 + [72]), ($4 + [8])))
	*($4 + [44]) = [4]
	*($4 + [40]) = [17207]
	*($4) = *($4 + [40])
	$11 = *(CALL $17(($4 + [72]), $4))
	$5 = *($3)
	$6 = *($3 + [8])
	CALL eosio_assert([1], [17108])
	$1 = (uint_64)$6 >> (uint_64)(int_64)8)
	$12 = ((uint_64)((int_64)$5 * (int_64)50) / (uint_64)(int_64)100)
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$1 = $5
	$3 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$1 = $5
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $3 ){ goto $label$9 }
	$3 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$3 = [0]
	
.LABEL $label$5
	CALL eosio_assert($3, [17157])
	*((($4 + [40]) + [16])) = $6
	*($4 + [48]) = $12
	*($4 + [40]) = $2
	*($4 + [72]) = (int_64)7035937925206713216
	*($4 + [80]) = $11
	*($4 + [64]) = *($0)
	*(($8 = CALL _Znwj([16]))) = $7
	*($8 + [8]) = $10
	*(($4 + [108])) = [0]
	$3 = ($8 + [16])
	*(($4 + [96])) = $3
	*(($4 + [92])) = $3
	*($4 + [88]) = $8
	*($4 + [100 align=4]) = (int_64)0
	CALL $35(($4 + [100]), [32])
	$8 = *((($4 + [72]) + [32]))
	$3 = *($4 + [100])
	*($4 + [132]) = $3
	*($4 + [128]) = $3
	*($4 + [136]) = $8
	*($4 + [112]) = ($4 + [128])
	*($4 + [120]) = ($4 + [40])
	CALL $42(($4 + [120]), ($4 + [112]))
	CALL $19(($4 + [128]), ($4 + [72]))
	$8 = *($4 + [128])
	CALL send_inline($8, (*($4 + [132]) - $8))
	$8 = *($4 + [128])
	if ( ($8 == 0) ){ goto $label$10 }
	*($4 + [132]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = *($4 + [100])
	if ( ($8 == 0) ){ goto $label$11 }
	*(($4 + [104])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$8 = *($4 + [88])
	if ( ($8 == 0) ){ goto $label$4 }
	*(($4 + [92])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$4
	$global$0 = ($4 + [144])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [17821])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [17867])
	$6 = *(($1 + [72]))
	$7 = *($1)
	$8 = *(*($3))
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17108])
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $10
	$11 = [1]
	$12 = $3
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $11 ){ goto $label$5 }
	$11 = [1]
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [17157])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [72]))), [17211])
	$9 = ((int_64)*($1 + [64]) + (int_64)$8)
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [17254])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [17273])
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [17918])
	$11 = $4
	$3 = ($11 + [-96])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($11 + [-13])
	CALL $10($5, $1)
	CALL db_update_i64(*($1 + [92]), $2, $3, [83])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $127($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($4 + [64]) = $3
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	*($4 + [60]) = [0]
	$3 = *($1)
	*($4 + [24]) = $3
	*($4 + [32]) = $3
	*($4 + [16]) = ($4 + [24])
	CALL $31(($4 + [72]), ($4 + [16]), ($4 + [64]))
	$1 = *($4 + [76])
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((int_64)*($4 + [64]) != (int_64)*($1 + [24])) ){ goto $label$2 }
	$3 = *($4 + [72])
	*($4 + [8]) = $3
	$1 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ($1) == 0) ){ goto $label$1 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$3:
	if ( ((int_64)*($1 + [24]) != (int_64)*($4 + [64])) ){ goto $label$1 }
	if ( ((int_32)*($1 + [32]) != (int_32)$2) ){ goto $label$4 }
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)*($5)) ){ goto $label$5 }
	*($6) = ($7 + [8])
	*($7) = *($1)
	goto $label$4 
	
.LABEL $label$5
	CALL $23($0, $1)
	
.LABEL $label$4
	CALL $32(($4 + [8]))
	$1 = *($4 + [12])
	if ( $1 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($4 + [12]) = [0]
	*($4 + [8]) = ($4 + [16])
	
.LABEL $label$1
	$0 = *($4 + [48])
	if ( ($0 == 0) ){ goto $label$6 }
	$7 = ($4 + [52])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$11
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$9 }
	$1 = *(($4 + [48]))
	goto $label$7 
	
.LABEL $label$8
	$1 = $0
	
.LABEL $label$7
	*($7) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($4 + [80])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_32 $21
	$4 = ($global$0 - [208])
	$global$0 = $4
	*((($4 + [152]) + [32])) = [0]
	*($4 + [168]) = (int_64)-1
	*($4 + [176]) = (int_64)0
	*($4 + [188]) = [0]
	$5 = *($0)
	*($4 + [152]) = $5
	*($4 + [160]) = $5
	$7 = *($1 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$8 = (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	$9 = (($4 + [32]) + [32])
	$10 = (($4 + [32]) + [16])
	$11 = (($4 + [16]) | [1])
	$12 = (($4 + [152]) + [28])
	$13 = (($4 + [152]) + [24])
	$14 = ($1 + [4])
	$15 = ($4 + [72])
	$16 = ($4 + [116])
	
.LOOP $label$3:
	$5 = *($6)
	if ( ((int_64)$5 == (int_64)$3) ){ goto $label$4 }
	$1 = *($12)
	$17 = *($13)
	if ( ((int_32)$17 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($1 + [-24])
	$18 = *($7)
	if ( ((int_64)*($18) == (int_64)$5) ){ goto $label$7 }
	$1 = $7
	if ( ((int_32)$17 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$17 == (int_32)$1) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($18 + [288]) == (int_32)($4 + [152])), [17977])
	goto $label$5 
	
.LABEL $label$6
	$18 = [0]
	$7 = CALL db_find_i64(*($4 + [152]), *((($4 + [152]) + [8])), (int_64)4229853544465301504, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$18 = CALL $43(($4 + [152]), $7)
	CALL eosio_assert(((int_32)*($18 + [288]) == (int_32)($4 + [152])), [17977])
	
.LABEL $label$5
	*(($19 = (($4 + [136]) + [8]))) = *([0] + [8200])
	*($4 + [136]) = $2
	CALL eosio_assert($8, [17108])
	$5 = (uint_64)*($19) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$20 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$5 = $20
	$21 = [1]
	$1 = $7
	$7 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	$5 = $20
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$1 = ((int_32)$7 < (int_32)[6])
	$17 = ($7 + [1])
	$7 = $17
	if ( $1 ){ goto $label$15 }
	$21 = [1]
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL eosio_assert($21, [17157])
	if ( $18 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert([0], [17157])
	if ( ($18 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$5 = *($0)
	*($4 + [32]) = ($4 + [136])
	CALL eosio_assert([1], [17786])
	CALL $44(($4 + [152]), $18, $5, ($4 + [32]))
	$5 = *($0)
	*($4 + [100]) = [6]
	*($4 + [96]) = [17177]
	*($4 + [8]) = *($4 + [96])
	CALL $17(($4 + [32]), ($4 + [8]))
	*((($4 + [80]) + [8])) = *($4 + [32])
	*($4 + [80]) = $5
	*($4 + [100]) = [8]
	*($4 + [96]) = [17183]
	*($4) = *($4 + [96])
	CALL $17(($4 + [32]), $4)
	$5 = *($4 + [32])
	*(($1 = (($4 + [16]) + [8]))) = [0]
	*($4 + [16]) = (int_64)0
	$7 = CALL $143([16936])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$18 }
	*($4 + [16]) = ($7 << [1])
	$17 = $11
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$21 = (($7 + [16]) & [-16])
	$17 = CALL _Znwj($21)
	*($1) = $17
	*($4 + [16]) = ($21 | [1])
	*($4 + [20]) = $7
	
.LABEL $label$17
	CALL memcpy($17, [16936], $7)
	
.LABEL $label$16
	*(($17 + $7)) = [0]
	$20 = *($18 + [8])
	*($10) = *($4 + [136])
	*(($10 + [8])) = *($19)
	*($9) = *($4 + [16])
	*(($9 + [8])) = *($1)
	*((($4 + [32]) + [8])) = $20
	*($1) = [0]
	*($4 + [32]) = *($0)
	*($4 + [16]) = (int_64)0
	CALL $19(($4 + [192]), CALL $18(($4 + [96]), ($4 + [80]), (int_64)6138663591592764928, $5, ($4 + [32])))
	$7 = *($4 + [192])
	CALL send_inline($7, (*($4 + [196]) - $7))
	$7 = *($4 + [192])
	if ( ($7 == 0) ){ goto $label$19 }
	*($4 + [196]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$19
	$7 = *((($4 + [96]) + [28]))
	if ( ($7 == 0) ){ goto $label$20 }
	*((($4 + [96]) + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$20
	$7 = *((($4 + [96]) + [16]))
	if ( ($7 == 0) ){ goto $label$21 }
	*($16) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$21
	if ( ((*($9) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($15))
	
.LABEL $label$22
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$9
	$7 = *($14)
	
.LABEL $label$4
	$6 = ($6 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$3 }
	$17 = *($4 + [176])
	if ( ($17 == 0) ){ goto $label$2 }
	$18 = ($4 + [180])
	$1 = *($18)
	if ( ((int_32)$1 == (int_32)$17) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = ($1 + [-24])
	$7 = *($1)
	*($1) = [0]
	if ( ($7 == 0) ){ goto $label$26 }
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($7 + [56])))
	
.LABEL $label$27
	if ( ((*($7 + [36]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($7 + [44])))
	
.LABEL $label$28
	CALL _ZdlPv($7)
	
.LABEL $label$26
	if ( ((int_32)$17 != (int_32)$1) ){ goto $label$25 }
	$7 = *(($4 + [176]))
	goto $label$23 
	
.LABEL $label$24
	$7 = $17
	
.LABEL $label$23
	*($18) = $17
	CALL _ZdlPv($7)
	
.LABEL $label$2
	$global$0 = ($4 + [208])
	return (unreachable)
	
.LABEL $label$1
	CALL $110(($4 + [16]))
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17549])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $146($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [36]) = [0]
	*($5 + [28 align=4]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = $0
	CALL $87(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $8(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $149($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [28])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1) = ((int_64)*(*(*($0 + [4]))) + (int_64)1)
	$5 = *($1 + [28])
	$4 = *(($1 + [32]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	$8 = *($0)
	$9 = [25]
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$2 }
	$9 = (($6 & [-8]) + $9)
	
.LABEL $label$2
	$4 = ($9 + [16])
	if ( ($4 <= [513]) ){ goto $label$4 }
	$9 = CALL $146($4)
	goto $label$3 
	
.LABEL $label$4
	$9 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$3
	*($3 + [4]) = $9
	*($3) = $9
	*($3 + [8]) = ($9 + $4)
	CALL $81($3, $1)
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($8 + [8]), (int_64)7035937441983234048, *(*($0 + [8])), $7, $9, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($8 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $149($9)
	if ( (uint_64)($7 <= *($8 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $26 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [112])
	$global$0 = $4
	*($4 + [102]) = $2
	*($4 + [104]) = $1
	$5 = [0]
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)-1
	$1 = *($0)
	*($4 + [56]) = $1
	*($4 + [64]) = $1
	*($4 + [80]) = (int_64)0
	$6 = [0]
	$2 = CALL db_lowerbound_i64($1, $1, (int_64)-4131301023690375168, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $13(($4 + [56]), $2)
	
.LABEL $label$1
	*($4 + [48]) = [0]
	*($4 + [40]) = (int_64)0
	$2 = (*(($6 + [48])) - *($6 + [44]))
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL _Znwj($2)
	*(($4 + [48])) = ($5 + (int_32($2 >> [1]) << [1]))
	*($4 + [40]) = $5
	*($4 + [44]) = $5
	$7 = *(($6 + [44]))
	$2 = (*(($6 + [48])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $7, $2)
	$5 = (*($4 + [44]) + $2)
	*($4 + [44]) = $5
	
.LABEL $label$5
	if ( (*($6 + [40]) == 0) ){ goto $label$7 }
	$8 = *($4 + [40])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$8 }
	$7 = [0]
	$9 = (*($4 + [102]) & [65535])
	$2 = $8
	
.LOOP $label$9:
	$7 = ($7 | ((int_32)$9 == (int_32)*($2)))
	$2 = ($2 + [2])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	if ( (($7 & [1]) == 0) ){ goto $label$8 }
	$1 = *($0)
	*($4 + [32]) = $3
	$10 = [0]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [17786])
	CALL $45(($4 + [56]), $6, $1, ($4 + [32]))
	$2 = *($4 + [40])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$8
	$10 = [1]
	if ( ((uint_32)(int_32(($5 - $8) >> [1]) + [1]) > (uint_32)[503]) ){ goto $label$6 }
	$1 = *($0)
	*($4 + [36]) = $3
	$10 = [0]
	*($4 + [32]) = ($4 + [102])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [17786])
	CALL $46(($4 + [56]), $6, $1, ($4 + [32]))
	$2 = *($4 + [40])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$7
	$1 = *($0)
	*($4 + [32]) = $3
	CALL eosio_assert([1], [17786])
	CALL $47(($4 + [56]), $6, $1, ($4 + [32]))
	$10 = [0]
	$2 = *($4 + [40])
	if ( ($2 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$6
	$1 = *($6 + [8])
	$11 = *(($6 + [16]))
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$11), [17211])
	$1 = ((int_64)$1 + (int_64)*($3))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [17254])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [17273])
	$12 = *($0)
	*($4 + [32]) = ($4 + [104])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [17786])
	CALL $48(($4 + [56]), $6, $12, ($4 + [32]))
	*(($4 + [8])) = $11
	*($4 + [16]) = $1
	*($4 + [24]) = $11
	*($4) = $1
	CALL $49($0, *($4 + [104]), $4)
	$2 = *($4 + [40])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $127(($4 + [40]))
	
.LABEL $label$3
	*($4 + [44]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$9 = *($4 + [80])
	if ( ($9 == 0) ){ goto $label$10 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	$5 = *($7 + [44])
	if ( ($5 == 0) ){ goto $label$15 }
	*(($7 + [48])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [80]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $9
	
.LABEL $label$11
	*($6) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$global$0 = ($4 + [112])
	(unreachable)
	return $10
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $135 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17191])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17191])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $149($0)
	
.LABEL $label$1
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $98(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0)
	$5 = *($1)
	$0 = *($5 + [4])
	$2 = [0]
	$6 = (int_64)0
	$7 = ($5 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($0 <= *(($5 + [8]))), [17782])
	$0 = *($7)
	$3 = *($0)
	$0 = ($0 + [1])
	*($7) = $0
	$2 = ($2 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $2)))
	$2 = ($2 + [7])
	if ( ($3 & [128]) ){ goto $label$1 }
	*($4 + [8]) = $6
	CALL eosio_assert(((uint_32)(*(($5 + [8])) - $0) > (uint_32)[64]), [17572])
	$3 = ($5 + [4])
	CALL memcpy(($4 + [12]), *($3), [65])
	*($3) = (*($3) + [65])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [17572])
	CALL memcpy(($4 + [80]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [17572])
	CALL memcpy(($4 + [112]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17191])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17191])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17191])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$2 = ($global$0 - [832])
	$global$0 = $2
	$3 = *($1 + [32])
	$4 = *($1 + [24])
	$5 = *($1 + [16])
	$6 = *($1 + [8])
	$7 = *($1)
	$8 = CALL $111(($2 + [400]), ($1 + [36]))
	$9 = CALL $111(($2 + [384]), ($1 + [48]))
	*(($10 = (($2 + [368]) + [8]))) = *(($1 + [72]))
	*(($11 = (($2 + [352]) + [8]))) = *(($1 + [104]))
	*(($12 = (($2 + [336]) + [8]))) = *(($1 + [120]))
	*(($13 = (($2 + [304]) + [16]))) = *(($1 + [144]))
	*(($14 = (($2 + [304]) + [24]))) = *(($1 + [152]))
	*($2 + [368]) = *($1 + [64])
	*($2 + [352]) = *($1 + [96])
	*($2 + [336]) = *($1 + [112])
	*($2 + [304]) = *($1 + [128])
	*($2 + [312]) = *(($1 + [136]))
	$15 = *($1 + [80])
	$16 = *($1 + [88])
	CALL memcpy(($2 + [232]), ($1 + [160]), [72])
	*(($17 = (($2 + [192]) + [24]))) = *(($1 + [264]))
	*(($18 = (($2 + [192]) + [16]))) = *(($1 + [256]))
	*($2 + [200]) = *(($1 + [248]))
	*($2 + [192]) = *($1 + [240])
	*((($2 + [576]) + [24])) = *($17)
	*((($2 + [576]) + [16])) = *($18)
	*($2 + [584]) = *($2 + [200])
	*($2 + [576]) = *($2 + [192])
	CALL memcpy(($2 + [504]), ($2 + [232]), [72])
	*((($2 + [464]) + [24])) = *($14)
	*((($2 + [464]) + [16])) = *($13)
	*((($2 + [448]) + [8])) = *($12)
	*((($2 + [432]) + [8])) = *($11)
	*((($2 + [416]) + [8])) = *($10)
	*($2 + [472]) = *($2 + [312])
	*($2 + [464]) = *($2 + [304])
	*($2 + [448]) = *($2 + [336])
	*($2 + [432]) = *($2 + [352])
	*($2 + [416]) = *($2 + [368])
	$1 = *($0 + [4])
	$10 = *($1 + [4])
	$0 = (*($0) + int_32($10 >> [1]))
	$1 = *($1)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$10 = CALL $111(($2 + [816]), $8)
	$11 = CALL $111(($2 + [800]), $9)
	*(($12 = (($2 + [784]) + [8]))) = *((($2 + [416]) + [8]))
	*(($13 = (($2 + [768]) + [8]))) = *((($2 + [432]) + [8]))
	*(($14 = (($2 + [752]) + [8]))) = *((($2 + [448]) + [8]))
	*(($17 = (($2 + [720]) + [16]))) = *((($2 + [464]) + [16]))
	*(($18 = (($2 + [720]) + [24]))) = *((($2 + [464]) + [24]))
	*($2 + [784]) = *($2 + [416])
	*($2 + [768]) = *($2 + [432])
	*($2 + [752]) = *($2 + [448])
	*($2 + [720]) = *($2 + [464])
	*($2 + [728]) = *($2 + [472])
	CALL memcpy(($2 + [648]), ($2 + [504]), [72])
	*(($19 = (($2 + [608]) + [24]))) = *((($2 + [576]) + [24]))
	*(($20 = (($2 + [608]) + [16]))) = *((($2 + [576]) + [16]))
	*((($2 + [176]) + [8])) = *($12)
	*((($2 + [160]) + [8])) = *($13)
	*((($2 + [144]) + [8])) = *($14)
	*($2 + [616]) = *($2 + [584])
	*($2 + [608]) = *($2 + [576])
	*($2 + [176]) = *($2 + [784])
	*($2 + [160]) = *($2 + [768])
	*($2 + [144]) = *($2 + [752])
	*((($2 + [112]) + [24])) = *($18)
	*((($2 + [112]) + [16])) = *($17)
	*($2 + [120]) = *($2 + [728])
	*($2 + [112]) = *($2 + [720])
	CALL memcpy(($2 + [40]), ($2 + [648]), [72])
	*(($2 + [24])) = *($19)
	*(($2 + [16])) = *($20)
	*($2 + [8]) = *($2 + [616])
	*($2) = *($2 + [608])
	CALL void $0((int_32 $7), (int_64 $6), (int_64 $5), (int_64 $4), (int_64 ($3 & [65535])), (int_32 $10), (int_32 $11), (int_32 ($2 + [176])), (int_32 $15), (int_64 ($16 & [65535])), (int_32 ($2 + [160])), (int_32 ($2 + [144])), (int_32 ($2 + [112])), (int_32 ($2 + [40])), (int_32 $2), (int_32 $1))
	if ( (*($2 + [800]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [816]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($2 + [816]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($10 + [8]))
	$1 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($9) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($8) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($8) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($8 + [8]))
	$global$0 = ($2 + [832])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [832])
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [384])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [108])) = (int_64)0
	*(($4 + [116])) = (int_64)0
	*(($4 + [136])) = (int_64)0
	*(($4 + [168])) = (int_64)0
	*(($4 + [184])) = (int_64)0
	*(($4 + [216])) = (int_64)0
	*(($4 + [208])) = (int_64)0
	*(($4 + [200])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = [0]
	*($4 + [100 align=4]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = [0]
	*($4 + [160]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [192]) = (int_64)0
	CALL memset(($4 + [228]), [0], [68])
	*(($4 + [328])) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*(($4 + [312])) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [224]) = [0]
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [368]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $65(($4 + [16]), ($4 + [368]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [352]) + [8]))) = *($3)
	*($4 + [352]) = *($4)
	$3 = *($6)
	*((($4 + [368]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [352])
	*($4 + [32]) = $0
	*($4 + [368]) = $0
	*($4 + [372]) = ($4 + [344])
	*($4 + [368]) = ($4 + [16])
	CALL $66(($4 + [368]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	$2 = [1]
	if ( (*($4 + [112]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $149($2)
	$2 = [1]
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [120])))
	if ( (*($4 + [100]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [100]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [108])))
	
.LABEL $label$4
	$global$0 = ($4 + [384])
	return [1]
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [768])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $146($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [208]) = (int_64)0
	CALL memset((($4 + [208]) | [12]), [0], [68])
	*(($3 = ($4 + [312]))) = (int_64)0
	*(($8 = ($4 + [304]))) = (int_64)0
	*(($9 = ($4 + [296]))) = (int_64)0
	*(($10 = ($4 + [344]))) = (int_64)0
	*(($11 = ($4 + [336]))) = (int_64)0
	*(($12 = ($4 + [328]))) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [216]) = [0]
	*($4 + [320]) = (int_64)0
	*($4 + [196]) = $2
	*($4 + [192]) = $2
	*($4 + [200]) = ($2 + $7)
	*($4 + [488]) = ($4 + [192])
	*($4 + [696]) = ($4 + [208])
	CALL $64(($4 + [696]), ($4 + [488]))
	*(($13 = (($4 + [144]) + [8]))) = *($4 + [200])
	*($4 + [144]) = *($4 + [192])
	*(($14 = (($4 + [488]) + [8]))) = *($13)
	*($4 + [488]) = *($4 + [144])
	$13 = *($14)
	*((($4 + [696]) + [8])) = $13
	*((($4 + [160]) + [24])) = $13
	*($4 + [160]) = $0
	*($4 + [168]) = $1
	$0 = *($4 + [488])
	*($4 + [176]) = $0
	*($4 + [696]) = $0
	$0 = *($4 + [208])
	CALL memcpy(($4 + [416]), (($4 + [208]) | [8]), [72])
	*(($13 = (($4 + [384]) + [24]))) = *($3)
	*(($3 = (($4 + [384]) + [16]))) = *($8)
	*(($8 = (($4 + [352]) + [16]))) = *($11)
	*(($11 = (($4 + [352]) + [24]))) = *($10)
	*($4 + [392]) = *($9)
	*($4 + [384]) = *($4 + [288])
	*($4 + [352]) = *($4 + [320])
	*($4 + [360]) = *($12)
	*((($4 + [592]) + [24])) = *($11)
	*((($4 + [592]) + [16])) = *($8)
	*((($4 + [560]) + [16])) = *($3)
	*((($4 + [560]) + [24])) = *($13)
	*($4 + [600]) = *($4 + [360])
	*($4 + [592]) = *($4 + [352])
	*($4 + [560]) = *($4 + [384])
	*($4 + [568]) = *($4 + [392])
	CALL memcpy(($4 + [488]), ($4 + [416]), [72])
	$3 = (($4 + [160]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL memcpy(($4 + [696]), ($4 + [488]), [72])
	*(($5 = (($4 + [656]) + [24]))) = *((($4 + [560]) + [24]))
	*(($8 = (($4 + [656]) + [16]))) = *((($4 + [560]) + [16]))
	*(($9 = (($4 + [624]) + [16]))) = *((($4 + [592]) + [16]))
	*(($10 = (($4 + [624]) + [24]))) = *((($4 + [592]) + [24]))
	*($4 + [664]) = *($4 + [568])
	*($4 + [656]) = *($4 + [560])
	*($4 + [624]) = *($4 + [592])
	*($4 + [632]) = *($4 + [600])
	CALL memcpy(($4 + [72]), ($4 + [696]), [72])
	*((($4 + [32]) + [24])) = *($5)
	*((($4 + [32]) + [16])) = *($8)
	*(($4 + [16])) = *($9)
	*(($4 + [24])) = *($10)
	*($4 + [40]) = *($4 + [664])
	*($4 + [32]) = *($4 + [656])
	*($4) = *($4 + [624])
	*($4 + [8]) = *($4 + [632])
	CALL void $3((int_32 $0), (int_64 ($4 + [72])), (int_32 ($4 + [32])), (int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $149($2)
	
.LABEL $label$5
	$global$0 = ($4 + [768])
	return [1]
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $111(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $111(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $84(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $101 ()
{
	int_32 $0
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$0 = [0]
	*([0] + [8200]) = (int_64)1397703940
	*([0] + [8192]) = (int_64)10000
	CALL eosio_assert([1], [17108])
	$1 = (uint_64)*([0] + [8200]) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $2
	$3 = [1]
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$1 = $2
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$5 = ($0 + [1])
	$0 = $5
	if ( $4 ){ goto $label$6 }
	$3 = [1]
	$0 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert($3, [17157])
	return 
	
.LABEL $label$2
	CALL eosio_assert([0], [17157])
	return 
	
.LABEL $label$1
	CALL eosio_assert([0], [17157])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [17572])
	CALL memcpy(($2 + [128]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$4 = *($0)
	$5 = *($1)
	$0 = *($5 + [4])
	$2 = [0]
	$6 = (int_64)0
	$7 = ($5 + [8])
	$8 = ($5 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($0 <= *($7)), [17782])
	$0 = *($8)
	$3 = *($0)
	$0 = ($0 + [1])
	*($8) = $0
	$2 = ($2 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $2)))
	$2 = ($2 + [7])
	if ( ($3 & [128]) ){ goto $label$1 }
	*($4 + [160]) = $6
	CALL eosio_assert(((uint_32)(*(($5 + [8])) - $0) > (uint_32)[64]), [17572])
	$3 = ($5 + [4])
	CALL memcpy(($4 + [164]), *($3), [65])
	*($3) = (*($3) + [65])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [17572])
	CALL memcpy(($4 + [240]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $146($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8208])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $146($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $149($0)
	
.LABEL $label$1
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $127($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [17782])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $89($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [17572])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [17572])
	CALL memcpy(($2 + [7]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [24]) = ((int_32)*($2 + [7]) != (int_32)[0])
	$0 = CALL $88($0, ($1 + [28]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17191])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17191])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [17782])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $35($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17572])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $85($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $115($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $115($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $110($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[1]), [17572])
	CALL memcpy(($1 + [24]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = CALL $84(CALL $84($0, ($1 + [28])), ($1 + [40]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17191])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [17191])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [7]) = *($1 + [24])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [17191])
	CALL memcpy(*($0 + [4]), ($2 + [7]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $82($0, ($1 + [28]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [1]) >= (uint_32)$1) ){ goto $label$3 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [1])
	$3 = ($5 + $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [0]
	$2 = ($2 - $4)
	$2 = ( ( $3 ? $2 : ($2 <= $3) ) ? [2147483647] : (int_32($2 >> [1]) <= [1073741823]) )
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL _Znwj(($2 << [1]))
	
.LABEL $label$4
	$4 = ($6 + ($2 << [1]))
	$3 = ($6 + ($5 << [1]))
	$6 = $3
	$2 = $1
	
.LOOP $label$5:
	*($6) = [0]
	$6 = ($6 + [2])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$5 = ($3 + ($1 << [1]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$7 }
	CALL _ZdlPv($6)
	
.LABEL $label$7
	return (unreachable)
	
.LABEL $label$3
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [2])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	*(($0 + [4])) = ($3 + ($1 << [1]))
	return (unreachable)
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $149 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16612])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16420]
	$3 = (((int_32)$1 * (int_32)[12]) + [16420])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $148 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8220]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8224])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8220]) = [1]
	$2 = ($2 << [16])
	*([0] + [8224]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8224])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8224]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8220]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8220]) = [1]
	$3 = ($3 << [16])
	*([0] + [8224]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8224])
	
.LABEL $label$10
	*([0] + [8224]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $146($1)
	
.LABEL $label$2
	*(CALL $128()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $146(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $149($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $144 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $128())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $145($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $148($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16682])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $146 (int_32 $0)
{
	return CALL $147([8228], $0)
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_64 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $137($3, (int_64)0)
	$4 = CALL $139($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_32 .FUNC $143 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17191])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [17191])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $68($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[33]), [17572])
	CALL memcpy(($1 + [16]), *($0 + [4]), [34])
	$3 = (*($0 + [4]) + [34])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [17572])
	CALL memcpy(($2 + [7]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [50]) = ((int_32)*($2 + [7]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [72])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [17191])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [17191])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [17191])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [17191])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17191])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [17191])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [17191])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $68(CALL $67($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), $2, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [40])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [17191])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [17191])
	CALL memcpy(*($0 + [4]), ($1 + [42]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = CALL $77($0, ($1 + [44]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [1]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17191])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [17191])
	CALL memcpy(*($7), $6, [2])
	$4 = (*($7) + [2])
	*($7) = $4
	$6 = ($6 + [2])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [92]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17734])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7235159551873908736)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17680])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17680])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $2(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [18092])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18137])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18187])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$10
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [36])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$14
	if ( ((*($5 + [28]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [36])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	$3 = [0]
	*(($8 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$10 = ($2 + [16])
	*($8) = $10
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $10
	*($5 + [24]) = ($5 + [16])
	*($5 + [16]) = [32]
	*($5) = $4
	$9 = ((int_32)$9 * (int_32)[40])
	CALL $34($5, ($5 + [24]))
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = ($7 + [28])
	CALL $35($1, $2)
	$3 = *(($7 + [32]))
	$2 = *($1)
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	
.LABEL $label$5
	$11 = ($6 + $9)
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $3
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $37(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$8 }
	$10 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$9:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($9 + [-24])
	*($4) = *($3)
	$4 = ($9 + [-16])
	*($6) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($9 + [-12])
	*($4) = *($6)
	*($3) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($6) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$9 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$4 = $2
	
.LABEL $label$7
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$12 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$12
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$13 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$2 = $9
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17191])
	CALL memcpy(*($0 + [4]), ($4 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $92(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17572])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy($2, *($0 + [4]), [8])
	*(($1 + [16])) = *($2)
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17572])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [17572])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [40]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[1]), [17572])
	CALL memcpy(($1 + [42]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = CALL $79($0, ($1 + [44]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [17782])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [1])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $80($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [1]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($5) - $3) > (uint_32)[1]), [17572])
	CALL memcpy($7, *($2), [2])
	$3 = (*($2) + [2])
	*($2) = $3
	$7 = ($7 + [2])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18062])
	$2 = *($0 + [4])
	$3 = *(($2 + [300]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)4229853544465301505, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [300])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [288]) == (int_32)$6), [17977])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $43($6, CALL $fimport$5(*($6), *($6 + [8]), (int_64)4229853544465301504, $5))
	CALL eosio_assert(((int_32)*($8 + [288]) == (int_32)$6), [17977])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [300])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [288]) == (int_32)$0), [18092])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [18137])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18187])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$10
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [44])))
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [56])))
	
.LABEL $label$14
	if ( ((*($6 + [36]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [44])))
	
.LABEL $label$15
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [292]))
	$6 = *(($1 + [296]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229853544465301504, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx64_remove($6)
	
.LABEL $label$16
	$6 = *(($1 + [300]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$19 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229853544465301505, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL db_idx64_remove($6)
	
.LABEL $label$18
	$global$0 = ($2 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $127($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$11
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229853544465301505, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [288]) == (int_32)$7), [17977])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $43($7, CALL $fimport$5(*($7), *($7 + [8]), (int_64)4229853544465301504, $6))
	CALL eosio_assert(((int_32)*($4 + [288]) == (int_32)$7), [17977])
	
.LABEL $label$2
	*(($4 + [300])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $129 (int_32 $0)
{
}

void .FUNC $127 (int_32 $0)
{
	CALL abort()
	(unreachable)
}