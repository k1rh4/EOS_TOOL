(data (i32.const 4) "@k\00\00")
(data (i32.const 16) "fight2death1\00")
(data (i32.const 32) "cannot create objects in table of another contract\00")
(data (i32.const 96) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 160) "invalid symbol name\00")
(data (i32.const 192) "period can only increase 1 every time.\00")
(data (i32.const 240) "current peroid is active, can\'t create new period.\00")
(data (i32.const 304) "object passed to modify is not in multi_index\00")
(data (i32.const 352) "cannot modify objects in table of another contract\00")
(data (i32.const 416) "updater cannot change primary key when modifying an object\00")
(data (i32.const 480) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 544) "the round vote already exists.\00")
(data (i32.const 576) "write\00")
(data (i32.const 592) "error reading iterator\00")
(data (i32.const 624) "read\00")
(data (i32.const 640) "get\00")
(data (i32.const 656) "you must create one period vote first.\00")
(data (i32.const 704) "the round already open.\00")
(data (i32.const 736) "the round already closed.\00")
(data (i32.const 768) "the round is open, wait for close to apply.\00")
(data (i32.const 816) "unknown error during apply.\00")
(data (i32.const 848) "active\00")
(data (i32.const 864) "xmassnowball\00")
(data (i32.const 880) "setweather\00")
(data (i32.const 896) "VOTE:\00")
(data (i32.const 912) "invalid token transfer.\00")
(data (i32.const 944) "|\00")
(data (i32.const 960) "wrong memo format.\00")
(data (i32.const 992) "wrong vote number.\00")
(data (i32.const 1024) "quantity not enough.\00")
(data (i32.const 1056) "the round is not created yet.\00")
(data (i32.const 1088) "the round is not open yet.\00")
(data (i32.const 1120) "attempt to add asset with different symbol\00")
(data (i32.const 1168) "addition underflow\00")
(data (i32.const 1200) "addition overflow\00")
(data (i32.const 1220) "\06\00\00\00\07\00\00\00")
(data (i32.const 1232) "T = \00")
(data (i32.const 1248) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> > >::n() [T = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]\00")
(data (i32.const 1472) "user hasn\'t vote yet.\00")
(data (i32.const 1504) "user don\'t have valid balance.\00")
(data (i32.const 1536) "you must wait round end to get reward.\00")
(data (i32.const 1584) "unknown error, total received balance is 0.\00")
(data (i32.const 1632) "multiplication overflow\00")
(data (i32.const 1664) "multiplication underflow\00")
(data (i32.const 1696) "divide by zero\00")
(data (i32.const 1712) "signed division overflow\00")
(data (i32.const 1744) "octtothemoon\00")
(data (i32.const 1760) "transfer\00")
(data (i32.const 1776) "withdraw OCT and get reward!\00")
(data (i32.const 1808) "cannot pass end iterator to erase\00")
(data (i32.const 1856) "cannot increment end iterator\00")
(data (i32.const 1888) "attempt to subtract asset with different symbol\00")
(data (i32.const 1936) "subtraction underflow\00")
(data (i32.const 1968) "subtraction overflow\00")
(data (i32.const 2000) "object passed to erase is not in multi_index\00")
(data (i32.const 2048) "cannot erase objects in table of another contract\00")
(data (i32.const 2112) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2176) "onerror\00")
(data (i32.const 2192) "eosio\00")
(data (i32.const 2208) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 10672) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10768) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 11040) "\00\01\02\04\07\03\06\05\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$9 (param i32)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$12 (param i32 i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN11weathervoteC2Ey" (func $5))
(export "_ZN11weathervote6createEy" (func $6))
(export "_ZN11weathervote4openEy" (func $20))
(export "_ZN11weathervote5applyEv" (func $21))
(export "_ZN11weathervote8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $30))
(export "_ZN11weathervote9getrewardEy" (func $50))
(export "apply" (func $54))
(export "malloc" (func $63))
(export "free" (func $66))
(export "strtoll" (func $80))
(export "__shlim" (func $81))
(export "__intscan" (func $82))
(export "__errno_location" (func $83))
(export "__shgetc" (func $84))
(export "__uflow" (func $85))
(export "__toread" (func $86))
(export "memchr" (func $87))
(export "strlen" (func $88))
(export "memcmp" (func $89))
(table $0 8 8 anyfunc)
(elem (i32.const 0) $90 $6 $30 $21 $50 $20 $46 $47)



void .FUNC $90 ()
{
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [272])
	*([0] + [4]) = $7
	$5 = *($1 + [8])
	$6 = *($1 + [4])
	$4 = *($1)
	*($7 + [176]) = [0]
	$3 = *($2 + [8])
	*($7 + [184]) = $3
	$1 = ($4 & [1])
	$5 = ( $5 ? ($1 + [1]) : $1 )
	$1 = ($5 + ( $6 ? uint_32($4 >> [1]) : $1 ))
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = ($7 + [176])
	$6 = $2
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $71($3)
	*($7 + [176]) = $4
	$6 = *($2)
	
.LABEL $label$1
	CALL memcpy($4, $6, $3)
	*($7 + [188]) = *($2 + [12])
	$1 = CALL $39(($7 + [192]), $5, $1, ($7 + [176]))
	$2 = [0]
	*($7 + [232]) = [0]
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	*($7 + [232]) = $3
	if ( ($3 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($7 + [232]) | [4])), (int_32 [0]), (int_32 *(($3 & [-2]))))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	*((($7 + [232]) + [12])) = *(($1 + [12]))
	*($7 + [236 align=4]) = *($1 + [4 align=4])
	$2 = $3
	
.LABEL $label$3
	*($7 + [248]) = *($1 + [16 align=4])
	*($7 + [256]) = *($1 + [24])
	*($7 + [260]) = *($1 + [28])
	*($7 + [264]) = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ($1 + [4])
	CALL void $3((int_32 $3), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($7 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($7 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $73($1)
	
.LABEL $label$7
	*(($7 + [116])) = [0]
	*($7 + [96]) = [0]
	*($7 + [124]) = [0]
	*($7 + [120]) = [0]
	*($7 + [112]) = [0]
	*($7 + [128]) = [1]
	*($7 + [136]) = [0]
	*($7 + [164]) = [0]
	*($7 + [160]) = [0]
	*($7 + [168]) = [1]
	*($7 + [152]) = *($7 + [112])
	*($7 + [40]) = [0]
	$1 = [0]
	$2 = *($7 + [232])
	if ( ($2 == 0) ){ goto $label$8 }
	*($7 + [40]) = $2
	if ( ($2 & [1]) ){ goto $label$9 }
	CALL void (($7 + [232]) | [4])((int_32 (($7 + [40]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($7 + [136])
	goto $label$8 
	
.LABEL $label$9
	*((($7 + [40]) + [12])) = *((($7 + [232]) + [12]))
	*($7 + [44 align=4]) = *($7 + [236 align=4])
	$1 = [0]
	
.LABEL $label$8
	*($7 + [56]) = *((($7 + [232]) + [16]))
	*($7 + [64]) = *((($7 + [232]) + [24]))
	*($7 + [68]) = *((($7 + [232]) + [28]))
	*($7 + [72]) = *((($7 + [232]) + [32]))
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	*($7) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($7 + [136]) | [4])((int_32 ($7 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	*(($7 + [12])) = *((($7 + [136]) + [12]))
	*($7 + [4 align=4]) = *($7 + [140 align=4])
	
.LABEL $label$10
	*($7 + [16]) = *((($7 + [136]) + [16]))
	*($7 + [24]) = *((($7 + [136]) + [24]))
	*($7 + [28]) = *((($7 + [136]) + [28]))
	*($7 + [32]) = *((($7 + [136]) + [32]))
	$3 = CALL $40(($7 + [80]), ($7 + [40]), $7)
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($7 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($7) = [0]
	
.LABEL $label$12
	$1 = *($7 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($7 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($7 + [40]) = [0]
	
.LABEL $label$14
	$4 = *($0)
	*($0) = *($3)
	*($3) = $4
	$1 = *($0 + [4])
	*($0 + [4]) = *($3 + [4])
	*($3 + [4]) = $1
	$2 = *($0 + [8])
	*($0 + [8]) = *($3 + [8])
	*($3 + [8]) = $2
	if ( ($4 == 0) ){ goto $label$16 }
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$18 }
	$2 = ([0] - $4)
	$1 = ($1 + [-12])
	
.LOOP $label$19:
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL $72(*(($1 + [8])))
	
.LABEL $label$20
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $2) != (int_32)[-12]) ){ goto $label$19 }
	$1 = *($3)
	goto $label$17 
	
.LABEL $label$18
	$1 = $4
	
.LABEL $label$17
	*(($3 + [4])) = $4
	CALL $72($1)
	
.LABEL $label$16
	$1 = *($7 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($7 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($7 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($7 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($7 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($7 + [232]) = [0]
	
.LABEL $label$23
	*([0] + [4]) = ($7 + [272])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$13
	$3 = *($0)
	*(($2 = CALL $70([16]))) = [0]
	$5 = *($3 + [8])
	*($2 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$8 }
	$0 = $3
	$4 = $2
	goto $label$7 
	
.LABEL $label$12
	$3 = [0]
	
.LOOP $label$14:
	$2 = [-3]
	
.LOOP $label$16:
	if ( ((int_32)*((($3 + $2) + [1290])) != (int_32)*(($2 + [1235]))) ){ goto $label$15 }
	if ( ($2 == 0) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[180]) ){ goto $label$16 }
	goto $label$4 
	
.LABEL $label$15
	$2 = [183]
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[183]) ){ goto $label$14 }
	goto $label$3 
	
.LABEL $label$11
	*($1) = *($0)
	*($0) = [0]
	return 
	
.LABEL $label$10
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$17 }
	if ( (*($2 + [8]) <= [9]) ){ goto $label$18 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$18 }
	CALL $73($3)
	
.LABEL $label$18
	CALL $72($2)
	
.LABEL $label$17
	*($1) = [0]
	return 
	
.LABEL $label$9
	$5 = *($1)
	$3 = [0]
	
.LOOP $label$19:
	$2 = [-3]
	
.LOOP $label$21:
	if ( ((int_32)*((($3 + $2) + [1290])) != (int_32)*(($2 + [1235]))) ){ goto $label$20 }
	if ( ($2 == 0) ){ goto $label$5 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[180]) ){ goto $label$21 }
	goto $label$2 
	
.LABEL $label$20
	$2 = [183]
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[183]) ){ goto $label$19 }
	goto $label$1 
	
.LABEL $label$8
	$4 = CALL $71($5)
	*($2) = $4
	$5 = *(($2 + [8]))
	$0 = *($3)
	
.LABEL $label$7
	CALL memcpy($4, $0, $5)
	*($1) = $2
	*($2 + [12]) = *($3 + [12])
	return 
	
.LABEL $label$6
	$2 = $3
	goto $label$3 
	
.LABEL $label$5
	$2 = $3
	goto $label$1 
	
.LABEL $label$4
	$2 = [183]
	
.LABEL $label$3
	*($1 + [4]) = [0]
	*($1) = ( [1287] ? ($2 + [1291]) : ((int_32)$2 == (int_32)[183]) )
	return 
	
.LABEL $label$2
	$2 = [183]
	
.LABEL $label$1
	$3 = ( [1287] ? ($2 + [1291]) : ((int_32)$2 == (int_32)[183]) )
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$23 }
	$5 = ($5 + [1])
	
.LOOP $label$24:
	if ( ((int_32)($2 & [255]) != (int_32)*($3)) ){ goto $label$22 }
	$3 = ($3 + [1])
	$2 = *($5)
	$5 = ($5 + [1])
	if ( $2 ){ goto $label$24 }
	
.LABEL $label$23
	$2 = [0]
	
.LABEL $label$22
	*($1) = ( *($0) ? [0] : ((int_32)($2 & [255]) == (int_32)*($3)) )
	$2
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	*($12) = [0]
	$8 = *($1 + [8])
	*($12 + [8]) = $8
	if ( ((uint_32)$8 > (uint_32)[8]) ){ goto $label$2 }
	$11 = $12
	$10 = $1
	goto $label$1 
	
.LABEL $label$2
	$11 = CALL $71($8)
	*($12) = $11
	$10 = *($1)
	
.LABEL $label$1
	CALL memcpy($11, $10, $8)
	$4 = *(($12 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$5 }
	$5 = ($12 + $4)
	
.LOOP $label$6:
	$7 = *($2)
	$10 = $12
	$8 = $4
	if ( ($8 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$9 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$9
	$8 = $11
	if ( $8 ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$10 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$10
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = *($12)
	$6 = ($5 + $4)
	
.LOOP $label$11:
	$7 = *($2)
	$10 = $5
	$8 = $4
	if ( ($8 == 0) ){ goto $label$12 }
	
.LOOP $label$13:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$14 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$14
	$8 = $11
	if ( $8 ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$4
	$2 = $3
	
.LABEL $label$3
	if ( ($4 <= [9]) ){ goto $label$16 }
	$8 = *($12)
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $73($8)
	
.LABEL $label$16
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$19 }
	if ( (*($1 + [12]) == 0) ){ goto $label$18 }
	$4 = ($2 + [1])
	goto $label$17 
	
.LABEL $label$19
	$2 = $3
	$4 = $3
	goto $label$17 
	
.LABEL $label$18
	$5 = *(($1 + [8]))
	if ( ((uint_32)$5 >= (uint_32)[9]) ){ goto $label$20 }
	$6 = ($1 + $5)
	$4 = $2
	
.LOOP $label$21:
	$7 = *($4)
	$10 = $1
	$8 = $5
	if ( ($8 == 0) ){ goto $label$22 }
	
.LOOP $label$23:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$24 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$24
	$8 = $11
	if ( $8 ){ goto $label$23 }
	
.LABEL $label$22
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$21 }
	goto $label$17 
	
.LABEL $label$20
	$6 = *($1)
	$1 = ($6 + $5)
	$4 = $2
	
.LOOP $label$25:
	$7 = *($4)
	$10 = $6
	$8 = $5
	if ( ($8 == 0) ){ goto $label$26 }
	
.LOOP $label$27:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$28 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$28
	$8 = $11
	if ( $8 ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$25 }
	
.LABEL $label$17
	*($0 + [4]) = $4
	*($0) = $2
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5) = [0]
	$2 = *($1 + [8])
	*($5 + [8]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $5
	$3 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $71($2)
	*($5) = $4
	$3 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $3, $2)
	*($5 + [12]) = *($1 + [12])
	*($5 + [16]) = [0]
	$1 = *(($5 + [8]))
	*($5 + [24]) = $1
	$2 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $5
	$3 = ($5 + [16])
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL $71($1)
	*($5 + [16]) = $3
	$4 = *($5)
	
.LABEL $label$3
	CALL memcpy($3, $4, $1)
	*($5 + [28]) = *(($5 + [12]))
	$1 = CALL $44([1220], ($5 + [16]), $2)
	if ( (*((($5 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $73($2)
	
.LABEL $label$5
	if ( (*(($5 + [8])) <= [9]) ){ goto $label$6 }
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $73($2)
	
.LABEL $label$6
	*($0) = ( [1220] ? [0] : $1 )
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = [0]
	$3 = *($1 + [8])
	*($6 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	$4 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $71($3)
	*($6) = $5
	$4 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $4, $3)
	*($6 + [12]) = *($1 + [12])
	*($0) = [0]
	*($6 + [16]) = [0]
	$1 = *(($6 + [8]))
	*($6 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$3 = $6
	$5 = ($6 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $71($1)
	*($6 + [16]) = $5
	$3 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $3, $1)
	*($6 + [28]) = *(($6 + [12]))
	CALL $43($0, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $73($1)
	
.LABEL $label$5
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $73($1)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [32])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $70(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $76($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $72(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $72($4)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [16])
	*([0] + [4]) = $16
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$3 = ($16 | [1])
	$5 = ($1 + [20])
	$6 = ($1 + [16])
	$7 = ($16 + [8])
	$8 = ($1 + [28])
	$9 = ($1 + [32])
	$10 = ($1 + [24])
	
.LOOP $label$1:
	$13 = [1]
	if ( (*($1) == 0) ){ goto $label$2 }
	$13 = ((int_32)*($9) != (int_32)[0])
	
.LABEL $label$2
	if ( (*($2) == 0) ){ goto $label$10 }
	$15 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($13 | $15) == (int_32)[1]) ){ goto $label$9 }
	$15 = *(($2 + [16]))
	$13 = *($6)
	$12 = *($5)
	if ( ((int_32)($12 - $13) != (int_32)(*(($2 + [20])) - $15)) ){ goto $label$7 }
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$11 }
	$11 = $13
	
.LOOP $label$12:
	if ( ((int_32)*($11) != (int_32)*($15)) ){ goto $label$7 }
	$15 = ($15 + [1])
	$11 = ($11 + [1])
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)*($10) != (int_32)*(($2 + [24]))) ){ goto $label$7 }
	if ( ((int_32)*($8) != (int_32)*(($2 + [28]))) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$10
	$15 = [1]
	
.LABEL $label$9
	if ( ((int_32)$13 == (int_32)$15) ){ goto $label$6 }
	
.LABEL $label$8
	$12 = *($5)
	$13 = *($6)
	
.LABEL $label$7
	*($7) = [0]
	*($16) = (int_64)0
	$11 = ($12 - $13)
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$11 > (uint_32)[10]) ){ goto $label$15 }
	*($16) = ($11 << [1])
	$14 = $3
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$15 = (($11 + [16]) & [-16])
	$14 = CALL $70($15)
	*($7) = $14
	*($16) = ($15 | [1])
	*($16 + [4]) = $11
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$13 }
	
.LABEL $label$14
	$15 = $14
	
.LOOP $label$16:
	*($15) = *($13)
	$15 = ($15 + [1])
	$13 = ($13 + [1])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$16 }
	$14 = ($14 + $11)
	
.LABEL $label$13
	*($14) = [0]
	$13 = ($0 + [4])
	$15 = *($13)
	if ( ((uint_32)$15 >= (uint_32)*(($0 + [8]))) ){ goto $label$18 }
	*($15) = *($16)
	*(($15 + [8])) = *($7)
	*($7) = [0]
	*($16) = [0]
	*($16 + [4]) = [0]
	*($13) = (*($13) + [12])
	goto $label$17 
	
.LABEL $label$18
	CALL $41($0, $16)
	if ( ((*($16) & [1]) == 0) ){ goto $label$17 }
	CALL $72(*($7))
	
.LABEL $label$17
	$13 = *($8)
	$15 = *($1)
	if ( ($15 == 0) ){ goto $label$20 }
	CALL void $16((int_32 $4), (int_32 *($10)), (int_32 $13), (int_32 *(($15 & [-2]) + [4])))
	$15 = *($16)
	if ( ((int_32)$15 == (int_32)*($8)) ){ goto $label$19 }
	$13 = *($16 + [4])
	goto $label$3 
	
.LABEL $label$20
	*($16 + [4]) = $13
	*($16) = $13
	$15 = $13
	goto $label$4 
	
.LABEL $label$19
	$13 = *($16 + [4])
	if ( ((int_32)$13 != (int_32)$15) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [16])
	return $0
	
.LABEL $label$5
	CALL $74($16)
	
.LABEL $label$4
	if ( ((int_32)*($5) != (int_32)$15) ){ goto $label$3 }
	*($9) = [1]
	
.LABEL $label$3
	*($5) = $15
	*($6) = *($10)
	*($10) = $13
	goto $label$1 
	return (unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $48($0, *($1), $2, $3)
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$4 }
	$0 = [0]
	
.LOOP $label$5:
	$2 = [-3]
	
.LOOP $label$7:
	if ( ((int_32)*((($0 + $2) + [1290])) != (int_32)*(($2 + [1235]))) ){ goto $label$6 }
	if ( ($2 == 0) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ((int_32)($0 + $2) != (int_32)[180]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$6
	$2 = [183]
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	CALL $49($0, $1, $2)
	return 
	
.LABEL $label$3
	$2 = $0
	goto $label$1 
	
.LABEL $label$2
	$2 = [183]
	
.LABEL $label$1
	*($1 + [4]) = [0]
	*($1) = ( [1287] ? ($2 + [1291]) : ((int_32)$2 == (int_32)[183]) )
}

int_32 .FUNC $45 (int_32 $0)
{
	return [0]
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = $1
	$5 = [0]
	if ( CALL $45($6) ){ goto $label$1 }
	*($6 + [16]) = [0]
	$5 = *($1 + [8])
	*($6 + [24]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$3 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $71($5)
	*($6 + [16]) = $4
	$3 = *($1)
	
.LABEL $label$2
	CALL memcpy($4, $3, $5)
	*($6 + [28]) = *($1 + [12])
	*(($1 = CALL $70([16]))) = [0]
	$5 = *((($6 + [16]) + [8]))
	*($1 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$5 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $71($5)
	*($1) = $3
	$5 = *(($1 + [8]))
	$4 = *($6 + [16])
	
.LABEL $label$4
	CALL memcpy($3, $4, $5)
	*($2) = $1
	*($1 + [12]) = *(($6 + [28]))
	$5 = [1]
	if ( (*(($6 + [24])) <= [9]) ){ goto $label$1 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $73($1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
	return $5
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $70(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $76($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $72($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [592])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $70([56])) + [32]) = (int_64)1397703940
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [96])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [160])
	*($4 + [40]) = $0
	CALL $19(($8 + [32]), $4)
	*($4 + [44]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [44])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $8($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $72($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC _ZN11weathervote6createEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*($11 + [8]) = $1
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [16]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$2 = ($0 + [8])
	$5 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	$5 = CALL $9($2, $5)
	CALL eosio_assert(((int_64)((int_64)*($5 + [8]) + (int_64)1) == (int_64)$1), [192])
	CALL eosio_assert((int_64)(*($5 + [16]) == 0), [240])
	$6 = *($0)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$2), [304])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$3()), [352])
	*($5 + [8]) = $1
	$7 = *($5)
	CALL eosio_assert([1], [416])
	*($11 + [88]) = (($11 + [32]) + [40])
	*($11 + [84]) = ($11 + [32])
	*($11 + [80]) = ($11 + [32])
	CALL $10(($11 + [80]), $5)
	CALL db_update_i64(*($5 + [44]), $6, ($11 + [32]), [40])
	$5 = ($0 + [24])
	if ( (uint_64)($7 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$6
	$7 = *($0)
	*($11) = $0
	*($11 + [4]) = ($11 + [8])
	*($11 + [80]) = $7
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$3()), [32])
	*($11 + [32]) = $2
	*($11 + [36]) = $11
	*($11 + [40]) = ($11 + [80])
	*(($10 = CALL $70([56])) + [32]) = (int_64)1397703940
	*($10 + [24]) = (int_64)0
	CALL eosio_assert([1], [96])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [160])
	*($10 + [40]) = $2
	CALL $7(($11 + [32]), $10)
	*($11 + [24]) = $10
	$7 = *($10)
	*($11 + [32]) = $7
	$2 = *($10 + [44])
	*($11 + [16]) = $2
	$4 = ($0 + [36])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [40]))) ){ goto $label$13 }
	*($5 + [8]) = $7
	*($5 + [16]) = $2
	*($11 + [24]) = [0]
	*($5) = $10
	*($4) = ($5 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $8(($0 + [32]), ($11 + [24]), ($11 + [32]), ($11 + [16]))
	
.LABEL $label$12
	$5 = *($11 + [24])
	*($11 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $72($5)
	
.LABEL $label$5
	$7 = *($11 + [8])
	$3 = *(($0 + [112]))
	$10 = *(($0 + [116]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$14 }
	$5 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$15:
	if ( ((int_64)*(*($5)) == (int_64)$7) ){ goto $label$14 }
	$10 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	$2 = ($0 + [88])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$17 }
	$5 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [68]) == (int_32)$2), [480])
	goto $label$16 
	
.LABEL $label$17
	$5 = [0]
	$10 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-2507756424742830080, $7)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$16 }
	$5 = CALL $11($2, $10)
	CALL eosio_assert(((int_32)*($5 + [68]) == (int_32)$2), [480])
	
.LABEL $label$16
	CALL eosio_assert(($5 == 0), [544])
	$7 = *($0)
	*($11 + [16]) = ($11 + [8])
	*($11 + [80]) = $7
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$3()), [32])
	*($11 + [32]) = $2
	*($11 + [36]) = ($11 + [16])
	*($11 + [40]) = ($11 + [80])
	*(($5 = CALL $70([80])) + [64]) = [0]
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [68]) = $2
	CALL $12(($11 + [32]), $5)
	*($11) = $5
	$7 = *($5)
	*($11 + [32]) = $7
	$10 = *($5 + [72])
	*($11 + [24]) = $10
	$4 = ($0 + [116])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [120]))) ){ goto $label$19 }
	*($2 + [8]) = $7
	*($2 + [16]) = $10
	*($11) = [0]
	*($2) = $5
	*($4) = ($2 + [24])
	goto $label$18 
	
.LABEL $label$19
	CALL $13(($0 + [112]), $11, ($11 + [32]), ($11 + [24]))
	
.LABEL $label$18
	$5 = *($11)
	*($11) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	$2 = *($5 + [56])
	if ( ($2 == 0) ){ goto $label$21 }
	*(($5 + [60])) = $2
	CALL $72($2)
	
.LABEL $label$21
	CALL $72($5)
	
.LABEL $label$20
	*([0] + [4]) = ($11 + [96])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$3 = *(*($4 + [4]))
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = $3
	$2 = *($0)
	CALL eosio_assert([1], [96])
	$3 = (int_64)5522255
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [160])
	*(($1 + [32])) = (int_64)1413697284
	*($1 + [24]) = (int_64)0
	$5 = $7
	$4 = ($5 + [-48])
	*([0] + [4]) = $4
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($5 + [-8])
	CALL $10($6, $1)
	$3 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), $3, $4, [40])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _ZN11weathervoteC2Ey (int_32 $0, int_64 $1)
{
	*($0 + [8]) = $1
	*($0) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = [0]
	*($0 + [48]) = $1
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = [0]
	*(($0 + [76])) = [0]
	*(($0 + [80])) = [0]
	*($0 + [88]) = $1
	*(($0 + [96])) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = [0]
	*(($0 + [116])) = [0]
	*(($0 + [120])) = [0]
	return $0
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $15($0, ($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [576])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [576])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [576])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [576])
	CALL memcpy(*($4), ($7 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $17($0, ($1 + [56]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [640])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $18($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [624])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [624])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [624])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [576])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [592])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $70([80])) + [64]) = [0]
	*($6 + [56 align=4]) = (int_64)0
	*($6 + [68]) = $0
	CALL $16(($8 + [32]), $6)
	*($6 + [72]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [72])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $13(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [56])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [60])) = $7
	CALL $72($7)
	
.LABEL $label$10
	CALL $72($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	*($1) = *(*(*($0 + [4])))
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	$2 = *($0)
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	$4 = *($1 + [56])
	$3 = *(($1 + [60]))
	$5 = ($3 - $4)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	$6 = [56]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$3 = ($5 + [-24])
	$6 = ((($3 - ((uint_32)$3 % (uint_32)[24])) + $6) + [24])
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL $14($9, $1)
	$7 = *($1)
	*($1 + [72]) = CALL db_store_i64(*($2 + [8]), (int_64)-2507756424742830080, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $70(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $76($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [56])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [60])) = $6
	CALL $72($6)
	
.LABEL $label$11
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $72($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $70(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $72($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ((int_32)($6 - $5) / (int_32)[24])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$2 = ((int_32)($2 - $5) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $70(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6 + [8]) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*($6) = (int_64)0
	$6 = (*($0) + [24])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $76($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$6 * (int_32)[24]))
	$5 = ($2 + ((int_32)$3 * (int_32)[24]))
	$6 = $5
	
.LOOP $label$8:
	*($6 + [8]) = (int_64)0
	*($6) = (int_64)0
	*(($6 + [16])) = (int_64)0
	$6 = ($6 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $72($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [116])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [56])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [60])) = $3
	CALL $72($3)
	
.LABEL $label$6
	CALL $72($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $72($5)
	
.LABEL $label$1
	$3 = *(($0 + [72]))
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($0 + [76])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $72($2)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($0 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $3
	
.LABEL $label$8
	*($1) = $3
	CALL $72($5)
	
.LABEL $label$7
	$3 = *(($0 + [32]))
	if ( ($3 == 0) ){ goto $label$12 }
	$1 = ($0 + [36])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	CALL $72($2)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$15 }
	$5 = *(($0 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $3
	
.LABEL $label$13
	*($1) = $3
	CALL $72($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [624])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [624])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [624])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $61(*($1), ($0 + [32]))
}

void .FUNC _ZN11weathervote9getrewardEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [160])
	*([0] + [4]) = $19
	CALL require_auth($1)
	$4 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$1 }
	$12 = ($10 + [-24])
	$3 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$1 }
	$10 = $12
	$7 = ($12 + [-24])
	$12 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$4 }
	$3 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [480])
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	$12 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)8428113309290463232, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $33($2, $12)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [480])
	
.LABEL $label$3
	$12 = [0]
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [1472])
	CALL eosio_assert(((int_64)*($3 + [8]) > (int_64)0), [1504])
	$5 = ($0 + [8])
	$10 = [0]
	$7 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$10 = CALL $9($5, $7)
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [1056])
	CALL eosio_assert((int_64)(*($10 + [16]) == 0), [1536])
	CALL eosio_assert(((int_64)*($10 + [24]) > (int_64)0), [1584])
	$8 = *(($3 + [16]))
	$11 = *(($3 + [8]))
	CALL eosio_assert([1], [96])
	$14 = (int_64)5522255
	
.LOOP $label$7:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$7 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	CALL eosio_assert($7, [160])
	$14 = (int_64)0
	$16 = *(($3 + [8]))
	CALL __multi3($19, $16, (int_64)$16 >> (int_64)63), (int_64)1000000, (int_64)0)
	$13 = *(($19 + [8]))
	$16 = *($19)
	CALL eosio_assert(( (uint_64)($16 <= (int_64)4611686018427387904) ? ((int_64)$13 < (int_64)0) : (int_64)($13 == 0) ), [1632])
	CALL eosio_assert(( ((uint_64)$16 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$13 > (int_64)-1) : ((int_64)$13 == (int_64)-1) ), [1664])
	$13 = *(($10 + [24]))
	CALL eosio_assert(((int_64)$13 != (int_64)0), [1696])
	CALL eosio_assert((((int_64)$13 != (int_64)-1) | ((int_64)$16 != (int_64)-9223372036854775808)), [1712])
	$16 = ((int_64)$16 / (int_64)$13)
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$10 }
	CALL eosio_assert(((int_64)1413697284 == (int_64)$8), [1120])
	$11 = ((int_64)$16 + (int_64)$11)
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [1168])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [1200])
	
.LABEL $label$10
	$6 = *($0)
	$13 = (int_64)59
	$12 = [848]
	$15 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$16 }
	$7 = *($12)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$7 = ($7 + [165])
	goto $label$14 
	
.LABEL $label$16
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$12
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$11 }
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [1744]
	$17 = (int_64)0
	
.LOOP $label$17:
	$13 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$18 }
	$7 = *($12)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$7 = ($7 + [165])
	goto $label$19 
	
.LABEL $label$20
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$18
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$17 = ((int_64)$13 | (int_64)$17)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$17 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1760]
	$18 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$14 > (uint_64)(int_64)7) ){ goto $label$26 }
	$7 = *($12)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$7 = ($7 + [165])
	goto $label$24 
	
.LABEL $label$26
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$22
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$18 = ((int_64)$16 | (int_64)$18)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$21 }
	*(($19 + [24])) = [0]
	*($19 + [16]) = (int_64)0
	$12 = CALL strlen([1776])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$30 }
	*($19 + [16]) = ($12 << [1])
	$7 = (($19 + [16]) | [1])
	if ( $12 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$9 = (($12 + [16]) & [-16])
	$7 = CALL $70($9)
	*($19 + [16]) = ($9 | [1])
	*($19 + [24]) = $7
	*($19 + [20]) = $12
	
.LABEL $label$29
	CALL memcpy($7, [1776], $12)
	
.LABEL $label$28
	*(($7 + $12)) = [0]
	*((($19 + [32]) + [24])) = $8
	*(($7 = (($19 + [32]) + [36]))) = *($19 + [20])
	*($19 + [40]) = $1
	$12 = ($19 + [24])
	*(($19 + [72])) = *($12)
	*($19 + [32]) = *($0)
	*($19 + [48]) = $11
	*($19 + [64]) = *($19 + [16])
	*($19 + [16]) = [0]
	*($19 + [20]) = [0]
	*($12) = [0]
	*($19 + [88]) = $17
	*($19 + [96]) = $18
	*(($12 = CALL $70([16]))) = $6
	*($12 + [8]) = $15
	*((($19 + [88]) + [32])) = [0]
	$9 = ($12 + [16])
	*((($19 + [88]) + [24])) = $9
	*(($19 + [108])) = $9
	*($19 + [104]) = $12
	*($19 + [116]) = [0]
	*((($19 + [88]) + [36])) = [0]
	$12 = *($19 + [64])
	$7 = ( *($7) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$12 = ($7 + [32])
	$14 = (CASTING uint_64)(uint_32 $7)
	$7 = ($19 + [116])
	
.LOOP $label$31:
	$12 = ($12 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$31 }
	if ( ($12 == 0) ){ goto $label$33 }
	CALL $24($7, $12)
	$7 = *(($19 + [120]))
	$12 = *(($19 + [116]))
	goto $label$32 
	
.LABEL $label$33
	$7 = [0]
	$12 = [0]
	
.LABEL $label$32
	*($19 + [148]) = $12
	*($19 + [144]) = $12
	*($19 + [152]) = $7
	*($19 + [128]) = ($19 + [144])
	*($19 + [136]) = ($19 + [32])
	CALL $51(($19 + [136]), ($19 + [128]))
	CALL $25(($19 + [144]), ($19 + [88]))
	$12 = *($19 + [144])
	CALL send_inline($12, (*($19 + [148]) - $12))
	$12 = *($19 + [144])
	if ( ($12 == 0) ){ goto $label$34 }
	*($19 + [148]) = $12
	CALL $72($12)
	
.LABEL $label$34
	$12 = *($19 + [116])
	if ( ($12 == 0) ){ goto $label$35 }
	*(($19 + [120])) = $12
	CALL $72($12)
	
.LABEL $label$35
	$12 = *($19 + [104])
	if ( ($12 == 0) ){ goto $label$36 }
	*(($19 + [108])) = $12
	CALL $72($12)
	
.LABEL $label$36
	if ( ((*(($19 + [64])) & [1]) == 0) ){ goto $label$37 }
	CALL $72(*(($19 + [72])))
	
.LABEL $label$37
	if ( ((*($19 + [16]) & [1]) == 0) ){ goto $label$38 }
	CALL $72(*(($19 + [24])))
	
.LABEL $label$38
	CALL eosio_assert($4, [1808])
	CALL eosio_assert($4, [1856])
	$12 = CALL db_next_i64(*($3 + [28]), ($19 + [32]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$39 }
	CALL $33($2, $12)
	
.LABEL $label$39
	CALL $52($2, $3)
	$16 = *($0)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$5), [304])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [352])
	$14 = *($10)
	CALL eosio_assert(((int_64)*(($3 + [16])) == (int_64)*(($10 + [32]))), [1888])
	$13 = (int_64)
	*(($12 = ($10 + [24]))) = $13(*($12) - *(($3 + [8]))))
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [1936])
	CALL eosio_assert(((int_64)*($12) < (int_64)4611686018427387904), [1968])
	CALL eosio_assert(((int_64)$14 == (int_64)*($10)), [416])
	*($19 + [96]) = (($19 + [32]) + [40])
	*($19 + [92]) = ($19 + [32])
	*($19 + [88]) = ($19 + [32])
	CALL $10(($19 + [88]), $10)
	CALL db_update_i64(*($10 + [44]), $16, ($19 + [32]), [40])
	$12 = ($0 + [24])
	if ( (uint_64)($14 <= *($12)) ){ goto $label$40 }
	*($12) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$40
	*([0] + [4]) = ($19 + [160])
	return (unreachable)
	
.LABEL $label$27
	CALL $74(($19 + [16]))
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [576])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [576])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [576])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [576])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $53(*($1), ($0 + [32]))
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [2000])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [2048])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2112])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $72($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $72($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [576])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [576])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [208])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2176]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2192]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [2208])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1760]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [1744]
	$7 = (int_64)0
	
.LOOP $label$23:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$24 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1760]
	$7 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$32 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$3 = ($3 + [165])
	goto $label$30 
	
.LABEL $label$32
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$28
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$27 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($9 + [96])) = $0
	*(($9 + [104])) = (int_64)-1
	*(($9 + [112])) = (int_64)0
	*(($9 + [120])) = [0]
	*($9 + [88]) = $0
	*($9 + [80]) = $0
	*($9 + [128]) = $0
	*(($9 + [136])) = $0
	*(($9 + [144])) = (int_64)-1
	*(($9 + [152])) = [0]
	*(($9 + [156])) = [0]
	*(($9 + [160])) = [0]
	*($9 + [168]) = $0
	*(($9 + [176])) = $0
	*(($9 + [184])) = (int_64)-1
	*(($9 + [192])) = [0]
	*(($9 + [196])) = [0]
	*(($9 + [200])) = [0]
	if ( ((int_64)$2 <= (int_64)3849204391378681855) ){ goto $label$37 }
	if ( ((int_64)$2 == (int_64)3849204391378681856) ){ goto $label$36 }
	if ( ((int_64)$2 == (int_64)7112157364056752128) ){ goto $label$35 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$33 }
	*($9 + [76]) = [0]
	*($9 + [72]) = [1]
	*($9) = *($9 + [72])
	CALL $55(($9 + [80]), $9)
	goto $label$33 
	
.LABEL $label$37
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$34 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$33 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [2]
	*($9 + [24 align=4]) = *($9 + [48])
	CALL $57(($9 + [80]), ($9 + [24]))
	goto $label$33 
	
.LABEL $label$36
	*($9 + [60]) = [0]
	*($9 + [56]) = [3]
	*($9 + [16 align=4]) = *($9 + [56])
	CALL $56(($9 + [80]), ($9 + [16]))
	goto $label$33 
	
.LABEL $label$35
	*($9 + [44]) = [0]
	*($9 + [40]) = [4]
	*($9 + [32 align=4]) = *($9 + [40])
	CALL $55(($9 + [80]), ($9 + [32]))
	goto $label$33 
	
.LABEL $label$34
	*($9 + [68]) = [0]
	*($9 + [64]) = [5]
	*($9 + [8 align=4]) = *($9 + [64])
	CALL $55(($9 + [80]), ($9 + [8]))
	
.LABEL $label$33
	CALL $58(($9 + [80]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [208])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $70(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $76($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $72($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $72($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [160])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $59(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $60(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $72(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [96])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [160])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [624])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [624])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [624])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$6 = int_32(($1 - $0) >> [3])
	if ( ((uint_32)$6 > (uint_32)[5]) ){ goto $label$17 }
	$9 = [1]
	goto $label$1 
	
.LABEL $label$18
	$5 = *($0)
	$6 = ($1 + [-8])
	$7 = *($6)
	if ( ((uint_64)$7 <= (uint_64)$5) ){ goto $label$1 }
	*($0) = $7
	*($6) = $5
	goto $label$1 
	
.LABEL $label$17
	$5 = *($0 + [16])
	$2 = *($0)
	$7 = *($0 + [8])
	if ( ((uint_64)$7 <= (uint_64)$2) ){ goto $label$13 }
	if ( ((uint_64)$5 <= (uint_64)$7) ){ goto $label$10 }
	*($0) = $5
	*(($0 + [16])) = $2
	goto $label$9 
	
.LABEL $label$16
	$6 = ($1 + [-8])
	$7 = *($6)
	$2 = *($0)
	$5 = *($0 + [8])
	if ( ((uint_64)$5 <= (uint_64)$2) ){ goto $label$12 }
	if ( ((uint_64)$7 <= (uint_64)$5) ){ goto $label$2 }
	*($0) = $7
	*($6) = $2
	goto $label$1 
	
.LABEL $label$15
	CALL $28($0, ($0 + [8]), ($0 + [16]), ($0 + [24]), ($1 + [-8]))
	goto $label$1 
	
.LABEL $label$14
	$6 = ($1 + [-8])
	$5 = *($0 + [16])
	$2 = *($0)
	$7 = *($0 + [8])
	if ( ((uint_64)$7 <= (uint_64)$2) ){ goto $label$11 }
	if ( ((uint_64)$5 <= (uint_64)$7) ){ goto $label$6 }
	*($0) = $5
	*(($0 + [16])) = $2
	goto $label$5 
	
.LABEL $label$13
	if ( ((uint_64)$5 <= (uint_64)$7) ){ goto $label$8 }
	*(($0 + [16])) = $7
	*(($9 = ($0 + [8]))) = $5
	if ( ((uint_64)$5 <= (uint_64)$2) ){ goto $label$7 }
	*($0) = $5
	*($9) = $2
	goto $label$7 
	
.LABEL $label$12
	if ( ((uint_64)$7 <= (uint_64)$5) ){ goto $label$1 }
	*(($4 = ($0 + [8]))) = $7
	*($6) = $5
	$5 = *($0)
	$7 = *($4)
	if ( ((uint_64)$7 <= (uint_64)$5) ){ goto $label$1 }
	*($0) = $7
	*($4) = $5
	goto $label$1 
	
.LABEL $label$11
	if ( ((uint_64)$5 <= (uint_64)$7) ){ goto $label$4 }
	*(($0 + [16])) = $7
	*(($4 = ($0 + [8]))) = $5
	if ( ((uint_64)$5 <= (uint_64)$2) ){ goto $label$3 }
	*($0) = $5
	*($4) = $2
	goto $label$3 
	
.LABEL $label$10
	*($0) = $7
	*(($9 = ($0 + [8]))) = $2
	if ( ((uint_64)$5 <= (uint_64)$2) ){ goto $label$8 }
	*(($0 + [16])) = $2
	*($9) = $5
	
.LABEL $label$9
	$7 = $2
	goto $label$7 
	
.LABEL $label$8
	$7 = $5
	
.LABEL $label$7
	$4 = ($0 + [24])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$20 }
	$8 = [0]
	$3 = [16]
	
.LOOP $label$21:
	$5 = *($4)
	if ( ((uint_64)$5 <= (uint_64)$7) ){ goto $label$22 }
	$9 = $3
	
.LOOP $label$26:
	*((($6 = ($0 + $9)) + [8])) = $7
	if ( ($9 == 0) ){ goto $label$25 }
	$9 = ($9 + [-8])
	$7 = *(($6 + [-8]))
	if ( ((uint_64)$5 > (uint_64)$7) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$9 = $0
	goto $label$23 
	
.LABEL $label$24
	$9 = (($0 + $9) + [8])
	
.LABEL $label$23
	*($9) = $5
	$8 = ($8 + [1])
	if ( ((int_32)$8 == (int_32)[8]) ){ goto $label$19 }
	
.LABEL $label$22
	$9 = ($4 + [8])
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$20 }
	$3 = ($3 + [8])
	$7 = *($4)
	$4 = $9
	goto $label$21 
	
.LABEL $label$20
	$9 = ([0] | [1])
	goto $label$1 
	
.LABEL $label$19
	$9 = (((int_32)($4 + [8]) == (int_32)$1) | [0])
	goto $label$1 
	
.LABEL $label$6
	*($0) = $7
	*(($4 = ($0 + [8]))) = $2
	if ( ((uint_64)$5 <= (uint_64)$2) ){ goto $label$4 }
	*(($0 + [16])) = $2
	*($4) = $5
	
.LABEL $label$5
	$7 = $2
	goto $label$3 
	
.LABEL $label$4
	$7 = $5
	
.LABEL $label$3
	$5 = *($6)
	if ( ((uint_64)$5 <= (uint_64)$7) ){ goto $label$1 }
	*(($4 = ($0 + [16]))) = $5
	*($6) = $7
	$6 = ($0 + [8])
	$5 = *($6)
	$7 = *($4)
	if ( ((uint_64)$7 <= (uint_64)$5) ){ goto $label$1 }
	*($4) = $5
	*($6) = $7
	$5 = *($0)
	if ( ((uint_64)$7 <= (uint_64)$5) ){ goto $label$1 }
	*($0) = $7
	*(($0 + [8])) = $5
	goto $label$1 
	
.LABEL $label$2
	*($0) = $5
	*(($0 = ($0 + [8]))) = $2
	$7 = *($6)
	if ( ((uint_64)$7 <= (uint_64)$2) ){ goto $label$1 }
	*($0) = $7
	*($6) = $2
	
.LABEL $label$1
	$6
	return ($9 & [1])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$6 = *($2)
	$5 = *($0)
	$7 = *($1)
	if ( ((uint_64)$7 <= (uint_64)$5) ){ goto $label$5 }
	if ( ((uint_64)$6 <= (uint_64)$7) ){ goto $label$4 }
	*($0) = $6
	*($2) = $5
	$8 = [1]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	if ( ((uint_64)$6 <= (uint_64)$7) ){ goto $label$2 }
	*($1) = $6
	*($2) = $7
	$8 = [1]
	$5 = *($0)
	$6 = *($1)
	if ( ((uint_64)$6 <= (uint_64)$5) ){ goto $label$1 }
	*($0) = $6
	*($1) = $5
	$7 = *($2)
	$8 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $7
	*($1) = $5
	$8 = [1]
	$7 = *($2)
	if ( ((uint_64)$7 <= (uint_64)$5) ){ goto $label$1 }
	*($1) = $7
	*($2) = $5
	$8 = [2]
	
.LABEL $label$3
	$7 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = $6
	
.LABEL $label$1
	$6 = *($3)
	if ( ((uint_64)$6 <= (uint_64)$7) ){ goto $label$6 }
	*($2) = $6
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((uint_64)$7 <= (uint_64)$6) ){ goto $label$8 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((uint_64)$7 <= (uint_64)$6) ){ goto $label$7 }
	*($0) = $7
	*($1) = $6
	$8 = ($8 + [3])
	goto $label$6 
	
.LABEL $label$8
	$8 = ($8 + [1])
	goto $label$6 
	
.LABEL $label$7
	$8 = ($8 + [2])
	
.LABEL $label$6
	$6 = *($3)
	$7 = *($4)
	if ( ((uint_64)$7 <= (uint_64)$6) ){ goto $label$12 }
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((uint_64)$7 <= (uint_64)$6) ){ goto $label$11 }
	*($2) = $7
	*($3) = $6
	$6 = *($1)
	$7 = *($2)
	if ( ((uint_64)$7 <= (uint_64)$6) ){ goto $label$10 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((uint_64)$7 <= (uint_64)$6) ){ goto $label$9 }
	*($0) = $7
	*($1) = $6
	$8 = ($8 + [4])
	
.LABEL $label$12
	return $8
	
.LABEL $label$11
	return ($8 + [1])
	
.LABEL $label$10
	return ($8 + [2])
	
.LABEL $label$9
	return ($8 + [3])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [624])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN11weathervote5applyEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [80])
	*([0] + [4]) = $14
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($6)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$6 = [0]
	$1 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $9(($0 + [8]), $1)
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [656])
	CALL eosio_assert((int_64)(*($6 + [16]) == 0), [768])
	$10 = *($6 + [8])
	$2 = *(($0 + [112]))
	$8 = *(($0 + [116]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$6 = ($8 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$7:
	if ( ((int_64)*(*($6)) == (int_64)$10) ){ goto $label$6 }
	$8 = $6
	$1 = ($6 + [-24])
	$6 = $1
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$1 = ($0 + [88])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$6 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [68]) == (int_32)$1), [480])
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	$8 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-2507756424742830080, $10)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $11($1, $8)
	CALL eosio_assert(((int_32)*($6 + [68]) == (int_32)$1), [480])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [816])
	*($14 + [56]) = [0]
	*($14 + [48]) = (int_64)0
	CALL $22(($14 + [48]), ($6 + [8]))
	$3 = ($6 + [16])
	$1 = *($14 + [56])
	$8 = *($14 + [52])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$11 }
	*($8) = *($3)
	$8 = ($8 + [8])
	*($14 + [52]) = $8
	goto $label$10 
	
.LABEL $label$11
	CALL $22(($14 + [48]), $3)
	$1 = *((($14 + [48]) + [8]))
	$8 = *($14 + [52])
	
.LABEL $label$10
	$3 = ($6 + [24])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$13 }
	*($8) = *($3)
	$8 = ($8 + [8])
	*($14 + [52]) = $8
	goto $label$12 
	
.LABEL $label$13
	CALL $22(($14 + [48]), $3)
	$1 = *(($14 + [56]))
	$8 = *($14 + [52])
	
.LABEL $label$12
	$3 = ($6 + [32])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$15 }
	*($8) = *($3)
	$8 = ($8 + [8])
	*($14 + [52]) = $8
	goto $label$14 
	
.LABEL $label$15
	CALL $22(($14 + [48]), $3)
	$1 = *(($14 + [56]))
	$8 = *($14 + [52])
	
.LABEL $label$14
	$3 = ($6 + [40])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$17 }
	*($8) = *($3)
	$8 = ($8 + [8])
	*($14 + [52]) = $8
	goto $label$16 
	
.LABEL $label$17
	CALL $22(($14 + [48]), $3)
	$1 = *(($14 + [56]))
	$8 = *($14 + [52])
	
.LABEL $label$16
	$6 = ($6 + [48])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$19 }
	*($8) = *($6)
	$6 = ($8 + [8])
	*($14 + [52]) = $6
	goto $label$18 
	
.LABEL $label$19
	CALL $22(($14 + [48]), $6)
	$6 = *($14 + [52])
	
.LABEL $label$18
	CALL $23(*($14 + [48]), $6)
	$6 = *($14 + [48])
	if ( ((int_32)*($14 + [52]) == (int_32)$6) ){ goto $label$20 }
	$4 = *($6)
	$5 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$6 = [848]
	$7 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$26 }
	$1 = *($6)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$1 = ($1 + [165])
	goto $label$24 
	
.LABEL $label$26
	$11 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$22
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$7 = ((int_64)$11 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$21 }
	$10 = (int_64)0
	$11 = (int_64)59
	$6 = [864]
	$12 = (int_64)0
	
.LOOP $label$27:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$28 }
	$1 = *($6)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$1 = ($1 + [165])
	goto $label$29 
	
.LABEL $label$30
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$28
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$12 = ((int_64)$9 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$27 }
	$10 = (int_64)0
	$9 = (int_64)59
	$6 = [880]
	$13 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$10 > (uint_64)(int_64)9) ){ goto $label$36 }
	$1 = *($6)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$1 = ($1 + [165])
	goto $label$34 
	
.LABEL $label$36
	$11 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$32
	$6 = ($6 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$31 }
	*($14) = $4
	*($14 + [16]) = $13
	*($14 + [8]) = $12
	*(($6 = CALL $70([16]))) = $5
	*($6 + [8]) = $7
	*(($1 = ($14 + [40]))) = [0]
	$8 = ($6 + [16])
	*(($14 + [32])) = $8
	*(($14 + [28])) = $8
	*($14 + [24]) = $6
	*($14 + [36]) = [0]
	*(($14 + [44])) = [0]
	CALL $24(($14 + [36]), [8])
	$6 = *($14 + [36])
	CALL eosio_assert(((int_32)(*($1) - $6) > (int_32)[7]), [576])
	CALL memcpy($6, $14, [8])
	CALL $25(($14 + [64]), ($14 + [8]))
	$6 = *($14 + [64])
	CALL send_inline($6, (*($14 + [68]) - $6))
	$6 = *($14 + [64])
	if ( ($6 == 0) ){ goto $label$37 }
	*($14 + [68]) = $6
	CALL $72($6)
	
.LABEL $label$37
	$6 = *($14 + [36])
	if ( ($6 == 0) ){ goto $label$38 }
	*(($14 + [40])) = $6
	CALL $72($6)
	
.LABEL $label$38
	$6 = *($14 + [24])
	if ( ($6 == 0) ){ goto $label$39 }
	*(($14 + [28])) = $6
	CALL $72($6)
	
.LABEL $label$39
	$6 = *($14 + [48])
	if ( ($6 == 0) ){ goto $label$40 }
	*($14 + [52]) = $6
	CALL $72($6)
	
.LABEL $label$40
	*([0] + [4]) = ($14 + [80])
	return (unreachable)
	
.LABEL $label$20
	CALL $77(($14 + [48]))
}

void .FUNC _ZN11weathervote4openEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$2 = ($0 + [8])
	$4 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $9($2, $3)
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [656])
	CALL eosio_assert(((int_64)*($4 + [16]) != (int_64)$1), ( [704] ? [736] : ((int_64)$1 != (int_64)0) ))
	$5 = *($0)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$2), [304])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$3()), [352])
	*($4 + [16]) = $1
	$6 = *($4)
	CALL eosio_assert([1], [416])
	*($9 + [56]) = ($9 + [40])
	*($9 + [52]) = $9
	*($9 + [48]) = $9
	CALL $10(($9 + [48]), $4)
	CALL db_update_i64(*($4 + [44]), $5, $9, [40])
	$4 = ($0 + [24])
	if ( (uint_64)($6 <= *($4)) ){ goto $label$6 }
	*($4) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	
.LOOP $label$1:
	$3 = ($1 + [-16])
	$2 = ($1 + [-8])
	
.LOOP $label$2:
	$4 = $0
	
.LOOP $label$4:
	$0 = ($1 - $4)
	$10 = int_32($0 >> [3])
	if ( ((uint_32)$10 <= (uint_32)[5]) ){ goto $label$12 }
	if ( ((int_32)$0 <= (int_32)[247]) ){ goto $label$11 }
	$11 = ($4 + (((int_32)$10 / (int_32)[2]) << [3]))
	if ( ((int_32)$0 < (int_32)[7993]) ){ goto $label$13 }
	$0 = (((int_32)$10 / (int_32)[4]) << [3])
	$9 = CALL $28($4, ($4 + $0), $11, ($11 + $0), $2)
	goto $label$7 
	
.LABEL $label$13
	$5 = *($2)
	$7 = *($4)
	$6 = *($11)
	if ( ((uint_64)$6 <= (uint_64)$7) ){ goto $label$16 }
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$15 }
	*($4) = $5
	*($2) = $7
	$9 = [1]
	goto $label$7 
	
.LABEL $label$16
	$9 = [0]
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$7 }
	*($11) = $5
	*($2) = $6
	$9 = [1]
	$6 = *($4)
	$5 = *($11)
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$7 }
	*($4) = $5
	*($11) = $6
	goto $label$14 
	
.LABEL $label$15
	*($4) = $6
	*($11) = $7
	$9 = [1]
	$5 = *($2)
	if ( ((uint_64)$5 <= (uint_64)$7) ){ goto $label$7 }
	*($11) = $5
	*($2) = $7
	
.LABEL $label$14
	$9 = [2]
	goto $label$7 
	
.LABEL $label$12
	goto $label$6 
	
.LABEL $label$17
	$6 = *($4)
	$5 = *($2)
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$6 }
	*($4) = $5
	*($2) = $6
	return 
	
.LABEL $label$11
	$6 = *($4 + [16])
	$7 = *($4)
	$5 = *($4 + [8])
	if ( ((uint_64)$5 <= (uint_64)$7) ){ goto $label$22 }
	if ( ((uint_64)$6 <= (uint_64)$5) ){ goto $label$21 }
	*($4) = $6
	*(($4 + [16])) = $7
	goto $label$20 
	
.LABEL $label$22
	if ( ((uint_64)$6 <= (uint_64)$5) ){ goto $label$19 }
	*(($4 + [16])) = $5
	*(($0 = ($4 + [8]))) = $6
	if ( ((uint_64)$6 <= (uint_64)$7) ){ goto $label$18 }
	*($4) = $6
	*($0) = $7
	goto $label$18 
	
.LABEL $label$21
	*($4) = $5
	*(($0 = ($4 + [8]))) = $7
	if ( ((uint_64)$6 <= (uint_64)$7) ){ goto $label$19 }
	*(($4 + [16])) = $7
	*($0) = $6
	
.LABEL $label$20
	$5 = $7
	goto $label$18 
	
.LABEL $label$19
	$5 = $6
	
.LABEL $label$18
	$11 = ($4 + [24])
	if ( ((int_32)$11 == (int_32)$1) ){ goto $label$6 }
	$8 = [16]
	
.LOOP $label$23:
	$6 = *($11)
	if ( ((uint_64)$6 <= (uint_64)$5) ){ goto $label$24 }
	$0 = $8
	
.LOOP $label$28:
	*((($10 = ($4 + $0)) + [8])) = $5
	if ( ($0 == 0) ){ goto $label$27 }
	$0 = ($0 + [-8])
	$5 = *(($10 + [-8]))
	if ( ((uint_64)$6 > (uint_64)$5) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$0 = $4
	goto $label$25 
	
.LABEL $label$26
	$0 = (($4 + $0) + [8])
	
.LABEL $label$25
	*($0) = $6
	
.LABEL $label$24
	$0 = ($11 + [8])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	$8 = ($8 + [8])
	$5 = *($11)
	$11 = $0
	goto $label$23 
	
.LABEL $label$10
	$6 = *($4 + [16])
	$7 = *($4)
	$5 = *($4 + [8])
	if ( ((uint_64)$5 <= (uint_64)$7) ){ goto $label$33 }
	if ( ((uint_64)$6 <= (uint_64)$5) ){ goto $label$32 }
	*($4) = $6
	*(($4 + [16])) = $7
	goto $label$31 
	
.LABEL $label$33
	if ( ((uint_64)$6 <= (uint_64)$5) ){ goto $label$30 }
	*(($4 + [16])) = $5
	*(($0 = ($4 + [8]))) = $6
	if ( ((uint_64)$6 <= (uint_64)$7) ){ goto $label$29 }
	*($4) = $6
	*($0) = $7
	goto $label$29 
	
.LABEL $label$32
	*($4) = $5
	*(($0 = ($4 + [8]))) = $7
	if ( ((uint_64)$6 <= (uint_64)$7) ){ goto $label$30 }
	*(($4 + [16])) = $7
	*($0) = $6
	
.LABEL $label$31
	$5 = $7
	goto $label$29 
	
.LABEL $label$30
	$5 = $6
	
.LABEL $label$29
	$6 = *($2)
	if ( ((uint_64)$6 <= (uint_64)$5) ){ goto $label$6 }
	*(($0 = ($4 + [16]))) = $6
	*($2) = $5
	$10 = ($4 + [8])
	$6 = *($10)
	$5 = *($0)
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$6 }
	*($0) = $6
	*($10) = $5
	$6 = *($4)
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$6 }
	*($4) = $5
	*(($4 + [8])) = $6
	return 
	
.LABEL $label$9
	CALL $28($4, ($4 + [8]), ($4 + [16]), ($4 + [24]), $2)
	return 
	
.LABEL $label$8
	$5 = *($2)
	$7 = *($4)
	$6 = *($4 + [8])
	if ( ((uint_64)$6 <= (uint_64)$7) ){ goto $label$35 }
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$34 }
	*($4) = $5
	*($2) = $7
	return 
	
.LABEL $label$35
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$6 }
	*(($0 = ($4 + [8]))) = $5
	*($2) = $6
	$6 = *($4)
	$5 = *($0)
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$6 }
	*($4) = $5
	*($0) = $6
	return 
	
.LABEL $label$34
	*($4) = $6
	*(($0 = ($4 + [8]))) = $7
	$5 = *($2)
	if ( ((uint_64)$5 <= (uint_64)$7) ){ goto $label$6 }
	*($0) = $5
	*($2) = $7
	return 
	
.LABEL $label$7
	$6 = *($11)
	$7 = *($4)
	if ( ((uint_64)$7 > (uint_64)$6) ){ goto $label$37 }
	$0 = $3
	
.LOOP $label$40:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$39 }
	$5 = *($0)
	$10 = ($0 + [-8])
	$0 = $10
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$11 = ($4 + [8])
	$6 = *($2)
	if ( ((uint_64)$7 > (uint_64)$6) ){ goto $label$41 }
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$6 }
	$11 = ($4 + [16])
	
.LOOP $label$43:
	$0 = ($11 + [-8])
	$5 = *($0)
	if ( ((uint_64)$7 > (uint_64)$5) ){ goto $label$42 }
	$11 = ($11 + [8])
	if ( ((int_32)$1 != (int_32)$11) ){ goto $label$43 }
	goto $label$6 
	
.LABEL $label$42
	*($0) = $6
	*($2) = $5
	
.LABEL $label$41
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$6 }
	$10 = $2
	
.LOOP $label$44:
	$0 = ($11 + [-8])
	$5 = *($4)
	
.LOOP $label$45:
	$0 = ($0 + [8])
	$6 = *($0)
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$45 }
	$11 = ($0 + [8])
	
.LOOP $label$46:
	$10 = ($10 + [-8])
	$7 = *($10)
	if ( ((uint_64)$5 > (uint_64)$7) ){ goto $label$46 }
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$5 }
	*($0) = $7
	*($10) = $6
	goto $label$44 
	
.LABEL $label$38
	*($4) = $5
	*(($10 = ($10 + [8]))) = $7
	$9 = ($9 + [1])
	goto $label$36 
	
.LABEL $label$37
	$10 = $2
	
.LABEL $label$36
	$8 = ($4 + [8])
	if ( ((uint_32)$8 >= (uint_32)$10) ){ goto $label$47 }
	
.LOOP $label$48:
	$0 = ($8 + [-8])
	$5 = *($11)
	
.LOOP $label$49:
	$0 = ($0 + [8])
	$6 = *($0)
	if ( ((uint_64)$6 > (uint_64)$5) ){ goto $label$49 }
	$8 = ($0 + [8])
	
.LOOP $label$50:
	$10 = ($10 + [-8])
	$7 = *($10)
	if ( ((uint_64)$7 <= (uint_64)$5) ){ goto $label$50 }
	if ( ((uint_32)$0 > (uint_32)$10) ){ goto $label$51 }
	*($0) = $7
	*($10) = $6
	$11 = ( $10 ? $11 : ((int_32)$11 == (int_32)$0) )
	$9 = ($9 + [1])
	goto $label$48 
	
.LABEL $label$51
	$8 = $0
	
.LABEL $label$47
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$52 }
	$6 = *($8)
	$5 = *($11)
	if ( ((uint_64)$5 <= (uint_64)$6) ){ goto $label$52 }
	*($8) = $5
	*($11) = $6
	$9 = ($9 + [1])
	
.LABEL $label$52
	if ( $9 ){ goto $label$54 }
	$10 = CALL $29($4, $8)
	$0 = ($8 + [8])
	if ( CALL $29($0, $1) ){ goto $label$53 }
	if ( $10 ){ goto $label$2 }
	
.LABEL $label$54
	if ( ((int_32)($8 - $4) >= (int_32)($1 - $8)) ){ goto $label$3 }
	CALL $23($4, $8)
	$0 = ($8 + [8])
	goto $label$2 
	
.LABEL $label$53
	$1 = $8
	$0 = $4
	if ( ($10 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	return 
	
.LABEL $label$5
	$4 = $0
	goto $label$4 
	
.LABEL $label$3
	CALL $23(($8 + [8]), $1)
	$1 = $8
	$0 = $4
	goto $label$1 
	$10
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $70(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $76($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $72($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $24($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [576])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [576])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $27(CALL $26($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $70($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $76($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $72($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [576])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [576])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [576])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [576])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [576])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$19 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$20
	$3 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$1 }
	*($0) = $2
	*($4) = $3
	goto $label$1 
	
.LABEL $label$19
	$8 = *($0 + [2])
	$2 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$15 }
	if ( ((int_32)$8 >= (int_32)$4) ){ goto $label$12 }
	*($0) = $8
	*(($0 + [2])) = $2
	goto $label$11 
	
.LABEL $label$18
	$3 = ($1 + [-1])
	$4 = *($3)
	$6 = *($0)
	$2 = *($0 + [1])
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$14 }
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$4 }
	*($0) = $4
	*($3) = $6
	goto $label$1 
	
.LABEL $label$17
	$8 = [1]
	CALL $68($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	goto $label$1 
	
.LABEL $label$16
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$3 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$13 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$8 }
	*($0) = $2
	*(($0 + [2])) = $3
	goto $label$7 
	
.LABEL $label$15
	if ( ((int_32)$8 >= (int_32)$4) ){ goto $label$10 }
	*(($0 + [2])) = $4
	*(($3 = ($0 + [1]))) = $8
	if ( ((int_32)$8 >= (int_32)$2) ){ goto $label$9 }
	*($0) = $8
	*($3) = $2
	goto $label$9 
	
.LABEL $label$14
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	$8 = [1]
	*(($6 = ($0 + [1]))) = $4
	*($3) = $2
	$2 = *($0)
	$4 = *($6)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($0) = $4
	$8 = [1]
	*(($0 + [1])) = $2
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$6 }
	*(($0 + [2])) = $4
	*(($5 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$5 }
	*($0) = $2
	*($5) = $3
	goto $label$5 
	
.LABEL $label$12
	*($0) = $4
	*(($4 = ($0 + [1]))) = $2
	if ( ((int_32)$8 >= (int_32)$2) ){ goto $label$10 }
	*(($0 + [2])) = $2
	*($4) = $8
	
.LABEL $label$11
	$4 = $2
	goto $label$9 
	
.LABEL $label$10
	$4 = $8
	
.LABEL $label$9
	$6 = ($0 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	$5 = [0]
	$7 = [0]
	
.LOOP $label$22:
	$3 = *($6)
	if ( ((int_32)$3 >= (int_32)int_32(($4 << [24]) >> [24])) ){ goto $label$23 }
	$8 = $5
	
.LOOP $label$27:
	*((($2 = ($0 + $8)) + [3])) = $4
	if ( ((int_32)$8 == (int_32)[-2]) ){ goto $label$26 }
	$8 = ($8 + [-1])
	$4 = *(($2 + [1]))
	if ( ((int_32)$3 < (int_32)$4) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$8 = $0
	goto $label$24 
	
.LABEL $label$25
	$8 = (($0 + $8) + [3])
	
.LABEL $label$24
	*($8) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$7 == (int_32)[8]) ){ goto $label$21 }
	
.LABEL $label$23
	$4 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [1])
	$4 = *($6)
	$6 = $8
	goto $label$22 
	
.LABEL $label$21
	$8 = (((int_32)($6 + [1]) == (int_32)$1) | [0])
	goto $label$1 
	
.LABEL $label$8
	*($0) = $4
	*(($4 = ($0 + [1]))) = $3
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$6 }
	*(($0 + [2])) = $3
	*($4) = $2
	
.LABEL $label$7
	$4 = $3
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	$2 = *($6)
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$1 }
	*(($3 = ($0 + [2]))) = $2
	*($6) = $4
	$8 = [1]
	$2 = *(($0 + [1]))
	$4 = *($3)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($3) = $2
	$8 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($0) = $4
	$8 = [1]
	*(($0 + [1])) = $2
	goto $label$1 
	
.LABEL $label$4
	*($0) = $2
	$8 = [1]
	*(($0 + [1])) = $6
	$4 = *($3)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$1 }
	$8 = [1]
	*(($0 + [1])) = $4
	*($3) = $6
	goto $label$1 
	
.LABEL $label$3
	$4 = [1]
	
.LABEL $label$2
	$8 = ($2 | $4)
	
.LABEL $label$1
	$4
	return ($8 & [1])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = *($2)
	$6 = *($0)
	$8 = *($1)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$5 }
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$4 }
	*($0) = $7
	*($2) = $6
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$2 }
	*($1) = $7
	*($2) = $8
	$9 = [1]
	$6 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$1 }
	*($0) = $7
	*($1) = $6
	$8 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $8
	*($1) = $6
	$9 = [1]
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$1 }
	*($1) = $8
	*($2) = $6
	$9 = [2]
	
.LABEL $label$3
	$8 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = $7
	
.LABEL $label$1
	$7 = *($3)
	if ( ((int_32)$7 >= (int_32)int_32(($8 << [24]) >> [24])) ){ goto $label$6 }
	*($2) = $7
	*($3) = $8
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$8 }
	*($1) = $8
	*($2) = $7
	$7 = *($0)
	$8 = *($1)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$7 }
	*($0) = $8
	*($1) = $7
	$9 = ($9 + [3])
	goto $label$6 
	
.LABEL $label$8
	$9 = ($9 + [1])
	goto $label$6 
	
.LABEL $label$7
	$9 = ($9 + [2])
	
.LABEL $label$6
	$7 = *($3)
	$8 = *($4)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$12 }
	*($3) = $8
	*($4) = $7
	$7 = *($2)
	$8 = *($3)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$11 }
	*($2) = $8
	*($3) = $7
	$3 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$3) ){ goto $label$10 }
	*($1) = $8
	*($2) = $3
	$8 = *($0)
	$2 = *($1)
	if ( ((int_32)$2 >= (int_32)$8) ){ goto $label$9 }
	*($0) = $2
	*($1) = $8
	$9 = ($9 + [4])
	
.LABEL $label$12
	return $9
	
.LABEL $label$11
	return ($9 + [1])
	
.LABEL $label$10
	return ($9 + [2])
	
.LABEL $label$9
	return ($9 + [3])
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10758]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10760])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10758]) = [1]
	$7 = ($7 << [16])
	*([0] + [10760]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10760])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10760]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10758]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10758]) = [1]
	$3 = ($3 << [16])
	*([0] + [10760]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10760])
	
.LABEL $label$8
	*([0] + [10760]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $65($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10672])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$4 = ($1 + [-2])
	$3 = ($1 + [-1])
	
.LOOP $label$2:
	$5 = $0
	
.LOOP $label$4:
	$0 = ($1 - $5)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$12 }
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$11 }
	$12 = ($5 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$13 }
	$0 = uint_32($0 >> [2])
	$10 = CALL $68($5, ($5 + $0), $12, ($12 + $0), $3, $2)
	goto $label$7 
	
.LABEL $label$13
	$0 = *($3)
	$6 = *($5)
	$11 = *($12)
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$16 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$15 }
	*($5) = $0
	*($3) = $6
	$10 = [1]
	goto $label$7 
	
.LABEL $label$16
	$10 = [0]
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$7 }
	*($12) = $0
	*($3) = $11
	$10 = [1]
	$11 = *($5)
	$0 = *($12)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$7 }
	*($5) = $0
	*($12) = $11
	goto $label$14 
	
.LABEL $label$15
	*($5) = $11
	*($12) = $6
	$10 = [1]
	$0 = *($3)
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$7 }
	*($12) = $0
	*($3) = $6
	
.LABEL $label$14
	$10 = [2]
	goto $label$7 
	
.LABEL $label$12
	goto $label$6 
	
.LABEL $label$17
	$11 = *($5)
	$0 = *($3)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($3) = $11
	return 
	
.LABEL $label$11
	$0 = *($5 + [2])
	$6 = *($5)
	$11 = *($5 + [1])
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$22 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$21 }
	*($5) = $0
	*(($5 + [2])) = $6
	goto $label$20 
	
.LABEL $label$22
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$19 }
	*(($5 + [2])) = $11
	*(($7 = ($5 + [1]))) = $0
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$18 }
	*($5) = $0
	*($7) = $6
	goto $label$18 
	
.LABEL $label$21
	*($5) = $11
	*(($11 = ($5 + [1]))) = $6
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$19 }
	*(($5 + [2])) = $6
	*($11) = $0
	
.LABEL $label$20
	$11 = $6
	goto $label$18 
	
.LABEL $label$19
	$11 = $0
	
.LABEL $label$18
	$8 = ($5 + [3])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$6 }
	$12 = [0]
	
.LOOP $label$23:
	$7 = *($8)
	if ( ((int_32)$7 >= (int_32)int_32(($11 << [24]) >> [24])) ){ goto $label$24 }
	$0 = $12
	
.LOOP $label$28:
	*((($6 = ($5 + $0)) + [3])) = $11
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$27 }
	$0 = ($0 + [-1])
	$11 = *(($6 + [1]))
	if ( ((int_32)$7 < (int_32)$11) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$0 = $5
	goto $label$25 
	
.LABEL $label$26
	$0 = (($5 + $0) + [3])
	
.LABEL $label$25
	*($0) = $7
	
.LABEL $label$24
	$0 = ($8 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	$12 = ($12 + [1])
	$11 = *($8)
	$8 = $0
	goto $label$23 
	
.LABEL $label$10
	$11 = *($5 + [2])
	$6 = *($5)
	$0 = *($5 + [1])
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$33 }
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$32 }
	*($5) = $11
	*(($5 + [2])) = $6
	goto $label$31 
	
.LABEL $label$33
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$30 }
	*(($5 + [2])) = $0
	*(($7 = ($5 + [1]))) = $11
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$29 }
	*($5) = $11
	*($7) = $6
	goto $label$29 
	
.LABEL $label$32
	*($5) = $0
	*(($0 = ($5 + [1]))) = $6
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$30 }
	*(($5 + [2])) = $6
	*($0) = $11
	
.LABEL $label$31
	$0 = $6
	goto $label$29 
	
.LABEL $label$30
	$0 = $11
	
.LABEL $label$29
	$11 = *($3)
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$6 }
	*(($6 = ($5 + [2]))) = $11
	*($3) = $0
	$11 = ($5 + [1])
	$7 = *($11)
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$7) ){ goto $label$6 }
	*($6) = $7
	*($11) = $0
	$11 = *($5)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*(($5 + [1])) = $11
	return 
	
.LABEL $label$9
	CALL $68($5, ($5 + [1]), ($5 + [2]), ($5 + [3]), $3, $2)
	return 
	
.LABEL $label$8
	$0 = *($3)
	$6 = *($5)
	$11 = *($5 + [1])
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$35 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$34 }
	*($5) = $0
	*($3) = $6
	return 
	
.LABEL $label$35
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*(($6 = ($5 + [1]))) = $0
	*($3) = $11
	$11 = *($5)
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($6) = $11
	return 
	
.LABEL $label$34
	*($5) = $11
	*(($0 = ($5 + [1]))) = $6
	$11 = *($3)
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$6 }
	*($0) = $11
	*($3) = $6
	return 
	
.LABEL $label$7
	$6 = *($12)
	$8 = *($5)
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$37 }
	$0 = $4
	
.LOOP $label$40:
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$39 }
	$11 = *($0)
	$7 = ($0 + [-1])
	$0 = $7
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$12 = ($5 + [1])
	$6 = *($3)
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$41 }
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$12 = ($5 + [2])
	
.LOOP $label$43:
	$0 = ($12 + [-1])
	$11 = *($0)
	if ( ((int_32)$8 < (int_32)$11) ){ goto $label$42 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$43 }
	goto $label$6 
	
.LABEL $label$42
	*($0) = $6
	*($3) = $11
	
.LABEL $label$41
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$11 = $3
	
.LOOP $label$44:
	$0 = ($12 + [-1])
	$6 = *($5)
	
.LOOP $label$45:
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$45 }
	$12 = ($0 + [1])
	
.LOOP $label$46:
	$11 = ($11 + [-1])
	$8 = *($11)
	if ( ((int_32)$6 < (int_32)$8) ){ goto $label$46 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$5 }
	*($0) = $8
	*($11) = $7
	goto $label$44 
	
.LABEL $label$38
	*($5) = $11
	*(($11 = ($7 + [1]))) = $8
	$10 = ($10 + [1])
	goto $label$36 
	
.LABEL $label$37
	$11 = $3
	
.LABEL $label$36
	$9 = ($5 + [1])
	if ( ((uint_32)$9 >= (uint_32)$11) ){ goto $label$47 }
	
.LOOP $label$48:
	$0 = ($9 + [-1])
	$6 = *($12)
	
.LOOP $label$49:
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$49 }
	$9 = ($0 + [1])
	
.LOOP $label$50:
	$11 = ($11 + [-1])
	$8 = *($11)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$50 }
	if ( ((uint_32)$0 > (uint_32)$11) ){ goto $label$51 }
	*($0) = $8
	*($11) = $7
	$12 = ( $11 ? $12 : ((int_32)$12 == (int_32)$0) )
	$10 = ($10 + [1])
	goto $label$48 
	
.LABEL $label$51
	$9 = $0
	
.LABEL $label$47
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$52 }
	$11 = *($9)
	$0 = *($12)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$52 }
	*($9) = $0
	*($12) = $11
	$10 = ($10 + [1])
	
.LABEL $label$52
	if ( $10 ){ goto $label$54 }
	$11 = CALL $69($5, $9, $2)
	$0 = ($9 + [1])
	if ( CALL $69($0, $1, $2) ){ goto $label$53 }
	if ( $11 ){ goto $label$2 }
	
.LABEL $label$54
	if ( ((int_32)($9 - $5) >= (int_32)($1 - $9)) ){ goto $label$3 }
	CALL $67($5, $9, $2)
	$0 = ($9 + [1])
	goto $label$2 
	
.LABEL $label$53
	$1 = $9
	$0 = $5
	if ( ($11 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	return 
	
.LABEL $label$5
	$5 = $0
	goto $label$4 
	
.LABEL $label$3
	CALL $67(($9 + [1]), $1, $2)
	$1 = $9
	$0 = $5
	goto $label$1 
	$0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10656])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10464]
	$1 = (((int_32)$2 * (int_32)[12]) + [10464])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $62($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $75($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $70($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $75($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $72($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $74($7)
	return (unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $78(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $78(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $72(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $72(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $64([2272], $0)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [640])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $24($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [624])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

int_32 .FUNC __errno_location ()
{
	return [11052]
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [10769])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [10769])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [10769]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [10769]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [11040]))
	$10 = *(($13 + [10769]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [10769]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [10769]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [10769]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [10769])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [10769])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC strtoll (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-9223372036854775808)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

void .FUNC $72 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $73 (int_32 $0)
{
	CALL $72($0)
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10764])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $71 (int_32 $0)
{
	return CALL $70($0)
}

void .FUNC $76 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $77 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $74 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [8]) = [0]
	$4 = *($3 + [8])
	*($7 + [16]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($7 + [8])
	$5 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL $71($4)
	*($7 + [8]) = $6
	$5 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $5, $4)
	*($7 + [20]) = *($3 + [12])
	CALL $42($0, ($7 + [8]), [0])
	if ( (*(($7 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($7 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $73($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($7 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$1 = *($7 + [24])
	if ( ((int_32)$1 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$2 = *($7 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($7 + [28]) = $2
	*($7 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$2 = *($7 + [28])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$2) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $1
	$1 = ($0 + [24])
	*(($0 + [16])) = *($1)
	*($1) = $2
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $70(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $76($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $72($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[24])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($8 - $5) / (int_32)[24])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $72($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = [178956970]
	$2 = ((int_32)$8 / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$5 * (int_32)[24])
	$5 = CALL $70($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[24]) * (int_32)[24]))
	return 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$6 = ( ($1 + ((int_32)$3 * (int_32)[24])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$8 = ($6 - $1)
	$7 = ((int_32)$8 / (int_32)[24])
	if ( ($8 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $8)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $6, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[24]) * (int_32)[24]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ((int_32)$7 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$1
	CALL $76($0)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $70($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $70($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [68]) == (int_32)$0), [304])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [352])
	$4 = *($1)
	$5 = *(*($3))
	$8 = ($5 + [-1])
	if ( ((uint_32)$8 > (uint_32)[3]) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$6
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$5
	$8 = ( ($1 + [40]) ? ($1 + [48]) : ((int_32)$5 == (int_32)[5]) )
	goto $label$1 
	
.LABEL $label$4
	$8 = ($1 + [16])
	goto $label$1 
	
.LABEL $label$3
	$8 = ($1 + [24])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [32])
	
.LABEL $label$1
	*($8) = ((int_64)*($8) + (int_64)*(*($3 + [4])))
	*($9 + [24]) = (int_64)0
	*($9 + [24]) = *(*($3 + [8]))
	*($9 + [32]) = *(*($3))
	*($9 + [40]) = *(*($3 + [4]))
	*($9 + [8]) = (int_64)0
	*($9 + [16]) = [0]
	$8 = *(*($3 + [12]) + [4])
	$3 = (*(($8 + [60])) - *($8 + [56]))
	$5 = ((int_32)$3 / (int_32)[24])
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$7 }
	$3 = CALL $70($3)
	$5 = ($3 + ((int_32)$5 * (int_32)[24]))
	*(($9 + [16])) = $5
	*($9 + [8]) = $3
	*($9 + [12]) = $3
	$6 = *(($8 + [56]))
	$8 = (*(($8 + [60])) - $6)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($3, $6, $8)
	$3 = ($3 + ((int_32)((uint_32)$8 / (uint_32)[24]) * (int_32)[24]))
	*($9 + [12]) = $3
	
.LABEL $label$10
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$9 }
	*($3) = *($9 + [24])
	*(($3 + [16])) = *((($9 + [24]) + [16]))
	*(($3 + [8])) = *((($9 + [24]) + [8]))
	*($9 + [12]) = ($3 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $36(($9 + [8]), ($9 + [24]))
	
.LABEL $label$8
	$3 = ($1 + [56])
	if ( ((int_32)$3 == (int_32)($9 + [8])) ){ goto $label$11 }
	CALL $37($3, *($9 + [8]), *($9 + [12]))
	
.LABEL $label$11
	$3 = *($9 + [8])
	if ( ($3 == 0) ){ goto $label$12 }
	*($9 + [12]) = $3
	CALL $72($3)
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [416])
	$3 = [56]
	$5 = *(($1 + [56]))
	$8 = *(($1 + [60]))
	$6 = ($8 - $5)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	
.LOOP $label$13:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$14 }
	$8 = ($6 + [-24])
	$3 = ((($8 - ((uint_32)$8 % (uint_32)[24])) + $3) + [24])
	
.LABEL $label$14
	if ( ($3 <= [513]) ){ goto $label$16 }
	$8 = CALL malloc($3)
	goto $label$15 
	
.LABEL $label$16
	$8 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$15
	*($9 + [28]) = $8
	*($9 + [24]) = $8
	*($9 + [32]) = ($8 + $3)
	CALL $14(($9 + [24]), $1)
	CALL db_update_i64(*($1 + [72]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$17 }
	CALL free($8)
	
.LABEL $label$17
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$18 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	*([0] + [4]) = ($9 + [48])
	return (unreachable)
	
.LABEL $label$7
	CALL $76(($9 + [8]))
	$8
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [592])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $70([40])
	$6 = CALL $35($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $34(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $72($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN11weathervote8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	*($15 + [64]) = $1
	$9 = *($0)
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$4 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$4 }
	$1 = *($3 + [8])
	if ( ((int_64)$1 != (int_64)1413697284) ){ goto $label$4 }
	$14 = *($4)
	if ( ($14 & [1]) ){ goto $label$6 }
	$5 = uint_32($14 >> [1])
	$11 = ($4 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($4 + [4])
	$11 = *($4 + [8])
	
.LABEL $label$5
	$14 = CALL strlen([896])
	if ( ($14 == 0) ){ goto $label$7 }
	if ( ((int_32)$5 < (int_32)$14) ){ goto $label$4 }
	$7 = ($11 + $5)
	$12 = $11
	
.LOOP $label$8:
	$5 = (($5 - $14) + [1])
	if ( ($5 == 0) ){ goto $label$4 }
	$5 = CALL memchr($12, [86], $5)
	if ( ($5 == 0) ){ goto $label$4 }
	if ( (CALL memcmp($5, [896], $14) == 0) ){ goto $label$9 }
	$12 = ($5 + [1])
	$5 = ($7 - $12)
	if ( ((int_32)$5 >= (int_32)$14) ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$9
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$4 }
	if ( ((int_32)($5 - $11) == (int_32)[-1]) ){ goto $label$4 }
	
.LABEL $label$7
	$5 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$10 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$5 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$5 = [0]
	
.LABEL $label$10
	CALL eosio_assert($5, [912])
	$14 = *($4)
	if ( ($14 & [1]) ){ goto $label$16 }
	$12 = uint_32($14 >> [1])
	$11 = ($4 + [1])
	goto $label$15 
	
.LABEL $label$16
	$12 = *($4 + [4])
	$11 = *($4 + [8])
	
.LABEL $label$15
	$7 = [0]
	$5 = CALL strlen([896])
	if ( ($5 == 0) ){ goto $label$17 }
	$7 = ($11 + $12)
	$14 = $7
	if ( ((int_32)$12 < (int_32)$5) ){ goto $label$18 }
	$14 = $11
	
.LOOP $label$20:
	$12 = (($12 - $5) + [1])
	if ( ($12 == 0) ){ goto $label$19 }
	$14 = CALL memchr($14, [86], $12)
	if ( ($14 == 0) ){ goto $label$19 }
	if ( (CALL memcmp($14, [896], $5) == 0) ){ goto $label$18 }
	$14 = ($14 + [1])
	$12 = ($7 - $14)
	if ( ((int_32)$12 >= (int_32)$5) ){ goto $label$20 }
	
.LABEL $label$19
	$14 = $7
	
.LABEL $label$18
	$7 = ( [-1] ? ($14 - $11) : ((int_32)$14 == (int_32)$7) )
	
.LABEL $label$17
	*(($15 + [88])) = [0]
	*($15 + [80]) = (int_64)0
	$14 = CALL strlen([896])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$23 }
	*($15 + [80]) = ($14 << [1])
	$5 = (($15 + [80]) | [1])
	if ( $14 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$12 = (($14 + [16]) & [-16])
	$5 = CALL $70($12)
	*($15 + [80]) = ($12 | [1])
	*($15 + [88]) = $5
	*($15 + [84]) = $14
	
.LABEL $label$22
	CALL memcpy($5, [896], $14)
	
.LABEL $label$21
	*(($5 + $14)) = [0]
	$14 = *($15 + [80])
	CALL $79(($15 + [48]), $4, (( *($15 + [84]) ? uint_32($14 >> [1]) : ($14 & [1]) ) + $7), [-1], $4)
	if ( ((*($15 + [80]) & [1]) == 0) ){ goto $label$24 }
	CALL $72(*($15 + [88]))
	
.LABEL $label$24
	*($15 + [40]) = [0]
	*($15 + [32]) = (int_64)0
	$14 = CALL strlen([944])
	*($15 + [24]) = $14
	*($15 + [16]) = [0]
	if ( ((uint_32)$14 >= (uint_32)[9]) ){ goto $label$27 }
	$4 = ($15 + [16])
	if ( $14 ){ goto $label$26 }
	$14 = [0]
	goto $label$25 
	
.LABEL $label$27
	$4 = CALL $71($14)
	*($15 + [16]) = $4
	
.LABEL $label$26
	CALL memmove($4, [944], $14)
	$14 = *(($15 + [24]))
	
.LABEL $label$25
	CALL $67($4, ($4 + $14), ($15 + [80]))
	CALL $31(($15 + [32]), ($15 + [48]), ($15 + [16]), [1])
	if ( (*(($15 + [24])) <= [9]) ){ goto $label$28 }
	$14 = *($15 + [16])
	if ( ($14 == 0) ){ goto $label$28 }
	CALL $73($14)
	
.LABEL $label$28
	CALL eosio_assert(((uint_32)((int_32)(*($15 + [36]) - *($15 + [32])) / (int_32)[12]) > (uint_32)[1]), [960])
	$14 = *($15 + [32])
	if ( ((int_32)*($15 + [36]) == (int_32)$14) ){ goto $label$2 }
	if ( (*($14) & [1]) ){ goto $label$30 }
	$14 = ($14 + [1])
	goto $label$29 
	
.LABEL $label$30
	$14 = *($14 + [8])
	
.LABEL $label$29
	$14 = (CASTING uint_32)(uint_64 CALL strtoll($14, [0], [10]))
	*($15 + [12]) = $14
	CALL eosio_assert((($14 + [-1]) <= [6]), [992])
	$14 = *($15 + [32])
	if ( ((uint_32)((int_32)(*($15 + [36]) - $14) / (int_32)[12]) <= (uint_32)[1]) ){ goto $label$1 }
	if ( (*($14 + [12]) & [1]) ){ goto $label$32 }
	$14 = (($14 + [12]) + [1])
	goto $label$31 
	
.LABEL $label$32
	$14 = *(($14 + [20]))
	
.LABEL $label$31
	$14 = (CASTING uint_32)(uint_64 CALL strtoll($14, [0], [10]))
	*($15 + [8]) = $14
	CALL eosio_assert(((int_32)$14 > (int_32)[0]), [992])
	$2 = *($3)
	CALL eosio_assert(((int_64)$2 >= (int_64)((int_64)*($15 + [8]) * (int_64)100000)), [1024])
	$11 = ($0 + [8])
	$5 = [0]
	$14 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)4982871454518345728, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$33 }
	$5 = CALL $9($11, $14)
	
.LABEL $label$33
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1056])
	CALL eosio_assert(*($5 + [16]), [1088])
	$1 = *($5 + [8])
	$6 = *(($0 + [112]))
	$12 = *(($0 + [116]))
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$34 }
	$14 = ($12 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$35:
	if ( ((int_64)*(*($14)) == (int_64)$1) ){ goto $label$34 }
	$12 = $14
	$4 = ($14 + [-24])
	$14 = $4
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$35 }
	
.LABEL $label$34
	$14 = ($0 + [88])
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$37 }
	$4 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [68]) == (int_32)$14), [480])
	*($15 + [4]) = $4
	*($15) = $14
	$12 = ($15 | [4])
	goto $label$36 
	
.LABEL $label$37
	$4 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-2507756424742830080, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$38 }
	$4 = CALL $11($14, $4)
	CALL eosio_assert(((int_32)*($4 + [68]) == (int_32)$14), [480])
	*($15 + [4]) = $4
	*($15) = $14
	$12 = ($15 | [4])
	goto $label$36 
	
.LABEL $label$38
	$4 = [0]
	*($15 + [4]) = [0]
	*($15) = $14
	$12 = ($15 | [4])
	
.LABEL $label$36
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1056])
	$1 = *($0)
	$4 = *($12)
	*($15 + [84]) = ($15 + [8])
	*($15 + [80]) = ($15 + [12])
	*($15 + [88]) = ($15 + [64])
	*($15 + [92]) = $15
	CALL $32($14, $4, $1, ($15 + [80]))
	$1 = *($15 + [64])
	$6 = *(($0 + [72]))
	$12 = *(($0 + [76]))
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$39 }
	$14 = ($12 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$40:
	if ( ((int_64)*(*($14)) == (int_64)$1) ){ goto $label$39 }
	$12 = $14
	$4 = ($14 + [-24])
	$14 = $4
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$40 }
	
.LABEL $label$39
	$7 = ($0 + [48])
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$44 }
	$14 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$7), [480])
	if ( $14 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$14 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)8428113309290463232, $1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$42 }
	$14 = CALL $33($7, $14)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$7), [480])
	
.LABEL $label$43
	$9 = *($0)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$7), [304])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [352])
	$1 = *($14)
	$4 = ($14 + [16])
	$13 = *(($3 + [8]))
	CALL eosio_assert(((int_64)$13 == (int_64)*($4)), [1120])
	$10 = ((int_64)*($14 + [8]) + (int_64)$2)
	*($14 + [8]) = $10
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [1168])
	CALL eosio_assert(((int_64)*($14 + [8]) < (int_64)4611686018427387904), [1200])
	CALL eosio_assert(((int_64)$1 == (int_64)*($14)), [416])
	CALL eosio_assert([1], [576])
	CALL memcpy(($15 + [80]), $14, [8])
	CALL eosio_assert([1], [576])
	CALL memcpy((($15 + [80]) | [8]), ($14 + [8]), [8])
	CALL eosio_assert([1], [576])
	CALL memcpy((($15 + [80]) + [16]), $4, [8])
	CALL db_update_i64(*($14 + [28]), $9, ($15 + [80]), [24])
	$14 = ($0 + [64])
	if ( (uint_64)($1 <= *($14)) ){ goto $label$41 }
	*($14) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$41 
	
.LABEL $label$42
	$9 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [32])
	*(($4 = CALL $70([40])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)1397703940
	CALL eosio_assert([1], [96])
	$8 = ($4 + [16])
	$12 = ($4 + [8])
	$1 = (int_64)5459781
	$14 = [0]
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$46 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	
.LOOP $label$49:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$46 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$49 }
	
.LABEL $label$48
	$6 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	$6 = [0]
	
.LABEL $label$45
	CALL eosio_assert($6, [160])
	*($4 + [24]) = $7
	*($4) = *($15 + [64])
	*(($12 + [12])) = *(($3 + [12]))
	*(($12 + [8])) = *(($3 + [8]))
	*(($12 + [4])) = *(($3 + [4]))
	*($12) = *($3)
	CALL eosio_assert([1], [576])
	CALL memcpy(($15 + [80]), $4, [8])
	CALL eosio_assert([1], [576])
	CALL memcpy((($15 + [80]) | [8]), $12, [8])
	CALL eosio_assert([1], [576])
	CALL memcpy(($15 + [96]), $8, [8])
	$1 = *($4)
	$12 = CALL db_store_i64(*(($0 + [56])), (int_64)8428113309290463232, $9, $1, ($15 + [80]), [24])
	*($4 + [28]) = $12
	$14 = ($0 + [64])
	if ( (uint_64)($1 <= *($14)) ){ goto $label$50 }
	*($14) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$50
	*($15 + [128]) = $4
	$1 = *($4)
	*($15 + [80]) = $1
	*($15 + [76]) = $12
	$7 = ($0 + [76])
	$14 = *($7)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [80]))) ){ goto $label$52 }
	*($14 + [8]) = $1
	*($14 + [16]) = $12
	*($15 + [128]) = [0]
	*($14) = $4
	*($7) = ($14 + [24])
	goto $label$51 
	
.LABEL $label$52
	CALL $34(($0 + [72]), ($15 + [128]), ($15 + [80]), ($15 + [76]))
	
.LABEL $label$51
	$14 = *($15 + [128])
	*($15 + [128]) = [0]
	if ( ($14 == 0) ){ goto $label$53 }
	CALL $72($14)
	
.LABEL $label$53
	$13 = *(($3 + [8]))
	
.LABEL $label$41
	$9 = *($0)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$11), [304])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [352])
	$1 = *($5)
	CALL eosio_assert(((int_64)$13 == (int_64)*(($5 + [32]))), [1120])
	$2 = ((int_64)*($5 + [24]) + (int_64)$2)
	*($5 + [24]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1168])
	CALL eosio_assert(((int_64)*($5 + [24]) < (int_64)4611686018427387904), [1200])
	CALL eosio_assert(((int_64)$1 == (int_64)*($5)), [416])
	*($15 + [136]) = (($15 + [80]) + [40])
	*($15 + [132]) = ($15 + [80])
	*($15 + [128]) = ($15 + [80])
	CALL $10(($15 + [128]), $5)
	CALL db_update_i64(*($5 + [44]), $9, ($15 + [80]), [40])
	$14 = ($0 + [24])
	if ( (uint_64)($1 <= *($14)) ){ goto $label$54 }
	*($14) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$54
	$4 = *($15 + [32])
	if ( ($4 == 0) ){ goto $label$55 }
	$14 = *($15 + [36])
	if ( ((int_32)$14 == (int_32)$4) ){ goto $label$57 }
	$0 = ([0] - $4)
	$14 = ($14 + [-12])
	
.LOOP $label$58:
	if ( ((*($14) & [1]) == 0) ){ goto $label$59 }
	CALL $72(*(($14 + [8])))
	
.LABEL $label$59
	$14 = ($14 + [-12])
	if ( ((int_32)($14 + $0) != (int_32)[-12]) ){ goto $label$58 }
	$14 = *($15 + [32])
	goto $label$56 
	
.LABEL $label$57
	$14 = $4
	
.LABEL $label$56
	*($15 + [36]) = $4
	CALL $72($14)
	
.LABEL $label$55
	if ( ((*($15 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $72(*($15 + [56]))
	
.LABEL $label$4
	*([0] + [4]) = ($15 + [144])
	return (unreachable)
	
.LABEL $label$3
	CALL $74(($15 + [80]))
	
.LABEL $label$2
	CALL $77(($15 + [32]))
	
.LABEL $label$1
	CALL $77(($15 + [32]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($6) = [0]
	$4 = *($2 + [8])
	*($6 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $71($4)
	*($6) = $5
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($5, $2, $4)
	*($6 + [32]) = [0]
	$2 = *(($6 + [8]))
	*($6 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $6
	$5 = ($6 + [32])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $71($2)
	*($6 + [32]) = $5
	$4 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $4, $2)
	*($6 + [16]) = [0]
	$2 = *((($6 + [32]) + [8]))
	*($6 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$4 = ($6 + [16])
	$5 = ($6 + [32])
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL $71($2)
	*($6 + [16]) = $4
	$2 = *((($6 + [16]) + [8]))
	$5 = *($6 + [32])
	
.LABEL $label$5
	CALL memcpy($4, $5, $2)
	*($6 + [28]) = $3
	if ( (*((($6 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $73($2)
	
.LABEL $label$7
	$2 = CALL $38($0, $1, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $73($4)
	
.LABEL $label$8
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$9 }
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $73($4)
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [48])
	return $2
}