(data (i32.const 8192) "EOS\00")
(data (i32.const 8196) "player already has a open game\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8313) "User has not balance!!!\00")
(data (i32.const 8337) "You don\'t have sufficient balance\00")
(data (i32.const 8371) "No such game exists\00")
(data (i32.const 8391) "Cant join this game\00")
(data (i32.const 8411) "Cannot challenge yourself\00")
(data (i32.const 8437) "User Has no Balance!!!\00")
(data (i32.const 8460) "eosbluffcard\00")
(data (i32.const 8473) "Card generation not allowed\00")
(data (i32.const 8501) "round cant be greater than 3\00")
(data (i32.const 8530) "game already ended\00")
(data (i32.const 8549) "cant reveal cards now\00")
(data (i32.const 8571) " Game Drawn\00")
(data (i32.const 8583) "active\00")
(data (i32.const 8590) "declaretie\00")
(data (i32.const 8601) "Cannot fold yet\00")
(data (i32.const 8617) "Not your turn\00")
(data (i32.const 8631) "Not part of this game\00")
(data (i32.const 8653) "Balance not found\00")
(data (i32.const 8671) "you should accept or fold\00")
(data (i32.const 8697) "Not your turn yet\00")
(data (i32.const 8715) "Game has not started yet\00")
(data (i32.const 8740) "User has no balance!!!\00")
(data (i32.const 8763) "Game doesnt exist\00")
(data (i32.const 8781) "User has no balance\00")
(data (i32.const 8801) "Amount too low\00")
(data (i32.const 8816) "Cannot raise now\00")
(data (i32.const 8833) "Raise Should be twice the current Bet\00")
(data (i32.const 8871) "Raise should be twice the current bet\00")
(data (i32.const 8909) "No such game exist hold\00")
(data (i32.const 8933) "Not your turn hold\00")
(data (i32.const 8952) "Game has not started yet hold\00")
(data (i32.const 8982) "Cannot call when it is your turn\00")
(data (i32.const 9015) "its your turn\00")
(data (i32.const 9029) "24 hour has not passed yet\00")
(data (i32.const 9056) "declare winner\00")
(data (i32.const 9071) "declare tie\00")
(data (i32.const 9083) "restart game\00")
(data (i32.const 9096) "Game has not ended yet\00")
(data (i32.const 9119) "leave game\00")
(data (i32.const 9130) "you cant leave a running game\00")
(data (i32.const 9160) "withdraw\00")
(data (i32.const 9169) "you dont have sufficient balance\00")
(data (i32.const 9202) "eosio.token\00")
(data (i32.const 9214) "transfer\00")
(data (i32.const 9223) "Manual Withdraw by player\00")
(data (i32.const 9249) "Game is Not running\00")
(data (i32.const 9269) "test1\00")
(data (i32.const 9275) "string is too long to be a valid symbol_code\00")
(data (i32.const 9320) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9373) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9422) "invalid symbol name\00")
(data (i32.const 9442) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9501) "User does not have balance\00")
(data (i32.const 9528) "cannot pass end iterator to modify\00")
(data (i32.const 9563) "object passed to modify is not in multi_index\00")
(data (i32.const 9609) "cannot modify objects in table of another contract\00")
(data (i32.const 9660) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9719) "write\00")
(data (i32.const 9725) "string is too long to be a valid name\00")
(data (i32.const 9763) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9830) "character is not in allowed character set for names\00")
(data (i32.const 9882) "divide by zero\00")
(data (i32.const 9897) "signed division overflow\00")
(data (i32.const 9922) "No such user exists\00")
(data (i32.const 9942) "Referral Commission for game\00")
(data (i32.const 9971) "eosbluffrake\00")
(data (i32.const 9984) "Commission for game\00")
(data (i32.const 10004) "declare\00")
(data (i32.const 10012) "attempt to subtract asset with different symbol\00")
(data (i32.const 10060) "subtraction underflow\00")
(data (i32.const 10082) "subtraction overflow\00")
(data (i32.const 10103) "multiplication overflow\00")
(data (i32.const 10127) "multiplication underflow\00")
(data (i32.const 10152) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10203) "error reading iterator\00")
(data (i32.const 10226) "read\00")
(data (i32.const 10231) "get\00")
(data (i32.const 10235) "cannot increment end iterator\00")
(data (i32.const 10265) "cannot create objects in table of another contract\00")
(data (i32.const 10316) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10368) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10422) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10470) "attempt to add asset with different symbol\00")
(data (i32.const 10513) "addition underflow\00")
(data (i32.const 10532) "addition overflow\00")
(data (i32.const 10550) "cannot pass end iterator to erase\00")
(data (i32.const 10584) "object passed to erase is not in multi_index\00")
(data (i32.const 10629) "cannot erase objects in table of another contract\00")
(data (i32.const 10679) "attempt to remove object that was not in multi_index\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$12 (param i32)))
(import "env" "eosio_exit" (func $fimport$13 (param i32)))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$18))
(import "env" "is_account" (func $fimport$19 (param i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "tapos_block_num" (func $fimport$22 (result i32)))
(import "env" "db_remove_i64" (func $fimport$23 (param i32)))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$25 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$36 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$37 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$40 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$42 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$43 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$44 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $79))
(export "_Znwj" (func $124))
(export "_ZdlPv" (func $126))
(export "_Znaj" (func $125))
(export "_ZdaPv" (func $127))
(export "_ZnwjSt11align_val_t" (func $128))
(export "_ZnajSt11align_val_t" (func $129))
(export "_ZdlPvSt11align_val_t" (func $130))
(export "_ZdaPvSt11align_val_t" (func $131))
(table $0 21 21 anyfunc)
(elem (i32.const 1) $62 $67 $39 $10 $47 $16 $72 $74 $20 $1 $66 $42 $33 $36 $52 $70 $59 $78 $64 $68)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19148))
(global $global$2 i32 (i32.const 19148))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = (int_64)0
	*($2 + [24]) = [0]
	$3 = *($1)
	$4 = (*(($1 + [12])) - *($1 + [8]))
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL _Znwj($4)
	*((($2 + [16]) + [8])) = ($5 + $4)
	*($2 + [16]) = $5
	*($2 + [20]) = $5
	$6 = *(($1 + [8]))
	$4 = (*(($1 + [12])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $6, $4)
	*($2 + [20]) = ($5 + $4)
	
.LABEL $label$3
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$4 = (*(($1 + [24])) - *($1 + [20]))
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL _Znwj($4)
	*(($2 + [8])) = ($5 + $4)
	*($2) = $5
	*($2 + [4]) = $5
	$4 = *(($1 + [20]))
	$1 = (*(($1 + [24])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($5, $4, $1)
	*($2 + [4]) = ($5 + $1)
	
.LABEL $label$4
	CALL $123($0, $3, ($2 + [16]), $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$5 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$6 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $137(($2 + [16]))
	
.LABEL $label$1
	CALL $137($2)
	(unreachable)
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [48])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $116($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $136($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $136($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $132($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $133(($2 + [16]), ($1 + [8]))
	$1 = CALL $133($2, ($1 + [20]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$7 = CALL $133(($2 + [32]), $1)
	$5 = CALL $133(($2 + [48]), $4)
	CALL void $6((int_32 $3), (int_64 $5), (int_32 $7), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10231])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $117($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [10226])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $90 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [80]) + [16]))) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [72]) = ($2 + $5)
	*($4 + [64]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10226])
	CALL memcpy(($4 + [80]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [10226])
	CALL memcpy((($4 + [80]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [10226])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*($4 + [68]) = ($2 + [24])
	CALL $94(($4 + [64]), (($4 + [80]) + [24]))
	*(($3 = ($4 + [8]))) = *($4 + [72])
	*($4) = *($4 + [64])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4)
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [44 align=4]) = (int_64)72064212649837057
	*($4 + [52]) = [84148994]
	*($4 + [56]) = [6]
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [16])
	CALL $101(($4 + [144]), ($4 + [80]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $145($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $91 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [28 align=4]) = (int_64)72064212649837057
	*($4 + [36]) = [84148994]
	*($4 + [40]) = [6]
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $94(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $133(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $133(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $138 ()
{
	return [10736]
}

void .FUNC $123 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$5 = (*($2 + [4]) - *($2))
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = CALL _Znwj($5)
	*(($4 + [24])) = ($7 + $5)
	*($4 + [16]) = $7
	*($4 + [20]) = $7
	$5 = *($2)
	$2 = (*(($2 + [4])) - $5)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($7, $5, $2)
	*($4 + [20]) = ($7 + $2)
	
.LABEL $label$4
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$2 = (*($3 + [4]) - *($3))
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL _Znwj($2)
	*(($4 + [8])) = ($5 + $2)
	*($4) = $5
	*($4 + [4]) = $5
	$3 = *($3)
	$2 = (*(($3 + [4])) - $3)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $3, $2)
	*($4 + [4]) = ($5 + $2)
	
.LABEL $label$5
	CALL void $6((int_32 $1), (int_64 ($4 + [16])), (int_32 $4), (int_32 $0))
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$6 }
	*($4 + [4]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$7 }
	*($4 + [20]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$3
	CALL $137(($4 + [16]))
	
.LABEL $label$2
	CALL $137($4)
	(unreachable)
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $137($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($4 << [1])
	$5 = ( $3 ? $4 : ($4 <= $3) )
	
.LABEL $label$6
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($1)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$6 = (*($0 + [4]) - $5)
	$4 = ($1 + $6)
	$7 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$6) )
	$8 = ($7 - $1)
	if ( ($8 == 0) ){ goto $label$8 }
	CALL memmove($5, $1, $8)
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	$1 = ($0 + [4])
	$0 = *($1)
	
.LOOP $label$9:
	*($0) = *($4)
	$0 = (*($1) + [1])
	*($1) = $0
	$4 = ($4 + [1])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + $8)
	return (unreachable)
	
.LABEL $label$1
	CALL $137($0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $145($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $132 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $135($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $137($0)
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $137 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $137($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $133(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$5 = *(*($3) + [4])
	*($1 + [48]) = *($5 + [8])
	$3 = *(($3 + [4]))
	*($1 + [114]) = *(($3 + [35]))
	*($1 + [112]) = *(($3 + [31]))
	*($1 + [56]) = *($5 + [8])
	$6 = *($1)
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$7 = ($1 + [8])
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	$8 = ($1 + [16])
	*($3 + [32]) = $8
	$9 = ($1 + [24])
	*($3 + [36]) = $9
	$10 = ($1 + [40])
	*($3 + [40]) = $10
	$11 = ($1 + [48])
	*($3 + [44]) = $11
	$12 = ($1 + [56])
	*($3 + [48]) = $12
	$13 = ($1 + [64])
	*($3 + [52]) = $13
	$14 = ($1 + [80])
	*($3 + [56]) = $14
	$15 = ($1 + [96])
	*($3 + [60]) = $15
	$16 = ($1 + [112])
	*($3 + [64]) = $16
	$17 = ($1 + [113])
	*($3 + [68]) = $17
	$18 = ($1 + [114])
	*($3 + [72]) = $18
	$19 = ($1 + [120])
	*($3 + [76]) = $19
	$20 = ($1 + [136])
	*($3 + [80]) = $20
	$21 = ($1 + [152])
	*($3 + [84]) = $21
	$22 = ($1 + [168])
	*($3 + [88]) = $22
	$23 = ($1 + [184])
	*($3 + [92]) = $23
	$24 = ($1 + [188])
	*($3 + [96]) = $24
	$25 = ($1 + [212])
	*($3 + [104]) = $25
	$26 = ($1 + [200])
	*($3 + [100]) = $26
	$27 = ($1 + [224])
	*($3 + [108]) = $27
	$28 = ($1 + [240])
	*($3 + [112]) = $28
	$29 = ($1 + [248])
	*($3 + [116]) = $29
	$30 = ($1 + [256])
	*($3 + [120]) = $30
	$31 = ($1 + [257])
	*($3 + [124]) = $31
	$32 = ($1 + [258])
	*($3 + [128]) = $32
	$33 = ($1 + [259])
	*($3 + [132]) = $33
	$34 = ($1 + [260])
	*($3 + [136]) = $34
	$35 = ($1 + [261])
	*($3 + [140]) = $35
	CALL $102(($3 + [24]), $3)
	$5 = *($3 + [16])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($5)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [32]) = $8
	*($3 + [36]) = $9
	*($3 + [40]) = $10
	*($3 + [44]) = $11
	*($3 + [48]) = $12
	*($3 + [52]) = $13
	*($3 + [56]) = $14
	*($3 + [60]) = $15
	*($3 + [64]) = $16
	*($3 + [68]) = $17
	*($3 + [72]) = $18
	*($3 + [76]) = $19
	*($3 + [80]) = $20
	*($3 + [84]) = $21
	*($3 + [88]) = $22
	*($3 + [92]) = $23
	*($3 + [96]) = $24
	*($3 + [24]) = $1
	*($3 + [104]) = $25
	*($3 + [100]) = $26
	*($3 + [108]) = $27
	*($3 + [112]) = $28
	*($3 + [116]) = $29
	*($3 + [120]) = $30
	*($3 + [124]) = $31
	*($3 + [128]) = $32
	*($3 + [132]) = $33
	*($3 + [136]) = $34
	*($3 + [140]) = $35
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $145($0)
	
.LABEL $label$1
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [8])
	$6 = *($3 + [8])
	$7 = *($3 + [4])
	*(($1 + [144])) = *(($7 + [8]))
	*($1 + [136]) = *($7)
	$8 = *($1)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [176]))), [10470])
	$9 = ((int_64)*($1 + [168]) + (int_64)*($7))
	*($1 + [168]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [168]) < (int_64)4611686018427387904), [10532])
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$9 = ((int_64)*($1 + [64]) + (int_64)*($7))
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [114]) = *($6 + [38])
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *(*($3 + [12]) + [4])
	$9 = *($6)
	$10 = *($6 + [8])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$10), [10012])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($9 - *($3))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [10082])
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$12 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($3 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$12 = (int_64)0
	
.LABEL $label$1
	$13 = ($1 + [248])
	$14 = ($1 + [114])
	$15 = ($1 + [136])
	CALL eosio_assert([1], [9373])
	$9 = ((int_64)$12 & (int_64)72057594037927935)
	$16 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$9 = $12
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$9 = $12
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [9422])
	CALL eosio_assert(((int_64)$10 == (int_64)$16), [9442])
	$7 = ($1 + [260])
	if ( ((int_64)$11 > (int_64)10000) ){ goto $label$12 }
	*($7) = [1]
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$17 = ($1 + [8])
	*($5 + [28]) = $17
	*($5 + [24]) = $1
	$18 = ($1 + [16])
	*($5 + [32]) = $18
	$19 = ($1 + [24])
	*($5 + [36]) = $19
	$20 = ($1 + [40])
	*($5 + [40]) = $20
	$21 = ($1 + [48])
	*($5 + [44]) = $21
	$22 = ($1 + [56])
	*($5 + [48]) = $22
	$23 = ($1 + [64])
	*($5 + [52]) = $23
	$24 = ($1 + [80])
	*($5 + [56]) = $24
	$25 = ($1 + [96])
	*($5 + [60]) = $25
	$26 = ($1 + [112])
	*($5 + [64]) = $26
	$27 = ($1 + [113])
	*($5 + [68]) = $27
	*($5 + [72]) = $14
	$28 = ($1 + [120])
	*($5 + [76]) = $28
	*($5 + [80]) = $15
	$29 = ($1 + [152])
	*($5 + [84]) = $29
	$30 = ($1 + [168])
	*($5 + [88]) = $30
	$31 = ($1 + [184])
	*($5 + [92]) = $31
	$32 = ($1 + [188])
	*($5 + [96]) = $32
	$33 = ($1 + [212])
	*($5 + [104]) = $33
	$34 = ($1 + [200])
	*($5 + [100]) = $34
	$35 = ($1 + [224])
	*($5 + [108]) = $35
	$36 = ($1 + [240])
	*($5 + [112]) = $36
	*($5 + [116]) = $13
	$37 = ($1 + [256])
	*($5 + [120]) = $37
	$38 = ($1 + [257])
	*($5 + [124]) = $38
	$39 = ($1 + [258])
	*($5 + [128]) = $39
	$40 = ($1 + [259])
	*($5 + [132]) = $40
	*($5 + [136]) = $7
	$41 = ($1 + [261])
	*($5 + [140]) = $41
	CALL $102(($5 + [24]), $5)
	$6 = *($5 + [16])
	if ( ($6 <= [513]) ){ goto $label$14 }
	$3 = CALL $142($6)
	goto $label$13 
	
.LABEL $label$14
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$13
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	*($5 + [16]) = $5
	*($5 + [28]) = $17
	*($5 + [32]) = $18
	*($5 + [36]) = $19
	*($5 + [40]) = $20
	*($5 + [44]) = $21
	*($5 + [48]) = $22
	*($5 + [52]) = $23
	*($5 + [56]) = $24
	*($5 + [60]) = $25
	*($5 + [64]) = $26
	*($5 + [68]) = $27
	*($5 + [72]) = $14
	*($5 + [76]) = $28
	*($5 + [80]) = $15
	*($5 + [84]) = $29
	*($5 + [88]) = $30
	*($5 + [92]) = $31
	*($5 + [96]) = $32
	*($5 + [24]) = $1
	*($5 + [104]) = $33
	*($5 + [100]) = $34
	*($5 + [108]) = $35
	*($5 + [112]) = $36
	*($5 + [116]) = $13
	*($5 + [120]) = $37
	*($5 + [124]) = $38
	*($5 + [128]) = $39
	*($5 + [132]) = $40
	*($5 + [136]) = $7
	*($5 + [140]) = $41
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$17 }
	CALL $145($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$15 }
	
.LABEL $label$16
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$15
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [16])
	$6 = *($3 + [8])
	$7 = *($3 + [4])
	*(($1 + [128])) = *(($7 + [8]))
	*($1 + [120]) = *($7)
	$8 = *($1)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [160]))), [10470])
	$9 = ((int_64)*($1 + [152]) + (int_64)*($7))
	*($1 + [152]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [152]) < (int_64)4611686018427387904), [10532])
	*($1 + [113]) = *($6 + [38])
	$6 = *($3 + [4])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$9 = ((int_64)*($1 + [64]) + (int_64)*($6))
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *(*($3 + [12]) + [4])
	$9 = *($6)
	$10 = *($6 + [8])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$10), [10012])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($9 - *($3))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [10082])
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$12 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($3 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$12 = (int_64)0
	
.LABEL $label$1
	$13 = ($1 + [240])
	$14 = ($1 + [113])
	$15 = ($1 + [120])
	CALL eosio_assert([1], [9373])
	$9 = ((int_64)$12 & (int_64)72057594037927935)
	$16 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$9 = $12
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$9 = $12
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [9422])
	CALL eosio_assert(((int_64)$10 == (int_64)$16), [9442])
	$7 = ($1 + [260])
	if ( ((int_64)$11 > (int_64)10000) ){ goto $label$12 }
	*($7) = [1]
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$17 = ($1 + [8])
	*($5 + [28]) = $17
	*($5 + [24]) = $1
	$18 = ($1 + [16])
	*($5 + [32]) = $18
	$19 = ($1 + [24])
	*($5 + [36]) = $19
	$20 = ($1 + [40])
	*($5 + [40]) = $20
	$21 = ($1 + [48])
	*($5 + [44]) = $21
	$22 = ($1 + [56])
	*($5 + [48]) = $22
	$23 = ($1 + [64])
	*($5 + [52]) = $23
	$24 = ($1 + [80])
	*($5 + [56]) = $24
	$25 = ($1 + [96])
	*($5 + [60]) = $25
	$26 = ($1 + [112])
	*($5 + [64]) = $26
	*($5 + [68]) = $14
	$27 = ($1 + [114])
	*($5 + [72]) = $27
	*($5 + [76]) = $15
	$28 = ($1 + [136])
	*($5 + [80]) = $28
	$29 = ($1 + [152])
	*($5 + [84]) = $29
	$30 = ($1 + [168])
	*($5 + [88]) = $30
	$31 = ($1 + [184])
	*($5 + [92]) = $31
	$32 = ($1 + [188])
	*($5 + [96]) = $32
	$33 = ($1 + [212])
	*($5 + [104]) = $33
	$34 = ($1 + [200])
	*($5 + [100]) = $34
	$35 = ($1 + [224])
	*($5 + [108]) = $35
	*($5 + [112]) = $13
	$36 = ($1 + [248])
	*($5 + [116]) = $36
	$37 = ($1 + [256])
	*($5 + [120]) = $37
	$38 = ($1 + [257])
	*($5 + [124]) = $38
	$39 = ($1 + [258])
	*($5 + [128]) = $39
	$40 = ($1 + [259])
	*($5 + [132]) = $40
	*($5 + [136]) = $7
	$41 = ($1 + [261])
	*($5 + [140]) = $41
	CALL $102(($5 + [24]), $5)
	$6 = *($5 + [16])
	if ( ($6 <= [513]) ){ goto $label$14 }
	$3 = CALL $142($6)
	goto $label$13 
	
.LABEL $label$14
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$13
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	*($5 + [16]) = $5
	*($5 + [28]) = $17
	*($5 + [32]) = $18
	*($5 + [36]) = $19
	*($5 + [40]) = $20
	*($5 + [44]) = $21
	*($5 + [48]) = $22
	*($5 + [52]) = $23
	*($5 + [56]) = $24
	*($5 + [60]) = $25
	*($5 + [64]) = $26
	*($5 + [68]) = $14
	*($5 + [72]) = $27
	*($5 + [76]) = $15
	*($5 + [80]) = $28
	*($5 + [84]) = $29
	*($5 + [88]) = $30
	*($5 + [92]) = $31
	*($5 + [96]) = $32
	*($5 + [24]) = $1
	*($5 + [104]) = $33
	*($5 + [100]) = $34
	*($5 + [108]) = $35
	*($5 + [112]) = $13
	*($5 + [116]) = $36
	*($5 + [120]) = $37
	*($5 + [124]) = $38
	*($5 + [128]) = $39
	*($5 + [132]) = $40
	*($5 + [136]) = $7
	*($5 + [140]) = $41
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$17 }
	CALL $145($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$15 }
	
.LABEL $label$16
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$15
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [16])
	$6 = *($3 + [8])
	$7 = *($3 + [4])
	*(($1 + [128])) = *(($7 + [8]))
	*($1 + [120]) = *($7)
	$8 = *($1)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [160]))), [10470])
	$9 = ((int_64)*($1 + [152]) + (int_64)*($7))
	*($1 + [152]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [152]) < (int_64)4611686018427387904), [10532])
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$9 = ((int_64)*($1 + [64]) + (int_64)*($7))
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [113]) = *($6 + [39])
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = ($1 + [259])
	$10 = ($1 + [240])
	$11 = ($1 + [113])
	$12 = ($1 + [120])
	if ( (*(*(*($3) + [4]) + [260]) == 0) ){ goto $label$1 }
	*($7) = [1]
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$13 = ($1 + [8])
	*($5 + [28]) = $13
	*($5 + [24]) = $1
	$14 = ($1 + [16])
	*($5 + [32]) = $14
	$15 = ($1 + [24])
	*($5 + [36]) = $15
	$16 = ($1 + [40])
	*($5 + [40]) = $16
	$17 = ($1 + [48])
	*($5 + [44]) = $17
	$18 = ($1 + [56])
	*($5 + [48]) = $18
	$19 = ($1 + [64])
	*($5 + [52]) = $19
	$20 = ($1 + [80])
	*($5 + [56]) = $20
	$21 = ($1 + [96])
	*($5 + [60]) = $21
	$22 = ($1 + [112])
	*($5 + [64]) = $22
	*($5 + [68]) = $11
	$23 = ($1 + [114])
	*($5 + [72]) = $23
	*($5 + [76]) = $12
	$24 = ($1 + [136])
	*($5 + [80]) = $24
	$25 = ($1 + [152])
	*($5 + [84]) = $25
	$26 = ($1 + [168])
	*($5 + [88]) = $26
	$27 = ($1 + [184])
	*($5 + [92]) = $27
	$28 = ($1 + [188])
	*($5 + [96]) = $28
	$29 = ($1 + [212])
	*($5 + [104]) = $29
	$30 = ($1 + [200])
	*($5 + [100]) = $30
	$31 = ($1 + [224])
	*($5 + [108]) = $31
	*($5 + [112]) = $10
	$32 = ($1 + [248])
	*($5 + [116]) = $32
	$33 = ($1 + [256])
	*($5 + [120]) = $33
	$34 = ($1 + [257])
	*($5 + [124]) = $34
	$35 = ($1 + [258])
	*($5 + [128]) = $35
	*($5 + [132]) = $7
	$36 = ($1 + [260])
	*($5 + [136]) = $36
	$37 = ($1 + [261])
	*($5 + [140]) = $37
	CALL $102(($5 + [24]), $5)
	$6 = *($5 + [16])
	if ( ($6 <= [513]) ){ goto $label$3 }
	$3 = CALL $142($6)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	*($5 + [16]) = $5
	*($5 + [28]) = $13
	*($5 + [32]) = $14
	*($5 + [36]) = $15
	*($5 + [40]) = $16
	*($5 + [44]) = $17
	*($5 + [48]) = $18
	*($5 + [52]) = $19
	*($5 + [56]) = $20
	*($5 + [60]) = $21
	*($5 + [64]) = $22
	*($5 + [68]) = $11
	*($5 + [72]) = $23
	*($5 + [76]) = $12
	*($5 + [80]) = $24
	*($5 + [84]) = $25
	*($5 + [88]) = $26
	*($5 + [92]) = $27
	*($5 + [96]) = $28
	*($5 + [24]) = $1
	*($5 + [104]) = $29
	*($5 + [100]) = $30
	*($5 + [108]) = $31
	*($5 + [112]) = $10
	*($5 + [116]) = $32
	*($5 + [120]) = $33
	*($5 + [124]) = $34
	*($5 + [128]) = $35
	*($5 + [132]) = $7
	*($5 + [136]) = $36
	*($5 + [140]) = $37
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $145($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [144])
}

void .FUNC $42 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL require_auth($2)
	*(($3 + [248])) = [0]
	*($3 + [232]) = (int_64)-1
	*($3 + [240]) = (int_64)0
	$4 = *($0)
	*($3 + [216]) = $4
	*($3 + [224]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)7035938307668180992, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $2(($3 + [216]), $6)
	CALL eosio_assert(((int_32)*($5 + [264]) == (int_32)($3 + [216])), [10152])
	
.LABEL $label$1
	*($3 + [212]) = $5
	*($3 + [208]) = ($3 + [216])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8763])
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)$2), [8617])
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)*($0 + [30])), [8715])
	$6 = [1]
	if ( ((int_64)*($5 + [8]) == (int_64)$2) ){ goto $label$2 }
	$6 = ((int_64)*($5 + [16]) == (int_64)$2)
	
.LABEL $label$2
	CALL eosio_assert($6, [8631])
	*(($3 + [200])) = [0]
	*($3 + [184]) = (int_64)-1
	*($3 + [192]) = (int_64)0
	$4 = *($0)
	*($3 + [168]) = $4
	$7 = *(($5 + [72]))
	*($3 + [176]) = $2
	$6 = CALL db_find_i64($4, $2, (int_64)-3665743569108320256, (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_32)$6) < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $3(($3 + [168]), $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [168])), [10152])
	$5 = *($3 + [212])
	$8 = ($5 + [8])
	goto $label$3 
	
.LABEL $label$4
	$8 = ($5 + [8])
	$6 = [0]
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8781])
	if ( ((int_64)*($8) != (int_64)$2) ){ goto $label$14 }
	*($3 + [160]) = (int_64)0
	*($3 + [152]) = (int_64)0
	if ( ((int_32)*($5 + [114]) != (int_32)*($0 + [37])) ){ goto $label$12 }
	$7 = *($5 + [136])
	$4 = *(($5 + [144]))
	CALL eosio_assert(((int_64)*(($5 + [128])) == (int_64)$4), [10012])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($7 - *($5 + [120]))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [10082])
	*(($5 = (($3 + [152]) + [8]))) = $4
	*($3 + [152]) = $7
	CALL eosio_assert(((int_64)$4 == (int_64)*($6 + [8])), [9442])
	if ( ((int_64)*($6) >= (int_64)*($3 + [152])) ){ goto $label$13 }
	CALL eosio_assert(((int_64)*(($6 + [8])) == (int_64)*($5)), [9442])
	CALL eosio_assert(((int_64)*($6) >= (int_64)*($3 + [152])), [8337])
	goto $label$12 
	
.LABEL $label$14
	*($3 + [160]) = (int_64)0
	*($3 + [152]) = (int_64)0
	if ( ((int_32)*($5 + [113]) != (int_32)*($0 + [37])) ){ goto $label$10 }
	*(($8 = (($3 + [152]) + [8]))) = *(($5 + [128]))
	$4 = *($5 + [120])
	*($3 + [152]) = $4
	if ( ((int_64)*($6) >= (int_64)$4) ){ goto $label$11 }
	CALL eosio_assert([0], [8337])
	goto $label$10 
	
.LABEL $label$13
	$4 = *($5)
	*((($3 + [136]) + [8])) = $4
	*((($3 + [24]) + [8])) = $4
	$4 = *($3 + [152])
	*($3 + [24]) = $4
	*($3 + [136]) = $4
	CALL $8($0, $2, ($3 + [24]))
	$4 = *($0)
	$5 = *($3 + [212])
	*($3 + [128]) = $0
	*($3 + [124]) = ($3 + [152])
	*($3 + [120]) = ($3 + [208])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9528])
	CALL $43(($3 + [216]), $5, $4, ($3 + [120]))
	
.LABEL $label$12
	$5 = *($3 + [212])
	if ( ((int_32)*($5 + [114]) != (int_32)*($0 + [38])) ){ goto $label$9 }
	$7 = *($5 + [136])
	$4 = *(($5 + [144]))
	CALL eosio_assert(((int_64)*(($5 + [128])) == (int_64)$4), [10012])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7($7 - *($5 + [120]))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [10082])
	*(($5 = (($3 + [152]) + [8]))) = $4
	*($3 + [152]) = $7
	CALL eosio_assert(((int_64)$4 == (int_64)*($6 + [8])), [9442])
	if ( ((int_64)*($6) >= (int_64)*($3 + [152])) ){ goto $label$8 }
	CALL eosio_assert([0], [8337])
	CALL $12($0, $1)
	$6 = *($3 + [192])
	if ( $6 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	$4 = *($8)
	*((($3 + [88]) + [8])) = $4
	*((($3 + [56]) + [8])) = $4
	$4 = *($3 + [152])
	*($3 + [56]) = $4
	*($3 + [88]) = $4
	CALL $8($0, $2, ($3 + [56]))
	$4 = *($0)
	$5 = *($3 + [212])
	*($3 + [128]) = $0
	*($3 + [124]) = ($3 + [152])
	*($3 + [120]) = ($3 + [208])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9528])
	CALL $44(($3 + [216]), $5, $4, ($3 + [120]))
	
.LABEL $label$10
	$5 = *($3 + [212])
	if ( ((int_32)*($5 + [113]) != (int_32)*($0 + [38])) ){ goto $label$9 }
	$4 = *($5 + [120])
	$7 = *(($5 + [128]))
	CALL eosio_assert(((int_64)*(($5 + [144])) == (int_64)$7), [10012])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($4 - *($5 + [136]))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [10082])
	*(($5 = (($3 + [152]) + [8]))) = $7
	*($3 + [152]) = $4
	if ( ((int_64)*($6) >= (int_64)$4) ){ goto $label$7 }
	CALL eosio_assert([0], [8337])
	
.LABEL $label$9
	CALL $12($0, $1)
	$6 = *($3 + [192])
	if ( ($6 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($5)
	*((($3 + [104]) + [8])) = $4
	*((($3 + [8]) + [8])) = $4
	$4 = *($3 + [152])
	*($3 + [8]) = $4
	*($3 + [104]) = $4
	CALL $8($0, $2, ($3 + [8]))
	$2 = *($0)
	$5 = *($3 + [212])
	*($3 + [128]) = $0
	*($3 + [124]) = ($3 + [152])
	*($3 + [120]) = ($3 + [208])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9528])
	CALL $45(($3 + [216]), $5, $2, ($3 + [120]))
	CALL $12($0, $1)
	$6 = *($3 + [192])
	if ( $6 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$4 = *($5)
	*((($3 + [72]) + [8])) = $4
	*((($3 + [40]) + [8])) = $4
	$4 = *($3 + [152])
	*($3 + [40]) = $4
	*($3 + [72]) = $4
	CALL $8($0, $2, ($3 + [40]))
	$2 = *($0)
	$5 = *($3 + [212])
	*($3 + [128]) = $0
	*($3 + [124]) = ($3 + [152])
	*($3 + [120]) = ($3 + [208])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9528])
	CALL $46(($3 + [216]), $5, $2, ($3 + [120]))
	CALL $12($0, $1)
	$6 = *($3 + [192])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($3 + [196])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$18 }
	CALL _ZdlPv($0)
	
.LABEL $label$18
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$17 }
	$5 = *(($3 + [192]))
	goto $label$15 
	
.LABEL $label$16
	$5 = $6
	
.LABEL $label$15
	*($8) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$19 }
	$8 = ($3 + [244])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$23 }
	CALL $7($0)
	CALL _ZdlPv($0)
	
.LABEL $label$23
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($3 + [240]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $6
	
.LABEL $label$20
	*($8) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$global$0 = ($3 + [256])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [8])
	$6 = *($3 + [8])
	$7 = *($3 + [4])
	*(($1 + [144])) = *(($7 + [8]))
	*($1 + [136]) = *($7)
	$8 = *($1)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [176]))), [10470])
	$9 = ((int_64)*($1 + [168]) + (int_64)*($7))
	*($1 + [168]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [168]) < (int_64)4611686018427387904), [10532])
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$9 = ((int_64)*($1 + [64]) + (int_64)*($7))
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [114]) = *($6 + [37])
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *(*($3 + [12]) + [4])
	$9 = *($6)
	$10 = *($6 + [8])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$10), [10012])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($9 - *($3))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [10082])
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$12 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($3 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$12 = (int_64)0
	
.LABEL $label$1
	$13 = ($1 + [248])
	$14 = ($1 + [114])
	$15 = ($1 + [136])
	CALL eosio_assert([1], [9373])
	$9 = ((int_64)$12 & (int_64)72057594037927935)
	$16 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$9 = $12
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$9 = $12
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [9422])
	CALL eosio_assert(((int_64)$10 == (int_64)$16), [9442])
	$7 = ($1 + [260])
	if ( ((int_64)$11 > (int_64)10000) ){ goto $label$12 }
	*($7) = [1]
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$17 = ($1 + [8])
	*($5 + [28]) = $17
	*($5 + [24]) = $1
	$18 = ($1 + [16])
	*($5 + [32]) = $18
	$19 = ($1 + [24])
	*($5 + [36]) = $19
	$20 = ($1 + [40])
	*($5 + [40]) = $20
	$21 = ($1 + [48])
	*($5 + [44]) = $21
	$22 = ($1 + [56])
	*($5 + [48]) = $22
	$23 = ($1 + [64])
	*($5 + [52]) = $23
	$24 = ($1 + [80])
	*($5 + [56]) = $24
	$25 = ($1 + [96])
	*($5 + [60]) = $25
	$26 = ($1 + [112])
	*($5 + [64]) = $26
	$27 = ($1 + [113])
	*($5 + [68]) = $27
	*($5 + [72]) = $14
	$28 = ($1 + [120])
	*($5 + [76]) = $28
	*($5 + [80]) = $15
	$29 = ($1 + [152])
	*($5 + [84]) = $29
	$30 = ($1 + [168])
	*($5 + [88]) = $30
	$31 = ($1 + [184])
	*($5 + [92]) = $31
	$32 = ($1 + [188])
	*($5 + [96]) = $32
	$33 = ($1 + [212])
	*($5 + [104]) = $33
	$34 = ($1 + [200])
	*($5 + [100]) = $34
	$35 = ($1 + [224])
	*($5 + [108]) = $35
	$36 = ($1 + [240])
	*($5 + [112]) = $36
	*($5 + [116]) = $13
	$37 = ($1 + [256])
	*($5 + [120]) = $37
	$38 = ($1 + [257])
	*($5 + [124]) = $38
	$39 = ($1 + [258])
	*($5 + [128]) = $39
	$40 = ($1 + [259])
	*($5 + [132]) = $40
	*($5 + [136]) = $7
	$41 = ($1 + [261])
	*($5 + [140]) = $41
	CALL $102(($5 + [24]), $5)
	$6 = *($5 + [16])
	if ( ($6 <= [513]) ){ goto $label$14 }
	$3 = CALL $142($6)
	goto $label$13 
	
.LABEL $label$14
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$13
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	*($5 + [16]) = $5
	*($5 + [28]) = $17
	*($5 + [32]) = $18
	*($5 + [36]) = $19
	*($5 + [40]) = $20
	*($5 + [44]) = $21
	*($5 + [48]) = $22
	*($5 + [52]) = $23
	*($5 + [56]) = $24
	*($5 + [60]) = $25
	*($5 + [64]) = $26
	*($5 + [68]) = $27
	*($5 + [72]) = $14
	*($5 + [76]) = $28
	*($5 + [80]) = $15
	*($5 + [84]) = $29
	*($5 + [88]) = $30
	*($5 + [92]) = $31
	*($5 + [96]) = $32
	*($5 + [24]) = $1
	*($5 + [104]) = $33
	*($5 + [100]) = $34
	*($5 + [108]) = $35
	*($5 + [112]) = $36
	*($5 + [116]) = $13
	*($5 + [120]) = $37
	*($5 + [124]) = $38
	*($5 + [128]) = $39
	*($5 + [132]) = $40
	*($5 + [136]) = $7
	*($5 + [140]) = $41
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$17 }
	CALL $145($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$15 }
	
.LABEL $label$16
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$15
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [16])
	$6 = *($3 + [8])
	$7 = *($3 + [4])
	*(($1 + [128])) = *(($7 + [8]))
	*($1 + [120]) = *($7)
	$8 = *($1)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [160]))), [10470])
	$9 = ((int_64)*($1 + [152]) + (int_64)*($7))
	*($1 + [152]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [152]) < (int_64)4611686018427387904), [10532])
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$9 = ((int_64)*($1 + [64]) + (int_64)*($7))
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [113]) = *($6 + [37])
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *(*($3 + [12]) + [4])
	$9 = *($6)
	$10 = *($6 + [8])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$10), [10012])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($9 - *($3))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [10082])
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$12 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($3 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$12 = (int_64)0
	
.LABEL $label$1
	$13 = ($1 + [240])
	$14 = ($1 + [113])
	$15 = ($1 + [120])
	CALL eosio_assert([1], [9373])
	$9 = ((int_64)$12 & (int_64)72057594037927935)
	$16 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$9 = $12
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$9 = $12
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [9422])
	CALL eosio_assert(((int_64)$10 == (int_64)$16), [9442])
	$7 = ($1 + [260])
	if ( ((int_64)$11 > (int_64)10000) ){ goto $label$12 }
	*($7) = [1]
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$17 = ($1 + [8])
	*($5 + [28]) = $17
	*($5 + [24]) = $1
	$18 = ($1 + [16])
	*($5 + [32]) = $18
	$19 = ($1 + [24])
	*($5 + [36]) = $19
	$20 = ($1 + [40])
	*($5 + [40]) = $20
	$21 = ($1 + [48])
	*($5 + [44]) = $21
	$22 = ($1 + [56])
	*($5 + [48]) = $22
	$23 = ($1 + [64])
	*($5 + [52]) = $23
	$24 = ($1 + [80])
	*($5 + [56]) = $24
	$25 = ($1 + [96])
	*($5 + [60]) = $25
	$26 = ($1 + [112])
	*($5 + [64]) = $26
	*($5 + [68]) = $14
	$27 = ($1 + [114])
	*($5 + [72]) = $27
	*($5 + [76]) = $15
	$28 = ($1 + [136])
	*($5 + [80]) = $28
	$29 = ($1 + [152])
	*($5 + [84]) = $29
	$30 = ($1 + [168])
	*($5 + [88]) = $30
	$31 = ($1 + [184])
	*($5 + [92]) = $31
	$32 = ($1 + [188])
	*($5 + [96]) = $32
	$33 = ($1 + [212])
	*($5 + [104]) = $33
	$34 = ($1 + [200])
	*($5 + [100]) = $34
	$35 = ($1 + [224])
	*($5 + [108]) = $35
	*($5 + [112]) = $13
	$36 = ($1 + [248])
	*($5 + [116]) = $36
	$37 = ($1 + [256])
	*($5 + [120]) = $37
	$38 = ($1 + [257])
	*($5 + [124]) = $38
	$39 = ($1 + [258])
	*($5 + [128]) = $39
	$40 = ($1 + [259])
	*($5 + [132]) = $40
	*($5 + [136]) = $7
	$41 = ($1 + [261])
	*($5 + [140]) = $41
	CALL $102(($5 + [24]), $5)
	$6 = *($5 + [16])
	if ( ($6 <= [513]) ){ goto $label$14 }
	$3 = CALL $142($6)
	goto $label$13 
	
.LABEL $label$14
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$13
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	*($5 + [16]) = $5
	*($5 + [28]) = $17
	*($5 + [32]) = $18
	*($5 + [36]) = $19
	*($5 + [40]) = $20
	*($5 + [44]) = $21
	*($5 + [48]) = $22
	*($5 + [52]) = $23
	*($5 + [56]) = $24
	*($5 + [60]) = $25
	*($5 + [64]) = $26
	*($5 + [68]) = $14
	*($5 + [72]) = $27
	*($5 + [76]) = $15
	*($5 + [80]) = $28
	*($5 + [84]) = $29
	*($5 + [88]) = $30
	*($5 + [92]) = $31
	*($5 + [96]) = $32
	*($5 + [24]) = $1
	*($5 + [104]) = $33
	*($5 + [100]) = $34
	*($5 + [108]) = $35
	*($5 + [112]) = $13
	*($5 + [116]) = $36
	*($5 + [120]) = $37
	*($5 + [124]) = $38
	*($5 + [128]) = $39
	*($5 + [132]) = $40
	*($5 + [136]) = $7
	*($5 + [140]) = $41
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$17 }
	CALL $145($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$15 }
	
.LABEL $label$16
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$15
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
}

void .FUNC $47 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [240])
	$global$0 = $4
	CALL require_auth($2)
	*(($4 + [232])) = [0]
	*($4 + [216]) = (int_64)-1
	*($4 + [224]) = (int_64)0
	$5 = *($0)
	*($4 + [200]) = $5
	*($4 + [208]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)7035938307668180992, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $2(($4 + [200]), $7)
	CALL eosio_assert(((int_32)*($6 + [264]) == (int_32)($4 + [200])), [10152])
	
.LABEL $label$1
	*($4 + [196]) = $6
	$8 = *($6 + [260])
	$7 = [1]
	*($4 + [192]) = ($4 + [200])
	CALL eosio_assert(((int_32)$8 ^ (int_32)[1]), [8671])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8371])
	CALL eosio_assert(((int_64)*($6 + [48]) == (int_64)$2), [8617])
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)*($0 + [30])), [8715])
	if ( ((int_64)*($6 + [8]) == (int_64)$2) ){ goto $label$2 }
	$7 = ((int_64)*($6 + [16]) == (int_64)$2)
	
.LABEL $label$2
	CALL eosio_assert($7, [8631])
	$7 = [0]
	*(($4 + [184])) = [0]
	*($4 + [168]) = (int_64)-1
	*($4 + [176]) = (int_64)0
	$5 = *($0)
	*($4 + [152]) = $5
	*($4 + [160]) = $2
	$8 = CALL db_find_i64($5, $2, (int_64)-3665743569108320256, (uint_64)*(($6 + [72])) >> (uint_64)(int_64)8)
	if ( ((int_32)$8) <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $3(($4 + [152]), $8)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($4 + [152])), [10152])
	*($4 + [148]) = $6
	$6 = *($4 + [196])
	$9 = ($6 + [8])
	$8 = (($4 + [144]) | [4])
	$7 = [1]
	goto $label$3 
	
.LABEL $label$4
	$9 = ($6 + [8])
	*($4 + [148]) = [0]
	$8 = (($4 + [144]) | [4])
	
.LABEL $label$3
	*($4 + [144]) = ($4 + [152])
	CALL eosio_assert($7, [8740])
	$5 = *($3 + [8])
	if ( ((int_64)*($9) != (int_64)$2) ){ goto $label$14 }
	CALL eosio_assert(((int_64)$5 == (int_64)*(($6 + [144]))), [9442])
	CALL eosio_assert(((int_64)*($3) > (int_64)*($6 + [136])), [8801])
	CALL eosio_assert(((int_32)*(*($4 + [196]) + [114]) != (int_32)*($0 + [34])), [8816])
	CALL eosio_assert(((int_32)*(*($4 + [196]) + [114]) != (int_32)*($0 + [36])), [8816])
	if ( ((int_32)*(*($4 + [196]) + [114]) != (int_32)*($0 + [37])) ){ goto $label$12 }
	$7 = ($3 + [8])
	$6 = *($8)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*($7)), [9442])
	$5 = *($3)
	if ( ((int_64)*($6) >= (int_64)$5) ){ goto $label$13 }
	CALL eosio_assert(((int_64)*(*($8)) >= (int_64)$5), [8337])
	goto $label$12 
	
.LABEL $label$14
	CALL eosio_assert(((int_64)$5 == (int_64)*(($6 + [128]))), [9442])
	CALL eosio_assert(((int_64)*($3) > (int_64)*($6 + [120])), [8801])
	CALL eosio_assert(((int_32)*(*($4 + [196]) + [113]) != (int_32)*($0 + [34])), [8816])
	CALL eosio_assert(((int_32)*(*($4 + [196]) + [113]) != (int_32)*($0 + [36])), [8816])
	$6 = *($4 + [196])
	if ( ((int_32)*($6 + [113]) != (int_32)*($0 + [37])) ){ goto $label$10 }
	$1 = *($3)
	$7 = ($3 + [8])
	$5 = *($7)
	CALL eosio_assert(((int_64)*(($6 + [128])) == (int_64)$5), [10012])
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($1 - *($6 + [120]))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [10082])
	*($7) = $5
	*($3) = $1
	$6 = *($8)
	CALL eosio_assert(((int_64)$5 == (int_64)*($6 + [8])), [9442])
	$5 = *($3)
	if ( ((int_64)*($6) >= (int_64)$5) ){ goto $label$11 }
	CALL eosio_assert(((int_64)*(*($8)) >= (int_64)$5), [8337])
	goto $label$10 
	
.LABEL $label$13
	$1 = *($7)
	*((($4 + [128]) + [8])) = $1
	$5 = *($3)
	*((($4 + [16]) + [8])) = $1
	*($4 + [128]) = $5
	*($4 + [16]) = $5
	CALL $8($0, $2, ($4 + [16]))
	$5 = *($0)
	$6 = *($4 + [196])
	*($4 + [116]) = $3
	*($4 + [120]) = $0
	*($4 + [112]) = ($4 + [192])
	*($4 + [124]) = ($4 + [144])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9528])
	CALL $48(($4 + [200]), $6, $5, ($4 + [112]))
	
.LABEL $label$12
	$6 = *($4 + [196])
	if ( ((int_32)*($6 + [114]) != (int_32)*($0 + [38])) ){ goto $label$9 }
	$1 = *(($6 + [144]))
	$5 = *($6 + [136])
	CALL eosio_assert(((int_64)$5 < (int_64)2305843009213693952), [10103])
	CALL eosio_assert(((int_64)$5 > (int_64)-2305843009213693952), [10127])
	$6 = ($3 + [8])
	CALL eosio_assert(((int_64)$1 == (int_64)*($6)), [9442])
	CALL eosio_assert(((int_64)*($3) >= (int_64)((int_64)$5 << (int_64)1)), [8833])
	$1 = *($3)
	$5 = *($6)
	$7 = *($4 + [196])
	CALL eosio_assert(((int_64)*(($7 + [128])) == (int_64)$5), [10012])
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($1 - *($7 + [120]))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [10082])
	*($6) = $5
	*($3) = $1
	$7 = *($8)
	CALL eosio_assert(((int_64)$5 == (int_64)*($7 + [8])), [9442])
	$5 = *($3)
	if ( ((int_64)*($7) >= (int_64)$5) ){ goto $label$8 }
	CALL eosio_assert(((int_64)*(*($8)) >= (int_64)$5), [8337])
	$3 = *($4 + [176])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	$1 = *($7)
	*((($4 + [80]) + [8])) = $1
	$5 = *($3)
	*((($4 + [48]) + [8])) = $1
	*($4 + [80]) = $5
	*($4 + [48]) = $5
	CALL $8($0, $2, ($4 + [48]))
	$5 = *($0)
	$6 = *($4 + [196])
	*($4 + [116]) = $3
	*($4 + [120]) = $0
	*($4 + [112]) = ($4 + [192])
	*($4 + [124]) = ($4 + [144])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9528])
	CALL $49(($4 + [200]), $6, $5, ($4 + [112]))
	
.LABEL $label$10
	$6 = *($4 + [196])
	if ( ((int_32)*($6 + [113]) != (int_32)*($0 + [38])) ){ goto $label$9 }
	$1 = *(($6 + [128]))
	$5 = *($6 + [120])
	CALL eosio_assert(((int_64)$5 < (int_64)2305843009213693952), [10103])
	CALL eosio_assert(((int_64)$5 > (int_64)-2305843009213693952), [10127])
	$6 = ($3 + [8])
	CALL eosio_assert(((int_64)$1 == (int_64)*($6)), [9442])
	CALL eosio_assert(((int_64)*($3) >= (int_64)((int_64)$5 << (int_64)1)), [8871])
	$1 = *($3)
	$5 = *($6)
	$7 = *($4 + [196])
	CALL eosio_assert(((int_64)*(($7 + [144])) == (int_64)$5), [10012])
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($1 - *($7 + [136]))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [10082])
	*($6) = $5
	*($3) = $1
	$7 = *($8)
	CALL eosio_assert(((int_64)$5 == (int_64)*($7 + [8])), [9442])
	if ( ((int_64)*($7) >= (int_64)*($3)) ){ goto $label$7 }
	$0 = *($8)
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)*($6)), [9442])
	CALL eosio_assert(((int_64)*($0) >= (int_64)*($3)), [8337])
	
.LABEL $label$9
	$3 = *($4 + [176])
	if ( ($3 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$8
	$1 = *($6)
	*((($4 + [96]) + [8])) = $1
	$5 = *($3)
	*(($4 + [8])) = $1
	*($4 + [96]) = $5
	*($4) = $5
	CALL $8($0, $2, $4)
	$2 = *($0)
	$6 = *($4 + [196])
	*($4 + [116]) = $3
	*($4 + [120]) = $0
	*($4 + [112]) = ($4 + [192])
	*($4 + [124]) = ($4 + [144])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9528])
	CALL $50(($4 + [200]), $6, $2, ($4 + [112]))
	$3 = *($4 + [176])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = *($6)
	*((($4 + [64]) + [8])) = $1
	$5 = *($3)
	*((($4 + [32]) + [8])) = $1
	*($4 + [64]) = $5
	*($4 + [32]) = $5
	CALL $8($0, $2, ($4 + [32]))
	$2 = *($0)
	$6 = *($4 + [196])
	*($4 + [116]) = $3
	*($4 + [120]) = $0
	*($4 + [112]) = ($4 + [192])
	*($4 + [124]) = ($4 + [144])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9528])
	CALL $51(($4 + [200]), $6, $2, ($4 + [112]))
	$3 = *($4 + [176])
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($4 + [180])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$18 }
	CALL _ZdlPv($0)
	
.LABEL $label$18
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$17 }
	$6 = *(($4 + [176]))
	goto $label$15 
	
.LABEL $label$16
	$6 = $3
	
.LABEL $label$15
	*($7) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$3 = *($4 + [224])
	if ( ($3 == 0) ){ goto $label$19 }
	$7 = ($4 + [228])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$21 }
	
.LOOP $label$22:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$23 }
	CALL $7($0)
	CALL _ZdlPv($0)
	
.LABEL $label$23
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$22 }
	$6 = *(($4 + [224]))
	goto $label$20 
	
.LABEL $label$21
	$6 = $3
	
.LABEL $label$20
	*($7) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$global$0 = ($4 + [240])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [8])
	$6 = *($1)
	$7 = *($3 + [8])
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [144]))), [10470])
	$9 = ((int_64)*($1 + [136]) + (int_64)*($8))
	*($1 + [136]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [136]) < (int_64)4611686018427387904), [10532])
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [176]))), [10470])
	$9 = ((int_64)*($1 + [168]) + (int_64)*($8))
	*($1 + [168]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [168]) < (int_64)4611686018427387904), [10532])
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$9 = ((int_64)*($1 + [64]) + (int_64)*($8))
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [114]) = *($7 + [39])
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = ($1 + [259])
	$10 = ($1 + [248])
	$11 = ($1 + [114])
	if ( (*(*(*($3) + [4]) + [260]) == 0) ){ goto $label$1 }
	*($8) = [1]
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$12 = ($1 + [8])
	*($5 + [28]) = $12
	*($5 + [24]) = $1
	$13 = ($1 + [16])
	*($5 + [32]) = $13
	$14 = ($1 + [24])
	*($5 + [36]) = $14
	$15 = ($1 + [40])
	*($5 + [40]) = $15
	$16 = ($1 + [48])
	*($5 + [44]) = $16
	$17 = ($1 + [56])
	*($5 + [48]) = $17
	$18 = ($1 + [64])
	*($5 + [52]) = $18
	$19 = ($1 + [80])
	*($5 + [56]) = $19
	$20 = ($1 + [96])
	*($5 + [60]) = $20
	$21 = ($1 + [112])
	*($5 + [64]) = $21
	$22 = ($1 + [113])
	*($5 + [68]) = $22
	*($5 + [72]) = $11
	$23 = ($1 + [120])
	*($5 + [76]) = $23
	$24 = ($1 + [136])
	*($5 + [80]) = $24
	$25 = ($1 + [152])
	*($5 + [84]) = $25
	$26 = ($1 + [168])
	*($5 + [88]) = $26
	$27 = ($1 + [184])
	*($5 + [92]) = $27
	$28 = ($1 + [188])
	*($5 + [96]) = $28
	$29 = ($1 + [212])
	*($5 + [104]) = $29
	$30 = ($1 + [200])
	*($5 + [100]) = $30
	$31 = ($1 + [224])
	*($5 + [108]) = $31
	$32 = ($1 + [240])
	*($5 + [112]) = $32
	*($5 + [116]) = $10
	$33 = ($1 + [256])
	*($5 + [120]) = $33
	$34 = ($1 + [257])
	*($5 + [124]) = $34
	$35 = ($1 + [258])
	*($5 + [128]) = $35
	*($5 + [132]) = $8
	$36 = ($1 + [260])
	*($5 + [136]) = $36
	$37 = ($1 + [261])
	*($5 + [140]) = $37
	CALL $102(($5 + [24]), $5)
	$7 = *($5 + [16])
	if ( ($7 <= [513]) ){ goto $label$3 }
	$3 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	*($5 + [16]) = $5
	*($5 + [28]) = $12
	*($5 + [32]) = $13
	*($5 + [36]) = $14
	*($5 + [40]) = $15
	*($5 + [44]) = $16
	*($5 + [48]) = $17
	*($5 + [52]) = $18
	*($5 + [56]) = $19
	*($5 + [60]) = $20
	*($5 + [64]) = $21
	*($5 + [68]) = $22
	*($5 + [72]) = $11
	*($5 + [76]) = $23
	*($5 + [80]) = $24
	*($5 + [84]) = $25
	*($5 + [88]) = $26
	*($5 + [92]) = $27
	*($5 + [96]) = $28
	*($5 + [24]) = $1
	*($5 + [104]) = $29
	*($5 + [100]) = $30
	*($5 + [108]) = $31
	*($5 + [112]) = $32
	*($5 + [116]) = $10
	*($5 + [120]) = $33
	*($5 + [124]) = $34
	*($5 + [128]) = $35
	*($5 + [132]) = $8
	*($5 + [136]) = $36
	*($5 + [140]) = $37
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $145($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [144])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [16])
	$6 = *($1)
	$7 = *($3 + [8])
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [128]))), [10470])
	$9 = ((int_64)*($1 + [120]) + (int_64)*($8))
	*($1 + [120]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [120]) < (int_64)4611686018427387904), [10532])
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [160]))), [10470])
	$9 = ((int_64)*($1 + [152]) + (int_64)*($8))
	*($1 + [152]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [152]) < (int_64)4611686018427387904), [10532])
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$9 = ((int_64)*($1 + [64]) + (int_64)*($8))
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [113]) = *($7 + [39])
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$8 = ($1 + [259])
	$10 = ($1 + [240])
	$11 = ($1 + [113])
	if ( (*(*(*($3) + [4]) + [260]) == 0) ){ goto $label$1 }
	*($8) = [1]
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$12 = ($1 + [8])
	*($5 + [28]) = $12
	*($5 + [24]) = $1
	$13 = ($1 + [16])
	*($5 + [32]) = $13
	$14 = ($1 + [24])
	*($5 + [36]) = $14
	$15 = ($1 + [40])
	*($5 + [40]) = $15
	$16 = ($1 + [48])
	*($5 + [44]) = $16
	$17 = ($1 + [56])
	*($5 + [48]) = $17
	$18 = ($1 + [64])
	*($5 + [52]) = $18
	$19 = ($1 + [80])
	*($5 + [56]) = $19
	$20 = ($1 + [96])
	*($5 + [60]) = $20
	$21 = ($1 + [112])
	*($5 + [64]) = $21
	*($5 + [68]) = $11
	$22 = ($1 + [114])
	*($5 + [72]) = $22
	$23 = ($1 + [120])
	*($5 + [76]) = $23
	$24 = ($1 + [136])
	*($5 + [80]) = $24
	$25 = ($1 + [152])
	*($5 + [84]) = $25
	$26 = ($1 + [168])
	*($5 + [88]) = $26
	$27 = ($1 + [184])
	*($5 + [92]) = $27
	$28 = ($1 + [188])
	*($5 + [96]) = $28
	$29 = ($1 + [212])
	*($5 + [104]) = $29
	$30 = ($1 + [200])
	*($5 + [100]) = $30
	$31 = ($1 + [224])
	*($5 + [108]) = $31
	*($5 + [112]) = $10
	$32 = ($1 + [248])
	*($5 + [116]) = $32
	$33 = ($1 + [256])
	*($5 + [120]) = $33
	$34 = ($1 + [257])
	*($5 + [124]) = $34
	$35 = ($1 + [258])
	*($5 + [128]) = $35
	*($5 + [132]) = $8
	$36 = ($1 + [260])
	*($5 + [136]) = $36
	$37 = ($1 + [261])
	*($5 + [140]) = $37
	CALL $102(($5 + [24]), $5)
	$7 = *($5 + [16])
	if ( ($7 <= [513]) ){ goto $label$3 }
	$3 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	*($5 + [16]) = $5
	*($5 + [28]) = $12
	*($5 + [32]) = $13
	*($5 + [36]) = $14
	*($5 + [40]) = $15
	*($5 + [44]) = $16
	*($5 + [48]) = $17
	*($5 + [52]) = $18
	*($5 + [56]) = $19
	*($5 + [60]) = $20
	*($5 + [64]) = $21
	*($5 + [68]) = $11
	*($5 + [72]) = $22
	*($5 + [76]) = $23
	*($5 + [80]) = $24
	*($5 + [84]) = $25
	*($5 + [88]) = $26
	*($5 + [92]) = $27
	*($5 + [96]) = $28
	*($5 + [24]) = $1
	*($5 + [104]) = $29
	*($5 + [100]) = $30
	*($5 + [108]) = $31
	*($5 + [112]) = $10
	*($5 + [116]) = $32
	*($5 + [120]) = $33
	*($5 + [124]) = $34
	*($5 + [128]) = $35
	*($5 + [132]) = $8
	*($5 + [136]) = $36
	*($5 + [140]) = $37
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $145($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [144])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [8])
	$6 = *($3 + [8])
	$7 = *($3 + [4])
	*(($1 + [144])) = *(($7 + [8]))
	*($1 + [136]) = *($7)
	$8 = *($1)
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [176]))), [10470])
	$9 = ((int_64)*($1 + [168]) + (int_64)*($7))
	*($1 + [168]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [168]) < (int_64)4611686018427387904), [10532])
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$9 = ((int_64)*($1 + [64]) + (int_64)*($7))
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [114]) = *($6 + [39])
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = ($1 + [259])
	$10 = ($1 + [248])
	$11 = ($1 + [114])
	$12 = ($1 + [136])
	if ( (*(*(*($3) + [4]) + [260]) == 0) ){ goto $label$1 }
	*($7) = [1]
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$13 = ($1 + [8])
	*($5 + [28]) = $13
	*($5 + [24]) = $1
	$14 = ($1 + [16])
	*($5 + [32]) = $14
	$15 = ($1 + [24])
	*($5 + [36]) = $15
	$16 = ($1 + [40])
	*($5 + [40]) = $16
	$17 = ($1 + [48])
	*($5 + [44]) = $17
	$18 = ($1 + [56])
	*($5 + [48]) = $18
	$19 = ($1 + [64])
	*($5 + [52]) = $19
	$20 = ($1 + [80])
	*($5 + [56]) = $20
	$21 = ($1 + [96])
	*($5 + [60]) = $21
	$22 = ($1 + [112])
	*($5 + [64]) = $22
	$23 = ($1 + [113])
	*($5 + [68]) = $23
	*($5 + [72]) = $11
	$24 = ($1 + [120])
	*($5 + [76]) = $24
	*($5 + [80]) = $12
	$25 = ($1 + [152])
	*($5 + [84]) = $25
	$26 = ($1 + [168])
	*($5 + [88]) = $26
	$27 = ($1 + [184])
	*($5 + [92]) = $27
	$28 = ($1 + [188])
	*($5 + [96]) = $28
	$29 = ($1 + [212])
	*($5 + [104]) = $29
	$30 = ($1 + [200])
	*($5 + [100]) = $30
	$31 = ($1 + [224])
	*($5 + [108]) = $31
	$32 = ($1 + [240])
	*($5 + [112]) = $32
	*($5 + [116]) = $10
	$33 = ($1 + [256])
	*($5 + [120]) = $33
	$34 = ($1 + [257])
	*($5 + [124]) = $34
	$35 = ($1 + [258])
	*($5 + [128]) = $35
	*($5 + [132]) = $7
	$36 = ($1 + [260])
	*($5 + [136]) = $36
	$37 = ($1 + [261])
	*($5 + [140]) = $37
	CALL $102(($5 + [24]), $5)
	$6 = *($5 + [16])
	if ( ($6 <= [513]) ){ goto $label$3 }
	$3 = CALL $142($6)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	*($5 + [16]) = $5
	*($5 + [28]) = $13
	*($5 + [32]) = $14
	*($5 + [36]) = $15
	*($5 + [40]) = $16
	*($5 + [44]) = $17
	*($5 + [48]) = $18
	*($5 + [52]) = $19
	*($5 + [56]) = $20
	*($5 + [60]) = $21
	*($5 + [64]) = $22
	*($5 + [68]) = $23
	*($5 + [72]) = $11
	*($5 + [76]) = $24
	*($5 + [80]) = $12
	*($5 + [84]) = $25
	*($5 + [88]) = $26
	*($5 + [92]) = $27
	*($5 + [96]) = $28
	*($5 + [24]) = $1
	*($5 + [104]) = $29
	*($5 + [100]) = $30
	*($5 + [108]) = $31
	*($5 + [112]) = $32
	*($5 + [116]) = $10
	*($5 + [120]) = $33
	*($5 + [124]) = $34
	*($5 + [128]) = $35
	*($5 + [132]) = $7
	*($5 + [136]) = $36
	*($5 + [140]) = $37
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $145($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [144])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $142($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10732])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $142($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $140(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10732])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $140(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	$5 = *($2 + [8])
	*($3 + [16]) = $1
	$6 = [0]
	$7 = CALL db_find_i64($4, $1, (int_64)-3665743569108320256, (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $3(($3 + [8]), $7)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [8])), [10152])
	
.LABEL $label$1
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [9501])
	$1 = *($0)
	*($3) = $2
	CALL eosio_assert($7, [9528])
	CALL $9(($3 + [8]), $6, $1, $3)
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$2 }
	$7 = ($3 + [36])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$6 = $0
	
.LABEL $label$3
	*($7) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1) = (int_64))(*($1) - *(*($3)))
	$5 = *($1 + [8])
	CALL eosio_assert([1], [9660])
	CALL eosio_assert([1], [9719])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [9719])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $137($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $7($1)
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [224])
	if ( ($1 == 0) ){ goto $label$1 }
	*(($0 + [228])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$1 = *($0 + [212])
	if ( ($1 == 0) ){ goto $label$2 }
	*(($0 + [216])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$2 = *($0 + [200])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = ($0 + [204])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$7
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($0 + [200]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $2
	
.LABEL $label$4
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$2 = *($0 + [188])
	if ( ($2 == 0) ){ goto $label$8 }
	$3 = ($0 + [192])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$12
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$11 }
	$1 = *(($0 + [188]))
	goto $label$9 
	
.LABEL $label$10
	$1 = $2
	
.LABEL $label$9
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$13 }
	*(($0 + [28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	return $0
}

int_32 .FUNC $4 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$1 = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*(($0 + [32])) = [0]
	$2 = CALL $139([8192])
	if ( ($2 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [9275])
	goto $label$2 
	
.LABEL $label$3
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = (int_64)0
	
.LOOP $label$4:
	$3 = *(($2 + [8191]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$5
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$4 }
	
.LABEL $label$1
	*($0 + [64]) = (int_64)0
	*(($2 = ($0 + [72]))) = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9373])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$10 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [9422])
	$2 = CALL $139([8192])
	if ( ($2 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9275])
	goto $label$13 
	
.LABEL $label$14
	if ( ($2 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = (int_64)0
	
.LOOP $label$15:
	$3 = *(($2 + [8191]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$16
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$15 }
	goto $label$11 
	
.LABEL $label$12
	$1 = (int_64)0
	
.LABEL $label$11
	*($0 + [80]) = (int_64)0
	*(($2 = ($0 + [88]))) = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9373])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$1 = $4
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$21 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$3 = [0]
	
.LABEL $label$17
	CALL eosio_assert($3, [9422])
	$2 = CALL $139([8192])
	if ( ($2 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [9275])
	goto $label$24 
	
.LABEL $label$25
	if ( ($2 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$1 = (int_64)0
	
.LOOP $label$26:
	$3 = *(($2 + [8191]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$27
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$26 }
	goto $label$22 
	
.LABEL $label$23
	$1 = (int_64)0
	
.LABEL $label$22
	*($0 + [96]) = (int_64)0
	*(($2 = ($0 + [104]))) = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9373])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$1 = $4
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$32 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$3 = [0]
	
.LABEL $label$28
	CALL eosio_assert($3, [9422])
	$2 = CALL $139([8192])
	if ( ($2 <= [8]) ){ goto $label$36 }
	CALL eosio_assert([0], [9275])
	goto $label$35 
	
.LABEL $label$36
	if ( ($2 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	$1 = (int_64)0
	
.LOOP $label$37:
	$3 = *(($2 + [8191]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$38 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$38
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$37 }
	goto $label$33 
	
.LABEL $label$34
	$1 = (int_64)0
	
.LABEL $label$33
	*($0 + [120]) = (int_64)0
	*(($2 = ($0 + [128]))) = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9373])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$42 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$42
	$1 = $4
	
.LOOP $label$43:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$43 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$3 = [0]
	
.LABEL $label$39
	CALL eosio_assert($3, [9422])
	$2 = CALL $139([8192])
	if ( ($2 <= [8]) ){ goto $label$47 }
	CALL eosio_assert([0], [9275])
	goto $label$46 
	
.LABEL $label$47
	if ( ($2 == 0) ){ goto $label$45 }
	
.LABEL $label$46
	$1 = (int_64)0
	
.LOOP $label$48:
	$3 = *(($2 + [8191]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$49 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$49
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$48 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$44 
	
.LABEL $label$45
	$1 = (int_64)4
	
.LABEL $label$44
	*($0 + [136]) = (int_64)0
	*(($2 = ($0 + [144]))) = $1
	CALL eosio_assert([1], [9373])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$53 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$53
	$1 = $4
	
.LOOP $label$54:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$51 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$54 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$3 = [0]
	
.LABEL $label$50
	CALL eosio_assert($3, [9422])
	$2 = CALL $139([8192])
	if ( ($2 <= [8]) ){ goto $label$58 }
	CALL eosio_assert([0], [9275])
	goto $label$57 
	
.LABEL $label$58
	if ( ($2 == 0) ){ goto $label$56 }
	
.LABEL $label$57
	$1 = (int_64)0
	
.LOOP $label$59:
	$3 = *(($2 + [8191]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$60 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$60
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$59 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$55 
	
.LABEL $label$56
	$1 = (int_64)4
	
.LABEL $label$55
	*($0 + [152]) = (int_64)0
	*(($2 = ($0 + [160]))) = $1
	CALL eosio_assert([1], [9373])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$63:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$62 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$64 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$64
	$1 = $4
	
.LOOP $label$65:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$62 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$65 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$62
	$3 = [0]
	
.LABEL $label$61
	CALL eosio_assert($3, [9422])
	$2 = CALL $139([8192])
	if ( ($2 <= [8]) ){ goto $label$69 }
	CALL eosio_assert([0], [9275])
	goto $label$68 
	
.LABEL $label$69
	if ( ($2 == 0) ){ goto $label$67 }
	
.LABEL $label$68
	$1 = (int_64)0
	
.LOOP $label$70:
	$3 = *(($2 + [8191]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$71 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$71
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$70 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$66 
	
.LABEL $label$67
	$1 = (int_64)4
	
.LABEL $label$66
	*($0 + [168]) = (int_64)0
	*(($2 = ($0 + [176]))) = $1
	CALL eosio_assert([1], [9373])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$74:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$73 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$75 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$74 }
	goto $label$72 
	
.LABEL $label$75
	$1 = $4
	
.LOOP $label$76:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$73 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$76 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$74 }
	goto $label$72 
	
.LABEL $label$73
	$3 = [0]
	
.LABEL $label$72
	CALL eosio_assert($3, [9422])
	*($0 + [184]) = [0]
	*($0 + [188 align=4]) = (int_64)0
	*(($0 + [196])) = (int_64)0
	*(($0 + [204])) = (int_64)0
	*($0 + [212 align=4]) = (int_64)0
	*(($0 + [220])) = (int_64)0
	*(($0 + [228])) = (int_64)0
	*($0 + [257 align=1]) = [0]
	*($0 + [261]) = [0]
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1 + [8]) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [8])
	$7 = *($4 + [4])
	$8 = *($7 + [16])
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = CALL db_lowerbound_i64(*($7), *($7 + [8]), (int_64)7035938307668180992, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	CALL $2($7, $9)
	*($3 + [28]) = [0]
	*($3 + [24]) = $7
	$8 = *(*(CALL $118(($3 + [24])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [16])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [10316])
	*($1) = *(($7 + [16]))
	*($1 + [112]) = *($6 + [28])
	$7 = *($4 + [12])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$8 = ((int_64)*($1 + [64]) + (int_64)*($7))
	*($1 + [64]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	$7 = *($4 + [12])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [160]))), [10470])
	$8 = ((int_64)*($1 + [152]) + (int_64)*($7))
	*($1 + [152]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [152]) < (int_64)4611686018427387904), [10532])
	*($1 + [256]) = [1]
	$9 = ($1 + [256])
	$10 = ($1 + [112])
	$8 = *(*($4 + [16]))
	if ( (int_64)($8 == 0) ){ goto $label$3 }
	if ( ((int_64)$8 == (int_64)*($6)) ){ goto $label$3 }
	if ( (CALL is_account($8) == 0) ){ goto $label$3 }
	$7 = *(($4 + [16]))
	$6 = ($1 + [28])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)*(($1 + [32]))) ){ goto $label$4 }
	*($6) = ($4 + [8])
	*($4) = *($7)
	goto $label$3 
	
.LABEL $label$4
	CALL $119(($1 + [24]), $7)
	
.LABEL $label$3
	*($3 + [16]) = [0]
	*($3) = ($3 + [16])
	*($3 + [64]) = $10
	*($3 + [24]) = $1
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	$11 = ($1 + [16])
	*($3 + [32]) = $11
	$12 = ($1 + [24])
	*($3 + [36]) = $12
	$13 = ($1 + [40])
	*($3 + [40]) = $13
	$14 = ($1 + [48])
	*($3 + [44]) = $14
	$15 = ($1 + [56])
	*($3 + [48]) = $15
	$16 = ($1 + [64])
	*($3 + [52]) = $16
	$17 = ($1 + [80])
	*($3 + [56]) = $17
	$18 = ($1 + [96])
	*($3 + [60]) = $18
	$19 = ($1 + [113])
	*($3 + [68]) = $19
	$20 = ($1 + [114])
	*($3 + [72]) = $20
	$21 = ($1 + [120])
	*($3 + [76]) = $21
	$22 = ($1 + [136])
	*($3 + [80]) = $22
	$23 = ($1 + [152])
	*($3 + [84]) = $23
	$24 = ($1 + [168])
	*($3 + [88]) = $24
	$25 = ($1 + [184])
	*($3 + [92]) = $25
	$26 = ($1 + [188])
	*($3 + [96]) = $26
	$27 = ($1 + [212])
	*($3 + [104]) = $27
	$28 = ($1 + [200])
	*($3 + [100]) = $28
	$29 = ($1 + [224])
	*($3 + [108]) = $29
	$30 = ($1 + [240])
	*($3 + [112]) = $30
	$31 = ($1 + [248])
	*($3 + [116]) = $31
	*($3 + [120]) = $9
	$32 = ($1 + [257])
	*($3 + [124]) = $32
	$33 = ($1 + [258])
	*($3 + [128]) = $33
	$34 = ($1 + [259])
	*($3 + [132]) = $34
	$35 = ($1 + [260])
	*($3 + [136]) = $35
	$36 = ($1 + [261])
	*($3 + [140]) = $36
	CALL $102(($3 + [24]), $3)
	$7 = *($3 + [16])
	if ( ($7 <= [513]) ){ goto $label$6 }
	$4 = CALL $142($7)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $7)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	*($3 + [32]) = $11
	*($3 + [36]) = $12
	*($3 + [40]) = $13
	*($3 + [44]) = $14
	*($3 + [48]) = $15
	*($3 + [52]) = $16
	*($3 + [56]) = $17
	*($3 + [60]) = $18
	*($3 + [64]) = $10
	*($3 + [68]) = $19
	*($3 + [72]) = $20
	*($3 + [76]) = $21
	*($3 + [80]) = $22
	*($3 + [84]) = $23
	*($3 + [88]) = $24
	*($3 + [92]) = $25
	*($3 + [96]) = $26
	*($3 + [104]) = $27
	*($3 + [100]) = $28
	*($3 + [108]) = $29
	*($3 + [112]) = $30
	*($3 + [116]) = $31
	*($3 + [120]) = $9
	*($3 + [124]) = $32
	*($3 + [128]) = $33
	*($3 + [132]) = $34
	*($3 + [136]) = $35
	*($3 + [140]) = $36
	CALL $103(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [268]) = CALL db_store_i64(*($5 + [8]), (int_64)7035938307668180992, *(*($0 + [8])), $8, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $145($4)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [144])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [160])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10203])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([280])
	CALL $4($5)
	*($5 + [264]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [64])
	*($3 + [72]) = ($5 + [80])
	*($3 + [76]) = ($5 + [96])
	*($3 + [80]) = ($5 + [112])
	*($3 + [84]) = ($5 + [113])
	*($3 + [88]) = ($5 + [114])
	*($3 + [92]) = ($5 + [120])
	*($3 + [96]) = ($5 + [136])
	*($3 + [100]) = ($5 + [152])
	*($3 + [104]) = ($5 + [168])
	*($3 + [108]) = ($5 + [184])
	*($3 + [112]) = ($5 + [188])
	*($3 + [120]) = ($5 + [212])
	*($3 + [116]) = ($5 + [200])
	*($3 + [124]) = ($5 + [224])
	*($3 + [128]) = ($5 + [240])
	*($3 + [132]) = ($5 + [248])
	*($3 + [136]) = ($5 + [256])
	*($3 + [140]) = ($5 + [257])
	*($3 + [144]) = ($5 + [258])
	*($3 + [148]) = ($5 + [259])
	*($3 + [152]) = ($5 + [260])
	*($3 + [156]) = ($5 + [261])
	CALL $111(($3 + [40]), ($3 + [32]))
	*($5 + [268]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $7($1)
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [160])
	return $5
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [10203])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $142($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [10226])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [10226])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $63(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [152]) = $2
	*($3 + [160]) = $1
	CALL require_auth($1)
	$4 = CALL $139([8192])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($4 + [8191]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)0
	
.LABEL $label$1
	*($3 + [136]) = (int_64)10000
	*($3 + [144]) = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9373])
	$2 = ((int_64)$2 & (int_64)72057594037927935)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $6
	$5 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [9422])
	*((($3 + [96]) + [32])) = [0]
	*($3 + [104]) = $1
	*($3 + [112]) = (int_64)-1
	*($3 + [120]) = (int_64)0
	$2 = *($0)
	*($3 + [96]) = $2
	*((($3 + [56]) + [32])) = [0]
	*($3 + [64]) = $2
	*($3 + [56]) = $2
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	$4 = CALL db_lowerbound_i64($2, $2, (int_64)7035938307668180992, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$4 = CALL $2(($3 + [56]), $4)
	
.LOOP $label$13:
	$5 = [0]
	$2 = *($3 + [160])
	if ( ((int_64)*($4 + [8]) == (int_64)$2) ){ goto $label$14 }
	$5 = ((int_64)*($4 + [16]) != (int_64)$2)
	
.LABEL $label$14
	CALL eosio_assert($5, [8196])
	CALL eosio_assert([1], [10235])
	$4 = CALL db_next_i64(*($4 + [268]), ($3 + [32]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$12 }
	$4 = CALL $2(($3 + [56]), $4)
	goto $label$13 
	
.LABEL $label$12
	$2 = (uint_64)*((($3 + [136]) + [8])) >> (uint_64)(int_64)8)
	$5 = *(($3 + [124]))
	$8 = *(($3 + [120]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$18:
	$4 = ($5 + [-24])
	$7 = *($4)
	if ( ((int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$17 }
	$5 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($3 + [96])), [10152])
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	$4 = CALL db_find_i64(*($3 + [96]), *((($3 + [96]) + [8])), (int_64)-3665743569108320256, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$15 }
	$7 = CALL $3(($3 + [96]), $4)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($3 + [96])), [10152])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8313])
	$2 = *(($3 + [144]))
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$2), [9442])
	$6 = *($3 + [136])
	CALL eosio_assert(((int_64)*($7) >= (int_64)$6), [8337])
	CALL eosio_assert(((int_64)$2 == (int_64)*($7 + [8])), [9442])
	if ( ((int_64)*($7) < (int_64)$6) ){ goto $label$19 }
	$2 = *($0)
	*($3 + [40]) = $0
	*($3 + [36]) = ($3 + [56])
	*($3 + [32]) = ($3 + [160])
	*($3 + [44]) = ($3 + [136])
	*($3 + [48]) = ($3 + [152])
	*($3 + [200]) = $2
	CALL eosio_assert(((int_64)*($3 + [56]) == (int_64)CALL $fimport$5()), [10265])
	*($3 + [180]) = ($3 + [32])
	*($3 + [176]) = ($3 + [56])
	*($3 + [184]) = ($3 + [200])
	$4 = CALL _Znwj([280])
	CALL $4($4)
	*($4 + [264]) = ($3 + [56])
	CALL $5(($3 + [176]), $4)
	*($3 + [192]) = $4
	$2 = *($4)
	*($3 + [176]) = $2
	$7 = *($4 + [268])
	*($3 + [172]) = $7
	$8 = ($3 + [84])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($3 + [88]))) ){ goto $label$22 }
	*($5 + [8]) = $2
	*($5 + [16]) = $7
	*($3 + [192]) = [0]
	*($5) = $4
	*($8) = ($5 + [24])
	$4 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( $4 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL $6(($3 + [80]), ($3 + [192]), ($3 + [176]), ($3 + [172]))
	$4 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL $7($4)
	CALL _ZdlPv($4)
	
.LABEL $label$20
	$2 = *((($3 + [136]) + [8]))
	*((($3 + [16]) + [8])) = $2
	*(($3 + [8])) = $2
	$2 = *($3 + [136])
	*($3 + [16]) = $2
	*($3) = $2
	CALL $8($0, *($3 + [160]), $3)
	
.LABEL $label$19
	$7 = *($3 + [80])
	if ( ($7 == 0) ){ goto $label$23 }
	$8 = ($3 + [84])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$25 }
	
.LOOP $label$26:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$27 }
	CALL $7($5)
	CALL _ZdlPv($5)
	
.LABEL $label$27
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$26 }
	$4 = *(($3 + [80]))
	goto $label$24 
	
.LABEL $label$25
	$4 = $7
	
.LABEL $label$24
	*($8) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$23
	$7 = *($3 + [120])
	if ( ($7 == 0) ){ goto $label$28 }
	$8 = ($3 + [124])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$30 }
	
.LOOP $label$31:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$32 }
	CALL _ZdlPv($5)
	
.LABEL $label$32
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$31 }
	$4 = *(($3 + [120]))
	goto $label$29 
	
.LABEL $label$30
	$4 = $7
	
.LABEL $label$29
	*($8) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$28
	$global$0 = ($3 + [208])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [257]) = [1]
	$5 = *($1)
	CALL eosio_assert([1], [9660])
	*(($6 = $4) + [16]) = [0]
	*($6) = ($6 + [16])
	$7 = ($1 + [8])
	*($6 + [28]) = $7
	*($6 + [24]) = $1
	$8 = ($1 + [16])
	*($6 + [32]) = $8
	$9 = ($1 + [24])
	*($6 + [36]) = $9
	$10 = ($1 + [40])
	*($6 + [40]) = $10
	$11 = ($1 + [48])
	*($6 + [44]) = $11
	$12 = ($1 + [56])
	*($6 + [48]) = $12
	$13 = ($1 + [64])
	*($6 + [52]) = $13
	$14 = ($1 + [80])
	*($6 + [56]) = $14
	$15 = ($1 + [96])
	*($6 + [60]) = $15
	$16 = ($1 + [112])
	*($6 + [64]) = $16
	$17 = ($1 + [113])
	*($6 + [68]) = $17
	$18 = ($1 + [114])
	*($6 + [72]) = $18
	$19 = ($1 + [120])
	*($6 + [76]) = $19
	$20 = ($1 + [136])
	*($6 + [80]) = $20
	$21 = ($1 + [152])
	*($6 + [84]) = $21
	$22 = ($1 + [168])
	*($6 + [88]) = $22
	$23 = ($1 + [184])
	*($6 + [92]) = $23
	$24 = ($1 + [188])
	*($6 + [96]) = $24
	$25 = ($1 + [212])
	*($6 + [104]) = $25
	$26 = ($1 + [200])
	*($6 + [100]) = $26
	$27 = ($1 + [224])
	*($6 + [108]) = $27
	$28 = ($1 + [240])
	*($6 + [112]) = $28
	$29 = ($1 + [248])
	*($6 + [116]) = $29
	$30 = ($1 + [256])
	*($6 + [120]) = $30
	$31 = ($1 + [257])
	*($6 + [124]) = $31
	$32 = ($1 + [258])
	*($6 + [128]) = $32
	$33 = ($1 + [259])
	*($6 + [132]) = $33
	$34 = ($1 + [260])
	*($6 + [136]) = $34
	$35 = ($1 + [261])
	*($6 + [140]) = $35
	CALL $102(($6 + [24]), $6)
	$36 = *($6 + [16])
	if ( ($36 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($36)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($36 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($4 + $36)
	*($6 + [16]) = $6
	*($6 + [28]) = $7
	*($6 + [32]) = $8
	*($6 + [36]) = $9
	*($6 + [40]) = $10
	*($6 + [44]) = $11
	*($6 + [48]) = $12
	*($6 + [52]) = $13
	*($6 + [56]) = $14
	*($6 + [60]) = $15
	*($6 + [64]) = $16
	*($6 + [68]) = $17
	*($6 + [72]) = $18
	*($6 + [76]) = $19
	*($6 + [80]) = $20
	*($6 + [84]) = $21
	*($6 + [88]) = $22
	*($6 + [92]) = $23
	*($6 + [96]) = $24
	*($6 + [24]) = $1
	*($6 + [104]) = $25
	*($6 + [100]) = $26
	*($6 + [108]) = $27
	*($6 + [112]) = $28
	*($6 + [116]) = $29
	*($6 + [120]) = $30
	*($6 + [124]) = $31
	*($6 + [128]) = $32
	*($6 + [132]) = $33
	*($6 + [136]) = $34
	*($6 + [140]) = $35
	CALL $103(($6 + [24]), ($6 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $36)
	if ( ((uint_32)$36 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [144])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [258]) = [1]
	$5 = *($1)
	CALL eosio_assert([1], [9660])
	*(($6 = $4) + [16]) = [0]
	*($6) = ($6 + [16])
	$7 = ($1 + [8])
	*($6 + [28]) = $7
	*($6 + [24]) = $1
	$8 = ($1 + [16])
	*($6 + [32]) = $8
	$9 = ($1 + [24])
	*($6 + [36]) = $9
	$10 = ($1 + [40])
	*($6 + [40]) = $10
	$11 = ($1 + [48])
	*($6 + [44]) = $11
	$12 = ($1 + [56])
	*($6 + [48]) = $12
	$13 = ($1 + [64])
	*($6 + [52]) = $13
	$14 = ($1 + [80])
	*($6 + [56]) = $14
	$15 = ($1 + [96])
	*($6 + [60]) = $15
	$16 = ($1 + [112])
	*($6 + [64]) = $16
	$17 = ($1 + [113])
	*($6 + [68]) = $17
	$18 = ($1 + [114])
	*($6 + [72]) = $18
	$19 = ($1 + [120])
	*($6 + [76]) = $19
	$20 = ($1 + [136])
	*($6 + [80]) = $20
	$21 = ($1 + [152])
	*($6 + [84]) = $21
	$22 = ($1 + [168])
	*($6 + [88]) = $22
	$23 = ($1 + [184])
	*($6 + [92]) = $23
	$24 = ($1 + [188])
	*($6 + [96]) = $24
	$25 = ($1 + [212])
	*($6 + [104]) = $25
	$26 = ($1 + [200])
	*($6 + [100]) = $26
	$27 = ($1 + [224])
	*($6 + [108]) = $27
	$28 = ($1 + [240])
	*($6 + [112]) = $28
	$29 = ($1 + [248])
	*($6 + [116]) = $29
	$30 = ($1 + [256])
	*($6 + [120]) = $30
	$31 = ($1 + [257])
	*($6 + [124]) = $31
	$32 = ($1 + [258])
	*($6 + [128]) = $32
	$33 = ($1 + [259])
	*($6 + [132]) = $33
	$34 = ($1 + [260])
	*($6 + [136]) = $34
	$35 = ($1 + [261])
	*($6 + [140]) = $35
	CALL $102(($6 + [24]), $6)
	$36 = *($6 + [16])
	if ( ($36 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($36)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($36 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($4 + $36)
	*($6 + [16]) = $6
	*($6 + [28]) = $7
	*($6 + [32]) = $8
	*($6 + [36]) = $9
	*($6 + [40]) = $10
	*($6 + [44]) = $11
	*($6 + [48]) = $12
	*($6 + [52]) = $13
	*($6 + [56]) = $14
	*($6 + [60]) = $15
	*($6 + [64]) = $16
	*($6 + [68]) = $17
	*($6 + [72]) = $18
	*($6 + [76]) = $19
	*($6 + [80]) = $20
	*($6 + [84]) = $21
	*($6 + [88]) = $22
	*($6 + [92]) = $23
	*($6 + [96]) = $24
	*($6 + [24]) = $1
	*($6 + [104]) = $25
	*($6 + [100]) = $26
	*($6 + [108]) = $27
	*($6 + [112]) = $28
	*($6 + [116]) = $29
	*($6 + [120]) = $30
	*($6 + [124]) = $31
	*($6 + [128]) = $32
	*($6 + [132]) = $33
	*($6 + [136]) = $34
	*($6 + [140]) = $35
	CALL $103(($6 + [24]), ($6 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $36)
	if ( ((uint_32)$36 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [144])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [16]) = [8460]
	*($4 + [20]) = CALL $139([8460])
	*($4 + [8]) = *($4 + [16])
	CALL require_auth(*(CALL $17(($4 + [40]), ($4 + [8]))))
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$5 = *($0)
	*($4 + [40]) = $5
	*($4 + [48]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)7035938307668180992, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $2(($4 + [40]), $7)
	CALL eosio_assert(((int_32)*($6 + [264]) == (int_32)($4 + [40])), [10152])
	
.LABEL $label$1
	*($4 + [36]) = $6
	*($4 + [32]) = ($4 + [40])
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [8371])
	CALL eosio_assert(*($6 + [257]), [8473])
	CALL eosio_assert((*($6 + [184]) <= [3]), [8501])
	if ( (*($6 + [257]) == 0) ){ goto $label$5 }
	$8 = *(($6 + [184]))
	if ( ($8 == 0) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2]) ){ goto $label$5 }
	$5 = *($0)
	*($4 + [20]) = $3
	*($4 + [16]) = $2
	*($4 + [24]) = $0
	CALL eosio_assert($7, [9528])
	CALL $18(($4 + [40]), $6, $5, ($4 + [16]))
	
.LABEL $label$5
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = *($0)
	*($4 + [20]) = $3
	*($4 + [16]) = $2
	*($4 + [24]) = $0
	*($4 + [28]) = ($4 + [32])
	CALL eosio_assert($7, [9528])
	CALL $19(($4 + [40]), $6, $5, ($4 + [16]))
	$7 = *($4 + [64])
	if ( $7 ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$2
	$2 = ($4 + [68])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL $7($0)
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$8 }
	$6 = *(($4 + [64]))
	goto $label$6 
	
.LABEL $label$7
	$6 = $7
	
.LABEL $label$6
	*($2) = $7
	CALL _ZdlPv($6)
	$global$0 = ($4 + [80])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9725])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9830])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9763])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9830])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [144]) = $3
	*($4 + [152]) = $2
	CALL require_auth($2)
	*(($4 + [136])) = [0]
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	$2 = *($0)
	*($4 + [104]) = $2
	*($4 + [112]) = $2
	$3 = $2
	$5 = [0]
	$6 = CALL db_find_i64($2, $2, (int_64)7035938307668180992, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $2(($4 + [104]), $6)
	CALL eosio_assert(((int_32)*($5 + [264]) == (int_32)($4 + [104])), [10152])
	$2 = *(($4 + [112]))
	$3 = *($4 + [104])
	
.LABEL $label$1
	$6 = CALL db_lowerbound_i64($3, $2, (int_64)7035938307668180992, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $2(($4 + [104]), $6)
	
.LOOP $label$3:
	$7 = [0]
	$2 = *($4 + [152])
	if ( ((int_64)*($6 + [8]) == (int_64)$2) ){ goto $label$4 }
	$7 = ((int_64)*($6 + [16]) != (int_64)$2)
	
.LABEL $label$4
	CALL eosio_assert($7, [8196])
	CALL eosio_assert([1], [10235])
	$6 = CALL db_next_i64(*($6 + [268]), ($4 + [48]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL $2(($4 + [104]), $6)
	goto $label$3 
	
.LABEL $label$2
	$8 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($8, [8371])
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)*($0 + [28])), [8391])
	CALL eosio_assert(((int_64)*($5 + [8]) != (int_64)*($4 + [152])), [8411])
	$6 = CALL $139([8192])
	if ( ($6 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9275])
	goto $label$7 
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = (int_64)0
	
.LOOP $label$9:
	$7 = *(($6 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$10
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$9 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$5 
	
.LABEL $label$6
	$2 = (int_64)4
	
.LABEL $label$5
	*($4 + [88]) = (int_64)10000
	*($4 + [96]) = $2
	CALL eosio_assert([1], [9373])
	$6 = [0]
	$9 = (uint_64)$2 >> (uint_64)(int_64)8
	$2 = $9)
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$7 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [9422])
	*(($4 + [80])) = [0]
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	$2 = *($0)
	*($4 + [48]) = $2
	$3 = *($4 + [152])
	*($4 + [56]) = $3
	$6 = CALL db_find_i64($2, $3, (int_64)-3665743569108320256, $9)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$17 }
	$6 = CALL $3(($4 + [48]), $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($4 + [48])), [10152])
	$2 = *($4 + [88])
	goto $label$16 
	
.LABEL $label$17
	$2 = (int_64)10000
	$6 = [0]
	
.LABEL $label$16
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8437])
	CALL eosio_assert(((int_64)*($6) >= (int_64)$2), [8337])
	$2 = *($0)
	*($4 + [36]) = $0
	*($4 + [32]) = ($4 + [152])
	*($4 + [40]) = ($4 + [88])
	*($4 + [44]) = ($4 + [144])
	CALL eosio_assert($8, [9528])
	CALL $11(($4 + [104]), $5, $2, ($4 + [32]))
	$2 = *((($4 + [88]) + [8]))
	*((($4 + [16]) + [8])) = $2
	*(($4 + [8])) = $2
	$2 = *($4 + [88])
	*($4 + [16]) = $2
	*($4) = $2
	CALL $8($0, *($4 + [152]), $4)
	CALL $12($0, $1)
	$10 = *($4 + [72])
	if ( ($10 == 0) ){ goto $label$18 }
	$0 = ($4 + [76])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$20 }
	
.LOOP $label$21:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$22 }
	CALL _ZdlPv($7)
	
.LABEL $label$22
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$21 }
	$6 = *(($4 + [72]))
	goto $label$19 
	
.LABEL $label$20
	$6 = $10
	
.LABEL $label$19
	*($0) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$18
	$10 = *($4 + [128])
	if ( ($10 == 0) ){ goto $label$23 }
	$0 = ($4 + [132])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$25 }
	
.LOOP $label$26:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$27 }
	CALL $7($7)
	CALL _ZdlPv($7)
	
.LABEL $label$27
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$26 }
	$6 = *(($4 + [128]))
	goto $label$24 
	
.LABEL $label$25
	$6 = $10
	
.LABEL $label$24
	*($0) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$23
	$global$0 = ($4 + [160])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [16]) = *(*($3))
	$6 = *($3 + [4])
	*($1 + [112]) = *($6 + [29])
	$7 = *($1)
	$8 = *($3 + [8])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$9 = ((int_64)*($1 + [64]) + (int_64)*($8))
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	$8 = *($3 + [8])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [176]))), [10470])
	$9 = ((int_64)*($1 + [168]) + (int_64)*($8))
	*($1 + [168]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [168]) < (int_64)4611686018427387904), [10532])
	*($1 + [256]) = [258]
	$10 = ($1 + [256])
	$11 = ($1 + [257])
	$12 = ($1 + [112])
	$9 = *(*($3 + [12]))
	if ( (int_64)($9 == 0) ){ goto $label$1 }
	if ( ((int_64)$9 == (int_64)*($6)) ){ goto $label$1 }
	if ( (CALL is_account($9) == 0) ){ goto $label$1 }
	$8 = *(($3 + [12]))
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)*(($1 + [32]))) ){ goto $label$2 }
	*($6) = ($3 + [8])
	*($3) = *($8)
	goto $label$1 
	
.LABEL $label$2
	CALL $119(($1 + [24]), $8)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$6 = ($1 + [8])
	*($5 + [28]) = $6
	*($5 + [24]) = $1
	$13 = ($1 + [16])
	*($5 + [32]) = $13
	$14 = ($1 + [24])
	*($5 + [36]) = $14
	$15 = ($1 + [40])
	*($5 + [40]) = $15
	$16 = ($1 + [48])
	*($5 + [44]) = $16
	$17 = ($1 + [56])
	*($5 + [48]) = $17
	$18 = ($1 + [64])
	*($5 + [52]) = $18
	$19 = ($1 + [80])
	*($5 + [56]) = $19
	$20 = ($1 + [96])
	*($5 + [60]) = $20
	*($5 + [64]) = $12
	$21 = ($1 + [113])
	*($5 + [68]) = $21
	$22 = ($1 + [114])
	*($5 + [72]) = $22
	$23 = ($1 + [120])
	*($5 + [76]) = $23
	$24 = ($1 + [136])
	*($5 + [80]) = $24
	$25 = ($1 + [152])
	*($5 + [84]) = $25
	$26 = ($1 + [168])
	*($5 + [88]) = $26
	$27 = ($1 + [184])
	*($5 + [92]) = $27
	$28 = ($1 + [188])
	*($5 + [96]) = $28
	$29 = ($1 + [212])
	*($5 + [104]) = $29
	$30 = ($1 + [200])
	*($5 + [100]) = $30
	$31 = ($1 + [224])
	*($5 + [108]) = $31
	$32 = ($1 + [240])
	*($5 + [112]) = $32
	$33 = ($1 + [248])
	*($5 + [116]) = $33
	*($5 + [120]) = $10
	*($5 + [124]) = $11
	$34 = ($1 + [258])
	*($5 + [128]) = $34
	$35 = ($1 + [259])
	*($5 + [132]) = $35
	$36 = ($1 + [260])
	*($5 + [136]) = $36
	$37 = ($1 + [261])
	*($5 + [140]) = $37
	CALL $102(($5 + [24]), $5)
	$8 = *($5 + [16])
	if ( ($8 <= [513]) ){ goto $label$4 }
	$3 = CALL $142($8)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $8)
	*($5 + [16]) = $5
	*($5 + [28]) = $6
	*($5 + [32]) = $13
	*($5 + [36]) = $14
	*($5 + [40]) = $15
	*($5 + [44]) = $16
	*($5 + [48]) = $17
	*($5 + [52]) = $18
	*($5 + [56]) = $19
	*($5 + [60]) = $20
	*($5 + [64]) = $12
	*($5 + [68]) = $21
	*($5 + [72]) = $22
	*($5 + [76]) = $23
	*($5 + [80]) = $24
	*($5 + [84]) = $25
	*($5 + [88]) = $26
	*($5 + [92]) = $27
	*($5 + [96]) = $28
	*($5 + [24]) = $1
	*($5 + [104]) = $29
	*($5 + [100]) = $30
	*($5 + [108]) = $31
	*($5 + [112]) = $32
	*($5 + [116]) = $33
	*($5 + [120]) = $10
	*($5 + [124]) = $11
	*($5 + [128]) = $34
	*($5 + [132]) = $35
	*($5 + [136]) = $36
	*($5 + [140]) = $37
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $145($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [144])
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)7035938307668180992, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($3 + [264]) == (int_32)($2 + [8])), [10152])
	
.LABEL $label$1
	if ( (*($3 + [259]) == 0) ){ goto $label$4 }
	$4 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9528])
	CALL $13(($2 + [8]), $3, $4, $2)
	$5 = *($2 + [32])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = *($3 + [184])
	if ( ((uint_32)$5 > (uint_32)[2]) ){ goto $label$5 }
	$4 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9528])
	CALL $14(($2 + [8]), $3, $4, $2)
	$5 = *($2 + [32])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)[3]) ){ goto $label$6 }
	$4 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9528])
	CALL $15(($2 + [8]), $3, $4, $2)
	
.LABEL $label$6
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($2 + [36])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL $7($0)
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($2 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [258]) = [1]
	$5 = *($1)
	CALL eosio_assert([1], [9660])
	*(($6 = $4) + [16]) = [0]
	*($6) = ($6 + [16])
	$7 = ($1 + [8])
	*($6 + [28]) = $7
	*($6 + [24]) = $1
	$8 = ($1 + [16])
	*($6 + [32]) = $8
	$9 = ($1 + [24])
	*($6 + [36]) = $9
	$10 = ($1 + [40])
	*($6 + [40]) = $10
	$11 = ($1 + [48])
	*($6 + [44]) = $11
	$12 = ($1 + [56])
	*($6 + [48]) = $12
	$13 = ($1 + [64])
	*($6 + [52]) = $13
	$14 = ($1 + [80])
	*($6 + [56]) = $14
	$15 = ($1 + [96])
	*($6 + [60]) = $15
	$16 = ($1 + [112])
	*($6 + [64]) = $16
	$17 = ($1 + [113])
	*($6 + [68]) = $17
	$18 = ($1 + [114])
	*($6 + [72]) = $18
	$19 = ($1 + [120])
	*($6 + [76]) = $19
	$20 = ($1 + [136])
	*($6 + [80]) = $20
	$21 = ($1 + [152])
	*($6 + [84]) = $21
	$22 = ($1 + [168])
	*($6 + [88]) = $22
	$23 = ($1 + [184])
	*($6 + [92]) = $23
	$24 = ($1 + [188])
	*($6 + [96]) = $24
	$25 = ($1 + [212])
	*($6 + [104]) = $25
	$26 = ($1 + [200])
	*($6 + [100]) = $26
	$27 = ($1 + [224])
	*($6 + [108]) = $27
	$28 = ($1 + [240])
	*($6 + [112]) = $28
	$29 = ($1 + [248])
	*($6 + [116]) = $29
	$30 = ($1 + [256])
	*($6 + [120]) = $30
	$31 = ($1 + [257])
	*($6 + [124]) = $31
	$32 = ($1 + [258])
	*($6 + [128]) = $32
	$33 = ($1 + [259])
	*($6 + [132]) = $33
	$34 = ($1 + [260])
	*($6 + [136]) = $34
	$35 = ($1 + [261])
	*($6 + [140]) = $35
	CALL $102(($6 + [24]), $6)
	$36 = *($6 + [16])
	if ( ($36 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($36)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($36 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($4 + $36)
	*($6 + [16]) = $6
	*($6 + [28]) = $7
	*($6 + [32]) = $8
	*($6 + [36]) = $9
	*($6 + [40]) = $10
	*($6 + [44]) = $11
	*($6 + [48]) = $12
	*($6 + [52]) = $13
	*($6 + [56]) = $14
	*($6 + [60]) = $15
	*($6 + [64]) = $16
	*($6 + [68]) = $17
	*($6 + [72]) = $18
	*($6 + [76]) = $19
	*($6 + [80]) = $20
	*($6 + [84]) = $21
	*($6 + [88]) = $22
	*($6 + [92]) = $23
	*($6 + [96]) = $24
	*($6 + [24]) = $1
	*($6 + [104]) = $25
	*($6 + [100]) = $26
	*($6 + [108]) = $27
	*($6 + [112]) = $28
	*($6 + [116]) = $29
	*($6 + [120]) = $30
	*($6 + [124]) = $31
	*($6 + [128]) = $32
	*($6 + [132]) = $33
	*($6 + [136]) = $34
	*($6 + [140]) = $35
	CALL $103(($6 + [24]), ($6 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $36)
	if ( ((uint_32)$36 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [144])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$5 = *($3)
	*($1 + [113]) = *(($5 + [35]))
	*($1 + [56]) = *(*(*(($3 + [4])) + [4]) + [16])
	*($1 + [112]) = *(($5 + [31]))
	$6 = *($1)
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$7 = ($1 + [8])
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	$8 = ($1 + [16])
	*($3 + [32]) = $8
	$9 = ($1 + [24])
	*($3 + [36]) = $9
	$10 = ($1 + [40])
	*($3 + [40]) = $10
	$11 = ($1 + [48])
	*($3 + [44]) = $11
	$12 = ($1 + [56])
	*($3 + [48]) = $12
	$13 = ($1 + [64])
	*($3 + [52]) = $13
	$14 = ($1 + [80])
	*($3 + [56]) = $14
	$15 = ($1 + [96])
	*($3 + [60]) = $15
	$16 = ($1 + [112])
	*($3 + [64]) = $16
	$17 = ($1 + [113])
	*($3 + [68]) = $17
	$18 = ($1 + [114])
	*($3 + [72]) = $18
	$19 = ($1 + [120])
	*($3 + [76]) = $19
	$20 = ($1 + [136])
	*($3 + [80]) = $20
	$21 = ($1 + [152])
	*($3 + [84]) = $21
	$22 = ($1 + [168])
	*($3 + [88]) = $22
	$23 = ($1 + [184])
	*($3 + [92]) = $23
	$24 = ($1 + [188])
	*($3 + [96]) = $24
	$25 = ($1 + [212])
	*($3 + [104]) = $25
	$26 = ($1 + [200])
	*($3 + [100]) = $26
	$27 = ($1 + [224])
	*($3 + [108]) = $27
	$28 = ($1 + [240])
	*($3 + [112]) = $28
	$29 = ($1 + [248])
	*($3 + [116]) = $29
	$30 = ($1 + [256])
	*($3 + [120]) = $30
	$31 = ($1 + [257])
	*($3 + [124]) = $31
	$32 = ($1 + [258])
	*($3 + [128]) = $32
	$33 = ($1 + [259])
	*($3 + [132]) = $33
	$34 = ($1 + [260])
	*($3 + [136]) = $34
	$35 = ($1 + [261])
	*($3 + [140]) = $35
	CALL $102(($3 + [24]), $3)
	$5 = *($3 + [16])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($5)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [32]) = $8
	*($3 + [36]) = $9
	*($3 + [40]) = $10
	*($3 + [44]) = $11
	*($3 + [48]) = $12
	*($3 + [52]) = $13
	*($3 + [56]) = $14
	*($3 + [60]) = $15
	*($3 + [64]) = $16
	*($3 + [68]) = $17
	*($3 + [72]) = $18
	*($3 + [76]) = $19
	*($3 + [80]) = $20
	*($3 + [84]) = $21
	*($3 + [88]) = $22
	*($3 + [92]) = $23
	*($3 + [96]) = $24
	*($3 + [24]) = $1
	*($3 + [104]) = $25
	*($3 + [100]) = $26
	*($3 + [108]) = $27
	*($3 + [112]) = $28
	*($3 + [116]) = $29
	*($3 + [120]) = $30
	*($3 + [124]) = $31
	*($3 + [128]) = $32
	*($3 + [132]) = $33
	*($3 + [136]) = $34
	*($3 + [140]) = $35
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$6 = *($3)
	$7 = *($3 + [8])
	$8 = *($1)
	$9 = ($1 + [192])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)*(($1 + [196]))) ){ goto $label$2 }
	CALL $133($10, $6)
	*($9) = (*($9) + [12])
	goto $label$1 
	
.LABEL $label$2
	CALL $120(($1 + [188]), $6)
	
.LABEL $label$1
	$9 = *($3 + [4])
	$3 = ($1 + [204])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)*(($1 + [208]))) ){ goto $label$4 }
	CALL $133($6, $9)
	*($3) = (*($3) + [12])
	goto $label$3 
	
.LABEL $label$4
	CALL $120(($1 + [200]), $9)
	
.LABEL $label$3
	$3 = *($7 + [34])
	*($1 + [113]) = $3
	*($1 + [114]) = $3
	*($1 + [184]) = (*($1 + [184]) + [1])
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9275])
	goto $label$7 
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$11 = (int_64)0
	
.LOOP $label$9:
	$9 = *(($3 + [8191]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$6
	$11 = (int_64)0
	
.LABEL $label$5
	$7 = ($1 + [114])
	$10 = ($1 + [113])
	$12 = ($1 + [184])
	CALL eosio_assert([1], [9373])
	$13 = ((int_64)$11 & (int_64)72057594037927935)
	$14 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$11 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$13 = $11
	$9 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$13 = $11
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$9 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $9 ){ goto $label$15 }
	$9 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = [0]
	
.LABEL $label$11
	CALL eosio_assert($9, [9422])
	*(($1 + [128])) = $14
	$11 = (int_64)0
	*($1 + [120]) = (int_64)0
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$18 }
	CALL eosio_assert([0], [9275])
	goto $label$17 
	
.LABEL $label$18
	if ( ($3 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$11 = (int_64)0
	
.LOOP $label$19:
	$9 = *(($3 + [8191]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$20
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$19 }
	
.LABEL $label$16
	CALL eosio_assert([1], [9373])
	$13 = ((int_64)$11 & (int_64)72057594037927935)
	$14 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$11 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$13 = $11
	$9 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$13 = $11
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$9 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $9 ){ goto $label$25 }
	$9 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$9 = [0]
	
.LABEL $label$21
	CALL eosio_assert($9, [9422])
	*(($1 + [144])) = $14
	*($1 + [136]) = (int_64)0
	*($1 + [257]) = [0]
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$6 = ($1 + [8])
	*($5 + [28]) = $6
	*($5 + [24]) = $1
	$15 = ($1 + [16])
	*($5 + [32]) = $15
	$16 = ($1 + [24])
	*($5 + [36]) = $16
	$17 = ($1 + [40])
	*($5 + [40]) = $17
	$18 = ($1 + [48])
	*($5 + [44]) = $18
	$19 = ($1 + [56])
	*($5 + [48]) = $19
	$20 = ($1 + [64])
	*($5 + [52]) = $20
	$21 = ($1 + [80])
	*($5 + [56]) = $21
	$22 = ($1 + [96])
	*($5 + [60]) = $22
	$23 = ($1 + [112])
	*($5 + [64]) = $23
	*($5 + [68]) = $10
	*($5 + [72]) = $7
	$24 = ($1 + [120])
	*($5 + [76]) = $24
	$25 = ($1 + [136])
	*($5 + [80]) = $25
	$26 = ($1 + [152])
	*($5 + [84]) = $26
	$27 = ($1 + [168])
	*($5 + [88]) = $27
	*($5 + [92]) = $12
	$28 = ($1 + [188])
	*($5 + [96]) = $28
	$29 = ($1 + [212])
	*($5 + [104]) = $29
	$30 = ($1 + [200])
	*($5 + [100]) = $30
	$31 = ($1 + [224])
	*($5 + [108]) = $31
	$32 = ($1 + [240])
	*($5 + [112]) = $32
	$33 = ($1 + [248])
	*($5 + [116]) = $33
	$34 = ($1 + [256])
	*($5 + [120]) = $34
	$35 = ($1 + [257])
	*($5 + [124]) = $35
	$36 = ($1 + [258])
	*($5 + [128]) = $36
	$37 = ($1 + [259])
	*($5 + [132]) = $37
	$38 = ($1 + [260])
	*($5 + [136]) = $38
	$39 = ($1 + [261])
	*($5 + [140]) = $39
	CALL $102(($5 + [24]), $5)
	$9 = *($5 + [16])
	if ( ($9 <= [513]) ){ goto $label$27 }
	$3 = CALL $142($9)
	goto $label$26 
	
.LABEL $label$27
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$26
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $9)
	*($5 + [16]) = $5
	*($5 + [28]) = $6
	*($5 + [32]) = $15
	*($5 + [36]) = $16
	*($5 + [40]) = $17
	*($5 + [44]) = $18
	*($5 + [48]) = $19
	*($5 + [52]) = $20
	*($5 + [56]) = $21
	*($5 + [60]) = $22
	*($5 + [64]) = $23
	*($5 + [68]) = $10
	*($5 + [72]) = $7
	*($5 + [76]) = $24
	*($5 + [80]) = $25
	*($5 + [84]) = $26
	*($5 + [88]) = $27
	*($5 + [92]) = $12
	*($5 + [96]) = $28
	*($5 + [24]) = $1
	*($5 + [104]) = $29
	*($5 + [100]) = $30
	*($5 + [108]) = $31
	*($5 + [112]) = $32
	*($5 + [116]) = $33
	*($5 + [120]) = $34
	*($5 + [124]) = $35
	*($5 + [128]) = $36
	*($5 + [132]) = $37
	*($5 + [136]) = $38
	*($5 + [140]) = $39
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$30 }
	CALL $145($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$28 }
	
.LABEL $label$29
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$28
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$6 = *($3)
	$7 = *($3 + [8])
	$8 = *($1)
	$9 = ($1 + [192])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)*(($1 + [196]))) ){ goto $label$2 }
	CALL $133($10, $6)
	*($9) = (*($9) + [12])
	goto $label$1 
	
.LABEL $label$2
	CALL $120(($1 + [188]), $6)
	
.LABEL $label$1
	$6 = *($3 + [4])
	$9 = ($1 + [204])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)*(($1 + [208]))) ){ goto $label$4 }
	CALL $133($10, $6)
	*($9) = (*($9) + [12])
	goto $label$3 
	
.LABEL $label$4
	CALL $120(($1 + [200]), $6)
	
.LABEL $label$3
	*($1 + [112]) = *($7 + [30])
	$9 = ($1 + [112])
	$6 = *(*($3 + [12]) + [4])
	if ( ((int_32)*($6 + [112]) != (int_32)*($7 + [32])) ){ goto $label$8 }
	$11 = *($6 + [8])
	if ( ((int_64)*($1 + [40]) != (int_64)$11) ){ goto $label$7 }
	$3 = ($6 + [8])
	*(($1 + [40])) = *($6 + [16])
	goto $label$5 
	
.LABEL $label$8
	$7 = CALL tapos_block_num()
	$3 = *(*(($3 + [12])) + [4])
	if ( ((int_32)((((int_32)(((int_32)$7 * (int_32)[37]) + [13172]) % (int_32)[2]) + [1]) & [255]) != (int_32)[1]) ){ goto $label$6 }
	*($1 + [40]) = *($3 + [8])
	$3 = ($3 + [16])
	goto $label$5 
	
.LABEL $label$7
	*(($1 + [40])) = $11
	$3 = ($6 + [16])
	goto $label$5 
	
.LABEL $label$6
	*($1 + [40]) = *($3 + [16])
	$3 = ($3 + [8])
	
.LABEL $label$5
	*($1 + [184]) = [1]
	*($1 + [48]) = *($3)
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$11 = CALL current_time()
	*($1 + [257]) = [0]
	*($1 + [240]) = ((int_64)((uint_64)$11 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$6 = ($1 + [8])
	*($5 + [28]) = $6
	*($5 + [24]) = $1
	$10 = ($1 + [16])
	*($5 + [32]) = $10
	$12 = ($1 + [24])
	*($5 + [36]) = $12
	$13 = ($1 + [40])
	*($5 + [40]) = $13
	$14 = ($1 + [48])
	*($5 + [44]) = $14
	$15 = ($1 + [56])
	*($5 + [48]) = $15
	$16 = ($1 + [64])
	*($5 + [52]) = $16
	$17 = ($1 + [80])
	*($5 + [56]) = $17
	$18 = ($1 + [96])
	*($5 + [60]) = $18
	*($5 + [64]) = $9
	$19 = ($1 + [113])
	*($5 + [68]) = $19
	$20 = ($1 + [114])
	*($5 + [72]) = $20
	$21 = ($1 + [120])
	*($5 + [76]) = $21
	$22 = ($1 + [136])
	*($5 + [80]) = $22
	$23 = ($1 + [152])
	*($5 + [84]) = $23
	$24 = ($1 + [168])
	*($5 + [88]) = $24
	$25 = ($1 + [184])
	*($5 + [92]) = $25
	$26 = ($1 + [188])
	*($5 + [96]) = $26
	$27 = ($1 + [212])
	*($5 + [104]) = $27
	$28 = ($1 + [200])
	*($5 + [100]) = $28
	$29 = ($1 + [224])
	*($5 + [108]) = $29
	$30 = ($1 + [240])
	*($5 + [112]) = $30
	$31 = ($1 + [248])
	*($5 + [116]) = $31
	$32 = ($1 + [256])
	*($5 + [120]) = $32
	$33 = ($1 + [257])
	*($5 + [124]) = $33
	$34 = ($1 + [258])
	*($5 + [128]) = $34
	$35 = ($1 + [259])
	*($5 + [132]) = $35
	$36 = ($1 + [260])
	*($5 + [136]) = $36
	$37 = ($1 + [261])
	*($5 + [140]) = $37
	CALL $102(($5 + [24]), $5)
	$7 = *($5 + [16])
	if ( ($7 <= [513]) ){ goto $label$10 }
	$3 = CALL $142($7)
	goto $label$9 
	
.LABEL $label$10
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$9
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	*($5 + [16]) = $5
	*($5 + [28]) = $6
	*($5 + [32]) = $10
	*($5 + [36]) = $12
	*($5 + [40]) = $13
	*($5 + [44]) = $14
	*($5 + [48]) = $15
	*($5 + [52]) = $16
	*($5 + [56]) = $17
	*($5 + [60]) = $18
	*($5 + [64]) = $9
	*($5 + [68]) = $19
	*($5 + [72]) = $20
	*($5 + [76]) = $21
	*($5 + [80]) = $22
	*($5 + [84]) = $23
	*($5 + [88]) = $24
	*($5 + [92]) = $25
	*($5 + [96]) = $26
	*($5 + [24]) = $1
	*($5 + [104]) = $27
	*($5 + [100]) = $28
	*($5 + [108]) = $29
	*($5 + [112]) = $30
	*($5 + [116]) = $31
	*($5 + [120]) = $32
	*($5 + [124]) = $33
	*($5 + [128]) = $34
	*($5 + [132]) = $35
	*($5 + [136]) = $36
	*($5 + [140]) = $37
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$13 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $145($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$11 }
	
.LABEL $label$12
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$11
	$global$0 = ($5 + [144])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [114]) = *((*($3) + [36]))
	$5 = *($1)
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [40])
	*($3 + [40]) = $9
	$10 = ($1 + [48])
	*($3 + [44]) = $10
	$11 = ($1 + [56])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [80])
	*($3 + [56]) = $13
	$14 = ($1 + [96])
	*($3 + [60]) = $14
	$15 = ($1 + [112])
	*($3 + [64]) = $15
	$16 = ($1 + [113])
	*($3 + [68]) = $16
	$17 = ($1 + [114])
	*($3 + [72]) = $17
	$18 = ($1 + [120])
	*($3 + [76]) = $18
	$19 = ($1 + [136])
	*($3 + [80]) = $19
	$20 = ($1 + [152])
	*($3 + [84]) = $20
	$21 = ($1 + [168])
	*($3 + [88]) = $21
	$22 = ($1 + [184])
	*($3 + [92]) = $22
	$23 = ($1 + [188])
	*($3 + [96]) = $23
	$24 = ($1 + [212])
	*($3 + [104]) = $24
	$25 = ($1 + [200])
	*($3 + [100]) = $25
	$26 = ($1 + [224])
	*($3 + [108]) = $26
	$27 = ($1 + [240])
	*($3 + [112]) = $27
	$28 = ($1 + [248])
	*($3 + [116]) = $28
	$29 = ($1 + [256])
	*($3 + [120]) = $29
	$30 = ($1 + [257])
	*($3 + [124]) = $30
	$31 = ($1 + [258])
	*($3 + [128]) = $31
	$32 = ($1 + [259])
	*($3 + [132]) = $32
	$33 = ($1 + [260])
	*($3 + [136]) = $33
	$34 = ($1 + [261])
	*($3 + [140]) = $34
	CALL $102(($3 + [24]), $3)
	$35 = *($3 + [16])
	if ( ($35 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($35)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($35 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $35)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $21
	*($3 + [92]) = $22
	*($3 + [96]) = $23
	*($3 + [24]) = $1
	*($3 + [104]) = $24
	*($3 + [100]) = $25
	*($3 + [108]) = $26
	*($3 + [112]) = $27
	*($3 + [116]) = $28
	*($3 + [120]) = $29
	*($3 + [124]) = $30
	*($3 + [128]) = $31
	*($3 + [132]) = $32
	*($3 + [136]) = $33
	*($3 + [140]) = $34
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $35)
	if ( ((uint_32)$35 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

void .FUNC $59 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth($2)
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$4 = *($0)
	*($3 + [24]) = $4
	*($3 + [32]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)7035938307668180992, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $2(($3 + [24]), $6)
	CALL eosio_assert(((int_32)*($5 + [264]) == (int_32)($3 + [24])), [10152])
	
.LABEL $label$1
	*($3 + [20]) = $5
	*($3 + [16]) = ($3 + [24])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8371])
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)*($0 + [30])), [8715])
	CALL eosio_assert(((int_64)*($5 + [48]) != (int_64)$2), [8982])
	$6 = [1]
	if ( ((int_64)*($5 + [8]) == (int_64)$2) ){ goto $label$2 }
	$6 = ((int_64)*($5 + [16]) == (int_64)$2)
	
.LABEL $label$2
	CALL eosio_assert($6, [8631])
	$4 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = *(($5 + [48]))
	$8 = *(($5 + [8]))
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$5 }
	CALL eosio_assert(((int_64)$7 == (int_64)*($5 + [16])), [9015])
	CALL eosio_assert((uint_64)(((int_64)*(*($3 + [20]) + [248]) + (int_64)86400) <= $4), [9029])
	$2 = *($0)
	$5 = *($3 + [20])
	*($3 + [12]) = $0
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9528])
	CALL $60(($3 + [24]), $5, $2, ($3 + [8]))
	CALL $25($0, $1)
	$6 = *($3 + [48])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [9015])
	CALL eosio_assert((uint_64)(((int_64)*(*($3 + [20]) + [240]) + (int_64)86400) <= $4), [9029])
	$2 = *($0)
	$5 = *($3 + [20])
	*($3 + [12]) = $0
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9528])
	CALL $61(($3 + [24]), $5, $2, ($3 + [8]))
	CALL $25($0, $1)
	$6 = *($3 + [48])
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$9 = ($3 + [52])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL $7($0)
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($3 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $6
	
.LABEL $label$6
	*($9) = $6
	CALL _ZdlPv($5)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [16])
	$6 = *($1)
	$7 = *($3 + [8])
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [128]))), [10470])
	$9 = ((int_64)*($1 + [120]) + (int_64)*($8))
	*($1 + [120]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [120]) < (int_64)4611686018427387904), [10532])
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [160]))), [10470])
	$9 = ((int_64)*($1 + [152]) + (int_64)*($8))
	*($1 + [152]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [152]) < (int_64)4611686018427387904), [10532])
	*($1 + [113]) = *($7 + [38])
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$9 = ((int_64)*($1 + [64]) + (int_64)*($7))
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = *(*($3 + [12]) + [4])
	$9 = *($7)
	$10 = *($7 + [8])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$10), [10012])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($9 - *($3))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [10082])
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$12 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($3 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$12 = (int_64)0
	
.LABEL $label$1
	$13 = ($1 + [240])
	$14 = ($1 + [113])
	CALL eosio_assert([1], [9373])
	$9 = ((int_64)$12 & (int_64)72057594037927935)
	$15 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$9 = $12
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$9 = $12
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9422])
	CALL eosio_assert(((int_64)$10 == (int_64)$15), [9442])
	$8 = ($1 + [260])
	if ( ((int_64)$11 > (int_64)10000) ){ goto $label$12 }
	*($8) = [1]
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$16 = ($1 + [8])
	*($5 + [28]) = $16
	*($5 + [24]) = $1
	$17 = ($1 + [16])
	*($5 + [32]) = $17
	$18 = ($1 + [24])
	*($5 + [36]) = $18
	$19 = ($1 + [40])
	*($5 + [40]) = $19
	$20 = ($1 + [48])
	*($5 + [44]) = $20
	$21 = ($1 + [56])
	*($5 + [48]) = $21
	$22 = ($1 + [64])
	*($5 + [52]) = $22
	$23 = ($1 + [80])
	*($5 + [56]) = $23
	$24 = ($1 + [96])
	*($5 + [60]) = $24
	$25 = ($1 + [112])
	*($5 + [64]) = $25
	*($5 + [68]) = $14
	$26 = ($1 + [114])
	*($5 + [72]) = $26
	$27 = ($1 + [120])
	*($5 + [76]) = $27
	$28 = ($1 + [136])
	*($5 + [80]) = $28
	$29 = ($1 + [152])
	*($5 + [84]) = $29
	$30 = ($1 + [168])
	*($5 + [88]) = $30
	$31 = ($1 + [184])
	*($5 + [92]) = $31
	$32 = ($1 + [188])
	*($5 + [96]) = $32
	$33 = ($1 + [212])
	*($5 + [104]) = $33
	$34 = ($1 + [200])
	*($5 + [100]) = $34
	$35 = ($1 + [224])
	*($5 + [108]) = $35
	*($5 + [112]) = $13
	$36 = ($1 + [248])
	*($5 + [116]) = $36
	$37 = ($1 + [256])
	*($5 + [120]) = $37
	$38 = ($1 + [257])
	*($5 + [124]) = $38
	$39 = ($1 + [258])
	*($5 + [128]) = $39
	$40 = ($1 + [259])
	*($5 + [132]) = $40
	*($5 + [136]) = $8
	$41 = ($1 + [261])
	*($5 + [140]) = $41
	CALL $102(($5 + [24]), $5)
	$7 = *($5 + [16])
	if ( ($7 <= [513]) ){ goto $label$14 }
	$3 = CALL $142($7)
	goto $label$13 
	
.LABEL $label$14
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$13
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	*($5 + [16]) = $5
	*($5 + [28]) = $16
	*($5 + [32]) = $17
	*($5 + [36]) = $18
	*($5 + [40]) = $19
	*($5 + [44]) = $20
	*($5 + [48]) = $21
	*($5 + [52]) = $22
	*($5 + [56]) = $23
	*($5 + [60]) = $24
	*($5 + [64]) = $25
	*($5 + [68]) = $14
	*($5 + [72]) = $26
	*($5 + [76]) = $27
	*($5 + [80]) = $28
	*($5 + [84]) = $29
	*($5 + [88]) = $30
	*($5 + [92]) = $31
	*($5 + [96]) = $32
	*($5 + [24]) = $1
	*($5 + [104]) = $33
	*($5 + [100]) = $34
	*($5 + [108]) = $35
	*($5 + [112]) = $13
	*($5 + [116]) = $36
	*($5 + [120]) = $37
	*($5 + [124]) = $38
	*($5 + [128]) = $39
	*($5 + [132]) = $40
	*($5 + [136]) = $8
	*($5 + [140]) = $41
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$17 }
	CALL $145($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$15 }
	
.LABEL $label$16
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$15
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [8])
	$6 = *($1)
	$7 = *($3 + [8])
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [144]))), [10470])
	$9 = ((int_64)*($1 + [136]) + (int_64)*($8))
	*($1 + [136]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [136]) < (int_64)4611686018427387904), [10532])
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [176]))), [10470])
	$9 = ((int_64)*($1 + [168]) + (int_64)*($8))
	*($1 + [168]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [168]) < (int_64)4611686018427387904), [10532])
	$8 = *($3 + [4])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$9 = ((int_64)*($1 + [64]) + (int_64)*($8))
	*($1 + [64]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [114]) = *($7 + [38])
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$7 = *(*($3 + [12]) + [4])
	$9 = *($7)
	$10 = *($7 + [8])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$10), [10012])
	$11 = (int_64)
	CALL eosio_assert(((int_64)$11($9 - *($3))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [10082])
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$12 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($3 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$12 = (int_64)0
	
.LABEL $label$1
	$13 = ($1 + [248])
	$14 = ($1 + [114])
	CALL eosio_assert([1], [9373])
	$9 = ((int_64)$12 & (int_64)72057594037927935)
	$15 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$9 = $12
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$9 = $12
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [9422])
	CALL eosio_assert(((int_64)$10 == (int_64)$15), [9442])
	$8 = ($1 + [260])
	if ( ((int_64)$11 > (int_64)10000) ){ goto $label$12 }
	*($8) = [1]
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$16 = ($1 + [8])
	*($5 + [28]) = $16
	*($5 + [24]) = $1
	$17 = ($1 + [16])
	*($5 + [32]) = $17
	$18 = ($1 + [24])
	*($5 + [36]) = $18
	$19 = ($1 + [40])
	*($5 + [40]) = $19
	$20 = ($1 + [48])
	*($5 + [44]) = $20
	$21 = ($1 + [56])
	*($5 + [48]) = $21
	$22 = ($1 + [64])
	*($5 + [52]) = $22
	$23 = ($1 + [80])
	*($5 + [56]) = $23
	$24 = ($1 + [96])
	*($5 + [60]) = $24
	$25 = ($1 + [112])
	*($5 + [64]) = $25
	$26 = ($1 + [113])
	*($5 + [68]) = $26
	*($5 + [72]) = $14
	$27 = ($1 + [120])
	*($5 + [76]) = $27
	$28 = ($1 + [136])
	*($5 + [80]) = $28
	$29 = ($1 + [152])
	*($5 + [84]) = $29
	$30 = ($1 + [168])
	*($5 + [88]) = $30
	$31 = ($1 + [184])
	*($5 + [92]) = $31
	$32 = ($1 + [188])
	*($5 + [96]) = $32
	$33 = ($1 + [212])
	*($5 + [104]) = $33
	$34 = ($1 + [200])
	*($5 + [100]) = $34
	$35 = ($1 + [224])
	*($5 + [108]) = $35
	$36 = ($1 + [240])
	*($5 + [112]) = $36
	*($5 + [116]) = $13
	$37 = ($1 + [256])
	*($5 + [120]) = $37
	$38 = ($1 + [257])
	*($5 + [124]) = $38
	$39 = ($1 + [258])
	*($5 + [128]) = $39
	$40 = ($1 + [259])
	*($5 + [132]) = $40
	*($5 + [136]) = $8
	$41 = ($1 + [261])
	*($5 + [140]) = $41
	CALL $102(($5 + [24]), $5)
	$7 = *($5 + [16])
	if ( ($7 <= [513]) ){ goto $label$14 }
	$3 = CALL $142($7)
	goto $label$13 
	
.LABEL $label$14
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$13
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	*($5 + [16]) = $5
	*($5 + [28]) = $16
	*($5 + [32]) = $17
	*($5 + [36]) = $18
	*($5 + [40]) = $19
	*($5 + [44]) = $20
	*($5 + [48]) = $21
	*($5 + [52]) = $22
	*($5 + [56]) = $23
	*($5 + [60]) = $24
	*($5 + [64]) = $25
	*($5 + [68]) = $26
	*($5 + [72]) = $14
	*($5 + [76]) = $27
	*($5 + [80]) = $28
	*($5 + [84]) = $29
	*($5 + [88]) = $30
	*($5 + [92]) = $31
	*($5 + [96]) = $32
	*($5 + [24]) = $1
	*($5 + [104]) = $33
	*($5 + [100]) = $34
	*($5 + [108]) = $35
	*($5 + [112]) = $36
	*($5 + [116]) = $13
	*($5 + [120]) = $37
	*($5 + [124]) = $38
	*($5 + [128]) = $39
	*($5 + [132]) = $40
	*($5 + [136]) = $8
	*($5 + [140]) = $41
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$17 }
	CALL $145($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$15 }
	
.LABEL $label$16
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$15
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
}

void .FUNC $52 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth($2)
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$4 = *($0)
	*($3 + [24]) = $4
	*($3 + [32]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)7035938307668180992, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $2(($3 + [24]), $6)
	CALL eosio_assert(((int_32)*($5 + [264]) == (int_32)($3 + [24])), [10152])
	
.LABEL $label$1
	*($3 + [20]) = $5
	*($3 + [16]) = ($3 + [24])
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [8909])
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)$2), [8933])
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)*($0 + [30])), [8952])
	$6 = [1]
	if ( ((int_64)*($5 + [8]) == (int_64)$2) ){ goto $label$2 }
	$6 = ((int_64)*($5 + [16]) == (int_64)$2)
	
.LABEL $label$2
	CALL eosio_assert($6, [8631])
	if ( ((int_64)*(($5 + [8])) != (int_64)$2) ){ goto $label$9 }
	$6 = *($5 + [114])
	if ( ((int_32)$6 != (int_32)*($0 + [34])) ){ goto $label$8 }
	$2 = *($0)
	*($3 + [12]) = $0
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert($7, [9528])
	CALL $53(($3 + [24]), $5, $2, ($3 + [8]))
	$6 = *($3 + [48])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$9
	$6 = *($5 + [113])
	if ( ((int_32)$6 != (int_32)*($0 + [34])) ){ goto $label$7 }
	$2 = *($0)
	*($3 + [12]) = $0
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert($7, [9528])
	CALL $54(($3 + [24]), $5, $2, ($3 + [8]))
	$6 = *($3 + [48])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$8
	$4 = *($0)
	if ( ((int_32)$6 != (int_32)*($0 + [36])) ){ goto $label$6 }
	*($3 + [12]) = $0
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [9528])
	CALL $55(($3 + [24]), $5, $4, ($3 + [8]))
	CALL $12($0, $1)
	$6 = *($3 + [48])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	$4 = *($0)
	if ( ((int_32)$6 != (int_32)*($0 + [36])) ){ goto $label$5 }
	*($3 + [12]) = $0
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [9528])
	CALL $56(($3 + [24]), $5, $4, ($3 + [8]))
	CALL $12($0, $1)
	$6 = *($3 + [48])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	*($3 + [8]) = $0
	CALL eosio_assert([1], [9528])
	CALL $57(($3 + [24]), $5, $4, ($3 + [8]))
	CALL $36($0, $1, $2)
	$6 = *($3 + [48])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	*($3 + [8]) = $0
	CALL eosio_assert([1], [9528])
	CALL $58(($3 + [24]), $5, $4, ($3 + [8]))
	CALL $36($0, $1, $2)
	$6 = *($3 + [48])
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($3 + [52])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	CALL $7($0)
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$12 }
	$5 = *(($3 + [48]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $6
	
.LABEL $label$10
	*($7) = $6
	CALL _ZdlPv($5)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [16])
	*($1 + [113]) = *((*(($3 + [4])) + [36]))
	$5 = *($1)
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [40])
	*($3 + [40]) = $9
	$10 = ($1 + [48])
	*($3 + [44]) = $10
	$11 = ($1 + [56])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [80])
	*($3 + [56]) = $13
	$14 = ($1 + [96])
	*($3 + [60]) = $14
	$15 = ($1 + [112])
	*($3 + [64]) = $15
	$16 = ($1 + [113])
	*($3 + [68]) = $16
	$17 = ($1 + [114])
	*($3 + [72]) = $17
	$18 = ($1 + [120])
	*($3 + [76]) = $18
	$19 = ($1 + [136])
	*($3 + [80]) = $19
	$20 = ($1 + [152])
	*($3 + [84]) = $20
	$21 = ($1 + [168])
	*($3 + [88]) = $21
	$22 = ($1 + [184])
	*($3 + [92]) = $22
	$23 = ($1 + [188])
	*($3 + [96]) = $23
	$24 = ($1 + [212])
	*($3 + [104]) = $24
	$25 = ($1 + [200])
	*($3 + [100]) = $25
	$26 = ($1 + [224])
	*($3 + [108]) = $26
	$27 = ($1 + [240])
	*($3 + [112]) = $27
	$28 = ($1 + [248])
	*($3 + [116]) = $28
	$29 = ($1 + [256])
	*($3 + [120]) = $29
	$30 = ($1 + [257])
	*($3 + [124]) = $30
	$31 = ($1 + [258])
	*($3 + [128]) = $31
	$32 = ($1 + [259])
	*($3 + [132]) = $32
	$33 = ($1 + [260])
	*($3 + [136]) = $33
	$34 = ($1 + [261])
	*($3 + [140]) = $34
	CALL $102(($3 + [24]), $3)
	$35 = *($3 + [16])
	if ( ($35 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($35)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($35 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $35)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $21
	*($3 + [92]) = $22
	*($3 + [96]) = $23
	*($3 + [24]) = $1
	*($3 + [104]) = $24
	*($3 + [100]) = $25
	*($3 + [108]) = $26
	*($3 + [112]) = $27
	*($3 + [116]) = $28
	*($3 + [120]) = $29
	*($3 + [124]) = $30
	*($3 + [128]) = $31
	*($3 + [132]) = $32
	*($3 + [136]) = $33
	*($3 + [140]) = $34
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $35)
	if ( ((uint_32)$35 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [8])
	*($1 + [114]) = *((*(($3 + [4])) + [36]))
	$5 = *($1)
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [40])
	*($3 + [40]) = $9
	$10 = ($1 + [48])
	*($3 + [44]) = $10
	$11 = ($1 + [56])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [80])
	*($3 + [56]) = $13
	$14 = ($1 + [96])
	*($3 + [60]) = $14
	$15 = ($1 + [112])
	*($3 + [64]) = $15
	$16 = ($1 + [113])
	*($3 + [68]) = $16
	$17 = ($1 + [114])
	*($3 + [72]) = $17
	$18 = ($1 + [120])
	*($3 + [76]) = $18
	$19 = ($1 + [136])
	*($3 + [80]) = $19
	$20 = ($1 + [152])
	*($3 + [84]) = $20
	$21 = ($1 + [168])
	*($3 + [88]) = $21
	$22 = ($1 + [184])
	*($3 + [92]) = $22
	$23 = ($1 + [188])
	*($3 + [96]) = $23
	$24 = ($1 + [212])
	*($3 + [104]) = $24
	$25 = ($1 + [200])
	*($3 + [100]) = $25
	$26 = ($1 + [224])
	*($3 + [108]) = $26
	$27 = ($1 + [240])
	*($3 + [112]) = $27
	$28 = ($1 + [248])
	*($3 + [116]) = $28
	$29 = ($1 + [256])
	*($3 + [120]) = $29
	$30 = ($1 + [257])
	*($3 + [124]) = $30
	$31 = ($1 + [258])
	*($3 + [128]) = $31
	$32 = ($1 + [259])
	*($3 + [132]) = $32
	$33 = ($1 + [260])
	*($3 + [136]) = $33
	$34 = ($1 + [261])
	*($3 + [140]) = $34
	CALL $102(($3 + [24]), $3)
	$35 = *($3 + [16])
	if ( ($35 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($35)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($35 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $35)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $21
	*($3 + [92]) = $22
	*($3 + [96]) = $23
	*($3 + [24]) = $1
	*($3 + [104]) = $24
	*($3 + [100]) = $25
	*($3 + [108]) = $26
	*($3 + [112]) = $27
	*($3 + [116]) = $28
	*($3 + [120]) = $29
	*($3 + [124]) = $30
	*($3 + [128]) = $31
	*($3 + [132]) = $32
	*($3 + [136]) = $33
	*($3 + [140]) = $34
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $35)
	if ( ((uint_32)$35 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [259]) = [1]
	$5 = *($3 + [4])
	$6 = *(*($3) + [4])
	*($1 + [120]) = *($6)
	*(($1 + [128])) = *(($6 + [8]))
	$7 = *($1)
	$6 = *(*($3) + [4])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [160]))), [10470])
	$8 = ((int_64)*($1 + [152]) + (int_64)*($6))
	*($1 + [152]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [152]) < (int_64)4611686018427387904), [10532])
	$3 = *(*($3) + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$8 = ((int_64)*($1 + [64]) + (int_64)*($3))
	*($1 + [64]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [113]) = *($5 + [40])
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$9 = ($1 + [16])
	*($3 + [32]) = $9
	$10 = ($1 + [24])
	*($3 + [36]) = $10
	$11 = ($1 + [40])
	*($3 + [40]) = $11
	$12 = ($1 + [48])
	*($3 + [44]) = $12
	$13 = ($1 + [56])
	*($3 + [48]) = $13
	$14 = ($1 + [64])
	*($3 + [52]) = $14
	$15 = ($1 + [80])
	*($3 + [56]) = $15
	$16 = ($1 + [96])
	*($3 + [60]) = $16
	$17 = ($1 + [112])
	*($3 + [64]) = $17
	$18 = ($1 + [113])
	*($3 + [68]) = $18
	$19 = ($1 + [114])
	*($3 + [72]) = $19
	$20 = ($1 + [120])
	*($3 + [76]) = $20
	$21 = ($1 + [136])
	*($3 + [80]) = $21
	$22 = ($1 + [152])
	*($3 + [84]) = $22
	$23 = ($1 + [168])
	*($3 + [88]) = $23
	$24 = ($1 + [184])
	*($3 + [92]) = $24
	$25 = ($1 + [188])
	*($3 + [96]) = $25
	$26 = ($1 + [212])
	*($3 + [104]) = $26
	$27 = ($1 + [200])
	*($3 + [100]) = $27
	$28 = ($1 + [224])
	*($3 + [108]) = $28
	$29 = ($1 + [240])
	*($3 + [112]) = $29
	$30 = ($1 + [248])
	*($3 + [116]) = $30
	$31 = ($1 + [256])
	*($3 + [120]) = $31
	$32 = ($1 + [257])
	*($3 + [124]) = $32
	$33 = ($1 + [258])
	*($3 + [128]) = $33
	$34 = ($1 + [259])
	*($3 + [132]) = $34
	$35 = ($1 + [260])
	*($3 + [136]) = $35
	$36 = ($1 + [261])
	*($3 + [140]) = $36
	CALL $102(($3 + [24]), $3)
	$5 = *($3 + [16])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($5)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $9
	*($3 + [36]) = $10
	*($3 + [40]) = $11
	*($3 + [44]) = $12
	*($3 + [48]) = $13
	*($3 + [52]) = $14
	*($3 + [56]) = $15
	*($3 + [60]) = $16
	*($3 + [64]) = $17
	*($3 + [68]) = $18
	*($3 + [72]) = $19
	*($3 + [76]) = $20
	*($3 + [80]) = $21
	*($3 + [84]) = $22
	*($3 + [88]) = $23
	*($3 + [92]) = $24
	*($3 + [96]) = $25
	*($3 + [24]) = $1
	*($3 + [104]) = $26
	*($3 + [100]) = $27
	*($3 + [108]) = $28
	*($3 + [112]) = $29
	*($3 + [116]) = $30
	*($3 + [120]) = $31
	*($3 + [124]) = $32
	*($3 + [128]) = $33
	*($3 + [132]) = $34
	*($3 + [136]) = $35
	*($3 + [140]) = $36
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [8])
	*($1 + [114]) = *((*(($3 + [4])) + [36]))
	$5 = *($1)
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [40])
	*($3 + [40]) = $9
	$10 = ($1 + [48])
	*($3 + [44]) = $10
	$11 = ($1 + [56])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [80])
	*($3 + [56]) = $13
	$14 = ($1 + [96])
	*($3 + [60]) = $14
	$15 = ($1 + [112])
	*($3 + [64]) = $15
	$16 = ($1 + [113])
	*($3 + [68]) = $16
	$17 = ($1 + [114])
	*($3 + [72]) = $17
	$18 = ($1 + [120])
	*($3 + [76]) = $18
	$19 = ($1 + [136])
	*($3 + [80]) = $19
	$20 = ($1 + [152])
	*($3 + [84]) = $20
	$21 = ($1 + [168])
	*($3 + [88]) = $21
	$22 = ($1 + [184])
	*($3 + [92]) = $22
	$23 = ($1 + [188])
	*($3 + [96]) = $23
	$24 = ($1 + [212])
	*($3 + [104]) = $24
	$25 = ($1 + [200])
	*($3 + [100]) = $25
	$26 = ($1 + [224])
	*($3 + [108]) = $26
	$27 = ($1 + [240])
	*($3 + [112]) = $27
	$28 = ($1 + [248])
	*($3 + [116]) = $28
	$29 = ($1 + [256])
	*($3 + [120]) = $29
	$30 = ($1 + [257])
	*($3 + [124]) = $30
	$31 = ($1 + [258])
	*($3 + [128]) = $31
	$32 = ($1 + [259])
	*($3 + [132]) = $32
	$33 = ($1 + [260])
	*($3 + [136]) = $33
	$34 = ($1 + [261])
	*($3 + [140]) = $34
	CALL $102(($3 + [24]), $3)
	$35 = *($3 + [16])
	if ( ($35 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($35)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($35 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $35)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $21
	*($3 + [92]) = $22
	*($3 + [96]) = $23
	*($3 + [24]) = $1
	*($3 + [104]) = $24
	*($3 + [100]) = $25
	*($3 + [108]) = $26
	*($3 + [112]) = $27
	*($3 + [116]) = $28
	*($3 + [120]) = $29
	*($3 + [124]) = $30
	*($3 + [128]) = $31
	*($3 + [132]) = $32
	*($3 + [136]) = $33
	*($3 + [140]) = $34
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $35)
	if ( ((uint_32)$35 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [113]) = *((*($3) + [36]))
	$5 = *($1)
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [40])
	*($3 + [40]) = $9
	$10 = ($1 + [48])
	*($3 + [44]) = $10
	$11 = ($1 + [56])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [80])
	*($3 + [56]) = $13
	$14 = ($1 + [96])
	*($3 + [60]) = $14
	$15 = ($1 + [112])
	*($3 + [64]) = $15
	$16 = ($1 + [113])
	*($3 + [68]) = $16
	$17 = ($1 + [114])
	*($3 + [72]) = $17
	$18 = ($1 + [120])
	*($3 + [76]) = $18
	$19 = ($1 + [136])
	*($3 + [80]) = $19
	$20 = ($1 + [152])
	*($3 + [84]) = $20
	$21 = ($1 + [168])
	*($3 + [88]) = $21
	$22 = ($1 + [184])
	*($3 + [92]) = $22
	$23 = ($1 + [188])
	*($3 + [96]) = $23
	$24 = ($1 + [212])
	*($3 + [104]) = $24
	$25 = ($1 + [200])
	*($3 + [100]) = $25
	$26 = ($1 + [224])
	*($3 + [108]) = $26
	$27 = ($1 + [240])
	*($3 + [112]) = $27
	$28 = ($1 + [248])
	*($3 + [116]) = $28
	$29 = ($1 + [256])
	*($3 + [120]) = $29
	$30 = ($1 + [257])
	*($3 + [124]) = $30
	$31 = ($1 + [258])
	*($3 + [128]) = $31
	$32 = ($1 + [259])
	*($3 + [132]) = $32
	$33 = ($1 + [260])
	*($3 + [136]) = $33
	$34 = ($1 + [261])
	*($3 + [140]) = $34
	CALL $102(($3 + [24]), $3)
	$35 = *($3 + [16])
	if ( ($35 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($35)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($35 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $35)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $21
	*($3 + [92]) = $22
	*($3 + [96]) = $23
	*($3 + [24]) = $1
	*($3 + [104]) = $24
	*($3 + [100]) = $25
	*($3 + [108]) = $26
	*($3 + [112]) = $27
	*($3 + [116]) = $28
	*($3 + [120]) = $29
	*($3 + [124]) = $30
	*($3 + [128]) = $31
	*($3 + [132]) = $32
	*($3 + [136]) = $33
	*($3 + [140]) = $34
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $35)
	if ( ((uint_32)$35 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10231])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $26($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [10226])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $137($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $137($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [259]) = [1]
	$5 = *($3 + [4])
	$6 = *(*($3) + [4])
	*($1 + [136]) = *($6)
	*(($1 + [144])) = *(($6 + [8]))
	$7 = *($1)
	$6 = *(*($3) + [4])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [176]))), [10470])
	$8 = ((int_64)*($1 + [168]) + (int_64)*($6))
	*($1 + [168]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [168]) < (int_64)4611686018427387904), [10532])
	$3 = *(*($3) + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$8 = ((int_64)*($1 + [64]) + (int_64)*($3))
	*($1 + [64]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	*($1 + [114]) = *($5 + [40])
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$9 = ($1 + [16])
	*($3 + [32]) = $9
	$10 = ($1 + [24])
	*($3 + [36]) = $10
	$11 = ($1 + [40])
	*($3 + [40]) = $11
	$12 = ($1 + [48])
	*($3 + [44]) = $12
	$13 = ($1 + [56])
	*($3 + [48]) = $13
	$14 = ($1 + [64])
	*($3 + [52]) = $14
	$15 = ($1 + [80])
	*($3 + [56]) = $15
	$16 = ($1 + [96])
	*($3 + [60]) = $16
	$17 = ($1 + [112])
	*($3 + [64]) = $17
	$18 = ($1 + [113])
	*($3 + [68]) = $18
	$19 = ($1 + [114])
	*($3 + [72]) = $19
	$20 = ($1 + [120])
	*($3 + [76]) = $20
	$21 = ($1 + [136])
	*($3 + [80]) = $21
	$22 = ($1 + [152])
	*($3 + [84]) = $22
	$23 = ($1 + [168])
	*($3 + [88]) = $23
	$24 = ($1 + [184])
	*($3 + [92]) = $24
	$25 = ($1 + [188])
	*($3 + [96]) = $25
	$26 = ($1 + [212])
	*($3 + [104]) = $26
	$27 = ($1 + [200])
	*($3 + [100]) = $27
	$28 = ($1 + [224])
	*($3 + [108]) = $28
	$29 = ($1 + [240])
	*($3 + [112]) = $29
	$30 = ($1 + [248])
	*($3 + [116]) = $30
	$31 = ($1 + [256])
	*($3 + [120]) = $31
	$32 = ($1 + [257])
	*($3 + [124]) = $32
	$33 = ($1 + [258])
	*($3 + [128]) = $33
	$34 = ($1 + [259])
	*($3 + [132]) = $34
	$35 = ($1 + [260])
	*($3 + [136]) = $35
	$36 = ($1 + [261])
	*($3 + [140]) = $36
	CALL $102(($3 + [24]), $3)
	$5 = *($3 + [16])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($5)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $9
	*($3 + [36]) = $10
	*($3 + [40]) = $11
	*($3 + [44]) = $12
	*($3 + [48]) = $13
	*($3 + [52]) = $14
	*($3 + [56]) = $15
	*($3 + [60]) = $16
	*($3 + [64]) = $17
	*($3 + [68]) = $18
	*($3 + [72]) = $19
	*($3 + [76]) = $20
	*($3 + [80]) = $21
	*($3 + [84]) = $22
	*($3 + [88]) = $23
	*($3 + [92]) = $24
	*($3 + [96]) = $25
	*($3 + [24]) = $1
	*($3 + [104]) = $26
	*($3 + [100]) = $27
	*($3 + [108]) = $28
	*($3 + [112]) = $29
	*($3 + [116]) = $30
	*($3 + [120]) = $31
	*($3 + [124]) = $32
	*($3 + [128]) = $33
	*($3 + [132]) = $34
	*($3 + [136]) = $35
	*($3 + [140]) = $36
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10231])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $114($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [10226])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10231])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $115($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($6 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $94($0, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = int_32(($2 - $1) >> [3])
	if ( ((uint_32)$3 <= (uint_32)int_32(($4 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($4 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $3
	$4 = int_32($4 >> [2])
	if ( ($4 <= $3) ){ goto $label$6 }
	$5 = $4
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	$3 = (($2 + [-8]) - $1)
	$4 = $5
	
.LOOP $label$7:
	*($4) = *($1)
	$4 = ($4 + [8])
	$1 = ($1 + [8])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	*(($0 + [4])) = (($5 + ($3 & [-8])) + [8])
	goto $label$3 
	
.LABEL $label$4
	$7 = int_32($6 >> [3])
	$6 = (*($0 + [4]) - $5)
	$4 = ($1 + $6)
	$8 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	$6 = ($8 - $1)
	if ( ($6 == 0) ){ goto $label$8 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$3 }
	$5 = (($2 + [-8]) - $8)
	$3 = *(($0 + [4]))
	$1 = $3
	
.LOOP $label$9:
	*($1) = *($4)
	$1 = ($1 + [8])
	$4 = ($4 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	*(($0 + [4])) = (($3 + ($5 & [-8])) + [8])
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + (int_32($6 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $137($0)
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $112(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10226])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10226])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10226])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [60])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [64])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [68])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10226])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	CALL $113(*($1), *($0 + [72]))
	CALL $113(*($1), *($0 + [76]))
	CALL $97(*($1), *($0 + [80]))
	CALL $97(*($1), *($0 + [84]))
	$3 = *($0 + [88])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [92])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [10226])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [96])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10226])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [100])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$3 = *($0 + [104])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$3 = *($0 + [108])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$3 = *($0 + [112])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [10226])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$4 = *($0 + [116])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [10226])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $118 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [268]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10422])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035938307668180992)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10368])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10368])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $2(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $137($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1) = ((int_64)*($1) + (int_64)*(*($3)))
	$5 = *($1 + [8])
	CALL eosio_assert([1], [9660])
	CALL eosio_assert([1], [9719])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [9719])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	$2 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $26($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9719])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9719])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $107(CALL $106($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [48]) = *(*(*($3) + [4]) + [16])
	*($1 + [113]) = *((*(($3 + [4])) + [36]))
	$5 = *($1)
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [40])
	*($3 + [40]) = $9
	$10 = ($1 + [48])
	*($3 + [44]) = $10
	$11 = ($1 + [56])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [80])
	*($3 + [56]) = $13
	$14 = ($1 + [96])
	*($3 + [60]) = $14
	$15 = ($1 + [112])
	*($3 + [64]) = $15
	$16 = ($1 + [113])
	*($3 + [68]) = $16
	$17 = ($1 + [114])
	*($3 + [72]) = $17
	$18 = ($1 + [120])
	*($3 + [76]) = $18
	$19 = ($1 + [136])
	*($3 + [80]) = $19
	$20 = ($1 + [152])
	*($3 + [84]) = $20
	$21 = ($1 + [168])
	*($3 + [88]) = $21
	$22 = ($1 + [184])
	*($3 + [92]) = $22
	$23 = ($1 + [188])
	*($3 + [96]) = $23
	$24 = ($1 + [212])
	*($3 + [104]) = $24
	$25 = ($1 + [200])
	*($3 + [100]) = $25
	$26 = ($1 + [224])
	*($3 + [108]) = $26
	$27 = ($1 + [240])
	*($3 + [112]) = $27
	$28 = ($1 + [248])
	*($3 + [116]) = $28
	$29 = ($1 + [256])
	*($3 + [120]) = $29
	$30 = ($1 + [257])
	*($3 + [124]) = $30
	$31 = ($1 + [258])
	*($3 + [128]) = $31
	$32 = ($1 + [259])
	*($3 + [132]) = $32
	$33 = ($1 + [260])
	*($3 + [136]) = $33
	$34 = ($1 + [261])
	*($3 + [140]) = $34
	CALL $102(($3 + [24]), $3)
	$35 = *($3 + [16])
	if ( ($35 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($35)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($35 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $35)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $21
	*($3 + [92]) = $22
	*($3 + [96]) = $23
	*($3 + [24]) = $1
	*($3 + [104]) = $24
	*($3 + [100]) = $25
	*($3 + [108]) = $26
	*($3 + [112]) = $27
	*($3 + [116]) = $28
	*($3 + [120]) = $29
	*($3 + [124]) = $30
	*($3 + [128]) = $31
	*($3 + [132]) = $32
	*($3 + [136]) = $33
	*($3 + [140]) = $34
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $35)
	if ( ((uint_32)$35 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9719])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9719])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9719])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9719])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9719])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	$5 = *($2 + [8])
	*($3 + [16]) = $1
	$6 = [0]
	$7 = CALL db_find_i64($4, $1, (int_64)-3665743569108320256, (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $3(($3 + [8]), $7)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($3 + [8])), [10152])
	
.LABEL $label$1
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [9922])
	$1 = *($0)
	*($3) = $2
	CALL eosio_assert($7, [9528])
	CALL $29(($3 + [8]), $6, $1, $3)
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$2 }
	$7 = ($3 + [36])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$6 = $0
	
.LABEL $label$3
	*($7) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [240])
	$global$0 = $4
	*($4 + [88]) = [8460]
	*($4 + [92]) = CALL $139([8460])
	*($4 + [48]) = *($4 + [88])
	CALL require_auth(*(CALL $17(($4 + [184]), ($4 + [48]))))
	$5 = [0]
	*(($4 + [216])) = [0]
	*($4 + [200]) = (int_64)-1
	*($4 + [208]) = (int_64)0
	$6 = *($0)
	*($4 + [184]) = $6
	*($4 + [192]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)7035938307668180992, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $2(($4 + [184]), $8)
	CALL eosio_assert(((int_32)*($7 + [264]) == (int_32)($4 + [184])), [10152])
	
.LABEL $label$1
	$8 = *($0 + [30])
	*($4 + [180]) = $7
	$9 = *($7 + [112])
	*($4 + [176]) = ($4 + [184])
	CALL eosio_assert(((int_32)$9 == (int_32)$8), [8530])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8371])
	CALL eosio_assert(*($7 + [258]), [8549])
	$9 = *($2 + [4])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	$5 = [0]
	
.LOOP $label$3:
	$5 = (($5 + *($8)) & [255])
	$8 = ($8 + [1])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = [0]
	$10 = *($3 + [4])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (($9 + *($8)) & [255])
	$8 = ($8 + [1])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$15 }
	CALL eosio_assert([1], [9882])
	CALL eosio_assert([1], [9897])
	$8 = *($4 + [180])
	$1 = *($8 + [8])
	*(($5 = (($4 + [160]) + [8]))) = *(($8 + [160]))
	$11 = *($8 + [16])
	$6 = *($8 + [152])
	*((($4 + [32]) + [8])) = *($5)
	*($4 + [160]) = $6
	*($4 + [32]) = $6
	CALL $21($0, $1, ($4 + [32]))
	$8 = *($4 + [180])
	$6 = *($8 + [168])
	$1 = *(($8 + [176]))
	*((($4 + [16]) + [8])) = $1
	*((($4 + [144]) + [8])) = $1
	*($4 + [144]) = $6
	*($4 + [16]) = $6
	CALL $21($0, $11, ($4 + [16]))
	$6 = *($0)
	$8 = *($4 + [180])
	*($4 + [92]) = $2
	*($4 + [88]) = $0
	*($4 + [96]) = $3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9528])
	CALL $22(($4 + [184]), $8, $6, ($4 + [88]))
	*((($4 + [128]) + [8])) = [0]
	*($4 + [128]) = (int_64)0
	$8 = CALL $139([8571])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$14 }
	*($4 + [128]) = ($8 << [1])
	$5 = (($4 + [128]) | [1])
	if ( $8 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$6 = *($0)
	if ( ((uint_32)$5 <= (uint_32)$9) ){ goto $label$17 }
	*($4 + [92]) = $3
	*($4 + [88]) = $2
	*($4 + [100]) = $0
	*($4 + [96]) = ($4 + [176])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9528])
	CALL $23(($4 + [184]), $7, $6, ($4 + [88]))
	goto $label$16 
	
.LABEL $label$17
	*($4 + [92]) = $3
	*($4 + [88]) = $2
	*($4 + [100]) = $0
	*($4 + [96]) = ($4 + [176])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9528])
	CALL $24(($4 + [184]), $7, $6, ($4 + [88]))
	
.LABEL $label$16
	CALL $25($0, $1)
	$9 = *($4 + [208])
	if ( $9 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$14
	$9 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($4 + [128]) = ($9 | [1])
	*($4 + [136]) = $5
	*($4 + [132]) = $8
	
.LABEL $label$13
	CALL memcpy($5, [8571], $8)
	
.LABEL $label$12
	*(($5 + $8)) = [0]
	$6 = *($0)
	*($4 + [56]) = [8583]
	*($4 + [60]) = CALL $139([8583])
	*($4 + [8]) = *($4 + [56])
	$1 = *(CALL $17(($4 + [88]), ($4 + [8])))
	$11 = *($0)
	*($4 + [56]) = [8590]
	*($4 + [60]) = CALL $139([8590])
	*($4) = *($4 + [56])
	$12 = *(CALL $17(($4 + [88]), $4))
	$8 = *($4 + [180])
	*($4 + [56]) = *($8 + [8])
	*($4 + [64]) = *($8 + [16])
	$5 = CALL $133((($4 + [56]) + [16]), ($4 + [128]))
	*($4 + [96]) = $12
	*($4 + [88]) = $11
	*(($8 = CALL _Znwj([16]))) = $6
	*($8 + [8]) = $1
	*(($4 + [124])) = [0]
	$9 = ($8 + [16])
	*(($4 + [112])) = $9
	*((($4 + [88]) + [20])) = $9
	*($4 + [104]) = $8
	*($4 + [116 align=4]) = (int_64)0
	$8 = *($5)
	$9 = ( *((($4 + [56]) + [20])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($9 + [16])
	$6 = (CASTING uint_64)(uint_32 $9)
	$9 = ($4 + [116])
	
.LOOP $label$18:
	$8 = ($8 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$18 }
	if ( ($8 == 0) ){ goto $label$20 }
	CALL $26($9, $8)
	$9 = *(($4 + [120]))
	$8 = *(($4 + [116]))
	goto $label$19 
	
.LABEL $label$20
	$9 = [0]
	$8 = [0]
	
.LABEL $label$19
	*($4 + [224]) = $8
	*($4 + [232]) = $9
	$9 = ($9 - $8)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [9719])
	CALL memcpy($8, ($4 + [56]), [8])
	CALL eosio_assert(((int_32)($9 + [-8]) > (int_32)[7]), [9719])
	CALL memcpy(($8 + [8]), (($4 + [56]) + [8]), [8])
	*($4 + [228]) = ($8 + [16])
	CALL $27(($4 + [224]), $5)
	CALL $28(($4 + [224]), ($4 + [88]))
	$8 = *($4 + [224])
	CALL send_inline($8, (*($4 + [228]) - $8))
	$8 = *($4 + [224])
	if ( ($8 == 0) ){ goto $label$21 }
	*($4 + [228]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$21
	$8 = *($4 + [116])
	if ( ($8 == 0) ){ goto $label$22 }
	*(($4 + [120])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$22
	$8 = *($4 + [104])
	if ( ($8 == 0) ){ goto $label$23 }
	*(($4 + [108])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$23
	if ( (*($4 + [72]) & [1]) ){ goto $label$25 }
	if ( (*($4 + [128]) & [1]) ){ goto $label$24 }
	goto $label$10 
	
.LABEL $label$25
	CALL _ZdlPv(*(($4 + [80])))
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$24
	CALL _ZdlPv(*($4 + [136]))
	$9 = *($4 + [208])
	if ( $9 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	CALL $132(($4 + [128]))
	
.LABEL $label$10
	$9 = *($4 + [208])
	if ( ($9 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$10 = ($4 + [212])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$7 }
	
.LOOP $label$26:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$27 }
	CALL $7($5)
	CALL _ZdlPv($5)
	
.LABEL $label$27
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$26 }
	$8 = *(($4 + [208]))
	goto $label$6 
	
.LABEL $label$8
	$global$0 = ($4 + [240])
	return 
	
.LABEL $label$7
	$8 = $9
	
.LABEL $label$6
	*($10) = $9
	CALL _ZdlPv($8)
	$global$0 = ($4 + [240])
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$6 = *($3 + [12])
	$7 = *($1)
	$9 = *($3)
	$8 = ($1 + [212])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	CALL $121($8, *($9), *($9 + [4]))
	
.LABEL $label$1
	$9 = *($3 + [4])
	$10 = ($1 + [224])
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	CALL $121($10, *($9), *($9 + [4]))
	
.LABEL $label$2
	*($1 + [258]) = [0]
	*($1 + [112]) = *($6 + [31])
	*($1 + [56]) = *(*(*($3 + [8]) + [4]) + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$6 = ($1 + [8])
	*($5 + [28]) = $6
	*($5 + [24]) = $1
	$11 = ($1 + [16])
	*($5 + [32]) = $11
	$12 = ($1 + [24])
	*($5 + [36]) = $12
	$13 = ($1 + [40])
	*($5 + [40]) = $13
	$14 = ($1 + [48])
	*($5 + [44]) = $14
	$15 = ($1 + [56])
	*($5 + [48]) = $15
	$16 = ($1 + [64])
	*($5 + [52]) = $16
	$17 = ($1 + [80])
	*($5 + [56]) = $17
	$18 = ($1 + [96])
	*($5 + [60]) = $18
	$19 = ($1 + [112])
	*($5 + [64]) = $19
	$20 = ($1 + [113])
	*($5 + [68]) = $20
	$21 = ($1 + [114])
	*($5 + [72]) = $21
	$22 = ($1 + [120])
	*($5 + [76]) = $22
	$23 = ($1 + [136])
	*($5 + [80]) = $23
	$24 = ($1 + [152])
	*($5 + [84]) = $24
	$25 = ($1 + [168])
	*($5 + [88]) = $25
	$26 = ($1 + [184])
	*($5 + [92]) = $26
	$27 = ($1 + [188])
	*($5 + [96]) = $27
	*($5 + [104]) = $8
	$28 = ($1 + [200])
	*($5 + [100]) = $28
	*($5 + [108]) = $10
	$29 = ($1 + [240])
	*($5 + [112]) = $29
	$30 = ($1 + [248])
	*($5 + [116]) = $30
	$31 = ($1 + [256])
	*($5 + [120]) = $31
	$32 = ($1 + [257])
	*($5 + [124]) = $32
	$33 = ($1 + [258])
	*($5 + [128]) = $33
	$34 = ($1 + [259])
	*($5 + [132]) = $34
	$35 = ($1 + [260])
	*($5 + [136]) = $35
	$36 = ($1 + [261])
	*($5 + [140]) = $36
	CALL $102(($5 + [24]), $5)
	$9 = *($5 + [16])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$3 = CALL $142($9)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $9)
	*($5 + [16]) = $5
	*($5 + [28]) = $6
	*($5 + [32]) = $11
	*($5 + [36]) = $12
	*($5 + [40]) = $13
	*($5 + [44]) = $14
	*($5 + [48]) = $15
	*($5 + [52]) = $16
	*($5 + [56]) = $17
	*($5 + [60]) = $18
	*($5 + [64]) = $19
	*($5 + [68]) = $20
	*($5 + [72]) = $21
	*($5 + [76]) = $22
	*($5 + [80]) = $23
	*($5 + [84]) = $24
	*($5 + [88]) = $25
	*($5 + [92]) = $26
	*($5 + [96]) = $27
	*($5 + [24]) = $1
	*($5 + [104]) = $8
	*($5 + [100]) = $28
	*($5 + [108]) = $10
	*($5 + [112]) = $29
	*($5 + [116]) = $30
	*($5 + [120]) = $31
	*($5 + [124]) = $32
	*($5 + [128]) = $33
	*($5 + [132]) = $34
	*($5 + [136]) = $35
	*($5 + [140]) = $36
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $145($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [144])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [112]) = *(*($3) + [31])
	$6 = *($1)
	$8 = *($3 + [4])
	$7 = ($1 + [212])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	CALL $121($7, *($8), *($8 + [4]))
	
.LABEL $label$1
	$3 = *($3 + [8])
	$9 = ($1 + [224])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$2 }
	CALL $121($9, *($3), *($3 + [4]))
	
.LABEL $label$2
	*($1 + [261]) = [1]
	*($1 + [257 align=1]) = [0]
	$10 = ($1 + [24])
	CALL $110($10, [0], [0])
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9275])
	goto $label$5 
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$11 = (int_64)0
	
.LOOP $label$7:
	$8 = *(($3 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$8
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$11 = (int_64)0
	
.LABEL $label$3
	$12 = ($1 + [112])
	$13 = ($1 + [260])
	$14 = ($1 + [259])
	$15 = ($1 + [258])
	$16 = ($1 + [257])
	$17 = ($1 + [261])
	CALL eosio_assert([1], [9373])
	$18 = ((int_64)$11 & (int_64)72057594037927935)
	$19 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$11 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$18 = $11
	$8 = [1]
	$20 = $3
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$18 = $11
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$20 = ($3 + [1])
	$3 = $20
	if ( $8 ){ goto $label$13 }
	$8 = [1]
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	
.LABEL $label$9
	CALL eosio_assert($8, [9422])
	*(($1 + [72])) = $19
	$11 = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [113 align=1]) = [0]
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [9275])
	goto $label$15 
	
.LABEL $label$16
	if ( ($3 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$11 = (int_64)0
	
.LOOP $label$17:
	$8 = *(($3 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$18
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$17 }
	
.LABEL $label$14
	$21 = ($1 + [114])
	$22 = ($1 + [113])
	CALL eosio_assert([1], [9373])
	$18 = ((int_64)$11 & (int_64)72057594037927935)
	$19 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$11 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$18 = $11
	$8 = [1]
	$20 = $3
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$18 = $11
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$20 = ($3 + [1])
	$3 = $20
	if ( $8 ){ goto $label$23 }
	$8 = [1]
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$8 = [0]
	
.LABEL $label$19
	CALL eosio_assert($8, [9422])
	*(($1 + [128])) = $19
	$11 = (int_64)0
	*($1 + [120]) = (int_64)0
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [9275])
	goto $label$25 
	
.LABEL $label$26
	if ( ($3 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$11 = (int_64)0
	
.LOOP $label$27:
	$8 = *(($3 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$28
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$27 }
	
.LABEL $label$24
	CALL eosio_assert([1], [9373])
	$18 = ((int_64)$11 & (int_64)72057594037927935)
	$19 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$11 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$18 = $11
	$8 = [1]
	$20 = $3
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$18 = $11
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$20 = ($3 + [1])
	$3 = $20
	if ( $8 ){ goto $label$33 }
	$8 = [1]
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$8 = [0]
	
.LABEL $label$29
	CALL eosio_assert($8, [9422])
	*(($1 + [144])) = $19
	$11 = (int_64)0
	*($1 + [136]) = (int_64)0
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$36 }
	CALL eosio_assert([0], [9275])
	goto $label$35 
	
.LABEL $label$36
	if ( ($3 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	$11 = (int_64)0
	
.LOOP $label$37:
	$8 = *(($3 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$38 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$38
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$37 }
	
.LABEL $label$34
	CALL eosio_assert([1], [9373])
	$18 = ((int_64)$11 & (int_64)72057594037927935)
	$19 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$11 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$42 }
	$18 = $11
	$8 = [1]
	$20 = $3
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$42
	$18 = $11
	
.LOOP $label$43:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$20 = ($3 + [1])
	$3 = $20
	if ( $8 ){ goto $label$43 }
	$8 = [1]
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$8 = [0]
	
.LABEL $label$39
	CALL eosio_assert($8, [9422])
	*(($1 + [160])) = $19
	$11 = (int_64)0
	*($1 + [152]) = (int_64)0
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$46 }
	CALL eosio_assert([0], [9275])
	goto $label$45 
	
.LABEL $label$46
	if ( ($3 == 0) ){ goto $label$44 }
	
.LABEL $label$45
	$11 = (int_64)0
	
.LOOP $label$47:
	$8 = *(($3 + [8191]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$48 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$48
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$47 }
	
.LABEL $label$44
	CALL eosio_assert([1], [9373])
	$18 = ((int_64)$11 & (int_64)72057594037927935)
	$19 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $18) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$11 = (uint_64)$18 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$18 & (int_64)65280) == (int_64)0) ){ goto $label$52 }
	$18 = $11
	$8 = [1]
	$20 = $3
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$52
	$18 = $11
	
.LOOP $label$53:
	if ( ((int_64)((int_64)$18 & (int_64)65280) != (int_64)0) ){ goto $label$50 }
	$18 = (uint_64)$18 >> (uint_64)(int_64)8)
	$8 = ((int_32)$3 < (int_32)[6])
	$20 = ($3 + [1])
	$3 = $20
	if ( $8 ){ goto $label$53 }
	$8 = [1]
	$3 = ($20 + [1])
	if ( ((int_32)$20 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	$8 = [0]
	
.LABEL $label$49
	CALL eosio_assert($8, [9422])
	*(($1 + [176])) = $19
	*($1 + [168]) = (int_64)0
	*($1 + [184]) = [0]
	$20 = ($1 + [188])
	CALL $109($20, [0], [0])
	$23 = ($1 + [200])
	CALL $109($23, [0], [0])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$24 = ($1 + [8])
	*($5 + [28]) = $24
	*($5 + [24]) = $1
	$25 = ($1 + [16])
	*($5 + [32]) = $25
	*($5 + [36]) = $10
	$26 = ($1 + [40])
	*($5 + [40]) = $26
	$27 = ($1 + [48])
	*($5 + [44]) = $27
	$28 = ($1 + [56])
	*($5 + [48]) = $28
	$29 = ($1 + [64])
	*($5 + [52]) = $29
	$30 = ($1 + [80])
	*($5 + [56]) = $30
	$31 = ($1 + [96])
	*($5 + [60]) = $31
	*($5 + [64]) = $12
	*($5 + [68]) = $22
	*($5 + [72]) = $21
	$32 = ($1 + [120])
	*($5 + [76]) = $32
	$33 = ($1 + [136])
	*($5 + [80]) = $33
	$34 = ($1 + [152])
	*($5 + [84]) = $34
	$35 = ($1 + [168])
	*($5 + [88]) = $35
	$36 = ($1 + [184])
	*($5 + [92]) = $36
	*($5 + [96]) = $20
	*($5 + [104]) = $7
	*($5 + [100]) = $23
	*($5 + [108]) = $9
	$37 = ($1 + [240])
	*($5 + [112]) = $37
	$38 = ($1 + [248])
	*($5 + [116]) = $38
	$39 = ($1 + [256])
	*($5 + [120]) = $39
	*($5 + [124]) = $16
	*($5 + [128]) = $15
	*($5 + [132]) = $14
	*($5 + [136]) = $13
	*($5 + [140]) = $17
	CALL $102(($5 + [24]), $5)
	$8 = *($5 + [16])
	if ( ($8 <= [513]) ){ goto $label$55 }
	$3 = CALL $142($8)
	goto $label$54 
	
.LABEL $label$55
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$54
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $8)
	*($5 + [16]) = $5
	*($5 + [28]) = $24
	*($5 + [32]) = $25
	*($5 + [36]) = $10
	*($5 + [40]) = $26
	*($5 + [44]) = $27
	*($5 + [48]) = $28
	*($5 + [52]) = $29
	*($5 + [56]) = $30
	*($5 + [60]) = $31
	*($5 + [64]) = $12
	*($5 + [68]) = $22
	*($5 + [72]) = $21
	*($5 + [76]) = $32
	*($5 + [80]) = $33
	*($5 + [84]) = $34
	*($5 + [88]) = $35
	*($5 + [92]) = $36
	*($5 + [96]) = $20
	*($5 + [24]) = $1
	*($5 + [104]) = $7
	*($5 + [100]) = $23
	*($5 + [108]) = $9
	*($5 + [112]) = $37
	*($5 + [116]) = $38
	*($5 + [120]) = $39
	*($5 + [124]) = $16
	*($5 + [128]) = $15
	*($5 + [132]) = $14
	*($5 + [136]) = $13
	*($5 + [140]) = $17
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $8)
	if ( ($8 <= [513]) ){ goto $label$58 }
	CALL $145($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$56 }
	
.LABEL $label$57
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$56
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
}

void .FUNC $25 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	$2 = ($global$0 - [400])
	$global$0 = $2
	*($2 + [376]) = (int_64)0
	*($2 + [368]) = (int_64)0
	*($2 + [360]) = (int_64)0
	*($2 + [352]) = (int_64)0
	$3 = [0]
	*(($2 + [344])) = [0]
	*($2 + [328]) = (int_64)-1
	*($2 + [336]) = (int_64)0
	$4 = *($0)
	*($2 + [312]) = $4
	*($2 + [320]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)7035938307668180992, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2(($2 + [312]), $5)
	CALL eosio_assert(((int_32)*($3 + [264]) == (int_32)($2 + [312])), [10152])
	
.LABEL $label$1
	$6 = *($3 + [56])
	$7 = ($3 + [176])
	$5 = ($3 + [160])
	CALL eosio_assert(((int_64)*($5) == (int_64)*($7)), [9442])
	if ( ((int_64)*($3 + [152]) != (int_64)*($3 + [168])) ){ goto $label$3 }
	$4 = *(($3 + [72]))
	*((($2 + [368]) + [8])) = $4
	$1 = *($3 + [64])
	*($2 + [368]) = $1
	CALL eosio_assert([1], [9882])
	CALL eosio_assert([1], [9897])
	*((($2 + [352]) + [8])) = $4
	*($2 + [352]) = ((int_64)$1 / (int_64)2)
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($5) == (int_64)*($7)), [9442])
	$7 = ($3 + [168])
	$1 = *($7)
	$5 = ($3 + [152])
	$4 = *($5)
	if ( ((int_64)$4 >= (int_64)$1) ){ goto $label$4 }
	$7 = ($3 + [160])
	$1 = *($7)
	CALL eosio_assert(((int_64)$4 < (int_64)2305843009213693952), [10103])
	CALL eosio_assert(((int_64)$4 > (int_64)-2305843009213693952), [10127])
	*((($2 + [368]) + [8])) = $1
	*($2 + [368]) = ((int_64)$4 << (int_64)1)
	$4 = *($3 + [168])
	$1 = *(($3 + [176]))
	CALL eosio_assert(((int_64)*($7) == (int_64)$1), [10012])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($4 - *(($3 + [152])))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [10082])
	*((($2 + [352]) + [8])) = *(($5 + [8]))
	$8 = *($3 + [16])
	$9 = *($5)
	*((($2 + [104]) + [8])) = $1
	*($2 + [296]) = $4
	*($2 + [304]) = $1
	*($2 + [352]) = $9
	*($2 + [104]) = $4
	CALL $21($0, $8, ($2 + [104]))
	goto $label$2 
	
.LABEL $label$4
	$5 = ($3 + [176])
	$4 = *($5)
	CALL eosio_assert(((int_64)$1 < (int_64)2305843009213693952), [10103])
	CALL eosio_assert(((int_64)$1 > (int_64)-2305843009213693952), [10127])
	*((($2 + [368]) + [8])) = $4
	*($2 + [368]) = ((int_64)$1 << (int_64)1)
	$4 = *($3 + [152])
	$1 = *(($3 + [160]))
	CALL eosio_assert(((int_64)*($5) == (int_64)$1), [10012])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($4 - *(($3 + [168])))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [10082])
	*((($2 + [352]) + [8])) = *(($7 + [8]))
	$8 = *($3 + [8])
	*($2 + [288]) = $1
	$1 = *($7)
	*((($2 + [120]) + [8])) = *($2 + [288])
	*($2 + [280]) = $4
	*($2 + [352]) = $1
	*($2 + [120]) = $4
	CALL $21($0, $8, ($2 + [120]))
	
.LABEL $label$2
	$5 = CALL $139([8192])
	if ( ($5 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9275])
	goto $label$7 
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$1 = (int_64)0
	
.LOOP $label$9:
	$7 = *(($5 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$10
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$6
	$1 = (int_64)0
	
.LABEL $label$5
	CALL eosio_assert([1], [9373])
	$4 = ((int_64)$1 & (int_64)72057594037927935)
	$8 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	$5 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$4 = $1
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$4 = $1
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [9422])
	$5 = (($2 + [368]) + [8])
	$11 = *($5)
	CALL eosio_assert(((int_64)$11 == (int_64)$8), [9442])
	$4 = *($2 + [368])
	if ( ((int_64)$4 > (int_64)2000) ){ goto $label$21 }
	$5 = CALL $139([8192])
	if ( ($5 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [9275])
	goto $label$19 
	
.LABEL $label$21
	CALL __multi3(($2 + [88]), $4, (int_64)$4 >> (int_64)63), (int_64)5, (int_64)0)
	$4 = *((($2 + [88]) + [8]))
	$1 = *($2 + [88])
	CALL eosio_assert(( (uint_64)($1 <= (int_64)4611686018427387904) ? ((int_64)$4 < (int_64)0) : (int_64)($4 == 0) ), [10103])
	CALL eosio_assert(( ((uint_64)$1 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$4 > (int_64)-1) : ((int_64)$4 == (int_64)-1) ), [10127])
	CALL eosio_assert([1], [9882])
	CALL eosio_assert([1], [9897])
	$9 = *($2 + [368])
	$8 = *($5)
	CALL eosio_assert(((int_64)$11 == (int_64)$8), [10012])
	$4 = ((int_64)$1 / (int_64)100)
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($9 - $4)) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [10082])
	goto $label$16 
	
.LABEL $label$20
	if ( ($5 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$1 = (int_64)0
	
.LOOP $label$22:
	$7 = *(($5 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$23 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$23
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$22 }
	goto $label$17 
	
.LABEL $label$18
	$1 = (int_64)0
	
.LABEL $label$17
	CALL eosio_assert([1], [9373])
	$4 = ((int_64)$1 & (int_64)72057594037927935)
	$11 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	$5 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$4 = $1
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$4 = $1
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$28 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$7 = [0]
	
.LABEL $label$24
	CALL eosio_assert($7, [9422])
	$4 = *($2 + [368])
	$8 = *(($2 + [376]))
	CALL eosio_assert(((int_64)$11 == (int_64)$8), [10012])
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387804), [10060])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427388004), [10082])
	$1 = ((int_64)$4 + (int_64)-100)
	$4 = (int_64)100
	
.LABEL $label$16
	*((($2 + [368]) + [8])) = $8
	*($2 + [368]) = $1
	$1 = ((int_64)$4 * (int_64)5)
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [10103])
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [10127])
	CALL eosio_assert([1], [9882])
	CALL eosio_assert([1], [9897])
	$1 = ((int_64)$4 / (int_64)20)
	$12 = ($3 + [28])
	$10 = *($3 + [24])
	if ( ((int_32)$10 == (int_32)*($12)) ){ goto $label$31 }
	$13 = (int_64))((int_64)0 - $1)
	$14 = (($2 + [136]) + [32])
	$15 = (($2 + [208]) | [1])
	$16 = (($2 + [136]) + [16])
	$17 = ($2 + [160])
	$18 = (($2 + [240]) + [28])
	$19 = ($2 + [176])
	$20 = ($2 + [260])
	
.LOOP $label$32:
	$8 = *($0)
	*($2 + [240]) = [8583]
	*($2 + [244]) = CALL $139([8583])
	*($2 + [80]) = *($2 + [240])
	CALL $17(($2 + [136]), ($2 + [80]))
	*((($2 + [224]) + [8])) = *($2 + [136])
	*($2 + [224]) = $8
	*($2 + [240]) = [9202]
	*($2 + [244]) = CALL $139([9202])
	*($2 + [72]) = *($2 + [240])
	CALL $17(($2 + [136]), ($2 + [72]))
	$8 = *($2 + [136])
	*($2 + [240]) = [9214]
	*($2 + [244]) = CALL $139([9214])
	*($2 + [64]) = *($2 + [240])
	CALL $17(($2 + [136]), ($2 + [64]))
	$9 = *($2 + [136])
	*(($7 = (($2 + [208]) + [8]))) = [0]
	*($2 + [208]) = (int_64)0
	$5 = CALL $139([9942])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$35 }
	*($2 + [208]) = ($5 << [1])
	$21 = $15
	if ( $5 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$22 = (($5 + [16]) & [-16])
	$21 = CALL _Znwj($22)
	*($7) = $21
	*($2 + [208]) = ($22 | [1])
	*($2 + [212]) = $5
	
.LABEL $label$34
	CALL memcpy($21, [9942], $5)
	
.LABEL $label$33
	*(($21 + $5)) = [0]
	$23 = *($10)
	*($16) = $1
	*($17) = $11
	*($14) = *($2 + [208])
	*(($14 + [8])) = *($7)
	*((($2 + [136]) + [8])) = $23
	*($7) = [0]
	*($2 + [136]) = *($0)
	*($2 + [208]) = (int_64)0
	CALL $28(($2 + [384]), CALL $30(($2 + [240]), ($2 + [224]), $8, $9, ($2 + [136])))
	$5 = *($2 + [384])
	CALL send_inline($5, (*($2 + [388]) - $5))
	$5 = *($2 + [384])
	if ( ($5 == 0) ){ goto $label$36 }
	*($2 + [388]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$36
	$5 = *($18)
	if ( ($5 == 0) ){ goto $label$37 }
	*((($2 + [240]) + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$37
	$5 = *((($2 + [240]) + [16]))
	if ( ($5 == 0) ){ goto $label$38 }
	*($20) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$38
	if ( ((*($14) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*($19))
	
.LABEL $label$39
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$40
	CALL eosio_assert([1], [10012])
	$8 = ((int_64)$13 + (int_64)$4)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [10082])
	$4 = (int_64))($4 - $1)
	$10 = ($10 + [8])
	if ( ((int_32)$10 != (int_32)*($12)) ){ goto $label$32 }
	
.LABEL $label$31
	$1 = *($0)
	*($2 + [140]) = ($2 + [368])
	*($2 + [136]) = ($2 + [352])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9528])
	CALL $31(($2 + [312]), $3, $1, ($2 + [136]))
	$1 = *($0)
	*($2 + [240]) = [8583]
	*($2 + [244]) = CALL $139([8583])
	*($2 + [56]) = *($2 + [240])
	*($2 + [232]) = *(CALL $17(($2 + [136]), ($2 + [56])))
	*($2 + [224]) = $1
	*($2 + [240]) = [9202]
	*($2 + [244]) = CALL $139([9202])
	*($2 + [48]) = *($2 + [240])
	$1 = *(CALL $17(($2 + [136]), ($2 + [48])))
	*($2 + [240]) = [9214]
	*($2 + [244]) = CALL $139([9214])
	*($2 + [40]) = *($2 + [240])
	$8 = *(CALL $17(($2 + [136]), ($2 + [40])))
	*($2 + [240]) = [9971]
	*($2 + [244]) = CALL $139([9971])
	*($2 + [32]) = *($2 + [240])
	$9 = *(CALL $17(($2 + [136]), ($2 + [32])))
	*((($2 + [208]) + [8])) = [0]
	*($2 + [208]) = (int_64)0
	$5 = CALL $139([9984])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$43 }
	*($2 + [208]) = ($5 << [1])
	$7 = (($2 + [208]) | [1])
	if ( $5 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$10 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($2 + [208]) = ($10 | [1])
	*($2 + [216]) = $7
	*($2 + [212]) = $5
	
.LABEL $label$42
	CALL memcpy($7, [9984], $5)
	
.LABEL $label$41
	*(($7 + $5)) = [0]
	*(($2 + [160])) = $11
	$5 = ($2 + [216])
	*(($2 + [176])) = *($5)
	*($5) = [0]
	*($2 + [144]) = $9
	*($2 + [152]) = $4
	*($2 + [136]) = *($0)
	*($2 + [168]) = *($2 + [208])
	*($2 + [208]) = (int_64)0
	$5 = CALL $30(($2 + [240]), ($2 + [224]), $1, $8, ($2 + [136]))
	CALL $28(($2 + [384]), $5)
	$7 = *($2 + [384])
	CALL send_inline($7, (*($2 + [388]) - $7))
	$7 = *($2 + [384])
	if ( ($7 == 0) ){ goto $label$44 }
	*($2 + [388]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$44
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$45 }
	*(($5 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$45
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$46 }
	*(($5 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$46
	if ( ((*(($2 + [168])) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*(($2 + [176])))
	
.LABEL $label$47
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($2 + [216])))
	
.LABEL $label$48
	$5 = (($2 + [368]) + [8])
	$1 = *($5)
	*((($2 + [192]) + [8])) = $1
	*((($2 + [16]) + [8])) = $1
	$1 = *($2 + [368])
	*($2 + [16]) = $1
	*($2 + [192]) = $1
	CALL $21($0, $6, ($2 + [16]))
	$1 = *($0)
	*($2 + [240]) = [8583]
	*($2 + [244]) = CALL $139([8583])
	*($2 + [8]) = *($2 + [240])
	$8 = *(CALL $17(($2 + [136]), ($2 + [8])))
	$9 = *($0)
	*($2 + [240]) = [10004]
	*($2 + [244]) = CALL $139([10004])
	*($2) = *($2 + [240])
	$23 = *(CALL $17(($2 + [136]), $2))
	$13 = *(($3 + [56]))
	$6 = *($3 + [16])
	$24 = *($3 + [8])
	*((($2 + [136]) + [32])) = *($5)
	*(($2 + [184])) = $11
	*($2 + [136]) = $24
	*($2 + [144]) = $6
	*($2 + [160]) = *($2 + [368])
	*($2 + [176]) = $4
	*($2 + [240]) = $9
	*($2 + [248]) = $23
	*($2 + [152]) = $13
	*(($5 = CALL _Znwj([16]))) = $1
	*($5 + [8]) = $8
	*(($2 + [276])) = [0]
	$7 = ($5 + [16])
	*(($2 + [264])) = $7
	*(($2 + [260])) = $7
	*($2 + [256]) = $5
	*($2 + [268 align=4]) = (int_64)0
	CALL $26(($2 + [268]), [56])
	$5 = *((($2 + [240]) + [32]))
	$7 = *($2 + [268])
	*($2 + [228]) = $7
	*($2 + [224]) = $7
	*($2 + [232]) = $5
	*($2 + [208]) = ($2 + [224])
	*($2 + [384]) = ($2 + [136])
	CALL $32(($2 + [384]), ($2 + [208]))
	CALL $28(($2 + [224]), ($2 + [240]))
	$5 = *($2 + [224])
	CALL send_inline($5, (*($2 + [228]) - $5))
	$5 = *($2 + [224])
	if ( ($5 == 0) ){ goto $label$49 }
	*($2 + [228]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$49
	$5 = *($2 + [268])
	if ( ($5 == 0) ){ goto $label$50 }
	*(($2 + [272])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$50
	$5 = *($2 + [256])
	if ( ($5 == 0) ){ goto $label$51 }
	*(($2 + [260])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$51
	$10 = *($2 + [336])
	if ( ($10 == 0) ){ goto $label$52 }
	$14 = ($2 + [340])
	$5 = *($14)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$54 }
	
.LOOP $label$55:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$56 }
	CALL $7($7)
	CALL _ZdlPv($7)
	
.LABEL $label$56
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$55 }
	$5 = *(($2 + [336]))
	goto $label$53 
	
.LABEL $label$54
	$5 = $10
	
.LABEL $label$53
	*($14) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$52
	$global$0 = ($2 + [400])
	return (unreachable)
	
.LABEL $label$30
	CALL $132(($2 + [208]))
	
.LABEL $label$29
	CALL $132(($2 + [208]))
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$6 = *($3 + [12])
	$7 = *($1)
	$9 = *($3)
	$8 = ($1 + [212])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$1 }
	CALL $121($8, *($9), *($9 + [4]))
	
.LABEL $label$1
	$9 = *($3 + [4])
	$10 = ($1 + [224])
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	CALL $121($10, *($9), *($9 + [4]))
	
.LABEL $label$2
	*($1 + [258]) = [0]
	*($1 + [112]) = *($6 + [31])
	*($1 + [56]) = *(*(*($3 + [8]) + [4]) + [16])
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$6 = ($1 + [8])
	*($5 + [28]) = $6
	*($5 + [24]) = $1
	$11 = ($1 + [16])
	*($5 + [32]) = $11
	$12 = ($1 + [24])
	*($5 + [36]) = $12
	$13 = ($1 + [40])
	*($5 + [40]) = $13
	$14 = ($1 + [48])
	*($5 + [44]) = $14
	$15 = ($1 + [56])
	*($5 + [48]) = $15
	$16 = ($1 + [64])
	*($5 + [52]) = $16
	$17 = ($1 + [80])
	*($5 + [56]) = $17
	$18 = ($1 + [96])
	*($5 + [60]) = $18
	$19 = ($1 + [112])
	*($5 + [64]) = $19
	$20 = ($1 + [113])
	*($5 + [68]) = $20
	$21 = ($1 + [114])
	*($5 + [72]) = $21
	$22 = ($1 + [120])
	*($5 + [76]) = $22
	$23 = ($1 + [136])
	*($5 + [80]) = $23
	$24 = ($1 + [152])
	*($5 + [84]) = $24
	$25 = ($1 + [168])
	*($5 + [88]) = $25
	$26 = ($1 + [184])
	*($5 + [92]) = $26
	$27 = ($1 + [188])
	*($5 + [96]) = $27
	*($5 + [104]) = $8
	$28 = ($1 + [200])
	*($5 + [100]) = $28
	*($5 + [108]) = $10
	$29 = ($1 + [240])
	*($5 + [112]) = $29
	$30 = ($1 + [248])
	*($5 + [116]) = $30
	$31 = ($1 + [256])
	*($5 + [120]) = $31
	$32 = ($1 + [257])
	*($5 + [124]) = $32
	$33 = ($1 + [258])
	*($5 + [128]) = $33
	$34 = ($1 + [259])
	*($5 + [132]) = $34
	$35 = ($1 + [260])
	*($5 + [136]) = $35
	$36 = ($1 + [261])
	*($5 + [140]) = $36
	CALL $102(($5 + [24]), $5)
	$9 = *($5 + [16])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$3 = CALL $142($9)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $9)
	*($5 + [16]) = $5
	*($5 + [28]) = $6
	*($5 + [32]) = $11
	*($5 + [36]) = $12
	*($5 + [40]) = $13
	*($5 + [44]) = $14
	*($5 + [48]) = $15
	*($5 + [52]) = $16
	*($5 + [56]) = $17
	*($5 + [60]) = $18
	*($5 + [64]) = $19
	*($5 + [68]) = $20
	*($5 + [72]) = $21
	*($5 + [76]) = $22
	*($5 + [80]) = $23
	*($5 + [84]) = $24
	*($5 + [88]) = $25
	*($5 + [92]) = $26
	*($5 + [96]) = $27
	*($5 + [24]) = $1
	*($5 + [104]) = $8
	*($5 + [100]) = $28
	*($5 + [108]) = $10
	*($5 + [112]) = $29
	*($5 + [116]) = $30
	*($5 + [120]) = $31
	*($5 + [124]) = $32
	*($5 + [128]) = $33
	*($5 + [132]) = $34
	*($5 + [136]) = $35
	*($5 + [140]) = $36
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $145($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [144])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9719])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9719])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $137($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $134($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $133($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $133($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $137($0)
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_64 $38
	int_64 $39
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$6 = *($3)
	$7 = *($1)
	$8 = *(*($3 + [4]))
	if ( (int_64)($8 == 0) ){ goto $label$1 }
	if ( ((int_64)$8 == (int_64)*($6)) ){ goto $label$1 }
	if ( (CALL is_account($8) == 0) ){ goto $label$1 }
	$9 = *(($3 + [4]))
	$10 = ($1 + [28])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)*(($1 + [32]))) ){ goto $label$2 }
	*($10) = ($11 + [8])
	*($11) = *($9)
	goto $label$1 
	
.LABEL $label$2
	CALL $119(($1 + [24]), $9)
	
.LABEL $label$1
	$9 = *(*($3 + [8]) + [4])
	$11 = *($9 + [112])
	if ( ((int_32)$11 != (int_32)*($6 + [33])) ){ goto $label$4 }
	*($1 + [112]) = *($6 + [28])
	$11 = *($3 + [12])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($1 + [160]))), [10470])
	$8 = ((int_64)*($1 + [152]) + (int_64)*($11))
	*($1 + [152]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [152]) < (int_64)4611686018427387904), [10532])
	$11 = *($3 + [12])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$8 = ((int_64)*($1 + [64]) + (int_64)*($11))
	*($1 + [64]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	CALL $122(($1 + [212]), [0], [0])
	CALL $122(($1 + [224]), [0], [0])
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$11 != (int_32)*($6 + [32])) ){ goto $label$9 }
	$8 = *($9 + [8])
	$38 = *(*($3 + [16]))
	$11 = *($3 + [12])
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*(($1 + [72]))), [10470])
	$39 = ((int_64)*($1 + [64]) + (int_64)*($11))
	*($1 + [64]) = $39
	CALL eosio_assert(((int_64)$39 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [10532])
	$11 = *($3 + [12])
	$39 = *($11 + [8])
	if ( ((int_64)$38 != (int_64)$8) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$39 == (int_64)*(($1 + [160]))), [10470])
	$8 = ((int_64)*($1 + [152]) + (int_64)*($11))
	*($1 + [152]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [152]) < (int_64)4611686018427387904), [10532])
	*($1 + [257]) = [1]
	goto $label$3 
	
.LABEL $label$9
	if ( ((int_32)$11 != (int_32)*($6 + [31])) ){ goto $label$3 }
	$38 = (int_64)0
	*($1 + [56]) = (int_64)0
	$11 = CALL $139([8192])
	if ( ($11 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [9275])
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$39 == (int_64)*(($1 + [176]))), [10470])
	$8 = ((int_64)*($1 + [168]) + (int_64)*($11))
	*($1 + [168]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($1 + [168]) < (int_64)4611686018427387904), [10532])
	*($1 + [257]) = [1]
	goto $label$3 
	
.LABEL $label$7
	if ( ($11 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$38 = (int_64)0
	
.LOOP $label$10:
	$9 = *(($11 + [8191]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$11
	$38 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$10 }
	
.LABEL $label$5
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$38 & (int_64)72057594037927935)
	$39 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)4)
	$11 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$38 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$8 = $38
	$9 = [1]
	$10 = $11
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$8 = $38
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$11 < (int_32)[6])
	$10 = ($11 + [1])
	$11 = $10
	if ( $9 ){ goto $label$16 }
	$9 = [1]
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$9 = [0]
	
.LABEL $label$12
	CALL eosio_assert($9, [9422])
	*(($1 + [88])) = $39
	$38 = (int_64)0
	*($1 + [80]) = (int_64)0
	$11 = CALL $139([8192])
	if ( ($11 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9275])
	goto $label$18 
	
.LABEL $label$19
	if ( ($11 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$38 = (int_64)0
	
.LOOP $label$20:
	$9 = *(($11 + [8191]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$21
	$38 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$20 }
	
.LABEL $label$17
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$38 & (int_64)72057594037927935)
	$39 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)4)
	$11 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$38 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$8 = $38
	$9 = [1]
	$10 = $11
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$8 = $38
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$11 < (int_32)[6])
	$10 = ($11 + [1])
	$11 = $10
	if ( $9 ){ goto $label$26 }
	$9 = [1]
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$9 = [0]
	
.LABEL $label$22
	CALL eosio_assert($9, [9422])
	*(($1 + [104])) = $39
	$38 = (int_64)0
	*($1 + [96]) = (int_64)0
	$11 = CALL $139([8192])
	if ( ($11 <= [8]) ){ goto $label$29 }
	CALL eosio_assert([0], [9275])
	goto $label$28 
	
.LABEL $label$29
	if ( ($11 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$38 = (int_64)0
	
.LOOP $label$30:
	$9 = *(($11 + [8191]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$31 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$31
	$38 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$30 }
	
.LABEL $label$27
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$38 & (int_64)72057594037927935)
	$39 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)4)
	$11 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$38 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$8 = $38
	$9 = [1]
	$10 = $11
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$8 = $38
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$11 < (int_32)[6])
	$10 = ($11 + [1])
	$11 = $10
	if ( $9 ){ goto $label$36 }
	$9 = [1]
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$9 = [0]
	
.LABEL $label$32
	CALL eosio_assert($9, [9422])
	*(($1 + [72])) = $39
	$38 = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [113 align=1]) = [0]
	*($1 + [112]) = *(($6 + [32]))
	$11 = CALL $139([8192])
	if ( ($11 <= [8]) ){ goto $label$39 }
	CALL eosio_assert([0], [9275])
	goto $label$38 
	
.LABEL $label$39
	if ( ($11 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	$38 = (int_64)0
	
.LOOP $label$40:
	$9 = *(($11 + [8191]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$41 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$41
	$38 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$40 }
	
.LABEL $label$37
	$12 = ($1 + [64])
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$38 & (int_64)72057594037927935)
	$39 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)4)
	$11 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$38 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$45 }
	$8 = $38
	$9 = [1]
	$10 = $11
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$8 = $38
	
.LOOP $label$46:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$43 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$11 < (int_32)[6])
	$10 = ($11 + [1])
	$11 = $10
	if ( $9 ){ goto $label$46 }
	$9 = [1]
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	$9 = [0]
	
.LABEL $label$42
	CALL eosio_assert($9, [9422])
	*(($1 + [128])) = $39
	$38 = (int_64)0
	*($1 + [120]) = (int_64)0
	$11 = CALL $139([8192])
	if ( ($11 <= [8]) ){ goto $label$49 }
	CALL eosio_assert([0], [9275])
	goto $label$48 
	
.LABEL $label$49
	if ( ($11 == 0) ){ goto $label$47 }
	
.LABEL $label$48
	$38 = (int_64)0
	
.LOOP $label$50:
	$9 = *(($11 + [8191]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$51 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$51
	$38 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$50 }
	
.LABEL $label$47
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$38 & (int_64)72057594037927935)
	$39 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)4)
	$11 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$38 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$55 }
	$8 = $38
	$9 = [1]
	$10 = $11
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$55
	$8 = $38
	
.LOOP $label$56:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$53 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$11 < (int_32)[6])
	$10 = ($11 + [1])
	$11 = $10
	if ( $9 ){ goto $label$56 }
	$9 = [1]
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$9 = [0]
	
.LABEL $label$52
	CALL eosio_assert($9, [9422])
	*(($1 + [144])) = $39
	$38 = (int_64)0
	*($1 + [136]) = (int_64)0
	$11 = CALL $139([8192])
	if ( ($11 <= [8]) ){ goto $label$59 }
	CALL eosio_assert([0], [9275])
	goto $label$58 
	
.LABEL $label$59
	if ( ($11 == 0) ){ goto $label$57 }
	
.LABEL $label$58
	$38 = (int_64)0
	
.LOOP $label$60:
	$9 = *(($11 + [8191]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$61 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$61
	$38 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$60 }
	
.LABEL $label$57
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$38 & (int_64)72057594037927935)
	$39 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)4)
	$11 = [0]
	
.LOOP $label$64:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$63 }
	$38 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$65 }
	$8 = $38
	$9 = [1]
	$10 = $11
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$64 }
	goto $label$62 
	
.LABEL $label$65
	$8 = $38
	
.LOOP $label$66:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$63 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$11 < (int_32)[6])
	$10 = ($11 + [1])
	$11 = $10
	if ( $9 ){ goto $label$66 }
	$9 = [1]
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$64 }
	goto $label$62 
	
.LABEL $label$63
	$9 = [0]
	
.LABEL $label$62
	CALL eosio_assert($9, [9422])
	*(($1 + [160])) = $39
	$38 = (int_64)0
	*($1 + [152]) = (int_64)0
	$11 = CALL $139([8192])
	if ( ($11 <= [8]) ){ goto $label$69 }
	CALL eosio_assert([0], [9275])
	goto $label$68 
	
.LABEL $label$69
	if ( ($11 == 0) ){ goto $label$67 }
	
.LABEL $label$68
	$38 = (int_64)0
	
.LOOP $label$70:
	$9 = *(($11 + [8191]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$71 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$71
	$38 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$11 = ($11 + [-1])
	if ( $11 ){ goto $label$70 }
	
.LABEL $label$67
	$13 = ($1 + [152])
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$38 & (int_64)72057594037927935)
	$39 = ((int_64)((int_64)$38 << (int_64)8) | (int_64)4)
	$11 = [0]
	
.LOOP $label$74:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$73 }
	$38 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$75 }
	$8 = $38
	$9 = [1]
	$10 = $11
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$74 }
	goto $label$72 
	
.LABEL $label$75
	$8 = $38
	
.LOOP $label$76:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$73 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$11 < (int_32)[6])
	$10 = ($11 + [1])
	$11 = $10
	if ( $9 ){ goto $label$76 }
	$9 = [1]
	$11 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$74 }
	goto $label$72 
	
.LABEL $label$73
	$9 = [0]
	
.LABEL $label$72
	CALL eosio_assert($9, [9422])
	*(($9 = ($1 + [176]))) = $39
	*($1 + [168]) = (int_64)0
	*($1 + [184]) = [0]
	CALL $109(($1 + [188]), [0], [0])
	CALL $109(($1 + [200]), [0], [0])
	CALL $122(($1 + [212]), [0], [0])
	CALL $122(($1 + [224]), [0], [0])
	*($1 + [257 align=1]) = [0]
	*($1 + [261]) = [0]
	*(($1 + [112])) = *(($6 + [32]))
	$8 = *(*(*(($3 + [8])) + [4]) + [8])
	$38 = *(*($3 + [16]))
	$11 = *($3 + [12])
	*(($12 + [8])) = *(($11 + [8]))
	*($12) = *($11)
	$11 = *($3 + [12])
	if ( ((int_64)$38 != (int_64)$8) ){ goto $label$77 }
	*($13) = *($11)
	*(($13 + [8])) = *(($11 + [8]))
	goto $label$3 
	
.LABEL $label$77
	*($1 + [168]) = *($11)
	*($9) = *(($11 + [8]))
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$3 = ($1 + [8])
	*($5 + [28]) = $3
	*($5 + [24]) = $1
	$6 = ($1 + [16])
	*($5 + [32]) = $6
	$10 = ($1 + [24])
	*($5 + [36]) = $10
	$12 = ($1 + [40])
	*($5 + [40]) = $12
	$13 = ($1 + [48])
	*($5 + [44]) = $13
	$14 = ($1 + [56])
	*($5 + [48]) = $14
	$15 = ($1 + [64])
	*($5 + [52]) = $15
	$16 = ($1 + [80])
	*($5 + [56]) = $16
	$17 = ($1 + [96])
	*($5 + [60]) = $17
	$18 = ($1 + [112])
	*($5 + [64]) = $18
	$19 = ($1 + [113])
	*($5 + [68]) = $19
	$20 = ($1 + [114])
	*($5 + [72]) = $20
	$21 = ($1 + [120])
	*($5 + [76]) = $21
	$22 = ($1 + [136])
	*($5 + [80]) = $22
	$23 = ($1 + [152])
	*($5 + [84]) = $23
	$24 = ($1 + [168])
	*($5 + [88]) = $24
	$25 = ($1 + [184])
	*($5 + [92]) = $25
	$26 = ($1 + [188])
	*($5 + [96]) = $26
	$27 = ($1 + [212])
	*($5 + [104]) = $27
	$28 = ($1 + [200])
	*($5 + [100]) = $28
	$29 = ($1 + [224])
	*($5 + [108]) = $29
	$30 = ($1 + [240])
	*($5 + [112]) = $30
	$31 = ($1 + [248])
	*($5 + [116]) = $31
	$32 = ($1 + [256])
	*($5 + [120]) = $32
	$33 = ($1 + [257])
	*($5 + [124]) = $33
	$34 = ($1 + [258])
	*($5 + [128]) = $34
	$35 = ($1 + [259])
	*($5 + [132]) = $35
	$36 = ($1 + [260])
	*($5 + [136]) = $36
	$37 = ($1 + [261])
	*($5 + [140]) = $37
	CALL $102(($5 + [24]), $5)
	$9 = *($5 + [16])
	if ( ($9 <= [513]) ){ goto $label$79 }
	$11 = CALL $142($9)
	goto $label$78 
	
.LABEL $label$79
	$11 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$78
	*($5 + [4]) = $11
	*($5) = $11
	*($5 + [8]) = ($11 + $9)
	*($5 + [16]) = $5
	*($5 + [28]) = $3
	*($5 + [32]) = $6
	*($5 + [36]) = $10
	*($5 + [40]) = $12
	*($5 + [44]) = $13
	*($5 + [48]) = $14
	*($5 + [52]) = $15
	*($5 + [56]) = $16
	*($5 + [60]) = $17
	*($5 + [64]) = $18
	*($5 + [68]) = $19
	*($5 + [72]) = $20
	*($5 + [76]) = $21
	*($5 + [80]) = $22
	*($5 + [84]) = $23
	*($5 + [88]) = $24
	*($5 + [92]) = $25
	*($5 + [96]) = $26
	*($5 + [24]) = $1
	*($5 + [104]) = $27
	*($5 + [100]) = $28
	*($5 + [108]) = $29
	*($5 + [112]) = $30
	*($5 + [116]) = $31
	*($5 + [120]) = $32
	*($5 + [124]) = $33
	*($5 + [128]) = $34
	*($5 + [132]) = $35
	*($5 + [136]) = $36
	*($5 + [140]) = $37
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $11, $9)
	if ( ($9 <= [513]) ){ goto $label$82 }
	CALL $145($11)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$80 }
	
.LABEL $label$81
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$80
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
}

void .FUNC $68 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [160]) = $3
	*($4 + [168]) = $2
	CALL prints([9083])
	CALL require_auth($2)
	$5 = CALL $139([8192])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($5 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)0
	
.LABEL $label$1
	*($4 + [144]) = (int_64)10000
	*($4 + [152]) = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9373])
	$2 = ((int_64)$2 & (int_64)72057594037927935)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [9422])
	*(($4 + [136])) = [0]
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	$2 = *($0)
	*($4 + [104]) = $2
	*($4 + [112]) = $2
	$5 = [0]
	$6 = CALL db_find_i64($2, $2, (int_64)7035938307668180992, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	$5 = CALL $2(($4 + [104]), $6)
	CALL eosio_assert(((int_32)*($5 + [264]) == (int_32)($4 + [104])), [10152])
	
.LABEL $label$12
	*($4 + [100]) = $5
	*($4 + [96]) = ($4 + [104])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8371])
	$7 = [1]
	$6 = [1]
	$8 = *($5 + [112])
	if ( ((int_32)$8 == (int_32)*($0 + [31])) ){ goto $label$13 }
	$6 = [1]
	if ( ((int_32)$8 == (int_32)*($0 + [32])) ){ goto $label$13 }
	$6 = ((int_32)$8 == (int_32)*($0 + [33]))
	
.LABEL $label$13
	CALL eosio_assert($6, [9096])
	$2 = *($4 + [168])
	if ( ((int_64)$2 == (int_64)*($5 + [8])) ){ goto $label$14 }
	$7 = ((int_64)$2 == (int_64)*($5 + [16]))
	
.LABEL $label$14
	CALL eosio_assert($7, [8631])
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	$3 = *($0)
	*($4 + [56]) = $3
	$7 = (($4 + [144]) + [8])
	$1 = *($7)
	*($4 + [64]) = $2
	$6 = [0]
	$8 = CALL db_find_i64($3, $2, (int_64)-3665743569108320256, (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_32)$8) < (int_32)[0]) ){ goto $label$15 }
	$6 = CALL $3(($4 + [56]), $8)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($4 + [56])), [10152])
	$5 = *($4 + [100])
	$2 = *($4 + [168])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8437])
	CALL eosio_assert(((int_64)*($6) >= (int_64)*($4 + [144])), [8337])
	$3 = *($7)
	*((($4 + [40]) + [8])) = $3
	*(($4 + [8])) = $3
	$3 = *($4 + [144])
	*($4) = $3
	*($4 + [40]) = $3
	CALL $8($0, $2, $4)
	$2 = *($0)
	*($4 + [16]) = $0
	*($4 + [20]) = ($4 + [160])
	*($4 + [24]) = ($4 + [96])
	*($4 + [28]) = ($4 + [144])
	*($4 + [32]) = ($4 + [168])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9528])
	CALL $69(($4 + [104]), $5, $2, ($4 + [16]))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$16 }
	$0 = ($4 + [84])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$20 }
	CALL _ZdlPv($6)
	
.LABEL $label$20
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($4 + [80]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $7
	
.LABEL $label$17
	*($0) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$7 = *($4 + [128])
	if ( ($7 == 0) ){ goto $label$21 }
	$0 = ($4 + [132])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$25 }
	CALL $7($6)
	CALL _ZdlPv($6)
	
.LABEL $label$25
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($4 + [128]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $7
	
.LABEL $label$22
	*($0) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$global$0 = ($4 + [176])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$2 = *($0)
	*($1 + [96]) = *($2)
	*(($1 + [104])) = *(($2 + [8]))
	$0 = *($0 + [4])
	*($1 + [80]) = *($0)
	*(($1 + [88])) = *(($0 + [8]))
	*($1 + [113 align=1]) = [0]
	$0 = CALL $139([8192])
	if ( ($0 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$2 = *(($0 + [8191]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [9373])
	$4 = ((int_64)$3 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $3
	$2 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $2 ){ goto $label$11 }
	$2 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$2 = [0]
	
.LABEL $label$7
	CALL eosio_assert($2, [9422])
	*(($1 + [128])) = $5
	$3 = (int_64)0
	*($1 + [120]) = (int_64)0
	$0 = CALL $139([8192])
	if ( ($0 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9275])
	goto $label$13 
	
.LABEL $label$14
	if ( ($0 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$3 = (int_64)0
	
.LOOP $label$15:
	$2 = *(($0 + [8191]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$16
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$15 }
	
.LABEL $label$12
	CALL eosio_assert([1], [9373])
	$4 = ((int_64)$3 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$3 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$4 = $3
	$2 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$4 = $3
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $2 ){ goto $label$21 }
	$2 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$2 = [0]
	
.LABEL $label$17
	CALL eosio_assert($2, [9422])
	*(($1 + [144])) = $5
	$3 = (int_64)0
	*($1 + [136]) = (int_64)0
	$0 = CALL $139([8192])
	if ( ($0 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [9275])
	goto $label$23 
	
.LABEL $label$24
	if ( ($0 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$3 = (int_64)0
	
.LOOP $label$25:
	$2 = *(($0 + [8191]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$26
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$25 }
	
.LABEL $label$22
	CALL eosio_assert([1], [9373])
	$4 = ((int_64)$3 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$3 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$4 = $3
	$2 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$4 = $3
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $2 ){ goto $label$31 }
	$2 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$2 = [0]
	
.LABEL $label$27
	CALL eosio_assert($2, [9422])
	*(($1 + [160])) = $5
	$3 = (int_64)0
	*($1 + [152]) = (int_64)0
	$0 = CALL $139([8192])
	if ( ($0 <= [8]) ){ goto $label$34 }
	CALL eosio_assert([0], [9275])
	goto $label$33 
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$32 }
	
.LABEL $label$33
	$3 = (int_64)0
	
.LOOP $label$35:
	$2 = *(($0 + [8191]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$36 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$36
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$35 }
	
.LABEL $label$32
	CALL eosio_assert([1], [9373])
	$4 = ((int_64)$3 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$3 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$4 = $3
	$2 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$40
	$4 = $3
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $2 ){ goto $label$41 }
	$2 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$2 = [0]
	
.LABEL $label$37
	CALL eosio_assert($2, [9422])
	*(($1 + [176])) = $5
	$3 = (int_64)0
	*($1 + [168]) = (int_64)0
	*($1 + [184]) = [0]
	CALL $109(($1 + [188]), [0], [0])
	CALL $109(($1 + [200]), [0], [0])
	*($1 + [257 align=1]) = [0]
	CALL $110(($1 + [24]), [0], [0])
	$0 = CALL $139([8192])
	if ( ($0 <= [8]) ){ goto $label$44 }
	CALL eosio_assert([0], [9275])
	goto $label$43 
	
.LABEL $label$44
	if ( ($0 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$3 = (int_64)0
	
.LOOP $label$45:
	$2 = *(($0 + [8191]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$46 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$46
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$45 }
	
.LABEL $label$42
	CALL eosio_assert([1], [9373])
	$4 = ((int_64)$3 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$3 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$4 = $3
	$2 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$4 = $3
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $2 ){ goto $label$51 }
	$2 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$2 = [0]
	
.LABEL $label$47
	CALL eosio_assert($2, [9422])
	*(($1 + [72])) = $5
	*($1 + [64]) = (int_64)0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [10584])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [10629])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10679])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL $7($3)
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $7($5)
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [268]))
}

void .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	*($1 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)7035938307668180992, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $2($1, $0)
	
.LOOP $label$2:
	CALL eosio_assert([1], [10550])
	CALL eosio_assert([1], [10235])
	$0 = [0]
	$4 = CALL db_next_i64(*($3 + [268]), ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $2($1, $4)
	
.LABEL $label$3
	CALL $65($1, $3)
	$3 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ($1 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $7($3)
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($1 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($1 + [48])
}

void .FUNC $67 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	CALL prints([9071])
}

void .FUNC $66 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	CALL prints([9056])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [56]) = *(*(*($3) + [4]) + [16])
	*($1 + [112]) = *((*(($3 + [4])) + [31]))
	$5 = *($1)
	CALL eosio_assert([1], [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [40])
	*($3 + [40]) = $9
	$10 = ($1 + [48])
	*($3 + [44]) = $10
	$11 = ($1 + [56])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [80])
	*($3 + [56]) = $13
	$14 = ($1 + [96])
	*($3 + [60]) = $14
	$15 = ($1 + [112])
	*($3 + [64]) = $15
	$16 = ($1 + [113])
	*($3 + [68]) = $16
	$17 = ($1 + [114])
	*($3 + [72]) = $17
	$18 = ($1 + [120])
	*($3 + [76]) = $18
	$19 = ($1 + [136])
	*($3 + [80]) = $19
	$20 = ($1 + [152])
	*($3 + [84]) = $20
	$21 = ($1 + [168])
	*($3 + [88]) = $21
	$22 = ($1 + [184])
	*($3 + [92]) = $22
	$23 = ($1 + [188])
	*($3 + [96]) = $23
	$24 = ($1 + [212])
	*($3 + [104]) = $24
	$25 = ($1 + [200])
	*($3 + [100]) = $25
	$26 = ($1 + [224])
	*($3 + [108]) = $26
	$27 = ($1 + [240])
	*($3 + [112]) = $27
	$28 = ($1 + [248])
	*($3 + [116]) = $28
	$29 = ($1 + [256])
	*($3 + [120]) = $29
	$30 = ($1 + [257])
	*($3 + [124]) = $30
	$31 = ($1 + [258])
	*($3 + [128]) = $31
	$32 = ($1 + [259])
	*($3 + [132]) = $32
	$33 = ($1 + [260])
	*($3 + [136]) = $33
	$34 = ($1 + [261])
	*($3 + [140]) = $34
	CALL $102(($3 + [24]), $3)
	$35 = *($3 + [16])
	if ( ($35 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($35)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($35 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $35)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $21
	*($3 + [92]) = $22
	*($3 + [96]) = $23
	*($3 + [24]) = $1
	*($3 + [104]) = $24
	*($3 + [100]) = $25
	*($3 + [108]) = $26
	*($3 + [112]) = $27
	*($3 + [116]) = $28
	*($3 + [120]) = $29
	*($3 + [124]) = $30
	*($3 + [128]) = $31
	*($3 + [132]) = $32
	*($3 + [136]) = $33
	*($3 + [140]) = $34
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $35)
	if ( ((uint_32)$35 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	*($1 + [56]) = *(*(*($3) + [4]) + [8])
	*($1 + [112]) = *((*(($3 + [4])) + [31]))
	$5 = *($1)
	CALL eosio_assert([1], [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [40])
	*($3 + [40]) = $9
	$10 = ($1 + [48])
	*($3 + [44]) = $10
	$11 = ($1 + [56])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [80])
	*($3 + [56]) = $13
	$14 = ($1 + [96])
	*($3 + [60]) = $14
	$15 = ($1 + [112])
	*($3 + [64]) = $15
	$16 = ($1 + [113])
	*($3 + [68]) = $16
	$17 = ($1 + [114])
	*($3 + [72]) = $17
	$18 = ($1 + [120])
	*($3 + [76]) = $18
	$19 = ($1 + [136])
	*($3 + [80]) = $19
	$20 = ($1 + [152])
	*($3 + [84]) = $20
	$21 = ($1 + [168])
	*($3 + [88]) = $21
	$22 = ($1 + [184])
	*($3 + [92]) = $22
	$23 = ($1 + [188])
	*($3 + [96]) = $23
	$24 = ($1 + [212])
	*($3 + [104]) = $24
	$25 = ($1 + [200])
	*($3 + [100]) = $25
	$26 = ($1 + [224])
	*($3 + [108]) = $26
	$27 = ($1 + [240])
	*($3 + [112]) = $27
	$28 = ($1 + [248])
	*($3 + [116]) = $28
	$29 = ($1 + [256])
	*($3 + [120]) = $29
	$30 = ($1 + [257])
	*($3 + [124]) = $30
	$31 = ($1 + [258])
	*($3 + [128]) = $31
	$32 = ($1 + [259])
	*($3 + [132]) = $32
	$33 = ($1 + [260])
	*($3 + [136]) = $33
	$34 = ($1 + [261])
	*($3 + [140]) = $34
	CALL $102(($3 + [24]), $3)
	$35 = *($3 + [16])
	if ( ($35 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($35)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($35 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $35)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $21
	*($3 + [92]) = $22
	*($3 + [96]) = $23
	*($3 + [24]) = $1
	*($3 + [104]) = $24
	*($3 + [100]) = $25
	*($3 + [108]) = $26
	*($3 + [112]) = $27
	*($3 + [116]) = $28
	*($3 + [120]) = $29
	*($3 + [124]) = $30
	*($3 + [128]) = $31
	*($3 + [132]) = $32
	*($3 + [136]) = $33
	*($3 + [140]) = $34
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $35)
	if ( ((uint_32)$35 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $137($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [80])
	$global$0 = $5
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$1 }
	*((($5 + [8]) + [32])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$6 = *($3 + [8])
	*($5 + [16]) = $1
	*($5 + [8]) = $2
	$7 = CALL db_find_i64($2, $1, (int_64)-3665743569108320256, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $3(($5 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($5 + [8])), [10152])
	$1 = *($0)
	CALL eosio_assert([1], [9528])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($5 + [8])), [9563])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)CALL $fimport$5()), [9609])
	$2 = *($7 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$2), [10470])
	$6 = ((int_64)*($7) + (int_64)*($3))
	*($7) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [10513])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [10532])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$2) == (int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8)), [9660])
	CALL eosio_assert([1], [9719])
	CALL memcpy(($5 + [48]), $7, [8])
	*($5 + [72]) = *($7 + [8])
	CALL eosio_assert([1], [9719])
	CALL memcpy((($5 + [48]) | [8]), ($5 + [72]), [8])
	CALL db_update_i64(*($7 + [20]), $1, ($5 + [48]), [16])
	$7 = (($5 + [8]) + [16])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$3 }
	*($7) = ((int_64)$2 + (int_64)1)
	$3 = *($5 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$1 = *($0)
	CALL eosio_assert(((int_64)CALL $fimport$5() == (int_64)$2), [10265])
	*(($7 = CALL _Znwj([32])) + [16]) = ($5 + [8])
	*($7 + [8]) = *(($3 + [8]))
	*($7) = *($3)
	CALL eosio_assert([1], [9719])
	CALL memcpy(($5 + [48]), $7, [8])
	*($5 + [72]) = *($7 + [8])
	CALL eosio_assert([1], [9719])
	CALL memcpy((($5 + [48]) | [8]), ($5 + [72]), [8])
	$2 = (uint_64)*($7 + [8]) >> (uint_64)(int_64)8
	$3 = CALL db_store_i64(*((($5 + [8]) + [8])), (int_64)-3665743569108320256, $1, $2), ($5 + [48]), [16]
	*($7 + [20]) = $3)
	$0 = (($5 + [8]) + [16])
	if ( (uint_64)($2 <= *($0)) ){ goto $label$5 }
	*($0) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$5
	*($5 + [72]) = $7
	$2 = (uint_64)*(($7 + [8])) >> (uint_64)(int_64)8
	*($5 + [48]) = $2)
	*($5 + [68]) = $3
	$8 = ($5 + [36])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*(($5 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $2
	*($0 + [16]) = $3
	*($5 + [72]) = [0]
	*($0) = $7
	*($8) = ($0 + [24])
	$7 = *($5 + [72])
	*($5 + [72]) = [0]
	if ( $7 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $63(($5 + [32]), ($5 + [72]), ($5 + [48]), ($5 + [68]))
	$7 = *($5 + [72])
	*($5 + [72]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$3 = *($5 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($5 + [36])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$10 }
	$7 = *(($5 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$7 = $3
	
.LABEL $label$8
	*($8) = $3
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $133(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $133(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $133($2, ($1 + [16]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $133(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_64 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $104(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9719])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9719])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9719])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [52])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [56])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [60])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [64])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [68])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9719])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$6 = *($0 + [72])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($6 + [4]) - *($6)) / (int_32)[12]))
	$8 = *($1)
	$3 = *($8 + [4])
	$4 = ($8 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$9 = ((int_64)$7) != (int_64)0
	*($2 + [8]) = (($9) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*(($8 + [8])) - $3) > (int_32)[0]), [9719])
	CALL memcpy(*($4), ($2 + [8]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $9 ){ goto $label$1 }
	$3 = *(($6 + [4]))
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $27($8, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$10 = *($0 + [76])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($10 + [4]) - *($10)) / (int_32)[12]))
	$6 = *($1)
	$3 = *($6 + [4])
	$8 = ($6 + [8])
	$4 = ($6 + [4])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$9 = ((int_64)$7) != (int_64)0
	*($2 + [8]) = (($9) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($8) - $3) > (int_32)[0]), [9719])
	CALL memcpy(*($4), ($2 + [8]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $9 ){ goto $label$4 }
	$3 = *(($10 + [4]))
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $27($6, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$5
	CALL $105(*($1), *($0 + [80]))
	CALL $105(*($1), *($0 + [84]))
	$3 = *($0 + [88])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [92])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [96])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9719])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [100]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [104]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [108]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [112]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [116]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$1 = (*($2) + [24])
	*(($2 = *($1))) = $1
	$3 = *($3)
	$3 = *($0 + [12])
	$4 = *($3 + [4])
	$5 = ($4 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$1 = (($5 & [-8]) + $1)
	
.LABEL $label$2
	$1 = ($1 + [140])
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [72])
	$5 = *($3 + [4])
	$6 = (CASTING uint_64)(uint_32 ((int_32)($5 - $3) / (int_32)[12]))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = *($3)
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	*($2) = $1
	$4 = *($3)
	$4 = ( *(($3 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$7
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = *($3)
	$3 = *($0 + [76])
	$5 = *($3 + [4])
	$6 = (CASTING uint_64)(uint_32 ((int_32)($5 - $3) / (int_32)[12]))
	
.LOOP $label$8:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$8 }
	*($2) = $1
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = *($3)
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$11:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$11 }
	*($2) = $1
	$4 = *($3)
	$4 = ( *(($3 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$12 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$12
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = *($3)
	$3 = *($0 + [80])
	$4 = *($3 + [4])
	$5 = ($4 - $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$13:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$13 }
	$1 = ( $1 ? ($5 + $1) : ((int_32)$3 == (int_32)$4) )
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [84])
	$4 = *($3 + [4])
	$5 = ($4 - $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$14:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$14 }
	*($2) = (( $1 ? ($5 + $1) : ((int_32)$3 == (int_32)$4) ) + [22])
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9719])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9719])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9719])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [9719])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $89 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [152]))) = (int_64)0
	*(($8 = ($4 + [168]))) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $7)
	*($4 + [256]) = ($4 + [104])
	*($4 + [56]) = ($4 + [120])
	CALL $99(($4 + [56]), ($4 + [256]))
	*(($9 = (($4 + [40]) + [8]))) = *($4 + [112])
	*($4 + [40]) = *($4 + [104])
	*(($10 = (($4 + [240]) + [8]))) = *($9)
	*($4 + [240]) = *($4 + [40])
	$9 = *($10)
	*((($4 + [256]) + [8])) = $9
	*(($4 + [80])) = $9
	*($4 + [56]) = $0
	*($4 + [64]) = $1
	$0 = *($4 + [240])
	*($4 + [72]) = $0
	*($4 + [256]) = $0
	*($4 + [84 align=4]) = (int_64)72064212649837057
	*($4 + [92]) = [84148994]
	*($4 + [96]) = [6]
	*(($9 = (($4 + [192]) + [8]))) = *($3)
	*(($3 = (($4 + [176]) + [8]))) = *($8)
	*($4 + [192]) = *($4 + [144])
	*($4 + [176]) = *($4 + [160])
	$0 = *($4 + [136])
	$1 = *($4 + [128])
	$11 = *($4 + [120])
	*((($4 + [224]) + [8])) = *($3)
	*((($4 + [208]) + [8])) = *($9)
	*($4 + [224]) = *($4 + [176])
	*($4 + [208]) = *($4 + [192])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$12 = *((($4 + [208]) + [8]))
	*((($4 + [256]) + [8])) = $12
	$13 = *((($4 + [224]) + [8]))
	*((($4 + [240]) + [8])) = $13
	*((($4 + [24]) + [8])) = $12
	*((($4 + [8]) + [8])) = $13
	$12 = *($4 + [208])
	*($4 + [256]) = $12
	$13 = *($4 + [224])
	*($4 + [240]) = $13
	*($4 + [24]) = $12
	*($4 + [8]) = $13
	CALL void $3((int_32 $11), (int_64 $1), (int_64 $0), (int_64 ($4 + [24])), (int_32 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [272])
	return [1]
}

int_32 .FUNC $88 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [56]) = (int_64)0
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10226])
	CALL memcpy(($4 + [48]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10226])
	CALL memcpy((($4 + [48]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [28 align=4]) = (int_64)72064212649837057
	*($4 + [36]) = [84148994]
	*($4 + [40]) = [6]
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $87 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $142($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [104])) = (int_64)0
	*((($4 + [88]) + [24])) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [80]) = ($3 + $2)
	*($4 + [72]) = $3
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [10226])
	CALL memcpy(($4 + [88]), $3, [8])
	*($4 + [76]) = ($3 + [8])
	CALL $97(($4 + [72]), (($4 + [88]) + [8]))
	$5 = ($4 + [108])
	CALL $97(($4 + [72]), $5)
	*(($6 = (($4 + [8]) + [8]))) = *($4 + [80])
	*($4 + [8]) = *($4 + [72])
	*(($7 = (($4 + [128]) + [8]))) = *($6)
	*($4 + [128]) = *($4 + [8])
	$6 = *($7)
	*((($4 + [144]) + [8])) = $6
	*((($4 + [24]) + [24])) = $6
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [52 align=4]) = (int_64)72064212649837057
	*($4 + [60]) = [84148994]
	*($4 + [64]) = [6]
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $98(($4 + [144]), ($4 + [88]))
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $145($3)
	
.LABEL $label$5
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$6 }
	*(($4 + [112])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *(($4 + [96]))
	if ( ($3 == 0) ){ goto $label$7 }
	*(($4 + [100])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $86 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [56]) = (int_64)0
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10226])
	CALL memcpy(($4 + [48]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [10226])
	CALL memcpy((($4 + [48]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [28 align=4]) = (int_64)72064212649837057
	*($4 + [36]) = [84148994]
	*($4 + [40]) = [6]
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [56])
	$1 = *($4 + [48])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $85 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10226])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [24]) = (int_64)0
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [10226])
	CALL memcpy(($4 + [24]), ($2 + [8]), [8])
	*($4 + [80]) = *($4 + [24])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [10226])
	CALL memcpy((($4 + [72]) + [16]), ($2 + [16]), [8])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*($4 + [52 align=4]) = (int_64)72064212649837057
	*($4 + [60]) = [84148994]
	*($4 + [64]) = [6]
	*(($3 = (($4 + [96]) + [8]))) = *($4 + [80])
	*($4 + [96]) = *($4 + [72])
	$0 = *($4 + [88])
	*((($4 + [112]) + [8])) = *($3)
	*($4 + [112]) = *($4 + [96])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [112]) + [8]))
	*((($4 + [128]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [112])
	*($4 + [8]) = $1
	*($4 + [128]) = $1
	CALL void $3((int_32 ($4 + [8])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return [1]
}

int_32 .FUNC $84 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $142($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [104])) = (int_64)0
	*((($4 + [88]) + [24])) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [80]) = ($3 + $2)
	*($4 + [72]) = $3
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [10226])
	CALL memcpy(($4 + [88]), $3, [8])
	*($4 + [76]) = ($3 + [8])
	CALL $94(($4 + [72]), (($4 + [88]) + [8]))
	CALL $94(($4 + [72]), ($4 + [108]))
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [80])
	*($4 + [8]) = *($4 + [72])
	*(($6 = (($4 + [128]) + [8]))) = *($5)
	*($4 + [128]) = *($4 + [8])
	$5 = *($6)
	*((($4 + [144]) + [8])) = $5
	*((($4 + [24]) + [24])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [52 align=4]) = (int_64)72064212649837057
	*($4 + [60]) = [84148994]
	*($4 + [64]) = [6]
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $95(($4 + [144]), ($4 + [88]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	$3 = [1]
	if ( (*($4 + [108]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $145($3)
	$3 = [1]
	if ( ((*($4 + [108]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [116])))
	if ( (*($4 + [96]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [96]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [104])))
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $83 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [72]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [10226])
	CALL memcpy(($4 + [56]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [10226])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [10226])
	CALL memcpy((($4 + [56]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [36 align=4]) = (int_64)72064212649837057
	*($4 + [44]) = [84148994]
	*($4 + [48]) = [6]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = *($4 + [56])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [80])
	return [1]
}

int_32 .FUNC $82 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [96]) + [24]))) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [84]) = $2
	*($4 + [80]) = $2
	*($4 + [88]) = ($2 + $7)
	*($4 + [160]) = ($4 + [80])
	*($4 + [32]) = ($4 + [96])
	CALL $96(($4 + [32]), ($4 + [160]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [88])
	*($4 + [16]) = *($4 + [80])
	*(($3 = (($4 + [144]) + [8]))) = *($9)
	*($4 + [144]) = *($4 + [16])
	$9 = *($3)
	*((($4 + [160]) + [8])) = $9
	*((($4 + [32]) + [24])) = $9
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [144])
	*($4 + [48]) = $0
	*($4 + [160]) = $0
	*($4 + [60 align=4]) = (int_64)72064212649837057
	*($4 + [68]) = [84148994]
	*($4 + [72]) = [6]
	*(($9 = (($4 + [128]) + [8]))) = *($8)
	*($4 + [128]) = *($4 + [112])
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	*($3) = *($9)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$10 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $10
	*(($4 + [8])) = $10
	$10 = *($4 + [144])
	*($4) = $10
	*($4 + [160]) = $10
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $145($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $81 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [88]) + [24])) = [0]
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [80]) = ($2 + $5)
	*($4 + [72]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [10226])
	CALL memcpy(($4 + [88]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [10226])
	CALL memcpy((($4 + [88]) + [8]), ($2 + [8]), [8])
	*($4 + [76]) = ($2 + [16])
	CALL $94(($4 + [72]), (($4 + [88]) + [16]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [80])
	*($4 + [8]) = *($4 + [72])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [52 align=4]) = (int_64)72064212649837057
	*($4 + [60]) = [84148994]
	*($4 + [64]) = [6]
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $100(($4 + [144]), ($4 + [88]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $145($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $80 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $142($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [88]) + [24])) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $5)
	*($4 + [160]) = ($4 + [72])
	*($4 + [24]) = ($4 + [88])
	CALL $92(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [80])
	*($4 + [8]) = *($4 + [72])
	*(($6 = (($4 + [144]) + [8]))) = *($3)
	*($4 + [144]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [52 align=4]) = (int_64)72064212649837057
	*($4 + [60]) = [84148994]
	*($4 + [64]) = [6]
	*($4 + [164]) = ($4 + [136])
	*($4 + [160]) = ($4 + [24])
	CALL $93(($4 + [160]), ($4 + [88]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [120]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $145($2)
	$2 = [1]
	if ( ((*($4 + [120]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [128])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $145 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19136])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18944]
	$3 = (((int_32)$1 * (int_32)[12]) + [18944])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $144 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10744]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10748])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10744]) = [1]
	$2 = ($2 << [16])
	*([0] + [10748]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10748])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10748]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10744]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10744]) = [1]
	$3 = ($3 << [16])
	*([0] + [10748]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10748])
	
.LABEL $label$10
	*([0] + [10748]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $142($1)
	
.LABEL $label$2
	*(CALL $138()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $142(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $145($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $138())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $141($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $144($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8227])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $142 (int_32 $0)
{
	return CALL $143([10752], $0)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL prints([9160])
	CALL require_auth($2)
	$4 = [0]
	*((($3 + [200]) + [32])) = [0]
	*($3 + [216]) = (int_64)-1
	$5 = *($0)
	*($3 + [200]) = $5
	*($3 + [208]) = $5
	*($3 + [224]) = (int_64)0
	$6 = CALL db_lowerbound_i64($5, $5, (int_64)7035938307668180992, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = [0]
	$6 = CALL $2(($3 + [200]), $6)
	if ( ((int_64)*($6 + [8]) != (int_64)$2) ){ goto $label$3 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	$8 = [3]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$71 
	
.LABEL $label$72
	$7 = [0]
	$6 = CALL $2(($3 + [200]), $6)
	if ( ((int_64)*($6 + [8]) == (int_64)$2) ){ goto $label$31 }
	$8 = [0]
	goto $label$4 
	
.LABEL $label$71
	$7 = ((int_64)*($6 + [16]) != (int_64)$2)
	$8 = [1]
	goto $label$4 
	
.LABEL $label$70
	CALL eosio_assert($7, [8196])
	CALL eosio_assert([1], [10235])
	$6 = CALL db_next_i64(*($6 + [268]), ($3 + [48]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$30 }
	$8 = [3]
	goto $label$4 
	
.LABEL $label$69
	*((($3 + [160]) + [32])) = [0]
	*($3 + [176]) = (int_64)-1
	*($3 + [184]) = (int_64)0
	$9 = *($0)
	*($3 + [160]) = $9
	$5 = *($1 + [8])
	*($3 + [168]) = $2
	$7 = CALL db_find_i64($9, $2, (int_64)-3665743569108320256, (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$29 }
	$8 = [4]
	goto $label$4 
	
.LABEL $label$68
	$4 = CALL $3(($3 + [160]), $7)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [160])), [10152])
	$8 = [5]
	goto $label$4 
	
.LABEL $label$67
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$5), [9442])
	$9 = *($1)
	CALL eosio_assert(((int_64)*($4) >= (int_64)$9), [9169])
	$10 = *($0)
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9528])
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [160])), [9563])
	CALL eosio_assert(((int_64)*($3 + [160]) == (int_64)CALL $fimport$5()), [9609])
	$11 = *($4 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)$11), [10012])
	$5 = (int_64)
	*($4) = $5(*($4) - $9))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [10082])
	$5 = (uint_64)$11 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($4 + [8]) >> (uint_64)(int_64)8)), [9660])
	CALL eosio_assert([1], [9719])
	CALL memcpy(($3 + [48]), $4, [8])
	*($3 + [120]) = *($4 + [8])
	CALL eosio_assert([1], [9719])
	CALL memcpy((($3 + [48]) | [8]), ($3 + [120]), [8])
	CALL db_update_i64(*($4 + [20]), $10, ($3 + [48]), [16])
	$7 = (($3 + [160]) + [16])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$28 }
	$8 = [6]
	goto $label$4 
	
.LABEL $label$66
	*($7) = ((int_64)$5 + (int_64)1)
	$8 = [7]
	goto $label$4 
	
.LABEL $label$65
	$5 = *($0)
	*($3 + [120]) = [8583]
	*($3 + [124]) = CALL $139([8583])
	*($3 + [24]) = *($3 + [120])
	*($3 + [112]) = *(CALL $17(($3 + [48]), ($3 + [24])))
	*($3 + [104]) = $5
	*($3 + [120]) = [9202]
	*($3 + [124]) = CALL $139([9202])
	*($3 + [16]) = *($3 + [120])
	$5 = *(CALL $17(($3 + [48]), ($3 + [16])))
	*($3 + [120]) = [9214]
	*($3 + [124]) = CALL $139([9214])
	*($3 + [8]) = *($3 + [120])
	$9 = *(CALL $17(($3 + [48]), ($3 + [8])))
	*((($3 + [32]) + [8])) = [0]
	*($3 + [32]) = (int_64)0
	$7 = CALL $139([9223])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$27 }
	$8 = [8]
	goto $label$4 
	
.LABEL $label$64
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$26 }
	$8 = [39]
	goto $label$4 
	
.LABEL $label$63
	*($3 + [32]) = ($7 << [1])
	$6 = (($3 + [32]) | [1])
	if ( $7 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$62
	$4 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($4)
	*($3 + [32]) = ($4 | [1])
	*($3 + [40]) = $6
	*($3 + [36]) = $7
	$8 = [10]
	goto $label$4 
	
.LABEL $label$61
	CALL memcpy($6, [9223], $7)
	$8 = [11]
	goto $label$4 
	
.LABEL $label$60
	*(($6 + $7)) = [0]
	*(($3 + [72])) = *(($1 + [8]))
	$7 = (($3 + [32]) + [8])
	*(($3 + [88])) = *($7)
	*($7) = [0]
	*($3 + [56]) = $2
	*($3 + [48]) = *($0)
	*($3 + [64]) = *($1)
	*($3 + [80]) = *($3 + [32])
	*($3 + [32]) = (int_64)0
	$7 = CALL $30(($3 + [120]), ($3 + [104]), $5, $9, ($3 + [48]))
	CALL $28(($3 + [240]), $7)
	$6 = *($3 + [240])
	CALL send_inline($6, (*($3 + [244]) - $6))
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$23 }
	$8 = [12]
	goto $label$4 
	
.LABEL $label$59
	*($3 + [244]) = $6
	CALL _ZdlPv($6)
	$8 = [13]
	goto $label$4 
	
.LABEL $label$58
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$22 }
	$8 = [14]
	goto $label$4 
	
.LABEL $label$57
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	$8 = [15]
	goto $label$4 
	
.LABEL $label$56
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$21 }
	$8 = [16]
	goto $label$4 
	
.LABEL $label$55
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	$8 = [17]
	goto $label$4 
	
.LABEL $label$54
	if ( (*(($3 + [80])) & [1]) ){ goto $label$20 }
	$8 = [38]
	goto $label$4 
	
.LABEL $label$53
	if ( (*($3 + [32]) & [1]) ){ goto $label$19 }
	$8 = [37]
	goto $label$4 
	
.LABEL $label$52
	$4 = *($3 + [184])
	if ( $4 ){ goto $label$17 }
	$8 = [36]
	goto $label$4 
	
.LABEL $label$51
	$4 = *($3 + [224])
	if ( $4 ){ goto $label$12 }
	$8 = [34]
	goto $label$4 
	
.LABEL $label$50
	$global$0 = ($3 + [256])
	return 
	
.LABEL $label$49
	CALL _ZdlPv(*(($3 + [88])))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$18 }
	$8 = [19]
	goto $label$4 
	
.LABEL $label$48
	CALL _ZdlPv(*(($3 + [40])))
	$4 = *($3 + [184])
	if ( ($4 == 0) ){ goto $label$16 }
	$8 = [20]
	goto $label$4 
	
.LABEL $label$47
	$0 = ($3 + [188])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$15 }
	$8 = [21]
	goto $label$4 
	
.LABEL $label$46
	$8 = [22]
	goto $label$4 
	
.LABEL $label$45
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	$8 = [23]
	goto $label$4 
	
.LABEL $label$44
	CALL _ZdlPv($6)
	$8 = [24]
	goto $label$4 
	
.LABEL $label$43
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$14 }
	$8 = [25]
	goto $label$4 
	
.LABEL $label$42
	$7 = *(($3 + [184]))
	*($0) = $4
	CALL _ZdlPv($7)
	$4 = *($3 + [224])
	if ( $4 ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$41
	*($0) = $4
	CALL _ZdlPv($4)
	$4 = *($3 + [224])
	if ( ($4 == 0) ){ goto $label$11 }
	$8 = [26]
	goto $label$4 
	
.LABEL $label$40
	$0 = ($3 + [228])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = [27]
	goto $label$4 
	
.LABEL $label$39
	$8 = [28]
	goto $label$4 
	
.LABEL $label$38
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	$8 = [29]
	goto $label$4 
	
.LABEL $label$37
	CALL $7($6)
	CALL _ZdlPv($6)
	$8 = [30]
	goto $label$4 
	
.LABEL $label$36
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$7 }
	$8 = [31]
	goto $label$4 
	
.LABEL $label$35
	$7 = *(($3 + [224]))
	goto $label$5 
	
.LABEL $label$34
	$7 = $4
	$8 = [32]
	goto $label$4 
	
.LABEL $label$33
	*($0) = $4
	CALL _ZdlPv($7)
	$global$0 = ($3 + [256])
	return (unreachable)
	
.LABEL $label$32
	CALL $132(($3 + [32]))
	
.LABEL $label$31
	$8 = [1]
	goto $label$4 
	
.LABEL $label$30
	$8 = [2]
	goto $label$4 
	
.LABEL $label$29
	$8 = [5]
	goto $label$4 
	
.LABEL $label$28
	$8 = [7]
	goto $label$4 
	
.LABEL $label$27
	$8 = [40]
	goto $label$4 
	
.LABEL $label$26
	$8 = [9]
	goto $label$4 
	
.LABEL $label$25
	$8 = [11]
	goto $label$4 
	
.LABEL $label$24
	$8 = [10]
	goto $label$4 
	
.LABEL $label$23
	$8 = [13]
	goto $label$4 
	
.LABEL $label$22
	$8 = [15]
	goto $label$4 
	
.LABEL $label$21
	$8 = [17]
	goto $label$4 
	
.LABEL $label$20
	$8 = [18]
	goto $label$4 
	
.LABEL $label$19
	$8 = [19]
	goto $label$4 
	
.LABEL $label$18
	$8 = [37]
	goto $label$4 
	
.LABEL $label$17
	$8 = [20]
	goto $label$4 
	
.LABEL $label$16
	$8 = [36]
	goto $label$4 
	
.LABEL $label$15
	$8 = [35]
	goto $label$4 
	
.LABEL $label$14
	$8 = [22]
	goto $label$4 
	
.LABEL $label$13
	$8 = [24]
	goto $label$4 
	
.LABEL $label$12
	$8 = [26]
	goto $label$4 
	
.LABEL $label$11
	$8 = [34]
	goto $label$4 
	
.LABEL $label$10
	$8 = [34]
	goto $label$4 
	
.LABEL $label$9
	$8 = [26]
	goto $label$4 
	
.LABEL $label$8
	$8 = [33]
	goto $label$4 
	
.LABEL $label$7
	$8 = [28]
	goto $label$4 
	
.LABEL $label$6
	$8 = [30]
	goto $label$4 
	
.LABEL $label$5
	$8 = [32]
	goto $label$4 
	$8
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $27(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $70 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [136]) = $2
	CALL prints([9119])
	CALL require_auth($2)
	*(($3 + [128])) = [0]
	*($3 + [112]) = (int_64)-1
	*($3 + [120]) = (int_64)0
	$2 = *($0)
	*($3 + [96]) = $2
	*($3 + [104]) = $2
	$4 = [0]
	$5 = CALL db_find_i64($2, $2, (int_64)7035938307668180992, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2(($3 + [96]), $5)
	CALL eosio_assert(((int_32)*($4 + [264]) == (int_32)($3 + [96])), [10152])
	
.LABEL $label$1
	*($3 + [92]) = $4
	*($3 + [88]) = ($3 + [96])
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8371])
	CALL eosio_assert(((int_32)*($4 + [112]) != (int_32)*($0 + [30])), [9130])
	if ( ((int_32)*($4 + [256]) != (int_32)[2]) ){ goto $label$4 }
	$2 = *($0)
	*($3 + [72]) = $0
	*($3 + [76]) = ($3 + [88])
	*($3 + [80]) = ($3 + [136])
	CALL eosio_assert($5, [9528])
	CALL $71(($3 + [96]), $4, $2, ($3 + [72]))
	$5 = *($3 + [120])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = *($4 + [8])
	if ( ((int_64)$2 != (int_64)*($3 + [136])) ){ goto $label$6 }
	$6 = *(($4 + [160]))
	*((($3 + [56]) + [8])) = $6
	$1 = *($4 + [152])
	*((($3 + [8]) + [8])) = $6
	*($3 + [56]) = $1
	*($3 + [8]) = $1
	CALL $21($0, $2, ($3 + [8]))
	goto $label$5 
	
.LABEL $label$6
	$1 = *(($4 + [176]))
	*((($3 + [40]) + [8])) = $1
	$6 = *($4 + [16])
	$2 = *($4 + [168])
	*((($3 + [24]) + [8])) = $1
	*($3 + [40]) = $2
	*($3 + [24]) = $2
	CALL $21($0, $6, ($3 + [24]))
	
.LABEL $label$5
	$2 = *($3 + [88])
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	$0 = ((int_32)$4) != (int_32)[0]
	CALL eosio_assert($0), [10550])
	CALL eosio_assert($0, [10235])
	$0 = CALL db_next_i64(*($4 + [268]), ($3 + [72]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	CALL $2((CASTING uint_32)(uint_64 $2), $0)
	
.LABEL $label$7
	CALL $65(($3 + [96]), $4)
	$5 = *($3 + [120])
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($3 + [124])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $7($0)
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($3 + [120]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $5
	
.LABEL $label$8
	*($7) = $5
	CALL _ZdlPv($4)
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$2
	$global$0 = ($3 + [144])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$4 = ($global$0 - [208])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$6 = *($1)
	$7 = *($3)
	$8 = ($1 + [212])
	CALL $122($8, [0], [0])
	$9 = ($1 + [224])
	CALL $122($9, [0], [0])
	*($1 + [256]) = [1]
	*($1 + [112]) = *($7 + [33])
	$10 = ($1 + [256])
	$11 = ($1 + [112])
	$12 = *(*($3 + [4]) + [4])
	if ( ((int_64)*($12 + [8]) != (int_64)*(*($3 + [8]))) ){ goto $label$12 }
	$13 = *(($12 + [8]))
	$14 = *(($12 + [160]))
	*((($5 + [72]) + [8])) = $14
	$15 = *($12 + [152])
	*((($5 + [16]) + [8])) = $14
	*($5 + [16]) = $15
	*($5 + [72]) = $15
	CALL $21($7, $13, ($5 + [16]))
	$16 = ($3 + [4])
	$3 = *(*($16) + [4])
	*(($12 = (($5 + [192]) + [8]))) = *(($3 + [176]))
	$15 = *($3 + [16])
	$13 = *($3 + [168])
	*(($5 + [8])) = *($12)
	*($5 + [192]) = $13
	*($5) = *($5 + [192])
	CALL $21($7, $15, $5)
	*($1 + [8]) = *(*(*($16) + [4]) + [16])
	$13 = (int_64)0
	*($1 + [16]) = (int_64)0
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [9275])
	goto $label$10 
	
.LABEL $label$12
	$13 = *(($12 + [176]))
	*((($5 + [72]) + [8])) = $13
	$14 = *($12 + [16])
	$15 = *($12 + [168])
	*((($5 + [48]) + [8])) = $13
	*($5 + [72]) = $15
	*($5 + [48]) = $15
	CALL $21($7, $14, ($5 + [48]))
	$3 = *(*(($3 + [4])) + [4])
	$15 = *($3 + [8])
	*(($12 = (($5 + [192]) + [8]))) = *(($3 + [160]))
	$13 = *($3 + [152])
	*((($5 + [32]) + [8])) = *($12)
	*($5 + [192]) = $13
	*($5 + [32]) = *($5 + [192])
	CALL $21($7, $15, ($5 + [32]))
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [9275])
	goto $label$7 
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$13 = (int_64)0
	
.LOOP $label$13:
	$7 = *(($3 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$14
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$13 }
	
.LABEL $label$9
	CALL eosio_assert([1], [9373])
	$15 = ((int_64)$13 & (int_64)72057594037927935)
	$14 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$13 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$15 = $13
	$7 = [1]
	$12 = $3
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$15 = $13
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $7 ){ goto $label$19 }
	$7 = [1]
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [9422])
	*(($1 + [176])) = $14
	$13 = (int_64)0
	*($1 + [168]) = (int_64)0
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9275])
	goto $label$5 
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$7
	$13 = (int_64)0
	
.LOOP $label$20:
	$7 = *(($3 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$21
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$20 }
	goto $label$2 
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$13 = (int_64)0
	
.LOOP $label$22:
	$7 = *(($3 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$23 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$23
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$22 }
	
.LABEL $label$4
	CALL eosio_assert([1], [9373])
	$15 = ((int_64)$13 & (int_64)72057594037927935)
	$14 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$13 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$15 = $13
	$7 = [1]
	$12 = $3
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$15 = $13
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $7 ){ goto $label$28 }
	$7 = [1]
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$7 = [0]
	
.LABEL $label$24
	CALL eosio_assert($7, [9422])
	*(($1 + [160])) = $14
	$13 = (int_64)0
	*($1 + [152]) = (int_64)0
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$31 }
	CALL eosio_assert([0], [9275])
	goto $label$30 
	
.LABEL $label$31
	if ( ($3 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$13 = (int_64)0
	
.LOOP $label$32:
	$7 = *(($3 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$33 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$33
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$32 }
	
.LABEL $label$29
	CALL eosio_assert([1], [9373])
	$15 = ((int_64)$13 & (int_64)72057594037927935)
	$14 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$13 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$37 }
	$15 = $13
	$7 = [1]
	$12 = $3
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$15 = $13
	
.LOOP $label$38:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$35 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $7 ){ goto $label$38 }
	$7 = [1]
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	
.LABEL $label$34
	CALL eosio_assert($7, [9422])
	*(($1 + [72])) = $14
	*($1 + [64]) = (int_64)0
	goto $label$1 
	
.LABEL $label$3
	$13 = (int_64)0
	
.LABEL $label$2
	CALL eosio_assert([1], [9373])
	$15 = ((int_64)$13 & (int_64)72057594037927935)
	$14 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$13 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$42 }
	$15 = $13
	$7 = [1]
	$12 = $3
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$42
	$15 = $13
	
.LOOP $label$43:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $7 ){ goto $label$43 }
	$7 = [1]
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$7 = [0]
	
.LABEL $label$39
	CALL eosio_assert($7, [9422])
	*(($1 + [176])) = $14
	$13 = (int_64)0
	*($1 + [168]) = (int_64)0
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$46 }
	CALL eosio_assert([0], [9275])
	goto $label$45 
	
.LABEL $label$46
	if ( ($3 == 0) ){ goto $label$44 }
	
.LABEL $label$45
	$13 = (int_64)0
	
.LOOP $label$47:
	$7 = *(($3 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$48 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$48
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$47 }
	
.LABEL $label$44
	CALL eosio_assert([1], [9373])
	$15 = ((int_64)$13 & (int_64)72057594037927935)
	$14 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$13 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$52 }
	$15 = $13
	$7 = [1]
	$12 = $3
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$52
	$15 = $13
	
.LOOP $label$53:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$50 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $7 ){ goto $label$53 }
	$7 = [1]
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	$7 = [0]
	
.LABEL $label$49
	CALL eosio_assert($7, [9422])
	*(($1 + [160])) = $14
	$13 = (int_64)0
	*($1 + [152]) = (int_64)0
	$3 = CALL $139([8192])
	if ( ($3 <= [8]) ){ goto $label$56 }
	CALL eosio_assert([0], [9275])
	goto $label$55 
	
.LABEL $label$56
	if ( ($3 == 0) ){ goto $label$54 }
	
.LABEL $label$55
	$13 = (int_64)0
	
.LOOP $label$57:
	$7 = *(($3 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$58 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$58
	$13 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$57 }
	
.LABEL $label$54
	CALL eosio_assert([1], [9373])
	$15 = ((int_64)$13 & (int_64)72057594037927935)
	$14 = ((int_64)((int_64)$13 << (int_64)8) | (int_64)4)
	$3 = [0]
	
.LOOP $label$61:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$13 = (uint_64)$15 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$15 & (int_64)65280) == (int_64)0) ){ goto $label$62 }
	$15 = $13
	$7 = [1]
	$12 = $3
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$62
	$15 = $13
	
.LOOP $label$63:
	if ( ((int_64)((int_64)$15 & (int_64)65280) != (int_64)0) ){ goto $label$60 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$12 = ($3 + [1])
	$3 = $12
	if ( $7 ){ goto $label$63 }
	$7 = [1]
	$3 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$60
	$7 = [0]
	
.LABEL $label$59
	CALL eosio_assert($7, [9422])
	*(($1 + [72])) = $14
	*($1 + [64]) = (int_64)0
	*($1 + [16]) = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9660])
	*($5 + [64]) = [0]
	*($5 + [192]) = ($5 + [64])
	$12 = ($1 + [8])
	*($5 + [76]) = $12
	*($5 + [72]) = $1
	$16 = ($1 + [16])
	*($5 + [80]) = $16
	$17 = ($1 + [24])
	*($5 + [84]) = $17
	$18 = ($1 + [40])
	*($5 + [88]) = $18
	$19 = ($1 + [48])
	*($5 + [92]) = $19
	$20 = ($1 + [56])
	*($5 + [96]) = $20
	$21 = ($1 + [64])
	*($5 + [100]) = $21
	$22 = ($1 + [80])
	*($5 + [104]) = $22
	$23 = ($1 + [96])
	*($5 + [108]) = $23
	*($5 + [112]) = $11
	$24 = ($1 + [113])
	*($5 + [116]) = $24
	$25 = ($1 + [114])
	*($5 + [120]) = $25
	$26 = ($1 + [120])
	*($5 + [124]) = $26
	$27 = ($1 + [136])
	*($5 + [128]) = $27
	$28 = ($1 + [152])
	*($5 + [132]) = $28
	$29 = ($1 + [168])
	*($5 + [136]) = $29
	$30 = ($1 + [184])
	*($5 + [140]) = $30
	$31 = ($1 + [188])
	*($5 + [144]) = $31
	*($5 + [152]) = $8
	$32 = ($1 + [200])
	*($5 + [148]) = $32
	*($5 + [156]) = $9
	$33 = ($1 + [240])
	*($5 + [160]) = $33
	$34 = ($1 + [248])
	*($5 + [164]) = $34
	*($5 + [168]) = $10
	$35 = ($1 + [257])
	*($5 + [172]) = $35
	$36 = ($1 + [258])
	*($5 + [176]) = $36
	$37 = ($1 + [259])
	*($5 + [180]) = $37
	$38 = ($1 + [260])
	*($5 + [184]) = $38
	$39 = ($1 + [261])
	*($5 + [188]) = $39
	CALL $102(($5 + [72]), ($5 + [192]))
	$7 = *($5 + [64])
	if ( ($7 <= [513]) ){ goto $label$65 }
	$3 = CALL $142($7)
	goto $label$64 
	
.LABEL $label$65
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$64
	*($5 + [196]) = $3
	*($5 + [192]) = $3
	*($5 + [200]) = ($3 + $7)
	*($5 + [64]) = ($5 + [192])
	*($5 + [76]) = $12
	*($5 + [80]) = $16
	*($5 + [84]) = $17
	*($5 + [88]) = $18
	*($5 + [92]) = $19
	*($5 + [96]) = $20
	*($5 + [100]) = $21
	*($5 + [104]) = $22
	*($5 + [108]) = $23
	*($5 + [112]) = $11
	*($5 + [116]) = $24
	*($5 + [120]) = $25
	*($5 + [124]) = $26
	*($5 + [128]) = $27
	*($5 + [132]) = $28
	*($5 + [136]) = $29
	*($5 + [140]) = $30
	*($5 + [144]) = $31
	*($5 + [72]) = $1
	*($5 + [152]) = $8
	*($5 + [148]) = $32
	*($5 + [156]) = $9
	*($5 + [160]) = $33
	*($5 + [164]) = $34
	*($5 + [168]) = $10
	*($5 + [172]) = $35
	*($5 + [176]) = $36
	*($5 + [180]) = $37
	*($5 + [184]) = $38
	*($5 + [188]) = $39
	CALL $103(($5 + [72]), ($5 + [64]))
	CALL db_update_i64(*($1 + [268]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$68 }
	CALL $145($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$66 }
	
.LABEL $label$67
	$global$0 = ($5 + [208])
	return 
	
.LABEL $label$66
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [208])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$5 = *($3)
	*($1 + [114]) = *(($5 + [35]))
	*($1 + [56]) = *(*(*(($3 + [4])) + [4]) + [8])
	*($1 + [112]) = *(($5 + [31]))
	$6 = *($1)
	*($1 + [248]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$7 = ($1 + [8])
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	$8 = ($1 + [16])
	*($3 + [32]) = $8
	$9 = ($1 + [24])
	*($3 + [36]) = $9
	$10 = ($1 + [40])
	*($3 + [40]) = $10
	$11 = ($1 + [48])
	*($3 + [44]) = $11
	$12 = ($1 + [56])
	*($3 + [48]) = $12
	$13 = ($1 + [64])
	*($3 + [52]) = $13
	$14 = ($1 + [80])
	*($3 + [56]) = $14
	$15 = ($1 + [96])
	*($3 + [60]) = $15
	$16 = ($1 + [112])
	*($3 + [64]) = $16
	$17 = ($1 + [113])
	*($3 + [68]) = $17
	$18 = ($1 + [114])
	*($3 + [72]) = $18
	$19 = ($1 + [120])
	*($3 + [76]) = $19
	$20 = ($1 + [136])
	*($3 + [80]) = $20
	$21 = ($1 + [152])
	*($3 + [84]) = $21
	$22 = ($1 + [168])
	*($3 + [88]) = $22
	$23 = ($1 + [184])
	*($3 + [92]) = $23
	$24 = ($1 + [188])
	*($3 + [96]) = $24
	$25 = ($1 + [212])
	*($3 + [104]) = $25
	$26 = ($1 + [200])
	*($3 + [100]) = $26
	$27 = ($1 + [224])
	*($3 + [108]) = $27
	$28 = ($1 + [240])
	*($3 + [112]) = $28
	$29 = ($1 + [248])
	*($3 + [116]) = $29
	$30 = ($1 + [256])
	*($3 + [120]) = $30
	$31 = ($1 + [257])
	*($3 + [124]) = $31
	$32 = ($1 + [258])
	*($3 + [128]) = $32
	$33 = ($1 + [259])
	*($3 + [132]) = $33
	$34 = ($1 + [260])
	*($3 + [136]) = $34
	$35 = ($1 + [261])
	*($3 + [140]) = $35
	CALL $102(($3 + [24]), $3)
	$5 = *($3 + [16])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($5)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [32]) = $8
	*($3 + [36]) = $9
	*($3 + [40]) = $10
	*($3 + [44]) = $11
	*($3 + [48]) = $12
	*($3 + [52]) = $13
	*($3 + [56]) = $14
	*($3 + [60]) = $15
	*($3 + [64]) = $16
	*($3 + [68]) = $17
	*($3 + [72]) = $18
	*($3 + [76]) = $19
	*($3 + [80]) = $20
	*($3 + [84]) = $21
	*($3 + [88]) = $22
	*($3 + [92]) = $23
	*($3 + [96]) = $24
	*($3 + [24]) = $1
	*($3 + [104]) = $25
	*($3 + [100]) = $26
	*($3 + [108]) = $27
	*($3 + [112]) = $28
	*($3 + [116]) = $29
	*($3 + [120]) = $30
	*($3 + [124]) = $31
	*($3 + [128]) = $32
	*($3 + [132]) = $33
	*($3 + [136]) = $34
	*($3 + [140]) = $35
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$4 = ($global$0 - [144])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$6 = *($3 + [8])
	$7 = *($3)
	*($1 + [96]) = *($7)
	*(($1 + [104])) = *(($7 + [8]))
	$7 = *($3 + [4])
	*($1 + [80]) = *($7)
	$8 = *(($7 + [8]))
	*($1 + [184]) = [0]
	*(($1 + [88])) = $8
	$9 = *($1)
	$10 = ($1 + [188])
	CALL $109($10, [0], [0])
	$11 = ($1 + [200])
	CALL $109($11, [0], [0])
	$12 = ($1 + [212])
	CALL $122($12, [0], [0])
	$13 = ($1 + [224])
	CALL $122($13, [0], [0])
	*($1 + [259]) = [0]
	*($1 + [257 align=1]) = [0]
	*($1 + [113 align=1]) = [0]
	$7 = CALL $139([8192])
	if ( ($7 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9275])
	goto $label$3 
	
.LABEL $label$4
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$14 = (int_64)0
	
.LOOP $label$5:
	$15 = *(($7 + [8191]))
	if ( ((($15 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$6
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$14 = (int_64)0
	
.LABEL $label$1
	$16 = ($1 + [114])
	$17 = ($1 + [113])
	$18 = ($1 + [259])
	$19 = ($1 + [258])
	$20 = ($1 + [257])
	$21 = ($1 + [184])
	$22 = ($1 + [80])
	$23 = ($1 + [96])
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$14 & (int_64)72057594037927935)
	$24 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)4)
	$7 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$14 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $14
	$15 = [1]
	$25 = $7
	$7 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $14
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$15 = ((int_32)$7 < (int_32)[6])
	$25 = ($7 + [1])
	$7 = $25
	if ( $15 ){ goto $label$11 }
	$15 = [1]
	$7 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$15 = [0]
	
.LABEL $label$7
	CALL eosio_assert($15, [9422])
	*(($1 + [128])) = $24
	$14 = (int_64)0
	*($1 + [120]) = (int_64)0
	$7 = CALL $139([8192])
	if ( ($7 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9275])
	goto $label$13 
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$14 = (int_64)0
	
.LOOP $label$15:
	$15 = *(($7 + [8191]))
	if ( ((($15 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$16
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$15 }
	
.LABEL $label$12
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$14 & (int_64)72057594037927935)
	$24 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)4)
	$7 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$14 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$8 = $14
	$15 = [1]
	$25 = $7
	$7 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$8 = $14
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$15 = ((int_32)$7 < (int_32)[6])
	$25 = ($7 + [1])
	$7 = $25
	if ( $15 ){ goto $label$21 }
	$15 = [1]
	$7 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$15 = [0]
	
.LABEL $label$17
	CALL eosio_assert($15, [9422])
	*(($1 + [144])) = $24
	$14 = (int_64)0
	*($1 + [136]) = (int_64)0
	$7 = CALL $139([8192])
	if ( ($7 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [9275])
	goto $label$23 
	
.LABEL $label$24
	if ( ($7 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$14 = (int_64)0
	
.LOOP $label$25:
	$15 = *(($7 + [8191]))
	if ( ((($15 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$26
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$25 }
	
.LABEL $label$22
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$14 & (int_64)72057594037927935)
	$24 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)4)
	$7 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$14 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$8 = $14
	$15 = [1]
	$25 = $7
	$7 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$8 = $14
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$15 = ((int_32)$7 < (int_32)[6])
	$25 = ($7 + [1])
	$7 = $25
	if ( $15 ){ goto $label$31 }
	$15 = [1]
	$7 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$15 = [0]
	
.LABEL $label$27
	CALL eosio_assert($15, [9422])
	*(($1 + [160])) = $24
	$14 = (int_64)0
	*($1 + [152]) = (int_64)0
	$7 = CALL $139([8192])
	if ( ($7 <= [8]) ){ goto $label$34 }
	CALL eosio_assert([0], [9275])
	goto $label$33 
	
.LABEL $label$34
	if ( ($7 == 0) ){ goto $label$32 }
	
.LABEL $label$33
	$14 = (int_64)0
	
.LOOP $label$35:
	$15 = *(($7 + [8191]))
	if ( ((($15 + [-65]) & [255]) <= [26]) ){ goto $label$36 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$36
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$35 }
	
.LABEL $label$32
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$14 & (int_64)72057594037927935)
	$24 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)4)
	$7 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$14 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$8 = $14
	$15 = [1]
	$25 = $7
	$7 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$40
	$8 = $14
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$15 = ((int_32)$7 < (int_32)[6])
	$25 = ($7 + [1])
	$7 = $25
	if ( $15 ){ goto $label$41 }
	$15 = [1]
	$7 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$15 = [0]
	
.LABEL $label$37
	CALL eosio_assert($15, [9422])
	*(($1 + [176])) = $24
	$14 = (int_64)0
	*($1 + [168]) = (int_64)0
	*($1 + [256]) = [1]
	*($1 + [112]) = *($6 + [33])
	$7 = CALL $139([8192])
	if ( ($7 <= [8]) ){ goto $label$44 }
	CALL eosio_assert([0], [9275])
	goto $label$43 
	
.LABEL $label$44
	if ( ($7 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$14 = (int_64)0
	
.LOOP $label$45:
	$15 = *(($7 + [8191]))
	if ( ((($15 + [-65]) & [255]) <= [26]) ){ goto $label$46 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$46
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $15) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$45 }
	
.LABEL $label$42
	$6 = ($1 + [112])
	$26 = ($1 + [256])
	CALL eosio_assert([1], [9373])
	$8 = ((int_64)$14 & (int_64)72057594037927935)
	$24 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)4)
	$7 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$14 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$8 = $14
	$15 = [1]
	$25 = $7
	$7 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$8 = $14
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$15 = ((int_32)$7 < (int_32)[6])
	$25 = ($7 + [1])
	$7 = $25
	if ( $15 ){ goto $label$51 }
	$15 = [1]
	$7 = ($25 + [1])
	if ( ((int_32)$25 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$15 = [0]
	
.LABEL $label$47
	CALL eosio_assert($15, [9422])
	*(($1 + [72])) = $24
	*($1 + [64]) = (int_64)0
	*($1 + [260]) = [0]
	$25 = ($1 + [24])
	CALL $110($25, [0], [0])
	$27 = ($1 + [261])
	$28 = ($1 + [260])
	$7 = *(*($3 + [12]) + [4])
	if ( ((int_64)*($7 + [8]) != (int_64)*(*($3 + [16]))) ){ goto $label$52 }
	*($1 + [8]) = *($7 + [16])
	
.LABEL $label$52
	*($1 + [16]) = (int_64)0
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [9660])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$3 = ($1 + [8])
	*($5 + [28]) = $3
	*($5 + [24]) = $1
	$29 = ($1 + [16])
	*($5 + [32]) = $29
	*($5 + [36]) = $25
	$30 = ($1 + [40])
	*($5 + [40]) = $30
	$31 = ($1 + [48])
	*($5 + [44]) = $31
	$32 = ($1 + [56])
	*($5 + [48]) = $32
	$33 = ($1 + [64])
	*($5 + [52]) = $33
	*($5 + [56]) = $22
	*($5 + [60]) = $23
	*($5 + [64]) = $6
	*($5 + [68]) = $17
	*($5 + [72]) = $16
	$34 = ($1 + [120])
	*($5 + [76]) = $34
	$35 = ($1 + [136])
	*($5 + [80]) = $35
	$36 = ($1 + [152])
	*($5 + [84]) = $36
	$37 = ($1 + [168])
	*($5 + [88]) = $37
	*($5 + [92]) = $21
	*($5 + [96]) = $10
	*($5 + [104]) = $12
	*($5 + [100]) = $11
	*($5 + [108]) = $13
	$38 = ($1 + [240])
	*($5 + [112]) = $38
	$39 = ($1 + [248])
	*($5 + [116]) = $39
	*($5 + [120]) = $26
	*($5 + [124]) = $20
	*($5 + [128]) = $19
	*($5 + [132]) = $18
	*($5 + [136]) = $28
	*($5 + [140]) = $27
	CALL $102(($5 + [24]), $5)
	$15 = *($5 + [16])
	if ( ($15 <= [513]) ){ goto $label$54 }
	$7 = CALL $142($15)
	goto $label$53 
	
.LABEL $label$54
	$7 = ($4 - (($15 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$53
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = ($7 + $15)
	*($5 + [16]) = $5
	*($5 + [28]) = $3
	*($5 + [32]) = $29
	*($5 + [36]) = $25
	*($5 + [40]) = $30
	*($5 + [44]) = $31
	*($5 + [48]) = $32
	*($5 + [52]) = $33
	*($5 + [56]) = $22
	*($5 + [60]) = $23
	*($5 + [64]) = $6
	*($5 + [68]) = $17
	*($5 + [72]) = $16
	*($5 + [76]) = $34
	*($5 + [80]) = $35
	*($5 + [84]) = $36
	*($5 + [88]) = $37
	*($5 + [92]) = $21
	*($5 + [96]) = $10
	*($5 + [24]) = $1
	*($5 + [104]) = $12
	*($5 + [100]) = $11
	*($5 + [108]) = $13
	*($5 + [112]) = $38
	*($5 + [116]) = $39
	*($5 + [120]) = $26
	*($5 + [124]) = $20
	*($5 + [128]) = $19
	*($5 + [132]) = $18
	*($5 + [136]) = $28
	*($5 + [140]) = $27
	CALL $103(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $7, $15)
	if ( ($15 <= [513]) ){ goto $label$57 }
	CALL $145($7)
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	if ( ((uint_64)$9 >= (uint_64)*($0 + [16])) ){ goto $label$55 }
	
.LABEL $label$56
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$55
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [144])
}

void .FUNC $74 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [128])
	$global$0 = $3
	*($3 + [120]) = $2
	CALL prints([9119])
	CALL require_auth($2)
	$4 = [0]
	*(($3 + [112])) = [0]
	*($3 + [96]) = (int_64)-1
	*($3 + [104]) = (int_64)0
	$5 = *($0)
	*($3 + [80]) = $5
	*($3 + [88]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)7035938307668180992, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$4 = CALL $2(($3 + [80]), $6)
	CALL eosio_assert(((int_32)*($4 + [264]) == (int_32)($3 + [80])), [10152])
	*($3 + [72]) = ($3 + [80])
	$2 = *($3 + [120])
	goto $label$1 
	
.LABEL $label$2
	*($3 + [72]) = ($3 + [80])
	
.LABEL $label$1
	*($3 + [76]) = $4
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8371])
	CALL eosio_assert(((int_32)*(*($3 + [76]) + [112]) == (int_32)[3]), [9249])
	$5 = *($0)
	$4 = *($3 + [76])
	if ( ((int_64)$2 != (int_64)*($4 + [8])) ){ goto $label$4 }
	*($3 + [16]) = $0
	*($3 + [20]) = ($3 + [72])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9528])
	CALL $75(($3 + [80]), $4, $5, ($3 + [16]))
	goto $label$3 
	
.LABEL $label$4
	*($3 + [16]) = $0
	*($3 + [20]) = ($3 + [72])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9528])
	CALL $76(($3 + [80]), $4, $5, ($3 + [16]))
	
.LABEL $label$3
	CALL $25($0, $1)
	*($3 + [64]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [40]) = (int_64)0
	$4 = *($3 + [76])
	CALL eosio_assert(((int_64)*(($4 + [160])) == (int_64)*(($4 + [176]))), [9442])
	$6 = *($3 + [76])
	if ( ((int_64)*($4 + [152]) != (int_64)*($4 + [168])) ){ goto $label$6 }
	$2 = *(($6 + [72]))
	*((($3 + [56]) + [8])) = $2
	$5 = *($6 + [64])
	*($3 + [56]) = $5
	CALL eosio_assert([1], [9882])
	CALL eosio_assert([1], [9897])
	*((($3 + [40]) + [8])) = $2
	*($3 + [40]) = ((int_64)$5 / (int_64)2)
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*(($6 + [160])) == (int_64)*(($6 + [176]))), [9442])
	$4 = *($3 + [76])
	if ( ((int_64)*($6 + [152]) >= (int_64)*($6 + [168])) ){ goto $label$7 }
	$5 = *(($4 + [160]))
	$2 = *($4 + [152])
	CALL eosio_assert(((int_64)$2 < (int_64)2305843009213693952), [10103])
	CALL eosio_assert(((int_64)$2 > (int_64)-2305843009213693952), [10127])
	*((($3 + [56]) + [8])) = $5
	*($3 + [56]) = ((int_64)$2 << (int_64)1)
	$4 = *($3 + [76])
	$2 = *($4 + [168])
	CALL eosio_assert(((int_64)*(($4 + [160])) == (int_64)*(($4 + [176]))), [10012])
	$2 = (int_64)
	CALL eosio_assert(((int_64)$2($2 - *($4 + [152]))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [10082])
	$4 = *($3 + [76])
	*((($3 + [40]) + [8])) = *(($4 + [160]))
	*($3 + [40]) = *($4 + [152])
	goto $label$5 
	
.LABEL $label$7
	$5 = *(($4 + [176]))
	$2 = *($4 + [168])
	CALL eosio_assert(((int_64)$2 < (int_64)2305843009213693952), [10103])
	CALL eosio_assert(((int_64)$2 > (int_64)-2305843009213693952), [10127])
	*((($3 + [56]) + [8])) = $5
	*($3 + [56]) = ((int_64)$2 << (int_64)1)
	$4 = *($3 + [76])
	$2 = *($4 + [152])
	CALL eosio_assert(((int_64)*(($4 + [176])) == (int_64)*(($4 + [160]))), [10012])
	$2 = (int_64)
	CALL eosio_assert(((int_64)$2($2 - *($4 + [168]))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [10082])
	$4 = *($3 + [76])
	*((($3 + [40]) + [8])) = *(($4 + [176]))
	*($3 + [40]) = *($4 + [168])
	
.LABEL $label$5
	$4 = CALL $139([8192])
	if ( ($4 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [9275])
	goto $label$10 
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$5 = (int_64)0
	
.LOOP $label$12:
	$6 = *(($4 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$13
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$12 }
	goto $label$8 
	
.LABEL $label$9
	$5 = (int_64)0
	
.LABEL $label$8
	CALL eosio_assert([1], [9373])
	$2 = ((int_64)$5 & (int_64)72057594037927935)
	$1 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	$4 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$2 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$2 = $5
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$18 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	
.LABEL $label$14
	CALL eosio_assert($6, [9422])
	$4 = (($3 + [56]) + [8])
	$8 = *($4)
	CALL eosio_assert(((int_64)$8 == (int_64)$1), [9442])
	$2 = *($3 + [56])
	if ( ((int_64)$2 > (int_64)2000) ){ goto $label$24 }
	$4 = CALL $139([8192])
	if ( ($4 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [9275])
	goto $label$22 
	
.LABEL $label$24
	CALL __multi3($3, $2, (int_64)$2 >> (int_64)63), (int_64)5, (int_64)0)
	$2 = *(($3 + [8]))
	$1 = *($3)
	CALL eosio_assert(( (uint_64)($1 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [10103])
	CALL eosio_assert(( ((uint_64)$1 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [10127])
	CALL eosio_assert([1], [9882])
	CALL eosio_assert([1], [9897])
	$2 = *($3 + [56])
	$5 = *($4)
	CALL eosio_assert(((int_64)$8 == (int_64)$5), [10012])
	$2 = (int_64)
	CALL eosio_assert(((int_64)$2($2 - ((int_64)$1 / (int_64)100))) > (int_64)-4611686018427387904), [10060])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [10082])
	goto $label$19 
	
.LABEL $label$23
	if ( ($4 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	$5 = (int_64)0
	
.LOOP $label$25:
	$6 = *(($4 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$26
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$25 }
	goto $label$20 
	
.LABEL $label$21
	$5 = (int_64)0
	
.LABEL $label$20
	CALL eosio_assert([1], [9373])
	$2 = ((int_64)$5 & (int_64)72057594037927935)
	$1 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	$4 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$5 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$2 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$2 = $5
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$31 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$6 = [0]
	
.LABEL $label$27
	CALL eosio_assert($6, [9422])
	$2 = *($3 + [56])
	$5 = *(($3 + [64]))
	CALL eosio_assert(((int_64)$1 == (int_64)$5), [10012])
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387804), [10060])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427388004), [10082])
	$2 = ((int_64)$2 + (int_64)-100)
	
.LABEL $label$19
	*(($3 + [64])) = $5
	*($3 + [56]) = $2
	$2 = *($0)
	$4 = *($3 + [76])
	*($3 + [24]) = $0
	*($3 + [20]) = ($3 + [56])
	*($3 + [16]) = ($3 + [40])
	*($3 + [28]) = ($3 + [72])
	*($3 + [32]) = ($3 + [120])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9528])
	CALL $77(($3 + [80]), $4, $2, ($3 + [16]))
	$7 = *($3 + [104])
	if ( ($7 == 0) ){ goto $label$32 }
	$0 = ($3 + [108])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$34 }
	
.LOOP $label$35:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$36 }
	CALL $7($6)
	CALL _ZdlPv($6)
	
.LABEL $label$36
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$35 }
	$4 = *(($3 + [104]))
	goto $label$33 
	
.LABEL $label$34
	$4 = $7
	
.LABEL $label$33
	*($0) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$32
	$global$0 = ($3 + [128])
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL require_auth($2)
	*(($4 + [168])) = [0]
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	$5 = *($0)
	*($4 + [136]) = $5
	*($4 + [144]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)7035938307668180992, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $2(($4 + [136]), $7)
	CALL eosio_assert(((int_32)*($6 + [264]) == (int_32)($4 + [136])), [10152])
	
.LABEL $label$1
	*($4 + [132]) = $6
	$8 = *($6 + [260])
	$7 = [1]
	*($4 + [128]) = ($4 + [136])
	CALL eosio_assert(((int_32)$8 ^ (int_32)[1]), [8671])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8371])
	CALL eosio_assert(((int_64)*($6 + [48]) == (int_64)$2), [8697])
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)*($0 + [30])), [8715])
	if ( ((int_64)*($6 + [8]) == (int_64)$2) ){ goto $label$2 }
	$7 = ((int_64)*($6 + [16]) == (int_64)$2)
	
.LABEL $label$2
	CALL eosio_assert($7, [8631])
	$7 = [0]
	*(($4 + [120])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$1 = *($0)
	*($4 + [88]) = $1
	*($4 + [96]) = $2
	$5 = *($3 + [8])
	$8 = CALL db_find_i64($1, $2, (int_64)-3665743569108320256, (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_32)$8) <= (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL $3(($4 + [88]), $8)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [88])), [10152])
	*($4 + [84]) = $7
	$6 = *($4 + [132])
	$8 = ($6 + [8])
	$5 = *(($3 + [8]))
	$9 = [1]
	goto $label$3 
	
.LABEL $label$4
	$8 = ($6 + [8])
	*($4 + [84]) = [0]
	$9 = [0]
	
.LABEL $label$3
	*($4 + [80]) = ($4 + [88])
	CALL eosio_assert($9, [8740])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$5), [9442])
	CALL eosio_assert(((int_64)*($7) >= (int_64)*($3)), [8337])
	$5 = *($0)
	if ( ((int_64)*($8) != (int_64)$2) ){ goto $label$7 }
	*($4 + [72]) = $0
	*($4 + [64]) = ($4 + [128])
	*($4 + [76]) = ($4 + [80])
	*($4 + [68]) = $3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9528])
	CALL $40(($4 + [136]), $6, $5, ($4 + [64]))
	$1 = *(($3 + [8]))
	*((($4 + [48]) + [8])) = $1
	$5 = *($3)
	*(($4 + [8])) = $1
	*($4) = $5
	*($4 + [48]) = $5
	CALL $8($0, $2, $4)
	$3 = *($4 + [112])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	*($4 + [72]) = $0
	*($4 + [64]) = ($4 + [128])
	*($4 + [76]) = ($4 + [80])
	*($4 + [68]) = $3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9528])
	CALL $41(($4 + [136]), $6, $5, ($4 + [64]))
	$1 = *(($3 + [8]))
	*((($4 + [32]) + [8])) = $1
	$5 = *($3)
	*((($4 + [16]) + [8])) = $1
	*($4 + [16]) = $5
	*($4 + [32]) = $5
	CALL $8($0, $2, ($4 + [16]))
	$3 = *($4 + [112])
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($4 + [116])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($4 + [112]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $3
	
.LABEL $label$8
	*($7) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$3 = *($4 + [160])
	if ( ($3 == 0) ){ goto $label$12 }
	$7 = ($4 + [164])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	CALL $7($0)
	CALL _ZdlPv($0)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$15 }
	$6 = *(($4 + [160]))
	goto $label$13 
	
.LABEL $label$14
	$6 = $3
	
.LABEL $label$13
	*($7) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($4 + [176])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth($2)
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$4 = *($0)
	*($3 + [24]) = $4
	*($3 + [32]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)7035938307668180992, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $2(($3 + [24]), $6)
	CALL eosio_assert(((int_32)*($5 + [264]) == (int_32)($3 + [24])), [10152])
	
.LABEL $label$1
	*($3 + [20]) = $5
	*($3 + [16]) = ($3 + [24])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8371])
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)*($0 + [30])), [8601])
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)$2), [8617])
	$6 = [1]
	if ( ((int_64)*($5 + [8]) == (int_64)$2) ){ goto $label$2 }
	$6 = ((int_64)*($5 + [16]) == (int_64)$2)
	
.LABEL $label$2
	CALL eosio_assert($6, [8631])
	$4 = *($0)
	if ( ((int_64)*(($5 + [8])) != (int_64)$2) ){ goto $label$5 }
	*($3 + [12]) = $0
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [9528])
	CALL $37(($3 + [24]), $5, $4, ($3 + [8]))
	CALL $25($0, $1)
	$6 = *($3 + [48])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	*($3 + [12]) = $0
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert([1], [9528])
	CALL $38(($3 + [24]), $5, $4, ($3 + [8]))
	CALL $25($0, $1)
	$6 = *($3 + [48])
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($3 + [52])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL $7($0)
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($3 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($5)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$5 = *(*($3) + [4])
	*($1 + [48]) = *($5 + [16])
	$3 = *(($3 + [4]))
	*($1 + [113]) = *(($3 + [35]))
	*($1 + [112]) = *(($3 + [31]))
	*($1 + [56]) = *($5 + [16])
	$6 = *($1)
	*($1 + [240]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$7 = ($1 + [8])
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	$8 = ($1 + [16])
	*($3 + [32]) = $8
	$9 = ($1 + [24])
	*($3 + [36]) = $9
	$10 = ($1 + [40])
	*($3 + [40]) = $10
	$11 = ($1 + [48])
	*($3 + [44]) = $11
	$12 = ($1 + [56])
	*($3 + [48]) = $12
	$13 = ($1 + [64])
	*($3 + [52]) = $13
	$14 = ($1 + [80])
	*($3 + [56]) = $14
	$15 = ($1 + [96])
	*($3 + [60]) = $15
	$16 = ($1 + [112])
	*($3 + [64]) = $16
	$17 = ($1 + [113])
	*($3 + [68]) = $17
	$18 = ($1 + [114])
	*($3 + [72]) = $18
	$19 = ($1 + [120])
	*($3 + [76]) = $19
	$20 = ($1 + [136])
	*($3 + [80]) = $20
	$21 = ($1 + [152])
	*($3 + [84]) = $21
	$22 = ($1 + [168])
	*($3 + [88]) = $22
	$23 = ($1 + [184])
	*($3 + [92]) = $23
	$24 = ($1 + [188])
	*($3 + [96]) = $24
	$25 = ($1 + [212])
	*($3 + [104]) = $25
	$26 = ($1 + [200])
	*($3 + [100]) = $26
	$27 = ($1 + [224])
	*($3 + [108]) = $27
	$28 = ($1 + [240])
	*($3 + [112]) = $28
	$29 = ($1 + [248])
	*($3 + [116]) = $29
	$30 = ($1 + [256])
	*($3 + [120]) = $30
	$31 = ($1 + [257])
	*($3 + [124]) = $31
	$32 = ($1 + [258])
	*($3 + [128]) = $32
	$33 = ($1 + [259])
	*($3 + [132]) = $33
	$34 = ($1 + [260])
	*($3 + [136]) = $34
	$35 = ($1 + [261])
	*($3 + [140]) = $35
	CALL $102(($3 + [24]), $3)
	$5 = *($3 + [16])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($5)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [32]) = $8
	*($3 + [36]) = $9
	*($3 + [40]) = $10
	*($3 + [44]) = $11
	*($3 + [48]) = $12
	*($3 + [52]) = $13
	*($3 + [56]) = $14
	*($3 + [60]) = $15
	*($3 + [64]) = $16
	*($3 + [68]) = $17
	*($3 + [72]) = $18
	*($3 + [76]) = $19
	*($3 + [80]) = $20
	*($3 + [84]) = $21
	*($3 + [88]) = $22
	*($3 + [92]) = $23
	*($3 + [96]) = $24
	*($3 + [24]) = $1
	*($3 + [104]) = $25
	*($3 + [100]) = $26
	*($3 + [108]) = $27
	*($3 + [112]) = $28
	*($3 + [116]) = $29
	*($3 + [120]) = $30
	*($3 + [124]) = $31
	*($3 + [128]) = $32
	*($3 + [132]) = $33
	*($3 + [136]) = $34
	*($3 + [140]) = $35
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

void .FUNC $78 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL prints([9269])
	CALL require_auth(*($0))
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($2 + [8])
	*($4 + [16]) = $1
	$7 = [0]
	$8 = CALL db_find_i64($5, $1, (int_64)-3665743569108320256, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$8) < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $3(($4 + [8]), $8)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [8])), [10152])
	
.LABEL $label$1
	$5 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9528])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [8])), [9563])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$5()), [9609])
	$1 = *($7 + [8])
	*($7 + [8]) = *(($2 + [8]))
	*($7) = *($2)
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8)), [9660])
	CALL eosio_assert([1], [9719])
	CALL memcpy(($4 + [48]), $7, [8])
	*($4 + [72]) = *($7 + [8])
	CALL eosio_assert([1], [9719])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	CALL db_update_i64(*($7 + [20]), $5, ($4 + [48]), [16])
	$7 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$2 }
	*($7) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$2
	$0 = *($4 + [32])
	if ( ($0 == 0) ){ goto $label$3 }
	$8 = ($4 + [36])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$6 }
	$7 = *(($4 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$7 = $0
	
.LABEL $label$4
	*($8) = $0
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$global$0 = ($4 + [80])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [352])
	$global$0 = $3
	CALL memory()
	*($3 + [336]) = [9214]
	*($3 + [340]) = CALL $139([9214])
	*($3 + [168]) = *($3 + [336])
	CALL $17(($3 + [344]), ($3 + [168]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [336]) = [9202]
	*($3 + [340]) = CALL $139([9202])
	*($3 + [160]) = *($3 + [336])
	CALL $17(($3 + [344]), ($3 + [160]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [332]) = [0]
	*($3 + [328]) = [1]
	*($3 + [152]) = *($3 + [328])
	CALL $80($0, (int_64)6138663591592764928, ($3 + [152]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$13 }
	if ( ((int_64)$2 <= (int_64)4921565167889678335) ){ goto $label$20 }
	if ( ((int_64)$2 > (int_64)6182744308183334911) ){ goto $label$19 }
	if ( ((int_64)$2 <= (int_64)5031766159042707455) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)5031766159042707456) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)5373097121656340480) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)5373097122083274752) ){ goto $label$13 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [2]
	*($3 + [136]) = *($3 + [184])
	CALL $81($1, $1, ($3 + [136]))
	CALL eosio_exit([0])
	
.LABEL $label$20
	if ( ((int_64)$2 <= (int_64)-4417341545057714177) ){ goto $label$18 }
	if ( ((int_64)$2 <= (int_64)3607571197753032703) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)3607571197753032704) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)3774836173654982656) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)4229443000054317056) ){ goto $label$13 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [3]
	*($3 + [32]) = *($3 + [288])
	CALL $82($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$19
	if ( ((int_64)$2 <= (int_64)6711084724409860095) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)6711084724409860096) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)7864006229016707072) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)9015421515604164608) ){ goto $label$13 }
	*($3 + [308]) = [0]
	*($3 + [304]) = [4]
	*($3 + [16]) = *($3 + [304])
	CALL $83($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$18
	if ( ((int_64)$2 > (int_64)-4994048474804349953) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-8462908903467778048) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-5071751370302816256) ){ goto $label$13 }
	*($3 + [276]) = [0]
	*($3 + [272]) = [5]
	*($3 + [48]) = *($3 + [272])
	CALL $82($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)4921565167889678336) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)5031766156897828864) ){ goto $label$13 }
	*($3 + [324]) = [0]
	*($3 + [320]) = [6]
	*($3) = *($3 + [320])
	CALL $84($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)-4417341545057714176) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$13 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [7]
	*($3 + [120]) = *($3 + [200])
	CALL $85($1, $1, ($3 + [120]))
	CALL eosio_exit([0])
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)6182744308183334912) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)6295352893788651520) ){ goto $label$13 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [8]
	*($3 + [128]) = *($3 + [192])
	CALL $86($1, $1, ($3 + [128]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-4994048474804349952) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4992623620032663552) ){ goto $label$13 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [9]
	*($3 + [88]) = *($3 + [232])
	CALL $87($1, $1, ($3 + [88]))
	
.LABEL $label$13
	CALL eosio_exit([0])
	
.LABEL $label$12
	*($3 + [316]) = [0]
	*($3 + [312]) = [10]
	*($3 + [8]) = *($3 + [312])
	CALL $88($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	*($3 + [228]) = [0]
	*($3 + [224]) = [11]
	*($3 + [96]) = *($3 + [224])
	CALL $89($1, $1, ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	*($3 + [284]) = [0]
	*($3 + [280]) = [12]
	*($3 + [40]) = *($3 + [280])
	CALL $86($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$9
	*($3 + [260]) = [0]
	*($3 + [256]) = [13]
	*($3 + [64]) = *($3 + [256])
	CALL $86($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [300]) = [0]
	*($3 + [296]) = [14]
	*($3 + [24]) = *($3 + [296])
	CALL $86($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [268]) = [0]
	*($3 + [264]) = [15]
	*($3 + [56]) = *($3 + [264])
	CALL $86($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [220]) = [0]
	*($3 + [216]) = [16]
	*($3 + [104]) = *($3 + [216])
	CALL $86($1, $1, ($3 + [104]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [252]) = [0]
	*($3 + [248]) = [17]
	*($3 + [72]) = *($3 + [248])
	CALL $86($1, $1, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [180]) = [0]
	*($3 + [176]) = [18]
	*($3 + [144]) = *($3 + [176])
	CALL $90($1, $1, ($3 + [144]))
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [244]) = [0]
	*($3 + [240]) = [19]
	*($3 + [80]) = *($3 + [240])
	CALL $91($1, $1, ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [212]) = [0]
	*($3 + [208]) = [20]
	*($3 + [112]) = *($3 + [208])
	CALL $83($1, $1, ($3 + [112]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($0 + [40]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [48]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9719])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth($2)
	*(($3 + [120])) = [0]
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	$4 = *($0)
	*($3 + [88]) = $4
	*($3 + [96]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)7035938307668180992, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $2(($3 + [88]), $6)
	CALL eosio_assert(((int_32)*($5 + [264]) == (int_32)($3 + [88])), [10152])
	
.LABEL $label$1
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [8371])
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)*($0 + [30])), [8601])
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)$2), [8617])
	$6 = [1]
	if ( ((int_64)*($5 + [8]) == (int_64)$2) ){ goto $label$2 }
	$6 = ((int_64)*($5 + [16]) == (int_64)$2)
	
.LABEL $label$2
	CALL eosio_assert($6, [8631])
	*(($3 + [80])) = [0]
	*($3 + [56]) = $2
	*($3 + [64]) = (int_64)-1
	$8 = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [48]) = *($0)
	$6 = CALL $139([8192])
	if ( ($6 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9275])
	goto $label$4 
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = (int_64)0
	
.LOOP $label$6:
	$9 = *(($6 + [8191]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9320])
	
.LABEL $label$7
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	$8 = ((int_64)$4 & (int_64)72057594037927935)
	
.LABEL $label$3
	CALL eosio_assert([1], [9373])
	$6 = [0]
	$4 = $8
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$10 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$4 = $10
	$9 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$4 = $10
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $9 ){ goto $label$12 }
	$9 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$9 = [0]
	
.LABEL $label$8
	CALL eosio_assert($9, [9422])
	$9 = *(($3 + [76]))
	$12 = *(($3 + [72]))
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$16:
	$6 = ($9 + [-24])
	$11 = *($6)
	if ( ((int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8) == (int_64)$8) ){ goto $label$15 }
	$9 = $6
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)($3 + [48])), [10152])
	*($3 + [44]) = $11
	*($3 + [40]) = ($3 + [48])
	$6 = (($3 + [40]) | [4])
	goto $label$13 
	
.LABEL $label$14
	$6 = CALL db_find_i64(*($3 + [48]), *(($3 + [56])), (int_64)-3665743569108320256, $8)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$17 }
	$11 = CALL $3(($3 + [48]), $6)
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)($3 + [48])), [10152])
	*($3 + [44]) = $11
	*($3 + [40]) = ($3 + [48])
	$6 = (($3 + [40]) | [4])
	goto $label$13 
	
.LABEL $label$17
	$11 = [0]
	*($3 + [44]) = [0]
	*($3 + [40]) = ($3 + [48])
	$6 = (($3 + [40]) | [4])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8653])
	$4 = *($0)
	if ( ((int_64)*(($5 + [8])) != (int_64)$2) ){ goto $label$19 }
	*($3 + [36]) = $0
	*($3 + [32]) = ($3 + [40])
	CALL eosio_assert($7, [9528])
	CALL $34(($3 + [88]), $5, $4, ($3 + [32]))
	goto $label$18 
	
.LABEL $label$19
	*($3 + [36]) = $0
	*($3 + [32]) = ($3 + [40])
	CALL eosio_assert($7, [9528])
	CALL $35(($3 + [88]), $5, $4, ($3 + [32]))
	
.LABEL $label$18
	$6 = *($6)
	$8 = *(($6 + [8]))
	*((($3 + [16]) + [8])) = $8
	$4 = *($6)
	*(($3 + [8])) = $8
	*($3 + [16]) = $4
	*($3) = $4
	CALL $8($0, $2, $3)
	CALL $12($0, $1)
	$11 = *($3 + [72])
	if ( ($11 == 0) ){ goto $label$20 }
	$12 = ($3 + [76])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$22 }
	
.LOOP $label$23:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$24 }
	CALL _ZdlPv($9)
	
.LABEL $label$24
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$23 }
	$6 = *(($3 + [72]))
	goto $label$21 
	
.LABEL $label$22
	$6 = $11
	
.LABEL $label$21
	*($12) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$20
	$11 = *($3 + [112])
	if ( ($11 == 0) ){ goto $label$25 }
	$12 = ($3 + [116])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$27 }
	
.LOOP $label$28:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$29 }
	CALL $7($9)
	CALL _ZdlPv($9)
	
.LABEL $label$29
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$28 }
	$6 = *(($3 + [112]))
	goto $label$26 
	
.LABEL $label$27
	$6 = $11
	
.LABEL $label$26
	*($12) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$25
	$global$0 = ($3 + [128])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $26($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $73(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [9563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [9609])
	$5 = *($1)
	CALL $108($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9660])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [16])
	*($3 + [32]) = $7
	$8 = ($1 + [24])
	*($3 + [36]) = $8
	$9 = ($1 + [40])
	*($3 + [40]) = $9
	$10 = ($1 + [48])
	*($3 + [44]) = $10
	$11 = ($1 + [56])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [80])
	*($3 + [56]) = $13
	$14 = ($1 + [96])
	*($3 + [60]) = $14
	$15 = ($1 + [112])
	*($3 + [64]) = $15
	$16 = ($1 + [113])
	*($3 + [68]) = $16
	$17 = ($1 + [114])
	*($3 + [72]) = $17
	$18 = ($1 + [120])
	*($3 + [76]) = $18
	$19 = ($1 + [136])
	*($3 + [80]) = $19
	$20 = ($1 + [152])
	*($3 + [84]) = $20
	$21 = ($1 + [168])
	*($3 + [88]) = $21
	$22 = ($1 + [184])
	*($3 + [92]) = $22
	$23 = ($1 + [188])
	*($3 + [96]) = $23
	$24 = ($1 + [212])
	*($3 + [104]) = $24
	$25 = ($1 + [200])
	*($3 + [100]) = $25
	$26 = ($1 + [224])
	*($3 + [108]) = $26
	$27 = ($1 + [240])
	*($3 + [112]) = $27
	$28 = ($1 + [248])
	*($3 + [116]) = $28
	$29 = ($1 + [256])
	*($3 + [120]) = $29
	$30 = ($1 + [257])
	*($3 + [124]) = $30
	$31 = ($1 + [258])
	*($3 + [128]) = $31
	$32 = ($1 + [259])
	*($3 + [132]) = $32
	$33 = ($1 + [260])
	*($3 + [136]) = $33
	$34 = ($1 + [261])
	*($3 + [140]) = $34
	CALL $102(($3 + [24]), $3)
	$35 = *($3 + [16])
	if ( ($35 <= [513]) ){ goto $label$2 }
	$4 = CALL $142($35)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($35 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $35)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $18
	*($3 + [80]) = $19
	*($3 + [84]) = $20
	*($3 + [88]) = $21
	*($3 + [92]) = $22
	*($3 + [96]) = $23
	*($3 + [24]) = $1
	*($3 + [104]) = $24
	*($3 + [100]) = $25
	*($3 + [108]) = $26
	*($3 + [112]) = $27
	*($3 + [116]) = $28
	*($3 + [120]) = $29
	*($3 + [124]) = $30
	*($3 + [128]) = $31
	*($3 + [132]) = $32
	*($3 + [136]) = $33
	*($3 + [140]) = $34
	CALL $103(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [268]), $2, $4, $35)
	if ( ((uint_32)$35 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $145($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [144])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [144])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}