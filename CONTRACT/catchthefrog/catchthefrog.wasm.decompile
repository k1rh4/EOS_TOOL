(data (i32.const 16896) "V1.3\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 16910) "eosio.token\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 17013) "frogfrogcoin\00")
(data (i32.const 17026) "sovmintofeos\00")
(data (i32.const 17039) "transfer\00")
(data (i32.const 17048) "status\00")
(data (i32.const 17055) "admin\00")
(data (i32.const 17061) "trigger\00")
(data (i32.const 17069) "frogmessage\00")
(data (i32.const 17081) "dogame\00")
(data (i32.const 17088) "string is too long to be a valid name\00")
(data (i32.const 17126) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17193) "character is not in allowed character set for names\00%lu\00")
(data (i32.const 17249) " from: \00%lld\00")
(data (i32.const 17262) " quantity: \00%llu\00")
(data (i32.const 17279) " symbol: \00")
(data (i32.const 17289) " memo: \00")
(data (i32.const 17297) "catch\00")
(data (i32.const 17303) "Symbol: \00")
(data (i32.const 17312) "Invalid Player!\00")
(data (i32.const 17329) "EOS\00")
(data (i32.const 17333) "FROG\00")
(data (i32.const 17338) "SOV\00")
(data (i32.const 17342) "No!\00")
(data (i32.const 17346) "Symbol2: \00: no conversion\00")
(data (i32.const 17372) "Must pay with EOS token!\00: out of range\00")
(data (i32.const 17412) "Contract EOS balance to low!\00")
(data (i32.const 17441) " minbet:\00")
(data (i32.const 17450) " maxbet:\00")
(data (i32.const 17459) " \00")
(data (i32.const 17461) "out of range!\00")
(data (i32.const 17475) " ++++ players_catch: \00")
(data (i32.const 17497) " - \00")
(data (i32.const 17501) " Wrong position! \00")
(data (i32.const 17519) "read\00")
(data (i32.const 17524) "get\00")
(data (i32.const 17528) ",\00")
(data (i32.const 17530) "string is too long to be a valid symbol_code\00")
(data (i32.const 17575) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17628) "unable to find key\00")
(data (i32.const 17647) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17698) "error reading iterator\00")
(data (i32.const 17721) " HASH:\00")
(data (i32.const 17728) " hashid:\00")
(data (i32.const 17737) " PLAYERS_CATCH2 : \00")
(data (i32.const 17756) " S:\00")
(data (i32.const 17760) " iterator_bet->hashid:\00")
(data (i32.const 17783) " Hash exist! \00")
(data (i32.const 17797) " game Existiert schon\00")
(data (i32.const 17819) " game will be created... \00")
(data (i32.const 17845) "cannot create objects in table of another contract\00")
(data (i32.const 17896) "write\00")
(data (i32.const 17902) "cannot pass end iterator to modify\00")
(data (i32.const 17937) "object passed to modify is not in multi_index\00")
(data (i32.const 17983) "cannot modify objects in table of another contract\00")
(data (i32.const 18034) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18093) " RGAME - \00")
(data (i32.const 18103) " VERSION: \00")
(data (i32.const 18114) " ADMIN_1 \00")
(data (i32.const 18124) " weiter1 \00")
(data (i32.const 18134) " weiter2 \00")
(data (i32.const 18144) " ADMIN...[\00")
(data (i32.const 18155) "]\c2\a0\00")
(data (i32.const 18159) " first:...[\00")
(data (i32.const 18171) "test\00")
(data (i32.const 18176) " test... \00")
(data (i32.const 18186) "init\00")
(data (i32.const 18191) " Init... \00")
(data (i32.const 18201) " AAA \00")
(data (i32.const 18207) " BBB \00")
(data (i32.const 18213) " CCC \00")
(data (i32.const 18219) " globals wird angelegt2b... \00")
(data (i32.const 18248) "setgameid\00")
(data (i32.const 18258) " setgameid... \00")
(data (i32.const 18273) "setgameid: \00")
(data (i32.const 18285) "setminmax\00")
(data (i32.const 18295) " setminmax... \00")
(data (i32.const 18310) "setminmax -  minbet:\00")
(data (i32.const 18331) " maxbet: \00")
(data (i32.const 18341) "setminmaxfrog\00")
(data (i32.const 18355) " setminmax frog... \00")
(data (i32.const 18375) "setminmaxsov\00")
(data (i32.const 18388) " setminmax sov... \00")
(data (i32.const 18407) "reset\00")
(data (i32.const 18413) "Reset \00")
(data (i32.const 18420) " FIN-Reset \00")
(data (i32.const 18432) "resetgames\00")
(data (i32.const 18443) " Reset ALL Games2 \00")
(data (i32.const 18462) " FIN1-Reset Games \00")
(data (i32.const 18481) " FIN-Reset Games \00")
(data (i32.const 18499) "cannot pass end iterator to erase\00")
(data (i32.const 18533) "cannot increment end iterator\00")
(data (i32.const 18563) "object passed to erase is not in multi_index\00")
(data (i32.const 18608) "cannot erase objects in table of another contract\00")
(data (i32.const 18658) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18711) "Trigger\00")
(data (i32.const 18719) "frogtrigger1\00")
(data (i32.const 18732) "missing required authority of Admin\00")
(data (i32.const 18768) " TRIGGER...[\00")
(data (i32.const 18781) " Hash does not exist! \00")
(data (i32.const 18804) " CONTINUE... \00")
(data (i32.const 18818) " Game not open! \00")
(data (i32.const 18835) " CONTINUE2... \00")
(data (i32.const 18850) " FROGPOS: \00")
(data (i32.const 18861) " frog_position: \00")
(data (i32.const 18878) " WIN! \00")
(data (i32.const 18896) "\00\00\00\00\00\00\00\00\00\00\c5B\00\00EB\ecQ\03B=\n\c5A\9a\99\9dA)\\\83A\b8\1eaA\c3\f5DA=\n/A\9a\99\1dA33\0fA)\\\03A\\\8f\f2@\aeG\e1@q=\d2@\b8\1e\c5@\aeG\b9@=\n\af@\8f\c2\a5@\a4p\9d@{\14\96@)\\\8f@\c3\f5\88@33\83@\f6(|@\\\8fr@\9a\99i@\aeGa@\9a\99Y@\85\ebQ@\1f\85K@\b8\1eE@R\b8>@\9a\999@\n\d73@)\\/@q=*@\8f\c2%@\85\eb!@\a4p\1d@\9a\99\19@ff\16@\\\8f\12@)\\\0f@\f6(\0c@\c3\f5\08@ff\06@33\03@\d7\a3\00@\f6(\fc?=\n\f7?\85\eb\f1?{\14\ee?\c3\f5\e8?\b8\1e\e5?\aeG\e1?\a4p\dd?\9a\99\d9?\8f\c2\d5?\85\eb\d1?{\14\ce?\1f\85\cb?\14\ae\c7?\b8\1e\c5?\\\8f\c2?R\b8\be?\f6(\bc?\9a\99\b9?=\n\b7?\e1z\b4?\85\eb\b1?)\\\af?\cd\cc\ac?q=\aa?\14\ae\a7?ff\a6?\n\d7\a3?\aeG\a1?\00\00\a0?\a4p\9d?\f6(\9c?\9a\99\99?\ecQ\98?\8f\c2\95?\e1z\94?33\93?\d7\a3\90?)\\\8f?{\14\8e?\1f\85\8b?q=\8a?\c3\f5\88?\14\ae\87?ff\86?\b8\1e\85?\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 19300) "You win roll under \00")
(data (i32.const 19320) ", frog-roll\00")
(data (i32.const 19332) ". Congratulations! Catch the frog again! (Game \00")
(data (i32.const 19380) ")\00")
(data (i32.const 19382) " LOSE \00")
(data (i32.const 19389) " amount: \00")
(data (i32.const 19399) " faktor: \00")
(data (i32.const 19409) " PAYOUT: (\00")
(data (i32.const 19420) ") \00")
(data (i32.const 19423) "catchthefrog.com referral bonus\00")
(data (i32.const 19455) "send token to pool\00")
(data (i32.const 19474) " TEAM WINS! \00")
(data (i32.const 19487) "Frog dividends\00")
(data (i32.const 19502) "active\00")
(data (i32.const 19509) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 19558) "invalid symbol name\00")
(data (i32.const 19578) "xtransfer\00")
(data (i32.const 19588) " Clean Games... \00")
(data (i32.const 19605) " Greatest: \00")
(data (i32.const 19617) "frogdividend\00")
(data (i32.const 19632) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19712) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$3 (param i32)))
(import "env" "printn" (func $fimport$4 (param i64)))
(import "env" "printi" (func $fimport$5 (param i64)))
(import "env" "printui" (func $fimport$6 (param i64)))
(import "env" "prints_l" (func $fimport$7 (param i32 i32)))
(import "env" "memcpy" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$10 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "has_auth" (func $fimport$13 (param i64) (result i32)))
(import "env" "printsf" (func $fimport$14 (param f32)))
(import "env" "require_recipient" (func $fimport$15 (param i64)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$17 (result i64)))
(import "env" "db_idx64_lowerbound" (func $fimport$18 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$19 (result i64)))
(import "env" "db_store_i64" (func $fimport$20 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$21 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$23 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$24 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$25 (param i32)))
(import "env" "tapos_block_prefix" (func $fimport$26 (result i32)))
(import "env" "tapos_block_num" (func $fimport$27 (result i32)))
(import "env" "sha256" (func $fimport$28 (param i32 i32 i32)))
(import "env" "send_inline" (func $fimport$29 (param i32 i32)))
(import "env" "db_idx64_update" (func $fimport$30 (param i32 i64 i32)))
(import "env" "abort" (func $fimport$31))
(import "env" "memset" (func $fimport$32 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$33 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$42 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$44 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$45 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$46 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$48 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$50 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$51 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$52 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $2))
(export "_ZdlPv" (func $63))
(export "_Znwj" (func $61))
(export "_Znaj" (func $62))
(export "_ZdaPv" (func $64))
(export "_ZnwjSt11align_val_t" (func $65))
(export "_ZnajSt11align_val_t" (func $66))
(export "_ZdlPvSt11align_val_t" (func $67))
(export "_ZdaPvSt11align_val_t" (func $68))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $4 $6 $7 $8 $9 $11 $1 $95 $97)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19969))
(global $global$2 i32 (i32.const 19969))


int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $94([9], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [8] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $96($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $96($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $96($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $96($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19632]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $96($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $96($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $96($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $90 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $91 ()
{
	return [8208]
}

void .FUNC $92 (int_32 $0)
{
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $110([8216])
	$3 = *([0] + [8224])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8232]
	*([0] + [8224]) = [8232]
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $117([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8224])
	*([0] + [8224]) = $3
	*([0] + [8228]) = [0]
	
.LABEL $label$2
	*([0] + [8228]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $111([8216])
	return [0]
	
.LABEL $label$1
	CALL $111([8216])
	return [-1]
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $116($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16927])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$17()), [17845])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([112])) + [8]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24]) = [0]
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72]) = [0]
	*($3 + [88]) = (int_64)0
	*($3 + [96]) = $1
	CALL $46(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [100])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $47(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$4
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17896])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $50($0, ($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [52]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [60]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $50($0, ($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17519])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17519])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $35($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17519])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17519])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [52]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $35($0, ($1 + [64]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17519])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17519])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $90($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17698])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $114($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17519])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [17519])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $118($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $90($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [17524])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $41($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17519])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $90($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	CALL $71(($1 + [16]), *($4 + [8]))
	*($1 + [32]) = *(*($4 + [12]))
	*($1 + [48]) = *(*($4 + [20]))
	*($1 + [40]) = *(*($4 + [16]))
	$6 = CALL current_time()
	*($1 + [56]) = (int_64)4290672328704
	*($1 + [52]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	CALL $71(($1 + [64]), *($4 + [24]))
	*($1 + [80]) = (int_64)0
	*($1 + [88]) = *(*($4 + [28]))
	$4 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [64])
	$6 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$7 = *(($1 + [64]))
	$7 = ( *(($1 + [68])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$4 = ($7 + $4)
	$6 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $114($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	CALL $49(($3 + [8]), $1)
	$6 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($5 + [8]), (int_64)7035938076145107968, *(*($0 + [8])), $6, $2, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL $118($2)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$6 = *(($5 + [8]))
	$8 = *(*(($0 + [8])))
	$9 = *($1)
	*($3 + [24]) = *(($1 + [32]))
	*($1 + [104]) = CALL db_idx64_store($6, (int_64)7035938076145107968, $8, $9, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $90($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17519])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17519])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17519])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [44]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	float_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	$1 = ($global$0 - [464])
	$global$0 = $1
	CALL prints([18711])
	$2 = [1]
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	*($1 + [448]) = [18719]
	*($1 + [452]) = CALL $109([18719])
	*($1 + [16]) = *($1 + [448])
	$2 = CALL has_auth(*(CALL $3(($1 + [456]), ($1 + [16]))))
	
.LABEL $label$1
	CALL eosio_assert($2, [18732])
	CALL $17(($1 + [432]))
	CALL prints([18134])
	CALL prints([18768])
	$2 = *($1 + [432])
	$3 = ($2 & [1])
	CALL prints_l(( *($1 + [440]) ? (($1 + [432]) | [1]) : $3 ), ( *($1 + [436]) ? uint_32($2 >> [1]) : $3 ))
	CALL prints([18155])
	*($1 + [424]) = [0]
	*($1 + [416]) = (int_64)0
	$2 = CALL $70(($1 + [400]), ($1 + [432]))
	CALL $13($0, ($1 + [416]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$2
	$2 = *($1 + [416])
	CALL prints([18159])
	$3 = *($2)
	$4 = ($3 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $4 ), ( *($2 + [4]) ? uint_32($3 >> [1]) : $4 ))
	CALL prints([18155])
	$2 = *($1 + [416])
	$3 = *($2)
	if ( ($3 & [1]) ){ goto $label$4 }
	$3 = uint_32($3 >> [1])
	$2 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($2 + [4])
	$2 = *($2 + [8])
	
.LABEL $label$3
	*($1 + [388]) = $3
	*($1 + [384]) = $2
	*($1 + [8]) = *($1 + [384])
	*($1 + [376]) = *(CALL $3(($1 + [392]), ($1 + [8])))
	CALL prints([17728])
	CALL printui(*($1 + [376]))
	CALL prints([17459])
	$2 = [0]
	*(($1 + [368])) = [0]
	*($1 + [352]) = (int_64)-1
	*($1 + [360]) = (int_64)0
	*($1 + [372]) = [0]
	$5 = *($0)
	*($1 + [336]) = $5
	*($1 + [344]) = $5
	*($1 + [328]) = ($1 + [336])
	CALL $28(($1 + [256]), ($1 + [328]), ($1 + [376]))
	$3 = *($1 + [260])
	if ( ($3 == 0) ){ goto $label$5 }
	$2 = ( $3 ? [0] : ((int_64)*($1 + [376]) == (int_64)*($3 + [32])) )
	
.LABEL $label$5
	CALL prints([17760])
	CALL printui(*($2 + [32]))
	CALL prints([17459])
	CALL eosio_assert(((int_64)*($2 + [32]) == (int_64)*($1 + [376])), [18781])
	CALL prints([18804])
	CALL eosio_assert(((int_32)*($2 + [60]) == (int_32)[999]), [18818])
	CALL prints([18835])
	$4 = CALL $70(($1 + [288]), (*($1 + [416]) + [12]))
	$3 = CALL $70(($1 + [304]), *($1 + [416]))
	$5 = CALL $29($0, $3, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$6
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$7
	*($1 + [320]) = $5
	CALL prints([18850])
	CALL printi($5)
	CALL prints([17459])
	$6 = *($2 + [40])
	$3 = *($2 + [48])
	CALL prints([18861])
	CALL printi($5)
	$7 = (CASTING uint_64)(uint_32 $3)
	*($1 + [284]) = ((int_64)$5 < (int_64)$7)
	*($1 + [272]) = (int_64)0
	if ( ((int_64)$5 >= (int_64)$7) ){ goto $label$11 }
	CALL prints([18878])
	$4 = (($3 << [2]) + [18896])
	$8 = ((float_32)*($4) * (float_32)(CASTING float_32)(uint_64 $6))
	if ( ((float_32)(float_32)|$8| < (float_32)(float_32)9223372036854775808) ){ goto $label$10 }
	$5 = (int_64)-9223372036854775808
	goto $label$9 
	
.LABEL $label$11
	CALL prints([19382])
	$4 = (($3 << [2]) + [18896])
	goto $label$8 
	
.LABEL $label$10
	$5 = (Rounds 0)($8)
	
.LABEL $label$9
	*($1 + [272]) = $5
	CALL $85(($1 + [256]), *($1 + [320]))
	CALL $84(($1 + [240]), $3)
	CALL $86(($1 + [224]), *($2))
	CALL $80(($1 + [128]), [19300], ($1 + [240]))
	$3 = CALL $77(($1 + [128]), [19320])
	$9 = ($3 + [8])
	*((($1 + [144]) + [8])) = *($9)
	*($1 + [144]) = *($3)
	*($3) = (int_64)0
	*($9) = [0]
	$3 = *($1 + [256])
	$9 = ($3 & [1])
	$3 = CALL $78(($1 + [144]), ( *($1 + [264]) ? (($1 + [256]) | [1]) : $9 ), ( *($1 + [260]) ? uint_32($3 >> [1]) : $9 ))
	$9 = ($3 + [8])
	*((($1 + [160]) + [8])) = *($9)
	*($1 + [160]) = *($3)
	*($3) = (int_64)0
	*($9) = [0]
	$3 = CALL $77(($1 + [160]), [19332])
	$9 = ($3 + [8])
	*((($1 + [176]) + [8])) = *($9)
	*($1 + [176]) = *($3)
	*($3) = (int_64)0
	*($9) = [0]
	$3 = *($1 + [224])
	$9 = ($3 & [1])
	$3 = CALL $78(($1 + [176]), ( *($1 + [232]) ? (($1 + [224]) | [1]) : $9 ), ( *($1 + [228]) ? uint_32($3 >> [1]) : $9 ))
	$9 = ($3 + [8])
	*((($1 + [192]) + [8])) = *($9)
	*($1 + [192]) = *($3)
	*($3) = (int_64)0
	*($9) = [0]
	$3 = CALL $77(($1 + [192]), [19380])
	$9 = ($3 + [8])
	*((($1 + [208]) + [8])) = *($9)
	*($1 + [208]) = *($3)
	*($3) = (int_64)0
	*($9) = [0]
	if ( (*($1 + [192]) & [1]) ){ goto $label$20 }
	if ( (*($1 + [176]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*($1 + [200]))
	if ( ((*($1 + [176]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($1 + [184]))
	$3 = [1]
	if ( ((*($1 + [160]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$3 = [1]
	if ( (*($1 + [160]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($1 + [144]) & $3) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($1 + [168]))
	if ( ((*($1 + [144]) & $3) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($1 + [152]))
	$9 = [1]
	if ( (*($1 + [128]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$9 = [1]
	if ( ((*($1 + [128]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($1 + [136]))
	
.LABEL $label$12
	$3 = ($2 + [64])
	$12 = *($2 + [64])
	$11 = ($2 + [68])
	$10 = CALL $109([17329])
	if ( ((int_32)$10 != (int_32)( *($11) ? uint_32($12 >> $9) : ($12 & $9) )) ){ goto $label$21 }
	if ( CALL $79($3, [0], [-1], [17329], $10) ){ goto $label$21 }
	$9 = CALL $70(($1 + [112]), ($1 + [208]))
	CALL $30($0, *($2 + [8]), *($1 + [272]), $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$21
	$9 = *($3)
	$12 = CALL $109([17333])
	if ( ((int_32)$12 != (int_32)( *($11) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$22 }
	if ( CALL $79($3, [0], [-1], [17333], $12) ){ goto $label$22 }
	$9 = CALL $70(($1 + [96]), ($1 + [208]))
	CALL $31($0, *($2 + [8]), *($1 + [272]), $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$22
	$9 = *(($2 + [64]))
	$11 = CALL $109([17338])
	if ( ((int_32)$11 != (int_32)( *(($2 + [68])) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$23 }
	if ( CALL $79($3, [0], [-1], [17338], $11) ){ goto $label$23 }
	$3 = CALL $70(($1 + [80]), ($1 + [208]))
	CALL $32($0, *($2 + [8]), *($1 + [272]), $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$23
	if ( (*($1 + [208]) & [1]) ){ goto $label$29 }
	if ( (*($1 + [224]) & [1]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL _ZdlPv(*($1 + [216]))
	if ( ((*($1 + [224]) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*(($1 + [232])))
	$3 = [1]
	if ( ((*($1 + [240]) & [1]) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$3 = [1]
	if ( (*($1 + [240]) & [1]) ){ goto $label$25 }
	
.LABEL $label$26
	if ( ((*($1 + [256]) & $3) == 0) ){ goto $label$8 }
	goto $label$24 
	
.LABEL $label$25
	CALL _ZdlPv(*($1 + [248]))
	if ( ((*($1 + [256]) & $3) == 0) ){ goto $label$8 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($1 + [264])))
	
.LABEL $label$8
	CALL prints([19389])
	CALL printui($6)
	CALL prints([17459])
	CALL prints([19399])
	CALL printsf(*($4))
	CALL prints([17459])
	CALL prints([19409])
	CALL printi(*($1 + [272]))
	CALL prints([19420])
	if ( ((int_64)*($1 + [320]) <= (int_64)95) ){ goto $label$36 }
	*(($1 + [264])) = [0]
	*($1 + [256]) = (int_64)0
	$3 = CALL $109([17328])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$35 }
	*($1 + [256]) = ($3 << [1])
	$4 = (($1 + [256]) | [1])
	if ( $3 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$4 = ($2 + [68])
	$3 = ($2 + [64])
	goto $label$32 
	
.LABEL $label$35
	$9 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*($1 + [256]) = ($9 | [1])
	*($1 + [264]) = $4
	*($1 + [260]) = $3
	
.LABEL $label$34
	CALL memcpy($4, [17328], $3)
	
.LABEL $label$33
	*(($4 + $3)) = [0]
	$3 = ($2 + [64])
	$9 = *($2 + [64])
	$4 = ($2 + [68])
	$11 = CALL $109([17329])
	if ( ((int_32)$11 != (int_32)( *($4) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$37 }
	if ( CALL $79($3, [0], [-1], [17329], $11) ){ goto $label$37 }
	$13 = (CASTING float_64)(uint_64 $6)
	$14 = ((float_64)$13 * (float_64)(float_64)0.5)
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$39 }
	$5 = (int_64)0
	goto $label$38 
	
.LABEL $label$39
	$5 = (Rounds 0)($14)
	
.LABEL $label$38
	$9 = CALL $70(($1 + [64]), ($1 + [256]))
	CALL $30($0, *($0 + [32]), $5, $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$40
	*($1 + [56]) = [17328]
	*($1 + [60]) = CALL $109([17328])
	*($1) = *($1 + [56])
	$9 = CALL $3(($1 + [240]), $1)
	if ( ((int_64)*($2 + [88]) == (int_64)*($9)) ){ goto $label$41 }
	CALL $74(($1 + [256]), [19423])
	$5 = *(($2 + [88]))
	$14 = ((float_64)$13 * (float_64)(float_64)0.05)
	if ( (((float_64)$14 < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$43 }
	$7 = (int_64)0
	goto $label$42 
	
.LABEL $label$43
	$7 = (Rounds 0)($14)
	
.LABEL $label$42
	$9 = CALL $70(($1 + [40]), ($1 + [256]))
	CALL $30($0, $5, $7, $9)
	if ( ((*($9) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$41
	CALL prints([19455])
	
.LABEL $label$37
	CALL prints([19474])
	if ( ((*($1 + [256]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($1 + [264]))
	
.LABEL $label$32
	$4 = *($3)
	$9 = CALL $109([17329])
	if ( ((int_32)$9 != (int_32)( *($4) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$44 }
	if ( CALL $79($3, [0], [-1], [17329], $9) ){ goto $label$44 }
	*(($1 + [264])) = [0]
	*($1 + [256]) = (int_64)0
	$3 = CALL $109([19487])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$30 }
	$5 = ((int_64)$6 * (int_64)100)
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$47 }
	*($1 + [256]) = ($3 << [1])
	$4 = (($1 + [256]) | [1])
	if ( $3 ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$9 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($9)
	*($1 + [256]) = ($9 | [1])
	*($1 + [264]) = $4
	*($1 + [260]) = $3
	
.LABEL $label$46
	CALL memcpy($4, [19487], $3)
	
.LABEL $label$45
	*(($4 + $3)) = [0]
	$3 = CALL $70(($1 + [24]), ($1 + [256]))
	CALL $31($0, *($2 + [8]), $5, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$48
	if ( ((*($1 + [256]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*($1 + [264]))
	
.LABEL $label$44
	$5 = *($2)
	$3 = *(($1 + [364]))
	$9 = *(($1 + [360]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$50 }
	
.LOOP $label$52:
	$2 = ($3 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$5) ){ goto $label$51 }
	$3 = $2
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$50 }
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)($1 + [336])), [17647])
	goto $label$49 
	
.LABEL $label$50
	$4 = [0]
	$2 = CALL db_find_i64(*($1 + [336]), *(($1 + [344])), (int_64)7035938076145107968, $5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$49 }
	$4 = CALL $26(($1 + [336]), $2)
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)($1 + [336])), [17647])
	
.LABEL $label$49
	$5 = *($0)
	*($1 + [260]) = ($1 + [284])
	*($1 + [256]) = ($1 + [320])
	*($1 + [264]) = ($1 + [272])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [17902])
	CALL $33(($1 + [336]), $4, $5, ($1 + [256]))
	CALL $34($0)
	$4 = *($1 + [360])
	if ( ($4 == 0) ){ goto $label$53 }
	$9 = ($1 + [364])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$55 }
	
.LOOP $label$56:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$57 }
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$58 }
	CALL _ZdlPv(*(($2 + [72])))
	
.LABEL $label$58
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$59 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$59
	CALL _ZdlPv($2)
	
.LABEL $label$57
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$56 }
	$2 = *(($1 + [360]))
	goto $label$54 
	
.LABEL $label$55
	$2 = $4
	
.LABEL $label$54
	*($9) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$53
	$4 = *($1 + [416])
	if ( ($4 == 0) ){ goto $label$60 }
	$3 = *($1 + [420])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$62 }
	
.LOOP $label$63:
	$2 = ($3 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$64
	$3 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$63 }
	$2 = *($1 + [416])
	goto $label$61 
	
.LABEL $label$62
	$2 = $4
	
.LABEL $label$61
	*($1 + [420]) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$60
	if ( ((*($1 + [432]) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*(($1 + [440])))
	
.LABEL $label$65
	$global$0 = ($1 + [464])
	return (unreachable)
	
.LABEL $label$31
	CALL $69(($1 + [256]))
	
.LABEL $label$30
	CALL $69(($1 + [256]))
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_recipient($1)
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	CALL prints([18093])
	CALL prints([18103])
	$1 = *([0] + [8192])
	$2 = ($1 & [1])
	CALL prints_l(( *([0] + [8200]) ? [8193] : $2 ), ( *([0] + [8196]) ? uint_32($1 >> [1]) : $2 ))
	CALL prints([17459])
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [144])
	$global$0 = $1
	CALL prints([18114])
	CALL require_auth(*($0))
	CALL prints([18124])
	CALL $17(($1 + [120]))
	CALL prints([18134])
	CALL prints([18144])
	$2 = *($1 + [120])
	$3 = ($2 & [1])
	CALL prints_l(( *($1 + [128]) ? (($1 + [120]) | [1]) : $3 ), ( *($1 + [124]) ? uint_32($2 >> [1]) : $3 ))
	CALL prints([18155])
	*($1 + [112]) = [0]
	*($1 + [104]) = (int_64)0
	$2 = CALL $70(($1 + [88]), ($1 + [120]))
	CALL $13($0, ($1 + [104]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$2 = *($1 + [104])
	CALL prints([18159])
	$3 = *($2)
	$4 = ($3 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $4 ), ( *($2 + [4]) ? uint_32($3 >> [1]) : $4 ))
	CALL prints([18155])
	$2 = *($1 + [104])
	$3 = *($2)
	$4 = CALL $109([18171])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$2 }
	if ( CALL $79($2, [0], [-1], [18171], $4) ){ goto $label$2 }
	CALL prints([18176])
	
.LABEL $label$2
	$2 = *($1 + [104])
	$3 = *($2)
	$4 = CALL $109([18186])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$3 }
	if ( CALL $79($2, [0], [-1], [18186], $4) ){ goto $label$3 }
	CALL prints([18191])
	*($1 + [136]) = [0]
	CALL prints([18201])
	*(($1 + [80])) = [0]
	*($1 + [64]) = (int_64)-1
	*($1 + [72]) = (int_64)0
	$5 = *($0)
	*($1 + [48]) = $5
	*($1 + [56]) = $5
	CALL prints([18207])
	CALL prints([18213])
	CALL prints([18219])
	$5 = *($0)
	*($1 + [40]) = ($1 + [136])
	CALL $18($1, ($1 + [48]), $5, ($1 + [40]))
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$3 }
	$6 = ($1 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($1 + [72]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $4
	
.LABEL $label$4
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$2 = *($1 + [104])
	$3 = *($2)
	$4 = CALL $109([18248])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$8 }
	if ( CALL $79($2, [0], [-1], [18248], $4) ){ goto $label$8 }
	CALL prints([18258])
	$2 = *($1 + [104])
	if ( (*($2 + [12]) & [1]) ){ goto $label$10 }
	$2 = (($2 + [12]) + [1])
	goto $label$9 
	
.LABEL $label$10
	$2 = *(($2 + [20]))
	
.LABEL $label$9
	*($1) = (CASTING int_64)(int_32 CALL $99($2))
	CALL prints([18273])
	CALL printui(*($1))
	*(($1 + [80])) = [0]
	*($1 + [64]) = (int_64)-1
	$5 = *($0)
	*($1 + [48]) = $5
	*($1 + [56]) = $5
	*($1 + [72]) = (int_64)0
	$2 = [0]
	$3 = CALL db_find_i64($5, $5, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$11 }
	$2 = CALL $15(($1 + [48]), $3)
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)($1 + [48])), [17647])
	
.LABEL $label$11
	$5 = *($0)
	*($1 + [136]) = $1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17902])
	CALL $19(($1 + [48]), $2, $5, ($1 + [136]))
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$8 }
	$6 = ($1 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($1 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $4
	
.LABEL $label$12
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$2 = *($1 + [104])
	$3 = *($2)
	$4 = CALL $109([18285])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$16 }
	if ( CALL $79($2, [0], [-1], [18285], $4) ){ goto $label$16 }
	CALL prints([18295])
	$2 = *($1 + [104])
	if ( (*($2 + [12]) & [1]) ){ goto $label$18 }
	$2 = (($2 + [12]) + [1])
	goto $label$17 
	
.LABEL $label$18
	$2 = *(($2 + [20]))
	
.LABEL $label$17
	*($1 + [136]) = CALL $99($2)
	$2 = *($1 + [104])
	if ( (*($2 + [24]) & [1]) ){ goto $label$20 }
	$2 = (($2 + [24]) + [1])
	goto $label$19 
	
.LABEL $label$20
	$2 = *(($2 + [32]))
	
.LABEL $label$19
	*($1 + [40]) = CALL $99($2)
	CALL prints([18310])
	CALL printui(*($1 + [136]))
	CALL prints([18331])
	CALL printui(*($1 + [40]))
	*(($1 + [80])) = [0]
	*($1 + [64]) = (int_64)-1
	$5 = *($0)
	*($1 + [48]) = $5
	*($1 + [56]) = $5
	*($1 + [72]) = (int_64)0
	$2 = [0]
	$3 = CALL db_find_i64($5, $5, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$21 }
	$2 = CALL $15(($1 + [48]), $3)
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)($1 + [48])), [17647])
	
.LABEL $label$21
	$5 = *($0)
	*($1 + [4]) = ($1 + [40])
	*($1) = ($1 + [136])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17902])
	CALL $20(($1 + [48]), $2, $5, $1)
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$16 }
	$6 = ($1 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$23 }
	
.LOOP $label$24:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$25 }
	CALL _ZdlPv($3)
	
.LABEL $label$25
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$24 }
	$2 = *(($1 + [72]))
	goto $label$22 
	
.LABEL $label$23
	$2 = $4
	
.LABEL $label$22
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$16
	$2 = *($1 + [104])
	$3 = *($2)
	$4 = CALL $109([18341])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$26 }
	if ( CALL $79($2, [0], [-1], [18341], $4) ){ goto $label$26 }
	CALL prints([18355])
	$2 = *($1 + [104])
	if ( (*($2 + [12]) & [1]) ){ goto $label$28 }
	$2 = (($2 + [12]) + [1])
	goto $label$27 
	
.LABEL $label$28
	$2 = *(($2 + [20]))
	
.LABEL $label$27
	*($1 + [136]) = CALL $99($2)
	$2 = *($1 + [104])
	if ( (*($2 + [24]) & [1]) ){ goto $label$30 }
	$2 = (($2 + [24]) + [1])
	goto $label$29 
	
.LABEL $label$30
	$2 = *(($2 + [32]))
	
.LABEL $label$29
	*($1 + [40]) = CALL $99($2)
	CALL prints([18310])
	CALL printui(*($1 + [136]))
	CALL prints([18331])
	CALL printui(*($1 + [40]))
	*(($1 + [80])) = [0]
	*($1 + [64]) = (int_64)-1
	$5 = *($0)
	*($1 + [48]) = $5
	*($1 + [56]) = $5
	*($1 + [72]) = (int_64)0
	$2 = [0]
	$3 = CALL db_find_i64($5, $5, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$31 }
	$2 = CALL $15(($1 + [48]), $3)
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)($1 + [48])), [17647])
	
.LABEL $label$31
	$5 = *($0)
	*($1 + [4]) = ($1 + [40])
	*($1) = ($1 + [136])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17902])
	CALL $21(($1 + [48]), $2, $5, $1)
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$26 }
	$6 = ($1 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$33 }
	
.LOOP $label$34:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$35 }
	CALL _ZdlPv($3)
	
.LABEL $label$35
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$34 }
	$2 = *(($1 + [72]))
	goto $label$32 
	
.LABEL $label$33
	$2 = $4
	
.LABEL $label$32
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$26
	$2 = *($1 + [104])
	$3 = *($2)
	$4 = CALL $109([18375])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$36 }
	if ( CALL $79($2, [0], [-1], [18375], $4) ){ goto $label$36 }
	CALL prints([18388])
	$2 = *($1 + [104])
	if ( (*($2 + [12]) & [1]) ){ goto $label$38 }
	$2 = (($2 + [12]) + [1])
	goto $label$37 
	
.LABEL $label$38
	$2 = *(($2 + [20]))
	
.LABEL $label$37
	*($1 + [136]) = CALL $99($2)
	$2 = *($1 + [104])
	if ( (*($2 + [24]) & [1]) ){ goto $label$40 }
	$2 = (($2 + [24]) + [1])
	goto $label$39 
	
.LABEL $label$40
	$2 = *(($2 + [32]))
	
.LABEL $label$39
	*($1 + [40]) = CALL $99($2)
	CALL prints([18310])
	CALL printui(*($1 + [136]))
	CALL prints([18331])
	CALL printui(*($1 + [40]))
	*(($1 + [80])) = [0]
	*($1 + [64]) = (int_64)-1
	$5 = *($0)
	*($1 + [48]) = $5
	*($1 + [56]) = $5
	*($1 + [72]) = (int_64)0
	$2 = [0]
	$3 = CALL db_find_i64($5, $5, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$41 }
	$2 = CALL $15(($1 + [48]), $3)
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)($1 + [48])), [17647])
	
.LABEL $label$41
	$5 = *($0)
	*($1 + [4]) = ($1 + [40])
	*($1) = ($1 + [136])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17902])
	CALL $22(($1 + [48]), $2, $5, $1)
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$36 }
	$6 = ($1 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$43 }
	
.LOOP $label$44:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$45 }
	CALL _ZdlPv($3)
	
.LABEL $label$45
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$44 }
	$2 = *(($1 + [72]))
	goto $label$42 
	
.LABEL $label$43
	$2 = $4
	
.LABEL $label$42
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$36
	$2 = *($1 + [120])
	$3 = CALL $109([18407])
	if ( ((int_32)$3 != (int_32)( *($1 + [124]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$46 }
	if ( CALL $79(($1 + [120]), [0], [-1], [18407], $3) ){ goto $label$46 }
	CALL prints([18413])
	*(($1 + [80])) = [0]
	*($1 + [64]) = (int_64)-1
	$5 = *($0)
	*($1 + [48]) = $5
	*($1 + [56]) = $5
	*($1 + [72]) = (int_64)0
	$2 = CALL db_lowerbound_i64($5, $5, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$47 }
	$3 = CALL $15(($1 + [48]), $2)
	
.LOOP $label$48:
	CALL eosio_assert([1], [18499])
	CALL eosio_assert([1], [18533])
	$2 = [0]
	$4 = CALL db_next_i64(*($3 + [52]), $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$49 }
	$2 = CALL $15(($1 + [48]), $4)
	
.LABEL $label$49
	CALL $23(($1 + [48]), $3)
	$3 = $2
	if ( $2 ){ goto $label$48 }
	
.LABEL $label$47
	CALL prints([18420])
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$46 }
	$6 = ($1 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$51 }
	
.LOOP $label$52:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$53 }
	CALL _ZdlPv($3)
	
.LABEL $label$53
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$52 }
	$2 = *(($1 + [72]))
	goto $label$50 
	
.LABEL $label$51
	$2 = $4
	
.LABEL $label$50
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$46
	$2 = *($1 + [120])
	$3 = CALL $109([18432])
	if ( ((int_32)$3 != (int_32)( *($1 + [124]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$54 }
	if ( CALL $79(($1 + [120]), [0], [-1], [18432], $3) ){ goto $label$54 }
	CALL prints([18443])
	*((($1 + [48]) + [32])) = [0]
	*($1 + [64]) = (int_64)-1
	$5 = *($0)
	*($1 + [48]) = $5
	*($1 + [56]) = $5
	*($1 + [72]) = (int_64)0
	$2 = CALL db_lowerbound_i64($5, $5, (int_64)7035938076145106944, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$55 }
	$3 = CALL $24(($1 + [48]), $2)
	
.LOOP $label$56:
	CALL eosio_assert([1], [18499])
	CALL eosio_assert([1], [18533])
	$2 = [0]
	$4 = CALL db_next_i64(*($3 + [92]), $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$57 }
	$2 = CALL $24(($1 + [48]), $4)
	
.LABEL $label$57
	CALL $25(($1 + [48]), $3)
	$3 = $2
	if ( $2 ){ goto $label$56 }
	
.LABEL $label$55
	CALL prints([18462])
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	*($1 + [36]) = [0]
	$5 = *($0)
	*($1) = $5
	*($1 + [8]) = $5
	*($1 + [24]) = (int_64)0
	$2 = CALL db_lowerbound_i64($5, $5, (int_64)7035938076145107968, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$58 }
	$3 = CALL $26($1, $2)
	
.LOOP $label$59:
	CALL eosio_assert([1], [18499])
	CALL eosio_assert([1], [18533])
	$2 = [0]
	$0 = CALL db_next_i64(*($3 + [100]), ($1 + [136]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$60 }
	$2 = CALL $26($1, $0)
	
.LABEL $label$60
	CALL $27($1, $3)
	$3 = $2
	if ( $2 ){ goto $label$59 }
	
.LABEL $label$58
	CALL prints([18481])
	$0 = *($1 + [24])
	if ( ($0 == 0) ){ goto $label$61 }
	$4 = ($1 + [28])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$63 }
	
.LOOP $label$64:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$65 }
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$66 }
	CALL _ZdlPv(*(($2 + [72])))
	
.LABEL $label$66
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$67
	CALL _ZdlPv($2)
	
.LABEL $label$65
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$64 }
	$2 = *(($1 + [24]))
	goto $label$62 
	
.LABEL $label$63
	$2 = $0
	
.LABEL $label$62
	*($4) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$61
	$0 = *($1 + [72])
	if ( ($0 == 0) ){ goto $label$54 }
	$4 = ($1 + [76])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$69 }
	
.LOOP $label$70:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$71 }
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$72 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$72
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$73
	CALL _ZdlPv($2)
	
.LABEL $label$71
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$70 }
	$2 = *(($1 + [72]))
	goto $label$68 
	
.LABEL $label$69
	$2 = $0
	
.LABEL $label$68
	*($4) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$54
	$0 = *($1 + [104])
	if ( ($0 == 0) ){ goto $label$74 }
	$3 = *($1 + [108])
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$76 }
	
.LOOP $label$77:
	$2 = ($3 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$78 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$78
	$3 = $2
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$77 }
	$2 = *($1 + [104])
	goto $label$75 
	
.LABEL $label$76
	$2 = $0
	
.LABEL $label$75
	*($1 + [108]) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$74
	if ( ((*($1 + [120]) & [1]) == 0) ){ goto $label$79 }
	CALL _ZdlPv(*(($1 + [128])))
	
.LABEL $label$79
	$global$0 = ($1 + [144])
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = ($global$0 - [224])
	$global$0 = $1
	CALL $12(($1 + [128]))
	CALL prints([17249])
	CALL printn(*($1 + [128]))
	CALL prints([17262])
	CALL printi(*($1 + [144]))
	CALL prints([17279])
	$2 = ($1 + [152])
	CALL printui(*($2))
	CALL prints([17528])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$1 }
	$2 = [0]
	
.LOOP $label$3:
	*((($1 + [184]) + $2)) = $3
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$2 }
	$2 = $4
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	
.LABEL $label$2
	CALL prints_l(($1 + [184]), $4)
	
.LABEL $label$1
	CALL prints([17289])
	$2 = *($1 + [160])
	$4 = ($2 & [1])
	CALL prints_l(( *(($1 + [168])) ? ($1 + [161]) : $4 ), ( *(($1 + [164])) ? uint_32($2 >> [1]) : $4 ))
	*($1 + [120]) = [0]
	*($1 + [112]) = (int_64)0
	$2 = CALL $70(($1 + [96]), ($1 + [160]))
	CALL $13($0, ($1 + [112]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$4
	$2 = *($1 + [112])
	$4 = *($2)
	$5 = CALL $109([17297])
	if ( ((int_32)$5 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$5 }
	if ( CALL $79($2, [0], [-1], [17297], $5) ){ goto $label$5 }
	CALL prints([17303])
	$2 = ($1 + [152])
	CALL printui(*($2))
	CALL prints([17528])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$6 }
	$2 = [0]
	
.LOOP $label$8:
	*((($1 + [184]) + $2)) = $3
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$7 }
	$2 = $4
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	CALL prints_l(($1 + [184]), $4)
	
.LABEL $label$6
	$2 = *($1 + [112])
	$4 = *($2 + [12])
	if ( ($4 & [1]) ){ goto $label$10 }
	$4 = uint_32($4 >> [1])
	$2 = (($2 + [12]) + [1])
	goto $label$9 
	
.LABEL $label$10
	$4 = *(($2 + [16]))
	$2 = *(($2 + [20]))
	
.LABEL $label$9
	*($1 + [84]) = $4
	*($1 + [80]) = $2
	*($1 + [16]) = *($1 + [80])
	$2 = CALL $3(($1 + [88]), ($1 + [16]))
	CALL eosio_assert(((int_64)*($1 + [128]) == (int_64)*($2)), [17312])
	*(($1 + [72])) = [0]
	*($1 + [64]) = (int_64)0
	$2 = CALL $109([17328])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$15 }
	*($1 + [64]) = ($2 << [1])
	$4 = (($1 + [64]) | [1])
	if ( $2 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$5 = (($2 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($1 + [64]) = ($5 | [1])
	*($1 + [72]) = $4
	*($1 + [68]) = $2
	
.LABEL $label$14
	CALL memcpy($4, [17328], $2)
	
.LABEL $label$13
	*(($4 + $2)) = [0]
	$2 = CALL $109([17329])
	if ( ($2 <= [8]) ){ goto $label$18 }
	CALL eosio_assert([0], [17530])
	goto $label$17 
	
.LABEL $label$18
	if ( ($2 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$3 = (int_64)0
	
.LOOP $label$19:
	$4 = *(($2 + [17328]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [17575])
	
.LABEL $label$20
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$19 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$11 
	
.LABEL $label$16
	$3 = (int_64)0
	goto $label$11 
	
.LABEL $label$12
	CALL $69(($1 + [64]))
	
.LABEL $label$11
	$5 = [0]
	if ( ((int_64)*(($1 + [152])) != (int_64)((int_64)$3 | (int_64)4)) ){ goto $label$21 }
	CALL $74(($1 + [64]), [17329])
	$5 = [1]
	
.LABEL $label$21
	$2 = CALL $109([17333])
	if ( ($2 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [17530])
	goto $label$24 
	
.LABEL $label$25
	if ( ($2 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$3 = (int_64)0
	
.LOOP $label$26:
	$4 = *(($2 + [17332]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [17575])
	
.LABEL $label$27
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$26 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$22 
	
.LABEL $label$23
	$3 = (int_64)0
	
.LABEL $label$22
	if ( ((int_64)*(($1 + [152])) != (int_64)((int_64)$3 | (int_64)4)) ){ goto $label$28 }
	CALL $74(($1 + [64]), [17333])
	$5 = [1]
	
.LABEL $label$28
	$2 = CALL $109([17338])
	if ( ($2 <= [8]) ){ goto $label$32 }
	CALL eosio_assert([0], [17530])
	goto $label$31 
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$3 = (int_64)0
	
.LOOP $label$33:
	$4 = *(($2 + [17337]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$34 }
	CALL eosio_assert([0], [17575])
	
.LABEL $label$34
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$33 }
	$3 = ((int_64)$3 << (int_64)8)
	goto $label$29 
	
.LABEL $label$30
	$3 = (int_64)0
	
.LABEL $label$29
	$2 = ($1 + [152])
	if ( ((int_64)*($2) != (int_64)((int_64)$3 | (int_64)4)) ){ goto $label$35 }
	CALL $74(($1 + [64]), [17338])
	$5 = [1]
	
.LABEL $label$35
	CALL eosio_assert(((int_64)*($1 + [136]) == (int_64)*($0)), [17342])
	CALL prints([17346])
	CALL printui(*($2))
	CALL prints([17528])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$36 }
	$2 = [0]
	
.LOOP $label$38:
	*((($1 + [184]) + $2)) = $3
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$37 }
	$2 = $4
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$38 }
	
.LABEL $label$37
	CALL prints_l(($1 + [184]), $4)
	
.LABEL $label$36
	CALL eosio_assert($5, [17372])
	$2 = CALL $109([17329])
	if ( ($2 <= [8]) ){ goto $label$42 }
	CALL eosio_assert([0], [17530])
	goto $label$41 
	
.LABEL $label$42
	if ( ($2 == 0) ){ goto $label$40 }
	
.LABEL $label$41
	$3 = (int_64)0
	
.LOOP $label$43:
	$4 = *(($2 + [17328]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$44 }
	CALL eosio_assert([0], [17575])
	
.LABEL $label$44
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$43 }
	goto $label$39 
	
.LABEL $label$40
	$3 = (int_64)0
	
.LABEL $label$39
	*($1 + [176]) = [16910]
	*($1 + [180]) = CALL $109([16910])
	*($1 + [8]) = *($1 + [176])
	$6 = *(CALL $3(($1 + [184]), ($1 + [8])))
	$7 = *($0)
	$8 = [0]
	*(($9 = ($1 + [216]))) = [0]
	*($1 + [192]) = $7
	*($1 + [184]) = $6
	*($1 + [200]) = (int_64)-1
	*($1 + [208]) = (int_64)0
	$3 = *(CALL $14(($1 + [184]), ((int_64)$3 & (int_64)72057594037927935), [17628]))
	$5 = *($1 + [208])
	if ( ($5 == 0) ){ goto $label$45 }
	$10 = ($1 + [212])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$47 }
	
.LOOP $label$48:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$49 }
	CALL _ZdlPv($4)
	
.LABEL $label$49
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$48 }
	$2 = *(($1 + [208]))
	goto $label$46 
	
.LABEL $label$47
	$2 = $5
	
.LABEL $label$46
	*($10) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$45
	CALL eosio_assert(((int_64)$3 > (int_64)49999), [17412])
	*($9) = [0]
	*($1 + [200]) = (int_64)-1
	$3 = *($0)
	*($1 + [184]) = $3
	*($1 + [192]) = $3
	*($1 + [208]) = (int_64)0
	$2 = CALL db_find_i64($3, $3, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$50 }
	$8 = CALL $15(($1 + [184]), $2)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($1 + [184])), [17647])
	
.LABEL $label$50
	$2 = *($1 + [64])
	$4 = CALL $109([17329])
	if ( ((int_32)$4 != (int_32)( *($1 + [68]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$54 }
	if ( (CALL $79(($1 + [64]), [0], [-1], [17329], $4) == 0) ){ goto $label$53 }
	
.LABEL $label$54
	$2 = *($1 + [64])
	$4 = CALL $109([17333])
	if ( ((int_32)$4 != (int_32)( *($1 + [68]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$55 }
	if ( (CALL $79(($1 + [64]), [0], [-1], [17333], $4) == 0) ){ goto $label$52 }
	
.LABEL $label$55
	$2 = [0]
	$4 = [10000000]
	$5 = *($1 + [64])
	$9 = CALL $109([17338])
	if ( ((int_32)$9 != (int_32)( *($1 + [68]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$51 }
	$2 = [0]
	if ( CALL $79(($1 + [64]), [0], [-1], [17338], $9) ){ goto $label$51 }
	$2 = *($8 + [44])
	$4 = *($8 + [40])
	goto $label$51 
	
.LABEL $label$53
	$2 = *($8 + [28])
	$4 = *($8 + [24])
	goto $label$51 
	
.LABEL $label$52
	$2 = *($8 + [36])
	$4 = *($8 + [32])
	
.LABEL $label$51
	CALL prints([17441])
	$3 = (CASTING int_64)(int_32 $4)
	CALL printi($3)
	CALL prints([17450])
	$6 = (CASTING int_64)(int_32 $2)
	CALL printi($6)
	CALL prints([17459])
	$7 = *(($1 + [144]))
	CALL eosio_assert((((int_64)$7 <= (int_64)$6) & ((int_64)$7 >= (int_64)$3)), [17461])
	$4 = CALL $81((*($1 + [112]) + [24]), [0], [10])
	$2 = *($1 + [112])
	CALL prints([17475])
	$5 = *($2 + [24])
	$8 = ($5 & [1])
	CALL prints_l(( *(($2 + [32])) ? ($2 + [25]) : $8 ), ( *(($2 + [28])) ? uint_32($5 >> [1]) : $8 ))
	CALL prints([17497])
	CALL printi((CASTING int_64)(int_32 $4))
	$2 = *($1 + [112])
	$5 = *($2 + [48])
	if ( ($5 & [1]) ){ goto $label$57 }
	$5 = uint_32($5 >> [1])
	$2 = (($2 + [48]) + [1])
	goto $label$56 
	
.LABEL $label$57
	$5 = *(($2 + [52]))
	$2 = *(($2 + [56]))
	
.LABEL $label$56
	*($1 + [60]) = $5
	*($1 + [56]) = $2
	*($1) = *($1 + [56])
	$8 = CALL $3(($1 + [176]), $1)
	CALL eosio_assert((($4 + [-5]) <= [92]), [17501])
	$5 = CALL $70(($1 + [24]), ($1 + [64]))
	$2 = CALL $70(($1 + [40]), (*($1 + [112]) + [36]))
	CALL $16($0, *($1 + [128]), *(($1 + [144])), $4, $2, $5, *($8))
	if ( (*($5) & [1]) ){ goto $label$63 }
	if ( (*($2) & [1]) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$61 }
	
.LABEL $label$62
	CALL _ZdlPv(*($2 + [8]))
	$5 = *($1 + [208])
	if ( ($5 == 0) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	$5 = *($1 + [208])
	if ( $5 ){ goto $label$59 }
	
.LABEL $label$60
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$5 }
	goto $label$58 
	
.LABEL $label$59
	$0 = ($1 + [212])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$65 }
	
.LOOP $label$66:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$67 }
	CALL _ZdlPv($4)
	
.LABEL $label$67
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$66 }
	$2 = *(($1 + [208]))
	goto $label$64 
	
.LABEL $label$65
	$2 = $5
	
.LABEL $label$64
	*($0) = $5
	CALL _ZdlPv($2)
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$58
	CALL _ZdlPv(*($1 + [72]))
	
.LABEL $label$5
	$5 = *($1 + [112])
	if ( ($5 == 0) ){ goto $label$68 }
	$4 = *($1 + [116])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$70 }
	
.LOOP $label$71:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$72 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$72
	$4 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$71 }
	$2 = *($1 + [112])
	goto $label$69 
	
.LABEL $label$70
	$2 = $5
	
.LABEL $label$69
	*($1 + [116]) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$68
	if ( ((*(($1 + [160])) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*(($1 + [168])))
	
.LABEL $label$73
	$global$0 = ($1 + [224])
	(unreachable)
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $114($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [36])) = $2
	*(($4 + [40])) = ($2 + $7)
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $2
	*($4 + [44]) = [855823335]
	*($4 + [56]) = [19617]
	*($4 + [60]) = CALL $109([19617])
	*($4 + [8]) = *($4 + [56])
	CALL $3(($4 + [48]), ($4 + [8]))
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $118($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 apply)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL memory()
	*($3 + [256]) = [16910]
	*($3 + [260]) = CALL $109([16910])
	*($3 + [112]) = *($3 + [256])
	CALL $3(($3 + [264]), ($3 + [112]))
	[0]
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$3 }
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	*($3 + [240]) = [17013]
	*($3 + [244]) = CALL $109([17013])
	*($3 + [104]) = *($3 + [240])
	CALL $3(($3 + [248]), ($3 + [104]))
	$4 = [1]
	if ( ((int_64)$1 == (int_64)6766875999750921520) ){ goto $label$2 }
	*($3 + [224]) = [17026]
	*($3 + [228]) = CALL $109([17026])
	*($3 + [96]) = *($3 + [224])
	CALL $3(($3 + [232]), ($3 + [96]))
	$4 = [1]
	[1]
	if ( ((int_64)$1 != (int_64)-4235873703384405632) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [208]) = [17039]
	*($3 + [212]) = CALL $109([17039])
	*($3 + [88]) = *($3 + [208])
	CALL $3(($3 + [216]), ($3 + [88]))
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	
.LABEL $label$4
	*($3 + [204]) = [0]
	*($3 + [200]) = [1]
	*($3 + [80]) = *($3 + [200])
	CALL $5($0, $1, ($3 + [80]))
	
.LABEL $label$1
	*($3 + [192]) = [17048]
	*($3 + [196]) = CALL $109([17048])
	*($3 + [72]) = *($3 + [192])
	CALL $3(($3 + [264]), ($3 + [72]))
	if ( ((int_64)$2 != (int_64)-4157493845350678528) ){ goto $label$6 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [2]
	*($3 + [64]) = *($3 + [184])
	CALL $5($0, $1, ($3 + [64]))
	
.LABEL $label$6
	*($3 + [176]) = [17055]
	*($3 + [180]) = CALL $109([17055])
	*($3 + [56]) = *($3 + [176])
	CALL $3(($3 + [264]), ($3 + [56]))
	if ( ((int_64)$2 != (int_64)3631283935532548096) ){ goto $label$7 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [3]
	*($3 + [48]) = *($3 + [168])
	CALL $5($0, $1, ($3 + [48]))
	
.LABEL $label$7
	*($3 + [160]) = [17061]
	*($3 + [164]) = CALL $109([17061])
	*($3 + [40]) = *($3 + [160])
	CALL $3(($3 + [264]), ($3 + [40]))
	if ( ((int_64)$2 != (int_64)-3612794913608957952) ){ goto $label$8 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [4]
	*($3 + [32]) = *($3 + [152])
	CALL $5($0, $1, ($3 + [32]))
	
.LABEL $label$8
	*($3 + [144]) = [17069]
	*($3 + [148]) = CALL $109([17069])
	*($3 + [24]) = *($3 + [144])
	CALL $3(($3 + [264]), ($3 + [24]))
	if ( ((int_64)$2 != (int_64)6766879627050947584) ){ goto $label$9 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [5]
	*($3 + [16]) = *($3 + [136])
	CALL $10($0, $1, ($3 + [16]))
	
.LABEL $label$9
	*($3 + [128]) = [17081]
	*($3 + [132]) = CALL $109([17081])
	*($3 + [8]) = *($3 + [128])
	CALL $3(($3 + [264]), ($3 + [8]))
	if ( ((int_64)$2 != (int_64)5555305760881115136) ){ goto $label$10 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [6]
	*($3) = *($3 + [120])
	CALL $5($0, $1, $3)
	
.LABEL $label$10
	CALL $92([0])
	$global$0 = ($3 + [272])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17088])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17193])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17126])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17193])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC memory ()
{
	CALL $60()
}

void .FUNC $1 (int_32 $0)
{
	if ( ((*([0] + [8192]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8200]))
	
.LABEL $label$1
}

int_32 .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [17647])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $42($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [17647])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17698])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $114($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	CALL $44(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $45(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $118($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$7 = ($global$0 - [224])
	$global$0 = $7
	*($7 + [208]) = $6
	*($7 + [216]) = $1
	*($7 + [200]) = $2
	*($7 + [196]) = $3
	$8 = [0]
	*(($7 + [184])) = [0]
	*($7 + [168]) = (int_64)-1
	$2 = *($0)
	*($7 + [152]) = $2
	*($7 + [160]) = $2
	*($7 + [176]) = (int_64)0
	$3 = CALL db_find_i64($2, $2, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $15(($7 + [152]), $3)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($7 + [152])), [17647])
	
.LABEL $label$1
	$2 = ((int_64)*($8 + [8]) + (int_64)1)
	*($7 + [144]) = $2
	CALL $86(($7 + [128]), $2)
	CALL prints([17721])
	$9 = *($4)
	$10 = ($9 & [1])
	$3 = ($4 + [1])
	CALL prints_l(( *($4 + [8]) ? $3 : $10 ), ( *($4 + [4]) ? uint_32($9 >> [1]) : $10 ))
	CALL prints([17459])
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$3 }
	$9 = uint_32($9 >> [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *(($4 + [4]))
	$3 = *(($4 + [8]))
	
.LABEL $label$2
	*($7 + [116]) = $9
	*($7 + [112]) = $3
	*($7 + [8]) = *($7 + [112])
	*($7 + [104]) = *(CALL $3(($7 + [120]), ($7 + [8])))
	CALL prints([17728])
	CALL printui(*($7 + [104]))
	CALL prints([17459])
	$3 = [0]
	*(($7 + [96])) = [0]
	*($7 + [80]) = (int_64)-1
	*($7 + [88]) = (int_64)0
	*($7 + [100]) = [0]
	$2 = *($0)
	*($7 + [64]) = $2
	*($7 + [72]) = $2
	CALL prints([17737])
	CALL printi(*($7 + [196]))
	CALL prints([17756])
	$9 = *($5)
	$10 = ($9 & [1])
	CALL prints_l(( *($5 + [8]) ? ($5 + [1]) : $10 ), ( *($5 + [4]) ? uint_32($9 >> [1]) : $10 ))
	*($7 + [56]) = ($7 + [64])
	CALL $28(($7 + [24]), ($7 + [56]), ($7 + [104]))
	$9 = *($7 + [28])
	if ( ($9 == 0) ){ goto $label$4 }
	$3 = ( $9 ? [0] : ((int_64)*($7 + [104]) == (int_64)*($9 + [32])) )
	
.LABEL $label$4
	CALL prints([17760])
	CALL printui(*($3 + [32]))
	CALL prints([17459])
	CALL eosio_assert(((int_64)*($3 + [32]) != (int_64)*($7 + [104])), [17783])
	$9 = *(($7 + [92]))
	$10 = *(($7 + [88]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$9 }
	
.LOOP $label$11:
	$3 = ($9 + [-24])
	$11 = *($3)
	if ( (int_64)(*($11) == 0) ){ goto $label$10 }
	$9 = $3
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($11 + [96]) == (int_32)($7 + [64])), [17647])
	if ( $11 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = CALL db_find_i64(*($7 + [64]), *(($7 + [72])), (int_64)7035938076145107968, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $26(($7 + [64]), $3) + [96]) == (int_32)($7 + [64])), [17647])
	
.LABEL $label$8
	CALL prints([17797])
	if ( ($8 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL prints([17819])
	$2 = *($0)
	*($7 + [32]) = $4
	*($7 + [48]) = $5
	*($7 + [28]) = ($7 + [216])
	*($7 + [24]) = ($7 + [144])
	*($7 + [36]) = ($7 + [104])
	*($7 + [40]) = ($7 + [200])
	*($7 + [44]) = ($7 + [196])
	*($7 + [52]) = ($7 + [208])
	CALL $38(($7 + [16]), ($7 + [64]), $2, ($7 + [24]))
	if ( ($8 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = *($0)
	*($7 + [24]) = ($7 + [144])
	CALL eosio_assert([1], [17902])
	CALL $39(($7 + [152]), $8, $2, ($7 + [24]))
	
.LABEL $label$5
	$10 = *($7 + [88])
	if ( ($10 == 0) ){ goto $label$12 }
	$11 = ($7 + [92])
	$9 = *($11)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$14 }
	
.LOOP $label$15:
	$9 = ($9 + [-24])
	$3 = *($9)
	*($9) = [0]
	if ( ($3 == 0) ){ goto $label$16 }
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$17
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$18
	CALL _ZdlPv($3)
	
.LABEL $label$16
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$15 }
	$3 = *(($7 + [88]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $10
	
.LABEL $label$13
	*($11) = $10
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((*($7 + [128]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($7 + [136]))
	
.LABEL $label$19
	$10 = *($7 + [176])
	if ( ($10 == 0) ){ goto $label$20 }
	$11 = ($7 + [180])
	$3 = *($11)
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$22 }
	
.LOOP $label$23:
	$3 = ($3 + [-24])
	$9 = *($3)
	*($3) = [0]
	if ( ($9 == 0) ){ goto $label$24 }
	CALL _ZdlPv($9)
	
.LABEL $label$24
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$23 }
	$3 = *(($7 + [176]))
	goto $label$21 
	
.LABEL $label$22
	$3 = $10
	
.LABEL $label$21
	*($11) = $10
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$global$0 = ($7 + [224])
}

void .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $114($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	CALL $35($2, $0)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $114($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [104])) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [80]) = ($2 + $7)
	*($4 + [72]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17519])
	CALL memcpy(($4 + [88]), $2, [8])
	*($4 + [76]) = ($2 + [8])
	$8 = (($4 + [88]) + [8])
	CALL $35(($4 + [72]), $8)
	*(($3 = (($4 + [16]) + [8]))) = *($4 + [80])
	*($4 + [16]) = *($4 + [72])
	*(($9 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [16])
	$3 = *($9)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [56])) = $3
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [112])
	*($4 + [48]) = $0
	*($4 + [128]) = $0
	*($4 + [60]) = [855823335]
	*($4 + [128]) = [19617]
	*($4 + [132]) = CALL $109([19617])
	*($4 + [8]) = *($4 + [128])
	CALL $3(($4 + [64]), ($4 + [8]))
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$8 = CALL $70(($4 + [112]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $70(($4 + [128]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [128]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [112]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $118($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $11 (int_32 $0)
{
}

void .FUNC $12 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $114($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $36(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$2 }
	$5 = ($2 + [1])
	$2 = ($5 + uint_32($4 >> [1]))
	goto $label$1 
	
.LABEL $label$2
	$5 = *($2 + [8])
	$2 = ($5 + *($2 + [4]))
	
.LABEL $label$1
	*($3 + [24]) = $2
	*($3 + [16]) = $5
	*($3 + [8]) = $5
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$5 }
	$6 = ($1 + [8])
	$7 = ($1 + [4])
	$4 = $5
	
.LOOP $label$6:
	if ( ((int_32)*($4) != (int_32)[59]) ){ goto $label$12 }
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*($6)) ){ goto $label$11 }
	*($2) = (int_64)0
	*(($2 + [8])) = [0]
	$8 = ($4 - $5)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$10 }
	*($2) = ($8 << [1])
	$9 = ($2 + [1])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$4 = ($4 + [1])
	*($3 + [8]) = $4
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	CALL $37($1, ($3 + [16]), ($3 + [8]))
	goto $label$7 
	
.LABEL $label$10
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($2) = ($10 | [1])
	*($2 + [8]) = $9
	*($2 + [4]) = $8
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = $9
	
.LOOP $label$13:
	*($2) = *($5)
	$2 = ($2 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$13 }
	$9 = ($9 + $8)
	
.LABEL $label$8
	*($9) = [0]
	*($7) = (*($7) + [12])
	
.LABEL $label$7
	$4 = (*($3 + [8]) + [1])
	*($3 + [16]) = $4
	$2 = *($3 + [24])
	$5 = $4
	*($3 + [8]) = $4
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$16 }
	$4 = *($1 + [4])
	if ( ((uint_32)$4 >= (uint_32)*($1 + [8])) ){ goto $label$17 }
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$9 = ($2 - $5)
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$9 > (uint_32)[10]) ){ goto $label$15 }
	*($4) = ($9 << [1])
	$7 = ($4 + [1])
	goto $label$14 
	
.LABEL $label$17
	CALL $37($1, ($3 + [16]), ($3 + [24]))
	
.LABEL $label$16
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$15
	$8 = (($9 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($4) = ($8 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $9
	
.LABEL $label$14
	$4 = $7
	
.LOOP $label$18:
	*($4) = *($5)
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$18 }
	*(($7 + $9)) = [0]
	*(($5 = ($1 + [4]))) = (*($5) + [12])
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$4
	CALL $69($2)
	
.LABEL $label$3
	CALL $69($4)
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $76($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$17()), [17845])
	*(($5 = CALL _Znwj([64])) + [48]) = $1
	*($5 + [8]) = (int_64)20252
	*($5 + [16]) = (int_64)10023000
	*($5 + [24]) = (int_64)8589934592100
	*($5 + [32]) = (int_64)42949672960010000
	*($5 + [40]) = (int_64)8589934593000000
	*($5) = *(*($3))
	*($4 + [72]) = (($4 + [16]) + [48])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $51(($4 + [64]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, $6, ($4 + [16]), [48])
	*($5 + [52]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $45(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [17937])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [17983])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [18034])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $51(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17896])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17896])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17896])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17896])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17896])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17896])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17896])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17896])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [17896])
	CALL memcpy(*($0 + [4]), ($1 + [44]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17519])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17519])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $35($0, ($1 + [16]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17519])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [44]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [17519])
	CALL memcpy(($1 + [52]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $35($0, ($1 + [56]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17519])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17519])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $90($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$11
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($6 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, ( $7 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $78($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $69($0)
}

void .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL prints([19588])
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	*($1 + [36]) = [0]
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	$3 = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)7035938076145107968, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $26($1, $0)
	$3 = *($0)
	CALL eosio_assert([1], [18533])
	$0 = CALL db_next_i64(*($0 + [100]), ($1 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = CALL $26($1, $0)
	$2 = *($0)
	CALL eosio_assert([1], [18533])
	$3 = ( $2 ? $3 : ((uint_64)$2 > (uint_64)$3) )
	$0 = CALL db_next_i64(*($0 + [100]), ($1 + [40]))
	if ( ((int_32)$0 >= (int_32)[0]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL prints([19605])
	CALL printi($3)
	CALL prints([17459])
	if ( ((int_64)$3 <= (int_64)0) ){ goto $label$3 }
	$0 = CALL db_lowerbound_i64(*($1), *(($1 + [8])), (int_64)7035938076145107968, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $26($1, $0)
	if ( ((int_64)$3 < (int_64)52) ){ goto $label$4 }
	$3 = ((int_64)$3 + (int_64)-50)
	
.LOOP $label$5:
	if ( ((uint_64)*($0) >= (uint_64)$3) ){ goto $label$7 }
	if ( ((int_32)*($0 + [60]) != (int_32)[999]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([1], [18533])
	$4 = *($0 + [100])
	$0 = [0]
	$4 = CALL db_next_i64($4, ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$0 = CALL $26($1, $4)
	
.LABEL $label$8
	if ( $0 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$4 = [0]
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [18499])
	CALL eosio_assert($5, [18533])
	$5 = CALL db_next_i64(*($0 + [100]), ($1 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $26($1, $5)
	
.LABEL $label$9
	CALL $27($1, $0)
	$0 = $4
	if ( $4 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([1], [18533])
	$0 = CALL db_next_i64(*($0 + [100]), ($1 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	
.LOOP $label$10:
	$0 = CALL $26($1, $0)
	CALL eosio_assert([1], [18533])
	$0 = CALL db_next_i64(*($0 + [100]), ($1 + [40]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$10 }
	
.LABEL $label$3
	$5 = *($1 + [24])
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($1 + [28])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	if ( ((*($0 + [64]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($0 + [72])))
	
.LABEL $label$16
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($0 + [24])))
	
.LABEL $label$17
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$14 }
	$0 = *(($1 + [24]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$global$0 = ($1 + [48])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $41($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17896])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17896])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $59(CALL $58($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17896])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17896])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17896])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17896])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $116 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8492]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8496])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8492]) = [1]
	$2 = ($2 << [16])
	*([0] + [8496]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8496])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8496]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8492]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8492]) = [1]
	$3 = ($3 << [16])
	*([0] + [8496]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8496])
	
.LABEL $label$10
	*([0] + [8496]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $115([8500], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $114 (int_32 $0)
{
	return CALL $115([8500], $0)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $40($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $73($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $73($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $69($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $91())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $113($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $114($1)
	
.LABEL $label$2
	*(CALL $91()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $114(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $118($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $110 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $111 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $118 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16884])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16692]
	$3 = (((int_32)$1 * (int_32)[12]) + [16692])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_64 .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [320])
	$global$0 = $3
	$4 = CALL current_time()
	CALL $84(($3 + [272]), (((int_32)CALL $fimport$26() * (int_32)CALL $fimport$27()) + (CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000))))
	CALL $54(($3 + [16]), $1, ($3 + [272]))
	$5 = *($2)
	$6 = ($5 & [1])
	$2 = CALL $78(($3 + [16]), ( *($2 + [8]) ? ($2 + [1]) : $6 ), ( *($2 + [4]) ? uint_32($5 >> [1]) : $6 ))
	$6 = *($2 + [4])
	$5 = *($2)
	*($2) = (int_64)0
	$7 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	$2 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$2 = ($1 + [8])
	
.LABEL $label$1
	CALL $73($1, [0])
	*(($1 + [4])) = $6
	*($1) = $5
	*($2) = $7
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($3 + [24]))
	$5 = *($1)
	
.LABEL $label$3
	if ( ($5 & [1]) ){ goto $label$5 }
	$1 = ($1 + [1])
	goto $label$4 
	
.LABEL $label$5
	$1 = *($2)
	
.LABEL $label$4
	CALL $108(($3 + [16]), $1)
	CALL sha256(($3 + [16]), CALL $109(($3 + [16])), ($3 + [288]))
	*($3 + [8]) = (int_64)0
	CALL memcpy(($3 + [8]), ($3 + [288]), [8])
	$4 = ((uint_64)*($3 + [8]) % (uint_64)(int_64)100)
	if ( ((*($3 + [272]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($3 + [280]))
	
.LABEL $label$6
	$global$0 = ($3 + [320])
	return $4
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)7035938076145107968, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [17647])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $26($7, CALL $fimport$9(*($7), *($7 + [8]), (int_64)7035938076145107968, $6))
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [17647])
	
.LABEL $label$2
	*(($4 + [104])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $41($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $57(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( (((int_32)$1 ^ (int_32)$0) & [3]) ){ goto $label$2 }
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ($1 & [3]) ){ goto $label$4 }
	
.LABEL $label$3
	$2 = *($1)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$2 }
	
.LOOP $label$5:
	*($0) = $2
	$2 = *($1 + [4])
	$0 = ($0 + [4])
	$1 = ($1 + [4])
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	
.LABEL $label$2
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	$1 = ($1 + [1])
	
.LOOP $label$6:
	$2 = *($1)
	*($0 + [1]) = $2
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [17937])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [17983])
	*($1 + [32]) = *(*($3))
	*($1 + [36]) = *(*($3 + [4]))
	$5 = *($1)
	CALL eosio_assert([1], [18034])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $51(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [17937])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [17983])
	*($1 + [24]) = *(*($3))
	*($1 + [28]) = *(*($3 + [4]))
	$5 = *($1)
	CALL eosio_assert([1], [18034])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $51(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [18608])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18658])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [17937])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [17983])
	*($1 + [40]) = *(*($3))
	*($1 + [44]) = *(*($3 + [4]))
	$5 = *($1)
	CALL eosio_assert([1], [18034])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $51(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [18563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [18608])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18658])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [64])))
	
.LABEL $label$10
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$14
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17698])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $114($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64]) = [0]
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = $0
	CALL $52(($3 + [32]), $5)
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $53(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $118($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [64])))
	
.LABEL $label$10
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [18563])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [18608])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18658])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$10
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [72])))
	
.LABEL $label$14
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [24])))
	
.LABEL $label$15
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [100]))
	$6 = *(($1 + [104]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035938076145107968, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx64_remove($6)
	
.LABEL $label$16
	$global$0 = ($2 + [16])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17698])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $114($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = $0
	CALL $48(($3 + [32]), $5)
	*($5 + [104]) = [-1]
	*($5 + [100]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $47(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $118($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$10
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $109 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $69 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	CALL $107($0, $1)
	return $0
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $112(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8204])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $112(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $118($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $114($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $114($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $60 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8192 align=4]) = (int_64)0
	*([0] + [8200]) = [0]
	$0 = CALL $109([16896])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*([0] + [8192]) = ($0 << [1])
	$1 = [8193]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8192]) = ($2 | [1])
	*([0] + [8200]) = $1
	*([0] + [8196]) = $0
	
.LABEL $label$3
	CALL memcpy($1, [16896], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL $93([7], [0], [8192])
	return (unreachable)
	
.LABEL $label$1
	CALL $69([8192])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $118($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $100($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $103 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $101($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $102 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $102($3, (int_64)0)
	$4 = CALL $104($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $103($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $91()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $103($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19713]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $102($0, (int_64)0)
	*(CALL $91()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $103($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $103($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $103($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $103($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19713])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19713]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19713]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $103($0)
	$5 = *(($6 + [19713]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $103($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19713]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16901]))
	$8 = (int_64)0
	$5 = *(($6 + [19713]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19713]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $103($0)
	$5 = *(($6 + [19713]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $103($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19713]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $102($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19713]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19713]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $103($0) + [19713]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $91()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $91()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $91()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $89 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $88 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $109($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $72($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $86 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $75(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $98(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [17274], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $75(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $75(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $85 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $75(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $98(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [17257], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $75(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $75(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $75(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $98(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [17245], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $75(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $75(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $83 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $87($1, $0, [17356])
	CALL $89()
	(unreachable)
}

void .FUNC $82 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $87($1, $0, [17397])
	CALL $88()
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $109([16922])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [16922], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $91())
	*(CALL $91()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $105($4, ($3 + [12]), $2)
	$5 = CALL $91()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $82($3)
	
.LABEL $label$1
	CALL $83($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $109($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $72($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $72($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $109($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $72($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $109($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $72($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $72($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [17937])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [17983])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [18034])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $51(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17519])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17519])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17519])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17519])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $35(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $90($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$4 * (int_32)[12])))) = (int_64)0
	*(($3 + [8])) = [0]
	$1 = *($1)
	$2 = *($2)
	$8 = ($2 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$8 }
	*($3) = ($8 << [1])
	$5 = ($3 + [1])
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*(($4 = ($7 + ((int_32)$4 * (int_32)[12]))) + [8]) = $5
	*($4 + [4]) = $8
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($1)
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$5 = ($5 + $8)
	
.LABEL $label$6
	$8 = ($7 + $4)
	*($5) = [0]
	$5 = ($3 + [12])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($1 + [-4])
	*(($3 + [-4])) = *($2)
	$1 = ($1 + [-12])
	*(($3 = ($3 + [-12]))) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	$6 = *(($0 + [4]))
	$2 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($6 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$15
	$6 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $69($3)
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $72($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $106(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = CALL $109([17338])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17530])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [17337]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17575])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [19509])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [19558])
	$6 = *($0)
	*($4 + [104]) = [19502]
	*($4 + [108]) = CALL $109([19502])
	*($4 + [16]) = *($4 + [104])
	$5 = CALL $3(($4 + [112]), ($4 + [16]))
	*($4 + [120]) = $6
	*($4 + [128]) = *($5)
	*($4 + [88]) = [17026]
	*($4 + [92]) = CALL $109([17026])
	*($4 + [8]) = *($4 + [88])
	$5 = CALL $3(($4 + [96]), ($4 + [8]))
	*($4 + [72]) = [19578]
	*($4 + [76]) = CALL $109([19578])
	*($4) = *($4 + [72])
	$7 = CALL $3(($4 + [80]), $4)
	*(($4 + [48])) = $8
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [24]) = *($0)
	CALL $70(($4 + [56]), $3)
	$5 = CALL $55(($4 + [136]), ($4 + [120]), *($5), *($7), ($4 + [24]))
	CALL $56(($4 + [176]), $5)
	$7 = *($4 + [176])
	CALL send_inline($7, (*($4 + [180]) - $7))
	$7 = *($4 + [176])
	if ( ($7 == 0) ){ goto $label$12 }
	*($4 + [180]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($5 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($5 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$15
	$global$0 = ($4 + [192])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [17937])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$17()), [17983])
	*(($5 = $4) + [24]) = *($1 + [32])
	$6 = *(*($3))
	*($1 + [80]) = *(*($3 + [8]))
	*($1 + [56]) = $6
	*($1 + [60]) = *(*($3 + [4]))
	$7 = *($1)
	CALL eosio_assert([1], [18034])
	$3 = *($1 + [16])
	$8 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [64])
	$6 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$8 = *($1 + [64])
	$8 = ( *(($1 + [68])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$3 = ($8 + $3)
	$6 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $114($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL $49(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL $118($4)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *(($1 + [32]))
	if ( (CALL $106(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$1 = ($1 + [104])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$8 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035938076145107968, ($5 + [32]), $7)
	*($1) = $3
	
.LABEL $label$8
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = CALL $109([17329])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17530])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [17328]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17575])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [19509])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [19558])
	$6 = *($0)
	*($4 + [104]) = [19502]
	*($4 + [108]) = CALL $109([19502])
	*($4 + [16]) = *($4 + [104])
	$5 = CALL $3(($4 + [112]), ($4 + [16]))
	*($4 + [120]) = $6
	*($4 + [128]) = *($5)
	*($4 + [88]) = [16910]
	*($4 + [92]) = CALL $109([16910])
	*($4 + [8]) = *($4 + [88])
	$5 = CALL $3(($4 + [96]), ($4 + [8]))
	*($4 + [72]) = [17039]
	*($4 + [76]) = CALL $109([17039])
	*($4) = *($4 + [72])
	$7 = CALL $3(($4 + [80]), $4)
	*(($4 + [48])) = $8
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [24]) = *($0)
	CALL $70(($4 + [56]), $3)
	$5 = CALL $55(($4 + [136]), ($4 + [120]), *($5), *($7), ($4 + [24]))
	CALL $56(($4 + [176]), $5)
	$7 = *($4 + [176])
	CALL send_inline($7, (*($4 + [180]) - $7))
	$7 = *($4 + [176])
	if ( ($7 == 0) ){ goto $label$12 }
	*($4 + [180]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($5 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($5 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$15
	$global$0 = ($4 + [192])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = CALL $109([17333])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17530])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [17332]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17575])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [19509])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [19558])
	$6 = *($0)
	*($4 + [104]) = [19502]
	*($4 + [108]) = CALL $109([19502])
	*($4 + [16]) = *($4 + [104])
	$5 = CALL $3(($4 + [112]), ($4 + [16]))
	*($4 + [120]) = $6
	*($4 + [128]) = *($5)
	*($4 + [88]) = [17013]
	*($4 + [92]) = CALL $109([17013])
	*($4 + [8]) = *($4 + [88])
	$5 = CALL $3(($4 + [96]), ($4 + [8]))
	*($4 + [72]) = [17039]
	*($4 + [76]) = CALL $109([17039])
	*($4) = *($4 + [72])
	$7 = CALL $3(($4 + [80]), $4)
	*(($4 + [48])) = $8
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [24]) = *($0)
	CALL $70(($4 + [56]), $3)
	$5 = CALL $55(($4 + [136]), ($4 + [120]), *($5), *($7), ($4 + [24]))
	CALL $56(($4 + [176]), $5)
	$7 = *($4 + [176])
	CALL send_inline($7, (*($4 + [180]) - $7))
	$7 = *($4 + [176])
	if ( ($7 == 0) ){ goto $label$12 }
	*($4 + [180]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($5 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$14 }
	*(($5 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$15
	$global$0 = ($4 + [192])
}