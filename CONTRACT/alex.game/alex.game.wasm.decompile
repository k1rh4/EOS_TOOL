(data (i32.const 8192) "unexpected error in fixed_bytes constructor\00failed to allocate pages\00read_transaction failed\00")
(data (i32.const 8316) "Hello, \00")
(data (i32.const 8324) "epraofficial\00")
(data (i32.const 8337) "transfer\00")
(data (i32.const 8346) "alex.game\00")
(data (i32.const 8356) "hi\00")
(data (i32.const 8359) "string is too long to be a valid name\00")
(data (i32.const 8397) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8464) "character is not in allowed character set for names\00")
(data (i32.const 8516) "write\00")
(data (i32.const 8522) "read\00")
(data (i32.const 8527) "unexpected error in fixed_bytes constructor\00")
(data (i32.const 8571) "get\00")
(data (i32.const 0) "\80!\00\00")
(import "env" "transaction_size" (func $fimport$0 (result i32)))
(import "env" "read_transaction" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "assert_sha256" (func $fimport$3 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$4 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$5 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$6 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$7 (param i32 i32 i32)))
(import "env" "__ashlti3" (func $fimport$8 (param i32 i64 i64 i32)))
(import "env" "sha1" (func $fimport$9 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$10 (param i32 i32 i32)))
(import "env" "ripemd160" (func $fimport$11 (param i32 i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "recover_key" (func $fimport$13 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$14 (param i32 i32 i32 i32 i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "prints" (func $fimport$16 (param i32)))
(import "env" "abort" (func $fimport$17))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$20 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$21 (param i32 i32)))
(import "env" "__multf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$23 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$26 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$31 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$33 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$34 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$38 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$39 (result i32)))
(import "env" "read_action_data" (func $fimport$40 (param i32 i32) (result i32)))
(import "env" "printhex" (func $fimport$41 (param i32 i32)))
(import "env" "eosio_assert_code" (func $fimport$42 (param i32 i64)))
(export "apply" (func $33))
(table $0 4 4 anyfunc)
(elem (i32.const 1) $23 $25 $31)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 8575))
(global $global$2 i32 (i32.const 8575))


int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $9($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $9(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $11($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $18(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $18(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $11(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $11(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $27($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $30(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $11($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8516])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8516])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8516])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8516])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $47(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $21 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $20 (int_32 $0)
{
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6)
{
	CALL require_auth(*($0))
	CALL prints([8316])
	CALL $24($2)
}

void .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = $global$0
	$2 = $1
	$3 = CALL transaction_size()
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	$4 = CALL read_transaction($1, $3)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [8261])
	
.LABEL $label$1
	CALL $1($0, $1, $4)
	$global$0 = $2
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = ($global$0 - [176])
	$global$0 = $5
	CALL require_auth(*($0))
	$6 = *($0)
	*($5 + [88]) = [8324]
	*($5 + [92]) = CALL $2([8324])
	*($5 + [16]) = *($5 + [88])
	$0 = CALL $26(($5 + [96]), ($5 + [16]))
	*($5 + [72]) = [8337]
	*($5 + [76]) = CALL $2([8337])
	*($5 + [8]) = *($5 + [72])
	$7 = CALL $26(($5 + [80]), ($5 + [8]))
	*((($5 + [24]) + [24])) = *(($3 + [8]))
	*($5 + [32]) = $2
	*($5 + [24]) = $1
	*($5 + [40]) = *($3)
	$4 = CALL $18((($5 + [24]) + [32]), $4)
	*($5 + [104]) = *($0)
	*($5 + [112]) = *($7)
	*(($3 = CALL $9([16]))) = $6
	*($3 + [8]) = (int_64)3617214756542218240
	*((($5 + [104]) + [36])) = [0]
	$0 = ($3 + [16])
	*((($5 + [104]) + [24])) = $0
	*(($5 + [124])) = $0
	*($5 + [120]) = $3
	*($5 + [132 align=4]) = (int_64)0
	$3 = *($4)
	$0 = ( *((($5 + [24]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($0 + [32])
	$1 = (CASTING uint_64)(uint_32 $0)
	$0 = ($5 + [132])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $27($0, $3)
	$0 = *(($5 + [136]))
	$3 = *(($5 + [132]))
	goto $label$2 
	
.LABEL $label$3
	$0 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($5 + [148]) = $3
	*($5 + [144]) = $3
	*($5 + [152]) = $0
	*($5 + [160]) = ($5 + [144])
	*($5 + [168]) = ($5 + [24])
	CALL $28(($5 + [168]), ($5 + [160]))
	CALL $29(($5 + [104]))
	$3 = *($5 + [132])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($5 + [136])) = $3
	CALL $11($3)
	
.LABEL $label$4
	$3 = *($5 + [120])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [124])) = $3
	CALL $11($3)
	
.LABEL $label$5
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$6 }
	CALL $11(*(($5 + [64])))
	
.LABEL $label$6
	$global$0 = ($5 + [176])
}

void .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = *($0)
	*($1 + [11]) = (uint_64)$2 >> (uint_64)(int_64)32)
	*($1 + [10]) = (uint_64)$2 >> (uint_64)(int_64)40)
	*($1 + [9]) = (uint_64)$2 >> (uint_64)(int_64)48)
	*($1 + [8]) = (uint_64)$2 >> (uint_64)(int_64)56)
	$3 = *(($0 + [8]))
	*($1 + [3]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($1 + [2]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($1 + [1]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($1) = (uint_64)$3 >> (uint_64)(int_64)56)
	$4 = (CASTING uint_32)(uint_64 $2)
	*($1 + [15]) = $4
	*($1 + [14]) = uint_32($4 >> [8])
	*($1 + [13]) = uint_32($4 >> [16])
	*($1 + [12]) = uint_32($4 >> [24])
	$4 = (CASTING uint_32)(uint_64 $3)
	*($1 + [7]) = $4
	*($1 + [6]) = uint_32($4 >> [8])
	*($1 + [5]) = uint_32($4 >> [16])
	*($1 + [4]) = uint_32($4 >> [24])
	$2 = *(($0 + [24]))
	*($1 + [23]) = $2
	$3 = *($0 + [16])
	*($1 + [27]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($1 + [26]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($1 + [25]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($1 + [24]) = (uint_64)$3 >> (uint_64)(int_64)56)
	*($1 + [19]) = (uint_64)$2 >> (uint_64)(int_64)32)
	*($1 + [18]) = (uint_64)$2 >> (uint_64)(int_64)40)
	*($1 + [17]) = (uint_64)$2 >> (uint_64)(int_64)48)
	*($1 + [16]) = (uint_64)$2 >> (uint_64)(int_64)56)
	$0 = (CASTING uint_32)(uint_64 $2)
	*($1 + [22]) = uint_32($0 >> [8])
	*($1 + [21]) = uint_32($0 >> [16])
	*($1 + [20]) = uint_32($0 >> [24])
	$0 = (CASTING uint_32)(uint_64 $3)
	*($1 + [31]) = $0
	*($1 + [30]) = uint_32($0 >> [8])
	*($1 + [29]) = uint_32($0 >> [16])
	*($1 + [28]) = uint_32($0 >> [24])
	CALL printhex($1, [32])
	$global$0 = ($1 + [32])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $9($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $21($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8359])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [8464])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8397])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8464])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [64])
	$6 = *($5 + [4])
	$5 = *($1)
	if ( ((int_32)(*($5 + [8]) - $6) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8516])
	$6 = *(($5 + [4]))
	
.LABEL $label$1
	CALL memcpy($6, $4, [8])
	$4 = (*($6) + [8])
	*(($6 = ($5 + [4]))) = $4
	*($2 + [8]) = *(($3 + [72]))
	if ( ((int_32)(*(($5 + [8])) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8516])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $47(*($1), (*($0) + [80]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	*($2 + [11]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [10]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [9]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [8]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$4 = *(($1 + [8]))
	*($2 + [3]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [2]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [1]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = (CASTING uint_32)(uint_64 $3)
	*($2 + [15]) = $5
	*($2 + [14]) = uint_32($5 >> [8])
	*($2 + [13]) = uint_32($5 >> [16])
	*($2 + [12]) = uint_32($5 >> [24])
	$5 = (CASTING uint_32)(uint_64 $4)
	*($2 + [7]) = $5
	*($2 + [6]) = uint_32($5 >> [8])
	*($2 + [5]) = uint_32($5 >> [16])
	*($2 + [4]) = uint_32($5 >> [24])
	$3 = *(($1 + [24]))
	*($2 + [23]) = $3
	$4 = *($1 + [16])
	*($2 + [27]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($2 + [26]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($2 + [25]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($2 + [24]) = (uint_64)$4 >> (uint_64)(int_64)56)
	*($2 + [19]) = (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [18]) = (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [17]) = (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [16]) = (uint_64)$3 >> (uint_64)(int_64)56)
	$1 = (CASTING uint_32)(uint_64 $3)
	*($2 + [22]) = uint_32($1 >> [8])
	*($2 + [21]) = uint_32($1 >> [16])
	*($2 + [20]) = uint_32($1 >> [24])
	$1 = (CASTING uint_32)(uint_64 $4)
	*($2 + [31]) = $1
	*($2 + [30]) = uint_32($1 >> [8])
	*($2 + [29]) = uint_32($1 >> [16])
	*($2 + [28]) = uint_32($1 >> [24])
	$1 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[31]) ){ goto $label$1 }
	CALL eosio_assert([0], [8516])
	$1 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [32])
	*(($1 = ($0 + [4]))) = (*($1) + [32])
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $43 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	$5 = ($2 + $4)
	*($3 + [152]) = $5
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8522])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [128]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8522])
	$5 = *((($3 + [144]) + [8]))
	$2 = *($3 + [148])
	
.LABEL $label$6
	CALL memcpy(($3 + [128]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [120]) = (int_64)0
	*($3 + [112]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8522])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$7
	CALL memcpy(($3 + [112]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8522])
	$2 = *($3 + [148])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $2, [8])
	*(($5 = (($3 + [112]) + [8]))) = *($3 + [64])
	*($3 + [148]) = ($2 + [8])
	*($3 + [104]) = [0]
	*($3 + [96]) = (int_64)0
	CALL $41(($3 + [144]), ($3 + [96]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [48]) = *($3 + [144])
	$2 = *($2)
	*((($3 + [160]) + [8])) = $2
	*(($4 = (($3 + [176]) + [8]))) = $2
	$6 = *($3 + [48])
	*($3 + [176]) = $6
	*($3 + [160]) = $6
	$2 = *($4)
	*((($3 + [192]) + [8])) = $2
	*(($3 + [88])) = $2
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$0 = *($3 + [176])
	*($3 + [80]) = $0
	*($3 + [192]) = $0
	*(($4 = (($3 + [32]) + [8]))) = *($5)
	*($3 + [32]) = *($3 + [112])
	$0 = *($3 + [128])
	$1 = *($3 + [136])
	$2 = CALL $18(($3 + [16]), ($3 + [96]))
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [32])
	CALL $31(($3 + [64]), $1, $0, $3, $2)
	if ( (*($2) & [1]) ){ goto $label$11 }
	if ( (*($3 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $11(*($2 + [8]))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $11(*(($3 + [104])))
	$global$0 = ($3 + [208])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [208])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8571])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $27($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8522])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $42($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $9($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $19($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $19($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $17($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $11($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $40 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [84]) = $2
	*($3 + [80]) = $2
	$5 = ($2 + $4)
	*($3 + [88]) = $5
	*($3 + [72]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8522])
	$5 = *(($3 + [88]))
	$2 = *($3 + [84])
	
.LABEL $label$5
	CALL memcpy(($3 + [72]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [84]) = $2
	if ( ((uint_32)($5 - $2) > (uint_32)[31]) ){ goto $label$6 }
	CALL eosio_assert([0], [8522])
	$2 = *($3 + [84])
	
.LABEL $label$6
	CALL memcpy(($3 + [128]), $2, [32])
	*($3 + [84]) = ($2 + [32])
	$6 = (int_64)0
	$2 = [16]
	$5 = ($3 + [96])
	$4 = [0]
	$7 = (int_64)0
	
.LOOP $label$8:
	$8 = (($3 + [128]) + $4)
	if ( ($2 <= [2]) ){ goto $label$9 }
	$6 = ((int_64)$6 | (int_64)*($8))
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56))
	$2 = ($2 + [-1])
	$6 = ((int_64)$6 << (int_64)8)
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$10 }
	CALL eosio_assert([0], [8527])
	
.LABEL $label$10
	*($5 + [8]) = $7
	*($5) = ((int_64)$6 | (int_64)*($8))
	$2 = [16]
	$5 = ($5 + [16])
	$6 = (int_64)0
	$7 = (int_64)0
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$2 == (int_32)[16]) ){ goto $label$11 }
	if ( ($2 <= [2]) ){ goto $label$12 }
	CALL __ashlti3(($3 + [8]), $6, $7, (($2 << [3]) + [-8]))
	$7 = *(($3 + [16]))
	$6 = *($3 + [8])
	
.LABEL $label$12
	*($5) = $6
	*($5 + [8]) = $7
	
.LABEL $label$11
	$6 = *(($3 + [120]))
	$7 = *($3 + [112])
	$9 = *($3 + [104])
	$10 = *($3 + [96])
	*($3 + [64]) = (int_64)0
	$4 = *($3 + [84])
	$5 = (($3 + [80]) + [8])
	$2 = *($5)
	if ( ((uint_32)($2 - $4) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [8522])
	$2 = *($5)
	$4 = *($3 + [84])
	
.LABEL $label$13
	CALL memcpy(($3 + [64]), $4, [8])
	$4 = ($4 + [8])
	*($3 + [84]) = $4
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)($2 - $4) > (uint_32)[7]) ){ goto $label$14 }
	CALL eosio_assert([0], [8522])
	$2 = *(($3 + [88]))
	$4 = *($3 + [84])
	
.LABEL $label$14
	CALL memcpy(($3 + [56]), $4, [8])
	$4 = ($4 + [8])
	*($3 + [84]) = $4
	*($3 + [104]) = (int_64)0
	*($3 + [96]) = (int_64)0
	if ( ((uint_32)($2 - $4) > (uint_32)[7]) ){ goto $label$15 }
	CALL eosio_assert([0], [8522])
	$2 = *((($3 + [80]) + [8]))
	$4 = *($3 + [84])
	
.LABEL $label$15
	CALL memcpy(($3 + [96]), $4, [8])
	$4 = ($4 + [8])
	*($3 + [84]) = $4
	*($3 + [128]) = (int_64)0
	if ( ((uint_32)($2 - $4) > (uint_32)[7]) ){ goto $label$16 }
	CALL eosio_assert([0], [8522])
	$4 = *($3 + [84])
	
.LABEL $label$16
	CALL memcpy(($3 + [128]), $4, [8])
	*((($3 + [96]) + [8])) = *($3 + [128])
	*($3 + [84]) = ($4 + [8])
	*($3 + [48]) = [0]
	*($3 + [40]) = (int_64)0
	CALL $41(($3 + [80]), ($3 + [40]))
	$4 = CALL $18(($3 + [24]), ($3 + [40]))
	CALL require_auth($0)
	CALL prints([8316])
	*($3 + [139]) = (uint_64)$10 >> (uint_64)(int_64)32)
	*($3 + [138]) = (uint_64)$10 >> (uint_64)(int_64)40)
	*($3 + [137]) = (uint_64)$10 >> (uint_64)(int_64)48)
	*($3 + [136]) = (uint_64)$10 >> (uint_64)(int_64)56)
	*($3 + [131]) = (uint_64)$9 >> (uint_64)(int_64)32)
	*($3 + [130]) = (uint_64)$9 >> (uint_64)(int_64)40)
	*($3 + [129]) = (uint_64)$9 >> (uint_64)(int_64)48)
	*($3 + [128]) = (uint_64)$9 >> (uint_64)(int_64)56)
	$2 = (CASTING uint_32)(uint_64 $10)
	*($3 + [143]) = $2
	*($3 + [142]) = uint_32($2 >> [8])
	*($3 + [141]) = uint_32($2 >> [16])
	*($3 + [140]) = uint_32($2 >> [24])
	$2 = (CASTING uint_32)(uint_64 $9)
	*($3 + [135]) = $2
	*($3 + [134]) = uint_32($2 >> [8])
	*($3 + [133]) = uint_32($2 >> [16])
	*($3 + [132]) = uint_32($2 >> [24])
	$2 = (CASTING uint_32)(uint_64 $7)
	*($3 + [159]) = $2
	*($3 + [158]) = uint_32($2 >> [8])
	*($3 + [157]) = uint_32($2 >> [16])
	*($3 + [155]) = (uint_64)$7 >> (uint_64)(int_64)32)
	*($3 + [156]) = uint_32($2 >> [24])
	*($3 + [154]) = (uint_64)$7 >> (uint_64)(int_64)40)
	*($3 + [153]) = (uint_64)$7 >> (uint_64)(int_64)48)
	*($3 + [152]) = (uint_64)$7 >> (uint_64)(int_64)56)
	*($3 + [147]) = (uint_64)$6 >> (uint_64)(int_64)32)
	*($3 + [146]) = (uint_64)$6 >> (uint_64)(int_64)40)
	*($3 + [145]) = (uint_64)$6 >> (uint_64)(int_64)48)
	*($3 + [144]) = (uint_64)$6 >> (uint_64)(int_64)56)
	$2 = (CASTING uint_32)(uint_64 $6)
	*($3 + [151]) = $2
	*($3 + [150]) = uint_32($2 >> [8])
	*($3 + [149]) = uint_32($2 >> [16])
	*($3 + [148]) = uint_32($2 >> [24])
	CALL printhex(($3 + [128]), [32])
	if ( (*($4) & [1]) ){ goto $label$19 }
	if ( (*($3 + [40]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL $11(*($4 + [8]))
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL $11(*(($3 + [48])))
	$global$0 = ($3 + [160])
	return 
	
.LABEL $label$17
	$global$0 = ($3 + [160])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8516])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8516])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8516])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [8516])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8516])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8516])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8516])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $44 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	$5 = ($2 + $4)
	*($3 + [152]) = $5
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8522])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [128]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8522])
	$5 = *((($3 + [144]) + [8]))
	$2 = *($3 + [148])
	
.LABEL $label$6
	CALL memcpy(($3 + [128]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [120]) = (int_64)0
	*($3 + [112]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8522])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$7
	CALL memcpy(($3 + [112]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8522])
	$2 = *($3 + [148])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $2, [8])
	*(($5 = (($3 + [112]) + [8]))) = *($3 + [64])
	*($3 + [148]) = ($2 + [8])
	*($3 + [104]) = [0]
	*($3 + [96]) = (int_64)0
	CALL $41(($3 + [144]), ($3 + [96]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [48]) = *($3 + [144])
	$2 = *($2)
	*((($3 + [160]) + [8])) = $2
	*(($4 = (($3 + [176]) + [8]))) = $2
	$6 = *($3 + [48])
	*($3 + [176]) = $6
	*($3 + [160]) = $6
	$2 = *($4)
	*((($3 + [192]) + [8])) = $2
	*(($3 + [88])) = $2
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$0 = *($3 + [176])
	*($3 + [80]) = $0
	*($3 + [192]) = $0
	*(($4 = (($3 + [32]) + [8]))) = *($5)
	*($3 + [32]) = *($3 + [112])
	$0 = *($3 + [128])
	$1 = *($3 + [136])
	$2 = CALL $18(($3 + [16]), ($3 + [96]))
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [32])
	CALL $25(($3 + [64]), $1, $0, $3, $2)
	if ( (*($2) & [1]) ){ goto $label$11 }
	if ( (*($3 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $11(*($2 + [8]))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $11(*(($3 + [104])))
	$global$0 = ($3 + [208])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [208])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $6())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $7($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $3($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8312])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $3($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $6 ()
{
	return [8304]
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $3($1)
	
.LABEL $label$2
	*(CALL $6()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $3(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $4($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $4 (int_32 $0)
{
}

void .FUNC $5 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8292]) = $0
	*([0] + [8288]) = $0
	*([0] + [8300]) = (current_memory)
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8300]) + $1)
	*([0] + [8300]) = $2
	$3 = *([0] + [8292])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8292]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8300]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8236])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $0 ()
{
	CALL $5()
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	CALL eosio_assert([0], [8192])
	
.LABEL $label$4
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$5 }
	if ( ($1 <= [2]) ){ goto $label$6 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$6
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	return CALL $13($0, $1)
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $4($0)
	
.LABEL $label$1
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	CALL $15($0, $1)
}

void .FUNC $17 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0)
{
	return CALL $9($0)
}

void .FUNC $11 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $4($0)
	
.LABEL $label$1
}

void .FUNC $12 (int_32 $0)
{
	CALL $11($0)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $8(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8312])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $8(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8522])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0)
	$4 = [16]
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[31]) ){ goto $label$2 }
	CALL eosio_assert([0], [8522])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	$7 = ($6 + [16])
	CALL memcpy(($2 + [48]), $5, [32])
	*(($0 = ($0 + [4]))) = (*($0) + [32])
	$8 = (int_64)0
	$5 = ($2 + [16])
	$0 = [0]
	$9 = (int_64)0
	
.LOOP $label$4:
	$3 = (($2 + [48]) + $0)
	if ( ($4 <= [2]) ){ goto $label$5 }
	$8 = ((int_64)$8 | (int_64)*($3))
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)(uint_64)$8 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$8 = ((int_64)$8 << (int_64)8)
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$6 }
	CALL eosio_assert([0], [8527])
	
.LABEL $label$6
	*($5 + [8]) = $9
	*($5) = ((int_64)$8 | (int_64)*($3))
	$4 = [16]
	$5 = ($5 + [16])
	$8 = (int_64)0
	$9 = (int_64)0
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$7 }
	if ( ($4 <= [2]) ){ goto $label$8 }
	CALL __ashlti3($2, $8, $9, (($4 << [3]) + [-8]))
	$9 = *(($2 + [8]))
	$8 = *($2)
	
.LABEL $label$8
	*($5) = $8
	*($5 + [8]) = $9
	
.LABEL $label$7
	*($7) = *($2 + [16])
	*(($7 + [8])) = *($2 + [24])
	*(($7 + [24])) = *((($2 + [16]) + [24]))
	*(($7 + [16])) = *((($2 + [16]) + [16]))
	$5 = ($6 + [48])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [8522])
	$0 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = ($6 + [56])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [8522])
	$0 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($5, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	*($2 + [48]) = $6
	CALL $50(($2 + [48]), $1)
	$global$0 = ($2 + [80])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [224])
	$global$0 = $2
	*(($3 = (($2 + [80]) + [16]))) = *(($1 + [32]))
	*(($4 = (($2 + [80]) + [24]))) = *(($1 + [40]))
	*(($5 = (($2 + [64]) + [8]))) = *(($1 + [72]))
	*($2 + [80]) = *($1 + [16])
	*($2 + [64]) = *($1 + [64])
	*($2 + [88]) = *(($1 + [24]))
	$6 = *($1)
	$7 = *($1 + [48])
	$8 = *($1 + [56])
	$1 = CALL $18(($2 + [48]), ($1 + [80]))
	*((($2 + [144]) + [8])) = *($5)
	*((($2 + [112]) + [16])) = *($3)
	*((($2 + [112]) + [24])) = *($4)
	*($2 + [144]) = *($2 + [64])
	*($2 + [112]) = *($2 + [80])
	*($2 + [120]) = *($2 + [88])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($5 = (($2 + [192]) + [24]))) = *((($2 + [112]) + [24]))
	*(($9 = (($2 + [192]) + [16]))) = *((($2 + [112]) + [16]))
	*(($10 = (($2 + [176]) + [8]))) = *((($2 + [144]) + [8]))
	*($2 + [200]) = *($2 + [120])
	*($2 + [192]) = *($2 + [112])
	*($2 + [176]) = *($2 + [144])
	$4 = CALL $18(($2 + [160]), $1)
	*((($2 + [16]) + [24])) = *($5)
	*((($2 + [16]) + [16])) = *($9)
	*(($2 + [8])) = *($10)
	*($2 + [24]) = *($2 + [200])
	*($2 + [16]) = *($2 + [192])
	*($2) = *($2 + [176])
	CALL void $3((int_32 $6), (int_64 ($2 + [16])), (int_32 $7), (int_64 $8), (int_64 $2), (int_32 $4), (int_32 $0))
	if ( (*($2 + [160]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $11(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $11(*($1 + [8]))
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [224])
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [104])) = (int_64)0
	*(($4 + [96])) = (int_64)0
	*((($4 + [64]) + [24])) = (int_64)0
	*(($4 + [136])) = (int_64)0
	*(($4 + [152])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [208]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $36(($4 + [16]), ($4 + [208]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [176]) + [8])) = $3
	*(($6 = (($4 + [192]) + [8]))) = $3
	$7 = *($4)
	*($4 + [192]) = $7
	*($4 + [176]) = $7
	$3 = *($6)
	*((($4 + [208]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [192])
	*($4 + [32]) = $0
	*($4 + [208]) = $0
	*($4 + [212]) = ($4 + [168])
	*($4 + [208]) = ($4 + [16])
	CALL $37(($4 + [208]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [144]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $4($2)
	$2 = [1]
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $11(*(($4 + [152])))
	$global$0 = ($4 + [224])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [224])
	return $2
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $38(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $39(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $4($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $11(*(($4 + [112])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8516])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	CALL $48(*($1), ($4 + [16]))
	$3 = ($4 + [48])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8516])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [56])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8516])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	*($2 + [8]) = $4
	CALL $49(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$72 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$72 }
	if ( ((int_64)$2 == (int_64)7284930111776751616) ){ goto $label$71 }
	if ( ((int_64)$2 != (int_64)7746191359077253120) ){ goto $label$1 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3 + [8]) = *($3 + [40])
	CALL $34($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$72
	if ( ((int_64)$1 <= (int_64)6138525834716421439) ){ goto $label$75 }
	if ( ((int_64)$1 > (int_64)6138746527182799391) ){ goto $label$74 }
	if ( ((int_64)$1 > (int_64)6138663591592764927) ){ goto $label$70 }
	if ( ((int_64)$1 <= (int_64)6138550658952465711) ){ goto $label$66 }
	if ( ((int_64)$1 <= (int_64)6138592791200273807) ){ goto $label$58 }
	if ( ((int_64)$1 == (int_64)6138592791200273808) ){ goto $label$42 }
	if ( ((int_64)$1 == (int_64)6138603350178503984) ){ goto $label$41 }
	if ( ((int_64)$1 != (int_64)6138632049247184096) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$75
	if ( ((int_64)$1 <= (int_64)-3665743592915071601) ){ goto $label$73 }
	if ( ((int_64)$1 > (int_64)4229480823957811215) ){ goto $label$69 }
	if ( ((int_64)$1 <= (int_64)-2036055339421765825) ){ goto $label$65 }
	if ( ((int_64)$1 <= (int_64)-674199324417778385) ){ goto $label$57 }
	if ( ((int_64)$1 == (int_64)-674199324417778384) ){ goto $label$40 }
	if ( ((int_64)$1 == (int_64)3652218745770213360) ){ goto $label$39 }
	if ( ((int_64)$1 != (int_64)4154159839052418176) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$74
	if ( ((int_64)$1 > (int_64)6222715904340892975) ){ goto $label$68 }
	if ( ((int_64)$1 <= (int_64)6138852845031695887) ){ goto $label$64 }
	if ( ((int_64)$1 <= (int_64)6141408462785653199) ){ goto $label$56 }
	if ( ((int_64)$1 == (int_64)6141408462785653200) ){ goto $label$38 }
	if ( ((int_64)$1 == (int_64)6155974484018040080) ){ goto $label$37 }
	if ( ((int_64)$1 != (int_64)6201045720689284400) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$73
	if ( ((int_64)$1 <= (int_64)-5915044176690024257) ){ goto $label$67 }
	if ( ((int_64)$1 <= (int_64)-3795244402046888577) ){ goto $label$63 }
	if ( ((int_64)$1 <= (int_64)-3794998355651337121) ){ goto $label$55 }
	if ( ((int_64)$1 == (int_64)-3794998355651337120) ){ goto $label$36 }
	if ( ((int_64)$1 == (int_64)-3742744031849243344) ){ goto $label$35 }
	if ( ((int_64)$1 != (int_64)-3742131409930347216) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$71
	*($3 + [28]) = [0]
	*($3 + [24]) = [2]
	*($3 + [16]) = *($3 + [24])
	CALL $35($0, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$70
	if ( ((int_64)$1 <= (int_64)6138664019028088111) ){ goto $label$62 }
	if ( ((int_64)$1 <= (int_64)6138719799089929519) ){ goto $label$54 }
	if ( ((int_64)$1 == (int_64)6138719799089929520) ){ goto $label$34 }
	if ( ((int_64)$1 == (int_64)6138719799378974000) ){ goto $label$33 }
	if ( ((int_64)$1 != (int_64)6138726749172929840) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$69
	if ( ((int_64)$1 <= (int_64)4849559493988732031) ){ goto $label$61 }
	if ( ((int_64)$1 <= (int_64)5922944455178263855) ){ goto $label$53 }
	if ( ((int_64)$1 == (int_64)5922944455178263856) ){ goto $label$32 }
	if ( ((int_64)$1 == (int_64)5937556300622899072) ){ goto $label$31 }
	if ( ((int_64)$1 != (int_64)6138516952631104144) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$68
	if ( ((int_64)$1 <= (int_64)6820287565801985327) ){ goto $label$60 }
	if ( ((int_64)$1 <= (int_64)7475863548982302879) ){ goto $label$52 }
	if ( ((int_64)$1 == (int_64)7475863548982302880) ){ goto $label$30 }
	if ( ((int_64)$1 == (int_64)7867696630547668288) ){ goto $label$29 }
	if ( ((int_64)$1 != (int_64)8419173534537145664) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$67
	if ( ((int_64)$1 > (int_64)-6620000897419960065) ){ goto $label$59 }
	if ( ((int_64)$1 > (int_64)-8333548645380633329) ){ goto $label$51 }
	if ( ((int_64)$1 == (int_64)-9031537688017092080) ){ goto $label$28 }
	if ( ((int_64)$1 != (int_64)-8383456970150336832) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$66
	if ( ((int_64)$1 > (int_64)6138543369101776175) ){ goto $label$50 }
	if ( ((int_64)$1 == (int_64)6138525834716421440) ){ goto $label$27 }
	if ( ((int_64)$1 != (int_64)6138538890913025312) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$65
	if ( ((int_64)$1 > (int_64)-3603876626722115841) ){ goto $label$49 }
	if ( ((int_64)$1 == (int_64)-3665743592915071600) ){ goto $label$26 }
	if ( ((int_64)$1 != (int_64)-3657683091493988976) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$64
	if ( ((int_64)$1 > (int_64)6138787003766218031) ){ goto $label$48 }
	if ( ((int_64)$1 == (int_64)6138746527182799392) ){ goto $label$25 }
	if ( ((int_64)$1 != (int_64)6138748572435394944) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$63
	if ( ((int_64)$1 > (int_64)-5868437264071867889) ){ goto $label$47 }
	if ( ((int_64)$1 == (int_64)-5915044176690024256) ){ goto $label$24 }
	if ( ((int_64)$1 != (int_64)-5882375932912786272) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$62
	if ( ((int_64)$1 > (int_64)6138663892614456991) ){ goto $label$46 }
	if ( ((int_64)$1 == (int_64)6138663591592764928) ){ goto $label$23 }
	if ( ((int_64)$1 != (int_64)6138663722353479840) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$61
	if ( ((int_64)$1 > (int_64)4229609497839326079) ){ goto $label$45 }
	if ( ((int_64)$1 == (int_64)4229480823957811216) ){ goto $label$22 }
	if ( ((int_64)$1 != (int_64)4229609169547957552) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$60
	if ( ((int_64)$1 > (int_64)6457446440492078383) ){ goto $label$44 }
	if ( ((int_64)$1 == (int_64)6222715904340892976) ){ goto $label$21 }
	if ( ((int_64)$1 != (int_64)6257038465489280352) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$59
	if ( ((int_64)$1 > (int_64)-6219602059180096465) ){ goto $label$43 }
	if ( ((int_64)$1 == (int_64)-6620000897419960064) ){ goto $label$20 }
	if ( ((int_64)$1 != (int_64)-6556659379777500592) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$58
	if ( ((int_64)$1 == (int_64)6138550658952465712) ){ goto $label$19 }
	if ( ((int_64)$1 != (int_64)6138568071520102272) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$57
	if ( ((int_64)$1 == (int_64)-2036055339421765824) ){ goto $label$18 }
	if ( ((int_64)$1 != (int_64)-2035633992695947248) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$56
	if ( ((int_64)$1 == (int_64)6138852845031695888) ){ goto $label$17 }
	if ( ((int_64)$1 != (int_64)6138894366021054848) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$55
	if ( ((int_64)$1 == (int_64)-3795244402046888576) ){ goto $label$16 }
	if ( ((int_64)$1 != (int_64)-3795221252465071824) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$54
	if ( ((int_64)$1 == (int_64)6138664019028088112) ){ goto $label$15 }
	if ( ((int_64)$1 != (int_64)6138673619867606320) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$53
	if ( ((int_64)$1 == (int_64)4849559493988732032) ){ goto $label$14 }
	if ( ((int_64)$1 != (int_64)5887194519648240192) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$52
	if ( ((int_64)$1 == (int_64)6820287565801985328) ){ goto $label$13 }
	if ( ((int_64)$1 != (int_64)7245597576207226240) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$51
	if ( ((int_64)$1 == (int_64)-8333548645380633328) ){ goto $label$12 }
	if ( ((int_64)$1 != (int_64)-8173735138700290768) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$50
	if ( ((int_64)$1 == (int_64)6138543369101776176) ){ goto $label$11 }
	if ( ((int_64)$1 != (int_64)6138550522755798112) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$49
	if ( ((int_64)$1 == (int_64)-3603876626722115840) ){ goto $label$10 }
	if ( ((int_64)$1 != (int_64)-2114004433838664320) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$48
	if ( ((int_64)$1 == (int_64)6138787003766218032) ){ goto $label$9 }
	if ( ((int_64)$1 != (int_64)6138814542599427376) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$47
	if ( ((int_64)$1 == (int_64)-5868437264071867888) ){ goto $label$8 }
	if ( ((int_64)$1 != (int_64)-4373711004677177344) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$46
	if ( ((int_64)$1 == (int_64)6138663892614456992) ){ goto $label$7 }
	if ( ((int_64)$1 != (int_64)6138664018335028592) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$45
	if ( ((int_64)$1 == (int_64)4229609497839326080) ){ goto $label$6 }
	if ( ((int_64)$1 != (int_64)4403557617073657136) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$44
	if ( ((int_64)$1 == (int_64)6457446440492078384) ){ goto $label$5 }
	if ( ((int_64)$1 != (int_64)6463120913914961200) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$43
	if ( ((int_64)$1 == (int_64)-6219602059180096464) ){ goto $label$4 }
	if ( ((int_64)$1 != (int_64)-5969106676485974736) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$42
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$41
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$40
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$39
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$38
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$37
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$36
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$35
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$34
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$33
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$31
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$30
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$29
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$28
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$25
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$24
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$23
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$22
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$21
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$20
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$1 != (int_64)-274268496923866720) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [36]) = [0]
	*($3 + [32]) = [3]
	*($3) = *($3 + [32])
	CALL $35($0, $1, $3)
	
.LABEL $label$1
	CALL $20([0])
	$global$0 = ($3 + [48])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $46(CALL $45($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8516])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8516])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [256])
	$global$0 = $5
	CALL require_auth($1)
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	CALL $22(($5 + [192]))
	$6 = *($0)
	*($5 + [136]) = [8346]
	*($5 + [140]) = CALL $2([8346])
	*($5 + [8]) = *($5 + [136])
	$7 = CALL $26(($5 + [144]), ($5 + [8]))
	*($5 + [120]) = [8356]
	*($5 + [124]) = CALL $2([8356])
	*($5) = *($5 + [120])
	$8 = CALL $26(($5 + [128]), $5)
	*((($5 + [16]) + [24])) = *($5 + [200])
	*(($5 + [48])) = *((($5 + [192]) + [16]))
	*(($5 + [56])) = *((($5 + [192]) + [24]))
	*((($5 + [16]) + [72])) = *(($3 + [8]))
	*($5 + [64]) = $1
	*($5 + [72]) = $2
	*($5 + [16]) = *($0)
	*($5 + [32]) = *($5 + [192])
	*($5 + [80]) = *($3)
	$3 = CALL $18(($5 + [96]), $4)
	*($5 + [152]) = *($7)
	*($5 + [160]) = *($8)
	*(($0 = CALL $9([16]))) = $6
	*($0 + [8]) = (int_64)3617214756542218240
	*(($5 + [188])) = [0]
	$4 = ($0 + [16])
	*((($5 + [152]) + [24])) = $4
	*(($5 + [172])) = $4
	*($5 + [168]) = $0
	*($5 + [180 align=4]) = (int_64)0
	$0 = *($3)
	$3 = ( *(($5 + [100])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($3 + [72])
	$1 = (CASTING uint_64)(uint_32 $3)
	$3 = ($5 + [180])
	
.LOOP $label$2:
	$0 = ($0 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$2 }
	if ( ($0 == 0) ){ goto $label$4 }
	CALL $27($3, $0)
	$3 = *(($5 + [184]))
	$0 = *(($5 + [180]))
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	$0 = [0]
	
.LABEL $label$3
	*($5 + [228]) = $0
	*($5 + [224]) = $0
	*($5 + [232]) = $3
	*($5 + [240]) = ($5 + [224])
	*($5 + [248]) = ($5 + [16])
	CALL $32(($5 + [248]), ($5 + [240]))
	CALL $29(($5 + [152]))
	$0 = *($5 + [180])
	if ( ($0 == 0) ){ goto $label$5 }
	*(($5 + [184])) = $0
	CALL $11($0)
	
.LABEL $label$5
	$0 = *($5 + [168])
	if ( ($0 == 0) ){ goto $label$6 }
	*(($5 + [172])) = $0
	CALL $11($0)
	
.LABEL $label$6
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$1 }
	CALL $11(*(($5 + [104])))
	
.LABEL $label$1
	$global$0 = ($5 + [256])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [64])
	$6 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $6) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8522])
	$6 = *(($5 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $6, [8])
	$4 = (*($6) + [8])
	*(($6 = ($5 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($5 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8522])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*(($3 + [72])) = *($2 + [8])
	*($6) = (*($6) + [8])
	CALL $41(*($1), (*($0) + [80]))
	$global$0 = ($2 + [16])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8522])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8522])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8522])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8522])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $41(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}