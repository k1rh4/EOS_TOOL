(data (i32.const 8192) "transfer\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8210) "eosio.token\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8313) "xlotoioeosio\00")
(data (i32.const 8326) "string is too long to be a valid name\00")
(data (i32.const 8364) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8431) "character is not in allowed character set for names\00")
(data (i32.const 8483) "You don\'t have permission!\00")
(data (i32.const 8510) " gameIdPre: \00")
(data (i32.const 8523) " startgame gameId !!!\00")
(data (i32.const 8545) "EOS\00%d\00")
(data (i32.const 8552) " gameIterPre bouns!!!\00")
(data (i32.const 8574) "Game already Start.\00")
(data (i32.const 8594) "startgame round !!!\00")
(data (i32.const 8614) "startgame work!!!\00")
(data (i32.const 8632) "string is too long to be a valid symbol_code\00")
(data (i32.const 8677) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8730) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8779) "invalid symbol name\00")
(data (i32.const 8799) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8850) "error reading iterator\00")
(data (i32.const 8873) "read\00")
(data (i32.const 8878) "get\00")
(data (i32.const 8882) ".\00")
(data (i32.const 8884) " \00")
(data (i32.const 8886) "cannot create objects in table of another contract\00: out of range\00")
(data (i32.const 8952) "Not a valid num! \00")
(data (i32.const 8970) "Let\'s bets some numbers\00")
(data (i32.const 17708) "00\00")
(data (i32.const 17711) "0\00")
(data (i32.const 17713) "next primary key in table is at autoincrement limit\00")
(data (i32.const 17765) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 17819) "cannot decrement iterator at beginning of table\00")
(data (i32.const 17867) "write\00")
(data (i32.const 17873) "Account already has gameList.\00")
(data (i32.const 17903) "cannot pass end iterator to modify\00")
(data (i32.const 17938) "object passed to modify is not in multi_index\00")
(data (i32.const 17984) "cannot modify objects in table of another contract\00")
(data (i32.const 18035) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18094) "round_0 \n\00")
(data (i32.const 18104) "Let\'s buy a code\00")
(data (i32.const 18121) "round_1\00")
(data (i32.const 18129) "round_2\00")
(data (i32.const 18137) "round_3\00")
(data (i32.const 18145) "round_4\00")
(data (i32.const 18153) "Failed: min < max\00")
(data (i32.const 18171) "Failed: size > 0\00")
(data (i32.const 18188) "Account already has numData.\00")
(data (i32.const 18217) "cannot pass end iterator to erase\00")
(data (i32.const 18251) "cannot increment end iterator\00")
(data (i32.const 18281) "object passed to erase is not in multi_index\00")
(data (i32.const 18326) "cannot erase objects in table of another contract\00")
(data (i32.const 18376) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18429) "something worng.\00")
(data (i32.const 18446) "round_1 | \00")
(data (i32.const 18457) "numData_size: \00")
(data (i32.const 18472) " | \00")
(data (i32.const 18476) "first_num: \00")
(data (i32.const 18488) "newNumData_size: \00")
(data (i32.const 18506) "round_2 | \00")
(data (i32.const 18517) "numData_size : \00")
(data (i32.const 18533) "first_num \00")
(data (i32.const 18544) " | second_num \00")
(data (i32.const 18559) " round_2 numData_size : \00")
(data (i32.const 18584) " newnumData_size \00")
(data (i32.const 18602) " numData_size \00")
(data (i32.const 18617) "round_3 | \00")
(data (i32.const 18628) "cutNumData_size : \00")
(data (i32.const 18647) " | third_num \00")
(data (i32.const 18661) " round_3 numData_size : \00")
(data (i32.const 18686) "round_4 | \00")
(data (i32.const 18697) " the_winning_num: \00")
(data (i32.const 18717) " createPlayer_eosBalance: \00")
(data (i32.const 18744) "unable to find key\00")
(data (i32.const 18763) "true\00")
(data (i32.const 18768) "Inviter already in playerList.\00")
(data (i32.const 18799) "Can not use you friends as you inviter!\00")
(data (i32.const 18839) "Player is in playerList.\00")
(data (i32.const 18864) "Player not in playerList.\00")
(data (i32.const 18890) "friends already in the playerlist!\00")
(data (i32.const 18925) " Final Round! \00")
(data (i32.const 18940) "Account already has playerList.\00")
(data (i32.const 18972) "winners: \00")
(data (i32.const 18982) "No winners,bouns save to next round!!! \00")
(data (i32.const 19022) "attempt to add asset with different symbol\00")
(data (i32.const 19065) "addition underflow\00")
(data (i32.const 19084) "addition overflow\00")
(data (i32.const 19102) "owner\00")
(data (i32.const 19108) "wdgiobankeos\00")
(data (i32.const 19121) "banktransfer\00")
(data (i32.const 19134) "winNum: \00")
(data (i32.const 19143) "must pay with EOS token\00")
(data (i32.const 19167) ";\00")
(data (i32.const 19169) "bet\00")
(data (i32.const 19173) " -eosBalance- \00")
(data (i32.const 19188) " -buyPrice- \00")
(data (i32.const 19201) " -selectNum- \00")
(data (i32.const 19215) " -price- \00")
(data (i32.const 19225) "Set wrong buy price.\00")
(data (i32.const 19246) "Input the wrong number! \00")
(data (i32.const 19271) "Account has not enough balance.\00")
(data (i32.const 19303) "This number is not correct!\00")
(data (i32.const 19331) "correct number: \00")
(data (i32.const 19348) "Buy To Temp\00")
(data (i32.const 19360) "wdgdividends\00")
(data (i32.const 19373) "This Code had bought!\00")
(data (i32.const 19395) "inviter \00")
(data (i32.const 19404) "timestamp\00")
(data (i32.const 19414) "timeNow\00")
(data (i32.const 19422) "number already in codes.\00")
(data (i32.const 19447) "Account already has the playerList.\00")
(data (i32.const 19483) "Account is not in the playerList.\00")
(data (i32.const 19517) "wdgioaccount\00")
(data (i32.const 19530) "inviterreward\00")
(data (i32.const 19544) "invalid quantity\00")
(data (i32.const 19561) "must deposit positive quantity\00")
(data (i32.const 19592) "sell work!!!\00")
(data (i32.const 19605) "Input the worng number! \00")
(data (i32.const 19630) "Not have any owners! \00")
(data (i32.const 19652) "selectNum:\00")
(data (i32.const 19663) "tempBuyersList: \00")
(data (i32.const 19680) ": no conversion\00")
(data (i32.const 19696) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19776) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "prints" (func $fimport$5 (param i32)))
(import "env" "printui" (func $fimport$6 (param i64)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "printi" (func $fimport$8 (param i64)))
(import "env" "sha256" (func $fimport$9 (param i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$11 (result i64)))
(import "env" "db_get_i64" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$13))
(import "env" "prints_l" (func $fimport$14 (param i32 i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$17 (result i64)))
(import "env" "db_previous_i64" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$19 (param i64 i64 i64) (result i32)))
(import "env" "tapos_block_num" (func $fimport$20 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$21 (result i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$24 (param i32)))
(import "env" "memset" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "printn" (func $fimport$26 (param i64)))
(import "env" "send_inline" (func $fimport$27 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$38 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$39 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$42 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$44 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$45 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$46 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $142))
(export "_Znwj" (func $140))
(export "_Znaj" (func $141))
(export "_ZdaPv" (func $143))
(export "_ZnwjSt11align_val_t" (func $144))
(export "_ZnajSt11align_val_t" (func $145))
(export "_ZdlPvSt11align_val_t" (func $146))
(export "_ZdaPvSt11align_val_t" (func $147))
(table $0 13 13 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $12 $14 $15 $16 $68 $174 $176)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20033))
(global $global$2 i32 (i32.const 20033))


void .FUNC $174 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $200($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8873])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8873])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $204($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $176 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $177 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $173([12], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $170 ()
{
	return [9016]
}

void .FUNC $171 (int_32 $0)
{
}

int_32 .FUNC $172 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $196([9024])
	$3 = *([0] + [9032])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [9036])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [9040]
	*([0] + [9032]) = [9040]
	$4 = *([0] + [9036])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $203([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [9032])
	*([0] + [9032]) = $3
	*([0] + [9036]) = [0]
	
.LABEL $label$2
	*([0] + [9036]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $197([9024])
	return [0]
	
.LABEL $label$1
	CALL $197([9024])
	return [-1]
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [128]) = $2
	*($3 + [136]) = $1
	CALL require_auth($1)
	$4 = CALL $191([8545])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8632])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($4 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)0
	
.LABEL $label$1
	*($3 + [112]) = (int_64)0
	*($3 + [120]) = ((int_64)$2 | (int_64)4)
	CALL eosio_assert([1], [8730])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $6
	$5 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [8779])
	*($3 + [32]) = [8210]
	*($3 + [36]) = CALL $191([8210])
	*($3) = *($3 + [32])
	$2 = *(CALL $2(($3 + [72]), $3))
	*(($3 + [104])) = [0]
	*($3 + [80]) = $1
	*($3 + [72]) = $2
	*($3 + [88]) = (int_64)-1
	$2 = (int_64)0
	*($3 + [96]) = (int_64)0
	$4 = CALL $191([8545])
	if ( ($4 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [8632])
	goto $label$13 
	
.LABEL $label$14
	if ( ($4 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$2 = (int_64)0
	
.LOOP $label$15:
	$5 = *(($4 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$16
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$15 }
	
.LABEL $label$12
	$5 = *(($3 + [100]))
	$7 = *(($3 + [96]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$28 }
	
.LOOP $label$30:
	$4 = ($5 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8 + [8]) == (int_64)$2) ){ goto $label$29 }
	$5 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$28 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($3 + [72])), [8799])
	if ( $8 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$4 = CALL db_find_i64(*($3 + [72]), *(($3 + [80])), (int_64)3607749779137757184, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*(CALL $29(($3 + [72]), $4) + [16]) == (int_32)($3 + [72])), [8799])
	
.LABEL $label$27
	$6 = *($3 + [136])
	$4 = CALL $191([8545])
	if ( ($4 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [8632])
	goto $label$24 
	
.LABEL $label$26
	$4 = CALL $191([8545])
	if ( ($4 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [8632])
	goto $label$22 
	
.LABEL $label$25
	if ( ($4 == 0) ){ goto $label$21 }
	
.LABEL $label$24
	$2 = (int_64)0
	
.LOOP $label$31:
	$5 = *(($4 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$32
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$31 }
	goto $label$18 
	
.LABEL $label$23
	if ( ($4 == 0) ){ goto $label$20 }
	
.LABEL $label$22
	$2 = (int_64)0
	
.LOOP $label$33:
	$5 = *(($4 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$34 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$34
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$33 }
	$1 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$19 
	
.LABEL $label$21
	$2 = (int_64)0
	goto $label$18 
	
.LABEL $label$20
	$1 = (int_64)4
	
.LABEL $label$19
	CALL eosio_assert([1], [8730])
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$38 }
	$2 = $6
	$5 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$38
	$2 = $6
	
.LOOP $label$39:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$36 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $5 ){ goto $label$39 }
	$5 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	$5 = [0]
	
.LABEL $label$35
	CALL eosio_assert($5, [8779])
	*(($3 + [120])) = $1
	*($3 + [112]) = (int_64)0
	goto $label$17 
	
.LABEL $label$18
	CALL $30(($3 + [32]), $0, $6, $2)
	*((($3 + [112]) + [8])) = *((($3 + [32]) + [8]))
	*($3 + [112]) = *($3 + [32])
	
.LABEL $label$17
	CALL prints([18717])
	CALL $20(($3 + [112]))
	*(($3 + [64])) = [0]
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	$2 = *($0)
	*($3 + [32]) = $2
	*($3 + [40]) = $2
	$6 = *($3 + [136])
	$4 = CALL db_find_i64($2, $2, (int_64)-6030912129794572288, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$42 }
	CALL eosio_assert(((int_32)*(CALL $31(($3 + [32]), $4) + [264]) == (int_32)($3 + [32])), [8799])
	$7 = *($3 + [56])
	if ( $7 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	*($3 + [20]) = ($3 + [136])
	*($3 + [16]) = ($3 + [128])
	*($3 + [24]) = ($3 + [112])
	CALL $32(($3 + [8]), ($3 + [32]), $6, ($3 + [16]))
	$7 = *($3 + [56])
	if ( ($7 == 0) ){ goto $label$40 }
	
.LABEL $label$41
	$8 = ($3 + [60])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$44 }
	
.LOOP $label$45:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$46 }
	CALL $33($5)
	CALL _ZdlPv($5)
	
.LABEL $label$46
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$45 }
	$4 = *(($3 + [56]))
	goto $label$43 
	
.LABEL $label$44
	$4 = $7
	
.LABEL $label$43
	*($8) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$40
	$7 = *($3 + [96])
	if ( ($7 == 0) ){ goto $label$47 }
	$8 = ($3 + [100])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$49 }
	
.LOOP $label$50:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$51 }
	CALL _ZdlPv($5)
	
.LABEL $label$51
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$50 }
	$4 = *(($3 + [96]))
	goto $label$48 
	
.LABEL $label$49
	$4 = $7
	
.LABEL $label$48
	*($8) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$47
	$global$0 = ($3 + [144])
}

int_32 .FUNC $178 (int_32 $0)
{
	int_32 $1
	$1 = int_32($0 >> [31])
	return ((int_32)($0 + $1) ^ (int_32)$1)
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $200($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8873])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8873])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $204($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $2
	CALL require_auth($1)
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$2 = *($0)
	*($3 + [16]) = $2
	*($3 + [24]) = $2
	$4 = CALL db_find_i64($2, $2, (int_64)-6030912129794572288, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $31(($3 + [16]), $4)
	CALL eosio_assert(((int_32)*($4 + [264]) == (int_32)($3 + [16])), [8799])
	$2 = *($0)
	*($3) = ($3 + [56])
	CALL eosio_assert([1], [17903])
	CALL $35(($3 + [16]), $4, $2, $3)
	CALL $36($0, *($3 + [56]), $1)
	$5 = *($3 + [40])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([1], [18768])
	$2 = *($0)
	*($3 + [8]) = ($3 + [56])
	CALL $37($3, ($3 + [16]), $2, ($3 + [8]))
	CALL $36($0, *($3 + [56]), $1)
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($3 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $33($4)
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	CALL $136(*($0 + [4]), $1)
	*(($4 = $2)) = [0]
	CALL $87($4, $1)
	$5 = *($4)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $200($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL $88($4, $1)
	$6 = *($1)
	*($1 + [268]) = CALL db_store_i64(*($3 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($2)
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [8483])
	CALL require_auth($1)
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$1 = *($0)
	*($3 + [8]) = $1
	*($3 + [16]) = $1
	$4 = [0]
	$5 = CALL db_find_i64($1, $1, (int_64)7035937633859534848, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $19(($3 + [8]), $5)
	CALL eosio_assert(((int_32)*($4 + [400]) == (int_32)($3 + [8])), [8799])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [18429])
	$1 = *($0)
	CALL eosio_assert($5, [17903])
	CALL $28(($3 + [8]), $4, $1, $3)
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($3 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $22($4)
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

int_32 .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( (((int_32)$1 ^ (int_32)$0) & [3]) ){ goto $label$2 }
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ($1 & [3]) ){ goto $label$4 }
	
.LABEL $label$3
	$2 = *($1)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$2 }
	
.LOOP $label$5:
	*($0) = $2
	$2 = *($1 + [4])
	$0 = ($0 + [4])
	$1 = ($1 + [4])
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	
.LABEL $label$2
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	$1 = ($1 + [1])
	
.LOOP $label$6:
	$2 = *($1)
	*($0 + [1]) = $2
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $188 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8878])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $51($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [8873])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [8878])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = int_32(($6 - $3) >> [4])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $52($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ($8 << [4]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$4 = *($8)
	
.LOOP $label$6:
	$7 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8873])
	CALL memcpy($3, *($8), [8])
	$4 = (*($8) + [8])
	*($8) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [8])) = *($2 + [8])
	$4 = (*($8) + [8])
	*($8) = $4
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $22($1)
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	CALL $57(*($0 + [4]), $1)
	*(($4 = $2)) = [0]
	CALL $58($4, $1)
	$5 = *($4)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $200($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL $59($4, $1)
	$6 = *($1 + [16])
	*($1 + [404]) = CALL db_store_i64(*($3 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($2)
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

int_32 .FUNC $41 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	*($0 + [8]) = [0]
	$1 = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [48 align=4]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [56])) = [0]
	$2 = CALL $191([8545])
	if ( ($2 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [8632])
	goto $label$2 
	
.LABEL $label$3
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = (int_64)0
	
.LOOP $label$4:
	$3 = *(($2 + [8544]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$5
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$4 }
	$1 = ((int_64)$1 << (int_64)8)
	
.LABEL $label$1
	*($0 + [88]) = (int_64)0
	*(($2 = ($0 + [96]))) = ((int_64)$1 | (int_64)4)
	CALL eosio_assert([1], [8730])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$10 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [8779])
	$2 = CALL $191([8545])
	if ( ($2 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [8632])
	goto $label$13 
	
.LABEL $label$14
	if ( ($2 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = (int_64)0
	
.LOOP $label$15:
	$3 = *(($2 + [8544]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$16
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$15 }
	$1 = ((int_64)$1 << (int_64)8)
	goto $label$11 
	
.LABEL $label$12
	$1 = (int_64)0
	
.LABEL $label$11
	*($0 + [104]) = (int_64)0
	*(($2 = ($0 + [112]))) = ((int_64)$1 | (int_64)4)
	CALL eosio_assert([1], [8730])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$1 = $4
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$21 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$3 = [0]
	
.LABEL $label$17
	CALL eosio_assert($3, [8779])
	$2 = CALL $191([8545])
	if ( ($2 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [8632])
	goto $label$24 
	
.LABEL $label$25
	if ( ($2 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$1 = (int_64)0
	
.LOOP $label$26:
	$3 = *(($2 + [8544]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$27
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$26 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$22 
	
.LABEL $label$23
	$1 = (int_64)4
	
.LABEL $label$22
	*($0 + [120]) = (int_64)0
	*(($2 = ($0 + [128]))) = $1
	CALL eosio_assert([1], [8730])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$1 = $4
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$32 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$3 = [0]
	
.LABEL $label$28
	CALL eosio_assert($3, [8779])
	$2 = CALL $191([8545])
	if ( ($2 <= [8]) ){ goto $label$36 }
	CALL eosio_assert([0], [8632])
	goto $label$35 
	
.LABEL $label$36
	if ( ($2 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	$1 = (int_64)0
	
.LOOP $label$37:
	$3 = *(($2 + [8544]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$38 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$38
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$37 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$33 
	
.LABEL $label$34
	$1 = (int_64)4
	
.LABEL $label$33
	*($0 + [136]) = (int_64)0
	*(($2 = ($0 + [144]))) = $1
	CALL eosio_assert([1], [8730])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$42 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$42
	$1 = $4
	
.LOOP $label$43:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$43 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$3 = [0]
	
.LABEL $label$39
	CALL eosio_assert($3, [8779])
	$2 = CALL $191([8545])
	if ( ($2 <= [8]) ){ goto $label$47 }
	CALL eosio_assert([0], [8632])
	goto $label$46 
	
.LABEL $label$47
	if ( ($2 == 0) ){ goto $label$45 }
	
.LABEL $label$46
	$1 = (int_64)0
	
.LOOP $label$48:
	$3 = *(($2 + [8544]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$49 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$49
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$48 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$44 
	
.LABEL $label$45
	$1 = (int_64)4
	
.LABEL $label$44
	*($0 + [152]) = (int_64)0
	*(($2 = ($0 + [160]))) = $1
	CALL eosio_assert([1], [8730])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$53 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$53
	$1 = $4
	
.LOOP $label$54:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$51 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$54 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$3 = [0]
	
.LABEL $label$50
	CALL eosio_assert($3, [8779])
	$2 = CALL $191([8545])
	if ( ($2 <= [8]) ){ goto $label$58 }
	CALL eosio_assert([0], [8632])
	goto $label$57 
	
.LABEL $label$58
	if ( ($2 == 0) ){ goto $label$56 }
	
.LABEL $label$57
	$1 = (int_64)0
	
.LOOP $label$59:
	$3 = *(($2 + [8544]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$60 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$60
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$59 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$55 
	
.LABEL $label$56
	$1 = (int_64)4
	
.LABEL $label$55
	*($0 + [168]) = (int_64)0
	*(($2 = ($0 + [176]))) = $1
	CALL eosio_assert([1], [8730])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$63:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$62 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$64 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$64
	$1 = $4
	
.LOOP $label$65:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$62 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$65 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$62
	$3 = [0]
	
.LABEL $label$61
	CALL eosio_assert($3, [8779])
	*($0 + [184]) = (int_64)-1
	*($0 + [192]) = (int_64)4294967295
	*($0 + [200 align=4]) = (int_64)0
	*(($0 + [208])) = (int_64)0
	*($0 + [216 align=4]) = (int_64)0
	*(($0 + [224])) = (int_64)0
	*(($0 + [232])) = (int_64)0
	*($0 + [240 align=4]) = (int_64)0
	*(($0 + [248])) = (int_64)0
	*(($0 + [256])) = (int_64)0
	*($0 + [264 align=4]) = (int_64)0
	*(($0 + [272])) = (int_64)0
	*(($0 + [280])) = (int_64)0
	*($0 + [288 align=4]) = (int_64)0
	*(($0 + [296])) = (int_64)0
	*(($0 + [304])) = (int_64)0
	*($0 + [312]) = [0]
	*(($0 + [316])) = (int_64)0
	*($0 + [324 align=4]) = (int_64)0
	*(($0 + [332])) = [0]
	*($0 + [336]) = (int_64)0
	*(($0 + [344])) = (int_64)0
	*($0 + [352]) = (int_64)0
	*(($0 + [360])) = (int_64)0
	*($0 + [368]) = (int_64)0
	*(($0 + [376])) = (int_64)0
	*($0 + [384]) = (int_64)0
	*(($0 + [392])) = (int_64)0
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	float_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	$2 = ($global$0 - [544])
	$global$0 = $2
	$3 = CALL $149(($2 + [496]), ($1 + [32]))
	*(($2 + [144])) = [0]
	*($2 + [136]) = (int_64)0
	$4 = CALL $191([19167])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($2 + [136]) = ($4 << [1])
	$5 = (($2 + [136]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2 + [136]) = ($6 | [1])
	*($2 + [144]) = $5
	*($2 + [140]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [19167], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	CALL $39(($2 + [480]), $0, $3, ($2 + [136]))
	if ( ((*($2 + [136]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($2 + [144]))
	
.LABEL $label$6
	$7 = *($1)
	*($2 + [472]) = $7
	$4 = CALL $191([8545])
	if ( ($4 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8632])
	goto $label$8 
	
.LABEL $label$9
	if ( ($4 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$8 = (int_64)0
	
.LOOP $label$10:
	$5 = *(($4 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$7
	$8 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	CALL $148(($2 + [136]))
	
.LABEL $label$1
	CALL $30(($2 + [456]), $0, $7, $8)
	*(($2 + [448])) = *(($1 + [24]))
	*($2 + [440]) = *($1 + [16])
	$4 = *($2 + [480])
	if ( (*($4 + [12]) & [1]) ){ goto $label$13 }
	$4 = (($4 + [12]) + [1])
	goto $label$12 
	
.LABEL $label$13
	$4 = *(($4 + [20]))
	
.LABEL $label$12
	$5 = CALL $179($4)
	$9 = CALL $149(($2 + [424]), (*($2 + [480]) + [24]))
	$4 = *($2 + [480])
	if ( (*($4 + [36]) & [1]) ){ goto $label$15 }
	$4 = (($4 + [36]) + [1])
	goto $label$14 
	
.LABEL $label$15
	$4 = *(($4 + [44]))
	
.LABEL $label$14
	*($2 + [416]) = CALL $180($4)
	CALL prints([19173])
	CALL $20(($2 + [456]))
	CALL prints([19188])
	CALL $20(($2 + [440]))
	CALL prints([19201])
	$4 = *($2 + [424])
	$1 = ($4 & [1])
	$10 = ($9 + [1])
	CALL prints_l(( *($9 + [8]) ? $10 : $1 ), ( *($9 + [4]) ? uint_32($4 >> [1]) : $1 ))
	CALL require_auth(*($2 + [472]))
	*(($2 + [408])) = [0]
	*($2 + [400]) = (int_64)0
	$4 = CALL $191([18763])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$19 }
	$7 = (CASTING int_64)(int_32 $5)
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$22 }
	*($2 + [400]) = ($4 << [1])
	$5 = (($2 + [400]) | [1])
	if ( $4 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$1 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($1)
	*($2 + [400]) = ($1 | [1])
	*($2 + [408]) = $5
	*($2 + [404]) = $4
	
.LABEL $label$21
	CALL memcpy($5, [18763], $4)
	
.LABEL $label$20
	$1 = [0]
	*(($5 + $4)) = [0]
	*(($2 + [392])) = [0]
	*($2 + [376]) = (int_64)-1
	*($2 + [384]) = (int_64)0
	$8 = *($0)
	*($2 + [360]) = $8
	*($2 + [368]) = $8
	$4 = CALL db_find_i64($8, $8, (int_64)7035937633859534848, $7)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$24 }
	$1 = CALL $19(($2 + [360]), $4)
	CALL eosio_assert(((int_32)*($1 + [400]) == (int_32)($2 + [360])), [8799])
	*($2 + [356]) = $1
	*($2 + [352]) = ($2 + [360])
	goto $label$23 
	
.LABEL $label$24
	*($2 + [356]) = [0]
	*($2 + [352]) = ($2 + [360])
	
.LABEL $label$23
	*($2 + [344]) = *($1 + [64])
	*(($2 + [336])) = [0]
	*($2 + [320]) = (int_64)-1
	*($2 + [328]) = (int_64)0
	$8 = *($0)
	*($2 + [304]) = $8
	*($2 + [312]) = $8
	$4 = CALL db_find_i64($8, $8, (int_64)-6030912129794572288, *($2 + [472]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$26 }
	$4 = CALL $31(($2 + [304]), $4)
	CALL eosio_assert(((int_32)*($4 + [264]) == (int_32)($2 + [304])), [8799])
	*($2 + [300]) = $4
	*($2 + [296]) = ($2 + [304])
	goto $label$25 
	
.LABEL $label$26
	*($2 + [300]) = [0]
	*($2 + [296]) = ($2 + [304])
	
.LABEL $label$25
	*(($2 + [288])) = [0]
	*($2 + [272]) = (int_64)-1
	*($2 + [280]) = (int_64)0
	$8 = *($0)
	*($2 + [256]) = $8
	*($2 + [264]) = $8
	*((($2 + [240]) + [8])) = *((($2 + [456]) + [8]))
	*($2 + [240]) = *($2 + [456])
	$4 = *($2 + [356])
	CALL prints([19215])
	CALL $20(($4 + [168]))
	CALL eosio_assert(((int_64)*($2 + [440]) == (int_64)*(*($2 + [356]) + [168])), [19225])
	$4 = *($2 + [424])
	$11 = ($9 + [4])
	CALL eosio_assert(((int_32)( *($11) ? uint_32($4 >> [1]) : ($4 & [1]) ) == (int_32)[3]), [19246])
	CALL eosio_assert(((int_64)*($2 + [456]) >= (int_64)*(*($2 + [356]) + [168])), [19271])
	$12 = *($4 + [4])
	$4 = *($2 + [356])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$27 }
	$13 = ($9 + [8])
	
.LOOP $label$28:
	$4 = ($4 & [1])
	$4 = *($2 + [424])
	$14 = ($4 & [1])
	$4 = *($5)
	$1 = uint_32($4 >> [1])
	$15 = ( *($5 + [4]) ? $1 : $14 )
	if ( ((int_32)$15 != (int_32)( *($11) ? uint_32($4 >> [1]) : $4 )) ){ goto $label$29 }
	$6 = ( *($13) ? $10 : $4 )
	if ( $14 ){ goto $label$30 }
	if ( ($15 == 0) ){ goto $label$27 }
	$4 = [0]
	
.LOOP $label$31:
	if ( ((int_32)*((($5 + $4) + [1])) != (int_32)*(($6 + $4))) ){ goto $label$29 }
	$4 = ($4 + [1])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$31 }
	goto $label$27 
	
.LABEL $label$30
	if ( ($15 == 0) ){ goto $label$27 }
	if ( (CALL $188(( *($5 + [8]) ? ($5 + [1]) : $14 ), $6, $15) == 0) ){ goto $label$27 }
	
.LABEL $label$29
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$12) ){ goto $label$28 }
	$5 = $12
	
.LABEL $label$27
	CALL eosio_assert(((int_32)$5 != (int_32)*(*($2 + [356]) + [4])), [19303])
	CALL prints([19331])
	$4 = *($2 + [424])
	$5 = ($4 & [1])
	CALL prints_l(( *(($9 + [8])) ? $10 : $5 ), ( *($11) ? uint_32($4 >> [1]) : $5 ))
	CALL prints([8884])
	$8 = *($0)
	*($2 + [200]) = [19102]
	*($2 + [204]) = CALL $191([19102])
	*($2 + [88]) = *($2 + [200])
	*($2 + [192]) = *(CALL $2(($2 + [136]), ($2 + [88])))
	*($2 + [184]) = $8
	*($2 + [200]) = [8210]
	*($2 + [204]) = CALL $191([8210])
	*($2 + [80]) = *($2 + [200])
	$16 = *(CALL $2(($2 + [136]), ($2 + [80])))
	*($2 + [200]) = [8192]
	*($2 + [204]) = CALL $191([8192])
	*($2 + [72]) = *($2 + [200])
	$17 = *(CALL $2(($2 + [136]), ($2 + [72])))
	*($2 + [120]) = [19108]
	*($2 + [124]) = CALL $191([19108])
	*($2 + [64]) = *($2 + [120])
	$6 = CALL $2(($2 + [128]), ($2 + [64]))
	$8 = *($2 + [440])
	$4 = CALL $191([8545])
	$5 = ($4 <= [8])
	$18 = ((float_64)(CASTING float_64)(int_64 $8) * (float_64)(float_64)0.95)
	if ( ((float_64)(float_64)|$18| < (float_64)(float_64)9223372036854775808) ){ goto $label$33 }
	$19 = (int_64)-9223372036854775808
	if ( ($5 == 0) ){ goto $label$32 }
	goto $label$18 
	
.LABEL $label$33
	$19 = (Rounds 0)($18)
	if ( $5 ){ goto $label$18 }
	
.LABEL $label$32
	CALL eosio_assert([0], [8632])
	goto $label$17 
	
.LABEL $label$19
	CALL $148(($2 + [400]))
	
.LABEL $label$18
	if ( $4 ){ goto $label$17 }
	$7 = (int_64)0
	goto $label$16 
	
.LABEL $label$17
	$8 = (int_64)0
	
.LOOP $label$34:
	$5 = *(($4 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$35 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$35
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$34 }
	$7 = ((int_64)$8 << (int_64)8)
	
.LABEL $label$16
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$20 = ((int_64)$7 | (int_64)4)
	$4 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$39 }
	$8 = $7
	$5 = [1]
	$1 = $4
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$39
	$8 = $7
	
.LOOP $label$40:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$37 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $5 ){ goto $label$40 }
	$5 = [1]
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$5 = [0]
	
.LABEL $label$36
	CALL eosio_assert($5, [8779])
	*(($2 + [112])) = [0]
	*($2 + [104]) = (int_64)0
	$4 = CALL $191([19348])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$44 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$47 }
	*($2 + [104]) = ($4 << [1])
	$5 = (($2 + [104]) | [1])
	if ( $4 ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$1 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($1)
	*($2 + [104]) = ($1 | [1])
	*($2 + [112]) = $5
	*($2 + [108]) = $4
	
.LABEL $label$46
	CALL memcpy($5, [19348], $4)
	
.LABEL $label$45
	*(($5 + $4)) = [0]
	*(($2 + [160])) = $20
	$4 = ($2 + [112])
	*(($2 + [176])) = *($4)
	*($4) = [0]
	*($2 + [152]) = $19
	*($2 + [136]) = *($0)
	*($2 + [144]) = *($6)
	*($2 + [168]) = *($2 + [104])
	*($2 + [104]) = (int_64)0
	$4 = CALL $119(($2 + [200]), ($2 + [184]), $16, $17, ($2 + [136]))
	CALL $113(($2 + [512]), $4)
	$5 = *($2 + [512])
	CALL send_inline($5, (*($2 + [516]) - $5))
	$5 = *($2 + [512])
	if ( ($5 == 0) ){ goto $label$48 }
	*($2 + [516]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$48
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$49 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$49
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$50 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$50
	if ( ((*(($2 + [168])) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*(($2 + [176])))
	
.LABEL $label$51
	if ( ((*($2 + [104]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*(($2 + [112])))
	
.LABEL $label$52
	$8 = *($0)
	*($2 + [200]) = [19102]
	*($2 + [204]) = CALL $191([19102])
	*($2 + [56]) = *($2 + [200])
	*($2 + [192]) = *(CALL $2(($2 + [136]), ($2 + [56])))
	*($2 + [184]) = $8
	*($2 + [200]) = [8210]
	*($2 + [204]) = CALL $191([8210])
	*($2 + [48]) = *($2 + [200])
	$16 = *(CALL $2(($2 + [136]), ($2 + [48])))
	*($2 + [200]) = [8192]
	*($2 + [204]) = CALL $191([8192])
	*($2 + [40]) = *($2 + [200])
	$17 = *(CALL $2(($2 + [136]), ($2 + [40])))
	*($2 + [96]) = [19360]
	*($2 + [100]) = CALL $191([19360])
	*($2 + [32]) = *($2 + [96])
	$6 = CALL $2(($2 + [128]), ($2 + [32]))
	$8 = *($2 + [440])
	$4 = CALL $191([8545])
	$5 = ($4 <= [8])
	$18 = ((float_64)(CASTING float_64)(int_64 $8) * (float_64)(float_64)0.05)
	if ( ((float_64)(float_64)|$18| < (float_64)(float_64)9223372036854775808) ){ goto $label$54 }
	$19 = (int_64)-9223372036854775808
	if ( ($5 == 0) ){ goto $label$53 }
	goto $label$43 
	
.LABEL $label$54
	$19 = (Rounds 0)($18)
	if ( $5 ){ goto $label$43 }
	
.LABEL $label$53
	CALL eosio_assert([0], [8632])
	goto $label$42 
	
.LABEL $label$44
	CALL $148(($2 + [104]))
	
.LABEL $label$43
	if ( $4 ){ goto $label$42 }
	$7 = (int_64)0
	goto $label$41 
	
.LABEL $label$42
	$8 = (int_64)0
	
.LOOP $label$55:
	$5 = *(($4 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$56 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$56
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$55 }
	$7 = ((int_64)$8 << (int_64)8)
	
.LABEL $label$41
	CALL eosio_assert((uint_64)(((int_64)$19 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$20 = ((int_64)$7 | (int_64)4)
	$4 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$60 }
	$8 = $7
	$5 = [1]
	$1 = $4
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$60
	$8 = $7
	
.LOOP $label$61:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$58 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $5 ){ goto $label$61 }
	$5 = [1]
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$5 = [0]
	
.LABEL $label$57
	CALL eosio_assert($5, [8779])
	*(($2 + [112])) = [0]
	*($2 + [104]) = (int_64)0
	$4 = CALL $191([19348])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$66 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$69 }
	*($2 + [104]) = ($4 << [1])
	$5 = (($2 + [104]) | [1])
	if ( $4 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	$1 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($1)
	*($2 + [104]) = ($1 | [1])
	*($2 + [112]) = $5
	*($2 + [108]) = $4
	
.LABEL $label$68
	CALL memcpy($5, [19348], $4)
	
.LABEL $label$67
	*(($5 + $4)) = [0]
	*(($2 + [160])) = $20
	$4 = ($2 + [112])
	*(($2 + [176])) = *($4)
	*($4) = [0]
	*($2 + [152]) = $19
	*($2 + [136]) = *($0)
	*($2 + [144]) = *($6)
	*($2 + [168]) = *($2 + [104])
	*($2 + [104]) = (int_64)0
	$4 = CALL $119(($2 + [200]), ($2 + [184]), $16, $17, ($2 + [136]))
	CALL $113(($2 + [512]), $4)
	$5 = *($2 + [512])
	CALL send_inline($5, (*($2 + [516]) - $5))
	$5 = *($2 + [512])
	if ( ($5 == 0) ){ goto $label$70 }
	*($2 + [516]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$70
	$5 = *($4 + [28])
	if ( ($5 == 0) ){ goto $label$71 }
	*(($4 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$71
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$72 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$72
	if ( ((*(($2 + [168])) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*(($2 + [176])))
	
.LABEL $label$73
	if ( ((*($2 + [104]) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*(($2 + [112])))
	
.LABEL $label$74
	$4 = *($2 + [300])
	if ( ((int_32)*(($4 + [48])) == (int_32)*($4 + [44])) ){ goto $label$75 }
	if ( ((int_64)*($4 + [8]) != (int_64)*(*($2 + [356]) + [16])) ){ goto $label$75 }
	$14 = [0]
	$13 = ($9 + [4])
	$21 = ($9 + [8])
	
.LOOP $label$76:
	$5 = (*($4 + [44]) + ((int_32)$14 * (int_32)[12]))
	$4 = *($5)
	if ( ($4 & [1]) ){ goto $label$78 }
	$4 = uint_32($4 >> [1])
	$12 = ($5 + [1])
	goto $label$77 
	
.LABEL $label$78
	$4 = *($5 + [4])
	$12 = *($5 + [8])
	
.LABEL $label$77
	$1 = ($5 & [1])
	$5 = *($2 + [424])
	$5 = ( *($13) ? uint_32($5 >> [1]) : $1 )
	if ( ($5 == 0) ){ goto $label$80 }
	$6 = ($12 + $4)
	if ( ((int_32)$4 < (int_32)$5) ){ goto $label$82 }
	$11 = ( *($21) ? $10 : $1 )
	$15 = *($11)
	$1 = $12
	
.LOOP $label$83:
	$4 = (($4 - $5) + [1])
	if ( ($4 == 0) ){ goto $label$82 }
	$4 = CALL $187($1, $15, $4)
	if ( ($4 == 0) ){ goto $label$82 }
	if ( (CALL $188($4, $11, $5) == 0) ){ goto $label$81 }
	$1 = ($4 + [1])
	$4 = ($6 - $1)
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$83 }
	
.LABEL $label$82
	$4 = $6
	
.LABEL $label$81
	$4 = ( [-1] ? ($4 - $12) : ((int_32)$4 == (int_32)$6) )
	goto $label$79 
	
.LABEL $label$80
	$4 = [0]
	
.LABEL $label$79
	CALL eosio_assert(((int_32)$4 == (int_32)[-1]), [19373])
	$4 = *($2 + [300])
	$14 = ($14 + [1])
	if ( ($14 <= ((int_32)(*(($4 + [48])) - *($4 + [44])) / (int_32)[12])) ){ goto $label$76 }
	
.LABEL $label$75
	CALL prints([19395])
	CALL printn(*($4 + [168]))
	CALL prints([8884])
	$8 = CALL current_time()
	CALL prints([19404])
	CALL printui($8)
	$8 = CALL current_time()
	CALL prints([19414])
	CALL printui(((int_64)((uint_64)$8 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	*((($2 + [136]) + [8])) = [0]
	*($2 + [136]) = (int_64)0
	$1 = ( *(($9 + [8])) ? $10 : (*($2 + [424]) & [1]) )
	$4 = CALL $191($1)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$65 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$86 }
	*($2 + [136]) = ($4 << [1])
	$5 = (($2 + [136]) | [1])
	if ( $4 ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$86
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2 + [136]) = ($6 | [1])
	*($2 + [144]) = $5
	*($2 + [140]) = $4
	
.LABEL $label$85
	CALL memcpy($5, $1, $4)
	
.LABEL $label$84
	*(($5 + $4)) = [0]
	$8 = (CASTING int_64)(int_32 CALL $162(($2 + [136]), [0], [10]))
	if ( ((*($2 + [136]) & [1]) == 0) ){ goto $label$87 }
	CALL _ZdlPv(*($2 + [144]))
	
.LABEL $label$87
	*($2 + [104]) = $8
	$5 = *(($2 + [284]))
	$6 = *(($2 + [280]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$89 }
	
.LOOP $label$91:
	$4 = ($5 + [-24])
	$1 = *($4)
	if ( ((int_64)*($1) == (int_64)$8) ){ goto $label$90 }
	$5 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$91 }
	goto $label$89 
	
.LABEL $label$90
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$89 }
	CALL eosio_assert(((int_32)*($1 + [124]) == (int_32)($2 + [256])), [8799])
	*($2 + [132]) = $1
	*($2 + [128]) = ($2 + [256])
	goto $label$88 
	
.LABEL $label$89
	$4 = CALL db_find_i64(*($2 + [256]), *(($2 + [264])), (int_64)4977229654197796864, $8)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$92 }
	$1 = CALL $97(($2 + [256]), $4)
	CALL eosio_assert(((int_32)*($1 + [124]) == (int_32)($2 + [256])), [8799])
	*($2 + [132]) = $1
	*($2 + [128]) = ($2 + [256])
	goto $label$88 
	
.LABEL $label$92
	$1 = [0]
	*($2 + [132]) = [0]
	*($2 + [128]) = ($2 + [256])
	
.LABEL $label$88
	*($2 + [520]) = [0]
	*($2 + [512]) = (int_64)0
	CALL eosio_assert([1], [19422])
	if ( ($1 == 0) ){ goto $label$94 }
	$8 = *($0)
	$4 = *($2 + [132])
	*($2 + [152]) = $0
	*($2 + [156]) = $9
	*($2 + [140]) = ($2 + [344])
	*($2 + [136]) = ($2 + [352])
	*($2 + [144]) = ($2 + [472])
	*($2 + [148]) = ($2 + [512])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [17903])
	CALL $120(($2 + [256]), $4, $8, ($2 + [136]))
	goto $label$93 
	
.LABEL $label$94
	$8 = *($0)
	*($2 + [144]) = $9
	*($2 + [160]) = $0
	*($2 + [140]) = ($2 + [104])
	*($2 + [136]) = ($2 + [352])
	*($2 + [148]) = ($2 + [344])
	*($2 + [152]) = ($2 + [472])
	*($2 + [156]) = ($2 + [512])
	CALL $121(($2 + [200]), ($2 + [256]), $8, ($2 + [136]))
	
.LABEL $label$93
	*($2 + [240]) = (int_64))(*($2 + [240]) - *($2 + [440]))
	if ( (*($2 + [300]) == 0) ){ goto $label$96 }
	CALL eosio_assert([1], [19483])
	$8 = *($0)
	$4 = *($2 + [300])
	*($2 + [140]) = $9
	*($2 + [136]) = ($2 + [352])
	*($2 + [144]) = ($2 + [240])
	*($2 + [148]) = ($2 + [416])
	*($2 + [152]) = ($2 + [440])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [17903])
	CALL $122(($2 + [304]), $4, $8, ($2 + [136]))
	goto $label$95 
	
.LABEL $label$96
	CALL eosio_assert([1], [19447])
	$8 = *($0)
	*($2 + [144]) = $9
	*($2 + [140]) = ($2 + [472])
	*($2 + [136]) = ($2 + [352])
	*($2 + [148]) = ($2 + [416])
	*($2 + [152]) = ($2 + [440])
	*($2 + [156]) = ($2 + [240])
	CALL $123(($2 + [200]), ($2 + [304]), $8, ($2 + [136]))
	
.LABEL $label$95
	$8 = *($0)
	$4 = *($2 + [356])
	*($2 + [140]) = $9
	*($2 + [136]) = ($2 + [472])
	*($2 + [144]) = ($2 + [440])
	*($2 + [148]) = ($2 + [416])
	*($2 + [152]) = ($2 + [512])
	*($2 + [156]) = ($2 + [344])
	*($2 + [160]) = ($2 + [128])
	*($2 + [164]) = ($2 + [296])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [17903])
	CALL $124(($2 + [360]), $4, $8, ($2 + [136]))
	$8 = *($0)
	*($2 + [200]) = [19102]
	*($2 + [204]) = CALL $191([19102])
	*($2 + [24]) = *($2 + [200])
	$7 = *(CALL $2(($2 + [136]), ($2 + [24])))
	*($2 + [200]) = [19517]
	*($2 + [204]) = CALL $191([19517])
	*($2 + [16]) = *($2 + [200])
	$19 = *(CALL $2(($2 + [136]), ($2 + [16])))
	*($2 + [200]) = [19530]
	*($2 + [204]) = CALL $191([19530])
	*($2 + [8]) = *($2 + [200])
	$16 = *(CALL $2(($2 + [136]), ($2 + [8])))
	*(($5 = (($2 + [136]) + [24]))) = [0]
	*((($2 + [200]) + [24])) = *(($2 + [448]))
	*($2 + [136]) = $19
	*($2 + [144]) = $16
	*($2 + [152]) = (int_64)0
	*($2 + [200]) = *($0)
	*($2 + [208]) = *($2 + [472])
	*($2 + [216]) = *($2 + [440])
	*(($4 = CALL _Znwj([16]))) = $8
	*($4 + [8]) = $7
	*(($2 + [172])) = [0]
	$1 = ($4 + [16])
	*($5) = $1
	*(($2 + [156])) = $1
	*($2 + [152]) = $4
	*($2 + [164 align=4]) = (int_64)0
	CALL $56(($2 + [164]), [32])
	$4 = *((($2 + [136]) + [32]))
	$5 = *($2 + [164])
	*($2 + [188]) = $5
	*($2 + [184]) = $5
	*($2 + [192]) = $4
	*($2 + [528]) = ($2 + [184])
	*($2 + [536]) = ($2 + [200])
	CALL $112(($2 + [536]), ($2 + [528]))
	CALL $113(($2 + [184]), ($2 + [136]))
	$4 = *($2 + [184])
	CALL send_inline($4, (*($2 + [188]) - $4))
	$4 = *($2 + [184])
	if ( ($4 == 0) ){ goto $label$97 }
	*($2 + [188]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$97
	$4 = *($2 + [164])
	if ( ($4 == 0) ){ goto $label$98 }
	*(($2 + [168])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$98
	$4 = *($2 + [152])
	if ( ($4 == 0) ){ goto $label$99 }
	*(($2 + [156])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$99
	$4 = *($2 + [512])
	if ( ($4 == 0) ){ goto $label$100 }
	*($2 + [516]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$100
	$1 = *($2 + [280])
	if ( ($1 == 0) ){ goto $label$101 }
	$6 = ($2 + [284])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$103 }
	$4 = ($4 + [-24])
	
.LOOP $label$104:
	$5 = CALL $104($4)
	$4 = ($4 + [-24])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$104 }
	$4 = *(($2 + [280]))
	goto $label$102 
	
.LABEL $label$103
	$4 = $1
	
.LABEL $label$102
	*($6) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$101
	$1 = *($2 + [328])
	if ( ($1 == 0) ){ goto $label$105 }
	$6 = ($2 + [332])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$107 }
	
.LOOP $label$108:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$109 }
	CALL $33($5)
	CALL _ZdlPv($5)
	
.LABEL $label$109
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$108 }
	$4 = *(($2 + [328]))
	goto $label$106 
	
.LABEL $label$107
	$4 = $1
	
.LABEL $label$106
	*($6) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$105
	$1 = *($2 + [384])
	if ( ($1 == 0) ){ goto $label$110 }
	$6 = ($2 + [388])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$112 }
	
.LOOP $label$113:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$114 }
	CALL $22($5)
	CALL _ZdlPv($5)
	
.LABEL $label$114
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$113 }
	$4 = *(($2 + [384]))
	goto $label$111 
	
.LABEL $label$112
	$4 = $1
	
.LABEL $label$111
	*($6) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$110
	if ( (*($2 + [400]) & [1]) ){ goto $label$116 }
	if ( (*($2 + [424]) & [1]) ){ goto $label$115 }
	goto $label$64 
	
.LABEL $label$116
	CALL _ZdlPv(*($2 + [408]))
	if ( ((*($2 + [424]) & [1]) == 0) ){ goto $label$64 }
	
.LABEL $label$115
	CALL _ZdlPv(*(($9 + [8])))
	$1 = *($2 + [480])
	if ( $1 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$66
	CALL $148(($2 + [104]))
	
.LABEL $label$65
	CALL $148(($2 + [136]))
	
.LABEL $label$64
	$1 = *($2 + [480])
	if ( ($1 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	$5 = *($2 + [484])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$118 }
	
.LOOP $label$119:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$120 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$120
	$5 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$119 }
	$4 = *($2 + [480])
	goto $label$117 
	
.LABEL $label$118
	$4 = $1
	
.LABEL $label$117
	*($2 + [484]) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$62
	if ( ((*($2 + [496]) & [1]) == 0) ){ goto $label$121 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$121
	$global$0 = ($2 + [544])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8878])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $50($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [8873])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8878])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [2])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $54($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [2]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($5) - $3) > (uint_32)[3]), [8873])
	CALL memcpy($7, *($2), [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$7 = ($7 + [4])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8878])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $53($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($6 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $23($0, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$0 = CALL $45($0, $1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $45(CALL $45(CALL $45($0, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [96])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [112])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [128])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [144])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [160])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [168]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [176])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8873])
	CALL memcpy(($1 + [184]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8873])
	CALL memcpy(($1 + [188]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8873])
	CALL memcpy(($1 + [192]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8873])
	CALL memcpy(($1 + [196]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $46($0, ($1 + [200]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8873])
	CALL memcpy(($1 + [212]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $47(CALL $47(CALL $47(CALL $47(CALL $49(CALL $48(CALL $45(CALL $47(CALL $47(CALL $47($0, ($1 + [216])), ($1 + [228])), ($1 + [240])), ($1 + [252])), ($1 + [264])), ($1 + [276])), ($1 + [288])), ($1 + [300])), ($1 + [312])), ($1 + [324]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [336]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [344])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [352]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [360])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [368]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [376])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [384]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [392])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $167 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $166 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $191($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $151($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $154(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $177(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8549], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $154(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $154(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $164 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $166($1, $0, [19680])
	CALL $168()
	(unreachable)
}

void .FUNC $163 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $166($1, $0, [8937])
	CALL $167()
	(unreachable)
}

int_32 .FUNC $162 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $191([8222])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8222], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $170())
	*(CALL $170()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $186($4, ($3 + [12]), $2)
	$5 = CALL $170()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $163($3)
	
.LABEL $label$1
	CALL $164($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $188(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $160 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $187(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $169 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $168 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $175 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = *($1)
	$2 = *($1 + [4])
	$4 = (CASTING uint_64)(uint_32 ((int_32)($2 - $3) / (int_32)[12]))
	$5 = *($0)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $5
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = *($3)
	$4 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$4 }
	*($0) = $5
	$6 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$5 }
	$5 = ($6 + $5)
	*($0) = $5
	
.LABEL $label$5
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = ($5 + [8])
	*($0) = $5
	$3 = *($1 + [24])
	$2 = *(($1 + [28]))
	$4 = (CASTING uint_64)(uint_32 ((int_32)($2 - $3) / (int_32)[12]))
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$6 }
	*($0) = $5
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = *($3)
	$4 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	*($0) = $5
	$6 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$10 }
	$5 = ($6 + $5)
	*($0) = $5
	
.LABEL $label$10
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	$3 = *($1 + [36])
	$2 = *(($1 + [40]))
	$4 = (CASTING uint_64)(uint_32 ((int_32)($2 - $3) / (int_32)[12]))
	
.LOOP $label$11:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$11 }
	*($0) = $5
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$6 = *($3)
	$4 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$14:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$14 }
	*($0) = $5
	$6 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$15 }
	$5 = ($6 + $5)
	*($0) = $5
	
.LABEL $label$15
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	$3 = *($1 + [48])
	$2 = *(($1 + [52]))
	$4 = (CASTING uint_64)(uint_32 ((int_32)($2 - $3) / (int_32)[12]))
	
.LOOP $label$16:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$16 }
	*($0) = $5
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$17 }
	
.LOOP $label$18:
	$6 = *($3)
	$4 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$19:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$19 }
	*($0) = $5
	$6 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$20 }
	$5 = ($6 + $5)
	*($0) = $5
	
.LABEL $label$20
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$18 }
	
.LABEL $label$17
	$5 = ($5 + [136])
	*($0) = $5
	$6 = *($1 + [200])
	$3 = *(($1 + [204]))
	$2 = ($3 - $6)
	$4 = (CASTING uint_64)(uint_32 int_32($2 >> [2]))
	
.LOOP $label$21:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$21 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$22 }
	$5 = (($2 & [-4]) + $5)
	
.LABEL $label$22
	$5 = ($5 + [4])
	*($0) = $5
	$6 = *($1 + [216])
	$3 = *(($1 + [220]))
	$2 = ($3 - $6)
	$4 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$23:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$23 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$24 }
	$5 = (($2 & [-8]) + $5)
	
.LABEL $label$24
	*($0) = $5
	$6 = *($1 + [228])
	$3 = *(($1 + [232]))
	$2 = ($3 - $6)
	$4 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$25:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$25 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$26 }
	$5 = (($2 & [-8]) + $5)
	
.LABEL $label$26
	*($0) = $5
	$6 = *($1 + [240])
	$3 = *(($1 + [244]))
	$2 = ($3 - $6)
	$4 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$27:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$27 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$28 }
	$5 = (($2 & [-8]) + $5)
	
.LABEL $label$28
	*($0) = $5
	$3 = *($1 + [252])
	$2 = *(($1 + [256]))
	$4 = (CASTING uint_64)(uint_32 ((int_32)($2 - $3) / (int_32)[12]))
	
.LOOP $label$29:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$29 }
	*($0) = $5
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$30 }
	
.LOOP $label$31:
	$6 = *($3)
	$4 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$32:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$32 }
	*($0) = $5
	$6 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$33 }
	$5 = ($6 + $5)
	*($0) = $5
	
.LABEL $label$33
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$31 }
	
.LABEL $label$30
	$6 = *($1 + [264])
	$3 = *(($1 + [268]))
	$2 = ($3 - $6)
	$4 = (CASTING uint_64)(uint_32 int_32($2 >> [4]))
	
.LOOP $label$34:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$34 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$35 }
	$5 = (($2 & [-16]) + $5)
	
.LABEL $label$35
	*($0) = $5
	$6 = *($1 + [276])
	$3 = *(($1 + [280]))
	$2 = ($3 - $6)
	$4 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$36:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$36 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$37 }
	$5 = (($2 & [-8]) + $5)
	
.LABEL $label$37
	*($0) = $5
	$6 = *($1 + [288])
	$3 = *(($1 + [292]))
	$2 = ($3 - $6)
	$4 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$38:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$38 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$39 }
	$5 = (($2 & [-8]) + $5)
	
.LABEL $label$39
	*($0) = $5
	$6 = *($1 + [300])
	$3 = *(($1 + [304]))
	$2 = ($3 - $6)
	$4 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$40:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$40 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$41 }
	$5 = (($2 & [-8]) + $5)
	
.LABEL $label$41
	*($0) = $5
	$6 = *($1 + [312])
	$3 = *(($1 + [316]))
	$2 = ($3 - $6)
	$4 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$42:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$42 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$43 }
	$5 = (($2 & [-8]) + $5)
	
.LABEL $label$43
	*($0) = $5
	$6 = *($1 + [324])
	$3 = *(($1 + [328]))
	$1 = ($3 - $6)
	$4 = (CASTING uint_64)(uint_32 int_32($1 >> [3]))
	
.LOOP $label$44:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$44 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$45 }
	$5 = (($1 & [-8]) + $5)
	
.LABEL $label$45
	*($0) = ($5 + [64])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[12]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [8]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17867])
	CALL memcpy(*($6), ($2 + [8]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $63($0, $6)
	$6 = ($6 + [12])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17867])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[12]))
	
.LOOP $label$4:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [8]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $6) > (int_32)[0]), [17867])
	CALL memcpy(*($4), ($2 + [8]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $8 ){ goto $label$4 }
	$7 = *(($1 + [28]))
	$4 = *(($1 + [24]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $63($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	$6 = *(($0 + [4]))
	
.LABEL $label$5
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[12]))
	$5 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$7:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [8]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $6) > (int_32)[0]), [17867])
	CALL memcpy(*($4), ($2 + [8]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $8 ){ goto $label$7 }
	$7 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL $63($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	$6 = *(($0 + [4]))
	
.LABEL $label$8
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [52])) - *($1 + [48])) / (int_32)[12]))
	$5 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$10:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [8]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $6) > (int_32)[0]), [17867])
	CALL memcpy(*($4), ($2 + [8]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $8 ){ goto $label$10 }
	$7 = *(($1 + [52]))
	$4 = *(($1 + [48]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	CALL $63($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$12 }
	$6 = *(($0 + [4]))
	
.LABEL $label$11
	$4 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[7]), [17867])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($1 + [64]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($1 + [72]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($1 + [80]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($1 + [88]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	*($2 + [8]) = *(($1 + [96]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($2 + [8]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($1 + [104]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	*($2 + [8]) = *(($1 + [112]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($2 + [8]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($1 + [120]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	*($2 + [8]) = *(($1 + [128]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($2 + [8]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($1 + [136]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	*($2 + [8]) = *(($1 + [144]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($2 + [8]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($1 + [152]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	*($2 + [8]) = *(($1 + [160]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($2 + [8]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($1 + [168]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	*($2 + [8]) = *(($1 + [176]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($2 + [8]), [8])
	$7 = (*($6) + [8])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [17867])
	CALL memcpy(*($6), ($1 + [184]), [4])
	$7 = (*($6) + [4])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [17867])
	CALL memcpy(*($6), ($1 + [188]), [4])
	$7 = (*($6) + [4])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [17867])
	CALL memcpy(*($6), ($1 + [192]), [4])
	$7 = (*($6) + [4])
	*($6) = $7
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [17867])
	CALL memcpy(*($6), ($1 + [196]), [4])
	*($6) = (*($6) + [4])
	$6 = CALL $64($0, ($1 + [200]))
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[3]), [17867])
	CALL memcpy(*($6 + [4]), ($1 + [212]), [4])
	*($6 + [4]) = (*($6 + [4]) + [4])
	$4 = CALL $65(CALL $65(CALL $65($6, ($1 + [216])), ($1 + [228])), ($1 + [240]))
	$0 = *($4 + [4])
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [256])) - *($1 + [252])) / (int_32)[12]))
	
.LOOP $label$13:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [8]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*(($4 + [8])) - $0) > (int_32)[0]), [17867])
	$6 = ($4 + [4])
	CALL memcpy(*($6), ($2 + [8]), [1])
	$0 = (*($6) + [1])
	*($6) = $0
	if ( $7 ){ goto $label$13 }
	$0 = *(($1 + [256]))
	$6 = *(($1 + [252]))
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	CALL $63($4, $6)
	$6 = ($6 + [12])
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$15 }
	
.LABEL $label$14
	$6 = CALL $65(CALL $65(CALL $65(CALL $65(CALL $67(CALL $66($4, ($1 + [264])), ($1 + [276])), ($1 + [288])), ($1 + [300])), ($1 + [312])), ($1 + [324]))
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($6 + [4]), ($1 + [336]), [8])
	$4 = (*($6 + [4]) + [8])
	*($6 + [4]) = $4
	*($2 + [8]) = *(($1 + [344]))
	CALL eosio_assert(((int_32)(*($6 + [8]) - $4) > (int_32)[7]), [17867])
	CALL memcpy(*($6 + [4]), ($2 + [8]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($6 + [4]), ($1 + [352]), [8])
	$4 = (*($6 + [4]) + [8])
	*($6 + [4]) = $4
	*($2 + [8]) = *(($1 + [360]))
	CALL eosio_assert(((int_32)(*($6 + [8]) - $4) > (int_32)[7]), [17867])
	CALL memcpy(*($6 + [4]), ($2 + [8]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($6 + [4]), ($1 + [368]), [8])
	$4 = (*($6 + [4]) + [8])
	*($6 + [4]) = $4
	*($2 + [8]) = *(($1 + [376]))
	CALL eosio_assert(((int_32)(*($6 + [8]) - $4) > (int_32)[7]), [17867])
	CALL memcpy(*($6 + [4]), ($2 + [8]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($6 + [4]), ($1 + [384]), [8])
	$4 = (*($6 + [4]) + [8])
	*($6 + [4]) = $4
	*($2 + [8]) = *(($1 + [392]))
	CALL eosio_assert(((int_32)(*($6 + [8]) - $4) > (int_32)[7]), [17867])
	CALL memcpy(*($6 + [4]), ($2 + [8]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $6
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [2])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($2 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [2]))
	$3 = ($2 + ($3 << [2]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [2]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8878])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $56($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8873])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($1 + [8])
	$4 = ($1 + [4])
	$5 = [1]
	
.LOOP $label$2:
	$6 = ($5 & [2147483647])
	if ( ((int_32)$6 > (int_32)[554]) ){ goto $label$8 }
	if ( ((int_32)$6 > (int_32)[332]) ){ goto $label$7 }
	if ( ((int_32)$6 == (int_32)[111]) ){ goto $label$5 }
	if ( ((int_32)$6 == (int_32)[222]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	if ( ((int_32)$6 > (int_32)[776]) ){ goto $label$6 }
	if ( ((int_32)$6 == (int_32)[555]) ){ goto $label$5 }
	if ( ((int_32)$6 == (int_32)[666]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	if ( ((int_32)$6 == (int_32)[333]) ){ goto $label$5 }
	if ( ((int_32)$6 == (int_32)[444]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)[888]) ){ goto $label$5 }
	if ( ((int_32)$6 != (int_32)[777]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL prints([8952])
	goto $label$3 
	
.LABEL $label$4
	CALL $60($2, $5)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($3)) ){ goto $label$9 }
	*($6) = *($2)
	$6 = ($2 + [8])
	*(($6 + [8])) = *($6)
	*($6) = [0]
	*($4) = (*($4) + [12])
	*($2) = (int_64)0
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[999]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$9
	CALL $61($1, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($2 + [8])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[999]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[999]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = *($0)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$10 }
	$7 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	CALL $19($6, $5)
	*($2 + [4]) = [0]
	*($2) = $6
	$7 = *(*(CALL $62($2) + [4]) + [16])
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*(($6 + [16])) = $7
	
.LABEL $label$10
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [17713])
	$7 = *(($6 + [16]))
	*($1 + [184]) = (int_64)-1
	*($1 + [16]) = $7
	*($1 + [192]) = [-1]
	*(($1 + [204])) = *($1 + [200])
	$6 = *($0 + [4])
	*($1 + [88]) = *($6)
	*(($1 + [96])) = *(($6 + [8]))
	*($1 + [104]) = (int_64)0
	*($1 + [196]) = [990]
	*($1 + [168]) = (int_64)1000
	*($1 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = CALL $191([8545])
	if ( ($6 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8632])
	goto $label$14 
	
.LABEL $label$15
	if ( ($6 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$7 = (int_64)0
	
.LOOP $label$16:
	$5 = *(($6 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$16 }
	$8 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$8 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [8730])
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$7 = $9
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$7 = $9
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$22 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$5 = [0]
	
.LABEL $label$18
	CALL eosio_assert($5, [8779])
	*(($1 + [344])) = $8
	*($1 + [336]) = (int_64)0
	$6 = CALL $191([8545])
	if ( ($6 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [8632])
	goto $label$25 
	
.LABEL $label$26
	if ( ($6 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$7 = (int_64)0
	
.LOOP $label$27:
	$5 = *(($6 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$28
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$27 }
	$8 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$8 = (int_64)4
	
.LABEL $label$23
	CALL eosio_assert([1], [8730])
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$7 = $9
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$7 = $9
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$33 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$5 = [0]
	
.LABEL $label$29
	CALL eosio_assert($5, [8779])
	*(($1 + [360])) = $8
	*($1 + [352]) = (int_64)0
	$6 = CALL $191([8545])
	if ( ($6 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [8632])
	goto $label$36 
	
.LABEL $label$37
	if ( ($6 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$7 = (int_64)0
	
.LOOP $label$38:
	$5 = *(($6 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$39
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$38 }
	$8 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$34 
	
.LABEL $label$35
	$8 = (int_64)4
	
.LABEL $label$34
	CALL eosio_assert([1], [8730])
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$7 = $9
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$7 = $9
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$44 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$5 = [0]
	
.LABEL $label$40
	CALL eosio_assert($5, [8779])
	*(($1 + [376])) = $8
	*($1 + [368]) = (int_64)0
	$6 = CALL $191([8545])
	if ( ($6 <= [8]) ){ goto $label$48 }
	CALL eosio_assert([0], [8632])
	goto $label$47 
	
.LABEL $label$48
	if ( ($6 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	$7 = (int_64)0
	
.LOOP $label$49:
	$5 = *(($6 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$50 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$50
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$49 }
	$8 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$45 
	
.LABEL $label$46
	$8 = (int_64)4
	
.LABEL $label$45
	CALL eosio_assert([1], [8730])
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$54 }
	$7 = $9
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$54
	$7 = $9
	
.LOOP $label$55:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$52 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$55 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$5 = [0]
	
.LABEL $label$51
	CALL eosio_assert($5, [8779])
	*(($1 + [392])) = $8
	*($1 + [384]) = (int_64)0
	CALL prints([8970])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $173 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [11] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $175($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $175($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $175($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $175($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19696]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $175($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $175($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $175($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $191($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $151($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $151($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $151($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $151 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $156 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $151($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $157 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $151($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $155($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $155 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $158 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $157($0, $1, $2, CALL $191($2))
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $179 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

void .FUNC $183 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	float_64 $11
	int_32 $12
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [64])
	if ( ((uint_64)$3 > (uint_64)(int_64)4) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$7
	CALL prints([18094])
	CALL prints([18104])
	if ( ((int_32)(*($1 + [4]) - *($1)) == (int_32)[11880]) ){ goto $label$8 }
	$4 = ($1 + [8])
	$0 = ($1 + [4])
	$5 = [1]
	
.LOOP $label$9:
	$6 = ($5 & [2147483647])
	if ( ((int_32)$6 > (int_32)[554]) ){ goto $label$15 }
	if ( ((int_32)$6 > (int_32)[332]) ){ goto $label$14 }
	if ( ((int_32)$6 == (int_32)[111]) ){ goto $label$12 }
	if ( ((int_32)$6 == (int_32)[222]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$15
	if ( ((int_32)$6 > (int_32)[776]) ){ goto $label$13 }
	if ( ((int_32)$6 == (int_32)[555]) ){ goto $label$12 }
	if ( ((int_32)$6 == (int_32)[666]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	if ( ((int_32)$6 == (int_32)[333]) ){ goto $label$12 }
	if ( ((int_32)$6 == (int_32)[444]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((int_32)$6 == (int_32)[888]) ){ goto $label$12 }
	if ( ((int_32)$6 != (int_32)[777]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL prints([8952])
	goto $label$10 
	
.LABEL $label$11
	CALL $60(($2 + [16]), $5)
	$6 = *($0)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$16 }
	*($6) = *($2 + [16])
	$6 = (($2 + [16]) + [8])
	*(($6 + [8])) = *($6)
	*($6) = [0]
	*($0) = (*($0) + [12])
	*($2 + [16]) = (int_64)0
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[999]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$16
	CALL $61($1, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*((($2 + [16]) + [8])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[999]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[999]) ){ goto $label$9 }
	
.LABEL $label$8
	*($1 + [192]) = (int_64)4256312590335
	*($1 + [184]) = (int_64)-1
	*($1 + [168]) = (int_64)1000
	*(($1 + [204])) = *($1 + [200])
	*(($1 + [232])) = *($1 + [228])
	$12 = [15]
	goto $label$1 
	
.LABEL $label$6
	$12 = [16]
	goto $label$1 
	
.LABEL $label$5
	CALL prints([18145])
	*($1 + [168]) = (int_64)0
	$4 = *($1 + [200])
	$9 = *(($1 + [204]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$18 }
	$10 = *($0 + [4])
	$7 = *(($10 + [16]))
	$8 = (CASTING uint_64)(uint_32 int_32(($9 - $4) >> [2]))
	$3 = *($10 + [8])
	$6 = $4
	
.LOOP $label$19:
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$20 }
	$3 = (int_64)0
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$20 }
	$3 = ((int_64)*($10) + (int_64)-7046029254386353131)
	$3 = ((int_64)((int_64)(uint_64)$3 >> (uint_64)(int_64)30) ^ (int_64)$3) * (int_64)-4658895280553007687
	$3 = ((int_64)((int_64)(uint_64)$3) >> (uint_64)(int_64)27) ^ (int_64)$3
	$3 = ((int_64)(uint_64)$3 * (int_64)-7723592293110705685)
	$7 = ((int_64)$3 >> (uint_64)(int_64)31) ^ (int_64)$3
	$7 = ((int_64)((int_64)(uint_64)$7) + (int_64)-7046029254386353131)
	$7 = ((int_64)((int_64)(uint_64)$7 >> (uint_64)(int_64)30) ^ (int_64)$7) * (int_64)-4658895280553007687
	$7 = ((int_64)(uint_64)$7) >> (uint_64)(int_64)27) ^ (int_64)$7) * (int_64)-7723592293110705685)) >> (uint_64)(int_64)31) ^ (int_64)$7)
	
.LABEL $label$20
	$5 = *($6)
	$0 = ($4 + ((CASTING uint_32)(uint_64 ((uint_64)((int_64)$3 + (int_64)$7) % (uint_64)$8)) << [2]))
	*($6) = *($0)
	*($0) = $5
	$7 = ((int_64)$3 ^ (int_64)$7)
	$3 = ((int_64)((int_64)(rotl((int_64) $3)) ^ (int_64)24) ^ (int_64)$7)
	$7 = (rotl((int_64) $7))
	$6 = ($6 + [4])
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$19 }
	*(($10 + [16])) = $7
	*(($10 + [8])) = $3
	goto $label$17 
	
.LABEL $label$18
	$12 = [15]
	goto $label$1 
	
.LABEL $label$17
	$12 = [15]
	goto $label$1 
	
.LABEL $label$4
	CALL prints([18137])
	$6 = *($0 + [4])
	CALL eosio_assert([1], [18153])
	$3 = (int_64)0
	$7 = *(($6 + [16]))
	$8 = *($6 + [8])
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$22 }
	$3 = $8
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$21 }
	$3 = ((int_64)*($6) + (int_64)-7046029254386353131)
	$3 = ((int_64)((int_64)(uint_64)$3 >> (uint_64)(int_64)30) ^ (int_64)$3) * (int_64)-4658895280553007687
	$3 = ((int_64)((int_64)(uint_64)$3) >> (uint_64)(int_64)27) ^ (int_64)$3
	$3 = ((int_64)(uint_64)$3 * (int_64)-7723592293110705685)
	*(($6 + [8])) = $3 >> (uint_64)(int_64)31) ^ (int_64)$3))
	$7 = ((int_64)$3 + (int_64)-7046029254386353131)
	$7 = ((int_64)((int_64)(uint_64)$7 >> (uint_64)(int_64)30) ^ (int_64)$7) * (int_64)-4658895280553007687
	$7 = ((int_64)((int_64)(uint_64)$7) >> (uint_64)(int_64)27) ^ (int_64)$7
	$7 = ((int_64)(uint_64)$7 * (int_64)-7723592293110705685)
	*(($6 + [16])) = $7 >> (uint_64)(int_64)31) ^ (int_64)$7))
	
.LABEL $label$21
	$11 = ((float_64)((float_64)(CASTING float_64)(uint_64 ((int_64)$3 + (int_64)$7)) * (float_64)(float_64)5.421010862427522e-20) * (float_64)(float_64)9)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$24 }
	$8 = (int_64)0
	goto $label$23 
	
.LABEL $label$24
	$8 = (Rounds 0)($11)
	
.LABEL $label$23
	$5 = (CASTING uint_32)(uint_64 $8)
	*(*($0)) = $5
	$7 = ((int_64)$3 ^ (int_64)$7)
	*(($6 + [16])) = (rotl((int_64) $7))
	*(($6 + [8])) = ((int_64)((int_64)(rotl((int_64) $3)) ^ (int_64)24) ^ (int_64)$7)
	$6 = *($1 + [188])
	if ( ((int_32)*($1 + [184]) != (int_32)$6) ){ goto $label$25 }
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$26 }
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [12]) = [0]
	$6 = [0]
	$5 = [0]
	if ( ((int_32)[0] == (int_32)[0]) ){ goto $label$27 }
	$12 = [0]
	goto $label$1 
	
.LABEL $label$27
	$12 = [23]
	goto $label$1 
	
.LABEL $label$26
	$12 = [12]
	goto $label$1 
	
.LABEL $label$25
	$12 = [12]
	goto $label$1 
	
.LABEL $label$3
	CALL prints([18129])
	$6 = *($0 + [4])
	CALL eosio_assert([1], [18153])
	$3 = (int_64)0
	$7 = *(($6 + [16]))
	$8 = *($6 + [8])
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$29 }
	$3 = $8
	goto $label$28 
	
.LABEL $label$29
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$28 }
	$3 = ((int_64)*($6) + (int_64)-7046029254386353131)
	$3 = ((int_64)((int_64)(uint_64)$3 >> (uint_64)(int_64)30) ^ (int_64)$3) * (int_64)-4658895280553007687
	$3 = ((int_64)((int_64)(uint_64)$3) >> (uint_64)(int_64)27) ^ (int_64)$3
	$3 = ((int_64)(uint_64)$3 * (int_64)-7723592293110705685)
	*(($6 + [8])) = $3 >> (uint_64)(int_64)31) ^ (int_64)$3))
	$7 = ((int_64)$3 + (int_64)-7046029254386353131)
	$7 = ((int_64)((int_64)(uint_64)$7 >> (uint_64)(int_64)30) ^ (int_64)$7) * (int_64)-4658895280553007687
	$7 = ((int_64)((int_64)(uint_64)$7) >> (uint_64)(int_64)27) ^ (int_64)$7
	$7 = ((int_64)(uint_64)$7 * (int_64)-7723592293110705685)
	*(($6 + [16])) = $7 >> (uint_64)(int_64)31) ^ (int_64)$7))
	
.LABEL $label$28
	$11 = ((float_64)((float_64)(CASTING float_64)(uint_64 ((int_64)$3 + (int_64)$7)) * (float_64)(float_64)5.421010862427522e-20) * (float_64)(float_64)9)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$31 }
	$8 = (int_64)0
	goto $label$30 
	
.LABEL $label$31
	$8 = (Rounds 0)($11)
	
.LABEL $label$30
	$5 = (CASTING uint_32)(uint_64 $8)
	*(*($0)) = $5
	$7 = ((int_64)$3 ^ (int_64)$7)
	*(($6 + [16])) = (rotl((int_64) $7))
	*(($6 + [8])) = ((int_64)((int_64)(rotl((int_64) $3)) ^ (int_64)24) ^ (int_64)$7)
	*($1 + [188]) = $5
	$0 = ($1 + [204])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)*(($1 + [208]))) ){ goto $label$33 }
	*($6) = $5
	*($0) = ($6 + [4])
	goto $label$32 
	
.LABEL $label$33
	CALL $70(($1 + [200]), ($1 + [188]))
	
.LABEL $label$32
	*($1 + [168]) = (int_64)100000
	$12 = [15]
	goto $label$1 
	
.LABEL $label$2
	CALL prints([18121])
	$6 = *($0 + [4])
	CALL eosio_assert([1], [18153])
	$3 = (int_64)0
	$7 = *(($6 + [16]))
	$8 = *($6 + [8])
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$35 }
	$3 = $8
	goto $label$34 
	
.LABEL $label$35
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$34 }
	$3 = ((int_64)*($6) + (int_64)-7046029254386353131)
	$3 = ((int_64)((int_64)(uint_64)$3 >> (uint_64)(int_64)30) ^ (int_64)$3) * (int_64)-4658895280553007687
	$3 = ((int_64)((int_64)(uint_64)$3) >> (uint_64)(int_64)27) ^ (int_64)$3
	$3 = ((int_64)(uint_64)$3 * (int_64)-7723592293110705685)
	*(($6 + [8])) = $3 >> (uint_64)(int_64)31) ^ (int_64)$3))
	$7 = ((int_64)$3 + (int_64)-7046029254386353131)
	$7 = ((int_64)((int_64)(uint_64)$7 >> (uint_64)(int_64)30) ^ (int_64)$7) * (int_64)-4658895280553007687
	$7 = ((int_64)((int_64)(uint_64)$7) >> (uint_64)(int_64)27) ^ (int_64)$7
	$7 = ((int_64)(uint_64)$7 * (int_64)-7723592293110705685)
	*(($6 + [16])) = $7 >> (uint_64)(int_64)31) ^ (int_64)$7))
	
.LABEL $label$34
	$11 = ((float_64)((float_64)(CASTING float_64)(uint_64 ((int_64)$3 + (int_64)$7)) * (float_64)(float_64)5.421010862427522e-20) * (float_64)(float_64)9)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$37 }
	$8 = (int_64)0
	goto $label$36 
	
.LABEL $label$37
	$8 = (Rounds 0)($11)
	
.LABEL $label$36
	$5 = (CASTING uint_32)(uint_64 $8)
	*(*($0)) = $5
	$7 = ((int_64)$3 ^ (int_64)$7)
	*(($6 + [16])) = (rotl((int_64) $7))
	*(($6 + [8])) = ((int_64)((int_64)(rotl((int_64) $3)) ^ (int_64)24) ^ (int_64)$7)
	*($1 + [184]) = $5
	$0 = ($1 + [204])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)*(($1 + [208]))) ){ goto $label$39 }
	*($6) = $5
	*($0) = ($6 + [4])
	goto $label$38 
	
.LABEL $label$39
	CALL $70(($1 + [200]), ($1 + [184]))
	
.LABEL $label$38
	*($1 + [168]) = (int_64)10000
	$12 = [15]
	
.LABEL $label$1
	
.LOOP $label$40:
	goto $label$79 
	
.LABEL $label$79
	*($6) = $5
	*($2 + [20]) = ($6 + [4])
	goto $label$54 
	
.LABEL $label$78
	$6 = *($2 + [20])
	if ( ((int_32)$6 != (int_32)*((($2 + [16]) + [8]))) ){ goto $label$55 }
	$12 = [23]
	goto $label$40 
	
.LABEL $label$77
	CALL $70(($2 + [16]), ($2 + [12]))
	$12 = [1]
	goto $label$40 
	
.LABEL $label$76
	$6 = *($2 + [12])
	$5 = ($6 + [1])
	*($2 + [12]) = $5
	if ( ((int_32)$6 <= (int_32)[8]) ){ goto $label$53 }
	$12 = [2]
	goto $label$40 
	
.LABEL $label$75
	$5 = *($2 + [16])
	$4 = ($5 + (*(($1 + [188])) << [2]))
	$10 = ($4 + [4])
	$6 = (*($2 + [20]) - $10)
	$9 = int_32($6 >> [2])
	if ( ($6 == 0) ){ goto $label$52 }
	$12 = [3]
	goto $label$40 
	
.LABEL $label$74
	CALL memmove($4, $10, $6)
	$5 = *($2 + [16])
	$12 = [4]
	goto $label$40 
	
.LABEL $label$73
	$6 = *(($0 + [4]))
	$4 = ($4 + ($9 << [2]))
	*($2 + [20]) = $4
	$5 = ($4 - $5)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [18171])
	if ( ($5 == 0) ){ goto $label$51 }
	$12 = [5]
	goto $label$40 
	
.LABEL $label$72
	CALL eosio_assert([1], [18153])
	$3 = (int_64)0
	$4 = ($6 + [16])
	$7 = *($4)
	$11 = (CASTING float_64)(uint_32 int_32($5 >> [2]))
	$8 = *($6 + [8])
	if ( ((int_64)$8 == (int_64)0) ){ goto $label$50 }
	$12 = [6]
	goto $label$40 
	
.LABEL $label$71
	$3 = $8
	goto $label$48 
	
.LABEL $label$70
	$6 = *($2 + [16])
	*(($5 = *($0))) = [0]
	if ( $6 ){ goto $label$44 }
	goto $label$45 
	
.LABEL $label$69
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$49 }
	$12 = [20]
	goto $label$40 
	
.LABEL $label$68
	$3 = ((int_64)*($6) + (int_64)-7046029254386353131)
	$3 = ((int_64)((int_64)(uint_64)$3 >> (uint_64)(int_64)30) ^ (int_64)$3) * (int_64)-4658895280553007687
	$3 = ((int_64)((int_64)(uint_64)$3) >> (uint_64)(int_64)27) ^ (int_64)$3
	$3 = ((int_64)(uint_64)$3 * (int_64)-7723592293110705685)
	*(($6 + [8])) = $3 >> (uint_64)(int_64)31) ^ (int_64)$3))
	$7 = ((int_64)$3 + (int_64)-7046029254386353131)
	$7 = ((int_64)((int_64)(uint_64)$7 >> (uint_64)(int_64)30) ^ (int_64)$7) * (int_64)-4658895280553007687
	$7 = ((int_64)((int_64)(uint_64)$7) >> (uint_64)(int_64)27) ^ (int_64)$7
	$7 = ((int_64)(uint_64)$7 * (int_64)-7723592293110705685)
	*(($6 + [16])) = $7 >> (uint_64)(int_64)31) ^ (int_64)$7))
	$12 = [7]
	goto $label$40 
	
.LABEL $label$67
	$8 = ((int_64)$3 ^ (int_64)$7)
	*($4) = (rotl((int_64) $8))
	*(($6 + [8])) = ((int_64)((int_64)(rotl((int_64) $3)) ^ (int_64)24) ^ (int_64)$8)
	$11 = ((float_64)((float_64)(CASTING float_64)(uint_64 ((int_64)$3 + (int_64)$7)) * (float_64)(float_64)5.421010862427522e-20) * (float_64)$11)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$47 }
	$12 = [18]
	goto $label$40 
	
.LABEL $label$66
	$3 = (int_64)0
	goto $label$46 
	
.LABEL $label$65
	$3 = (Rounds 0)($11)
	$12 = [9]
	goto $label$40 
	
.LABEL $label$64
	$6 = *($2 + [16])
	*(($5 = *($0))) = *(($6 + ((CASTING uint_32)(uint_64 $3) << [2])))
	if ( ($6 == 0) ){ goto $label$43 }
	$12 = [10]
	goto $label$40 
	
.LABEL $label$63
	*($2 + [20]) = $6
	CALL _ZdlPv($6)
	$5 = *($0)
	$12 = [11]
	goto $label$40 
	
.LABEL $label$62
	$5 = *($5)
	$12 = [12]
	goto $label$40 
	
.LABEL $label$61
	*($1 + [192]) = $5
	$0 = ($1 + [204])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)*(($1 + [208]))) ){ goto $label$42 }
	$12 = [13]
	goto $label$40 
	
.LABEL $label$60
	*($6) = $5
	*($0) = ($6 + [4])
	goto $label$41 
	
.LABEL $label$59
	CALL $70(($1 + [200]), ($1 + [192]))
	$12 = [14]
	goto $label$40 
	
.LABEL $label$58
	*($1 + [168]) = (int_64)1000000
	$12 = [15]
	goto $label$40 
	
.LABEL $label$57
	*($1 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*(($6 = ($1 + [64]))) = ((int_64)*($6) + (int_64)1)
	$12 = [16]
	goto $label$40 
	
.LABEL $label$56
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$55
	$12 = [0]
	goto $label$40 
	
.LABEL $label$54
	$12 = [1]
	goto $label$40 
	
.LABEL $label$53
	$12 = [22]
	goto $label$40 
	
.LABEL $label$52
	$12 = [4]
	goto $label$40 
	
.LABEL $label$51
	$12 = [21]
	goto $label$40 
	
.LABEL $label$50
	$12 = [19]
	goto $label$40 
	
.LABEL $label$49
	$12 = [7]
	goto $label$40 
	
.LABEL $label$48
	$12 = [7]
	goto $label$40 
	
.LABEL $label$47
	$12 = [8]
	goto $label$40 
	
.LABEL $label$46
	$12 = [9]
	goto $label$40 
	
.LABEL $label$45
	$12 = [11]
	goto $label$40 
	
.LABEL $label$44
	$12 = [10]
	goto $label$40 
	
.LABEL $label$43
	$12 = [11]
	goto $label$40 
	
.LABEL $label$42
	$12 = [17]
	goto $label$40 
	
.LABEL $label$41
	$12 = [14]
	goto $label$40 
	(CASTING uint_32)(uint_64 $3)
	((int_64)$7 << (int_64)16)
	(int_64)37
	(int_64)37
	((int_64)$7 << (int_64)16)
	(int_64)37
	((int_64)$7 << (int_64)16)
	(int_64)37
	((int_64)$7 << (int_64)16)
	$12
	(int_64)37
	((int_64)$8 << (int_64)16)
}

void .FUNC $68 (int_32 $0)
{
	if ( ((*([0] + [8996]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [9004]))
	
.LABEL $label$1
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17867])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [17867])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17867])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[3]), [17867])
	$7 = ($0 + [4])
	CALL memcpy(*($7), $6, [4])
	$4 = (*($7) + [4])
	*($7) = $4
	$6 = ($6 + [4])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17867])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [17867])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17867])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17867])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [8]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17867])
	CALL memcpy(*($6), $2, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((*([0] + [9008]) & [1]) == 0) ){ goto $label$3 }
	if ( ((int_32)$1 > (int_32)[9]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*([0] + [8996 align=4]) = (int_64)0
	*([0] + [9004]) = [0]
	CALL $172([10], [0], [8192])
	*([0] + [9008]) = [1]
	if ( ((int_32)$1 <= (int_32)[9]) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_32)$1 > (int_32)[99]) ){ goto $label$8 }
	CALL $165($2, $1)
	$1 = CALL $158($2, [0], [17711])
	$3 = *($1 + [4])
	$4 = *($1)
	*($1) = (int_64)0
	$5 = *($1 + [8])
	*($1 + [8]) = [0]
	if ( (*([0] + [8996]) & [1]) ){ goto $label$7 }
	*([0] + [8996]) = [0]
	goto $label$6 
	
.LABEL $label$8
	CALL $165($2, $1)
	if ( (*([0] + [8996]) & [1]) ){ goto $label$5 }
	*([0] + [8996]) = [0]
	goto $label$4 
	
.LABEL $label$7
	*(*([0] + [9004])) = [0]
	*([0] + [9000]) = [0]
	
.LABEL $label$6
	CALL $152([8996], [0])
	*([0] + [9000]) = $3
	*([0] + [8996]) = $4
	*([0] + [9004]) = $5
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$9
	CALL $149($0, [8996])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$5
	*(*([0] + [9004])) = [0]
	*([0] + [9000]) = [0]
	
.LABEL $label$4
	CALL $152([8996], [0])
	*([0] + [9004]) = *(($2 + [8]))
	*([0] + [8996 align=4]) = *($2)
	CALL $149($0, [8996])
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$1
	CALL $165($2, $1)
	$1 = CALL $158($2, [0], [17708])
	$3 = *($1 + [4])
	$4 = *($1)
	*($1) = (int_64)0
	$5 = *($1 + [8])
	*($1 + [8]) = [0]
	if ( (*([0] + [8996]) & [1]) ){ goto $label$11 }
	*([0] + [8996]) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*([0] + [9004])) = [0]
	*([0] + [9000]) = [0]
	
.LABEL $label$10
	CALL $152([8996], [0])
	*([0] + [9000]) = $3
	*([0] + [8996]) = $4
	*([0] + [9004]) = $5
	if ( ((*($2) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$12
	CALL $149($0, [8996])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17867])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17867])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $62 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [404]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17819])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035937633859534848)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17765])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17765])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $19(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$7 }
	*($3 + [232]) = [8192]
	*($3 + [236]) = CALL $191([8192])
	*($3 + [96]) = *($3 + [232])
	CALL $2(($3 + [176]), ($3 + [96]))
	if ( ((int_64)$2 <= (int_64)-3075276115167177361) ){ goto $label$10 }
	if ( ((int_64)$2 <= (int_64)6185809708712984575) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)6185809708712984576) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)7108777312246857728) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)7108847649144349696) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [1]
	*($3 + [56]) = *($3 + [144])
	CALL $4($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 > (int_64)-4157529782108553217) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)-7297067439286124544) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4417211076734238720) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [2]
	*($3 + [80]) = *($3 + [120])
	CALL $6($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-3075276115167177360) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5031766164053136752) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [3]
	*($3 + [64]) = *($3 + [136])
	CALL $4($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)-4157529782108553216) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	
.LABEL $label$7
	*($3 + [232]) = [8210]
	*($3 + [236]) = CALL $191([8210])
	*($3 + [24]) = *($3 + [232])
	CALL $2(($3 + [176]), ($3 + [24]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [232]) = [8192]
	*($3 + [236]) = CALL $191([8192])
	*($3 + [16]) = *($3 + [232])
	CALL $2(($3 + [176]), ($3 + [16]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	CALL $8(($3 + [176]))
	*($3 + [224]) = [8313]
	*($3 + [228]) = CALL $191([8313])
	*($3 + [8]) = *($3 + [224])
	$1 = *(CALL $2(($3 + [232]), ($3 + [8])))
	$2 = *($3 + [176])
	if ( ((*($3 + [208]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [216])))
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)$1) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [4]
	*($3) = *($3 + [104])
	CALL $10($0, (int_64)6138663591592764928, $3)
	goto $label$1 
	
.LABEL $label$6
	*($3 + [156]) = [0]
	*($3 + [152]) = [5]
	*($3 + [48]) = *($3 + [152])
	CALL $4($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [164]) = [0]
	*($3 + [160]) = [6]
	*($3 + [40]) = *($3 + [160])
	CALL $13($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [116]) = [0]
	*($3 + [112]) = [7]
	*($3 + [88]) = *($3 + [112])
	CALL $4($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [132]) = [0]
	*($3 + [128]) = [8]
	*($3 + [72]) = *($3 + [128])
	CALL $4($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [172]) = [0]
	*($3 + [168]) = [9]
	*($3 + [32]) = *($3 + [168])
	CALL $17($1, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $171([0])
	$global$0 = ($3 + [240])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17867])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $65(CALL $65(CALL $65(CALL $65(CALL $63($0, ($1 + [16])), ($1 + [28])), ($1 + [40])), ($1 + [52])), ($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17867])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [104]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17867])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $63($0, ($1 + [112]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17867])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17867])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17867])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	$4 = (CASTING uint_64)(uint_32 int_32((*(($1 + [36])) - *($1 + [32])) >> [7]))
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$7 = ((int_64)$4) != (int_64)0
	*($2 + [8]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $3) > (int_32)[0]), [17867])
	CALL memcpy(*($5), ($2 + [8]), [1])
	$3 = (*($5) + [1])
	*($5) = $3
	if ( $7 ){ goto $label$1 }
	$6 = *(($1 + [36]))
	$5 = *(($1 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $89($0, $5)
	$5 = ($5 + [128])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$3 }
	$3 = *(($0 + [4]))
	
.LABEL $label$2
	$4 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [48])) - *($1 + [44])) / (int_32)[12]))
	$8 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$4:
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$7 = ((int_64)$4) != (int_64)0
	*($2 + [8]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($8) - $3) > (int_32)[0]), [17867])
	CALL memcpy(*($5), ($2 + [8]), [1])
	$3 = (*($5) + [1])
	*($5) = $3
	if ( $7 ){ goto $label$4 }
	$6 = *(($1 + [48]))
	$5 = *(($1 + [44]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $63($0, $5)
	$5 = ($5 + [12])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	$4 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [60])) - *($1 + [56])) / (int_32)[12]))
	$8 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$7:
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$7 = ((int_64)$4) != (int_64)0
	*($2 + [8]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($8) - $3) > (int_32)[0]), [17867])
	CALL memcpy(*($5), ($2 + [8]), [1])
	$3 = (*($5) + [1])
	*($5) = $3
	if ( $7 ){ goto $label$7 }
	$5 = *(($1 + [60]))
	$3 = *(($1 + [56]))
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL $63($0, $3)
	$3 = ($3 + [12])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = CALL $66(CALL $67(CALL $66($0, ($1 + [68])), ($1 + [80])), ($1 + [92]))
	$0 = *($8 + [4])
	$4 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [108])) - *($1 + [104])) / (int_32)[12]))
	$7 = ($8 + [8])
	$3 = ($8 + [4])
	
.LOOP $label$10:
	$5 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($2 + [8]) = (($6) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $0) > (int_32)[0]), [17867])
	CALL memcpy(*($3), ($2 + [8]), [1])
	$0 = (*($3) + [1])
	*($3) = $0
	if ( $6 ){ goto $label$10 }
	$0 = *(($1 + [108]))
	$3 = *(($1 + [104]))
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	CALL $63($8, $3)
	$3 = ($3 + [12])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$11
	$8 = CALL $65($8, ($1 + [116]))
	$0 = *($8 + [4])
	$4 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [132])) - *($1 + [128])) / (int_32)[12]))
	$7 = ($8 + [8])
	$3 = ($8 + [4])
	
.LOOP $label$13:
	$5 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($2 + [8]) = (($6) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $0) > (int_32)[0]), [17867])
	CALL memcpy(*($3), ($2 + [8]), [1])
	$0 = (*($3) + [1])
	*($3) = $0
	if ( $6 ){ goto $label$13 }
	$0 = *(($1 + [132]))
	$3 = *(($1 + [128]))
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	CALL $63($8, $3)
	$3 = ($3 + [12])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = CALL $66(CALL $67($8, ($1 + [140])), ($1 + [152]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($3 + [4]), ($1 + [168]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$7 = CALL $65(CALL $65($3, ($1 + [176])), ($1 + [188]))
	$0 = *($7 + [4])
	$4 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [204])) - *($1 + [200])) / (int_32)[12]))
	$3 = ($7 + [4])
	
.LOOP $label$16:
	$5 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($2 + [8]) = (($6) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*(($7 + [8])) - $0) > (int_32)[0]), [17867])
	CALL memcpy(*($3), ($2 + [8]), [1])
	$0 = (*($3) + [1])
	*($3) = $0
	if ( $6 ){ goto $label$16 }
	$0 = *(($1 + [204]))
	$3 = *(($1 + [200]))
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	CALL $63($7, $3)
	$3 = ($3 + [12])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$18 }
	
.LABEL $label$17
	$3 = CALL $66(CALL $67(CALL $66($7, ($1 + [212])), ($1 + [224])), ($1 + [236]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($3 + [4]), ($1 + [248]), [8])
	$0 = (*($3 + [4]) + [8])
	*($3 + [4]) = $0
	*($2 + [8]) = *(($1 + [256]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - $0) > (int_32)[7]), [17867])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $3
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = (*($0) + [32])
	*($0) = $2
	$4 = *($1 + [32])
	$3 = *(($1 + [36]))
	$5 = (CASTING uint_64)(uint_32 int_32(($3 - $4) >> [7]))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $90($0, $4)
	$4 = ($4 + [128])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$3 }
	$2 = *($0)
	
.LABEL $label$2
	$4 = *($1 + [44])
	$6 = *(($1 + [48]))
	$5 = (CASTING uint_64)(uint_32 ((int_32)($6 - $4) / (int_32)[12]))
	
.LOOP $label$4:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$4 }
	*($0) = $2
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = *($4)
	$5 = (CASTING uint_64)(uint_32 ( *($4 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($0) = $2
	$3 = *($4)
	$3 = ( *(($4 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$8
	$4 = ($4 + [12])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = *($1 + [56])
	$6 = *(($1 + [60]))
	$5 = (CASTING uint_64)(uint_32 ((int_32)($6 - $4) / (int_32)[12]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = *($4)
	$5 = (CASTING uint_64)(uint_32 ( *($4 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$12 }
	*($0) = $2
	$3 = *($4)
	$3 = ( *(($4 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$13 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$13
	$4 = ($4 + [12])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$11 }
	
.LABEL $label$10
	$3 = *($1 + [68])
	$4 = *(($1 + [72]))
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$14 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$15 }
	$2 = (($6 & [-16]) + $2)
	
.LABEL $label$15
	*($0) = $2
	$3 = *($1 + [80])
	$4 = *(($1 + [84]))
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$16:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$16 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$17 }
	$2 = (($6 & [-8]) + $2)
	
.LABEL $label$17
	*($0) = $2
	$3 = *($1 + [92])
	$4 = *(($1 + [96]))
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$18 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$19 }
	$2 = (($6 & [-16]) + $2)
	
.LABEL $label$19
	*($0) = $2
	$4 = *($1 + [104])
	$6 = *(($1 + [108]))
	$5 = (CASTING uint_64)(uint_32 ((int_32)($6 - $4) / (int_32)[12]))
	
.LOOP $label$20:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$20 }
	*($0) = $2
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$21 }
	
.LOOP $label$22:
	$3 = *($4)
	$5 = (CASTING uint_64)(uint_32 ( *($4 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$23:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$23 }
	*($0) = $2
	$3 = *($4)
	$3 = ( *(($4 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$24 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$24
	$4 = ($4 + [12])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$22 }
	
.LABEL $label$21
	$3 = *($1 + [116])
	$4 = *(($1 + [120]))
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$25:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$25 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$26 }
	$2 = (($6 & [-8]) + $2)
	
.LABEL $label$26
	*($0) = $2
	$4 = *($1 + [128])
	$6 = *(($1 + [132]))
	$5 = (CASTING uint_64)(uint_32 ((int_32)($6 - $4) / (int_32)[12]))
	
.LOOP $label$27:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$27 }
	*($0) = $2
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = *($4)
	$5 = (CASTING uint_64)(uint_32 ( *($4 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$30:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$30 }
	*($0) = $2
	$3 = *($4)
	$3 = ( *(($4 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$31 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$31
	$4 = ($4 + [12])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$29 }
	
.LABEL $label$28
	$3 = *($1 + [140])
	$4 = *(($1 + [144]))
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$32:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$32 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$33 }
	$2 = (($6 & [-8]) + $2)
	
.LABEL $label$33
	*($0) = $2
	$3 = *($1 + [152])
	$4 = *(($1 + [156]))
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	
.LOOP $label$34:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$34 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$35 }
	$2 = (($6 & [-16]) + $2)
	
.LABEL $label$35
	$2 = ($2 + [8])
	*($0) = $2
	$3 = *($1 + [176])
	$4 = *(($1 + [180]))
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$36:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$36 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$37 }
	$2 = (($6 & [-8]) + $2)
	
.LABEL $label$37
	*($0) = $2
	$3 = *($1 + [188])
	$4 = *(($1 + [192]))
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$38:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$38 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$39 }
	$2 = (($6 & [-8]) + $2)
	
.LABEL $label$39
	*($0) = $2
	$4 = *($1 + [200])
	$6 = *(($1 + [204]))
	$5 = (CASTING uint_64)(uint_32 ((int_32)($6 - $4) / (int_32)[12]))
	
.LOOP $label$40:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$40 }
	*($0) = $2
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$41 }
	
.LOOP $label$42:
	$3 = *($4)
	$5 = (CASTING uint_64)(uint_32 ( *($4 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$43:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$43 }
	*($0) = $2
	$3 = *($4)
	$3 = ( *(($4 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$44 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$44
	$4 = ($4 + [12])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$42 }
	
.LABEL $label$41
	$3 = *($1 + [212])
	$4 = *(($1 + [216]))
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	
.LOOP $label$45:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$45 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$46 }
	$2 = (($6 & [-16]) + $2)
	
.LABEL $label$46
	*($0) = $2
	$3 = *($1 + [224])
	$4 = *(($1 + [228]))
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$47:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$47 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$48 }
	$2 = (($6 & [-8]) + $2)
	
.LABEL $label$48
	*($0) = $2
	$3 = *($1 + [236])
	$4 = *(($1 + [240]))
	$1 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($1 >> [4]))
	
.LOOP $label$49:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$49 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$50 }
	$2 = (($1 & [-16]) + $2)
	
.LABEL $label$50
	*($0) = ($2 + [16])
	return $0
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((*(($2 + [-16])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [-8])))
	
.LABEL $label$5
	$3 = *(($2 + [-64]))
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [-60])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *(($2 + [-76]))
	if ( ($3 == 0) ){ goto $label$7 }
	*(($2 + [-72])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$3 = *(($2 + [-88]))
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [-84])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$3 = *(($2 + [-100]))
	if ( ($3 == 0) ){ goto $label$9 }
	*(($2 + [-96])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$3 = ($2 + [-128])
	if ( ((*(($2 + [-112])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-104])))
	
.LABEL $label$10
	$2 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $85 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	*($3) = ($1 + [-128])
	if ( ((*(($1 + [-16])) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($1 + [-8])))
	
.LABEL $label$3
	$4 = *(($1 + [-64]))
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [-60])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *(($1 + [-76]))
	if ( ($4 == 0) ){ goto $label$5 }
	*(($1 + [-72])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *(($1 + [-88]))
	if ( ($4 == 0) ){ goto $label$6 }
	*(($1 + [-84])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *(($1 + [-100]))
	if ( ($4 == 0) ){ goto $label$7 }
	*(($1 + [-96])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((*(($1 + [-112])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [-104])))
	
.LABEL $label$8
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0)
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = ($1 + [4])
	$5 = *($4)
	
.LOOP $label$3:
	*(($5 + [-120])) = *(($2 + [-120]))
	$6 = ($2 + [-128])
	*(($5 + [-128])) = *($6)
	$7 = ($2 + [-112])
	*(($5 + [-112])) = *($7)
	$8 = ($2 + [-104])
	*(($5 + [-104])) = *($8)
	*(($9 = ($5 + [-100]))) = (int_64)0
	*(($10 = ($5 + [-92]))) = [0]
	$11 = ($2 + [-100])
	*($9) = *($11)
	$9 = ($2 + [-92])
	*($10) = *($9)
	*($8) = [0]
	*($7) = (int_64)0
	*($11) = (int_64)0
	*($9) = [0]
	*(($7 = ($5 + [-88]))) = (int_64)0
	*(($8 = ($5 + [-80]))) = [0]
	$9 = ($2 + [-88])
	*($7) = *($9)
	$7 = ($2 + [-80])
	*($8) = *($7)
	*($9) = (int_64)0
	*($7) = [0]
	*(($7 = ($5 + [-76]))) = (int_64)0
	*(($8 = ($5 + [-68]))) = [0]
	$9 = ($2 + [-76])
	*($7) = *($9)
	$7 = ($2 + [-68])
	*($8) = *($7)
	*($9) = (int_64)0
	*($7) = [0]
	*(($7 = ($5 + [-64]))) = (int_64)0
	*(($8 = ($5 + [-56]))) = [0]
	$9 = ($2 + [-64])
	*($7) = *($9)
	$7 = ($2 + [-56])
	*($8) = *($7)
	*($7) = [0]
	*($9) = (int_64)0
	*(($5 + [-24])) = *(($2 + [-24]))
	*(($5 + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($5 + [-48])) = *(($2 + [-48]))
	$7 = ($2 + [-8])
	*(($5 + [-8])) = *($7)
	$5 = ($2 + [-16])
	*(($5 + [-16])) = *($5)
	*($5) = (int_64)0
	*($7) = [0]
	$5 = (*($4) + [-128])
	*($4) = $5
	$2 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [4]))
	
.LABEL $label$1
	*($0) = $5
	*(($5 = ($1 + [4]))) = $3
	$2 = ($0 + [4])
	$6 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $6
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($5)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0 + [8])
	$3 = ($0 + [8])
	
.LOOP $label$2:
	*(($2 = CALL memset($2, [0], [128])) + [8]) = (int_64)0
	*($2 + [16 align=4]) = (int_64)0
	*(($2 + [24])) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*($2 + [40 align=4]) = (int_64)0
	*(($2 + [48])) = (int_64)0
	*(($2 + [56])) = (int_64)0
	*($2 + [64 align=4]) = (int_64)0
	*(($2 + [72])) = [0]
	*($2 + [80]) = (int_64)0
	*(($2 + [88])) = (int_64)0
	*($2 + [96]) = (int_64)0
	*(($2 + [104])) = (int_64)0
	*(($4 = ($2 + [120]))) = [0]
	*($2 + [112 align=4]) = (int_64)0
	$5 = ($2 + [112])
	$0 = CALL $191([18763])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$5 }
	*($5) = ($0 << [1])
	$5 = ($5 + [1])
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($0 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2 + [112]) = ($6 | [1])
	*($4) = $5
	*(($2 + [116])) = $0
	
.LABEL $label$4
	CALL memcpy($5, [18763], $0)
	
.LABEL $label$3
	*(($5 + $0)) = [0]
	$2 = (*($3) + [128])
	*($3) = $2
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$2 }
	return (unreachable)
	
.LABEL $label$1
	CALL $148($5)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0 + [4])
	$3 = ($0 + [4])
	
.LOOP $label$2:
	*(($2 = CALL memset($2, [0], [128])) + [8]) = (int_64)0
	*($2 + [16 align=4]) = (int_64)0
	*(($2 + [24])) = (int_64)0
	*(($2 + [32])) = (int_64)0
	*($2 + [40 align=4]) = (int_64)0
	*(($2 + [48])) = (int_64)0
	*(($2 + [56])) = (int_64)0
	*($2 + [64 align=4]) = (int_64)0
	*(($2 + [72])) = [0]
	*($2 + [80]) = (int_64)0
	*(($2 + [88])) = (int_64)0
	*($2 + [96]) = (int_64)0
	*(($2 + [104])) = (int_64)0
	*(($4 = ($2 + [120]))) = [0]
	*($2 + [112 align=4]) = (int_64)0
	$5 = ($2 + [112])
	$0 = CALL $191([18763])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$5 }
	*($5) = ($0 << [1])
	$5 = ($5 + [1])
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($0 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2 + [112]) = ($6 | [1])
	*($4) = $5
	*(($2 + [116])) = $0
	
.LABEL $label$4
	CALL memcpy($5, [18763], $0)
	
.LABEL $label$3
	*(($5 + $0)) = [0]
	$2 = (*($3) + [128])
	*($3) = $2
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$2 }
	return (unreachable)
	
.LABEL $label$1
	CALL $148($5)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((uint_32)int_32(($3 - $4) >> [7]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$6 = int_32(($4 - $5) >> [7])
	$4 = ($6 + $1)
	if ( ((uint_32)$4 >= (uint_32)[33554432]) ){ goto $label$2 }
	$7 = ($0 + [8])
	$5 = ($3 - $5)
	if ( ((uint_32)int_32($5 >> [7]) >= (uint_32)[16777215]) ){ goto $label$5 }
	*(($2 + [24])) = $7
	$3 = [0]
	*($2 + [20]) = [0]
	$5 = int_32($5 >> [6])
	$4 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ($4 <= [33554432]) ){ goto $label$4 }
	CALL abort()
	
.LABEL $label$6
	CALL $82($0, $1)
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$5
	*(($2 + [24])) = $7
	*($2 + [20]) = [0]
	$4 = [33554431]
	
.LABEL $label$4
	$3 = CALL _Znwj(($4 << [7]))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	*($2 + [8]) = $3
	*(($2 + [20])) = ($3 + ($4 << [7]))
	$3 = ($3 + ($6 << [7]))
	*($2 + [16]) = $3
	*($2 + [12]) = $3
	CALL $83(($2 + [8]), $1)
	CALL $84($0, ($2 + [8]))
	CALL $85(($2 + [8]))
	$global$0 = ($2 + [32])
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $47(CALL $47(CALL $47(CALL $47(CALL $23($0, ($1 + [16])), ($1 + [28])), ($1 + [40])), ($1 + [52])), ($1 + [64]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [88])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [104])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $23($0, ($1 + [112]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $182 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $181($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $148 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $198(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9012])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $198(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $204($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $200($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9012])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $200($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $204($0)
	
.LABEL $label$1
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $149(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8799])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $29($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8799])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [72]) = [0]
	*($2 + [64]) = (int_64)0
	*($2 + [56]) = [0]
	*($2 + [48]) = (int_64)0
	*($2 + [40]) = [0]
	*($2 + [32]) = (int_64)0
	$3 = *($1 + [64])
	$4 = *($1 + [184])
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL $165(($2 + [16]), $4)
	if ( (*($2 + [64]) & [1]) ){ goto $label$3 }
	*($2 + [64]) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($2 + [72]))) = [0]
	*($2 + [68]) = [0]
	
.LABEL $label$2
	CALL $152(($2 + [64]), [0])
	*((($2 + [64]) + [8])) = *((($2 + [16]) + [8]))
	*($2 + [64]) = *($2 + [16])
	
.LABEL $label$1
	$4 = *($1 + [188])
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	CALL $165(($2 + [16]), $4)
	if ( (*($2 + [48]) & [1]) ){ goto $label$6 }
	*($2 + [48]) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*(($2 + [56]))) = [0]
	*($2 + [52]) = [0]
	
.LABEL $label$5
	CALL $152(($2 + [48]), [0])
	*((($2 + [48]) + [8])) = *((($2 + [16]) + [8]))
	*($2 + [48]) = *($2 + [16])
	
.LABEL $label$4
	$4 = *($1 + [192])
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	CALL $165(($2 + [16]), $4)
	if ( (*($2 + [32]) & [1]) ){ goto $label$9 }
	*($2 + [32]) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($2 + [40]))) = [0]
	*($2 + [36]) = [0]
	
.LABEL $label$8
	CALL $152(($2 + [32]), [0])
	*((($2 + [32]) + [8])) = *((($2 + [16]) + [8]))
	*($2 + [32]) = *($2 + [16])
	
.LABEL $label$7
	$3 = ($3 + [-1])
	if ( ((uint_32)$3 > (uint_32)[4]) ){ goto $label$16 }
	goto $label$23 
	
.LABEL $label$23
	CALL prints([18104])
	$1 = [1]
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$22
	CALL prints([18446])
	$3 = *($1)
	$4 = *($1 + [4])
	CALL prints([18457])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($4 - $3) / (int_32)[12])))
	CALL prints([18472])
	CALL prints([18476])
	$3 = *($2 + [64])
	$4 = ($3 & [1])
	$5 = (($2 + [64]) | [1])
	CALL prints_l(( *(($2 + [72])) ? $5 : $4 ), ( *($2 + [68]) ? uint_32($3 >> [1]) : $4 ))
	CALL prints([18472])
	$7 = *($1 + [36])
	$6 = ($1 + [40])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$24 }
	
.LOOP $label$25:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$26
	$4 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$25 }
	
.LABEL $label$24
	*($6) = $7
	$8 = ($1 + [4])
	$6 = *($8)
	$3 = $6
	$7 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$27 }
	$9 = ($1 + [36])
	$6 = [0]
	$10 = ($2 + [72])
	$11 = ($1 + [44])
	$12 = ($1 + [40])
	
.LOOP $label$28:
	$13 = ((int_32)$6 * (int_32)[12])
	$3 = ($7 + $13)
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$30 }
	$4 = uint_32($4 >> [1])
	$14 = ($3 + [1])
	goto $label$29 
	
.LABEL $label$30
	$4 = *($3 + [4])
	$14 = *($3 + [8])
	
.LABEL $label$29
	$15 = ($3 & [1])
	$3 = *($2 + [64])
	$3 = ( *($2 + [68]) ? uint_32($3 >> [1]) : $15 )
	if ( ($3 == 0) ){ goto $label$32 }
	if ( ((int_32)$4 < (int_32)$3) ){ goto $label$31 }
	$16 = ($14 + $4)
	$17 = ( *($10) ? $5 : $15 )
	$15 = *($17)
	$7 = $14
	
.LOOP $label$33:
	$4 = (($4 - $3) + [1])
	if ( ($4 == 0) ){ goto $label$31 }
	$4 = CALL $187($7, $15, $4)
	if ( ($4 == 0) ){ goto $label$31 }
	if ( (CALL $188($4, $17, $3) == 0) ){ goto $label$34 }
	$7 = ($4 + [1])
	$4 = ($16 - $7)
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	if ( ((int_32)$4 == (int_32)$16) ){ goto $label$31 }
	if ( ((int_32)($4 - $14) == (int_32)[-1]) ){ goto $label$31 }
	$7 = *($1)
	
.LABEL $label$32
	$3 = ($7 + $13)
	$4 = *($12)
	if ( ((int_32)$4 == (int_32)*($11)) ){ goto $label$35 }
	CALL $149($4, $3)
	*($12) = (*($12) + [12])
	goto $label$31 
	
.LABEL $label$35
	CALL $72($9, $3)
	
.LABEL $label$31
	$7 = *($1)
	$3 = *($8)
	$6 = ($6 + [1])
	if ( ($6 <= ((int_32)($3 - $7) / (int_32)[12])) ){ goto $label$28 }
	$6 = $7
	
.LABEL $label$27
	$4 = $6
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$36 }
	
.LOOP $label$37:
	$4 = ($3 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$38
	$3 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$37 }
	$4 = *($1)
	
.LABEL $label$36
	$3 = ($1 + [36])
	$15 = *($3)
	*($1) = $15
	*($3) = $4
	$4 = ($1 + [40])
	$7 = *($4)
	*($4) = $6
	*(($1 + [4])) = $7
	$6 = *($1 + [8])
	$17 = ($1 + [44])
	*($1 + [8]) = *($17)
	*($17) = $6
	$7 = ((int_32)($7 - $15) / (int_32)[12])
	*($1 + [196]) = $7
	CALL prints([18457])
	CALL printui((CASTING uint_64)(uint_32 $7))
	CALL prints([18472])
	$1 = *($3)
	$3 = *($4)
	CALL prints([18488])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($3 - $1) / (int_32)[12])))
	CALL prints([18472])
	$1 = [1]
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$21
	CALL prints([18506])
	$3 = *($1)
	$4 = *($1 + [4])
	CALL prints([18517])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($4 - $3) / (int_32)[12])))
	CALL prints([18472])
	CALL prints([18533])
	$3 = *($2 + [64])
	$4 = ($3 & [1])
	$12 = (($2 + [64]) | [1])
	CALL prints_l(( *((($2 + [64]) + [8])) ? $12 : $4 ), ( *($2 + [68]) ? uint_32($3 >> [1]) : $4 ))
	CALL prints([18544])
	$3 = *($2 + [48])
	$4 = ($3 & [1])
	$18 = (($2 + [48]) | [1])
	CALL prints_l(( *((($2 + [48]) + [8])) ? $18 : $4 ), ( *($2 + [52]) ? uint_32($3 >> [1]) : $4 ))
	$6 = *($1 + [36])
	$7 = ($1 + [40])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$39 }
	
.LOOP $label$40:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$41
	$4 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$40 }
	
.LABEL $label$39
	*($7) = $6
	$7 = *($1)
	$8 = ($1 + [4])
	if ( ((int_32)*($8) == (int_32)$7) ){ goto $label$42 }
	$19 = ($1 + [36])
	$5 = (($2 + [16]) | [1])
	$11 = (($2 + [64]) + [8])
	$20 = ($1 + [44])
	$10 = ($1 + [40])
	$6 = [0]
	
.LOOP $label$43:
	$13 = ((int_32)$6 * (int_32)[12])
	$3 = ($7 + $13)
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$45 }
	$4 = uint_32($4 >> [1])
	$14 = ($3 + [1])
	goto $label$44 
	
.LABEL $label$45
	$4 = *($3 + [4])
	$14 = *($3 + [8])
	
.LABEL $label$44
	$15 = ($3 & [1])
	$3 = *($2 + [64])
	$3 = ( *($2 + [68]) ? uint_32($3 >> [1]) : $15 )
	if ( ($3 == 0) ){ goto $label$47 }
	if ( ((int_32)$4 < (int_32)$3) ){ goto $label$46 }
	$16 = ($14 + $4)
	$17 = ( *($11) ? $12 : $15 )
	$15 = *($17)
	$7 = $14
	
.LOOP $label$48:
	$4 = (($4 - $3) + [1])
	if ( ($4 == 0) ){ goto $label$46 }
	$4 = CALL $187($7, $15, $4)
	if ( ($4 == 0) ){ goto $label$46 }
	if ( (CALL $188($4, $17, $3) == 0) ){ goto $label$49 }
	$7 = ($4 + [1])
	$4 = ($16 - $7)
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	if ( ((int_32)$4 == (int_32)$16) ){ goto $label$46 }
	if ( ((int_32)($4 - $14) == (int_32)[-1]) ){ goto $label$46 }
	$7 = *($1)
	
.LABEL $label$47
	$3 = (*($2 + [16]) & [1])
	$14 = (($2 + [16]) + [8])
	$4 = *($14)
	$3 = CALL $160($3, *(( *($11) ? $12 : (*($2 + [64]) & [1]) )), [0])
	$3 = CALL $149(($2 + [16]), ($7 + $13))
	CALL $159($3, (( ($3 + $4) ? (($3 + ($2 + [16])) + [1]) : $3 ) - ( $4 ? $5 : $3 )), [1])
	$7 = ($3 & [1])
	$3 = *($2 + [48])
	$3 = ( *($2 + [52]) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$52 }
	$15 = ($4 & [1])
	$4 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($4 >> [1]) : $15 )
	if ( ((int_32)$4 < (int_32)$3) ){ goto $label$51 }
	$9 = ( *($14) ? $5 : $15 )
	$16 = ($9 + $4)
	$17 = ( *((($2 + [48]) + [8])) ? $18 : $7 )
	$15 = *($17)
	$7 = $9
	
.LOOP $label$53:
	$4 = (($4 - $3) + [1])
	if ( ($4 == 0) ){ goto $label$51 }
	$4 = CALL $187($7, $15, $4)
	if ( ($4 == 0) ){ goto $label$51 }
	if ( (CALL $188($4, $17, $3) == 0) ){ goto $label$54 }
	$7 = ($4 + [1])
	$4 = ($16 - $7)
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$54
	if ( ((int_32)$4 == (int_32)$16) ){ goto $label$51 }
	if ( ((int_32)($4 - $9) == (int_32)[-1]) ){ goto $label$51 }
	
.LABEL $label$52
	$3 = (*($1) + $13)
	$4 = *($10)
	if ( ((int_32)$4 != (int_32)*($20)) ){ goto $label$55 }
	CALL $72($19, $3)
	if ( (*($2 + [16]) & [1]) ){ goto $label$50 }
	goto $label$46 
	
.LABEL $label$55
	CALL $149($4, $3)
	*($10) = (*($10) + [12])
	
.LABEL $label$51
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$46 }
	
.LABEL $label$50
	CALL _ZdlPv(*($14))
	
.LABEL $label$46
	$7 = *($1)
	$6 = ($6 + [1])
	if ( ($6 <= ((int_32)(*($8) - $7) / (int_32)[12])) ){ goto $label$43 }
	$6 = *(($1 + [40]))
	
.LABEL $label$42
	$15 = ($1 + [36])
	$3 = *($15)
	CALL prints([18559])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($6 - $3) / (int_32)[12])))
	CALL prints([18472])
	$7 = *($1)
	$3 = $7
	$6 = ($1 + [4])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$56 }
	
.LOOP $label$57:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$58 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$58
	$4 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$57 }
	$3 = *($1)
	
.LABEL $label$56
	$17 = *($15)
	*($1) = $17
	*($15) = $3
	$15 = ($1 + [40])
	$4 = *($15)
	*($15) = $7
	*($6) = $4
	$15 = *($1 + [8])
	$16 = ($1 + [44])
	*($1 + [8]) = *($16)
	*($16) = $15
	*($1 + [196]) = ((int_32)($4 - $17) / (int_32)[12])
	CALL prints([18584])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($7 - $3) / (int_32)[12])))
	$3 = *($6)
	$1 = *($1)
	CALL prints([18602])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($3 - $1) / (int_32)[12])))
	$1 = [1]
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$20
	CALL prints([18617])
	$3 = *($1)
	$4 = *($1 + [4])
	CALL prints([18517])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($4 - $3) / (int_32)[12])))
	CALL prints([18472])
	$3 = *(($1 + [52]))
	$4 = *($1 + [48])
	CALL prints([18628])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($3 - $4) / (int_32)[12])))
	CALL prints([18472])
	CALL prints([18533])
	$3 = *($2 + [64])
	$4 = ($3 & [1])
	$5 = (($2 + [64]) | [1])
	CALL prints_l(( *((($2 + [64]) + [8])) ? $5 : $4 ), ( *($2 + [68]) ? uint_32($3 >> [1]) : $4 ))
	CALL prints([18544])
	$3 = *($2 + [48])
	$4 = ($3 & [1])
	$20 = (($2 + [48]) | [1])
	CALL prints_l(( *((($2 + [48]) + [8])) ? $20 : $4 ), ( *($2 + [52]) ? uint_32($3 >> [1]) : $4 ))
	CALL prints([18647])
	$3 = *($2 + [32])
	$4 = ($3 & [1])
	$21 = (($2 + [32]) | [1])
	CALL prints_l(( *((($2 + [32]) + [8])) ? $21 : $4 ), ( *($2 + [36]) ? uint_32($3 >> [1]) : $4 ))
	$6 = *($1 + [36])
	$7 = ($1 + [40])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$59 }
	
.LOOP $label$60:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$61
	$4 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$60 }
	
.LABEL $label$59
	*($7) = $6
	$7 = *($1)
	$8 = ($1 + [4])
	if ( ((int_32)*($8) == (int_32)$7) ){ goto $label$17 }
	$22 = ($1 + [36])
	$11 = (($2 + [16]) | [1])
	$10 = (($2 + [64]) + [8])
	$23 = ($1 + [44])
	$19 = ($1 + [40])
	$6 = [0]
	goto $label$18 
	
.LABEL $label$19
	CALL prints([18686])
	$3 = [0]
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$4 = *($1 + [200])
	$17 = ($1 + [204])
	if ( ((int_32)*($17) == (int_32)$4) ){ goto $label$62 }
	$16 = ($2 | [1])
	$15 = ($2 + [8])
	$14 = ($1 + [200])
	$7 = [0]
	
.LOOP $label$63:
	CALL $165($2, *(($4 + $3)))
	$4 = *($2)
	$6 = ($4 & [1])
	CALL $156(($2 + [16]), ( *($15) ? $16 : $6 ), ( *($2 + [4]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*($15))
	
.LABEL $label$64
	$3 = ($3 + [4])
	$4 = *($14)
	$7 = ($7 + [1])
	if ( ($7 <= int_32((*($17) - $4) >> [2])) ){ goto $label$63 }
	
.LABEL $label$62
	*($1 + [196]) = [1]
	CALL prints([18697])
	$3 = *($2 + [16])
	$4 = ($3 & [1])
	CALL prints_l(( *(($2 + [24])) ? (($2 + [16]) | [1]) : $4 ), ( *($2 + [20]) ? uint_32($3 >> [1]) : $4 ))
	CALL $153(($2 + [16]), [18716])
	$7 = *($1)
	$4 = *($1 + [4])
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$65 }
	
.LOOP $label$66:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$67
	$4 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$66 }
	
.LABEL $label$65
	*(($1 + [4])) = $7
	$7 = *($1 + [24])
	$6 = ($1 + [28])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$68 }
	
.LOOP $label$69:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$70
	$4 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$69 }
	
.LABEL $label$68
	*($6) = $7
	$7 = *($1 + [36])
	$6 = ($1 + [40])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$71 }
	
.LOOP $label$72:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$73
	$4 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$72 }
	
.LABEL $label$71
	*($6) = $7
	$4 = *($1 + [48])
	$7 = ($1 + [52])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$74 }
	
.LOOP $label$75:
	$1 = ($3 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$76
	$3 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$75 }
	
.LABEL $label$74
	*($7) = $4
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [24])))
	$1 = [1]
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	
.LOOP $label$77:
	$13 = ((int_32)$6 * (int_32)[12])
	$3 = ($7 + $13)
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$79 }
	$4 = uint_32($4 >> [1])
	$14 = ($3 + [1])
	goto $label$78 
	
.LABEL $label$79
	$4 = *($3 + [4])
	$14 = *($3 + [8])
	
.LABEL $label$78
	$15 = ($3 & [1])
	$3 = *($2 + [64])
	$3 = ( *($2 + [68]) ? uint_32($3 >> [1]) : $15 )
	if ( ($3 == 0) ){ goto $label$81 }
	if ( ((int_32)$4 < (int_32)$3) ){ goto $label$80 }
	$16 = ($14 + $4)
	$17 = ( *($10) ? $5 : $15 )
	$15 = *($17)
	$7 = $14
	
.LOOP $label$82:
	$4 = (($4 - $3) + [1])
	if ( ($4 == 0) ){ goto $label$80 }
	$4 = CALL $187($7, $15, $4)
	if ( ($4 == 0) ){ goto $label$80 }
	if ( (CALL $188($4, $17, $3) == 0) ){ goto $label$83 }
	$7 = ($4 + [1])
	$4 = ($16 - $7)
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$82 }
	goto $label$80 
	
.LABEL $label$83
	if ( ((int_32)$4 == (int_32)$16) ){ goto $label$80 }
	if ( ((int_32)($4 - $14) == (int_32)[-1]) ){ goto $label$80 }
	$7 = *($1)
	
.LABEL $label$81
	$3 = (*($2 + [16]) & [1])
	$12 = (($2 + [16]) + [8])
	$4 = *($12)
	$3 = CALL $160($17, *(( *($10) ? $5 : (*($2 + [64]) & [1]) )), [0])
	$17 = CALL $149(($2 + [16]), ($7 + $13))
	CALL $159($17, (( ($3 + $4) ? (($3 + ($2 + [16])) + [1]) : $3 ) - ( $4 ? $11 : $3 )), [1])
	$9 = (($2 + [48]) + [8])
	$7 = *($9)
	$15 = ($3 & [1])
	$3 = *($2 + [48])
	$3 = ( *($2 + [52]) ? uint_32($3 >> [1]) : $15 )
	if ( ($3 == 0) ){ goto $label$86 }
	$16 = ($4 & [1])
	$4 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($4 >> [1]) : $16 )
	if ( ((int_32)$4 < (int_32)$3) ){ goto $label$85 }
	$18 = ( *($12) ? $11 : $16 )
	$14 = ($18 + $4)
	$16 = ( $7 ? $20 : $15 )
	$15 = *($16)
	$7 = $18
	
.LOOP $label$87:
	$4 = (($4 - $3) + [1])
	if ( ($4 == 0) ){ goto $label$85 }
	$4 = CALL $187($7, $15, $4)
	if ( ($4 == 0) ){ goto $label$85 }
	if ( (CALL $188($4, $16, $3) == 0) ){ goto $label$88 }
	$7 = ($4 + [1])
	$4 = ($14 - $7)
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$87 }
	goto $label$85 
	
.LABEL $label$88
	if ( ((int_32)$4 == (int_32)$14) ){ goto $label$85 }
	if ( ((int_32)($4 - $18) == (int_32)[-1]) ){ goto $label$85 }
	$15 = (*($2 + [48]) & [1])
	$7 = *($9)
	
.LABEL $label$86
	$3 = (*($2 + [16]) & [1])
	$4 = *($12)
	$3 = CALL $160($17, *(( $7 ? $20 : $15 )), [0])
	CALL $159($17, (( ($3 + $4) ? (($3 + ($2 + [16])) + [1]) : $3 ) - ( $4 ? $11 : $3 )), [1])
	$7 = ($3 & [1])
	$3 = *($2 + [32])
	$3 = ( *($2 + [36]) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$89 }
	$15 = ($4 & [1])
	$4 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($4 >> [1]) : $15 )
	if ( ((int_32)$4 < (int_32)$3) ){ goto $label$85 }
	$14 = ( *($12) ? $11 : $15 )
	$16 = ($14 + $4)
	$17 = ( *((($2 + [32]) + [8])) ? $21 : $7 )
	$15 = *($17)
	$7 = $14
	
.LOOP $label$90:
	$4 = (($4 - $3) + [1])
	if ( ($4 == 0) ){ goto $label$85 }
	$4 = CALL $187($7, $15, $4)
	if ( ($4 == 0) ){ goto $label$85 }
	if ( (CALL $188($4, $17, $3) == 0) ){ goto $label$91 }
	$7 = ($4 + [1])
	$4 = ($16 - $7)
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$90 }
	goto $label$85 
	
.LABEL $label$91
	if ( ((int_32)$4 == (int_32)$16) ){ goto $label$85 }
	if ( ((int_32)($4 - $14) == (int_32)[-1]) ){ goto $label$85 }
	
.LABEL $label$89
	$3 = (*($1) + $13)
	$4 = *($19)
	if ( ((int_32)$4 != (int_32)*($23)) ){ goto $label$92 }
	CALL $72($22, $3)
	if ( (*($2 + [16]) & [1]) ){ goto $label$84 }
	goto $label$80 
	
.LABEL $label$92
	CALL $149($4, $3)
	*($19) = (*($19) + [12])
	
.LABEL $label$85
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$80 }
	
.LABEL $label$84
	CALL _ZdlPv(*($12))
	
.LABEL $label$80
	$7 = *($1)
	$6 = ($6 + [1])
	if ( ($6 <= ((int_32)(*($8) - $7) / (int_32)[12])) ){ goto $label$77 }
	$6 = *(($1 + [40]))
	
.LABEL $label$17
	$15 = ($1 + [36])
	$3 = *($15)
	CALL prints([18661])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($6 - $3) / (int_32)[12])))
	CALL prints([18472])
	$7 = *($1)
	$3 = $7
	$6 = ($1 + [4])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$93 }
	
.LOOP $label$94:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$95 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$95
	$4 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$94 }
	$3 = *($1)
	
.LABEL $label$93
	$17 = *($15)
	*($1) = $17
	*($15) = $3
	$15 = ($1 + [40])
	$4 = *($15)
	*($15) = $7
	*($6) = $4
	$15 = *($1 + [8])
	$16 = ($1 + [44])
	*($1 + [8]) = *($16)
	*($16) = $15
	*($1 + [196]) = ((int_32)($4 - $17) / (int_32)[12])
	CALL prints([18584])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($7 - $3) / (int_32)[12])))
	$3 = *($6)
	$1 = *($1)
	CALL prints([18602])
	CALL printui((CASTING uint_64)(uint_32 ((int_32)($3 - $1) / (int_32)[12])))
	
.LABEL $label$16
	$1 = [1]
	if ( (*($2 + [32]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($2 + [48]) & $1) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($2 + [40])))
	if ( ((*($2 + [48]) & $1) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($2 + [56])))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($2 + [64]) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$10
	CALL _ZdlPv(*(($2 + [72])))
	$global$0 = ($2 + [80])
	$3
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $33($1)
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	$1 = CALL $191([8545])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8632])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($1 + [8544]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = $2
	CALL eosio_assert([1], [8730])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$11 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [8779])
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*($0 + [56 align=4]) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*($0 + [80 align=4]) = (int_64)0
	*(($0 + [88])) = (int_64)0
	*(($0 + [96])) = (int_64)0
	*($0 + [104 align=4]) = (int_64)0
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = (int_64)0
	*($0 + [128 align=4]) = (int_64)0
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = (int_64)0
	*($0 + [152 align=4]) = (int_64)0
	*(($0 + [160])) = [0]
	*($0 + [168]) = (int_64)0
	*($0 + [176 align=4]) = (int_64)0
	*(($0 + [184])) = (int_64)0
	*(($0 + [192])) = (int_64)0
	*($0 + [200 align=4]) = (int_64)0
	*(($0 + [208])) = (int_64)0
	*(($0 + [216])) = (int_64)0
	*($0 + [224 align=4]) = (int_64)0
	*(($0 + [232])) = (int_64)0
	*(($0 + [240])) = (int_64)0
	$1 = CALL $191([8545])
	if ( ($1 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8632])
	goto $label$14 
	
.LABEL $label$15
	if ( ($1 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$2 = (int_64)0
	
.LOOP $label$16:
	$3 = *(($1 + [8544]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$17
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$16 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$2 = (int_64)4
	
.LABEL $label$12
	*($0 + [248]) = (int_64)0
	*(($1 = ($0 + [256]))) = $2
	CALL eosio_assert([1], [8730])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$2 = $4
	$6 = [1]
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$22
	$2 = $4
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$23 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	
.LABEL $label$21
	CALL eosio_assert($6, [8779])
	return $0
	
.LABEL $label$19
	CALL eosio_assert([0], [8779])
	return $0
	
.LABEL $label$18
	CALL eosio_assert([0], [8779])
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1 + [8]) = *(*($3))
	*($1) = *(*($3 + [4]))
	$4 = *($0)
	$3 = *($3 + [8])
	*(($1 + [24])) = *(($3 + [8]))
	*($1 + [16]) = *($3)
	*(($3 = $2)) = [0]
	CALL $87($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $200($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL $88($3, $1)
	$6 = *($1)
	*($1 + [268]) = CALL db_store_i64(*($4 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($2)
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	$4 = (int_64)0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = [0]
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *(($0 + [8]))), [8878])
	$5 = *($7)
	$3 = *($5)
	$5 = ($5 + [1])
	*($7) = $5
	$6 = ($6 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($3 & [128]) ){ goto $label$1 }
	CALL $79(($1 + [32]), (CASTING uint_32)(uint_64 $4))
	$5 = *(($1 + [36]))
	$3 = *($1 + [32])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $80($0, $3)
	$3 = ($3 + [128])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = CALL $48(CALL $49(CALL $45(CALL $47(CALL $45(CALL $48(CALL $49(CALL $48(CALL $45(CALL $45($0, ($1 + [44])), ($1 + [56])), ($1 + [68])), ($1 + [80])), ($1 + [92])), ($1 + [104])), ($1 + [116])), ($1 + [128])), ($1 + [140])), ($1 + [152]))
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [168]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = CALL $48(CALL $49(CALL $48(CALL $45(CALL $47(CALL $47($3, ($1 + [176])), ($1 + [188])), ($1 + [200])), ($1 + [212])), ($1 + [224])), ($1 + [236]))
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [248]), *($3 + [4]), [8])
	$0 = (*($3 + [4]) + [8])
	*($3 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $0) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [256])) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $3
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [7])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$1 }
	CALL $81($0, ($1 - $4))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$4 <= (uint_32)$1) ){ goto $label$2 }
	$4 = ($3 + ($1 << [7]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((*(($2 + [-16])) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($2 + [-8])))
	
.LABEL $label$5
	$1 = *(($2 + [-64]))
	if ( ($1 == 0) ){ goto $label$6 }
	*(($2 + [-60])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$1 = *(($2 + [-76]))
	if ( ($1 == 0) ){ goto $label$7 }
	*(($2 + [-72])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$1 = *(($2 + [-88]))
	if ( ($1 == 0) ){ goto $label$8 }
	*(($2 + [-84])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$1 = *(($2 + [-100]))
	if ( ($1 == 0) ){ goto $label$9 }
	*(($2 + [-96])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = ($2 + [-128])
	if ( ((*(($2 + [-112])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-104])))
	
.LABEL $label$10
	$2 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	*(($0 + [4])) = $4
	
.LABEL $label$2
}

int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($3 - $2)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$8 }
	$6 = *($0 + [4])
	$4 = *($0 + [8])
	$5 = int_32($4 >> [3])
	if ( ((int_32)$5 <= (int_32)int_32(($4 - $6) >> [3])) ){ goto $label$7 }
	$7 = *($0)
	$6 = (int_32(($6 - $7) >> [3]) + $5)
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	$5 = ($4 - $7)
	if ( ((uint_32)int_32($5 >> [3]) >= (uint_32)[268435455]) ){ goto $label$6 }
	$4 = int_32(($1 - $7) >> [3])
	$7 = int_32($5 >> [2])
	$6 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ($6 <= [536870912]) ){ goto $label$5 }
	CALL abort()
	
.LABEL $label$8
	return $1
	
.LABEL $label$7
	$8 = ($6 - $1)
	$4 = int_32($8 >> [3])
	if ( ((int_32)$5 <= (int_32)$4) ){ goto $label$10 }
	$7 = $6
	$9 = ($2 + ($4 << [3]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$11 }
	$10 = (($3 + [-8]) - $9)
	$4 = $6
	$7 = $9
	
.LOOP $label$12:
	*($4) = *($7)
	$4 = ($4 + [8])
	$7 = ($7 + [8])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$12 }
	$7 = (($6 + ($10 & [-8])) + [8])
	*(($0 + [4])) = $7
	
.LABEL $label$11
	if ( ((int_32)$8 >= (int_32)[1]) ){ goto $label$9 }
	return $1
	
.LABEL $label$10
	$7 = $6
	$9 = $3
	
.LABEL $label$9
	$4 = ($5 << [3])
	$5 = ($7 - ($1 + $4))
	$8 = int_32($5 >> [3])
	$4 = ($7 - $4)
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$13 }
	$10 = uint_32((($6 - ($8 << [3])) + ((int_32)$1 ^ (int_32)[-1])) >> [3])
	$3 = $7
	
.LOOP $label$14:
	*($3) = *($4)
	$3 = ($3 + [8])
	$4 = ($4 + [8])
	if ( ($4 <= $6) ){ goto $label$14 }
	*(($0 + [4])) = (($7 + ($10 << [3])) + [8])
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$15 }
	CALL memmove(($7 - ($8 << [3])), $1, $5)
	
.LABEL $label$15
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$4 }
	$3 = ($9 - $2)
	$4 = [0]
	
.LOOP $label$16:
	*(($1 + $4)) = *(($2 + $4))
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$16 }
	return $1
	
.LABEL $label$6
	$4 = int_32(($1 - $7) >> [3])
	$6 = [536870911]
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$7 = ($5 + ($4 << [3]))
	$4 = $7
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$17 }
	$9 = uint_32((($3 + [-8]) - $2) >> [3])
	$4 = $7
	
.LOOP $label$18:
	*($4) = *($2)
	$4 = ($4 + [8])
	$2 = ($2 + [8])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$18 }
	$4 = (($7 + ($9 << [3])) + [8])
	
.LABEL $label$17
	$6 = ($6 << [3])
	$9 = *($0)
	$2 = ($1 - $9)
	$3 = ($7 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($3, $9, $2)
	
.LABEL $label$19
	$6 = ($5 + $6)
	$5 = ($0 + [4])
	$2 = (*($5) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($4, $1, $2)
	$4 = ($4 + $2)
	
.LABEL $label$20
	*($5) = $4
	$2 = *($0)
	*($0) = $3
	*(($0 + [8])) = $6
	if ( ($2 == 0) ){ goto $label$21 }
	CALL _ZdlPv($2)
	
.LABEL $label$21
	(unreachable)
	(unreachable)
	return $7
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [400]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1 + [16])
	CALL $107($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1 + [16])), [18035])
	*(($3 = $4)) = [0]
	CALL $58($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $59($3, $1)
	CALL db_update_i64(*(($1 + [404])), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8886])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([280])
	CALL $74($3)
	*($3 + [264]) = $1
	CALL $95(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [268])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $33($1)
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($0)
	$7 = ($1 + [180])
	$8 = *($7)
	$6 = *($1 + [176])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$1 }
	$9 = *(*($4))
	
.LOOP $label$2:
	if ( ((int_64)*($6) == (int_64)$9) ){ goto $label$1 }
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$2 }
	$6 = $8
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 == (int_32)$8), [18890])
	$8 = *($4)
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)*(($1 + [184]))) ){ goto $label$4 }
	*(($1 + [180])) = ($6 + [8])
	*($6) = *($8)
	goto $label$3 
	
.LABEL $label$4
	CALL $96(($1 + [176]), $8)
	
.LABEL $label$3
	*($3) = [0]
	CALL $87($3, $1)
	$8 = *($3)
	if ( ($8 <= [513]) ){ goto $label$6 }
	$6 = CALL $200($8)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($8 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $8)
	CALL $88($3, $1)
	$9 = *($1)
	*($1 + [268]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $9, $6, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$9 >= (uint_64)*($5 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $204($6)
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8850])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $200($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([136])
	$6 = CALL $105($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [128])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [120])))
	
.LABEL $label$10
	$1 = *($5 + [64])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [68])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$1 = *($5 + [52])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($5 + [56])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$1 = *($5 + [40])
	if ( ($1 == 0) ){ goto $label$13 }
	*(($5 + [44])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$1 = *($5 + [28])
	if ( ($1 == 0) ){ goto $label$14 }
	*(($5 + [32])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = (*($0) + [16])
	*($0) = $2
	$3 = *($1 + [16])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [16]))
	$3 = ( *(($1 + [20])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$5 = *($1 + [28])
	$3 = *(($1 + [32]))
	$6 = ($3 - $5)
	$4 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$2 = (($6 & [-8]) + $2)
	
.LABEL $label$4
	*($0) = $2
	$5 = *($1 + [40])
	$3 = *(($1 + [44]))
	$6 = ($3 - $5)
	$4 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	$2 = (($6 & [-8]) + $2)
	
.LABEL $label$6
	*($0) = $2
	$5 = *($1 + [52])
	$3 = *(($1 + [56]))
	$6 = ($3 - $5)
	$4 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	$2 = (($6 & [-8]) + $2)
	
.LABEL $label$8
	*($0) = $2
	$5 = *($1 + [64])
	$3 = *(($1 + [68]))
	$6 = ($3 - $5)
	$4 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$10 }
	$2 = (($6 & [-8]) + $2)
	
.LABEL $label$10
	$2 = ($2 + [32])
	*($0) = $2
	$3 = *($1 + [112])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [116])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$11:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$11 }
	*($0) = $2
	$1 = *(($1 + [112]))
	$1 = ( *(($1 + [116])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$12 }
	*($0) = ($1 + $2)
	
.LABEL $label$12
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1 + [8]) = *(*($0))
	$0 = *($0 + [4])
	*(($1 + [24])) = *(($0 + [8]))
	*($1 + [16]) = *($0)
	$5 = *($1 + [44])
	$3 = ($1 + [48])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = ($4 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$3
	$4 = $0
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$2 }
	
.LABEL $label$1
	*($3) = $5
	$5 = *($1 + [56])
	$3 = ($1 + [60])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($4 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$6
	$4 = $0
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	
.LABEL $label$4
	*($3) = $5
	*(($1 + [84])) = *($1 + [80])
	*(($1 + [72])) = *($1 + [68])
	*(($1 + [96])) = *($1 + [92])
	$5 = *($1 + [104])
	$3 = ($1 + [108])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($4 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$9
	$4 = $0
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$8 }
	
.LABEL $label$7
	*($3) = $5
	*(($1 + [120])) = *($1 + [116])
	$5 = *($1 + [128])
	$3 = ($1 + [132])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($4 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$12
	$4 = $0
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$11 }
	
.LABEL $label$10
	*($3) = $5
	*(($1 + [144])) = *($1 + [140])
	*(($1 + [156])) = *($1 + [152])
	*($2 + [16]) = [18716]
	*($2 + [20]) = CALL $191([18716])
	*($2 + [8]) = *($2 + [16])
	*($1 + [168]) = *(CALL $2(($2 + [24]), ($2 + [8])))
	*(($1 + [180])) = *($1 + [176])
	*(($1 + [192])) = *($1 + [188])
	$5 = *($1 + [200])
	$3 = ($1 + [204])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$0 = ($4 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $0
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$14 }
	
.LABEL $label$13
	*($1 + [248]) = (int_64)0
	*($3) = $5
	*(($1 + [216])) = *($1 + [212])
	*(($1 + [228])) = *($1 + [224])
	*(($1 + [240])) = *($1 + [236])
	$global$0 = ($2 + [32])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($0)
	$7 = *(($1 + [180]))
	$6 = *($1 + [176])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$1 }
	$8 = *(*($4))
	
.LOOP $label$2:
	if ( ((int_64)*($6) == (int_64)$8) ){ goto $label$1 }
	$6 = ($6 + [8])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$2 }
	$6 = $7
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 == (int_32)$7), [18799])
	CALL eosio_assert((int_64)(*($1 + [168]) == 0), [18768])
	*($1 + [168]) = *(*($4))
	*($3) = [0]
	CALL $87($3, $1)
	$7 = *($3)
	if ( ($7 <= [513]) ){ goto $label$4 }
	$6 = CALL $200($7)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $7)
	CALL $88($3, $1)
	$8 = *($1)
	*($1 + [268]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $8, $6, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $204($6)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$6 = *($1)
	$8 = ($1 + [180])
	$9 = *($8)
	$7 = *($1 + [176])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$1 }
	$10 = *(*($3))
	
.LOOP $label$2:
	if ( ((int_64)*($7) == (int_64)$10) ){ goto $label$1 }
	$7 = ($7 + [8])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$2 }
	$7 = $9
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 == (int_32)$9), [18890])
	$9 = *($3)
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)*(($1 + [184]))) ){ goto $label$4 }
	*(($1 + [180])) = ($7 + [8])
	*($7) = *($9)
	goto $label$3 
	
.LABEL $label$4
	CALL $96(($1 + [176]), $9)
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18035])
	*($5) = [0]
	CALL $87($5, $1)
	$9 = *($5)
	if ( ($9 <= [513]) ){ goto $label$6 }
	$7 = CALL $200($9)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$5
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = ($7 + $9)
	CALL $88($5, $1)
	CALL db_update_i64(*($1 + [268]), $2, $7, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $204($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *(*(*($0) + [4]) + [16])
	if ( ((int_64)*($1 + [8]) != (int_64)$3) ){ goto $label$15 }
	$4 = *($0 + [4])
	CALL prints([19652])
	$5 = *($4)
	$6 = ($5 & [1])
	CALL prints_l(( *($4 + [8]) ? ($4 + [1]) : $6 ), ( *($4 + [4]) ? uint_32($5 >> [1]) : $6 ))
	$4 = *($0 + [8])
	*($1 + [16]) = *($4)
	*(($1 + [24])) = *(($4 + [8]))
	$5 = *($0 + [4])
	$4 = ($1 + [48])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)*(($1 + [52]))) ){ goto $label$14 }
	CALL $149($6, $5)
	*($4) = (*($4) + [12])
	goto $label$13 
	
.LABEL $label$15
	*(($1 + [8])) = $3
	$6 = *($1 + [44])
	$7 = ($1 + [48])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$18
	$5 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$17 }
	
.LABEL $label$16
	*($7) = $6
	$6 = *($1 + [56])
	$7 = ($1 + [60])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$21
	$5 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$20 }
	
.LABEL $label$19
	*($7) = $6
	*(($1 + [84])) = *($1 + [80])
	*(($1 + [72])) = *($1 + [68])
	*(($1 + [96])) = *($1 + [92])
	$6 = *($1 + [104])
	$7 = ($1 + [108])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$22 }
	
.LOOP $label$23:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$24
	$5 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$23 }
	
.LABEL $label$22
	*($7) = $6
	*(($1 + [120])) = *($1 + [116])
	$6 = *($1 + [128])
	$7 = ($1 + [132])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$25 }
	
.LOOP $label$26:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$27
	$5 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$26 }
	
.LABEL $label$25
	*($7) = $6
	*(($1 + [144])) = *($1 + [140])
	*(($1 + [156])) = *($1 + [152])
	*($2 + [16]) = [18716]
	*($2 + [20]) = CALL $191([18716])
	*($2 + [8]) = *($2 + [16])
	*($1 + [168]) = *(CALL $2(($2 + [24]), ($2 + [8])))
	*(($1 + [180])) = *($1 + [176])
	*(($1 + [192])) = *($1 + [188])
	$6 = *($1 + [200])
	$7 = ($1 + [204])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$28 }
	
.LOOP $label$29:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$30
	$5 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$29 }
	
.LABEL $label$28
	*($1 + [248]) = (int_64)0
	*(($1 + [240])) = *($1 + [236])
	*(($1 + [228])) = *($1 + [224])
	*(($1 + [216])) = *($1 + [212])
	*($7) = $6
	$4 = *($0 + [8])
	*(($1 + [24])) = *(($4 + [8]))
	*($1 + [16]) = *($4)
	$5 = *($0 + [4])
	$4 = ($1 + [48])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)*(($1 + [52]))) ){ goto $label$12 }
	CALL $149($6, $5)
	*($4) = (*($4) + [12])
	goto $label$11 
	
.LABEL $label$14
	CALL $72(($1 + [44]), $5)
	
.LABEL $label$13
	$5 = *($0 + [12])
	$6 = ($1 + [84])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)*(($1 + [88]))) ){ goto $label$10 }
	*($6) = ($4 + [8])
	*($4) = *($5)
	goto $label$9 
	
.LABEL $label$12
	CALL $72(($1 + [44]), $5)
	
.LABEL $label$11
	$5 = *($0 + [12])
	$6 = ($1 + [84])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)*(($1 + [88]))) ){ goto $label$8 }
	*($6) = ($4 + [8])
	*($4) = *($5)
	goto $label$7 
	
.LABEL $label$10
	CALL $137(($1 + [80]), $5)
	
.LABEL $label$9
	$4 = *($0 + [16])
	$5 = ($1 + [72])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*(($1 + [76]))) ){ goto $label$6 }
	*($6) = *($4)
	*(($6 + [8])) = *(($4 + [8]))
	*($5) = (*($5) + [16])
	goto $label$5 
	
.LABEL $label$8
	CALL $137(($1 + [80]), $5)
	
.LABEL $label$7
	$4 = *($0 + [16])
	$5 = ($1 + [72])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*(($1 + [76]))) ){ goto $label$4 }
	*($6) = *($4)
	*(($6 + [8])) = *(($4 + [8]))
	*($5) = (*($5) + [16])
	goto $label$3 
	
.LABEL $label$6
	CALL $111(($1 + [68]), $4)
	
.LABEL $label$5
	$4 = (*(*($0) + [4]) + [168])
	$5 = ($1 + [96])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*(($1 + [100]))) ){ goto $label$2 }
	*($6) = *($4)
	*(($6 + [8])) = *(($4 + [8]))
	*($5) = (*($5) + [16])
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$4
	CALL $111(($1 + [68]), $4)
	
.LABEL $label$3
	$4 = (*(*($0) + [4]) + [168])
	$5 = ($1 + [96])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*(($1 + [100]))) ){ goto $label$1 }
	*($6) = *($4)
	*(($6 + [8])) = *(($4 + [8]))
	*($5) = (*($5) + [16])
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	CALL $111(($1 + [92]), $4)
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$1
	CALL $111(($1 + [92]), $4)
	$global$0 = ($2 + [32])
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	float_64 $9
	float_64 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	$4 = ($1 + [244])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)*(($1 + [248]))) ){ goto $label$2 }
	*($4) = ($5 + [8])
	*($5) = *($3)
	goto $label$1 
	
.LABEL $label$2
	CALL $96(($1 + [240]), $3)
	
.LABEL $label$1
	$3 = *($0 + [4])
	$5 = ($1 + [256])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)*(($1 + [260]))) ){ goto $label$4 }
	CALL $149($4, $3)
	*($5) = (*($5) + [12])
	goto $label$3 
	
.LABEL $label$4
	CALL $72(($1 + [252]), $3)
	
.LABEL $label$3
	$5 = *($0 + [8])
	$3 = ($1 + [268])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)*(($1 + [272]))) ){ goto $label$6 }
	*($4) = *($5)
	*(($4 + [8])) = *(($5 + [8]))
	*($3) = (*($3) + [16])
	goto $label$5 
	
.LABEL $label$6
	CALL $111(($1 + [264]), $5)
	
.LABEL $label$5
	$3 = *($0 + [12])
	$4 = ($1 + [280])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)*(($1 + [284]))) ){ goto $label$8 }
	*($4) = ($5 + [8])
	*($5) = *($3)
	goto $label$7 
	
.LABEL $label$8
	CALL $137(($1 + [276]), $3)
	
.LABEL $label$7
	$5 = *(($1 + [240]))
	$3 = *(($1 + [244]))
	if ( (int_32(($3 - $5) >> [3]) <= [31]) ){ goto $label$9 }
	$6 = ($5 + [8])
	$3 = ($3 - $6)
	$4 = int_32($3 >> [3])
	if ( ($3 == 0) ){ goto $label$10 }
	CALL memmove($5, $6, $3)
	
.LABEL $label$10
	*(($1 + [244])) = ($5 + ($4 << [3]))
	$3 = *(($1 + [256]))
	$5 = *(($1 + [252]))
	$4 = ($5 + [12])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = ($3 + [-12])
	
.LOOP $label$14:
	if ( (*($5) & [1]) ){ goto $label$16 }
	*($5) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*(($5 + [8]))) = [0]
	*(($5 + [4])) = [0]
	
.LABEL $label$15
	CALL $152($5, [0])
	$4 = ($5 + [20])
	*(($5 + [8])) = *($4)
	$3 = ($5 + [12])
	*($5) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$5 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$14 }
	$4 = *(($1 + [256]))
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$3 = $5
	
.LABEL $label$12
	
.LOOP $label$17:
	$5 = ($4 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$18
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$17 }
	
.LABEL $label$11
	*(($1 + [256])) = $3
	$5 = *(($1 + [264]))
	$7 = ($5 + [16])
	$4 = ($1 + [268])
	$3 = (*($4) - $7)
	$6 = int_32($3 >> [4])
	if ( ($3 == 0) ){ goto $label$19 }
	CALL memmove($5, $7, $3)
	
.LABEL $label$19
	*($4) = ($5 + ($6 << [4]))
	$5 = *(($1 + [276]))
	$7 = ($5 + [8])
	$4 = ($1 + [280])
	$3 = (*($4) - $7)
	$6 = int_32($3 >> [3])
	if ( ($3 == 0) ){ goto $label$20 }
	CALL memmove($5, $7, $3)
	
.LABEL $label$20
	*($4) = ($5 + ($6 << [3]))
	
.LABEL $label$9
	$5 = *($0 + [16])
	$3 = *($5)
	$5 = *($5 + [4])
	CALL prints([19663])
	CALL printui((CASTING uint_64)(uint_32 int_32(($5 - $3) >> [3])))
	$8 = *(*($0 + [20]))
	if ( ((int_64)$8 == (int_64)4) ){ goto $label$28 }
	if ( ((int_64)$8 == (int_64)3) ){ goto $label$27 }
	if ( ((int_64)$8 != (int_64)2) ){ goto $label$26 }
	$5 = *(*($0 + [24]) + [4])
	if ( ((int_32)*(($5 + [32])) == (int_32)*($5 + [28])) ){ goto $label$26 }
	$3 = *(*($0 + [28]) + [4])
	*($2 + [32]) = [18716]
	*($2 + [36]) = CALL $191([18716])
	*($2 + [8]) = *($2 + [32])
	$4 = CALL $2(($2 + [40]), ($2 + [8]))
	$5 = *(($0 + [8]))
	$9 = (CASTING float_64)(int_64 *($5))
	if ( ((int_64)*($3 + [168]) != (int_64)*($4)) ){ goto $label$24 }
	$10 = (float_64)0.35
	$9 = ((float_64)$9 * (float_64)(float_64)0.35)
	goto $label$21 
	
.LABEL $label$28
	$5 = *(*($0 + [24]) + [4])
	if ( ((int_32)*(($5 + [56])) == (int_32)*($5 + [52])) ){ goto $label$26 }
	$3 = *(*($0 + [28]) + [4])
	*($2 + [32]) = [18716]
	*($2 + [36]) = CALL $191([18716])
	*($2 + [24]) = *($2 + [32])
	$4 = CALL $2(($2 + [40]), ($2 + [24]))
	$5 = *(($0 + [8]))
	$9 = (CASTING float_64)(int_64 *($5))
	if ( ((int_64)*($3 + [168]) != (int_64)*($4)) ){ goto $label$23 }
	$10 = (float_64)0.35
	$9 = ((float_64)$9 * (float_64)(float_64)0.35)
	goto $label$21 
	
.LABEL $label$27
	$5 = *(*($0 + [24]) + [4])
	if ( ((int_32)*(($5 + [44])) != (int_32)*($5 + [40])) ){ goto $label$25 }
	
.LABEL $label$26
	$3 = *(*($0 + [28]) + [4])
	*($2 + [32]) = [18716]
	*($2 + [36]) = CALL $191([18716])
	*($2) = *($2 + [32])
	$4 = CALL $2(($2 + [40]), $2)
	$5 = *(($0 + [8]))
	$9 = (CASTING float_64)(int_64 *($5))
	if ( ((int_64)*($3 + [168]) != (int_64)*($4)) ){ goto $label$30 }
	$10 = (float_64)0.85
	goto $label$29 
	
.LABEL $label$30
	$10 = (float_64)0.8
	
.LABEL $label$29
	$9 = ((float_64)$9 * (float_64)$10)
	goto $label$21 
	
.LABEL $label$25
	$3 = *(*($0 + [28]) + [4])
	*($2 + [32]) = [18716]
	*($2 + [36]) = CALL $191([18716])
	*($2 + [16]) = *($2 + [32])
	$4 = CALL $2(($2 + [40]), ($2 + [16]))
	$5 = *(($0 + [8]))
	$9 = (CASTING float_64)(int_64 *($5))
	if ( ((int_64)*($3 + [168]) != (int_64)*($4)) ){ goto $label$22 }
	$10 = (float_64)0.35
	$9 = ((float_64)$9 * (float_64)(float_64)0.35)
	goto $label$21 
	
.LABEL $label$24
	$10 = (float_64)0.3
	$9 = ((float_64)$9 * (float_64)(float_64)0.3)
	goto $label$21 
	
.LABEL $label$23
	$10 = (float_64)0.3
	$9 = ((float_64)$9 * (float_64)(float_64)0.3)
	goto $label$21 
	
.LABEL $label$22
	$10 = (float_64)0.3
	$9 = ((float_64)$9 * (float_64)(float_64)0.3)
	
.LABEL $label$21
	$9 = ((float_64)$9 + (float_64)(CASTING float_64)(int_64 *($1 + [88])))
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$32 }
	$8 = (int_64)-9223372036854775808
	goto $label$31 
	
.LABEL $label$32
	$8 = (Rounds 0)($9)
	
.LABEL $label$31
	*($1 + [88]) = $8
	$10 = ((float_64)((float_64)$10 * (float_64)(CASTING float_64)(int_64 *($5))) + (float_64)(CASTING float_64)(int_64 *($1 + [104])))
	if ( ((float_64)(float_64)|$10| < (float_64)(float_64)9223372036854775808) ){ goto $label$34 }
	$8 = (int_64)-9223372036854775808
	goto $label$33 
	
.LABEL $label$34
	$8 = (Rounds 0)($10)
	
.LABEL $label$33
	*($1 + [104]) = $8
	$10 = ((float_64)((float_64)(CASTING float_64)(int_64 *($5)) * (float_64)(float_64)0.15) + (float_64)(CASTING float_64)(int_64 *($1 + [120])))
	if ( ((float_64)(float_64)|$10| < (float_64)(float_64)9223372036854775808) ){ goto $label$36 }
	$8 = (int_64)-9223372036854775808
	goto $label$35 
	
.LABEL $label$36
	$8 = (Rounds 0)($10)
	
.LABEL $label$35
	*($1 + [120]) = $8
	$global$0 = ($2 + [48])
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($3 - $2)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$1 }
	$6 = *($0 + [4])
	$4 = *($0 + [8])
	$5 = int_32($4 >> [3])
	if ( ((int_32)$5 <= (int_32)int_32(($4 - $6) >> [3])) ){ goto $label$7 }
	$7 = *($0)
	$6 = (int_32(($6 - $7) >> [3]) + $5)
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$3 }
	$5 = ($4 - $7)
	if ( ((uint_32)int_32($5 >> [3]) >= (uint_32)[268435455]) ){ goto $label$6 }
	$4 = int_32(($1 - $7) >> [3])
	$7 = int_32($5 >> [2])
	$6 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ($6 <= [536870912]) ){ goto $label$5 }
	CALL abort()
	
.LABEL $label$7
	$8 = ($6 - $1)
	$4 = int_32($8 >> [3])
	if ( ((int_32)$5 <= (int_32)$4) ){ goto $label$9 }
	$7 = $6
	$9 = ($2 + ($4 << [3]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$10 }
	$10 = (($3 + [-8]) - $9)
	$4 = $6
	$7 = $9
	
.LOOP $label$11:
	*($4) = *($7)
	$4 = ($4 + [8])
	$7 = ($7 + [8])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$11 }
	$7 = (($6 + ($10 & [-8])) + [8])
	*(($0 + [4])) = $7
	
.LABEL $label$10
	if ( ((int_32)$8 >= (int_32)[1]) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	$7 = $6
	$9 = $3
	
.LABEL $label$8
	$4 = ($5 << [3])
	$5 = ($7 - ($1 + $4))
	$8 = int_32($5 >> [3])
	$4 = ($7 - $4)
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$12 }
	$10 = uint_32((($6 - ($8 << [3])) + ((int_32)$1 ^ (int_32)[-1])) >> [3])
	$3 = $7
	
.LOOP $label$13:
	*($3) = *($4)
	$3 = ($3 + [8])
	$4 = ($4 + [8])
	if ( ($4 <= $6) ){ goto $label$13 }
	*(($0 + [4])) = (($7 + ($10 << [3])) + [8])
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$14 }
	CALL memmove(($7 - ($8 << [3])), $1, $5)
	
.LABEL $label$14
	$4 = ($9 - $2)
	if ( ($4 == 0) ){ goto $label$1 }
	CALL memmove($1, $2, $4)
	return $1
	
.LABEL $label$6
	$4 = int_32(($1 - $7) >> [3])
	$6 = [536870911]
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	$7 = ($5 + ($4 << [3]))
	$4 = $7
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$15 }
	$9 = uint_32((($3 + [-8]) - $2) >> [3])
	$4 = $7
	
.LOOP $label$16:
	*($4) = *($2)
	$4 = ($4 + [8])
	$2 = ($2 + [8])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$16 }
	$4 = (($7 + ($9 << [3])) + [8])
	
.LABEL $label$15
	$6 = ($6 << [3])
	$9 = *($0)
	$2 = ($1 - $9)
	$3 = ($7 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$17 }
	CALL memcpy($3, $9, $2)
	
.LABEL $label$17
	$6 = ($5 + $6)
	$5 = ($0 + [4])
	$2 = (*($5) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($4, $1, $2)
	$4 = ($4 + $2)
	
.LABEL $label$18
	*($5) = $4
	$2 = *($0)
	*($0) = $3
	*(($0 + [8])) = $6
	if ( ($2 == 0) ){ goto $label$19 }
	CALL _ZdlPv($2)
	
.LABEL $label$19
	$1 = $7
	
.LABEL $label$1
	(unreachable)
	(unreachable)
	return $1
}

void .FUNC $131 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$6 = ($global$0 - [80])
	$global$0 = $6
	*($6 + [72]) = $4
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [8483])
	$7 = (*($2 + [4]) - *($2))
	*($6 + [68]) = int_32($7 >> [3])
	$8 = [0]
	if ( ((uint_64)((int_64)*($5) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $4
	$8 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$10 = ($9 + [1])
	$9 = $10
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [19544])
	CALL eosio_assert(((int_64)*($5) > (int_64)0), [19561])
	$1 = *($0)
	CALL prints([19592])
	CALL printn($1)
	$9 = *($3)
	if ( ($9 & [1]) ){ goto $label$7 }
	$9 = uint_32($9 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$9 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$9 == (int_32)[3]), [19605])
	CALL eosio_assert(((int_32)$7 > (int_32)[0]), [19630])
	*(($6 + [56])) = [0]
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	$1 = *($0)
	*($6 + [24]) = $1
	*($6 + [32]) = $1
	$9 = *($2)
	$11 = ($2 + [4])
	if ( ((int_32)*($11) == (int_32)$9) ){ goto $label$8 }
	$12 = (($6 + [24]) + [8])
	$13 = ($6 + [12])
	$14 = ($6 + [16])
	$15 = ($6 + [48])
	$16 = ($6 + [52])
	$7 = [0]
	$8 = [0]
	$17 = [0]
	
.LOOP $label$9:
	$1 = *(($9 + ($17 << [3])))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$11 }
	
.LOOP $label$13:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$12 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($10 + [264]) == (int_32)($6 + [24])), [8799])
	goto $label$10 
	
.LABEL $label$11
	$10 = [0]
	$9 = CALL db_find_i64(*($6 + [24]), *($12), (int_64)-6030912129794572288, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$10 = CALL $31(($6 + [24]), $9)
	CALL eosio_assert(((int_32)*($10 + [264]) == (int_32)($6 + [24])), [8799])
	
.LABEL $label$10
	$1 = *($0)
	*($13) = $3
	*($14) = $0
	*($6) = $5
	*(($6 + [8])) = ($6 + [72])
	*($6 + [4]) = ($6 + [68])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [17903])
	CALL $132(($6 + [24]), $10, $1, $6)
	$9 = *($2)
	$17 = ($17 + [1])
	if ( ((uint_32)$17 >= (uint_32)int_32((*($11) - $9) >> [3])) ){ goto $label$14 }
	$7 = *($15)
	$8 = *($16)
	goto $label$9 
	
.LABEL $label$14
	$10 = *($6 + [48])
	if ( ($10 == 0) ){ goto $label$8 }
	$7 = ($6 + [52])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$16 }
	
.LOOP $label$17:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	CALL $33($8)
	CALL _ZdlPv($8)
	
.LABEL $label$18
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$17 }
	$9 = *(($6 + [48]))
	goto $label$15 
	
.LABEL $label$16
	$9 = $10
	
.LABEL $label$15
	*($7) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$8
	$global$0 = ($6 + [80])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1)
	CALL $133($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18035])
	*(($3 = $4)) = [0]
	CALL $87($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $88($3, $1)
	CALL db_update_i64(*($1 + [268]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	float_64 $4
	float_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [160])
	$global$0 = $2
	$4 = (CASTING float_64)(int_32 *(*($0 + [4])))
	$3 = *($0)
	$5 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.5) / (float_64)$4) + (float_64)(CASTING float_64)(int_64 *($1 + [16])))
	if ( ((float_64)(float_64)|$5| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$6 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$6 = (Rounds 0)($5)
	
.LABEL $label$1
	*($1 + [16]) = $6
	$4 = ((float_64)((float_64)((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.5) / (float_64)$4) + (float_64)(CASTING float_64)(int_64 *($1 + [248])))
	if ( ((float_64)(float_64)|$4| < (float_64)(float_64)9223372036854775808) ){ goto $label$4 }
	$6 = (int_64)-9223372036854775808
	goto $label$3 
	
.LABEL $label$4
	$6 = (Rounds 0)($4)
	
.LABEL $label$3
	*($1 + [248]) = $6
	$7 = *($0 + [8])
	$8 = *($0 + [16])
	$9 = ($1 + [120])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)*(($1 + [124]))) ){ goto $label$6 }
	*($9) = ($3 + [8])
	*($3) = *($7)
	goto $label$5 
	
.LABEL $label$6
	CALL $96(($1 + [116]), $7)
	
.LABEL $label$5
	$7 = *($0 + [12])
	$3 = ($1 + [132])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)*(($1 + [136]))) ){ goto $label$8 }
	CALL $149($9, $7)
	*($3) = (*($3) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $72(($1 + [128]), $7)
	
.LABEL $label$7
	$4 = ((float_64)((float_64)(CASTING float_64)(int_64 *(*($0))) * (float_64)(float_64)0.5) / (float_64)(CASTING float_64)(int_32 *(*(($0 + [4])))))
	if ( ((float_64)(float_64)|$4| < (float_64)(float_64)9223372036854775808) ){ goto $label$10 }
	$10 = (int_64)-9223372036854775808
	goto $label$9 
	
.LABEL $label$10
	$10 = (Rounds 0)($4)
	
.LABEL $label$9
	$3 = CALL $191([8545])
	if ( ($3 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [8632])
	goto $label$13 
	
.LABEL $label$14
	if ( ($3 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$6 = (int_64)0
	
.LOOP $label$15:
	$7 = *(($3 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$16
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$15 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$11 
	
.LABEL $label$12
	$6 = (int_64)0
	
.LABEL $label$11
	$11 = ($1 + [152])
	*($2 + [48]) = ((int_64)$6 | (int_64)4)
	*($2 + [40]) = $10
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$10 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$6 = $10
	$7 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$6 = $10
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $7 ){ goto $label$21 }
	$7 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$7 = [0]
	
.LABEL $label$17
	CALL eosio_assert($7, [8779])
	$3 = ($1 + [156])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [160]))) ){ goto $label$23 }
	*($7) = *($2 + [40])
	*(($7 + [8])) = *((($2 + [40]) + [8]))
	*($3) = (*($3) + [16])
	goto $label$22 
	
.LABEL $label$23
	CALL $134($11, ($2 + [40]))
	
.LABEL $label$22
	$6 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [40]) = $6
	$7 = ($1 + [144])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [148]))) ){ goto $label$25 }
	*($3) = $6
	*($7) = ($3 + [8])
	goto $label$24 
	
.LABEL $label$25
	CALL $110(($1 + [140]), ($2 + [40]))
	
.LABEL $label$24
	$6 = *($8)
	*($2 + [104]) = [19102]
	*($2 + [108]) = CALL $191([19102])
	*($2 + [16]) = *($2 + [104])
	*($2 + [96]) = *(CALL $2(($2 + [40]), ($2 + [16])))
	*($2 + [88]) = $6
	*($2 + [104]) = [8210]
	*($2 + [108]) = CALL $191([8210])
	*($2 + [8]) = *($2 + [104])
	$12 = *(CALL $2(($2 + [40]), ($2 + [8])))
	*($2 + [104]) = [8192]
	*($2 + [108]) = CALL $191([8192])
	*($2) = *($2 + [104])
	$13 = *(CALL $2(($2 + [40]), $2))
	$4 = ((float_64)((float_64)(CASTING float_64)(int_64 *(*($0))) * (float_64)(float_64)0.5) / (float_64)(CASTING float_64)(int_32 *(*(($0 + [4])))))
	if ( ((float_64)(float_64)|$4| < (float_64)(float_64)9223372036854775808) ){ goto $label$27 }
	$14 = (int_64)-9223372036854775808
	goto $label$26 
	
.LABEL $label$27
	$14 = (Rounds 0)($4)
	
.LABEL $label$26
	$3 = CALL $191([8545])
	if ( ($3 <= [8]) ){ goto $label$31 }
	CALL eosio_assert([0], [8632])
	goto $label$30 
	
.LABEL $label$31
	if ( ($3 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$6 = (int_64)0
	
.LOOP $label$32:
	$7 = *(($3 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$33 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$33
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$32 }
	$15 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$28 
	
.LABEL $label$29
	$15 = (int_64)4
	
.LABEL $label$28
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$6 = (uint_64)$15 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$10 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$37 }
	$6 = $10
	$7 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = $10
	
.LOOP $label$38:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$35 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $7 ){ goto $label$38 }
	$7 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	
.LABEL $label$34
	CALL eosio_assert($7, [8779])
	*(($2 + [32])) = [0]
	*($2 + [24]) = (int_64)0
	$3 = CALL $191([18716])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$40 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$43 }
	*($2 + [24]) = ($3 << [1])
	$7 = (($2 + [24]) | [1])
	if ( $3 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$9 = (($3 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($2 + [24]) = ($9 | [1])
	*($2 + [32]) = $7
	*($2 + [28]) = $3
	
.LABEL $label$42
	CALL memcpy($7, [18716], $3)
	
.LABEL $label$41
	*(($7 + $3)) = [0]
	$6 = *($8)
	*(($2 + [64])) = $15
	$3 = ($2 + [32])
	*(($2 + [80])) = *($3)
	*($3) = [0]
	*($2 + [40]) = $6
	*($2 + [48]) = *($1)
	*($2 + [56]) = $14
	*($2 + [72]) = *($2 + [24])
	*($2 + [24]) = (int_64)0
	$3 = CALL $119(($2 + [104]), ($2 + [88]), $12, $13, ($2 + [40]))
	CALL $113(($2 + [144]), $3)
	$7 = *($2 + [144])
	CALL send_inline($7, (*($2 + [148]) - $7))
	$7 = *($2 + [144])
	if ( ($7 == 0) ){ goto $label$44 }
	*($2 + [148]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$44
	$7 = *($3 + [28])
	if ( ($7 == 0) ){ goto $label$45 }
	*(($3 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$45
	$7 = *($3 + [16])
	if ( ($7 == 0) ){ goto $label$46 }
	*(($3 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$46
	if ( (*(($2 + [72])) & [1]) ){ goto $label$48 }
	if ( (*($2 + [24]) & [1]) ){ goto $label$47 }
	goto $label$39 
	
.LABEL $label$48
	CALL _ZdlPv(*(($2 + [80])))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$39 }
	
.LABEL $label$47
	CALL _ZdlPv(*(($2 + [32])))
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$40
	CALL $148(($2 + [24]))
	
.LABEL $label$39
	$global$0 = ($2 + [160])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [192])
	$global$0 = $2
	$3 = *($0 + [16])
	$4 = *(*(*($0) + [4]) + [16])
	if ( ((int_64)*($1 + [8]) != (int_64)$4) ){ goto $label$28 }
	$4 = ((int_64)*(*($0 + [4])) + (int_64)-1)
	if ( ((uint_64)$4 > (uint_64)(int_64)3) ){ goto $label$7 }
	goto $label$29 
	
.LABEL $label$29
	$3 = *($0 + [8])
	$5 = ($1 + [32])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)*(($1 + [36]))) ){ goto $label$13 }
	*($5) = ($0 + [8])
	*($0) = *($3)
	$global$0 = ($2 + [192])
	return (CASTING uint_32)(uint_64 $4)
	
.LABEL $label$28
	*(($1 + [8])) = $4
	$5 = *($1 + [28])
	*(($1 + [32])) = $5
	$6 = *($1 + [40])
	*(($1 + [44])) = $6
	$7 = *($1 + [52])
	*(($1 + [56])) = $7
	$8 = *($1 + [64])
	*(($1 + [68])) = $8
	$4 = ((int_64)*(*($0 + [4])) + (int_64)-1)
	if ( ((uint_64)$4 > (uint_64)(int_64)3) ){ goto $label$7 }
	goto $label$30 
	
.LABEL $label$30
	$0 = *($0 + [8])
	if ( ((int_32)*(($1 + [36])) == (int_32)$5) ){ goto $label$12 }
	*(($1 + [32])) = ($5 + [8])
	*($5) = *($0)
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$27
	$5 = ($1 + [56])
	$5 = *($0 + [12])
	CALL $130($5, *($5 + [4]), *($1 + [52]), *($5))
	$7 = *($0 + [8])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*(($1 + [60]))) ){ goto $label$21 }
	*($5) = ($6 + [8])
	*($6) = *($7)
	goto $label$20 
	
.LABEL $label$26
	$5 = *($0 + [12])
	CALL $130($5, *($5 + [4]), $7, $7)
	$6 = *($0 + [8])
	$7 = ($1 + [56])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)*(($1 + [60]))) ){ goto $label$19 }
	*($7) = ($5 + [8])
	*($5) = *($6)
	goto $label$18 
	
.LABEL $label$25
	$5 = ($1 + [68])
	$5 = *($0 + [12])
	CALL $130($5, *($5 + [4]), *($1 + [64]), *($5))
	$7 = *($0 + [8])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*(($1 + [72]))) ){ goto $label$17 }
	*($5) = ($6 + [8])
	*($6) = *($7)
	goto $label$16 
	
.LABEL $label$24
	$5 = *($0 + [12])
	CALL $130($5, *($5 + [4]), $8, $8)
	$6 = *($0 + [8])
	$7 = ($1 + [68])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)*(($1 + [72]))) ){ goto $label$15 }
	*($7) = ($5 + [8])
	*($5) = *($6)
	goto $label$14 
	
.LABEL $label$23
	$5 = ($1 + [44])
	$5 = *($0 + [12])
	CALL $130($5, *($5 + [4]), *($1 + [40]), *($5))
	$7 = *($0 + [8])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*(($1 + [48]))) ){ goto $label$11 }
	*($5) = ($6 + [8])
	*($6) = *($7)
	goto $label$10 
	
.LABEL $label$22
	$5 = *($0 + [12])
	CALL $130($5, *($5 + [4]), $6, $6)
	$6 = *($0 + [8])
	$7 = ($1 + [44])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)*(($1 + [48]))) ){ goto $label$9 }
	*($7) = ($5 + [8])
	*($5) = *($6)
	goto $label$8 
	
.LABEL $label$21
	CALL $96(($1 + [52]), $7)
	
.LABEL $label$20
	$5 = (*(($1 + [44])) - *($1 + [40]))
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = *($3)
	*($2 + [152]) = [0]
	*($2 + [144]) = (int_64)0
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$6 }
	$5 = CALL _Znwj($5)
	*((($2 + [144]) + [8])) = ($5 + ($6 << [3]))
	*($2 + [144]) = $5
	*($2 + [148]) = $5
	$6 = *(($1 + [40]))
	$1 = (*(($1 + [44])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$31 }
	CALL memcpy($5, $6, $1)
	*($2 + [148]) = ($5 + $1)
	
.LABEL $label$31
	$1 = CALL $149(($2 + [128]), *($0 + [20]))
	CALL $131($3, $4, ($2 + [144]), $1, *(*(($0 + [8]))), (*(*($0) + [4]) + [168]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$32
	$1 = *($2 + [144])
	if ( ($1 == 0) ){ goto $label$7 }
	*($2 + [148]) = $1
	CALL _ZdlPv($1)
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$19
	CALL $96(($1 + [52]), $6)
	
.LABEL $label$18
	$5 = (*(($1 + [44])) - *(($1 + [40])))
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = *($3)
	*($2 + [56]) = [0]
	*($2 + [48]) = (int_64)0
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$5 }
	$5 = CALL _Znwj($5)
	*((($2 + [48]) + [8])) = ($5 + ($6 << [3]))
	*($2 + [48]) = $5
	*($2 + [52]) = $5
	$6 = *(($1 + [40]))
	$1 = (*(($1 + [44])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$33 }
	CALL memcpy($5, $6, $1)
	*($2 + [52]) = ($5 + $1)
	
.LABEL $label$33
	$1 = CALL $149(($2 + [32]), *($0 + [20]))
	CALL $131($3, $4, ($2 + [48]), $1, *(*(($0 + [8]))), (*(*($0) + [4]) + [168]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$34
	$1 = *($2 + [48])
	if ( ($1 == 0) ){ goto $label$7 }
	*($2 + [52]) = $1
	CALL _ZdlPv($1)
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$17
	CALL $96(($1 + [64]), $7)
	
.LABEL $label$16
	$5 = (*(($1 + [56])) - *($1 + [52]))
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = *($3)
	*($2 + [120]) = [0]
	*($2 + [112]) = (int_64)0
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$4 }
	$5 = CALL _Znwj($5)
	*((($2 + [112]) + [8])) = ($5 + ($6 << [3]))
	*($2 + [112]) = $5
	*($2 + [116]) = $5
	$6 = *(($1 + [52]))
	$1 = (*(($1 + [56])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$35 }
	CALL memcpy($5, $6, $1)
	*($2 + [116]) = ($5 + $1)
	
.LABEL $label$35
	$1 = CALL $149(($2 + [96]), *($0 + [20]))
	CALL $131($3, $4, ($2 + [112]), $1, *(*(($0 + [8]))), (*(*($0) + [4]) + [168]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$36
	$1 = *($2 + [112])
	if ( ($1 == 0) ){ goto $label$7 }
	*($2 + [116]) = $1
	CALL _ZdlPv($1)
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$15
	CALL $96(($1 + [64]), $6)
	
.LABEL $label$14
	$5 = (*(($1 + [56])) - *(($1 + [52])))
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = *($3)
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$3 }
	$5 = CALL _Znwj($5)
	*((($2 + [16]) + [8])) = ($5 + ($6 << [3]))
	*($2 + [16]) = $5
	*($2 + [20]) = $5
	$6 = *(($1 + [52]))
	$1 = (*(($1 + [56])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$37 }
	CALL memcpy($5, $6, $1)
	*($2 + [20]) = ($5 + $1)
	
.LABEL $label$37
	$1 = CALL $149($2, *($0 + [20]))
	CALL $131($3, $4, ($2 + [16]), $1, *(*(($0 + [8]))), (*(*($0) + [4]) + [168]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$38
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$7 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$13
	CALL $96(($1 + [28]), $3)
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$12
	CALL $96(($1 + [28]), $0)
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$11
	CALL $96(($1 + [40]), $7)
	
.LABEL $label$10
	$5 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = *($3)
	*($2 + [184]) = [0]
	*($2 + [176]) = (int_64)0
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	$5 = CALL _Znwj($5)
	*((($2 + [176]) + [8])) = ($5 + ($6 << [3]))
	*($2 + [176]) = $5
	*($2 + [180]) = $5
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$39 }
	CALL memcpy($5, $6, $1)
	*($2 + [180]) = ($5 + $1)
	
.LABEL $label$39
	$1 = CALL $149(($2 + [160]), *($0 + [20]))
	CALL $131($3, $4, ($2 + [176]), $1, *(*(($0 + [8]))), (*(*($0) + [4]) + [168]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$40
	$1 = *($2 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	*($2 + [180]) = $1
	CALL _ZdlPv($1)
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$9
	CALL $96(($1 + [40]), $6)
	
.LABEL $label$8
	$5 = (*(($1 + [32])) - *(($1 + [28])))
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = *($3)
	*($2 + [88]) = [0]
	*($2 + [80]) = (int_64)0
	$6 = int_32($5 >> [3])
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*((($2 + [80]) + [8])) = ($5 + ($6 << [3]))
	*($2 + [80]) = $5
	*($2 + [84]) = $5
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$41 }
	CALL memcpy($5, $6, $1)
	*($2 + [84]) = ($5 + $1)
	
.LABEL $label$41
	$1 = CALL $149(($2 + [64]), *($0 + [20]))
	CALL $131($3, $4, ($2 + [80]), $1, *(*(($0 + [8]))), (*(*($0) + [4]) + [168]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$42
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$7 }
	*($2 + [84]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($2 + [192])
	return (unreachable)
	
.LABEL $label$6
	CALL $169(($2 + [144]))
	
.LABEL $label$5
	CALL $169(($2 + [48]))
	
.LABEL $label$4
	CALL $169(($2 + [112]))
	
.LABEL $label$3
	CALL $169(($2 + [16]))
	
.LABEL $label$2
	CALL $169(($2 + [176]))
	
.LABEL $label$1
	CALL $169(($2 + [80]))
	(CASTING uint_32)(uint_64 $4)
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($1 + [8]) = *(*(*($0) + [4]) + [16])
	*($1) = *(*($0 + [4]))
	$2 = *($0 + [8])
	$3 = ($1 + [48])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)*(($1 + [52]))) ){ goto $label$2 }
	CALL $149($4, $2)
	*($3) = (*($3) + [12])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [44]), $2)
	
.LABEL $label$1
	$2 = *($0 + [12])
	$4 = ($1 + [84])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)*(($1 + [88]))) ){ goto $label$4 }
	*($4) = ($3 + [8])
	*($3) = *($2)
	goto $label$3 
	
.LABEL $label$4
	CALL $137(($1 + [80]), $2)
	
.LABEL $label$3
	$3 = *($0 + [16])
	$2 = ($1 + [72])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)*(($1 + [76]))) ){ goto $label$6 }
	*($4) = *($3)
	*(($4 + [8])) = *(($3 + [8]))
	*($2) = (*($2) + [16])
	goto $label$5 
	
.LABEL $label$6
	CALL $111(($1 + [68]), $3)
	
.LABEL $label$5
	$3 = (*(*($0) + [4]) + [168])
	$2 = ($1 + [96])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)*(($1 + [100]))) ){ goto $label$8 }
	*($4) = *($3)
	*(($4 + [8])) = *(($3 + [8]))
	*($2) = (*($2) + [16])
	goto $label$7 
	
.LABEL $label$8
	CALL $111(($1 + [92]), $3)
	
.LABEL $label$7
	$0 = *($0 + [20])
	*($1 + [16]) = *($0)
	*(($1 + [24])) = *(($0 + [8]))
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $202 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9304]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9308])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9304]) = [1]
	$2 = ($2 << [16])
	*([0] + [9308]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9308])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9308]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9304]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9304]) = [1]
	$3 = ($3 << [16])
	*([0] + [9308]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9308])
	
.LABEL $label$10
	*([0] + [9308]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $203 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $201([9312], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $200 (int_32 $0)
{
	return CALL $201([9312], $0)
}

int_32 .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $202($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8227])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $204 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17696])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17504]
	$3 = (((int_32)$1 * (int_32)[12]) + [17504])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $181 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($1 + [8]) = *(*(*($0) + [4]) + [16])
	*($1) = *(*($0 + [4]))
	$3 = *($0 + [24])
	CALL $150(($1 + [16]), *($0 + [8]))
	$4 = ((int_64)*(*($0 + [12])) + (int_64)-1)
	if ( ((uint_64)$4 > (uint_64)(int_64)3) ){ goto $label$4 }
	goto $label$15 
	
.LABEL $label$15
	$3 = *($0 + [16])
	$5 = ($1 + [32])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)*(($1 + [36]))) ){ goto $label$7 }
	*($5) = ($0 + [8])
	*($0) = *($3)
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$14
	$5 = ($1 + [56])
	$5 = *($0 + [20])
	CALL $130($5, *($5 + [4]), *($1 + [52]), *($5))
	$6 = *($0 + [16])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)*(($1 + [60]))) ){ goto $label$11 }
	*($5) = ($7 + [8])
	*($7) = *($6)
	goto $label$10 
	
.LABEL $label$13
	$5 = ($1 + [68])
	$5 = *($0 + [20])
	CALL $130($5, *($5 + [4]), *($1 + [64]), *($5))
	$6 = *($0 + [16])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)*(($1 + [72]))) ){ goto $label$9 }
	*($5) = ($7 + [8])
	*($7) = *($6)
	goto $label$8 
	
.LABEL $label$12
	$5 = ($1 + [44])
	$5 = *($0 + [20])
	CALL $130($5, *($5 + [4]), *($1 + [40]), *($5))
	$6 = *($0 + [16])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)*(($1 + [48]))) ){ goto $label$6 }
	*($5) = ($7 + [8])
	*($7) = *($6)
	goto $label$5 
	
.LABEL $label$11
	CALL $96(($1 + [52]), $6)
	
.LABEL $label$10
	$5 = (*(($1 + [44])) - *($1 + [40]))
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = *($3)
	*($2 + [56]) = [0]
	*($2 + [48]) = (int_64)0
	$7 = int_32($5 >> [3])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$5 = CALL _Znwj($5)
	*((($2 + [48]) + [8])) = ($5 + ($7 << [3]))
	*($2 + [48]) = $5
	*($2 + [52]) = $5
	$7 = *(($1 + [40]))
	$1 = (*(($1 + [44])) - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($5, $7, $1)
	*($2 + [52]) = ($5 + $1)
	
.LABEL $label$16
	$1 = CALL $149(($2 + [32]), *(($0 + [8])))
	CALL $131($3, $4, ($2 + [48]), $1, *(*(($0 + [16]))), (*(*($0) + [4]) + [168]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$17
	$0 = *($2 + [48])
	if ( ($0 == 0) ){ goto $label$4 }
	*($2 + [52]) = $0
	CALL _ZdlPv($0)
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$9
	CALL $96(($1 + [64]), $6)
	
.LABEL $label$8
	$5 = (*(($1 + [56])) - *($1 + [52]))
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = *($3)
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$7 = int_32($5 >> [3])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$2 }
	$5 = CALL _Znwj($5)
	*((($2 + [16]) + [8])) = ($5 + ($7 << [3]))
	*($2 + [16]) = $5
	*($2 + [20]) = $5
	$7 = *(($1 + [52]))
	$1 = (*(($1 + [56])) - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($5, $7, $1)
	*($2 + [20]) = ($5 + $1)
	
.LABEL $label$18
	$1 = CALL $149($2, *(($0 + [8])))
	CALL $131($3, $4, ($2 + [16]), $1, *(*(($0 + [16]))), (*(*($0) + [4]) + [168]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$19
	$0 = *($2 + [16])
	if ( ($0 == 0) ){ goto $label$4 }
	*($2 + [20]) = $0
	CALL _ZdlPv($0)
	$global$0 = ($2 + [96])
	return (unreachable)
	
.LABEL $label$7
	CALL $96(($1 + [28]), $3)
	$global$0 = ($2 + [96])
	return (unreachable)
	
.LABEL $label$6
	CALL $96(($1 + [40]), $6)
	
.LABEL $label$5
	$5 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = *($3)
	*($2 + [88]) = [0]
	*($2 + [80]) = (int_64)0
	$7 = int_32($5 >> [3])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*((($2 + [80]) + [8])) = ($5 + ($7 << [3]))
	*($2 + [80]) = $5
	*($2 + [84]) = $5
	$7 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($5, $7, $1)
	*($2 + [84]) = ($5 + $1)
	
.LABEL $label$20
	$1 = CALL $149(($2 + [64]), *(($0 + [8])))
	CALL $131($3, $4, ($2 + [80]), $1, *(*(($0 + [16]))), (*(*($0) + [4]) + [168]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$21
	$0 = *($2 + [80])
	if ( ($0 == 0) ){ goto $label$4 }
	*($2 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($2 + [96])
	return (unreachable)
	
.LABEL $label$3
	CALL $169(($2 + [48]))
	
.LABEL $label$2
	CALL $169(($2 + [16]))
	
.LABEL $label$1
	CALL $169(($2 + [80]))
	(CASTING uint_32)(uint_64 $4)
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	CALL $129(*($0 + [4]), $1)
	*(($4 = $2)) = [0]
	CALL $90($4, $1)
	$5 = *($4)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $200($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL $89($4, $1)
	$6 = *($1)
	*($1 + [128]) = CALL db_store_i64(*($3 + [8]), (int_64)4977229654197796864, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($2)
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $200($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	CALL $18($2, $0)
	$global$0 = ($2 + [16])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL $8(($3 + [48]))
	$5 = *($0)
	$4 = *($3 + [48])
	if ( ((int_64)$4 == (int_64)$5) ){ goto $label$2 }
	if ( ((int_64)*($3 + [56]) != (int_64)$5) ){ goto $label$2 }
	CALL require_auth($4)
	$6 = CALL $191([8545])
	if ( ($6 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8632])
	goto $label$5 
	
.LABEL $label$6
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = (int_64)0
	
.LOOP $label$7:
	$7 = *(($6 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$8
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$3 
	
.LABEL $label$4
	$5 = (int_64)4
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*(($3 + [72])) == (int_64)$5), [19143])
	$8 = CALL $149(($3 + [32]), ($3 + [80]))
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$6 = CALL $191([19167])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$11 }
	*($3) = ($6 << [1])
	$7 = ($3 | [1])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$9 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $6
	
.LABEL $label$10
	CALL memcpy($7, [19167], $6)
	
.LABEL $label$9
	*(($7 + $6)) = [0]
	CALL $39(($3 + [16]), $0, $8, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$12
	$6 = *($3 + [16])
	$7 = *($6)
	$9 = CALL $191([19169])
	if ( ((int_32)$9 != (int_32)( *($6 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$13 }
	if ( CALL $161($6, [0], [-1], [19169], $9) ){ goto $label$13 }
	CALL $40($0, ($3 + [48]))
	
.LABEL $label$13
	$0 = *($3 + [16])
	if ( ($0 == 0) ){ goto $label$14 }
	$7 = *($3 + [20])
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$18
	$7 = $6
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$17 }
	$6 = *($3 + [16])
	goto $label$15 
	
.LABEL $label$16
	$6 = $0
	
.LABEL $label$15
	*($3 + [20]) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$14
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$2
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$19
	$global$0 = ($3 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $148($3)
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8886])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([280])
	CALL $74($3)
	*($3 + [264]) = $1
	CALL $127(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [268])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $33($1)
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1)
	CALL $138($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18035])
	*(($3 = $4)) = [0]
	CALL $87($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $88($3, $1)
	CALL db_update_i64(*($1 + [268]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8886])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([136])
	CALL $126($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [128])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $106(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($1 + [120])))
	
.LABEL $label$4
	$3 = *($1 + [64])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($1 + [68])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($1 + [52])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($1 + [56])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *($1 + [40])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($1 + [44])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$3 = *($1 + [28])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($1 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$9
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [124]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1)
	CALL $135($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18035])
	*(($3 = $4)) = [0]
	CALL $90($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $89($3, $1)
	CALL db_update_i64(*($1 + [128]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8326])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8431])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8364])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8431])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [40 align=4]) = (int_64)0
	*($0 + [64 align=4]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [96]) = (int_64)0
	*($0 + [112 align=4]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [72])) = [0]
	*(($0 + [88])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [120])) = [0]
	$3 = ($0 + [112])
	$4 = CALL $191([18763])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($0 + [112]) = ($5 | [1])
	*(($0 + [120])) = $3
	*(($0 + [116])) = $4
	
.LABEL $label$3
	CALL memcpy($3, [18763], $4)
	
.LABEL $label$2
	*(($3 + $4)) = [0]
	*($0 + [124]) = $1
	CALL $128($2, $0)
	return $0
	
.LABEL $label$1
	CALL $148($3)
	return (unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17867])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $63(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [400]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1 + [16])
	CALL $139($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1 + [16])), [18035])
	*(($3 = $4)) = [0]
	CALL $58($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $59($3, $1)
	CALL db_update_i64(*(($1 + [404])), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [8483])
	CALL require_auth($1)
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$1 = *($0)
	*($3 + [8]) = $1
	*($3 + [16]) = $1
	$4 = CALL $19(($3 + [8]), CALL $fimport$7($1, $1, (int_64)7035937633859534848, $2))
	CALL eosio_assert(((int_32)*($4 + [400]) == (int_32)($3 + [8])), [8799])
	if ( ((int_64)*($4 + [64]) != (int_64)5) ){ goto $label$1 }
	CALL prints([18925])
	CALL $38($0, $2)
	
.LABEL $label$1
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($3 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $22($4)
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$global$0 = $3
	*($3 + [120]) = $2
	CALL require_auth($1)
	$4 = CALL $191([8545])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8632])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($4 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)0
	
.LABEL $label$1
	*($3 + [104]) = (int_64)0
	*($3 + [112]) = ((int_64)$2 | (int_64)4)
	CALL eosio_assert([1], [8730])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $6
	$5 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [8779])
	*($3 + [24]) = [8210]
	*($3 + [28]) = CALL $191([8210])
	*($3 + [8]) = *($3 + [24])
	$2 = *(CALL $2(($3 + [64]), ($3 + [8])))
	*(($3 + [96])) = [0]
	*($3 + [72]) = $1
	*($3 + [64]) = $2
	*($3 + [80]) = (int_64)-1
	$2 = (int_64)0
	*($3 + [88]) = (int_64)0
	$4 = CALL $191([8545])
	if ( ($4 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [8632])
	goto $label$13 
	
.LABEL $label$14
	if ( ($4 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$2 = (int_64)0
	
.LOOP $label$15:
	$5 = *(($4 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$16
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$15 }
	
.LABEL $label$12
	$5 = *(($3 + [92]))
	$7 = *(($3 + [88]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$28 }
	
.LOOP $label$30:
	$4 = ($5 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8 + [8]) == (int_64)$2) ){ goto $label$29 }
	$5 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$28 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($3 + [64])), [8799])
	if ( $8 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$4 = CALL db_find_i64(*($3 + [64]), *(($3 + [72])), (int_64)3607749779137757184, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*(CALL $29(($3 + [64]), $4) + [16]) == (int_32)($3 + [64])), [8799])
	
.LABEL $label$27
	$4 = CALL $191([8545])
	if ( ($4 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [8632])
	goto $label$24 
	
.LABEL $label$26
	$4 = CALL $191([8545])
	if ( ($4 <= [8]) ){ goto $label$23 }
	CALL eosio_assert([0], [8632])
	goto $label$22 
	
.LABEL $label$25
	if ( ($4 == 0) ){ goto $label$21 }
	
.LABEL $label$24
	$2 = (int_64)0
	
.LOOP $label$31:
	$5 = *(($4 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$32
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$31 }
	goto $label$18 
	
.LABEL $label$23
	if ( ($4 == 0) ){ goto $label$20 }
	
.LABEL $label$22
	$2 = (int_64)0
	
.LOOP $label$33:
	$5 = *(($4 + [8544]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$34 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$34
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$33 }
	$9 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$19 
	
.LABEL $label$21
	$2 = (int_64)0
	goto $label$18 
	
.LABEL $label$20
	$9 = (int_64)4
	
.LABEL $label$19
	CALL eosio_assert([1], [8730])
	$2 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$38 }
	$2 = $6
	$5 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$38
	$2 = $6
	
.LOOP $label$39:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$36 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $5 ){ goto $label$39 }
	$5 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	$5 = [0]
	
.LABEL $label$35
	CALL eosio_assert($5, [8779])
	*(($3 + [112])) = $9
	*($3 + [104]) = (int_64)0
	goto $label$17 
	
.LABEL $label$18
	CALL $30(($3 + [24]), $0, $1, $2)
	*((($3 + [104]) + [8])) = *((($3 + [24]) + [8]))
	*($3 + [104]) = *($3 + [24])
	
.LABEL $label$17
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$2 = *($0)
	*($3 + [24]) = $2
	*($3 + [32]) = $2
	$4 = CALL db_find_i64($2, $2, (int_64)-6030912129794572288, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$40 }
	$4 = CALL $31(($3 + [24]), $4)
	CALL eosio_assert(((int_32)*($4 + [264]) == (int_32)($3 + [24])), [8799])
	*($3 + [20]) = ($3 + [104])
	*($3 + [16]) = ($3 + [120])
	CALL eosio_assert([1], [17903])
	CALL $34(($3 + [24]), $4, $1, ($3 + [16]))
	$7 = *($3 + [48])
	if ( ($7 == 0) ){ goto $label$40 }
	$8 = ($3 + [52])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$42 }
	
.LOOP $label$43:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$44 }
	CALL $33($5)
	CALL _ZdlPv($5)
	
.LABEL $label$44
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$43 }
	$4 = *(($3 + [48]))
	goto $label$41 
	
.LABEL $label$42
	$4 = $7
	
.LABEL $label$41
	*($8) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$40
	$7 = *($3 + [88])
	if ( ($7 == 0) ){ goto $label$45 }
	$8 = ($3 + [92])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$47 }
	
.LOOP $label$48:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$49 }
	CALL _ZdlPv($5)
	
.LABEL $label$49
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$48 }
	$4 = *(($3 + [88]))
	goto $label$46 
	
.LABEL $label$47
	$4 = $7
	
.LABEL $label$46
	*($8) = $7
	CALL _ZdlPv($4)
	
.LABEL $label$45
	$global$0 = ($3 + [128])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [8483])
	CALL require_auth($1)
	CALL prints([8510])
	$5 = ((int_64)$2 + (int_64)-1)
	CALL printui($5)
	if ( ((int_32)$3 != (int_32)[5]) ){ goto $label$1 }
	CALL prints([8523])
	CALL printui($2)
	$3 = CALL $191([8545])
	if ( ($3 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [8632])
	goto $label$4 
	
.LABEL $label$5
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = *(($3 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$6 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$2 
	
.LABEL $label$3
	$6 = (int_64)0
	
.LABEL $label$2
	*($4 + [64]) = (int_64)0
	*($4 + [72]) = ((int_64)$6 | (int_64)4)
	CALL eosio_assert([1], [8730])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$6 = $8
	$7 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$6 = $8
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [8779])
	$3 = [0]
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$6 = *($0)
	*($4 + [24]) = $6
	*($4 + [32]) = $6
	$7 = CALL db_find_i64($6, $6, (int_64)7035937633859534848, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	$3 = CALL $19(($4 + [24]), $7)
	CALL eosio_assert(((int_32)*($3 + [400]) == (int_32)($4 + [24])), [8799])
	
.LABEL $label$13
	CALL prints([8552])
	$7 = ($3 + [88])
	CALL $20($7)
	if ( ($3 == 0) ){ goto $label$29 }
	if ( ((int_32)*(($3 + [232])) != (int_32)*($3 + [228])) ){ goto $label$28 }
	if ( ((int_64)*($3 + [16]) == (int_64)0) ){ goto $label$23 }
	*((($4 + [64]) + [8])) = *(($7 + [8]))
	*($4 + [64]) = *($7)
	goto $label$14 
	
.LABEL $label$29
	$3 = CALL $191([8545])
	if ( ($3 <= [8]) ){ goto $label$27 }
	CALL eosio_assert([0], [8632])
	goto $label$26 
	
.LABEL $label$28
	$3 = CALL $191([8545])
	if ( ($3 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [8632])
	goto $label$24 
	
.LABEL $label$27
	if ( ($3 == 0) ){ goto $label$22 }
	
.LABEL $label$26
	$6 = (int_64)0
	
.LOOP $label$30:
	$7 = *(($3 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$31 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$31
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$30 }
	$5 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$15 
	
.LABEL $label$25
	if ( ($3 == 0) ){ goto $label$21 }
	
.LABEL $label$24
	$6 = (int_64)0
	
.LOOP $label$32:
	$7 = *(($3 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$33 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$33
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$32 }
	$5 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$16 
	
.LABEL $label$23
	$3 = CALL $191([8545])
	if ( ($3 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [8632])
	goto $label$19 
	
.LABEL $label$22
	$5 = (int_64)4
	goto $label$15 
	
.LABEL $label$21
	$5 = (int_64)4
	goto $label$16 
	
.LABEL $label$20
	if ( ($3 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$6 = (int_64)0
	
.LOOP $label$34:
	$7 = *(($3 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$35 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$35
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$34 }
	$5 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$17 
	
.LABEL $label$18
	$5 = (int_64)4
	
.LABEL $label$17
	CALL eosio_assert([1], [8730])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$39 }
	$6 = $8
	$7 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$39
	$6 = $8
	
.LOOP $label$40:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$37 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $7 ){ goto $label$40 }
	$7 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$7 = [0]
	
.LABEL $label$36
	CALL eosio_assert($7, [8779])
	*(($4 + [72])) = $5
	*($4 + [64]) = (int_64)1000000
	goto $label$14 
	
.LABEL $label$16
	CALL eosio_assert([1], [8730])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$6 = $8
	$7 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$6 = $8
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $7 ){ goto $label$45 }
	$7 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$7 = [0]
	
.LABEL $label$41
	CALL eosio_assert($7, [8779])
	*(($4 + [72])) = $5
	*($4 + [64]) = (int_64)0
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert([1], [8730])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$6 = $8
	$7 = [1]
	$9 = $3
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	$6 = $8
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$9 = ($3 + [1])
	$3 = $9
	if ( $7 ){ goto $label$50 }
	$7 = [1]
	$3 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$7 = [0]
	
.LABEL $label$46
	CALL eosio_assert($7, [8779])
	*(($4 + [72])) = $5
	*($4 + [64]) = (int_64)0
	
.LABEL $label$14
	$7 = *(($4 + [52]))
	$0 = *(($4 + [48]))
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$52 }
	
.LOOP $label$54:
	$3 = ($7 + [-24])
	$9 = *($3)
	if ( ((int_64)*($9 + [16]) == (int_64)$2) ){ goto $label$53 }
	$7 = $3
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$52 }
	CALL eosio_assert(((int_32)*($9 + [400]) == (int_32)($4 + [24])), [8799])
	goto $label$51 
	
.LABEL $label$52
	$9 = [0]
	$3 = CALL db_find_i64(*($4 + [24]), *(($4 + [32])), (int_64)7035937633859534848, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$51 }
	$9 = CALL $19(($4 + [24]), $3)
	CALL eosio_assert(((int_32)*($9 + [400]) == (int_32)($4 + [24])), [8799])
	
.LABEL $label$51
	CALL eosio_assert(($9 == 0), [8574])
	CALL prints([8594])
	CALL printi((int_64)5)
	CALL prints([8614])
	*($4 + [20]) = ($4 + [64])
	*($4 + [16]) = ($4 + [24])
	CALL $21(($4 + [8]), ($4 + [24]), $1, ($4 + [16]))
	$9 = *($4 + [48])
	if ( ($9 == 0) ){ goto $label$1 }
	$0 = ($4 + [52])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$56 }
	
.LOOP $label$57:
	$3 = ($3 + [-24])
	$7 = *($3)
	*($3) = [0]
	if ( ($7 == 0) ){ goto $label$58 }
	CALL $22($7)
	CALL _ZdlPv($7)
	
.LABEL $label$58
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$57 }
	$3 = *(($4 + [48]))
	goto $label$55 
	
.LABEL $label$56
	$3 = $9
	
.LABEL $label$55
	*($0) = $9
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $200($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [56]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8873])
	CALL memcpy(($4 + [40]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8873])
	CALL memcpy((($4 + [40]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[16]), [8873])
	CALL memcpy((($4 + [40]) + [16]), ($2 + [16]), [4])
	*((($4 + [8]) + [20])) = ($2 + [20])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [56])
	$0 = *($4 + [48])
	$1 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $204($2)
	
.LABEL $label$5
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $200($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8873])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8873])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $204($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [8483])
	CALL require_auth($1)
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$1 = *($0)
	*($3) = $1
	*($3 + [8]) = $1
	$0 = [0]
	$4 = CALL db_find_i64($1, $1, (int_64)7035937633859534848, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $19($3, $4)
	CALL eosio_assert(((int_32)*($0 + [400]) == (int_32)$3), [8799])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [18188])
	CALL eosio_assert($4, [18217])
	CALL eosio_assert($4, [18251])
	$4 = CALL db_next_i64(*($0 + [404]), ($3 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $19($3, $4)
	
.LABEL $label$2
	CALL $27($3, $0)
	$5 = *($3 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $22($4)
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = CALL $25(($4 + [104]))
	CALL sha256($3, [12], ($4 + [64]))
	$6 = *($5 + [28])
	$7 = int_32((*(($5 + [32])) - $6) >> [3])
	$8 = *($5 + [24])
	$9 = *($5)
	$3 = [0]
	
.LOOP $label$1:
	$9 = ((int_64)((int_64)((int_64)*(($6 + (((uint_32)($8 + $3) % (uint_32)$7) << [3]))) * (int_64)*((($4 + [64]) + $3))) ^ (int_64)$9) + (int_64)-7046029254386353131)
	$9 = ((int_64)((int_64)(uint_64)$9 >> (uint_64)(int_64)30) ^ (int_64)$9) * (int_64)-4658895280553007687
	$9 = ((int_64)((int_64)(uint_64)$9) >> (uint_64)(int_64)27) ^ (int_64)$9
	$9 = ((int_64)(uint_64)$9 * (int_64)-7723592293110705685)
	*($5) = $9 >> (uint_64)(int_64)31) ^ (int_64)$9))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	*(($5 + [24])) = ($8 + [32])
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [8483])
	CALL require_auth($1)
	*((($4 + [16]) + [32])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$9 = *($0)
	*($4 + [16]) = $9
	*($4 + [24]) = $9
	$3 = [0]
	$8 = CALL db_find_i64($9, $9, (int_64)7035937633859534848, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $19(($4 + [16]), $8)
	CALL eosio_assert(((int_32)*($3 + [400]) == (int_32)($4 + [16])), [8799])
	
.LABEL $label$2
	$8 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($8, [17873])
	$9 = *($0)
	*($4 + [12]) = $5
	*($4 + [8]) = ($4 + [60])
	CALL eosio_assert($8, [17903])
	CALL $26(($4 + [16]), $3, $9, ($4 + [8]))
	$6 = *($4 + [40])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($4 + [44])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$8 = *($3)
	*($3) = [0]
	if ( ($8 == 0) ){ goto $label$7 }
	CALL $22($8)
	CALL _ZdlPv($8)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($4 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$3 = *($5 + [28])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($5 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [144])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $200($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8873])
	CALL memcpy(($4 + [72]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8873])
	CALL memcpy((($4 + [72]) + [8]), ($2 + [8]), [8])
	*($4 + [60]) = ($2 + [16])
	CALL $23(($4 + [56]), (($4 + [72]) + [16]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $24(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $204($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

int_64 .FUNC $185 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $184($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $170()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $184($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19777]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $183($0, (int_64)0)
	*(CALL $170()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $184($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $184($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $184($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $184($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19777])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $184($0)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $184($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8201]))
	$8 = (int_64)0
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $184($0)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $184($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $183($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19777]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19777]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $184($0) + [19777]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $170()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $170()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $170()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8873])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8873])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $23($0, ($1 + [32]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8850])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $200($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([416])
	$6 = CALL $41($5)
	*($5 + [400]) = $0
	CALL $44(($3 + [32]), $6)
	*($5 + [404]) = $1
	*($3 + [24]) = $5
	$7 = *($5 + [16])
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $22($1)
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $184 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $182($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $187 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $186 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $183($3, (int_64)0)
	$4 = CALL $185($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $180 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$4 = (int_64)0
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$4 = (int_64)0
	
.LOOP $label$7:
	$4 = (int_64))(((int_64)$4 * (int_64)10) - (CASTING int_64)(int_32 $1))
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $4 ? (int_64))((int_64)0 - $4) : $2 )
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_64 $37
	int_64 $38
	int_64 $39
	int_64 $40
	int_64 $41
	int_64 $42
	$2 = ($global$0 - [128])
	$global$0 = $2
	$4 = *($1 + [44])
	$3 = ($1 + [48])
	if ( ((int_32)*($3) == (int_32)$4) ){ goto $label$1 }
	$5 = *($0 + [8])
	$6 = ($1 + [152])
	$7 = ($1 + [140])
	$8 = ($1 + [128])
	$9 = ($1 + [116])
	$10 = ($1 + [56])
	$11 = ($2 + [84])
	$12 = (($2 + [24]) + [16])
	$13 = ($1 + [24])
	$14 = ($0 + [4])
	$15 = ($1 + [256])
	$16 = ($1 + [248])
	$17 = ($1 + [64])
	$18 = ($1 + [60])
	$19 = ($1 + [124])
	$20 = ($1 + [120])
	$21 = ($1 + [136])
	$22 = ($1 + [132])
	$23 = ($1 + [148])
	$24 = ($1 + [144])
	$25 = ($1 + [160])
	$26 = ($1 + [156])
	$27 = ($2 + [92])
	$28 = ($2 + [76])
	$29 = ($1 + [44])
	$30 = [0]
	
.LOOP $label$2:
	$31 = *($0)
	$4 = ($4 + ((int_32)$30 * (int_32)[12]))
	$32 = *($4)
	if ( ($32 & [1]) ){ goto $label$4 }
	$32 = uint_32($32 >> [1])
	$33 = ($4 + [1])
	goto $label$3 
	
.LABEL $label$4
	$32 = *($4 + [4])
	$33 = *($4 + [8])
	
.LABEL $label$3
	$34 = ($4 & [1])
	$4 = *($31)
	$4 = ( *($31 + [4]) ? uint_32($4 >> [1]) : $34 )
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((int_32)$32 < (int_32)$4) ){ goto $label$5 }
	$35 = ($33 + $32)
	$36 = ( *($31 + [8]) ? ($31 + [1]) : $34 )
	$34 = *($36)
	$31 = $33
	
.LOOP $label$7:
	$32 = (($32 - $4) + [1])
	if ( ($32 == 0) ){ goto $label$5 }
	$32 = CALL $187($31, $34, $32)
	if ( ($32 == 0) ){ goto $label$5 }
	if ( (CALL $188($32, $36, $4) == 0) ){ goto $label$8 }
	$31 = ($32 + [1])
	$32 = ($35 - $31)
	if ( ((int_32)$32 >= (int_32)$4) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	if ( ((int_32)$32 == (int_32)$35) ){ goto $label$5 }
	if ( ((int_32)($32 - $33) == (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$6
	$32 = *($14)
	CALL eosio_assert(((int_64)*($32 + [8]) == (int_64)*($13)), [19022])
	$37 = ((int_64)*($4) + (int_64)*($32))
	*(($4 = ($1 + [16]))) = $37
	CALL eosio_assert(((int_64)$37 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [19084])
	$4 = *($14)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*($15)), [19022])
	$37 = ((int_64)*($16) + (int_64)*($4))
	*($16) = $37
	CALL eosio_assert(((int_64)$37 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($16) < (int_64)4611686018427387904), [19084])
	$4 = *($0)
	$32 = *($18)
	if ( ((int_32)$32 == (int_32)*($17)) ){ goto $label$12 }
	CALL $149($32, $4)
	*($18) = (*($18) + [12])
	$4 = *($20)
	if ( ((int_32)$4 == (int_32)*($19)) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $72($10, $4)
	$4 = *($20)
	if ( ((int_32)$4 != (int_32)*($19)) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $96($9, $5)
	goto $label$9 
	
.LABEL $label$10
	*($20) = ($4 + [8])
	*($4) = *($5)
	
.LABEL $label$9
	$4 = *($0)
	$32 = *($22)
	if ( ((int_32)$32 == (int_32)*($21)) ){ goto $label$14 }
	CALL $149($32, $4)
	*($22) = (*($22) + [12])
	goto $label$13 
	
.LABEL $label$14
	CALL $72($8, $4)
	
.LABEL $label$13
	$37 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [56]) = $37
	$4 = *($24)
	if ( ((uint_32)$4 >= (uint_32)*($23)) ){ goto $label$16 }
	*($4) = $37
	*($24) = ($4 + [8])
	goto $label$15 
	
.LABEL $label$16
	CALL $110($7, ($2 + [56]))
	
.LABEL $label$15
	$4 = *($14)
	$32 = *($26)
	if ( ((int_32)$32 == (int_32)*($25)) ){ goto $label$18 }
	*($32) = *($4)
	*(($32 + [8])) = *(($4 + [8]))
	*($26) = (*($26) + [16])
	goto $label$17 
	
.LABEL $label$18
	CALL $111($6, $4)
	
.LABEL $label$17
	$37 = *($5)
	*($2 + [96]) = [19102]
	*($2 + [100]) = CALL $191([19102])
	*($2 + [16]) = *($2 + [96])
	CALL $2(($2 + [24]), ($2 + [16]))
	$38 = *($2 + [24])
	*($2 + [96]) = [19108]
	*($2 + [100]) = CALL $191([19108])
	*($2 + [8]) = *($2 + [96])
	CALL $2(($2 + [24]), ($2 + [8]))
	$39 = *($2 + [24])
	*($2 + [96]) = [19121]
	*($2 + [100]) = CALL $191([19121])
	*($2) = *($2 + [96])
	CALL $2(($2 + [24]), $2)
	$40 = *($2 + [24])
	*((($2 + [24]) + [8])) = *($1)
	*($2 + [24]) = *($5)
	$4 = *($14)
	$41 = *($4)
	$42 = *(($4 + [8]))
	*((($2 + [56]) + [8])) = $40
	*(($32 = (($2 + [56]) + [16]))) = (int_64)0
	*(($31 = (($2 + [56]) + [24]))) = [0]
	*(($12 + [8])) = $42
	*($12) = $41
	*($2 + [56]) = $39
	$4 = CALL _Znwj([16])
	*($32) = $4
	*($4) = $37
	*($4 + [8]) = $38
	*($11) = (int_64)0
	*($27) = [0]
	$4 = ($4 + [16])
	*($31) = $4
	*($28) = $4
	CALL $56($11, [32])
	$4 = *($11)
	$31 = (($2 + [56]) + [32])
	*((($2 + [96]) + [8])) = *($31)
	*($2 + [100]) = $4
	*($2 + [96]) = $4
	*($2 + [112]) = ($2 + [96])
	*($2 + [120]) = ($2 + [24])
	CALL $112(($2 + [120]), ($2 + [112]))
	CALL $113(($2 + [96]), ($2 + [56]))
	$4 = *($2 + [96])
	CALL send_inline($4, (*($2 + [100]) - $4))
	$4 = *($2 + [96])
	if ( ($4 == 0) ){ goto $label$19 }
	*($2 + [100]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$4 = *($11)
	if ( ($4 == 0) ){ goto $label$20 }
	*($31) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$20
	$4 = *($32)
	if ( ($4 == 0) ){ goto $label$5 }
	*($28) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($29)
	$30 = ($30 + [1])
	if ( ($30 <= ((int_32)(*($3) - $4) / (int_32)[12])) ){ goto $label$2 }
	$4 = *($1 + [56])
	CALL prints([19134])
	$32 = *($4)
	$31 = ($32 & [1])
	CALL prints_l(( *($4 + [8]) ? ($4 + [1]) : $31 ), ( *($4 + [4]) ? uint_32($32 >> [1]) : $31 ))
	
.LABEL $label$1
	$global$0 = ($2 + [128])
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_64 $37
	int_64 $38
	int_64 $39
	int_64 $40
	int_64 $41
	int_64 $42
	$2 = ($global$0 - [128])
	$global$0 = $2
	$4 = *($1 + [44])
	$3 = ($1 + [48])
	if ( ((int_32)*($3) == (int_32)$4) ){ goto $label$1 }
	$5 = *($0 + [8])
	$6 = ($1 + [152])
	$7 = ($1 + [140])
	$8 = ($1 + [128])
	$9 = ($1 + [116])
	$10 = ($1 + [56])
	$11 = ($2 + [84])
	$12 = (($2 + [24]) + [16])
	$13 = ($1 + [24])
	$14 = ($0 + [4])
	$15 = ($1 + [256])
	$16 = ($1 + [248])
	$17 = ($1 + [64])
	$18 = ($1 + [60])
	$19 = ($1 + [124])
	$20 = ($1 + [120])
	$21 = ($1 + [136])
	$22 = ($1 + [132])
	$23 = ($1 + [148])
	$24 = ($1 + [144])
	$25 = ($1 + [160])
	$26 = ($1 + [156])
	$27 = ($2 + [92])
	$28 = ($2 + [76])
	$29 = ($1 + [44])
	$30 = [0]
	
.LOOP $label$2:
	$31 = *($0)
	$4 = ($4 + ((int_32)$30 * (int_32)[12]))
	$32 = *($4)
	if ( ($32 & [1]) ){ goto $label$4 }
	$32 = uint_32($32 >> [1])
	$33 = ($4 + [1])
	goto $label$3 
	
.LABEL $label$4
	$32 = *($4 + [4])
	$33 = *($4 + [8])
	
.LABEL $label$3
	$34 = ($4 & [1])
	$4 = *($31)
	$4 = ( *($31 + [4]) ? uint_32($4 >> [1]) : $34 )
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((int_32)$32 < (int_32)$4) ){ goto $label$5 }
	$35 = ($33 + $32)
	$36 = ( *($31 + [8]) ? ($31 + [1]) : $34 )
	$34 = *($36)
	$31 = $33
	
.LOOP $label$7:
	$32 = (($32 - $4) + [1])
	if ( ($32 == 0) ){ goto $label$5 }
	$32 = CALL $187($31, $34, $32)
	if ( ($32 == 0) ){ goto $label$5 }
	if ( (CALL $188($32, $36, $4) == 0) ){ goto $label$8 }
	$31 = ($32 + [1])
	$32 = ($35 - $31)
	if ( ((int_32)$32 >= (int_32)$4) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	if ( ((int_32)$32 == (int_32)$35) ){ goto $label$5 }
	if ( ((int_32)($32 - $33) == (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$6
	$32 = *($14)
	CALL eosio_assert(((int_64)*($32 + [8]) == (int_64)*($13)), [19022])
	$37 = ((int_64)*($4) + (int_64)*($32))
	*(($4 = ($1 + [16]))) = $37
	CALL eosio_assert(((int_64)$37 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [19084])
	$4 = *($14)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*($15)), [19022])
	$37 = ((int_64)*($16) + (int_64)*($4))
	*($16) = $37
	CALL eosio_assert(((int_64)$37 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($16) < (int_64)4611686018427387904), [19084])
	$4 = *($0)
	$32 = *($18)
	if ( ((int_32)$32 == (int_32)*($17)) ){ goto $label$12 }
	CALL $149($32, $4)
	*($18) = (*($18) + [12])
	$4 = *($20)
	if ( ((int_32)$4 == (int_32)*($19)) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $72($10, $4)
	$4 = *($20)
	if ( ((int_32)$4 != (int_32)*($19)) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $96($9, $5)
	goto $label$9 
	
.LABEL $label$10
	*($20) = ($4 + [8])
	*($4) = *($5)
	
.LABEL $label$9
	$4 = *($0)
	$32 = *($22)
	if ( ((int_32)$32 == (int_32)*($21)) ){ goto $label$14 }
	CALL $149($32, $4)
	*($22) = (*($22) + [12])
	goto $label$13 
	
.LABEL $label$14
	CALL $72($8, $4)
	
.LABEL $label$13
	$37 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [56]) = $37
	$4 = *($24)
	if ( ((uint_32)$4 >= (uint_32)*($23)) ){ goto $label$16 }
	*($4) = $37
	*($24) = ($4 + [8])
	goto $label$15 
	
.LABEL $label$16
	CALL $110($7, ($2 + [56]))
	
.LABEL $label$15
	$4 = *($14)
	$32 = *($26)
	if ( ((int_32)$32 == (int_32)*($25)) ){ goto $label$18 }
	*($32) = *($4)
	*(($32 + [8])) = *(($4 + [8]))
	*($26) = (*($26) + [16])
	goto $label$17 
	
.LABEL $label$18
	CALL $111($6, $4)
	
.LABEL $label$17
	$37 = *($5)
	*($2 + [96]) = [19102]
	*($2 + [100]) = CALL $191([19102])
	*($2 + [16]) = *($2 + [96])
	CALL $2(($2 + [24]), ($2 + [16]))
	$38 = *($2 + [24])
	*($2 + [96]) = [19108]
	*($2 + [100]) = CALL $191([19108])
	*($2 + [8]) = *($2 + [96])
	CALL $2(($2 + [24]), ($2 + [8]))
	$39 = *($2 + [24])
	*($2 + [96]) = [19121]
	*($2 + [100]) = CALL $191([19121])
	*($2) = *($2 + [96])
	CALL $2(($2 + [24]), $2)
	$40 = *($2 + [24])
	*((($2 + [24]) + [8])) = *($1)
	*($2 + [24]) = *($5)
	$4 = *($14)
	$41 = *($4)
	$42 = *(($4 + [8]))
	*((($2 + [56]) + [8])) = $40
	*(($32 = (($2 + [56]) + [16]))) = (int_64)0
	*(($31 = (($2 + [56]) + [24]))) = [0]
	*(($12 + [8])) = $42
	*($12) = $41
	*($2 + [56]) = $39
	$4 = CALL _Znwj([16])
	*($32) = $4
	*($4) = $37
	*($4 + [8]) = $38
	*($11) = (int_64)0
	*($27) = [0]
	$4 = ($4 + [16])
	*($31) = $4
	*($28) = $4
	CALL $56($11, [32])
	$4 = *($11)
	$31 = (($2 + [56]) + [32])
	*((($2 + [96]) + [8])) = *($31)
	*($2 + [100]) = $4
	*($2 + [96]) = $4
	*($2 + [112]) = ($2 + [96])
	*($2 + [120]) = ($2 + [24])
	CALL $112(($2 + [120]), ($2 + [112]))
	CALL $113(($2 + [96]), ($2 + [56]))
	$4 = *($2 + [96])
	CALL send_inline($4, (*($2 + [100]) - $4))
	$4 = *($2 + [96])
	if ( ($4 == 0) ){ goto $label$19 }
	*($2 + [100]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$4 = *($11)
	if ( ($4 == 0) ){ goto $label$20 }
	*($31) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$20
	$4 = *($32)
	if ( ($4 == 0) ){ goto $label$5 }
	*($28) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($29)
	$30 = ($30 + [1])
	if ( ($30 <= ((int_32)(*($3) - $4) / (int_32)[12])) ){ goto $label$2 }
	$4 = *($1 + [56])
	CALL prints([19134])
	$32 = *($4)
	$31 = ($32 & [1])
	CALL prints_l(( *($4 + [8]) ? ($4 + [1]) : $31 ), ( *($4 + [4]) ? uint_32($32 >> [1]) : $31 ))
	
.LABEL $label$1
	$global$0 = ($2 + [128])
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17867])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17867])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17867])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17867])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17867])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17867])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [17867])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $56($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17867])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17867])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $115(CALL $114($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $169($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_64 $37
	int_64 $38
	int_64 $39
	int_64 $40
	int_64 $41
	int_64 $42
	$2 = ($global$0 - [128])
	$global$0 = $2
	$4 = *($1 + [44])
	$3 = ($1 + [48])
	if ( ((int_32)*($3) == (int_32)$4) ){ goto $label$1 }
	$5 = *($0 + [8])
	$6 = ($1 + [152])
	$7 = ($1 + [140])
	$8 = ($1 + [128])
	$9 = ($1 + [116])
	$10 = ($1 + [56])
	$11 = ($2 + [84])
	$12 = (($2 + [24]) + [16])
	$13 = ($1 + [24])
	$14 = ($0 + [4])
	$15 = ($1 + [256])
	$16 = ($1 + [248])
	$17 = ($1 + [64])
	$18 = ($1 + [60])
	$19 = ($1 + [124])
	$20 = ($1 + [120])
	$21 = ($1 + [136])
	$22 = ($1 + [132])
	$23 = ($1 + [148])
	$24 = ($1 + [144])
	$25 = ($1 + [160])
	$26 = ($1 + [156])
	$27 = ($2 + [92])
	$28 = ($2 + [76])
	$29 = ($1 + [44])
	$30 = [0]
	
.LOOP $label$2:
	$31 = *($0)
	$4 = ($4 + ((int_32)$30 * (int_32)[12]))
	$32 = *($4)
	if ( ($32 & [1]) ){ goto $label$4 }
	$32 = uint_32($32 >> [1])
	$33 = ($4 + [1])
	goto $label$3 
	
.LABEL $label$4
	$32 = *($4 + [4])
	$33 = *($4 + [8])
	
.LABEL $label$3
	$34 = ($4 & [1])
	$4 = *($31)
	$4 = ( *($31 + [4]) ? uint_32($4 >> [1]) : $34 )
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((int_32)$32 < (int_32)$4) ){ goto $label$5 }
	$35 = ($33 + $32)
	$36 = ( *($31 + [8]) ? ($31 + [1]) : $34 )
	$34 = *($36)
	$31 = $33
	
.LOOP $label$7:
	$32 = (($32 - $4) + [1])
	if ( ($32 == 0) ){ goto $label$5 }
	$32 = CALL $187($31, $34, $32)
	if ( ($32 == 0) ){ goto $label$5 }
	if ( (CALL $188($32, $36, $4) == 0) ){ goto $label$8 }
	$31 = ($32 + [1])
	$32 = ($35 - $31)
	if ( ((int_32)$32 >= (int_32)$4) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	if ( ((int_32)$32 == (int_32)$35) ){ goto $label$5 }
	if ( ((int_32)($32 - $33) == (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$6
	$32 = *($14)
	CALL eosio_assert(((int_64)*($32 + [8]) == (int_64)*($13)), [19022])
	$37 = ((int_64)*($4) + (int_64)*($32))
	*(($4 = ($1 + [16]))) = $37
	CALL eosio_assert(((int_64)$37 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [19084])
	$4 = *($14)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*($15)), [19022])
	$37 = ((int_64)*($16) + (int_64)*($4))
	*($16) = $37
	CALL eosio_assert(((int_64)$37 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($16) < (int_64)4611686018427387904), [19084])
	$4 = *($0)
	$32 = *($18)
	if ( ((int_32)$32 == (int_32)*($17)) ){ goto $label$12 }
	CALL $149($32, $4)
	*($18) = (*($18) + [12])
	$4 = *($20)
	if ( ((int_32)$4 == (int_32)*($19)) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $72($10, $4)
	$4 = *($20)
	if ( ((int_32)$4 != (int_32)*($19)) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $96($9, $5)
	goto $label$9 
	
.LABEL $label$10
	*($20) = ($4 + [8])
	*($4) = *($5)
	
.LABEL $label$9
	$4 = *($0)
	$32 = *($22)
	if ( ((int_32)$32 == (int_32)*($21)) ){ goto $label$14 }
	CALL $149($32, $4)
	*($22) = (*($22) + [12])
	goto $label$13 
	
.LABEL $label$14
	CALL $72($8, $4)
	
.LABEL $label$13
	$37 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [56]) = $37
	$4 = *($24)
	if ( ((uint_32)$4 >= (uint_32)*($23)) ){ goto $label$16 }
	*($4) = $37
	*($24) = ($4 + [8])
	goto $label$15 
	
.LABEL $label$16
	CALL $110($7, ($2 + [56]))
	
.LABEL $label$15
	$4 = *($14)
	$32 = *($26)
	if ( ((int_32)$32 == (int_32)*($25)) ){ goto $label$18 }
	*($32) = *($4)
	*(($32 + [8])) = *(($4 + [8]))
	*($26) = (*($26) + [16])
	goto $label$17 
	
.LABEL $label$18
	CALL $111($6, $4)
	
.LABEL $label$17
	$37 = *($5)
	*($2 + [96]) = [19102]
	*($2 + [100]) = CALL $191([19102])
	*($2 + [16]) = *($2 + [96])
	CALL $2(($2 + [24]), ($2 + [16]))
	$38 = *($2 + [24])
	*($2 + [96]) = [19108]
	*($2 + [100]) = CALL $191([19108])
	*($2 + [8]) = *($2 + [96])
	CALL $2(($2 + [24]), ($2 + [8]))
	$39 = *($2 + [24])
	*($2 + [96]) = [19121]
	*($2 + [100]) = CALL $191([19121])
	*($2) = *($2 + [96])
	CALL $2(($2 + [24]), $2)
	$40 = *($2 + [24])
	*((($2 + [24]) + [8])) = *($1)
	*($2 + [24]) = *($5)
	$4 = *($14)
	$41 = *($4)
	$42 = *(($4 + [8]))
	*((($2 + [56]) + [8])) = $40
	*(($32 = (($2 + [56]) + [16]))) = (int_64)0
	*(($31 = (($2 + [56]) + [24]))) = [0]
	*(($12 + [8])) = $42
	*($12) = $41
	*($2 + [56]) = $39
	$4 = CALL _Znwj([16])
	*($32) = $4
	*($4) = $37
	*($4 + [8]) = $38
	*($11) = (int_64)0
	*($27) = [0]
	$4 = ($4 + [16])
	*($31) = $4
	*($28) = $4
	CALL $56($11, [32])
	$4 = *($11)
	$31 = (($2 + [56]) + [32])
	*((($2 + [96]) + [8])) = *($31)
	*($2 + [100]) = $4
	*($2 + [96]) = $4
	*($2 + [112]) = ($2 + [96])
	*($2 + [120]) = ($2 + [24])
	CALL $112(($2 + [120]), ($2 + [112]))
	CALL $113(($2 + [96]), ($2 + [56]))
	$4 = *($2 + [96])
	CALL send_inline($4, (*($2 + [100]) - $4))
	$4 = *($2 + [96])
	if ( ($4 == 0) ){ goto $label$19 }
	*($2 + [100]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$4 = *($11)
	if ( ($4 == 0) ){ goto $label$20 }
	*($31) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$20
	$4 = *($32)
	if ( ($4 == 0) ){ goto $label$5 }
	*($28) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($29)
	$30 = ($30 + [1])
	if ( ($30 <= ((int_32)(*($3) - $4) / (int_32)[12])) ){ goto $label$2 }
	$4 = *($1 + [56])
	CALL prints([19134])
	$32 = *($4)
	$31 = ($32 & [1])
	CALL prints_l(( *($4 + [8]) ? ($4 + [1]) : $31 ), ( *($4 + [4]) ? uint_32($32 >> [1]) : $31 ))
	
.LABEL $label$1
	$global$0 = ($2 + [128])
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $56($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $125(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8850])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $200($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8873])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8873])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	*($3 + [24]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [400]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1 + [16])
	CALL $71($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1 + [16])), [18035])
	*(($3 = $4)) = [0]
	CALL $58($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $59($3, $1)
	CALL db_update_i64(*(($1 + [404])), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8886])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([416])
	CALL $41($3)
	*($3 + [400]) = $1
	CALL $42(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3 + [16])
	*($4 + [16]) = $2
	$5 = *($3 + [404])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $43(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $22($1)
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = *($0 + [8])
	$4 = (CASTING uint_32)(uint_64 $3)
	$5 = ((int_64)$3 & (int_64)255)
	$6 = (int_64)($5 == 0)
	if ( $6 ){ goto $label$2 }
	$3 = ((int_64)$5 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$3:
	$7 = ((int_64)$7 * (int_64)10)
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)1
	
.LABEL $label$1
	$4 = ($4 & [255])
	$8 = ($1 - (($4 + [16]) & [496]))
	$global$0 = $8
	*(($1 = ($8 + $4))) = [0]
	$9 = *($0)
	if ( $6 ){ goto $label$4 }
	$5 = ((int_64)$5 + (int_64)1)
	$3 = ((int_64)$9 % (int_64)$7)
	$1 = ($1 + [-1])
	
.LOOP $label$5:
	$10 = ((int_64)$3 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$10 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$3 = $10
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$9 / (int_64)$7))
	CALL prints([8882])
	CALL prints_l($8, $4)
	CALL prints([8884])
	$3 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$6 }
	$1 = [0]
	
.LOOP $label$8:
	*((($2 + [9]) + $1)) = $3
	$0 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$7 }
	$1 = $0
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	CALL prints_l(($2 + [9]), $0)
	
.LABEL $label$6
	$global$0 = ($2 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $55($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $152($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $152($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $148($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [324])
	if ( ($1 == 0) ){ goto $label$1 }
	*(($0 + [328])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$1 = *($0 + [312])
	if ( ($1 == 0) ){ goto $label$2 }
	*(($0 + [316])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$1 = *($0 + [300])
	if ( ($1 == 0) ){ goto $label$3 }
	*(($0 + [304])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($0 + [288])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($0 + [292])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($0 + [276])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($0 + [280])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($0 + [264])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($0 + [268])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$2 = *($0 + [252])
	if ( ($2 == 0) ){ goto $label$7 }
	$3 = ($0 + [256])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$11
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$10 }
	$1 = *(($0 + [252]))
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$1 = *($0 + [240])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($0 + [244])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$1 = *($0 + [228])
	if ( ($1 == 0) ){ goto $label$13 }
	*(($0 + [232])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$1 = *($0 + [216])
	if ( ($1 == 0) ){ goto $label$14 }
	*(($0 + [220])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$1 = *($0 + [200])
	if ( ($1 == 0) ){ goto $label$15 }
	*(($0 + [204])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$2 = *($0 + [48])
	if ( ($2 == 0) ){ goto $label$16 }
	$3 = ($0 + [52])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$18 }
	
.LOOP $label$19:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$20
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$19 }
	$1 = *(($0 + [48]))
	goto $label$17 
	
.LABEL $label$18
	$1 = $2
	
.LABEL $label$17
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$2 = *($0 + [36])
	if ( ($2 == 0) ){ goto $label$21 }
	$3 = ($0 + [40])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$23 }
	
.LOOP $label$24:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$25
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$24 }
	$1 = *(($0 + [36]))
	goto $label$22 
	
.LABEL $label$23
	$1 = $2
	
.LABEL $label$22
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$21
	$2 = *($0 + [24])
	if ( ($2 == 0) ){ goto $label$26 }
	$3 = ($0 + [28])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$28 }
	
.LOOP $label$29:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$30
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$29 }
	$1 = *(($0 + [24]))
	goto $label$27 
	
.LABEL $label$28
	$1 = $2
	
.LABEL $label$27
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$26
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$31 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$33 }
	
.LOOP $label$34:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$35
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$34 }
	$1 = *($0)
	goto $label$32 
	
.LABEL $label$33
	$1 = $2
	
.LABEL $label$32
	*(($0 + [4])) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$31
	return $0
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)1
	*($0 + [24]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($1 = ($0 + [32]))) = (int_64)0
	$2 = CALL _Znwj([800])
	*($0 + [28]) = $2
	*($1) = $2
	*($2) = (int_64)7211
	*($2 + [8]) = (int_64)7213
	*($2 + [16]) = (int_64)7219
	*($2 + [24]) = (int_64)7229
	*($2 + [32]) = (int_64)7237
	*($2 + [40]) = (int_64)7243
	*($2 + [48]) = (int_64)7247
	*($2 + [56]) = (int_64)7253
	*($2 + [64]) = (int_64)7283
	*($2 + [72]) = (int_64)7297
	*($2 + [80]) = (int_64)7307
	*($2 + [88]) = (int_64)7309
	*($2 + [96]) = (int_64)7321
	*($2 + [104]) = (int_64)7331
	*($2 + [112]) = (int_64)7333
	*($2 + [120]) = (int_64)7349
	$3 = ($2 + [800])
	*(($0 + [36])) = $3
	*($2 + [136]) = (int_64)7369
	*($2 + [128]) = (int_64)7351
	*($2 + [144]) = (int_64)7393
	*($2 + [152]) = (int_64)7411
	*($2 + [160]) = (int_64)7417
	*($2 + [168]) = (int_64)7433
	*($2 + [176]) = (int_64)7451
	*($2 + [184]) = (int_64)7457
	*($2 + [192]) = (int_64)7459
	*($2 + [200]) = (int_64)7477
	*($2 + [208]) = (int_64)7481
	*($2 + [216]) = (int_64)7487
	*($2 + [224]) = (int_64)7489
	*($2 + [232]) = (int_64)7499
	*($2 + [240]) = (int_64)7507
	*($2 + [248]) = (int_64)7517
	*($2 + [256]) = (int_64)7523
	*($2 + [264]) = (int_64)7529
	*($2 + [272]) = (int_64)7537
	*($2 + [288]) = (int_64)7547
	*($2 + [280]) = (int_64)7541
	*($2 + [296]) = (int_64)7549
	*($2 + [304]) = (int_64)7559
	*($2 + [312]) = (int_64)7561
	*($2 + [320]) = (int_64)7573
	*($2 + [328]) = (int_64)7577
	*($2 + [336]) = (int_64)7583
	*($2 + [344]) = (int_64)7589
	*($2 + [352]) = (int_64)7591
	*($2 + [360]) = (int_64)7603
	*($2 + [368]) = (int_64)7607
	*($2 + [376]) = (int_64)7621
	*($2 + [384]) = (int_64)7639
	*($2 + [392]) = (int_64)7643
	*($2 + [400]) = (int_64)7649
	*($2 + [408]) = (int_64)7669
	*($2 + [416]) = (int_64)7673
	*($2 + [424]) = (int_64)7681
	*($2 + [440]) = (int_64)7691
	*($2 + [432]) = (int_64)7687
	*($2 + [448]) = (int_64)7699
	*($2 + [456]) = (int_64)7703
	*($2 + [464]) = (int_64)7717
	*($2 + [472]) = (int_64)7723
	*($2 + [480]) = (int_64)7727
	*($2 + [488]) = (int_64)7741
	*($2 + [496]) = (int_64)7753
	*($2 + [504]) = (int_64)7757
	*($2 + [512]) = (int_64)7759
	*($2 + [520]) = (int_64)7789
	*($2 + [528]) = (int_64)7793
	*($2 + [536]) = (int_64)7817
	*($2 + [544]) = (int_64)7823
	*($2 + [552]) = (int_64)7829
	*($2 + [560]) = (int_64)7841
	*($2 + [568]) = (int_64)7853
	*($2 + [576]) = (int_64)7867
	*($2 + [592]) = (int_64)7877
	*($2 + [584]) = (int_64)7873
	*($2 + [600]) = (int_64)7879
	*($2 + [608]) = (int_64)7883
	*($2 + [616]) = (int_64)7901
	*($2 + [624]) = (int_64)7907
	*($2 + [632]) = (int_64)7919
	*($2 + [640]) = (int_64)7927
	*($2 + [648]) = (int_64)7933
	*($2 + [656]) = (int_64)7937
	*($2 + [664]) = (int_64)7949
	*($2 + [672]) = (int_64)7951
	*($2 + [680]) = (int_64)7963
	*($2 + [688]) = (int_64)7993
	*($2 + [696]) = (int_64)8009
	*($2 + [704]) = (int_64)8011
	*($2 + [712]) = (int_64)8017
	*($2 + [720]) = (int_64)8039
	*($2 + [728]) = (int_64)8053
	*($2 + [744]) = (int_64)8069
	*($2 + [736]) = (int_64)8059
	*($2 + [752]) = (int_64)8081
	*($2 + [760]) = (int_64)8087
	*($2 + [768]) = (int_64)8089
	*($2 + [776]) = (int_64)8093
	*($2 + [784]) = (int_64)8101
	*($2 + [792]) = (int_64)8111
	*($1) = $3
	$4 = CALL $178(CALL $fimport$20())
	$5 = CALL $178(CALL $fimport$21())
	$1 = int_32((*($1) - $2) >> [3])
	$3 = *($0 + [24])
	$2 = *($0 + [28])
	$6 = ((int_64)((int_64)((int_64)*(($2 + (((uint_32)$3 % (uint_32)$1) << [3]))) * (int_64)(CASTING int_64)(int_32 $4)) ^ (int_64)*($0)) + (int_64)-7046029254386353131)
	$6 = ((int_64)((int_64)(uint_64)$6 >> (uint_64)(int_64)30) ^ (int_64)$6) * (int_64)-4658895280553007687
	$6 = ((int_64)((int_64)(uint_64)$6) >> (uint_64)(int_64)27) ^ (int_64)$6
	$6 = ((int_64)(uint_64)$6 * (int_64)-7723592293110705685)
	*($0) = $6 >> (uint_64)(int_64)31) ^ (int_64)$6))
	*($0 + [24]) = ($3 + [2])
	$6 = ((int_64)((int_64)((int_64)*(($2 + (((uint_32)($3 + [1]) % (uint_32)$1) << [3]))) * (int_64)(CASTING int_64)(int_32 $5)) ^ (int_64)$6) + (int_64)-7046029254386353131)
	$6 = ((int_64)((int_64)(uint_64)$6 >> (uint_64)(int_64)30) ^ (int_64)$6) * (int_64)-4658895280553007687
	$6 = ((int_64)((int_64)(uint_64)$6) >> (uint_64)(int_64)27) ^ (int_64)$6
	*($0) = ((int_64)(uint_64)$6 * (int_64)-7723592293110705685)) >> (uint_64)(int_64)31) ^ (int_64)$6)
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $149($2, ($1 + [16]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $149(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_64 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [400]) == (int_32)$0), [18281])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [18326])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [16])
	if ( ((int_64)*(*(($5 + [-24])) + [16]) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8) + [16]) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18376])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL $22($3)
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $22($5)
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [404])))
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [400]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1 + [16])
	CALL $69($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1 + [16])), [18035])
	*(($3 = $4)) = [0]
	CALL $58($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $59($3, $1)
	CALL db_update_i64(*(($1 + [404])), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1)
	CALL $116($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18035])
	*(($3 = $4)) = [0]
	CALL $87($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $88($3, $1)
	CALL db_update_i64(*($1 + [268]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1)
	CALL $109($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18035])
	*(($3 = $4)) = [0]
	CALL $87($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $88($3, $1)
	CALL db_update_i64(*($1 + [268]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1)
	CALL $118($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18035])
	*(($3 = $4)) = [0]
	CALL $87($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $88($3, $1)
	CALL db_update_i64(*($1 + [268]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1)
	CALL $117($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18035])
	*(($3 = $4)) = [0]
	CALL $87($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $88($3, $1)
	CALL db_update_i64(*($1 + [268]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [40 align=4]) = (int_64)0
	*($0 + [64 align=4]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [96]) = (int_64)0
	*($0 + [112 align=4]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [72])) = [0]
	*(($0 + [88])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [120])) = [0]
	$3 = ($0 + [112])
	$4 = CALL $191([18763])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($5)
	*($0 + [112]) = ($5 | [1])
	*(($0 + [120])) = $3
	*(($0 + [116])) = $4
	
.LABEL $label$3
	CALL memcpy($3, [18763], $4)
	
.LABEL $label$2
	*(($3 + $4)) = [0]
	*($0 + [124]) = $1
	CALL $80(*($2 + [4]), $0)
	*($0 + [128]) = *(*($2 + [8]))
	return $0
	
.LABEL $label$1
	CALL $148($3)
	return (unreachable)
}

int_32 .FUNC $104 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ((*($1 + [112]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($1 + [120])))
	
.LABEL $label$2
	$2 = *($1 + [64])
	if ( ($2 == 0) ){ goto $label$3 }
	*(($1 + [68])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$2 = *($1 + [52])
	if ( ($2 == 0) ){ goto $label$4 }
	*(($1 + [56])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$2 = *($1 + [40])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($1 + [44])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = *($1 + [28])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($1 + [32])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = ($1 + [228])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	CALL $108($2, *($3), *($3 + [4]))
	
.LABEL $label$1
	*($1 + [88]) = *(*($0 + [4]))
	$3 = *(*($0 + [8]) + [4])
	$4 = ($3 + [28])
	$2 = ($1 + [288])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$2 }
	CALL $108($2, *($4), *(($3 + [32])))
	$3 = *(*(($0 + [8])) + [4])
	
.LABEL $label$2
	$4 = ($3 + [40])
	$2 = ($1 + [300])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$3 }
	CALL $108($2, *($4), *(($3 + [44])))
	$3 = *(*(($0 + [8])) + [4])
	
.LABEL $label$3
	$4 = ($3 + [52])
	$2 = ($1 + [312])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$4 }
	CALL $108($2, *($4), *(($3 + [56])))
	$3 = *(*(($0 + [8])) + [4])
	
.LABEL $label$4
	$4 = ($3 + [64])
	$2 = ($1 + [324])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	CALL $108($2, *($4), *(($3 + [68])))
	
.LABEL $label$5
	$3 = *($0 + [12])
	*($1 + [336]) = *($3)
	*(($1 + [344])) = *(($3 + [8]))
	$3 = *($0 + [16])
	*($1 + [352]) = *($3)
	*(($1 + [360])) = *(($3 + [8]))
	$3 = *($0 + [20])
	*($1 + [368]) = *($3)
	*(($1 + [376])) = *(($3 + [8]))
	$0 = *($0 + [24])
	*($1 + [384]) = *($0)
	*(($1 + [392])) = *(($0 + [8]))
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $169($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$2 = *($4)
	*($4) = [0]
	*($1) = $2
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	$1 = ($3 + [-24])
	
.LOOP $label$9:
	$7 = CALL $104($1)
	$1 = ($1 + [-24])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_64 $37
	int_64 $38
	int_64 $39
	int_64 $40
	int_64 $41
	int_64 $42
	$2 = ($global$0 - [128])
	$global$0 = $2
	$4 = *($1 + [44])
	$3 = ($1 + [48])
	if ( ((int_32)*($3) == (int_32)$4) ){ goto $label$1 }
	$5 = *($0 + [8])
	$6 = ($1 + [152])
	$7 = ($1 + [140])
	$8 = ($1 + [128])
	$9 = ($1 + [116])
	$10 = ($1 + [56])
	$11 = ($2 + [84])
	$12 = (($2 + [24]) + [16])
	$13 = ($1 + [24])
	$14 = ($0 + [4])
	$15 = ($1 + [256])
	$16 = ($1 + [248])
	$17 = ($1 + [64])
	$18 = ($1 + [60])
	$19 = ($1 + [124])
	$20 = ($1 + [120])
	$21 = ($1 + [136])
	$22 = ($1 + [132])
	$23 = ($1 + [148])
	$24 = ($1 + [144])
	$25 = ($1 + [160])
	$26 = ($1 + [156])
	$27 = ($2 + [92])
	$28 = ($2 + [76])
	$29 = ($1 + [44])
	$30 = [0]
	
.LOOP $label$2:
	$31 = *($0)
	$4 = ($4 + ((int_32)$30 * (int_32)[12]))
	$32 = *($4)
	if ( ($32 & [1]) ){ goto $label$4 }
	$32 = uint_32($32 >> [1])
	$33 = ($4 + [1])
	goto $label$3 
	
.LABEL $label$4
	$32 = *($4 + [4])
	$33 = *($4 + [8])
	
.LABEL $label$3
	$34 = ($4 & [1])
	$4 = *($31)
	$4 = ( *($31 + [4]) ? uint_32($4 >> [1]) : $34 )
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((int_32)$32 < (int_32)$4) ){ goto $label$5 }
	$35 = ($33 + $32)
	$36 = ( *($31 + [8]) ? ($31 + [1]) : $34 )
	$34 = *($36)
	$31 = $33
	
.LOOP $label$7:
	$32 = (($32 - $4) + [1])
	if ( ($32 == 0) ){ goto $label$5 }
	$32 = CALL $187($31, $34, $32)
	if ( ($32 == 0) ){ goto $label$5 }
	if ( (CALL $188($32, $36, $4) == 0) ){ goto $label$8 }
	$31 = ($32 + [1])
	$32 = ($35 - $31)
	if ( ((int_32)$32 >= (int_32)$4) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	if ( ((int_32)$32 == (int_32)$35) ){ goto $label$5 }
	if ( ((int_32)($32 - $33) == (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$6
	$32 = *($14)
	CALL eosio_assert(((int_64)*($32 + [8]) == (int_64)*($13)), [19022])
	$37 = ((int_64)*($4) + (int_64)*($32))
	*(($4 = ($1 + [16]))) = $37
	CALL eosio_assert(((int_64)$37 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [19084])
	$4 = *($14)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*($15)), [19022])
	$37 = ((int_64)*($16) + (int_64)*($4))
	*($16) = $37
	CALL eosio_assert(((int_64)$37 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($16) < (int_64)4611686018427387904), [19084])
	$4 = *($0)
	$32 = *($18)
	if ( ((int_32)$32 == (int_32)*($17)) ){ goto $label$12 }
	CALL $149($32, $4)
	*($18) = (*($18) + [12])
	$4 = *($20)
	if ( ((int_32)$4 == (int_32)*($19)) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $72($10, $4)
	$4 = *($20)
	if ( ((int_32)$4 != (int_32)*($19)) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $96($9, $5)
	goto $label$9 
	
.LABEL $label$10
	*($20) = ($4 + [8])
	*($4) = *($5)
	
.LABEL $label$9
	$4 = *($0)
	$32 = *($22)
	if ( ((int_32)$32 == (int_32)*($21)) ){ goto $label$14 }
	CALL $149($32, $4)
	*($22) = (*($22) + [12])
	goto $label$13 
	
.LABEL $label$14
	CALL $72($8, $4)
	
.LABEL $label$13
	$37 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [56]) = $37
	$4 = *($24)
	if ( ((uint_32)$4 >= (uint_32)*($23)) ){ goto $label$16 }
	*($4) = $37
	*($24) = ($4 + [8])
	goto $label$15 
	
.LABEL $label$16
	CALL $110($7, ($2 + [56]))
	
.LABEL $label$15
	$4 = *($14)
	$32 = *($26)
	if ( ((int_32)$32 == (int_32)*($25)) ){ goto $label$18 }
	*($32) = *($4)
	*(($32 + [8])) = *(($4 + [8]))
	*($26) = (*($26) + [16])
	goto $label$17 
	
.LABEL $label$18
	CALL $111($6, $4)
	
.LABEL $label$17
	$37 = *($5)
	*($2 + [96]) = [19102]
	*($2 + [100]) = CALL $191([19102])
	*($2 + [16]) = *($2 + [96])
	CALL $2(($2 + [24]), ($2 + [16]))
	$38 = *($2 + [24])
	*($2 + [96]) = [19108]
	*($2 + [100]) = CALL $191([19108])
	*($2 + [8]) = *($2 + [96])
	CALL $2(($2 + [24]), ($2 + [8]))
	$39 = *($2 + [24])
	*($2 + [96]) = [19121]
	*($2 + [100]) = CALL $191([19121])
	*($2) = *($2 + [96])
	CALL $2(($2 + [24]), $2)
	$40 = *($2 + [24])
	*((($2 + [24]) + [8])) = *($1)
	*($2 + [24]) = *($5)
	$4 = *($14)
	$41 = *($4)
	$42 = *(($4 + [8]))
	*((($2 + [56]) + [8])) = $40
	*(($32 = (($2 + [56]) + [16]))) = (int_64)0
	*(($31 = (($2 + [56]) + [24]))) = [0]
	*(($12 + [8])) = $42
	*($12) = $41
	*($2 + [56]) = $39
	$4 = CALL _Znwj([16])
	*($32) = $4
	*($4) = $37
	*($4 + [8]) = $38
	*($11) = (int_64)0
	*($27) = [0]
	$4 = ($4 + [16])
	*($31) = $4
	*($28) = $4
	CALL $56($11, [32])
	$4 = *($11)
	$31 = (($2 + [56]) + [32])
	*((($2 + [96]) + [8])) = *($31)
	*($2 + [100]) = $4
	*($2 + [96]) = $4
	*($2 + [112]) = ($2 + [96])
	*($2 + [120]) = ($2 + [24])
	CALL $112(($2 + [120]), ($2 + [112]))
	CALL $113(($2 + [96]), ($2 + [56]))
	$4 = *($2 + [96])
	CALL send_inline($4, (*($2 + [100]) - $4))
	$4 = *($2 + [96])
	if ( ($4 == 0) ){ goto $label$19 }
	*($2 + [100]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$4 = *($11)
	if ( ($4 == 0) ){ goto $label$20 }
	*($31) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$20
	$4 = *($32)
	if ( ($4 == 0) ){ goto $label$5 }
	*($28) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($29)
	$30 = ($30 + [1])
	if ( ($30 <= ((int_32)(*($3) - $4) / (int_32)[12])) ){ goto $label$2 }
	$4 = *($1 + [56])
	CALL prints([19134])
	$32 = *($4)
	$31 = ($32 & [1])
	CALL prints_l(( *($4 + [8]) ? ($4 + [1]) : $31 ), ( *($4 + [4]) ? uint_32($32 >> [1]) : $31 ))
	
.LABEL $label$1
	$global$0 = ($2 + [128])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $169($0)
}

void .FUNC $38 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = [0]
	*($2 + [264]) = [0]
	*($2 + [256]) = (int_64)0
	*($2 + [248]) = [0]
	*($2 + [240]) = (int_64)0
	*(($2 + [232])) = [0]
	*($2 + [216]) = (int_64)-1
	*($2 + [224]) = (int_64)0
	$4 = *($0)
	*($2 + [200]) = $4
	*($2 + [208]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)7035937633859534848, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $19(($2 + [200]), $5)
	CALL eosio_assert(((int_32)*($3 + [400]) == (int_32)($2 + [200])), [8799])
	
.LABEL $label$1
	$7 = *($3 + [200])
	$6 = ($3 + [204])
	if ( ((int_32)*($6) == (int_32)$7) ){ goto $label$2 }
	$8 = (($2 + [160]) | [1])
	$5 = [0]
	$9 = ($2 + [168])
	$10 = ($3 + [200])
	$11 = [0]
	
.LOOP $label$3:
	CALL $165(($2 + [160]), *(($7 + $5)))
	$7 = *($2 + [160])
	$12 = ($7 & [1])
	CALL $156(($2 + [240]), ( *($9) ? $8 : $12 ), ( *($2 + [164]) ? uint_32($7 >> [1]) : $12 ))
	if ( ((*($2 + [160]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$4
	$5 = ($5 + [4])
	$7 = *($10)
	$11 = ($11 + [1])
	if ( ($11 <= int_32((*($6) - $7) >> [2])) ){ goto $label$3 }
	
.LABEL $label$2
	*(($2 + [192])) = [0]
	*($2 + [176]) = (int_64)-1
	*($2 + [184]) = (int_64)0
	$4 = *($0)
	*($2 + [160]) = $4
	*($2 + [168]) = $4
	*((($2 + [112]) + [8])) = [0]
	*($2 + [112]) = (int_64)0
	$11 = ( *((($2 + [240]) + [8])) ? (($2 + [240]) | [1]) : (*($2 + [240]) & [1]) )
	$5 = CALL $191($11)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$15 }
	*($2 + [112]) = ($5 << [1])
	$7 = (($2 + [112]) | [1])
	if ( $5 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$12 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($12)
	*($2 + [112]) = ($12 | [1])
	*($2 + [120]) = $7
	*($2 + [116]) = $5
	
.LABEL $label$14
	CALL memcpy($7, $11, $5)
	
.LABEL $label$13
	*(($7 + $5)) = [0]
	$5 = CALL $162(($2 + [112]), [0], [10])
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($2 + [120]))
	
.LABEL $label$16
	$4 = (CASTING int_64)(int_32 $5)
	$7 = *(($2 + [188]))
	$11 = *(($2 + [184]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$20:
	$5 = ($7 + [-24])
	$12 = *($5)
	if ( ((int_64)*($12) == (int_64)$4) ){ goto $label$19 }
	$7 = $5
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($12 + [124]) == (int_32)($2 + [160])), [8799])
	*($2 + [156]) = $12
	*($2 + [152]) = ($2 + [160])
	$9 = (($2 + [152]) | [4])
	goto $label$17 
	
.LABEL $label$18
	$5 = CALL db_find_i64(*($2 + [160]), *(($2 + [168])), (int_64)4977229654197796864, $4)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$21 }
	$5 = CALL $97(($2 + [160]), $5)
	CALL eosio_assert(((int_32)*($5 + [124]) == (int_32)($2 + [160])), [8799])
	*($2 + [156]) = $5
	*($2 + [152]) = ($2 + [160])
	$9 = (($2 + [152]) | [4])
	goto $label$17 
	
.LABEL $label$21
	*($2 + [156]) = [0]
	*($2 + [152]) = ($2 + [160])
	$9 = (($2 + [152]) | [4])
	
.LABEL $label$17
	$12 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($12, [18940])
	$5 = *($2 + [156])
	if ( ($5 == 0) ){ goto $label$25 }
	if ( ((int_64)*($5 + [8]) != (int_64)*($3 + [16])) ){ goto $label$25 }
	CALL $98(($2 + [256]), *($2 + [260]), *($5 + [28]), *(($5 + [32])))
	$5 = *($9)
	CALL $98(($2 + [256]), *($2 + [260]), *($5 + [40]), *(($5 + [44])))
	$5 = *($9)
	CALL $98(($2 + [256]), *($2 + [260]), *($5 + [52]), *(($5 + [56])))
	$5 = *($9)
	CALL $98(($2 + [256]), *($2 + [260]), *($5 + [64]), *(($5 + [68])))
	$5 = *($2 + [256])
	CALL prints([18972])
	CALL printn(*($5))
	*((($2 + [112]) + [32])) = [0]
	*($2 + [128]) = (int_64)-1
	$4 = (int_64)0
	*($2 + [136]) = (int_64)0
	$1 = *($0)
	*($2 + [112]) = $1
	*($2 + [120]) = $1
	$5 = CALL $191([8545])
	if ( ($5 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [8632])
	goto $label$23 
	
.LABEL $label$25
	CALL prints([18982])
	$11 = *($2 + [184])
	if ( $11 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$24
	if ( ($5 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$4 = (int_64)0
	
.LOOP $label$26:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$27
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$26 }
	$4 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$22
	*($2 + [96]) = (int_64)0
	*($2 + [104]) = ((int_64)$4 | (int_64)4)
	CALL eosio_assert([1], [8730])
	$4 = (uint_64)*($2 + [104]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$4 = $1
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$32 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$7 = [0]
	
.LABEL $label$28
	CALL eosio_assert($7, [8779])
	$5 = CALL $191([8545])
	if ( ($5 <= [8]) ){ goto $label$35 }
	CALL eosio_assert([0], [8632])
	goto $label$34 
	
.LABEL $label$35
	if ( ($5 == 0) ){ goto $label$33 }
	
.LABEL $label$34
	$4 = (int_64)0
	
.LOOP $label$36:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$37 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$37
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$36 }
	$4 = ((int_64)$4 << (int_64)8)
	goto $label$11 
	
.LABEL $label$33
	$4 = (int_64)0
	goto $label$11 
	
.LABEL $label$12
	CALL $148(($2 + [112]))
	
.LABEL $label$11
	*($2 + [80]) = (int_64)0
	*($2 + [88]) = ((int_64)$4 | (int_64)4)
	CALL eosio_assert([1], [8730])
	$4 = (uint_64)*($2 + [88]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$40:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$41 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$41
	$4 = $1
	
.LOOP $label$42:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$39 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$42 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$7 = [0]
	
.LABEL $label$38
	CALL eosio_assert($7, [8779])
	$5 = CALL $191([8545])
	if ( ($5 <= [8]) ){ goto $label$46 }
	CALL eosio_assert([0], [8632])
	goto $label$45 
	
.LABEL $label$46
	if ( ($5 == 0) ){ goto $label$44 }
	
.LABEL $label$45
	$4 = (int_64)0
	
.LOOP $label$47:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$48 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$48
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$47 }
	$4 = ((int_64)$4 << (int_64)8)
	goto $label$43 
	
.LABEL $label$44
	$4 = (int_64)0
	
.LABEL $label$43
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = ((int_64)$4 | (int_64)4)
	CALL eosio_assert([1], [8730])
	$4 = (uint_64)*($2 + [72]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$52 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$52
	$4 = $1
	
.LOOP $label$53:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$50 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$53 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	$7 = [0]
	
.LABEL $label$49
	CALL eosio_assert($7, [8779])
	$5 = CALL $191([8545])
	if ( ($5 <= [8]) ){ goto $label$57 }
	CALL eosio_assert([0], [8632])
	goto $label$56 
	
.LABEL $label$57
	if ( ($5 == 0) ){ goto $label$55 }
	
.LABEL $label$56
	$4 = (int_64)0
	
.LOOP $label$58:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$59 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$59
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$58 }
	$4 = ((int_64)$4 << (int_64)8)
	goto $label$54 
	
.LABEL $label$55
	$4 = (int_64)0
	
.LABEL $label$54
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = ((int_64)$4 | (int_64)4)
	CALL eosio_assert([1], [8730])
	$4 = (uint_64)*($2 + [56]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$63 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$63
	$4 = $1
	
.LOOP $label$64:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$61 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$64 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	$7 = [0]
	
.LABEL $label$60
	CALL eosio_assert($7, [8779])
	$5 = CALL $191([8545])
	if ( ($5 <= [8]) ){ goto $label$68 }
	CALL eosio_assert([0], [8632])
	goto $label$67 
	
.LABEL $label$68
	if ( ($5 == 0) ){ goto $label$66 }
	
.LABEL $label$67
	$4 = (int_64)0
	
.LOOP $label$69:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$70 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$70
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$69 }
	$4 = ((int_64)$4 << (int_64)8)
	goto $label$65 
	
.LABEL $label$66
	$4 = (int_64)0
	
.LABEL $label$65
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = ((int_64)$4 | (int_64)4)
	CALL eosio_assert([1], [8730])
	$4 = (uint_64)*($2 + [40]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$74 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$74
	$4 = $1
	
.LOOP $label$75:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$75 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$7 = [0]
	
.LABEL $label$71
	CALL eosio_assert($7, [8779])
	$5 = *($9)
	$5 = (*(($5 + [68])) - *($5 + [64]))
	if ( ($5 == 0) ){ goto $label$76 }
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 *($3 + [88])) * (float_64)(float_64)0.7) / (float_64)(CASTING float_64)(uint_32 int_32($5 >> [3])))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$78 }
	$14 = (int_64)-9223372036854775808
	goto $label$77 
	
.LABEL $label$78
	$14 = (Rounds 0)($13)
	
.LABEL $label$77
	$5 = CALL $191([8545])
	if ( ($5 <= [8]) ){ goto $label$82 }
	CALL eosio_assert([0], [8632])
	goto $label$81 
	
.LABEL $label$82
	if ( ($5 == 0) ){ goto $label$80 }
	
.LABEL $label$81
	$4 = (int_64)0
	
.LOOP $label$83:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$84 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$84
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$83 }
	$1 = ((int_64)$4 << (int_64)8)
	goto $label$79 
	
.LABEL $label$80
	$1 = (int_64)0
	
.LABEL $label$79
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$87:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$86 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$88 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$87 }
	goto $label$85 
	
.LABEL $label$88
	$4 = $1
	
.LOOP $label$89:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$86 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$89 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$87 }
	goto $label$85 
	
.LABEL $label$86
	$7 = [0]
	
.LABEL $label$85
	CALL eosio_assert($7, [8779])
	*((($2 + [96]) + [8])) = $15
	*($2 + [96]) = $14
	$13 = ((float_64)(CASTING float_64)(int_64 *(($3 + [88]))) * (float_64)(float_64)0.15)
	$5 = *($9)
	$7 = (*(($5 + [56])) - *($5 + [52]))
	if ( ($7 == 0) ){ goto $label$101 }
	$5 = CALL $191([8545])
	$11 = ($5 <= [8])
	$13 = ((float_64)$13 / (float_64)(CASTING float_64)(uint_32 int_32($7 >> [3])))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$100 }
	$14 = (int_64)-9223372036854775808
	if ( ($11 == 0) ){ goto $label$99 }
	goto $label$93 
	
.LABEL $label$101
	$5 = CALL $191([8545])
	$7 = ($5 <= [8])
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$98 }
	$14 = (int_64)-9223372036854775808
	if ( ($7 == 0) ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$100
	$14 = (Rounds 0)($13)
	if ( $11 ){ goto $label$93 }
	
.LABEL $label$99
	CALL eosio_assert([0], [8632])
	goto $label$92 
	
.LABEL $label$98
	$14 = (Rounds 0)($13)
	if ( $7 ){ goto $label$96 }
	
.LABEL $label$97
	CALL eosio_assert([0], [8632])
	goto $label$95 
	
.LABEL $label$96
	if ( $5 ){ goto $label$95 }
	$1 = (int_64)0
	goto $label$94 
	
.LABEL $label$95
	$4 = (int_64)0
	
.LOOP $label$102:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$103 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$103
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$102 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$94
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$106:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$105 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$107 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$106 }
	goto $label$104 
	
.LABEL $label$107
	$4 = $1
	
.LOOP $label$108:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$105 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$108 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$106 }
	goto $label$104 
	
.LABEL $label$105
	$7 = [0]
	
.LABEL $label$104
	CALL eosio_assert($7, [8779])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($2 + [40]))), [19022])
	$4 = ((int_64)*($2 + [32]) + (int_64)$14)
	*($2 + [32]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [19084])
	goto $label$90 
	
.LABEL $label$93
	if ( $5 ){ goto $label$92 }
	$1 = (int_64)0
	goto $label$91 
	
.LABEL $label$92
	$4 = (int_64)0
	
.LOOP $label$109:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$110 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$110
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$109 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$91
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$113:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$112 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$114 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$113 }
	goto $label$111 
	
.LABEL $label$114
	$4 = $1
	
.LOOP $label$115:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$112 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$115 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$113 }
	goto $label$111 
	
.LABEL $label$112
	$7 = [0]
	
.LABEL $label$111
	CALL eosio_assert($7, [8779])
	*(($2 + [88])) = $15
	*($2 + [80]) = $14
	
.LABEL $label$90
	$13 = ((float_64)(CASTING float_64)(int_64 *(($3 + [88]))) * (float_64)(float_64)0.1)
	$5 = *($9)
	$7 = (*(($5 + [44])) - *($5 + [40]))
	if ( ($7 == 0) ){ goto $label$127 }
	$5 = CALL $191([8545])
	$11 = ($5 <= [8])
	$13 = ((float_64)$13 / (float_64)(CASTING float_64)(uint_32 int_32($7 >> [3])))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$126 }
	$14 = (int_64)-9223372036854775808
	if ( ($11 == 0) ){ goto $label$125 }
	goto $label$119 
	
.LABEL $label$127
	$5 = CALL $191([8545])
	$7 = ($5 <= [8])
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$124 }
	$14 = (int_64)-9223372036854775808
	if ( ($7 == 0) ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$126
	$14 = (Rounds 0)($13)
	if ( $11 ){ goto $label$119 }
	
.LABEL $label$125
	CALL eosio_assert([0], [8632])
	goto $label$118 
	
.LABEL $label$124
	$14 = (Rounds 0)($13)
	if ( $7 ){ goto $label$122 }
	
.LABEL $label$123
	CALL eosio_assert([0], [8632])
	goto $label$121 
	
.LABEL $label$122
	if ( $5 ){ goto $label$121 }
	$1 = (int_64)0
	goto $label$120 
	
.LABEL $label$121
	$4 = (int_64)0
	
.LOOP $label$128:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$129 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$129
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$128 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$120
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$132:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$131 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$133 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$132 }
	goto $label$130 
	
.LABEL $label$133
	$4 = $1
	
.LOOP $label$134:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$131 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$134 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$132 }
	goto $label$130 
	
.LABEL $label$131
	$7 = [0]
	
.LABEL $label$130
	CALL eosio_assert($7, [8779])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($2 + [40]))), [19022])
	$4 = ((int_64)*($2 + [32]) + (int_64)$14)
	*($2 + [32]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [19084])
	goto $label$116 
	
.LABEL $label$119
	if ( $5 ){ goto $label$118 }
	$1 = (int_64)0
	goto $label$117 
	
.LABEL $label$118
	$4 = (int_64)0
	
.LOOP $label$135:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$136 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$136
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$135 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$117
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$139:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$138 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$140 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$139 }
	goto $label$137 
	
.LABEL $label$140
	$4 = $1
	
.LOOP $label$141:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$138 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$141 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$139 }
	goto $label$137 
	
.LABEL $label$138
	$7 = [0]
	
.LABEL $label$137
	CALL eosio_assert($7, [8779])
	*(($2 + [72])) = $15
	*($2 + [64]) = $14
	
.LABEL $label$116
	$13 = ((float_64)(CASTING float_64)(int_64 *(($3 + [88]))) * (float_64)(float_64)0.05)
	$5 = *($9)
	$7 = (*(($5 + [32])) - *($5 + [28]))
	if ( ($7 == 0) ){ goto $label$152 }
	$5 = CALL $191([8545])
	$11 = ($5 <= [8])
	$13 = ((float_64)$13 / (float_64)(CASTING float_64)(uint_32 int_32($7 >> [3])))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$151 }
	$14 = (int_64)-9223372036854775808
	if ( ($11 == 0) ){ goto $label$150 }
	goto $label$144 
	
.LABEL $label$152
	$5 = CALL $191([8545])
	$7 = ($5 <= [8])
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$149 }
	$14 = (int_64)-9223372036854775808
	if ( ($7 == 0) ){ goto $label$148 }
	goto $label$147 
	
.LABEL $label$151
	$14 = (Rounds 0)($13)
	if ( $11 ){ goto $label$144 }
	
.LABEL $label$150
	CALL eosio_assert([0], [8632])
	goto $label$143 
	
.LABEL $label$149
	$14 = (Rounds 0)($13)
	if ( $7 ){ goto $label$147 }
	
.LABEL $label$148
	CALL eosio_assert([0], [8632])
	goto $label$146 
	
.LABEL $label$147
	if ( $5 ){ goto $label$146 }
	$1 = (int_64)0
	goto $label$145 
	
.LABEL $label$146
	$4 = (int_64)0
	
.LOOP $label$153:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$154 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$154
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$153 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$145
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$157:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$156 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$158 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$157 }
	goto $label$155 
	
.LABEL $label$158
	$4 = $1
	
.LOOP $label$159:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$156 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$159 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$157 }
	goto $label$155 
	
.LABEL $label$156
	$7 = [0]
	
.LABEL $label$155
	CALL eosio_assert($7, [8779])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($2 + [40]))), [19022])
	$4 = ((int_64)*($2 + [32]) + (int_64)$14)
	*($2 + [32]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [19084])
	goto $label$76 
	
.LABEL $label$144
	if ( $5 ){ goto $label$143 }
	$1 = (int_64)0
	goto $label$142 
	
.LABEL $label$143
	$4 = (int_64)0
	
.LOOP $label$160:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$161 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$161
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$160 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$142
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$164:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$163 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$165 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$164 }
	goto $label$162 
	
.LABEL $label$165
	$4 = $1
	
.LOOP $label$166:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$163 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$166 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$164 }
	goto $label$162 
	
.LABEL $label$163
	$7 = [0]
	
.LABEL $label$162
	CALL eosio_assert($7, [8779])
	*(($2 + [56])) = $15
	*($2 + [48]) = $14
	
.LABEL $label$76
	$5 = *($9)
	$7 = (*(($5 + [56])) - *($5 + [52]))
	if ( ($7 == 0) ){ goto $label$167 }
	if ( ((int_32)*(($5 + [68])) != (int_32)*($5 + [64])) ){ goto $label$167 }
	$4 = *($3 + [88])
	$5 = CALL $191([8545])
	$11 = ($5 <= [8])
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64)0.7) / (float_64)(CASTING float_64)(uint_32 int_32($7 >> [3])))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$172 }
	$14 = (int_64)-9223372036854775808
	if ( ($11 == 0) ){ goto $label$171 }
	goto $label$170 
	
.LABEL $label$172
	$14 = (Rounds 0)($13)
	if ( $11 ){ goto $label$170 }
	
.LABEL $label$171
	CALL eosio_assert([0], [8632])
	goto $label$169 
	
.LABEL $label$170
	if ( $5 ){ goto $label$169 }
	$1 = (int_64)0
	goto $label$168 
	
.LABEL $label$169
	$4 = (int_64)0
	
.LOOP $label$173:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$174 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$174
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$173 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$168
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$177:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$176 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$178 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$177 }
	goto $label$175 
	
.LABEL $label$178
	$4 = $1
	
.LOOP $label$179:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$176 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$179 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$177 }
	goto $label$175 
	
.LABEL $label$176
	$7 = [0]
	
.LABEL $label$175
	CALL eosio_assert($7, [8779])
	*((($2 + [80]) + [8])) = $15
	*($2 + [80]) = $14
	$13 = ((float_64)(CASTING float_64)(int_64 *(($3 + [88]))) * (float_64)(float_64)0.2)
	$5 = *($9)
	$7 = (*(($5 + [44])) - *($5 + [40]))
	if ( ($7 == 0) ){ goto $label$191 }
	$5 = CALL $191([8545])
	$11 = ($5 <= [8])
	$13 = ((float_64)$13 / (float_64)(CASTING float_64)(uint_32 int_32($7 >> [3])))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$190 }
	$14 = (int_64)-9223372036854775808
	if ( ($11 == 0) ){ goto $label$189 }
	goto $label$183 
	
.LABEL $label$191
	$5 = CALL $191([8545])
	$7 = ($5 <= [8])
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$188 }
	$14 = (int_64)-9223372036854775808
	if ( $7 ){ goto $label$187 }
	goto $label$186 
	
.LABEL $label$190
	$14 = (Rounds 0)($13)
	if ( $11 ){ goto $label$183 }
	
.LABEL $label$189
	CALL eosio_assert([0], [8632])
	goto $label$182 
	
.LABEL $label$188
	$14 = (Rounds 0)($13)
	if ( ($7 == 0) ){ goto $label$186 }
	
.LABEL $label$187
	if ( $5 ){ goto $label$185 }
	$1 = (int_64)0
	goto $label$184 
	
.LABEL $label$186
	CALL eosio_assert([0], [8632])
	
.LABEL $label$185
	$4 = (int_64)0
	
.LOOP $label$192:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$193 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$193
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$192 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$184
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$196:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$195 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$197 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$196 }
	goto $label$194 
	
.LABEL $label$197
	$4 = $1
	
.LOOP $label$198:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$195 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$198 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$196 }
	goto $label$194 
	
.LABEL $label$195
	$7 = [0]
	
.LABEL $label$194
	CALL eosio_assert($7, [8779])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($2 + [40]))), [19022])
	$4 = ((int_64)*($2 + [32]) + (int_64)$14)
	*($2 + [32]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [19084])
	goto $label$180 
	
.LABEL $label$183
	if ( $5 ){ goto $label$182 }
	$1 = (int_64)0
	goto $label$181 
	
.LABEL $label$182
	$4 = (int_64)0
	
.LOOP $label$199:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$200 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$200
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$199 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$181
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$203:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$202 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$204 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$203 }
	goto $label$201 
	
.LABEL $label$204
	$4 = $1
	
.LOOP $label$205:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$202 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$205 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$203 }
	goto $label$201 
	
.LABEL $label$202
	$7 = [0]
	
.LABEL $label$201
	CALL eosio_assert($7, [8779])
	*(($2 + [72])) = $15
	*($2 + [64]) = $14
	
.LABEL $label$180
	$13 = ((float_64)(CASTING float_64)(int_64 *(($3 + [88]))) * (float_64)(float_64)0.1)
	$5 = *($9)
	$7 = (*(($5 + [32])) - *($5 + [28]))
	if ( ($7 == 0) ){ goto $label$216 }
	$5 = CALL $191([8545])
	$11 = ($5 <= [8])
	$13 = ((float_64)$13 / (float_64)(CASTING float_64)(uint_32 int_32($7 >> [3])))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$215 }
	$14 = (int_64)-9223372036854775808
	if ( ($11 == 0) ){ goto $label$214 }
	goto $label$208 
	
.LABEL $label$216
	$5 = CALL $191([8545])
	$7 = ($5 <= [8])
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$213 }
	$14 = (int_64)-9223372036854775808
	if ( $7 ){ goto $label$212 }
	goto $label$211 
	
.LABEL $label$215
	$14 = (Rounds 0)($13)
	if ( $11 ){ goto $label$208 }
	
.LABEL $label$214
	CALL eosio_assert([0], [8632])
	goto $label$207 
	
.LABEL $label$213
	$14 = (Rounds 0)($13)
	if ( ($7 == 0) ){ goto $label$211 }
	
.LABEL $label$212
	if ( $5 ){ goto $label$210 }
	$1 = (int_64)0
	goto $label$209 
	
.LABEL $label$211
	CALL eosio_assert([0], [8632])
	
.LABEL $label$210
	$4 = (int_64)0
	
.LOOP $label$217:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$218 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$218
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$217 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$209
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$221:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$220 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$222 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$221 }
	goto $label$219 
	
.LABEL $label$222
	$4 = $1
	
.LOOP $label$223:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$220 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$223 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$221 }
	goto $label$219 
	
.LABEL $label$220
	$7 = [0]
	
.LABEL $label$219
	CALL eosio_assert($7, [8779])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($2 + [40]))), [19022])
	$4 = ((int_64)*($2 + [32]) + (int_64)$14)
	*($2 + [32]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [19084])
	goto $label$167 
	
.LABEL $label$208
	if ( $5 ){ goto $label$207 }
	$1 = (int_64)0
	goto $label$206 
	
.LABEL $label$207
	$4 = (int_64)0
	
.LOOP $label$224:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$225 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$225
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$224 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$206
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$228:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$227 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$229 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$228 }
	goto $label$226 
	
.LABEL $label$229
	$4 = $1
	
.LOOP $label$230:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$227 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$230 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$228 }
	goto $label$226 
	
.LABEL $label$227
	$7 = [0]
	
.LABEL $label$226
	CALL eosio_assert($7, [8779])
	*(($2 + [56])) = $15
	*($2 + [48]) = $14
	
.LABEL $label$167
	$5 = *($9)
	$7 = (*(($5 + [44])) - *($5 + [40]))
	if ( ($7 == 0) ){ goto $label$231 }
	if ( ((int_32)*(($5 + [56])) != (int_32)*($5 + [52])) ){ goto $label$231 }
	if ( ((int_32)*(($5 + [68])) != (int_32)*($5 + [64])) ){ goto $label$231 }
	$4 = *($3 + [88])
	$5 = CALL $191([8545])
	$11 = ($5 <= [8])
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64)0.7) / (float_64)(CASTING float_64)(uint_32 int_32($7 >> [3])))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$236 }
	$14 = (int_64)-9223372036854775808
	if ( ($11 == 0) ){ goto $label$235 }
	goto $label$234 
	
.LABEL $label$236
	$14 = (Rounds 0)($13)
	if ( $11 ){ goto $label$234 }
	
.LABEL $label$235
	CALL eosio_assert([0], [8632])
	goto $label$233 
	
.LABEL $label$234
	if ( $5 ){ goto $label$233 }
	$1 = (int_64)0
	goto $label$232 
	
.LABEL $label$233
	$4 = (int_64)0
	
.LOOP $label$237:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$238 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$238
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$237 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$232
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$241:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$240 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$242 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$241 }
	goto $label$239 
	
.LABEL $label$242
	$4 = $1
	
.LOOP $label$243:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$240 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$243 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$241 }
	goto $label$239 
	
.LABEL $label$240
	$7 = [0]
	
.LABEL $label$239
	CALL eosio_assert($7, [8779])
	*((($2 + [64]) + [8])) = $15
	*($2 + [64]) = $14
	$13 = ((float_64)(CASTING float_64)(int_64 *(($3 + [88]))) * (float_64)(float_64)0.3)
	$5 = *($9)
	$7 = (*(($5 + [32])) - *($5 + [28]))
	if ( ($7 == 0) ){ goto $label$256 }
	$5 = CALL $191([8545])
	$11 = ($5 <= [8])
	$13 = ((float_64)$13 / (float_64)(CASTING float_64)(uint_32 int_32($7 >> [3])))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$255 }
	$14 = (int_64)-9223372036854775808
	if ( $11 ){ goto $label$254 }
	goto $label$246 
	
.LABEL $label$256
	$5 = CALL $191([8545])
	$7 = ($5 <= [8])
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$253 }
	$14 = (int_64)-9223372036854775808
	if ( $7 ){ goto $label$252 }
	goto $label$249 
	
.LABEL $label$255
	$14 = (Rounds 0)($13)
	if ( ($11 == 0) ){ goto $label$246 }
	
.LABEL $label$254
	if ( ($5 == 0) ){ goto $label$251 }
	goto $label$245 
	
.LABEL $label$253
	$14 = (Rounds 0)($13)
	if ( ($7 == 0) ){ goto $label$249 }
	
.LABEL $label$252
	if ( ($5 == 0) ){ goto $label$250 }
	goto $label$248 
	
.LABEL $label$251
	$1 = (int_64)0
	goto $label$244 
	
.LABEL $label$250
	$1 = (int_64)0
	goto $label$247 
	
.LABEL $label$249
	CALL eosio_assert([0], [8632])
	
.LABEL $label$248
	$4 = (int_64)0
	
.LOOP $label$257:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$258 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$258
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$257 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$247
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$261:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$260 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$262 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$261 }
	goto $label$259 
	
.LABEL $label$262
	$4 = $1
	
.LOOP $label$263:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$260 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$263 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$261 }
	goto $label$259 
	
.LABEL $label$260
	$7 = [0]
	
.LABEL $label$259
	CALL eosio_assert($7, [8779])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($2 + [40]))), [19022])
	$4 = ((int_64)*($2 + [32]) + (int_64)$14)
	*($2 + [32]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [19084])
	goto $label$231 
	
.LABEL $label$246
	CALL eosio_assert([0], [8632])
	
.LABEL $label$245
	$4 = (int_64)0
	
.LOOP $label$264:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$265 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$265
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$264 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$244
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$268:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$267 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$269 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$268 }
	goto $label$266 
	
.LABEL $label$269
	$4 = $1
	
.LOOP $label$270:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$267 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$270 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$268 }
	goto $label$266 
	
.LABEL $label$267
	$7 = [0]
	
.LABEL $label$266
	CALL eosio_assert($7, [8779])
	*(($2 + [56])) = $15
	*($2 + [48]) = $14
	
.LABEL $label$231
	$11 = *($5 + [28])
	$5 = *($9)
	$7 = *(($5 + [32]))
	$6 = ($7 - $11)
	if ( ($6 == 0) ){ goto $label$271 }
	if ( ((int_32)*(($5 + [44])) != (int_32)*($5 + [40])) ){ goto $label$271 }
	if ( ((int_32)*(($5 + [56])) != (int_32)*($5 + [52])) ){ goto $label$271 }
	if ( ((int_32)*(($5 + [68])) != (int_32)*($5 + [64])) ){ goto $label$271 }
	$4 = *($3 + [88])
	$5 = CALL $191([8545])
	$7 = ($5 <= [8])
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64)0.7) / (float_64)(CASTING float_64)(uint_32 int_32($6 >> [3])))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$276 }
	$14 = (int_64)-9223372036854775808
	if ( $7 ){ goto $label$275 }
	goto $label$274 
	
.LABEL $label$276
	$14 = (Rounds 0)($13)
	if ( ($7 == 0) ){ goto $label$274 }
	
.LABEL $label$275
	if ( $5 ){ goto $label$273 }
	$1 = (int_64)0
	goto $label$272 
	
.LABEL $label$274
	CALL eosio_assert([0], [8632])
	
.LABEL $label$273
	$4 = (int_64)0
	
.LOOP $label$277:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$278 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$278
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$277 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$272
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$281:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$280 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$282 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$281 }
	goto $label$279 
	
.LABEL $label$282
	$4 = $1
	
.LOOP $label$283:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$280 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$283 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$281 }
	goto $label$279 
	
.LABEL $label$280
	$7 = [0]
	
.LABEL $label$279
	CALL eosio_assert($7, [8779])
	*((($2 + [48]) + [8])) = $15
	*($2 + [48]) = $14
	$4 = *(($3 + [88]))
	$5 = CALL $191([8545])
	$7 = ($5 <= [8])
	$13 = ((float_64)(CASTING float_64)(int_64 $4) * (float_64)(float_64)0.3)
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$288 }
	$14 = (int_64)-9223372036854775808
	if ( $7 ){ goto $label$287 }
	goto $label$286 
	
.LABEL $label$288
	$14 = (Rounds 0)($13)
	if ( ($7 == 0) ){ goto $label$286 }
	
.LABEL $label$287
	if ( $5 ){ goto $label$285 }
	$1 = (int_64)0
	goto $label$284 
	
.LABEL $label$286
	CALL eosio_assert([0], [8632])
	
.LABEL $label$285
	$4 = (int_64)0
	
.LOOP $label$289:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$290 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$290
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$289 }
	$1 = ((int_64)$4 << (int_64)8)
	
.LABEL $label$284
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_64)$1 | (int_64)4)
	$5 = [0]
	
.LOOP $label$293:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$292 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$294 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$293 }
	goto $label$291 
	
.LABEL $label$294
	$4 = $1
	
.LOOP $label$295:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$292 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$295 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$293 }
	goto $label$291 
	
.LABEL $label$292
	$7 = [0]
	
.LABEL $label$291
	CALL eosio_assert($7, [8779])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($2 + [40]))), [19022])
	$4 = ((int_64)*($2 + [32]) + (int_64)$14)
	*($2 + [32]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [19084])
	$5 = *($9)
	$7 = *(($5 + [32]))
	$11 = *($5 + [28])
	
.LABEL $label$271
	if ( ((int_32)$7 != (int_32)$11) ){ goto $label$296 }
	if ( ((int_32)*(($5 + [44])) != (int_32)*($5 + [40])) ){ goto $label$296 }
	if ( ((int_32)*(($5 + [56])) != (int_32)*($5 + [52])) ){ goto $label$296 }
	if ( ((int_32)*(($5 + [68])) != (int_32)*($5 + [64])) ){ goto $label$296 }
	$14 = *($3 + [88])
	$5 = CALL $191([8545])
	if ( ($5 <= [8]) ){ goto $label$300 }
	CALL eosio_assert([0], [8632])
	goto $label$299 
	
.LABEL $label$300
	if ( ($5 == 0) ){ goto $label$298 }
	
.LABEL $label$299
	$4 = (int_64)0
	
.LOOP $label$301:
	$7 = *(($5 + [8544]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$302 }
	CALL eosio_assert([0], [8677])
	
.LABEL $label$302
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$301 }
	$15 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$297 
	
.LABEL $label$298
	$15 = (int_64)4
	
.LABEL $label$297
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8730])
	$4 = (uint_64)$15 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$305:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$304 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$306 }
	$4 = $1
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$305 }
	goto $label$303 
	
.LABEL $label$306
	$4 = $1
	
.LOOP $label$307:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$304 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$307 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$305 }
	goto $label$303 
	
.LABEL $label$304
	$7 = [0]
	
.LABEL $label$303
	CALL eosio_assert($7, [8779])
	CALL eosio_assert(((int_64)$15 == (int_64)*(($2 + [40]))), [19022])
	$4 = ((int_64)*($2 + [32]) + (int_64)$14)
	*($2 + [32]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [19065])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [19084])
	
.LABEL $label$296
	$4 = *($0)
	*($2 + [4]) = ($2 + [32])
	*($2) = ($2 + [256])
	*($2 + [8]) = ($2 + [152])
	*($2 + [12]) = ($2 + [48])
	*($2 + [16]) = ($2 + [64])
	*($2 + [20]) = ($2 + [80])
	*($2 + [24]) = ($2 + [96])
	CALL eosio_assert($12, [17903])
	CALL $99(($2 + [200]), $3, $4, $2)
	$5 = *($9)
	if ( ((int_32)*(($5 + [68])) == (int_32)*($5 + [64])) ){ goto $label$308 }
	$8 = ($2 + [140])
	$10 = ($2 + [136])
	$3 = (($2 + [112]) + [8])
	$6 = [0]
	
.LOOP $label$309:
	$4 = *((*($5 + [64]) + ($6 << [3])))
	$7 = *($8)
	$12 = *($10)
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$313 }
	
.LOOP $label$315:
	$5 = ($7 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$4) ){ goto $label$314 }
	$7 = $5
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$315 }
	goto $label$313 
	
.LABEL $label$314
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$313 }
	CALL eosio_assert(((int_32)*($11 + [264]) == (int_32)($2 + [112])), [8799])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [18940])
	if ( $11 ){ goto $label$312 }
	goto $label$310 
	
.LABEL $label$313
	$5 = CALL db_find_i64(*($2 + [112]), *($3), (int_64)-6030912129794572288, $4)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$311 }
	$11 = CALL $31(($2 + [112]), $5)
	CALL eosio_assert(((int_32)*($11 + [264]) == (int_32)($2 + [112])), [8799])
	CALL eosio_assert([1], [18940])
	
.LABEL $label$312
	$4 = *($0)
	*(($2 + [8])) = $0
	*($2 + [4]) = ($2 + [96])
	*($2) = ($2 + [240])
	CALL eosio_assert([1], [17903])
	CALL $100(($2 + [112]), $11, $4, $2)
	goto $label$310 
	
.LABEL $label$311
	CALL eosio_assert([0], [18940])
	
.LABEL $label$310
	$5 = *($9)
	$6 = ($6 + [1])
	if ( ($6 <= int_32((*(($5 + [68])) - *($5 + [64])) >> [3])) ){ goto $label$309 }
	
.LABEL $label$308
	if ( ((int_32)*(($5 + [56])) == (int_32)*($5 + [52])) ){ goto $label$316 }
	$8 = ($2 + [140])
	$10 = ($2 + [136])
	$3 = (($2 + [112]) + [8])
	$6 = [0]
	
.LOOP $label$317:
	$4 = *((*($5 + [52]) + ($6 << [3])))
	$7 = *($8)
	$12 = *($10)
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$321 }
	
.LOOP $label$323:
	$5 = ($7 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$4) ){ goto $label$322 }
	$7 = $5
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$323 }
	goto $label$321 
	
.LABEL $label$322
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$321 }
	CALL eosio_assert(((int_32)*($11 + [264]) == (int_32)($2 + [112])), [8799])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [18940])
	if ( $11 ){ goto $label$320 }
	goto $label$318 
	
.LABEL $label$321
	$5 = CALL db_find_i64(*($2 + [112]), *($3), (int_64)-6030912129794572288, $4)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$319 }
	$11 = CALL $31(($2 + [112]), $5)
	CALL eosio_assert(((int_32)*($11 + [264]) == (int_32)($2 + [112])), [8799])
	CALL eosio_assert([1], [18940])
	
.LABEL $label$320
	$4 = *($0)
	*(($2 + [8])) = $0
	*($2 + [4]) = ($2 + [80])
	*($2) = ($2 + [240])
	CALL eosio_assert([1], [17903])
	CALL $101(($2 + [112]), $11, $4, $2)
	goto $label$318 
	
.LABEL $label$319
	CALL eosio_assert([0], [18940])
	
.LABEL $label$318
	$5 = *($9)
	$6 = ($6 + [1])
	if ( ($6 <= int_32((*(($5 + [56])) - *($5 + [52])) >> [3])) ){ goto $label$317 }
	
.LABEL $label$316
	if ( ((int_32)*(($5 + [44])) == (int_32)*($5 + [40])) ){ goto $label$324 }
	$8 = ($2 + [140])
	$10 = ($2 + [136])
	$3 = (($2 + [112]) + [8])
	$6 = [0]
	
.LOOP $label$325:
	$4 = *((*($5 + [40]) + ($6 << [3])))
	$7 = *($8)
	$12 = *($10)
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$329 }
	
.LOOP $label$331:
	$5 = ($7 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$4) ){ goto $label$330 }
	$7 = $5
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$331 }
	goto $label$329 
	
.LABEL $label$330
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$329 }
	CALL eosio_assert(((int_32)*($11 + [264]) == (int_32)($2 + [112])), [8799])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [18940])
	if ( $11 ){ goto $label$328 }
	goto $label$326 
	
.LABEL $label$329
	$5 = CALL db_find_i64(*($2 + [112]), *($3), (int_64)-6030912129794572288, $4)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$327 }
	$11 = CALL $31(($2 + [112]), $5)
	CALL eosio_assert(((int_32)*($11 + [264]) == (int_32)($2 + [112])), [8799])
	CALL eosio_assert([1], [18940])
	
.LABEL $label$328
	$4 = *($0)
	*(($2 + [8])) = $0
	*($2 + [4]) = ($2 + [64])
	*($2) = ($2 + [240])
	CALL eosio_assert([1], [17903])
	CALL $102(($2 + [112]), $11, $4, $2)
	goto $label$326 
	
.LABEL $label$327
	CALL eosio_assert([0], [18940])
	
.LABEL $label$326
	$5 = *($9)
	$6 = ($6 + [1])
	if ( ($6 <= int_32((*(($5 + [44])) - *($5 + [40])) >> [3])) ){ goto $label$325 }
	
.LABEL $label$324
	if ( ((int_32)*(($5 + [32])) == (int_32)*($5 + [28])) ){ goto $label$332 }
	$8 = ($2 + [140])
	$10 = ($2 + [136])
	$3 = (($2 + [112]) + [8])
	$6 = [0]
	
.LOOP $label$333:
	$4 = *((*($5 + [28]) + ($6 << [3])))
	$7 = *($8)
	$12 = *($10)
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$337 }
	
.LOOP $label$339:
	$5 = ($7 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$4) ){ goto $label$338 }
	$7 = $5
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$339 }
	goto $label$337 
	
.LABEL $label$338
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$337 }
	CALL eosio_assert(((int_32)*($11 + [264]) == (int_32)($2 + [112])), [8799])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [18940])
	if ( $11 ){ goto $label$336 }
	goto $label$334 
	
.LABEL $label$337
	$5 = CALL db_find_i64(*($2 + [112]), *($3), (int_64)-6030912129794572288, $4)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$335 }
	$11 = CALL $31(($2 + [112]), $5)
	CALL eosio_assert(((int_32)*($11 + [264]) == (int_32)($2 + [112])), [8799])
	CALL eosio_assert([1], [18940])
	
.LABEL $label$336
	$4 = *($0)
	*(($2 + [8])) = $0
	*($2 + [4]) = ($2 + [48])
	*($2) = ($2 + [240])
	CALL eosio_assert([1], [17903])
	CALL $103(($2 + [112]), $11, $4, $2)
	goto $label$334 
	
.LABEL $label$335
	CALL eosio_assert([0], [18940])
	
.LABEL $label$334
	$5 = *($9)
	$6 = ($6 + [1])
	if ( ($6 <= int_32((*(($5 + [32])) - *($5 + [28])) >> [3])) ){ goto $label$333 }
	
.LABEL $label$332
	$11 = *($2 + [136])
	if ( ($11 == 0) ){ goto $label$340 }
	$12 = ($2 + [140])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$342 }
	
.LOOP $label$343:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$344 }
	CALL $33($7)
	CALL _ZdlPv($7)
	
.LABEL $label$344
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$343 }
	$5 = *(($2 + [136]))
	goto $label$341 
	
.LABEL $label$342
	$5 = $11
	
.LABEL $label$341
	*($12) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$340
	$11 = *($2 + [184])
	if ( ($11 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$12 = ($2 + [188])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$345 }
	$5 = ($5 + [-24])
	
.LOOP $label$346:
	$7 = CALL $104($5)
	$5 = ($5 + [-24])
	if ( ((int_32)$7 != (int_32)$11) ){ goto $label$346 }
	$5 = *(($2 + [184]))
	*($12) = $11
	CALL _ZdlPv($5)
	$11 = *($2 + [224])
	if ( $11 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$345
	*($12) = $11
	CALL _ZdlPv($11)
	$11 = *($2 + [224])
	if ( ($11 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$11 = *($2 + [224])
	if ( $11 ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((*($2 + [240]) & [1]) == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$12 = ($2 + [228])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$348 }
	
.LOOP $label$349:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$350 }
	CALL $22($7)
	CALL _ZdlPv($7)
	
.LABEL $label$350
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$349 }
	$5 = *(($2 + [224]))
	goto $label$347 
	
.LABEL $label$348
	$5 = $11
	
.LABEL $label$347
	*($12) = $11
	CALL _ZdlPv($5)
	if ( ((*($2 + [240]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($2 + [248])))
	
.LABEL $label$5
	$5 = *($2 + [256])
	if ( ($5 == 0) ){ goto $label$351 }
	*($2 + [260]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$351
	$global$0 = ($2 + [272])
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$7 = ($7 & [1])
	$7 = *($2)
	$8 = uint_32($7 >> [1])
	$6 = *($2 + [4])
	$5 = CALL $191([18716])
	if ( ((int_32)$5 != (int_32)( $6 ? $8 : $7 )) ){ goto $label$3 }
	if ( (CALL $161($2, [0], [-1], [18716], $5) == 0) ){ goto $label$2 }
	$6 = *($2)
	$8 = uint_32($6 >> [1])
	$7 = ($6 & [1])
	$6 = *(($2 + [4]))
	
.LABEL $label$3
	$6 = CALL _Znaj((( $6 ? $8 : $7 ) + [1]))
	CALL $190($6, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ))
	$2 = *($3)
	$5 = CALL _Znaj((( *($3 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ) + [1]))
	CALL $190($5, ( *($3 + [8]) ? ($3 + [1]) : (*($3) & [1]) ))
	$3 = CALL $195($6, $5)
	if ( ($3 == 0) ){ goto $label$2 }
	$9 = ($4 | [1])
	$7 = ($4 + [8])
	$8 = ($0 + [4])
	
.LOOP $label$4:
	*($7) = [0]
	*($4) = (int_64)0
	$2 = CALL $191($3)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$7 }
	*($4) = ($2 << [1])
	$6 = $9
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$10 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($7) = $6
	*($4) = ($10 | [1])
	*($4 + [4]) = $2
	
.LABEL $label$6
	CALL memcpy($6, $3, $2)
	
.LABEL $label$5
	*(($6 + $2)) = [0]
	$2 = *($8)
	if ( ((int_32)$2 != (int_32)*(($0 + [8]))) ){ goto $label$10 }
	CALL $72($0, $4)
	$3 = CALL $195([0], $5)
	if ( (*($4) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $149($2, $4)
	*($8) = (*($8) + [12])
	$3 = CALL $195([0], $5)
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($7))
	
.LABEL $label$8
	if ( $3 ){ goto $label$4 }
	
.LABEL $label$2
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $148($4)
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $2
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$2 = *($0)
	*($3 + [16]) = $2
	*($3 + [24]) = $2
	$4 = CALL db_find_i64($2, $2, (int_64)-6030912129794572288, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $31(($3 + [16]), $4)
	CALL eosio_assert(((int_32)*($4 + [264]) == (int_32)($3 + [16])), [8799])
	CALL eosio_assert([1], [18864])
	$2 = *($0)
	*($3) = ($3 + [56])
	CALL eosio_assert([1], [17903])
	CALL $93(($3 + [16]), $4, $2, $3)
	$5 = *($3 + [40])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([1], [18839])
	$2 = *($0)
	*($3 + [8]) = ($3 + [56])
	CALL $94($3, ($3 + [16]), $2, ($3 + [8]))
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($3 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $33($4)
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8886])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([280])
	CALL $74($3)
	*($3 + [264]) = $1
	CALL $92(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [268])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $33($1)
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$5 = *($1)
	CALL $91($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [18035])
	*(($3 = $4)) = [0]
	CALL $87($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $200($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $88($3, $1)
	CALL db_update_i64(*($1 + [268]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $204($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [264]) == (int_32)$0), [17938])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$11()), [17984])
	$6 = *($1)
	$8 = *(($1 + [180]))
	$7 = *($1 + [176])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	$9 = *(*($3))
	
.LOOP $label$2:
	if ( ((int_64)*($7) == (int_64)$9) ){ goto $label$1 }
	$7 = ($7 + [8])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$2 }
	$7 = $8
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 == (int_32)$8), [18799])
	CALL eosio_assert((int_64)(*($1 + [168]) == 0), [18768])
	*($1 + [168]) = *(*($3))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [18035])
	*($5) = [0]
	CALL $87($5, $1)
	$8 = *($5)
	if ( ($8 <= [513]) ){ goto $label$4 }
	$7 = CALL $200($8)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$3
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = ($7 + $8)
	CALL $88($5, $1)
	CALL db_update_i64(*($1 + [268]), $2, $7, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $204($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$11()), [8886])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([280])
	CALL $74($3)
	*($3 + [264]) = $1
	CALL $75(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [268])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $33($1)
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [236])
	if ( ($1 == 0) ){ goto $label$1 }
	*(($0 + [240])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$1 = *($0 + [224])
	if ( ($1 == 0) ){ goto $label$2 }
	*(($0 + [228])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$1 = *($0 + [212])
	if ( ($1 == 0) ){ goto $label$3 }
	*(($0 + [216])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$2 = *($0 + [200])
	if ( ($2 == 0) ){ goto $label$4 }
	$3 = ($0 + [204])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$8
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	$1 = *(($0 + [200]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $2
	
.LABEL $label$5
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($0 + [188])
	if ( ($1 == 0) ){ goto $label$9 }
	*(($0 + [192])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($0 + [176])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($0 + [180])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$1 = *($0 + [152])
	if ( ($1 == 0) ){ goto $label$11 }
	*(($0 + [156])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$1 = *($0 + [140])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($0 + [144])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$2 = *($0 + [128])
	if ( ($2 == 0) ){ goto $label$13 }
	$3 = ($0 + [132])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$17
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$16 }
	$1 = *(($0 + [128]))
	goto $label$14 
	
.LABEL $label$15
	$1 = $2
	
.LABEL $label$14
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$1 = *($0 + [116])
	if ( ($1 == 0) ){ goto $label$18 }
	*(($0 + [120])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$18
	$2 = *($0 + [104])
	if ( ($2 == 0) ){ goto $label$19 }
	$3 = ($0 + [108])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$21 }
	
.LOOP $label$22:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$23
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$22 }
	$1 = *(($0 + [104]))
	goto $label$20 
	
.LABEL $label$21
	$1 = $2
	
.LABEL $label$20
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$19
	$1 = *($0 + [92])
	if ( ($1 == 0) ){ goto $label$24 }
	*(($0 + [96])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$24
	$1 = *($0 + [80])
	if ( ($1 == 0) ){ goto $label$25 }
	*(($0 + [84])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$25
	$1 = *($0 + [68])
	if ( ($1 == 0) ){ goto $label$26 }
	*(($0 + [72])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$26
	$2 = *($0 + [56])
	if ( ($2 == 0) ){ goto $label$27 }
	$3 = ($0 + [60])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$29 }
	
.LOOP $label$30:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$31
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$30 }
	$1 = *(($0 + [56]))
	goto $label$28 
	
.LABEL $label$29
	$1 = $2
	
.LABEL $label$28
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$27
	$2 = *($0 + [44])
	if ( ($2 == 0) ){ goto $label$32 }
	$3 = ($0 + [48])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$34 }
	
.LOOP $label$35:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$36
	$4 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$35 }
	$1 = *(($0 + [44]))
	goto $label$33 
	
.LABEL $label$34
	$1 = $2
	
.LABEL $label$33
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$32
	CALL $86(($0 + [32]))
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [56]) = [8210]
	*($4 + [60]) = CALL $191([8210])
	*($4 + [8]) = *($4 + [56])
	$5 = *(CALL $2(($4 + [16]), ($4 + [8])))
	*(($4 + [48])) = [0]
	*($4 + [24]) = $2
	*($4 + [16]) = $5
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$6 = CALL $73(($4 + [16]), $3, [18744])
	*($0) = *($6)
	*(($0 + [8])) = *(($6 + [8]))
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$1 }
	$8 = ($4 + [44])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	CALL _ZdlPv($6)
	
.LABEL $label$5
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($4 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $7
	
.LABEL $label$2
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8850])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $200($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([280])
	$6 = CALL $74($5)
	*($5 + [264]) = $0
	CALL $78(($3 + [32]), $6)
	*($5 + [268]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $76(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $33($1)
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $198 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $170())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $199($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $200($1)
	
.LABEL $label$2
	*(CALL $170()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $200(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $204($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $196 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $197 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($1 + [1]) == 0) ){ goto $label$3 }
	CALL memset($2, [0], [32])
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($1 + [1])
	
.LOOP $label$5:
	*(($4 = ($2 + (uint_32($3 >> [3]) & [28])))) = (*($4) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$4
	$4 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = $0
	
.LOOP $label$6:
	if ( (*(($2 + (uint_32($3 >> [3]) & [28]))) & ([1] << ($3 & [31]))) ){ goto $label$2 }
	$3 = *($1 + [1])
	$4 = ($1 + [1])
	$1 = $4
	if ( $3 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL $193($0, $3)
	goto $label$1 
	
.LABEL $label$2
	$4 = $1
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	return ($4 - $0)
}

int_32 .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( $0 ){ goto $label$2 }
	$2 = [0]
	$0 = *([0] + [9300])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($0 + CALL $192($0, $1))
	if ( (*($2) == 0) ){ goto $label$4 }
	$0 = ($2 + CALL $194($2, $1))
	*([0] + [9300]) = $0
	if ( (*($0) == 0) ){ goto $label$3 }
	*([0] + [9300]) = ($0 + [1])
	*($0) = [0]
	return $2
	
.LABEL $label$4
	*([0] + [9300]) = [0]
	return [0]
	
.LABEL $label$3
	*([0] + [9300]) = [0]
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*((($2 = ($global$0 - [32])) + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	if ( (*($1 + [1]) == 0) ){ goto $label$2 }
	$1 = ($1 + [1])
	
.LOOP $label$4:
	*(($4 = ($2 + (uint_32($3 >> [3]) & [28])))) = (*($4) | ([1] << ($3 & [31])))
	$3 = *($1)
	$1 = ($1 + [1])
	if ( $3 ){ goto $label$4 }
	$4 = $0
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$5 }
	$1 = $0
	
.LOOP $label$6:
	if ( ((*(($2 + (uint_32($3 >> [3]) & [28]))) & ([1] << ($3 & [31]))) == 0) ){ goto $label$1 }
	$3 = *($1 + [1])
	$4 = ($1 + [1])
	$1 = $4
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$5
	return ($4 - $0)
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	$1 = ($0 + [-1])
	
.LOOP $label$7:
	$1 = ($1 + [1])
	if ( ((int_32)*($1) == (int_32)$3) ){ goto $label$7 }
	return ($1 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $193 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	($0 + CALL $191($0))
	$2 = ($1 & [255])
	if ( ($2 == 0) ){ goto $label$1 }
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 == (int_32)($1 & [255])) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ($0 & [3]) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = *($0)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$2 = ((int_32)$2 * (int_32)[16843009])
	
.LOOP $label$6:
	$3 = ((int_32)$3 ^ (int_32)$2)
	if ( ((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) ){ goto $label$5 }
	$3 = *($0 + [4])
	$0 = ($0 + [4])
	if ( (((((int_32)$3 ^ (int_32)[-1]) & ($3 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$6 }
	
.LABEL $label$5
	$0 = ($0 + [-1])
	
.LOOP $label$7:
	$0 = ($0 + [1])
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)($1 & [255])) ){ goto $label$7 }
	
.LABEL $label$2
	return $0
	return .LABEL $label$1
}

int_32 .FUNC $190 (int_32 $0, int_32 $1)
{
	CALL $189($0, $1)
	return $0
}

int_32 .FUNC $191 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}