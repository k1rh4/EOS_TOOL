(data (i32.const 8192) "0123456789abcdef\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8218) "read_transaction failed\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8333) "EOS\00")
(data (i32.const 8337) "eosio.token\00")
(data (i32.const 8349) "betlottocomp\00")
(data (i32.const 8362) "quantity invalid\00")
(data (i32.const 8379) "transfer quantity must be positive\00")
(data (i32.const 17132) "YOU WON, congratulations. \e6\81\ad\e5\96\9c\e4\bd\a0\e4\b8\ad\e5\a5\96. \e5\8b\9d\e5\88\a9\e3\82\92\e3\81\8a\e7\a5\9d\e3\81\84\e3\81\97\e3\81\be\e3\81\99. \ec\8a\b9\eb\a6\ac\eb\a5\bc \ec\b6\95\ed\95\98\ed\95\a9\eb\8b\88\eb\8b\a4. team @ http://enjoy.bet\00")
(data (i32.const 17255) "Jackpot, congratulations. \e6\81\ad\e5\96\9c\e4\bd\a0\e4\b8\ad\e5\a4\a7\e5\a5\96. \e5\a4\a7\e8\b3\9e\e3\81\8a\e3\82\81\e3\81\a7\e3\81\a8\e3\81\86. \eb\8c\80\ec\83\81\ec\9d\84 \ec\b6\95\ed\95\98\ed\95\a9\eb\8b\88\eb\8b\a4. team @ http://enjoy.bet\00")
(data (i32.const 17375) "unable to find the global config, run init firstly\00")
(data (i32.const 17426) "unable to find the symbol config\00")
(data (i32.const 17459) "total: \00")
(data (i32.const 17467) "\n\00")
(data (i32.const 17469) "cannot find period\00")
(data (i32.const 17488) "period status is not settling\00: no conversion\00")
(data (i32.const 17534) "results size should be 6\00: out of range\00")
(data (i32.const 17574) "result should be less than 52*8 and big than 1\00")
(data (i32.const 17621) "cards:\00")
(data (i32.const 17628) ", \00")
(data (i32.const 17631) "banker:\00")
(data (i32.const 17639) " player:\00")
(data (i32.const 17648) "\00\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\08\00\00\00\t\00\00\00")
(data (i32.const 17672) "\00\00\00\00\01\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\08\00\00\00\t\00\00\00")
(data (i32.const 17704) "should not reach here\00")
(data (i32.const 17726) "period status is not finished\00")
(data (i32.const 17756) "a period with same symbol is already running.\00")
(data (i32.const 17802) "cannot get period by serial\00")
(data (i32.const 17830) "period status is not running\00")
(data (i32.const 17859) "receiver is invalid\00")
(data (i32.const 17879) "invalid contract code\00")
(data (i32.const 17901) "to account should be contract account\00")
(data (i32.const 17939) "eosio\00")
(data (i32.const 17945) "invalid memo format\00")
(data (i32.const 17965) "bet should more than min\00")
(data (i32.const 17990) "max bet amount reached\00")
(data (i32.const 18013) "active\00")
(data (i32.const 18020) "enjoyprovide\00")
(data (i32.const 18033) "reward\00")
(data (i32.const 18040) "bacc\00")
(data (i32.const 18045) "period status is invalid\00")
(data (i32.const 18070) "upper should >= lower\00")
(data (i32.const 18092) "onerror\00")
(data (i32.const 18100) "onerror action\'s are only valid from the eosio system account\00")
(data (i32.const 18162) "transfer\00")
(data (i32.const 18171) "string is too long to be a valid symbol_code\00")
(data (i32.const 18216) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 18269) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18318) "invalid symbol name\00")
(data (i32.const 18338) "write\00")
(data (i32.const 18344) "string is too long to be a valid name\00")
(data (i32.const 18382) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 18449) "character is not in allowed character set for names\00")
(data (i32.const 18501) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18552) "error reading iterator\00")
(data (i32.const 18575) "read\00")
(data (i32.const 18580) "get\00")
(data (i32.const 18584) "cannot create objects in table of another contract\00")
(data (i32.const 18635) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18687) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18741) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18789) "cannot pass end iterator to modify\00")
(data (i32.const 18824) "object passed to modify is not in multi_index\00")
(data (i32.const 18870) "cannot modify objects in table of another contract\00")
(data (i32.const 18921) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18980) "cannot increment end iterator\00")
(data (i32.const 19010) "stopround\00")
(data (i32.const 19020) "cannot find tablename, should not reach here\00")
(data (i32.const 19068) "\80J\00\00")
(data (i32.const 19072) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 19105) "cannot pass end iterator to erase\00")
(data (i32.const 19139) "object passed to erase is not in multi_index\00")
(data (i32.const 19184) "cannot erase objects in table of another contract\00")
(data (i32.const 19234) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19296) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "transaction_size" (func $fimport$0 (result i32)))
(import "env" "read_transaction" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "sha256" (func $fimport$3 (param i32 i32 i32)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$5 (result i32)))
(import "env" "tapos_block_num" (func $fimport$6 (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "sha512" (func $fimport$8 (param i32 i32 i32)))
(import "env" "require_auth" (func $fimport$9 (param i64)))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "prints" (func $fimport$12 (param i32)))
(import "env" "printi" (func $fimport$13 (param i64)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "printui" (func $fimport$15 (param i64)))
(import "env" "send_deferred" (func $fimport$16 (param i32 i64 i32 i32 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$17 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$18 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_upperbound_i64" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "action_data_size" (func $fimport$21 (result i32)))
(import "env" "read_action_data" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$24))
(import "env" "db_store_i64" (func $fimport$25 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$26 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$28 (param i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$29 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$30 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$31 (param i32 i64 i32)))
(import "env" "db_idx64_next" (func $fimport$32 (param i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$33 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$34 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$35 (param i32)))
(import "env" "memset" (func $fimport$36 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$37 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$41 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$44 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$45 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$46 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$47 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$48 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$49 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$50 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$51 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$52 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$53 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$54 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$55 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$56 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $58))
(export "_ZdlPv" (func $113))
(export "_Znwj" (func $111))
(export "_Znaj" (func $112))
(export "_ZdaPv" (func $114))
(export "_ZnwjSt11align_val_t" (func $115))
(export "_ZnajSt11align_val_t" (func $116))
(export "_ZdlPvSt11align_val_t" (func $117))
(export "_ZdaPvSt11align_val_t" (func $118))
(table $0 12 12 anyfunc)
(elem (i32.const 1) $48 $8 $54 $45 $13 $41 $56 $24 $38 $6 $7)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19553))
(global $global$2 i32 (i32.const 19553))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [24])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [8])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [20])
	*($2) = $1
	$3 = *($0)
	$0 = *($0 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $89(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $89(*($1), *($0 + [20]))
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18338])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $89(*($1), *($0 + [36]))
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $72(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $72(*($1), *($0 + [20]))
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18575])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $72(*($1), *($0 + [36]))
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [88]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [96])))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [56])))
	if ( (*($1 + [24]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $74($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $97(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18338])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $89(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18338])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	CALL $89(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18338])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $91(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18338])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [18338])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$1 = *($1)
	*($2 + [15]) = *(*($0 + [32]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [18338])
	CALL memcpy(*($1 + [4]), ($2 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [1]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18338])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [18338])
	CALL memcpy(*($7), $6, [2])
	$4 = (*($7) + [2])
	*($7) = $4
	$6 = ($6 + [2])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18575])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $72(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18575])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $85(*($1), *($0 + [32]))
	CALL $85(*($1), *($0 + [36]))
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [18575])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $85(*($1), *($0 + [52]))
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18575])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [60])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [18575])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [112])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [116])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($1 + [76])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($1 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($1 + [64])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($1 + [68])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$8 }
	CALL _ZdlPv($1)
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $148([8452])
	$3 = *([0] + [8460])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8464])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8468]
	*([0] + [8460]) = [8468]
	$4 = *([0] + [8464])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $155([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8460])
	*([0] + [8460]) = $3
	*([0] + [8464]) = [0]
	
.LABEL $label$2
	*([0] + [8464]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $149([8452])
	return [0]
	
.LABEL $label$1
	CALL $149([8452])
	return [-1]
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $150(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8440])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $150(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $123($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $130 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $132($1, $0, [17559])
	CALL $133()
	(unreachable)
}

void .FUNC $131 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $132($1, $0, [17518])
	CALL $134()
	(unreachable)
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $147($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $123($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $133 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $134 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $136 ()
{
	return [8444]
}

void .FUNC $137 (int_32 $0)
{
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $39($0, $1)
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $125($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1) = CALL $103(*($5), [10])
	$6 = *(*($5 + [4]) + [4])
	*($1 + [8]) = *($6)
	*($1 + [16]) = *($6 + [8])
	$7 = *(*($5 + [8]))
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$4 }
	$8 = [0]
	$9 = *([0] + [19068])
	
.LOOP $label$6:
	*((($3 + [32]) + ($6 = $8))) = *(($9 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [16]) = ($8 << [1])
	$9 = (($3 + [16]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*((($3 + [16]) + [8])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [16]) = [0]
	$6 = (($3 + [16]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($3 + [16]) = ($10 | [1])
	*($3 + [24]) = $9
	*($3 + [20]) = $8
	
.LABEL $label$2
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$7:
	*(($9 + $6)) = *((($3 + [32]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$7 }
	$6 = ($9 + $8)
	
.LABEL $label$1
	*($6) = [0]
	$11 = ($1 + [24])
	if ( (*($1 + [24]) & [1]) ){ goto $label$9 }
	*($11) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($1 + [32]))) = [0]
	*(($1 + [28])) = [0]
	
.LABEL $label$8
	$8 = [0]
	CALL $124($11, [0])
	*(($11 + [8])) = *((($3 + [16]) + [8]))
	*($11) = *($3 + [16])
	$6 = *($5 + [16])
	$7 = *($6 + [8])
	$12 = *(*($5 + [12]))
	*($1 + [40]) = *($6)
	*($1 + [64]) = $12
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( (int_64)($7) == 0) ){ goto $label$13 }
	
.LOOP $label$15:
	*((($3 + [16]) + ($6 = $8))) = $7
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[5]) ){ goto $label$14 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$15 }
	
.LABEL $label$14
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$12 }
	*($3 + [32]) = ($8 << [1])
	$9 = (($3 + [32]) | [1])
	goto $label$11 
	
.LABEL $label$13
	*((($3 + [32]) + [8])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [32]) = [0]
	$6 = (($3 + [32]) | [1])
	goto $label$10 
	
.LABEL $label$12
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($3 + [32]) = ($10 | [1])
	*($3 + [40]) = $9
	*($3 + [36]) = $8
	
.LABEL $label$11
	$10 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$16:
	*(($9 + $6)) = *((($3 + [16]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$16 }
	$6 = ($9 + $8)
	
.LABEL $label$10
	*($6) = [0]
	$6 = ($1 + [48])
	if ( (*($1 + [48]) & [1]) ){ goto $label$18 }
	*($6) = [0]
	goto $label$17 
	
.LABEL $label$18
	*(*(($1 + [56]))) = [0]
	*(($1 + [52])) = [0]
	
.LABEL $label$17
	$5 = ($1 + [16])
	$13 = ($1 + [8])
	$14 = ($1 + [40])
	$15 = ($1 + [64])
	CALL $124($6, [0])
	*(($6 + [8])) = *((($3 + [32]) + [8]))
	*($6) = *($3 + [32])
	*($1 + [80]) = CALL current_time()
	$8 = ($1 + [88])
	$16 = ($1 + [80])
	CALL $1(($3 + [32]))
	if ( (*($1 + [88]) & [1]) ){ goto $label$20 }
	*($8) = [0]
	goto $label$19 
	
.LABEL $label$20
	*(*(($1 + [96]))) = [0]
	*(($1 + [92])) = [0]
	
.LABEL $label$19
	CALL $124($8, [0])
	*(($8 + [8])) = *((($3 + [32]) + [8]))
	*($8) = *($3 + [32])
	*($3 + [72]) = [0]
	*($3 + [16]) = ($3 + [72])
	*($3 + [36]) = $13
	*($3 + [40]) = $5
	*($3 + [44]) = $11
	*($3 + [48]) = $14
	*($3 + [52]) = $6
	*($3 + [56]) = $15
	*($3 + [64]) = $16
	*($3 + [68]) = $8
	*($3 + [32]) = $1
	$17 = ($1 + [72])
	*($3 + [60]) = $17
	CALL $98(($3 + [32]), ($3 + [16]))
	$10 = *($3 + [72])
	if ( ($10 <= [513]) ){ goto $label$22 }
	$9 = CALL $152($10)
	goto $label$21 
	
.LABEL $label$22
	$9 = ($2 - (($10 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$21
	*($3 + [20]) = $9
	*($3 + [16]) = $9
	*($3 + [24]) = ($9 + $10)
	*($3 + [72]) = ($3 + [16])
	*($3 + [36]) = $13
	*($3 + [32]) = $1
	*($3 + [40]) = $5
	*($3 + [44]) = $11
	*($3 + [48]) = $14
	*($3 + [52]) = $6
	*($3 + [56]) = $15
	*($3 + [60]) = $17
	*($3 + [64]) = $16
	*($3 + [68]) = $8
	CALL $99(($3 + [32]), ($3 + [72]))
	$7 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($4 + [8]), (int_64)4229865762275196928, *(*($0 + [8])), $7, $9, $10)
	if ( ($10 <= [513]) ){ goto $label$23 }
	CALL $156($9)
	
.LABEL $label$23
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$24 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	$6 = ($4 + [8])
	$7 = *($6)
	$8 = *(($0 + [8]))
	$12 = *($8)
	$18 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [108]) = CALL db_idx64_store($7, (int_64)4229865762275196928, $12, $18, ($3 + [32]))
	$7 = *($8)
	$12 = *($6)
	$18 = *($1)
	$6 = *(($1 + [24]))
	$8 = ($6 & [1])
	*($3 + [72]) = ( *(($1 + [32])) ? ($11 + [1]) : $8 )
	*($3 + [76]) = ( *(($1 + [28])) ? uint_32($6 >> [1]) : $8 )
	*($3 + [8]) = *($3 + [72])
	*($3 + [32]) = *(CALL $2(($3 + [32]), ($3 + [8])))
	*(($1 + [112])) = CALL db_idx64_store($12, (int_64)4229865762275196929, $7, $18, ($3 + [32]))
	$global$0 = ($3 + [80])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$5 = ($global$0 - [320])
	$global$0 = $5
	*($5 + [168]) = [17939]
	*($5 + [172]) = CALL $147([17939])
	*($5 + [24]) = *($5 + [168])
	$6 = CALL $2(($5 + [216]), ($5 + [24]))
	$7 = *($1)
	if ( ((int_64)$7 == (int_64)*($6)) ){ goto $label$1 }
	$8 = *($0)
	*($5 + [272]) = [8349]
	*($5 + [276]) = CALL $147([8349])
	*($5 + [16]) = *($5 + [272])
	$6 = CALL $2(($5 + [216]), ($5 + [16]))
	if ( ((int_64)$7 == (int_64)$8) ){ goto $label$1 }
	if ( ((int_64)*($1) == (int_64)*($6)) ){ goto $label$1 }
	CALL $47($0, $5, $2, $3)
	$6 = CALL $18($0)
	*($5 + [216]) = *($6)
	$9 = CALL $120((($5 + [216]) | [4]), ($6 + [4]))
	$7 = *(($6 + [24]))
	$8 = *(($6 + [32]))
	$10 = *($6 + [16])
	*((($5 + [216]) + [44])) = (int_64)0
	*((($5 + [216]) + [32])) = $8
	*((($5 + [216]) + [24])) = $7
	$2 = [0]
	*($5 + [256]) = [0]
	*($5 + [232]) = $10
	$11 = (*(($6 + [44])) - *($6 + [40]))
	if ( ($11 == 0) ){ goto $label$6 }
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$5 }
	$12 = CALL _Znwj($11)
	*((($5 + [216]) + [40])) = $12
	*(($5 + [264])) = ($12 + (int_32($11 >> [1]) << [1]))
	*(($11 = (($5 + [216]) + [44]))) = $12
	$13 = *(($6 + [40]))
	$14 = (*(($6 + [44])) - $13)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($12, $13, $14)
	*($11) = (*($11) + $14)
	
.LABEL $label$6
	*((($5 + [216]) + [54])) = *(($6 + [54]))
	*($5 + [268]) = *($6 + [52])
	$6 = CALL $20($0, ($3 + [8]))
	*($5 + [168]) = *($6)
	$13 = CALL $120((($5 + [168]) | [4]), ($6 + [4]))
	$14 = CALL $120((($5 + [168]) + [16]), ($6 + [16]))
	*((($5 + [168]) + [44])) = *(($6 + [44]))
	*((($5 + [168]) + [36])) = *(($6 + [36]))
	*($5 + [196 align=4]) = *($6 + [28 align=4])
	CALL $3(($5 + [152]), $4, [124])
	CALL eosio_assert(((int_32)(*($5 + [156]) - *($5 + [152])) == (int_32)[36]), [17945])
	$6 = CALL $129(*($5 + [152]), [0], [10])
	*($5 + [148]) = CALL $129((*($5 + [152]) + [12]), [0], [10])
	CALL $129((*($5 + [152]) + [24]), [0], [10])
	*((($5 + [104]) + [32])) = [0]
	*($5 + [120]) = (int_64)-1
	*($5 + [128]) = (int_64)0
	*($5 + [140]) = [0]
	$7 = *($0)
	*($5 + [104]) = $7
	*($5 + [112]) = $7
	*((($5 + [64]) + [32])) = [0]
	*($5 + [72]) = $7
	*($5 + [64]) = $7
	*($5 + [80]) = (int_64)-1
	*($5 + [88]) = (int_64)0
	*($5 + [100]) = [0]
	$6 = CALL db_find_i64($7, $7, (int_64)-6147718988072747008, (CASTING int_64)(int_32 $6))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $25(($5 + [64]), $6)
	CALL eosio_assert(((int_32)*($2 + [132]) == (int_32)($5 + [64])), [18501])
	
.LABEL $label$7
	*($5 + [60]) = $2
	*($5 + [56]) = ($5 + [64])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17469])
	CALL eosio_assert(((int_32)*(*($5 + [60]) + [16]) == (int_32)[10]), [17830])
	$12 = *($5 + [60])
	$6 = *($12 + [20])
	if ( ($6 & [1]) ){ goto $label$9 }
	$11 = (($12 + [20]) + [1])
	$6 = uint_32($6 >> [1])
	if ( ((uint_32)$6 >= (uint_32)[8]) ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$9
	$11 = *(($12 + [28]))
	$6 = *(($12 + [24]))
	if ( ($6 <= [8]) ){ goto $label$4 }
	
.LABEL $label$8
	CALL eosio_assert([0], [18171])
	goto $label$3 
	
.LABEL $label$5
	CALL $135(($5 + [256]))
	
.LABEL $label$4
	if ( $6 ){ goto $label$3 }
	$7 = (int_64)0
	goto $label$2 
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$10:
	$4 = (($11 + $6) + [-1])
	$2 = *($4)
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [18216])
	$2 = *($4)
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$10 }
	$7 = ((int_64)$7 << (int_64)8)
	
.LABEL $label$2
	CALL eosio_assert(((int_64)((int_64)$7 | (int_64)*($12 + [32])) == (int_64)*(($3 + [8]))), [17830])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*(*($5 + [60]) + [128])), [17965])
	$6 = *($5 + [60])
	CALL eosio_assert(((uint_64)((int_64)((int_64)*($3) * (int_64)*((*($6 + [112]) + (*($5 + [148]) << [1])))) / (int_64)100) <= (uint_64)*($6 + [48])), [17990])
	$7 = *($0)
	*($5 + [32]) = $0
	*($5 + [40]) = $1
	*($5 + [48]) = $3
	*($5 + [36]) = ($5 + [56])
	*($5 + [44]) = ($5 + [148])
	*($5 + [312]) = $7
	CALL eosio_assert(((int_64)*($5 + [104]) == (int_64)CALL $fimport$10()), [18584])
	*($5 + [292]) = ($5 + [32])
	*($5 + [288]) = ($5 + [104])
	*($5 + [296]) = ($5 + [312])
	*(($6 = CALL _Znwj([120])) + [32]) = [0]
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [56]) = [0]
	*($6 + [88 align=4]) = (int_64)0
	*($6 + [96]) = [0]
	*($6 + [100]) = ($5 + [104])
	CALL $49(($5 + [288]), $6)
	*($5 + [304]) = $6
	$7 = *($6)
	*($5 + [288]) = $7
	$4 = *($6 + [104])
	*($5 + [284]) = $4
	$11 = ($5 + [132])
	$2 = *($11)
	if ( ((uint_32)$2 >= (uint_32)*(($5 + [136]))) ){ goto $label$14 }
	*($2 + [8]) = $7
	*($2 + [16]) = $4
	*($5 + [304]) = [0]
	*($2) = $6
	*($11) = ($2 + [24])
	$6 = *($5 + [304])
	$2 = [0]
	*($5 + [304]) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	CALL $50(($5 + [128]), ($5 + [304]), ($5 + [288]), ($5 + [284]))
	$6 = *($5 + [304])
	$2 = [0]
	*($5 + [304]) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($6 + [88]) & [1]) ){ goto $label$19 }
	if ( (*($6 + [48]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($6 + [96])))
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($6 + [56])))
	if ( (*($6 + [24]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$15
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$7 = *($0)
	$6 = *($5 + [60])
	*($5 + [32]) = $3
	*($5 + [36]) = ($5 + [56])
	*($5 + [40]) = ($5 + [148])
	CALL eosio_assert(((int_32)$6 != (int_32)$2), [18789])
	CALL $51(($5 + [64]), $6, $7, ($5 + [32]))
	$7 = *($0 + [8])
	*($5 + [288]) = [8337]
	*($5 + [292]) = CALL $147([8337])
	*($5 + [8]) = *($5 + [288])
	if ( ((int_64)$7 != (int_64)*(CALL $2(($5 + [32]), ($5 + [8])))) ){ goto $label$20 }
	$6 = *($14)
	$2 = CALL $147([8333])
	if ( ((int_32)$2 != (int_32)( *(($5 + [188])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$20 }
	if ( CALL $128($14, [0], [-1], [8333], $2) ){ goto $label$20 }
	CALL $52($0, $1, *($3))
	
.LABEL $label$20
	CALL $36((($5 + [64]) + [24]))
	CALL $35((($5 + [104]) + [24]))
	$4 = *($5 + [152])
	if ( ($4 == 0) ){ goto $label$21 }
	$2 = *($5 + [156])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$23 }
	
.LOOP $label$24:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$25
	$2 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$24 }
	$6 = *($5 + [152])
	goto $label$22 
	
.LABEL $label$23
	$6 = $4
	
.LABEL $label$22
	*($5 + [156]) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$21
	if ( (*($14) & [1]) ){ goto $label$30 }
	if ( (*($13) & [1]) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	CALL _ZdlPv(*(($5 + [192])))
	if ( ((*($13) & [1]) == 0) ){ goto $label$28 }
	
.LABEL $label$29
	CALL _ZdlPv(*(($5 + [180])))
	$6 = *($5 + [256])
	if ( $6 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$6 = *($5 + [256])
	if ( ($6 == 0) ){ goto $label$26 }
	
.LABEL $label$27
	*(($5 + [260])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$26
	if ( ((*($9) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [228])))
	$global$0 = ($5 + [320])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [320])
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	int_64 $25
	$2 = ($global$0 - [160])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	*($1) = CALL $103($6, [20])
	$7 = CALL $104($6, *($5 + [4]))
	*($1 + [16]) = [10]
	*($1 + [8]) = $7
	$7 = (uint_64)*(*($5 + [4])) >> (uint_64)(int_64)8
	if ( (int_64)($7) == 0) ){ goto $label$4 }
	$8 = [0]
	
.LOOP $label$6:
	*((($3 + [64]) + ($9 = $8))) = $7
	$8 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[5]) ){ goto $label$5 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($3 + [104])) = [0]
	*($3 + [96]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$3 }
	*($3 + [96]) = ($8 << [1])
	$10 = (($3 + [96]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*((($3 + [96]) + [8])) = [0]
	*($3 + [96]) = (int_64)0
	*($3 + [96]) = [0]
	$9 = (($3 + [96]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$11 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($11)
	*($3 + [96]) = ($11 | [1])
	*($3 + [104]) = $10
	*($3 + [100]) = $8
	
.LABEL $label$2
	$11 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$7:
	*(($10 + $9)) = *((($3 + [64]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$7 }
	$9 = ($10 + $8)
	
.LABEL $label$1
	*($9) = [0]
	$8 = ($1 + [20])
	if ( (*($1 + [20]) & [1]) ){ goto $label$9 }
	*($8) = [0]
	goto $label$8 
	
.LABEL $label$9
	*(*(($1 + [28]))) = [0]
	*(($1 + [24])) = [0]
	
.LABEL $label$8
	CALL $124($8, [0])
	*(($8 + [8])) = *((($3 + [96]) + [8]))
	*($8) = *($3 + [96])
	$7 = *(*(($5 + [4])))
	$12 = *(*($5 + [8]) + [36])
	*($1 + [40]) = $12
	*($1 + [32]) = $7
	*($1 + [48]) = $12
	*($1 + [56]) = CALL current_time()
	$7 = CALL current_time()
	$10 = *($1 + [112])
	$9 = *($5 + [12])
	*($1 + [112]) = *($9 + [40])
	*($9 + [40]) = $10
	$10 = ($1 + [116])
	$11 = *($10)
	$13 = ($9 + [44])
	*($10) = *($13)
	*($13) = $11
	$10 = ($1 + [120])
	$11 = *($10)
	$13 = ($9 + [48])
	*($10) = *($13)
	*($13) = $11
	*($1 + [88]) = [0]
	*($1 + [104]) = ((int_64)$7 + (int_64)((int_64)*($9 + [53]) * (int_64)1000000))
	*($1 + [124]) = *(*($5 + [12]) + [52])
	*($1 + [128]) = *(*($5 + [8]) + [32])
	$7 = CALL current_time()
	*(($3 + [124])) = (int_64)0
	*((($3 + [96]) + [44])) = (int_64)0
	*(($3 + [148])) = (int_64)0
	*($3 + [108]) = [0]
	*($3 + [112]) = [0]
	*($3 + [116 align=4]) = (int_64)0
	*($3 + [132 align=4]) = (int_64)0
	*($3 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	$7 = *($6)
	*($3 + [32]) = [18013]
	*($3 + [36]) = CALL $147([18013])
	*($3 + [24]) = *($3 + [32])
	*($3 + [72]) = *(CALL $2(($3 + [64]), ($3 + [24])))
	*($3 + [64]) = $7
	$10 = ($3 + [132])
	$9 = *($5 + [12])
	$11 = *($9 + [4])
	if ( ($11 & [1]) ){ goto $label$11 }
	$14 = uint_32($11 >> [1])
	$9 = (($9 + [4]) + [1])
	goto $label$10 
	
.LABEL $label$11
	$14 = *(($9 + [8]))
	$9 = *(($9 + [12]))
	
.LABEL $label$10
	$11 = ($1 + [16])
	$13 = ($1 + [8])
	$15 = ($1 + [128])
	$16 = ($1 + [124])
	$17 = ($1 + [112])
	$18 = ($1 + [88])
	$19 = ($1 + [104])
	$20 = ($1 + [56])
	$21 = ($1 + [48])
	$22 = ($1 + [40])
	$23 = ($1 + [32])
	*($3 + [52]) = $14
	*($3 + [48]) = $9
	*($3 + [16]) = *($3 + [48])
	$9 = CALL $2(($3 + [56]), ($3 + [16]))
	*($3 + [88]) = [19010]
	*($3 + [92]) = CALL $147([19010])
	*($3 + [8]) = *($3 + [88])
	*($3 + [88]) = *(CALL $2(($3 + [32]), ($3 + [8])))
	*($3 + [32]) = *($1)
	*($3 + [40]) = *($6)
	CALL $105($10, ($3 + [64]), $9, ($3 + [88]), ($3 + [32]))
	$7 = *($1)
	*(($3 + [116])) = (*(*(($5 + [12])) + [53]) + *(($1 + [124])))
	*($3 + [72]) = (int_64)0
	*($3 + [64]) = ((int_64)$7 + (int_64)10000)
	$7 = *($6)
	CALL $32(($3 + [32]), ($3 + [96]))
	$9 = *($3 + [32])
	CALL send_deferred(($3 + [64]), $7, $9, (*($3 + [36]) - $9), [1])
	$9 = *($3 + [32])
	if ( ($9 == 0) ){ goto $label$12 }
	*($3 + [36]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$12
	CALL $34(($3 + [96]))
	*($3 + [32]) = [0]
	*($3 + [64]) = ($3 + [32])
	*($3 + [100]) = $13
	*($3 + [104]) = $11
	*($3 + [108]) = $8
	*($3 + [112]) = $23
	*($3 + [116]) = $22
	*($3 + [120]) = $21
	*($3 + [124]) = $20
	*($3 + [136]) = $18
	*($3 + [144]) = $19
	*($3 + [148]) = $17
	*($3 + [152]) = $16
	*($3 + [156]) = $15
	*($3 + [96]) = $1
	$5 = ($1 + [64])
	*($3 + [128]) = $5
	$6 = ($1 + [76])
	*($3 + [132]) = $6
	$14 = ($1 + [96])
	*($3 + [140]) = $14
	CALL $101(($3 + [96]), ($3 + [64]))
	$10 = *($3 + [32])
	if ( ($10 <= [513]) ){ goto $label$14 }
	$9 = CALL $152($10)
	goto $label$13 
	
.LABEL $label$14
	$9 = ($2 - (($10 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$13
	*($3 + [68]) = $9
	*($3 + [64]) = $9
	*($3 + [72]) = ($9 + $10)
	*($3 + [32]) = ($3 + [64])
	*($3 + [100]) = $13
	*($3 + [96]) = $1
	*($3 + [104]) = $11
	*($3 + [108]) = $8
	*($3 + [112]) = $23
	*($3 + [116]) = $22
	*($3 + [120]) = $21
	*($3 + [124]) = $20
	*($3 + [128]) = $5
	*($3 + [132]) = $6
	*($3 + [136]) = $18
	*($3 + [140]) = $14
	*($3 + [144]) = $19
	*($3 + [148]) = $17
	*($3 + [152]) = $16
	*($3 + [156]) = $15
	CALL $102(($3 + [96]), ($3 + [32]))
	$7 = *($1)
	*($1 + [136]) = CALL db_store_i64(*($4 + [8]), (int_64)-6147718988072747008, *(*($0 + [8])), $7, $9, $10)
	if ( ($10 <= [513]) ){ goto $label$15 }
	CALL $156($9)
	
.LABEL $label$15
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$16 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	$9 = ($4 + [8])
	$7 = *($9)
	$10 = *(($0 + [8]))
	$12 = *($10)
	$24 = *($1)
	*($3 + [96]) = *(($1 + [8]))
	*($1 + [140]) = CALL db_idx64_store($7, (int_64)-6147718988072747008, $12, $24, ($3 + [96]))
	$12 = *($10)
	$24 = *($9)
	$25 = *($1)
	$10 = *(($1 + [28]))
	$11 = ($9 & [1])
	$9 = *(($1 + [20]))
	$9 = ( *(($1 + [24])) ? uint_32($9 >> [1]) : $11 )
	if ( ($9 <= [8]) ){ goto $label$20 }
	CALL eosio_assert([0], [18171])
	goto $label$19 
	
.LABEL $label$20
	if ( ($9 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$11 = ( $10 ? ($8 + [1]) : $11 )
	$7 = (int_64)0
	
.LOOP $label$21:
	$10 = (($11 + $9) + [-1])
	$8 = *($10)
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [18216])
	$8 = *($10)
	
.LABEL $label$22
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$21 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$17 
	
.LABEL $label$18
	$7 = (int_64)0
	
.LABEL $label$17
	*($3 + [96]) = ((int_64)$7 | (int_64)*(($1 + [32])))
	*(($1 + [144])) = CALL db_idx64_store($24, (int_64)-6147718988072747007, $12, $25, ($3 + [96]))
	$global$0 = ($3 + [160])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [240])
	$global$0 = $2
	$3 = [0]
	*(($2 + [192])) = [0]
	*($2 + [176]) = (int_64)-1
	*($2 + [196]) = [0]
	$4 = *($0)
	*($2 + [160]) = $4
	*($2 + [168]) = $4
	*($2 + [184]) = (int_64)0
	$5 = CALL db_lowerbound_i64($4, $4, (int_64)-6147718988072747008, (int_64)0)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $25(($2 + [160]), $5)
	$3 = *($6 + [20])
	if ( (($3 & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = ($2 + [160])
	goto $label$2 
	
.LABEL $label$4
	$7 = [10]
	goto $label$1 
	
.LABEL $label$3
	$7 = [8]
	goto $label$1 
	
.LABEL $label$2
	$7 = [12]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$96 
	
.LABEL $label$98
	$6 = CALL $25(($2 + [160]), $3)
	$3 = *($6 + [20])
	if ( ($3 & [1]) ){ goto $label$43 }
	$7 = [10]
	goto $label$6 
	
.LABEL $label$97
	$8 = (($6 + [20]) + [1])
	$3 = uint_32($3 >> [1])
	if ( ((uint_32)$3 >= (uint_32)[8]) ){ goto $label$39 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$96
	if ( $3 ){ goto $label$40 }
	$7 = [54]
	goto $label$6 
	
.LABEL $label$95
	$4 = (int_64)0
	goto $label$41 
	
.LABEL $label$94
	$8 = *(($6 + [28]))
	$3 = *(($6 + [24]))
	if ( ($3 <= [8]) ){ goto $label$42 }
	$7 = [9]
	goto $label$6 
	
.LABEL $label$93
	CALL eosio_assert([0], [18171])
	$7 = [1]
	goto $label$6 
	
.LABEL $label$92
	$4 = (int_64)0
	$7 = [2]
	goto $label$6 
	
.LABEL $label$91
	$9 = (($8 + $3) + [-1])
	$5 = *($9)
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$37 }
	$7 = [53]
	goto $label$6 
	
.LABEL $label$90
	CALL eosio_assert([0], [18216])
	$5 = *($9)
	$7 = [3]
	goto $label$6 
	
.LABEL $label$89
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$38 }
	$7 = [4]
	goto $label$6 
	
.LABEL $label$88
	$4 = ((int_64)$4 << (int_64)8)
	$7 = [5]
	goto $label$6 
	
.LABEL $label$87
	if ( ((int_64)((int_64)$4 | (int_64)*($6 + [32])) != (int_64)*($1)) ){ goto $label$36 }
	$7 = [51]
	goto $label$6 
	
.LABEL $label$86
	if ( ((int_32)*($6 + [16]) == (int_32)[10]) ){ goto $label$35 }
	$7 = [6]
	goto $label$6 
	
.LABEL $label$85
	CALL eosio_assert([1], [18980])
	$3 = CALL db_next_i64(*($6 + [136]), ($2 + [64]))
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$34 }
	$7 = [11]
	goto $label$6 
	
.LABEL $label$84
	$3 = [0]
	$8 = ($2 + [160])
	goto $label$33 
	
.LABEL $label$83
	$8 = ($2 + [160])
	$3 = $6
	$7 = [12]
	goto $label$6 
	
.LABEL $label$82
	CALL eosio_assert(($3 == 0), [17756])
	*((($2 + [120]) + [32])) = [0]
	*($2 + [136]) = (int_64)-1
	*($2 + [144]) = (int_64)0
	$4 = *($0)
	*($2 + [120]) = $4
	*($2 + [128]) = $4
	$3 = CALL $19(($2 + [120]), (int_64)1, [17375])
	*($2 + [64]) = *($3)
	$6 = CALL $120((($2 + [64]) | [4]), ($3 + [4]))
	$4 = *($3 + [16])
	$10 = *(($3 + [24]))
	$11 = *(($3 + [32]))
	*((($2 + [64]) + [44])) = (int_64)0
	*((($2 + [64]) + [32])) = $11
	*((($2 + [64]) + [24])) = $10
	*($2 + [104]) = [0]
	*($2 + [80]) = $4
	$5 = (*(($3 + [44])) - *($3 + [40]))
	if ( ($5 == 0) ){ goto $label$32 }
	$7 = [13]
	goto $label$6 
	
.LABEL $label$81
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$31 }
	$7 = [14]
	goto $label$6 
	
.LABEL $label$80
	$9 = CALL _Znwj($5)
	*((($2 + [64]) + [40])) = $9
	*(($2 + [112])) = ($9 + (int_32($5 >> [1]) << [1]))
	*(($5 = (($2 + [64]) + [44]))) = $9
	$12 = *(($3 + [40]))
	$13 = (*(($3 + [44])) - $12)
	if ( ((int_32)$13 < (int_32)[1]) ){ goto $label$30 }
	$7 = [49]
	goto $label$6 
	
.LABEL $label$79
	CALL memcpy($9, $12, $13)
	*($5) = (*($5) + $13)
	$7 = [15]
	goto $label$6 
	
.LABEL $label$78
	*((($2 + [64]) + [54])) = *(($3 + [54]))
	*($2 + [116]) = *($3 + [52])
	$3 = CALL $20($0, $1)
	*($2 + [16]) = *($3)
	$9 = CALL $120((($2 + [16]) | [4]), ($3 + [4]))
	$13 = CALL $120((($2 + [16]) + [16]), ($3 + [16]))
	*((($2 + [16]) + [44])) = *(($3 + [44]))
	*((($2 + [16]) + [36])) = *(($3 + [36]))
	*($2 + [44 align=4]) = *($3 + [28 align=4])
	$4 = *($0)
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = ($2 + [16])
	*($2 + [12]) = ($2 + [64])
	*($2 + [232]) = $4
	CALL eosio_assert(((int_64)*($2 + [160]) == (int_64)CALL $fimport$10()), [18584])
	*($2 + [212]) = $2
	*($2 + [208]) = ($2 + [160])
	*($2 + [216]) = ($2 + [232])
	*(($3 = CALL _Znwj([152])) + [28]) = [0]
	*($3 + [20 align=4]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72 align=4]) = (int_64)0
	*($3 + [80 align=4]) = (int_64)0
	*($3 + [112 align=4]) = (int_64)0
	*($3 + [120]) = [0]
	*($3 + [132]) = $8
	CALL $43(($2 + [208]), $3)
	*($2 + [224]) = $3
	$4 = *($3)
	*($2 + [208]) = $4
	$8 = *($3 + [136])
	*($2 + [204]) = $8
	$1 = ($2 + [188])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*((($2 + [160]) + [32]))) ){ goto $label$29 }
	$7 = [48]
	goto $label$6 
	
.LABEL $label$77
	*($5 + [8]) = $4
	*($5 + [16]) = $8
	*($2 + [224]) = [0]
	*($5) = $3
	*($1) = ($5 + [24])
	$3 = *($2 + [224])
	*($2 + [224]) = [0]
	if ( ($3 == 0) ){ goto $label$27 }
	$7 = [17]
	goto $label$6 
	
.LABEL $label$76
	$5 = *($3 + [112])
	if ( ($5 == 0) ){ goto $label$26 }
	$7 = [18]
	goto $label$6 
	
.LABEL $label$75
	*(($3 + [116])) = $5
	CALL _ZdlPv($5)
	$7 = [19]
	goto $label$6 
	
.LABEL $label$74
	$5 = *($3 + [76])
	if ( ($5 == 0) ){ goto $label$25 }
	$7 = [20]
	goto $label$6 
	
.LABEL $label$73
	*(($3 + [80])) = $5
	CALL _ZdlPv($5)
	$7 = [21]
	goto $label$6 
	
.LABEL $label$72
	$5 = *($3 + [64])
	if ( ($5 == 0) ){ goto $label$24 }
	$7 = [22]
	goto $label$6 
	
.LABEL $label$71
	*(($3 + [68])) = $5
	CALL _ZdlPv($5)
	$7 = [23]
	goto $label$6 
	
.LABEL $label$70
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$23 }
	$7 = [24]
	goto $label$6 
	
.LABEL $label$69
	CALL _ZdlPv(*(($3 + [28])))
	$7 = [25]
	goto $label$6 
	
.LABEL $label$68
	CALL _ZdlPv($3)
	$3 = [1]
	if ( ((*($13) & [1]) == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$67
	CALL $44(($2 + [184]), ($2 + [224]), ($2 + [208]), ($2 + [204]))
	$3 = *($2 + [224])
	*($2 + [224]) = [0]
	if ( $3 ){ goto $label$28 }
	$7 = [47]
	goto $label$6 
	
.LABEL $label$66
	$3 = [1]
	if ( (*($13) & [1]) ){ goto $label$22 }
	$7 = [46]
	goto $label$6 
	
.LABEL $label$65
	if ( (*($9) & $3) ){ goto $label$19 }
	$7 = [45]
	goto $label$6 
	
.LABEL $label$64
	$3 = *($2 + [104])
	if ( ($3 == 0) ){ goto $label$17 }
	$7 = [28]
	goto $label$6 
	
.LABEL $label$63
	*(($2 + [108])) = $3
	CALL _ZdlPv($3)
	$7 = [29]
	goto $label$6 
	
.LABEL $label$62
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	$7 = [30]
	goto $label$6 
	
.LABEL $label$61
	CALL _ZdlPv(*(($2 + [76])))
	$7 = [31]
	goto $label$6 
	
.LABEL $label$60
	$8 = *($2 + [144])
	if ( ($8 == 0) ){ goto $label$13 }
	$7 = [32]
	goto $label$6 
	
.LABEL $label$59
	$6 = ($2 + [148])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$12 }
	$7 = [33]
	goto $label$6 
	
.LABEL $label$58
	$7 = [34]
	goto $label$6 
	
.LABEL $label$57
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	$7 = [35]
	goto $label$6 
	
.LABEL $label$56
	$9 = *($3 + [40])
	if ( ($9 == 0) ){ goto $label$9 }
	$7 = [36]
	goto $label$6 
	
.LABEL $label$55
	*(($3 + [44])) = $9
	CALL _ZdlPv($9)
	$7 = [37]
	goto $label$6 
	
.LABEL $label$54
	if ( ((*($3 + [4]) & [1]) == 0) ){ goto $label$8 }
	$7 = [38]
	goto $label$6 
	
.LABEL $label$53
	CALL _ZdlPv(*(($3 + [12])))
	$7 = [39]
	goto $label$6 
	
.LABEL $label$52
	CALL _ZdlPv($3)
	$7 = [40]
	goto $label$6 
	
.LABEL $label$51
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$11 }
	$7 = [41]
	goto $label$6 
	
.LABEL $label$50
	$3 = *(($2 + [144]))
	goto $label$7 
	
.LABEL $label$49
	CALL _ZdlPv(*(($2 + [40])))
	if ( ((*($9) & $3) == 0) ){ goto $label$18 }
	$7 = [27]
	goto $label$6 
	
.LABEL $label$48
	CALL _ZdlPv(*(($2 + [28])))
	$3 = *($2 + [104])
	if ( $3 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$47
	$3 = $8
	$7 = [42]
	goto $label$6 
	
.LABEL $label$46
	*($6) = $8
	CALL _ZdlPv($3)
	$7 = [43]
	goto $label$6 
	
.LABEL $label$45
	CALL $36(($2 + [184]))
	$global$0 = ($2 + [240])
	return (unreachable)
	
.LABEL $label$44
	CALL $135(($2 + [104]))
	
.LABEL $label$43
	$7 = [8]
	goto $label$6 
	
.LABEL $label$42
	$7 = [0]
	goto $label$6 
	
.LABEL $label$41
	$7 = [5]
	goto $label$6 
	
.LABEL $label$40
	$7 = [1]
	goto $label$6 
	
.LABEL $label$39
	$7 = [9]
	goto $label$6 
	
.LABEL $label$38
	$7 = [2]
	goto $label$6 
	
.LABEL $label$37
	$7 = [3]
	goto $label$6 
	
.LABEL $label$36
	$7 = [6]
	goto $label$6 
	
.LABEL $label$35
	$7 = [52]
	goto $label$6 
	
.LABEL $label$34
	$7 = [7]
	goto $label$6 
	
.LABEL $label$33
	$7 = [12]
	goto $label$6 
	
.LABEL $label$32
	$7 = [15]
	goto $label$6 
	
.LABEL $label$31
	$7 = [50]
	goto $label$6 
	
.LABEL $label$30
	$7 = [15]
	goto $label$6 
	
.LABEL $label$29
	$7 = [16]
	goto $label$6 
	
.LABEL $label$28
	$7 = [17]
	goto $label$6 
	
.LABEL $label$27
	$7 = [47]
	goto $label$6 
	
.LABEL $label$26
	$7 = [19]
	goto $label$6 
	
.LABEL $label$25
	$7 = [21]
	goto $label$6 
	
.LABEL $label$24
	$7 = [23]
	goto $label$6 
	
.LABEL $label$23
	$7 = [25]
	goto $label$6 
	
.LABEL $label$22
	$7 = [26]
	goto $label$6 
	
.LABEL $label$21
	$7 = [46]
	goto $label$6 
	
.LABEL $label$20
	$7 = [26]
	goto $label$6 
	
.LABEL $label$19
	$7 = [27]
	goto $label$6 
	
.LABEL $label$18
	$7 = [45]
	goto $label$6 
	
.LABEL $label$17
	$7 = [29]
	goto $label$6 
	
.LABEL $label$16
	$7 = [29]
	goto $label$6 
	
.LABEL $label$15
	$7 = [28]
	goto $label$6 
	
.LABEL $label$14
	$7 = [31]
	goto $label$6 
	
.LABEL $label$13
	$7 = [43]
	goto $label$6 
	
.LABEL $label$12
	$7 = [44]
	goto $label$6 
	
.LABEL $label$11
	$7 = [34]
	goto $label$6 
	
.LABEL $label$10
	$7 = [40]
	goto $label$6 
	
.LABEL $label$9
	$7 = [37]
	goto $label$6 
	
.LABEL $label$8
	$7 = [39]
	goto $label$6 
	
.LABEL $label$7
	$7 = [42]
	goto $label$6 
	$7
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL $42($0, $1)
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [132]) == (int_32)$0), [18824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [18870])
	$5 = ($1 + [20])
	$6 = ($1 + [8])
	$7 = *($6)
	$8 = *($1 + [20])
	if ( ($8 & [1]) ){ goto $label$5 }
	$9 = ($5 + [1])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = *(($1 + [28]))
	$8 = *(($1 + [24]))
	if ( ($8 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [18171])
	goto $label$2 
	
.LABEL $label$3
	if ( $8 ){ goto $label$2 }
	$10 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$10 = (int_64)0
	
.LOOP $label$6:
	$11 = (($9 + $8) + [-1])
	$12 = *($11)
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [18216])
	$12 = *($11)
	
.LABEL $label$7
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$6 }
	$10 = ((int_64)$10 << (int_64)8)
	
.LABEL $label$1
	*($1 + [16]) = [30]
	*($4 + [24]) = $7
	*($4 + [32]) = ((int_64)$10 | (int_64)*($1 + [32]))
	$7 = *($1)
	CALL eosio_assert([1], [18921])
	*($4 + [40]) = [0]
	*($4 + [8]) = ($4 + [40])
	*($4 + [52]) = $6
	*($4 + [48]) = $1
	$11 = ($1 + [16])
	*($4 + [56]) = $11
	*($4 + [60]) = $5
	$13 = ($1 + [32])
	*($4 + [64]) = $13
	$9 = ($1 + [40])
	*($4 + [68]) = $9
	$14 = ($1 + [48])
	*($4 + [72]) = $14
	$15 = ($1 + [56])
	*($4 + [76]) = $15
	$16 = ($1 + [64])
	*($4 + [80]) = $16
	$17 = ($1 + [76])
	*($4 + [84]) = $17
	$18 = ($1 + [88])
	*($4 + [88]) = $18
	$19 = ($1 + [96])
	*($4 + [92]) = $19
	$20 = ($1 + [104])
	*($4 + [96]) = $20
	$21 = ($1 + [112])
	*($4 + [100]) = $21
	$22 = ($1 + [124])
	*($4 + [104]) = $22
	$23 = ($1 + [128])
	*($4 + [108]) = $23
	CALL $101(($4 + [48]), ($4 + [8]))
	$12 = *($4 + [40])
	if ( ($12 <= [513]) ){ goto $label$9 }
	$8 = CALL $152($12)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($3 - (($12 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$8
	*($4 + [12]) = $8
	*($4 + [8]) = $8
	*($4 + [16]) = ($8 + $12)
	*($4 + [40]) = ($4 + [8])
	*($4 + [52]) = $6
	*($4 + [56]) = $11
	*($4 + [60]) = $5
	*($4 + [64]) = $13
	*($4 + [68]) = $9
	*($4 + [72]) = $14
	*($4 + [76]) = $15
	*($4 + [80]) = $16
	*($4 + [84]) = $17
	*($4 + [88]) = $18
	*($4 + [92]) = $19
	*($4 + [96]) = $20
	*($4 + [100]) = $21
	*($4 + [104]) = $22
	*($4 + [108]) = $23
	*($4 + [48]) = $1
	CALL $102(($4 + [48]), ($4 + [40]))
	CALL db_update_i64(*($1 + [136]), $2, $8, $12)
	if ( ($12 <= [513]) ){ goto $label$10 }
	CALL $156($8)
	
.LABEL $label$10
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($4 + [48]) = *($6)
	if ( (CALL $146(($4 + [24]), ($4 + [48]), [8]) == 0) ){ goto $label$12 }
	$8 = *($1 + [140])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$13 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747008, ($4 + [40]), $7)
	*(($1 + [140])) = $8
	
.LABEL $label$13
	CALL db_idx64_update($8, $2, ($4 + [48]))
	
.LABEL $label$12
	$8 = *($5)
	if ( ($8 & [1]) ){ goto $label$18 }
	$9 = ($5 + [1])
	$5 = ($4 + [32])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$9 = *(($1 + [28]))
	$5 = ($4 + [32])
	$8 = *(($1 + [24]))
	if ( ($8 <= [8]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL eosio_assert([0], [18171])
	goto $label$15 
	
.LABEL $label$16
	if ( $8 ){ goto $label$15 }
	$10 = (int_64)0
	goto $label$14 
	
.LABEL $label$15
	$10 = (int_64)0
	
.LOOP $label$19:
	$11 = (($9 + $8) + [-1])
	$12 = *($11)
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [18216])
	$12 = *($11)
	
.LABEL $label$20
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$19 }
	$10 = ((int_64)$10 << (int_64)8)
	
.LABEL $label$14
	*($4 + [48]) = ((int_64)$10 | (int_64)*($13))
	if ( (CALL $146($5, ($4 + [48]), [8]) == 0) ){ goto $label$21 }
	$12 = ($1 + [144])
	$8 = *($12)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747007, ($4 + [40]), $7)
	*($12) = $8
	
.LABEL $label$22
	CALL db_idx64_update($8, $2, ($4 + [48]))
	
.LABEL $label$21
	$global$0 = ($4 + [112])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [144])
	$global$0 = $4
	$5 = CALL $18($0)
	*($4 + [88]) = *($5)
	$6 = CALL $120((($4 + [88]) | [4]), ($5 + [4]))
	$7 = *(($5 + [24]))
	$8 = *(($5 + [32]))
	$9 = *($5 + [16])
	*((($4 + [88]) + [44])) = (int_64)0
	*((($4 + [88]) + [32])) = $8
	*((($4 + [88]) + [24])) = $7
	$10 = [0]
	*($4 + [128]) = [0]
	*($4 + [104]) = $9
	$11 = (*(($5 + [44])) - *($5 + [40]))
	if ( ($11 == 0) ){ goto $label$5 }
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$4 }
	$12 = CALL _Znwj($11)
	*((($4 + [88]) + [40])) = $12
	*(($4 + [136])) = ($12 + (int_32($11 >> [1]) << [1]))
	*(($11 = (($4 + [88]) + [44]))) = $12
	$13 = *(($5 + [40]))
	$14 = (*(($5 + [44])) - $13)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($12, $13, $14)
	*($11) = (*($11) + $14)
	
.LABEL $label$5
	*((($4 + [88]) + [54])) = *(($5 + [54]))
	*($4 + [140]) = *($5 + [52])
	$5 = CALL $20($0, ($3 + [8]))
	*($4 + [40]) = *($5)
	$12 = CALL $120((($4 + [40]) | [4]), ($5 + [4]))
	$14 = CALL $120((($4 + [40]) + [16]), ($5 + [16]))
	*((($4 + [40]) + [44])) = *(($5 + [44]))
	*((($4 + [40]) + [36])) = *(($5 + [36]))
	*($4 + [68 align=4]) = *($5 + [28 align=4])
	$7 = CALL current_receiver()
	$5 = *($6)
	$11 = ($5 & [1])
	*($4 + [24]) = ( *((($4 + [88]) + [12])) ? ($6 + [1]) : $11 )
	*($4 + [28]) = ( *((($4 + [88]) + [8])) ? uint_32($5 >> [1]) : $11 )
	*($4 + [8]) = *($4 + [24])
	CALL eosio_assert(((int_64)$7 == (int_64)*(CALL $2(($4 + [32]), ($4 + [8])))), [17859])
	$7 = *($0 + [8])
	$5 = *($12)
	$11 = ($5 & [1])
	*($4 + [16]) = ( *((($4 + [40]) + [12])) ? ($12 + [1]) : $11 )
	*($4 + [20]) = ( *((($4 + [40]) + [8])) ? uint_32($5 >> [1]) : $11 )
	*($4) = *($4 + [16])
	CALL eosio_assert(((int_64)$7 == (int_64)*(CALL $2(($4 + [32]), $4))), [17879])
	CALL eosio_assert(((int_64)*($2) == (int_64)*($0)), [17901])
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$10 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $0 ){ goto $label$10 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [8362])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($3) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8379])
	if ( (*($14) & [1]) ){ goto $label$12 }
	if ( (*($12) & [1]) ){ goto $label$11 }
	goto $label$3 
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [64])))
	if ( ((*($12) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [52])))
	$5 = *($4 + [128])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $135(($4 + [128]))
	
.LABEL $label$3
	$5 = *($4 + [128])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*(($4 + [132])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$1
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($4 + [100])))
	
.LABEL $label$13
	$global$0 = ($4 + [144])
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [132]) == (int_32)$0), [18824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [18870])
	$5 = ($1 + [20])
	$6 = ($1 + [8])
	$7 = *($6)
	$8 = *($1 + [20])
	if ( ($8 & [1]) ){ goto $label$5 }
	$9 = ($5 + [1])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = *(($1 + [28]))
	$8 = *(($1 + [24]))
	if ( ($8 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [18171])
	goto $label$2 
	
.LABEL $label$3
	if ( $8 ){ goto $label$2 }
	$10 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$10 = (int_64)0
	
.LOOP $label$6:
	$11 = (($9 + $8) + [-1])
	$12 = *($11)
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [18216])
	$12 = *($11)
	
.LABEL $label$7
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$6 }
	$10 = ((int_64)$10 << (int_64)8)
	
.LABEL $label$1
	*($1 + [16]) = [15]
	*($4 + [24]) = $7
	*($4 + [32]) = ((int_64)$10 | (int_64)*($1 + [32]))
	$7 = *($1)
	*($1 + [96]) = CALL current_time()
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [18921])
	*($4 + [40]) = [0]
	*($4 + [8]) = ($4 + [40])
	*($4 + [52]) = $6
	*($4 + [48]) = $1
	$11 = ($1 + [16])
	*($4 + [56]) = $11
	*($4 + [60]) = $5
	$13 = ($1 + [32])
	*($4 + [64]) = $13
	$9 = ($1 + [40])
	*($4 + [68]) = $9
	$14 = ($1 + [48])
	*($4 + [72]) = $14
	$15 = ($1 + [56])
	*($4 + [76]) = $15
	$16 = ($1 + [64])
	*($4 + [80]) = $16
	$17 = ($1 + [76])
	*($4 + [84]) = $17
	$18 = ($1 + [88])
	*($4 + [88]) = $18
	$19 = ($1 + [96])
	*($4 + [92]) = $19
	$20 = ($1 + [104])
	*($4 + [96]) = $20
	$21 = ($1 + [112])
	*($4 + [100]) = $21
	$22 = ($1 + [124])
	*($4 + [104]) = $22
	$23 = ($1 + [128])
	*($4 + [108]) = $23
	CALL $101(($4 + [48]), ($4 + [8]))
	$12 = *($4 + [40])
	if ( ($12 <= [513]) ){ goto $label$9 }
	$8 = CALL $152($12)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($3 - (($12 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$8
	*($4 + [12]) = $8
	*($4 + [8]) = $8
	*($4 + [16]) = ($8 + $12)
	*($4 + [40]) = ($4 + [8])
	*($4 + [52]) = $6
	*($4 + [56]) = $11
	*($4 + [60]) = $5
	*($4 + [64]) = $13
	*($4 + [68]) = $9
	*($4 + [72]) = $14
	*($4 + [76]) = $15
	*($4 + [80]) = $16
	*($4 + [84]) = $17
	*($4 + [88]) = $18
	*($4 + [92]) = $19
	*($4 + [96]) = $20
	*($4 + [100]) = $21
	*($4 + [104]) = $22
	*($4 + [108]) = $23
	*($4 + [48]) = $1
	CALL $102(($4 + [48]), ($4 + [40]))
	CALL db_update_i64(*($1 + [136]), $2, $8, $12)
	if ( ($12 <= [513]) ){ goto $label$10 }
	CALL $156($8)
	
.LABEL $label$10
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($4 + [48]) = *($6)
	if ( (CALL $146(($4 + [24]), ($4 + [48]), [8]) == 0) ){ goto $label$12 }
	$8 = *($1 + [140])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$13 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747008, ($4 + [40]), $7)
	*(($1 + [140])) = $8
	
.LABEL $label$13
	CALL db_idx64_update($8, $2, ($4 + [48]))
	
.LABEL $label$12
	$8 = *($5)
	if ( ($8 & [1]) ){ goto $label$18 }
	$9 = ($5 + [1])
	$5 = ($4 + [32])
	$8 = uint_32($8 >> [1])
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$9 = *(($1 + [28]))
	$5 = ($4 + [32])
	$8 = *(($1 + [24]))
	if ( ($8 <= [8]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL eosio_assert([0], [18171])
	goto $label$15 
	
.LABEL $label$16
	if ( $8 ){ goto $label$15 }
	$10 = (int_64)0
	goto $label$14 
	
.LABEL $label$15
	$10 = (int_64)0
	
.LOOP $label$19:
	$11 = (($9 + $8) + [-1])
	$12 = *($11)
	if ( ((($12 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [18216])
	$12 = *($11)
	
.LABEL $label$20
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$19 }
	$10 = ((int_64)$10 << (int_64)8)
	
.LABEL $label$14
	*($4 + [48]) = ((int_64)$10 | (int_64)*($13))
	if ( (CALL $146($5, ($4 + [48]), [8]) == 0) ){ goto $label$21 }
	$12 = ($1 + [144])
	$8 = *($12)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747007, ($4 + [40]), $7)
	*($12) = $8
	
.LABEL $label$22
	CALL db_idx64_update($8, $2, ($4 + [48]))
	
.LABEL $label$21
	$global$0 = ($4 + [112])
}

void .FUNC $45 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-6147718988072747008, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $25(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($4 + [132]) == (int_32)($2 + [8])), [18501])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [17802])
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)[10]), [17830])
	$3 = *($0)
	CALL eosio_assert($5, [18789])
	CALL $46(($2 + [8]), $4, $3)
	CALL $36(($2 + [32]))
	$global$0 = ($2 + [48])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $93(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $146(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	$7 = ($global$0 - [144])
	$global$0 = $7
	*($7 + [100]) = $4
	*($7 + [107]) = $3
	*($7 + [96]) = $5
	*($7 + [88]) = $6
	CALL require_auth(*($0))
	*(($7 + [80])) = [0]
	*($7 + [64]) = (int_64)-1
	*($7 + [72]) = (int_64)0
	*($7 + [84]) = [0]
	$6 = *($0)
	*($7 + [48]) = $6
	*($7 + [56]) = $6
	*($7 + [40]) = ($7 + [48])
	$5 = *($2)
	if ( ($5 & [1]) ){ goto $label$5 }
	$8 = ($2 + [1])
	$5 = uint_32($5 >> [1])
	if ( ((uint_32)$5 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = *($2 + [8])
	$5 = *($2 + [4])
	if ( ($5 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [18171])
	goto $label$2 
	
.LABEL $label$3
	if ( $5 ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	
.LOOP $label$6:
	$4 = (($8 + $5) + [-1])
	$3 = *($4)
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [18216])
	$3 = *($4)
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	$6 = ((int_64)$6 << (int_64)8)
	$3 = *($7 + [107])
	
.LABEL $label$1
	*($7) = ((int_64)$6 | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) & (int_64)255))
	CALL $9(($7 + [32]), ($7 + [40]), $7)
	$6 = *($0)
	$5 = *($7 + [36])
	if ( ($5 == 0) ){ goto $label$10 }
	*($7 + [4]) = $2
	*($7) = $1
	*($7 + [8]) = ($7 + [107])
	*($7 + [12]) = ($7 + [100])
	*($7 + [16]) = ($7 + [96])
	*($7 + [20]) = ($7 + [88])
	CALL eosio_assert([1], [18789])
	CALL $10(*($7 + [40]), $5, $6, $7)
	$4 = *($7 + [72])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($7 + [4]) = $1
	*($7 + [8]) = $2
	*($7) = ($7 + [48])
	*($7 + [12]) = ($7 + [107])
	*($7 + [16]) = ($7 + [100])
	*($7 + [20]) = ($7 + [96])
	*($7 + [24]) = ($7 + [88])
	*($7 + [136]) = $6
	CALL eosio_assert(((int_64)*($7 + [48]) == (int_64)CALL $fimport$10()), [18584])
	*($7 + [116]) = $7
	*($7 + [112]) = ($7 + [48])
	*($7 + [120]) = ($7 + [136])
	*(($5 = CALL _Znwj([64])) + [4 align=4]) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [48]) = ($7 + [48])
	CALL $11(($7 + [112]), $5)
	*($7 + [128]) = $5
	$6 = *($5)
	*($7 + [112]) = $6
	$4 = *($5 + [52])
	*($7 + [108]) = $4
	$8 = ($7 + [76])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($7 + [80]))) ){ goto $label$13 }
	*($3 + [8]) = $6
	*($3 + [16]) = $4
	*($7 + [128]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	$5 = *($7 + [128])
	*($7 + [128]) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $12(($7 + [72]), ($7 + [128]), ($7 + [112]), ($7 + [108]))
	$5 = *($7 + [128])
	*($7 + [128]) = [0]
	if ( $5 ){ goto $label$11 }
	
.LABEL $label$12
	$4 = *($7 + [72])
	if ( ($4 == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$14
	if ( ((*($5 + [4]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [12])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	$4 = *($7 + [72])
	if ( ($4 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$8 = ($7 + [76])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$17 }
	
.LOOP $label$18:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$19 }
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($5 + [24])))
	
.LABEL $label$20
	if ( ((*($5 + [4]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [12])))
	
.LABEL $label$21
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$18 }
	$5 = *(($7 + [72]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $4
	
.LABEL $label$16
	*($8) = $4
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$global$0 = ($7 + [144])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $80(($3 + [8]), $1, $2)
	$4 = *($3 + [12])
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *(($4 + [24]))
	$6 = *($2)
	$7 = ($2 & [1])
	$2 = *($4 + [16])
	$2 = ( *(($4 + [20])) ? uint_32($2 >> [1]) : $7 )
	if ( ($2 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [18171])
	goto $label$4 
	
.LABEL $label$6
	*($0 + [4]) = [0]
	*($0) = $1
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = ( $5 ? ($4 + [17]) : $7 )
	$9 = (int_64)0
	
.LOOP $label$7:
	$7 = (($8 + $2) + [-1])
	$5 = *($7)
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [18216])
	$5 = *($7)
	
.LABEL $label$8
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$9 << (int_64)8) | (int_64)*($4 + [28]))) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$6 == (int_64)((int_64)0 | (int_64)*($4 + [28]))) ){ goto $label$1 }
	
.LABEL $label$2
	*($0 + [4]) = [0]
	*($0) = $1
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($0) = *($3 + [8])
	$global$0 = ($3 + [16])
}

void .FUNC $6 (int_32 $0)
{
	if ( ((*([0] + [8416]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8424]))
	
.LABEL $label$1
}

void .FUNC $7 (int_32 $0)
{
	if ( ((*([0] + [8428]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8436]))
	
.LABEL $label$1
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $120(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [18344])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [18449])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [18382])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [18449])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = CALL $127($1, $2, [0])
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$2 }
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	$4 = CALL $121($3, $1, $4, ($5 - $4), $1)
	$8 = *($7)
	if ( ((int_32)$8 != (int_32)*($6)) ){ goto $label$6 }
	CALL $4($0, $4)
	$4 = ($5 + [1])
	if ( (*($3) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $120($8, $4)
	*($7) = (*($7) + [12])
	$4 = ($5 + [1])
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$4
	$5 = CALL $127($1, $2, $4)
	if ( ((int_32)$5 != (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	$4 = CALL $121($3, $1, $4, ((int_32)$4 ^ (int_32)[-1]), $1)
	$1 = ($0 + [4])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($1) = (*($1) + [12])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	CALL $5($0, $4)
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
}

void .FUNC memory ()
{
	CALL $110()
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = $1
	$3 = CALL transaction_size()
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	$5 = CALL read_transaction($4, $3)
	CALL eosio_assert(((int_32)$3 == (int_32)$5), [8218])
	$6 = $1
	CALL sha256($4, $5, $6)
	$1 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LOOP $label$1:
	$3 = *(($6 + $1))
	CALL $126($0, *((uint_32($3 >> [4]) + [8192])))
	CALL $126($0, *((($3 & [15]) + [8192])))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$1 }
	$2
	$global$0 = ($6 + [32])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18552])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $152($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [12]) = [0]
	*($5 + [4 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [56]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [4])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [52])
	*($3 + [68]) = ($5 + [53])
	*($3 + [72]) = ($5 + [54])
	CALL $84(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $17(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [44])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	*($1) = [1]
	$4 = *($0)
	$6 = *($0 + [4])
	$5 = ($1 + [4])
	CALL $122($5, *($6))
	$7 = *($6 + [12])
	$8 = *(*($6 + [4]))
	$9 = *($6 + [8])
	$10 = *($1 + [40])
	$11 = *($6 + [16])
	*($1 + [40]) = *($11)
	*($11) = $10
	$10 = ($1 + [44])
	$12 = *($10)
	*($10) = *($11 + [4])
	*($11 + [4]) = $12
	$10 = ($1 + [48])
	$12 = *($10)
	*($10) = *($11 + [8])
	*($1 + [24]) = *($9)
	*($11 + [8]) = $12
	*($1 + [16]) = $8
	*($1 + [32]) = *($7)
	*($1 + [52]) = *(*($6 + [20]))
	*($1 + [53]) = *(*($6 + [24]))
	$6 = *($1 + [4])
	$11 = ( *($1 + [8]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($11 + [18])
	$13 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$1 }
	$7 = ($1 + [40])
	$8 = *($1 + [40])
	$11 = *($1 + [44])
	$9 = ($11 - $8)
	$13 = (CASTING uint_64)(uint_32 int_32($9 >> [1]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$3 }
	$6 = (($9 & [-2]) + $6)
	
.LABEL $label$3
	$11 = ($6 + [3])
	if ( ($11 <= [513]) ){ goto $label$5 }
	$6 = CALL $152($11)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($2 - (($11 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $11)
	*($3 + [16]) = $3
	*($3 + [28]) = $5
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = $7
	*($3 + [48]) = ($1 + [52])
	*($3 + [52]) = ($1 + [53])
	*($3 + [56]) = ($1 + [54])
	CALL $90(($3 + [24]), ($3 + [16]))
	$13 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159541906337792, *(*($0 + [8])), $13, $6, $11)
	if ( ((uint_32)$11 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)$13) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $156($6)
	if ( ((uint_64)*($4 + [16]) > (uint_64)$13) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ((int_64)$13 + (int_64)1)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [64])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [18824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [18870])
	$6 = *($1)
	$7 = ($1 + [4])
	CALL $122($7, *($3))
	$8 = *($3 + [12])
	$9 = *(*($3 + [4]))
	$10 = *($3 + [8])
	$11 = *($1 + [40])
	$12 = *($3 + [16])
	*($1 + [40]) = *($12)
	*($12) = $11
	$11 = ($1 + [44])
	$13 = *($11)
	*($11) = *($12 + [4])
	*($12 + [4]) = $13
	$11 = ($1 + [48])
	$13 = *($11)
	*($11) = *($12 + [8])
	*($1 + [24]) = *($10)
	*($12 + [8]) = $13
	*($1 + [16]) = $9
	*($1 + [32]) = *($8)
	*($1 + [52]) = *(*($3 + [20]))
	*($1 + [53]) = *(*($3 + [24]))
	CALL eosio_assert(((int_32)$6 == (int_32)*($1)), [18921])
	$3 = *($1 + [4])
	$12 = ( *($1 + [8]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($12 + [18])
	$14 = (CASTING uint_64)(uint_32 $12)
	$15 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$1 }
	$6 = ($1 + [40])
	$8 = *($1 + [40])
	$12 = *($1 + [44])
	$9 = ($12 - $8)
	$14 = (CASTING uint_64)(uint_32 int_32($9 >> [1]))
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$3 }
	$3 = (($9 & [-2]) + $3)
	
.LABEL $label$3
	$12 = ($3 + [3])
	if ( ($12 <= [513]) ){ goto $label$5 }
	$3 = CALL $152($12)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($4 - (($12 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $12)
	*($5 + [16]) = $5
	*($5 + [28]) = $7
	*($5 + [44]) = $6
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [16])
	*($5 + [36]) = ($1 + [24])
	*($5 + [40]) = ($1 + [32])
	*($5 + [48]) = ($1 + [52])
	*($5 + [52]) = ($1 + [53])
	*($5 + [56]) = ($1 + [54])
	CALL $90(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*(($1 + [60])), $2, $3, $12)
	if ( ((uint_32)$12 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)$15) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $156($3)
	if ( ((uint_64)*($0 + [16]) > (uint_64)$15) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ((int_64)$15 + (int_64)1)
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [64])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [40])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [44])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [18870])
	$6 = ($1 + [17])
	$7 = *(($1 + [24]))
	$8 = ($1 + [16])
	$10 = ($9 & [1])
	$9 = *($1 + [16])
	$9 = ( *(($1 + [20])) ? uint_32($9 >> [1]) : $10 )
	if ( ($9 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [18171])
	goto $label$3 
	
.LABEL $label$4
	if ( ($9 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$11 = ( $7 ? $6 : $10 )
	$12 = (int_64)0
	
.LOOP $label$5:
	$10 = (($11 + $9) + [-1])
	$7 = *($10)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [18216])
	$7 = *($10)
	
.LABEL $label$6
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$5 }
	$12 = ((int_64)$12 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$12 = (int_64)0
	
.LABEL $label$1
	*($5 + [16]) = ((int_64)$12 | (int_64)*($1 + [28]))
	$7 = *($1)
	$10 = ($1 + [4])
	CALL $122($10, *($3))
	CALL $122($8, *($3 + [4]))
	$9 = *(*($3 + [8]))
	*($1 + [32]) = *(*($3 + [12]))
	*($1 + [28]) = $9
	*($1 + [40]) = *(*($3 + [20]))
	*($1 + [36]) = *(*($3 + [16]))
	CALL eosio_assert(((int_32)$7 == (int_32)*($1)), [18921])
	$9 = *($1 + [4])
	$11 = ( *(($1 + [8])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($11 + [19])
	$12 = (CASTING uint_64)(uint_32 $11)
	$11 = ($1 + [40])
	$13 = ($1 + [36])
	$14 = ($1 + [32])
	$3 = ($1 + [28])
	$15 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$7:
	$9 = ($9 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$7 }
	$7 = *(($1 + [16]))
	$7 = ( *(($1 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$9 = ($7 + $9)
	$12 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$8:
	$9 = ($9 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$8 }
	if ( ($9 <= [513]) ){ goto $label$10 }
	$7 = CALL $152($9)
	goto $label$9 
	
.LABEL $label$10
	$7 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$9
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = ($7 + $9)
	*($5 + [24]) = $5
	*($5 + [36]) = $10
	*($5 + [40]) = $8
	*($5 + [44]) = $3
	*($5 + [48]) = $14
	*($5 + [52]) = $13
	*($5 + [56]) = $11
	*($5 + [32]) = $1
	CALL $88(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*(($1 + [52])), $2, $7, $9)
	if ( ($9 <= [513]) ){ goto $label$11 }
	CALL $156($7)
	
.LABEL $label$11
	if ( ((uint_64)*($0 + [16]) > (uint_64)$15) ){ goto $label$12 }
	*(($0 + [16])) = ((int_64)$15 + (int_64)1)
	
.LABEL $label$12
	$7 = *(($1 + [24]))
	$10 = ($9 & [1])
	$9 = *(($1 + [16]))
	$9 = ( *(($1 + [20])) ? uint_32($9 >> [1]) : $10 )
	if ( ($9 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [18171])
	goto $label$15 
	
.LABEL $label$16
	if ( ($9 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$11 = ( $7 ? $6 : $10 )
	$12 = (int_64)0
	
.LOOP $label$17:
	$10 = (($11 + $9) + [-1])
	$7 = *($10)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [18216])
	$7 = *($10)
	
.LABEL $label$18
	$12 = ((int_64)((int_64)$12 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$17 }
	$12 = ((int_64)$12 << (int_64)8)
	goto $label$13 
	
.LABEL $label$14
	$12 = (int_64)0
	
.LABEL $label$13
	*($5 + [32]) = ((int_64)$12 | (int_64)*($3))
	if ( (CALL $146(($5 + [16]), ($5 + [32]), [8]) == 0) ){ goto $label$19 }
	$7 = ($1 + [56])
	$9 = *($7)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4060986526864314368, ($5 + [24]), $15)
	*($7) = $9
	
.LABEL $label$20
	CALL db_idx64_update($9, $2, ($5 + [32]))
	
.LABEL $label$19
	$global$0 = ($5 + [64])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4060986526864314368, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $81($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = ((int_64)*(*(CALL $87(($3 + [32])) + [4])) + (int_64)1)
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18635])
	*($1) = *(($6 + [16]))
	$9 = ($1 + [4])
	CALL $122($9, *($5 + [4]))
	$8 = ($1 + [16])
	CALL $122($8, *($5 + [8]))
	$6 = *(*($5 + [12]))
	*($1 + [32]) = *(*($5 + [16]))
	*($1 + [28]) = $6
	*($1 + [40]) = *(*($5 + [24]))
	*($1 + [36]) = *(*($5 + [20]))
	$5 = *($1 + [4])
	$6 = ( *(($1 + [8])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [19])
	$7 = (CASTING uint_64)(uint_32 $6)
	$10 = ($1 + [40])
	$11 = ($1 + [36])
	$12 = ($1 + [32])
	$13 = ($1 + [28])
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$6 = *(($1 + [16]))
	$6 = ( *(($1 + [20])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$5 = ($6 + $5)
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $152($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $5)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $9
	*($3 + [32]) = $1
	*($3 + [40]) = $8
	*($3 + [44]) = $13
	*($3 + [48]) = $12
	*($3 + [52]) = $11
	*($3 + [56]) = $10
	CALL $88(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($4 + [8]), (int_64)-4060986526864314368, *(*($0 + [8])), $7, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL $156($6)
	
.LABEL $label$7
	if ( ((uint_64)*($4 + [16]) > (uint_64)$7) ){ goto $label$8 }
	*(($4 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$8
	$14 = *(($4 + [8]))
	$15 = *(*(($0 + [8])))
	$16 = *($1)
	$6 = *(($1 + [24]))
	$0 = ($5 & [1])
	$5 = *(($1 + [16]))
	$5 = ( *(($1 + [20])) ? uint_32($5 >> [1]) : $0 )
	if ( ($5 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [18171])
	goto $label$11 
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$4 = ( $6 ? ($8 + [1]) : $0 )
	$7 = (int_64)0
	
.LOOP $label$13:
	$0 = (($4 + $5) + [-1])
	$6 = *($0)
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [18216])
	$6 = *($0)
	
.LABEL $label$14
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$13 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$9 
	
.LABEL $label$10
	$7 = (int_64)0
	
.LABEL $label$9
	*($3 + [32]) = ((int_64)$7 | (int_64)*(($1 + [28])))
	*($1 + [56]) = CALL db_idx64_store($14, (int_64)-4060986526864314368, $15, $16, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$11
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	$8 = ($global$0 - [144])
	$global$0 = $8
	*($8 + [96]) = $3
	*($8 + [107]) = $2
	*($8 + [88]) = $4
	*($8 + [87]) = $6
	*($8 + [86]) = $7
	CALL require_auth(*($0))
	*(($6 = ($8 + [72]))) = [0]
	*($8 + [56]) = (int_64)-1
	$4 = *($0)
	*($8 + [40]) = $4
	*($8 + [48]) = $4
	*($8 + [64]) = (int_64)0
	$7 = CALL db_lowerbound_i64($4, $4, (int_64)7235159541906337792, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$9 }
	CALL $14(($8 + [40]), $7)
	$6 = *(($8 + [68]))
	$9 = *(($8 + [64]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$10:
	$7 = ($6 + [-24])
	$2 = *($7)
	if ( ((int_32)*($2) == (int_32)[1]) ){ goto $label$8 }
	$6 = $7
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	$3 = *($0)
	*($8 + [8]) = $1
	*($8 + [24]) = $5
	*($8 + [12]) = ($8 + [107])
	*($8 + [16]) = ($8 + [96])
	*($8 + [20]) = ($8 + [88])
	*($8 + [28]) = ($8 + [87])
	*($8 + [32]) = ($8 + [86])
	*($8 + [136]) = $3
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$10()), [18584])
	*($8 + [116]) = ($8 + [8])
	*($8 + [112]) = ($8 + [40])
	*($8 + [120]) = ($8 + [136])
	*(($7 = CALL _Znwj([72])) + [12]) = [0]
	*($7 + [4 align=4]) = (int_64)0
	*($7 + [40 align=4]) = (int_64)0
	*($7 + [48]) = [0]
	*($7 + [56]) = ($8 + [40])
	CALL $15(($8 + [112]), $7)
	*($8 + [128]) = $7
	$4 = *($7)
	*($8 + [112]) = $4
	$9 = *($7 + [60])
	*($8 + [108]) = $9
	$0 = ($8 + [68])
	$2 = *($0)
	if ( ((uint_32)$2 >= (uint_32)*($6)) ){ goto $label$5 }
	*($2 + [8]) = $4
	*($2 + [16]) = $9
	*($8 + [128]) = [0]
	*($2) = $7
	*($0) = ($2 + [24])
	$7 = *($8 + [128])
	*($8 + [128]) = [0]
	if ( ($7 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)($8 + [40])), [18501])
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	$7 = CALL db_find_i64(*($8 + [40]), *(($8 + [48])), (int_64)7235159541906337792, (int_64)1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $14(($8 + [40]), $7)
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)($8 + [40])), [18501])
	
.LABEL $label$6
	$4 = *($0)
	*($8 + [8]) = $1
	*($8 + [24]) = $5
	*($8 + [12]) = ($8 + [107])
	*($8 + [16]) = ($8 + [96])
	*($8 + [20]) = ($8 + [88])
	*($8 + [28]) = ($8 + [87])
	*($8 + [32]) = ($8 + [86])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [18789])
	CALL $16(($8 + [40]), $2, $4, ($8 + [8]))
	goto $label$4 
	
.LABEL $label$5
	CALL $17(($8 + [64]), ($8 + [128]), ($8 + [112]), ($8 + [108]))
	$7 = *($8 + [128])
	*($8 + [128]) = [0]
	if ( $7 ){ goto $label$3 }
	
.LABEL $label$4
	$9 = *($8 + [64])
	if ( ($9 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$6 = *($7 + [40])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($7 + [44])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((*($7 + [4]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($7 + [12])))
	
.LABEL $label$12
	CALL _ZdlPv($7)
	$9 = *($8 + [64])
	if ( ($9 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$0 = ($8 + [68])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$15:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$16 }
	$2 = *($7 + [40])
	if ( ($2 == 0) ){ goto $label$17 }
	*(($7 + [44])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$17
	if ( ((*($7 + [4]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($7 + [12])))
	
.LABEL $label$18
	CALL _ZdlPv($7)
	
.LABEL $label$16
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$15 }
	$7 = *(($8 + [64]))
	goto $label$13 
	
.LABEL $label$14
	$7 = $9
	
.LABEL $label$13
	*($0) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($8 + [144])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18338])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [18338])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18338])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [18338])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18338])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18338])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = *($0)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	$3 = CALL $19(($1 + [8]), (int_64)1, [17375])
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($1 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	$7 = *($0 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($0 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	if ( ((*($0 + [4]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($0 + [12])))
	
.LABEL $label$7
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	$0 = *(($1 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($1 + [48])
	return $3
}

int_32 .FUNC $19 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [18501])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159541906337792, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $14($0, $4)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$0), [18501])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL memory()
	*($3 + [176]) = [18092]
	*($3 + [180]) = CALL $147([18092])
	*($3 + [96]) = *($3 + [176])
	if ( ((int_64)*(CALL $2(($3 + [184]), ($3 + [96]))) != (int_64)$2) ){ goto $label$1 }
	*($3 + [176]) = [17939]
	*($3 + [180]) = CALL $147([17939])
	*($3 + [88]) = *($3 + [176])
	CALL eosio_assert(((int_64)*(CALL $2(($3 + [184]), ($3 + [88]))) == (int_64)$1), [18100])
	
.LABEL $label$1
	*($3 + [176]) = [18162]
	*($3 + [180]) = CALL $147([18162])
	*($3 + [80]) = *($3 + [176])
	if ( ((int_64)*(CALL $2(($3 + [184]), ($3 + [80]))) != (int_64)$2) ){ goto $label$3 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [1]
	*($3) = *($3 + [168])
	CALL $59($0, $1, $3)
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	*($3 + [176]) = [18162]
	*($3 + [180]) = CALL $147([18162])
	*($3 + [72]) = *($3 + [176])
	if ( ((int_64)*(CALL $2(($3 + [184]), ($3 + [72]))) == (int_64)$2) ){ goto $label$2 }
	if ( ((int_64)$2 > (int_64)4923678616182587391) ){ goto $label$10 }
	if ( ((int_64)$2 > (int_64)-4417018962198396929) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-7297707859695370240) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4417029266017353728) ){ goto $label$2 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [2]
	*($3 + [16]) = *($3 + [152])
	CALL $60($1, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$10
	if ( ((int_64)$2 > (int_64)4929617868719723007) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)4923678616182587392) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)4923678856662291328) ){ goto $label$2 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [3]
	*($3 + [32]) = *($3 + [136])
	CALL $61($1, $1, ($3 + [32]))
	goto $label$2 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-4417018962198396928) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4149684618451746816) ){ goto $label$2 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [4]
	*($3 + [56]) = *($3 + [112])
	CALL $62($1, $1, ($3 + [56]))
	goto $label$2 
	
.LABEL $label$8
	if ( ((int_64)$2 == (int_64)4929617868719723008) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$2 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [5]
	*($3 + [8]) = *($3 + [160])
	CALL $63($1, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$7
	*($3 + [148]) = [0]
	*($3 + [144]) = [6]
	*($3 + [24]) = *($3 + [144])
	CALL $64($1, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [132]) = [0]
	*($3 + [128]) = [7]
	*($3 + [40]) = *($3 + [128])
	CALL $65($1, $1, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$5
	*($3 + [108]) = [0]
	*($3 + [104]) = [8]
	*($3 + [64]) = *($3 + [104])
	CALL $66($1, $1, ($3 + [64]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [124]) = [0]
	*($3 + [120]) = [9]
	*($3 + [48]) = *($3 + [120])
	CALL $62($1, $1, ($3 + [48]))
	
.LABEL $label$2
	CALL $137([0])
	$global$0 = ($3 + [192])
}

int_32 .FUNC $59 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $67(($4 + [16]), ($4 + [144]))
	*(($9 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4)
	$10 = *($3)
	*(($9 = (($4 + [144]) + [8]))) = $10
	*((($4 + [16]) + [24])) = $10
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [80])
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = CALL $120(($4 + [112]), ($4 + [96]))
	*($9) = *($3)
	*($4 + [168]) = $1
	*($4 + [160]) = $0
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [168])), (int_32 ($4 + [160])), (int_32 ($4 + [144])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $156($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $95(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$4 = ($global$0 - [112])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [132]) == (int_32)$0), [18824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [18870])
	$6 = ($1 + [20])
	$7 = ($1 + [8])
	$8 = *($7)
	$9 = *($1 + [20])
	if ( ($9 & [1]) ){ goto $label$5 }
	$10 = ($6 + [1])
	$9 = uint_32($9 >> [1])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$10 = *(($1 + [28]))
	$9 = *(($1 + [24]))
	if ( ($9 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [18171])
	goto $label$2 
	
.LABEL $label$3
	if ( $9 ){ goto $label$2 }
	$11 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$11 = (int_64)0
	
.LOOP $label$6:
	$12 = (($10 + $9) + [-1])
	$13 = *($12)
	if ( ((($13 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [18216])
	$13 = *($12)
	
.LABEL $label$7
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$6 }
	$11 = ((int_64)$11 << (int_64)8)
	
.LABEL $label$1
	*($1 + [48]) = (int_64))(*($1 + [48]) - ((int_64)((int_64)*(*($3)) * (int_64)*((*(*(*(($3 + [4])) + [4]) + [112]) + (*(*(($3 + [8]))) << [1])))) / (int_64)100))
	*($5 + [24]) = $8
	*($5 + [32]) = ((int_64)$11 | (int_64)*($1 + [32]))
	$8 = *($1)
	CALL eosio_assert([1], [18921])
	*($5 + [40]) = [0]
	*($5 + [8]) = ($5 + [40])
	*($5 + [52]) = $7
	*($5 + [48]) = $1
	$12 = ($1 + [16])
	*($5 + [56]) = $12
	*($5 + [60]) = $6
	$3 = ($1 + [32])
	*($5 + [64]) = $3
	$10 = ($1 + [40])
	*($5 + [68]) = $10
	$14 = ($1 + [48])
	*($5 + [72]) = $14
	$15 = ($1 + [56])
	*($5 + [76]) = $15
	$16 = ($1 + [64])
	*($5 + [80]) = $16
	$17 = ($1 + [76])
	*($5 + [84]) = $17
	$18 = ($1 + [88])
	*($5 + [88]) = $18
	$19 = ($1 + [96])
	*($5 + [92]) = $19
	$20 = ($1 + [104])
	*($5 + [96]) = $20
	$21 = ($1 + [112])
	*($5 + [100]) = $21
	$22 = ($1 + [124])
	*($5 + [104]) = $22
	$23 = ($1 + [128])
	*($5 + [108]) = $23
	CALL $101(($5 + [48]), ($5 + [8]))
	$13 = *($5 + [40])
	if ( ($13 <= [513]) ){ goto $label$9 }
	$9 = CALL $152($13)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$8
	*($5 + [12]) = $9
	*($5 + [8]) = $9
	*($5 + [16]) = ($9 + $13)
	*($5 + [40]) = ($5 + [8])
	*($5 + [52]) = $7
	*($5 + [56]) = $12
	*($5 + [60]) = $6
	*($5 + [64]) = $3
	*($5 + [68]) = $10
	*($5 + [72]) = $14
	*($5 + [76]) = $15
	*($5 + [80]) = $16
	*($5 + [84]) = $17
	*($5 + [88]) = $18
	*($5 + [92]) = $19
	*($5 + [96]) = $20
	*($5 + [100]) = $21
	*($5 + [104]) = $22
	*($5 + [108]) = $23
	*($5 + [48]) = $1
	CALL $102(($5 + [48]), ($5 + [40]))
	CALL db_update_i64(*($1 + [136]), $2, $9, $13)
	if ( ($13 <= [513]) ){ goto $label$10 }
	CALL $156($9)
	
.LABEL $label$10
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($5 + [48]) = *($7)
	if ( (CALL $146(($5 + [24]), ($5 + [48]), [8]) == 0) ){ goto $label$12 }
	$9 = *($1 + [140])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$13 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747008, ($5 + [40]), $8)
	*(($1 + [140])) = $9
	
.LABEL $label$13
	CALL db_idx64_update($9, $2, ($5 + [48]))
	
.LABEL $label$12
	$9 = *($6)
	if ( ($9 & [1]) ){ goto $label$15 }
	$9 = uint_32($9 >> [1])
	$10 = ($6 + [1])
	goto $label$14 
	
.LABEL $label$15
	$9 = *(($1 + [24]))
	$10 = *(($1 + [28]))
	
.LABEL $label$14
	$6 = (($5 + [24]) + [8])
	if ( ($9 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [18171])
	goto $label$18 
	
.LABEL $label$19
	if ( ($9 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$11 = (int_64)0
	
.LOOP $label$20:
	$12 = (($10 + $9) + [-1])
	$13 = *($12)
	if ( ((($13 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [18216])
	$13 = *($12)
	
.LABEL $label$21
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$20 }
	$11 = ((int_64)$11 << (int_64)8)
	goto $label$16 
	
.LABEL $label$17
	$11 = (int_64)0
	
.LABEL $label$16
	*($5 + [48]) = ((int_64)$11 | (int_64)*($3))
	if ( (CALL $146($6, ($5 + [48]), [8]) == 0) ){ goto $label$22 }
	$13 = ($1 + [144])
	$9 = *($13)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$23 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747007, ($5 + [40]), $8)
	*($13) = $9
	
.LABEL $label$23
	CALL db_idx64_update($9, $2, ($5 + [48]))
	
.LABEL $label$22
	$global$0 = ($5 + [112])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [176])
	$global$0 = $3
	$4 = CALL current_time()
	*(($3 + [132])) = (int_64)0
	*(($3 + [148])) = (int_64)0
	*(($3 + [156])) = (int_64)0
	*($3 + [116]) = [0]
	*($3 + [120]) = [0]
	*($3 + [124 align=4]) = (int_64)0
	*($3 + [140 align=4]) = (int_64)0
	*($3 + [104]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$4 = *($0)
	*($3 + [88]) = [18013]
	*($3 + [92]) = CALL $147([18013])
	*($3 + [24]) = *($3 + [88])
	*($3 + [96]) = *(CALL $2(($3 + [32]), ($3 + [24])))
	*($3 + [88]) = $4
	*($3 + [168]) = [18020]
	*($3 + [172]) = CALL $147([18020])
	*($3 + [16]) = *($3 + [168])
	*($3 + [80]) = *(CALL $2(($3 + [32]), ($3 + [16])))
	*($3 + [168]) = [18033]
	*($3 + [172]) = CALL $147([18033])
	*($3 + [8]) = *($3 + [168])
	*($3 + [72]) = *(CALL $2(($3 + [32]), ($3 + [8])))
	*($3 + [168]) = [18040]
	*($3 + [172]) = CALL $147([18040])
	*($3) = *($3 + [168])
	$4 = *(CALL $2(($3 + [32]), $3))
	*($3 + [40]) = $2
	*($3 + [48]) = $4
	*($3 + [32]) = *($1)
	*($3 + [56]) = *($0)
	CALL $53(($3 + [140]), ($3 + [88]), ($3 + [80]), ($3 + [72]), ($3 + [32]))
	*($3 + [124]) = [1]
	$2 = CALL current_time()
	*($3 + [40]) = (int_64)0
	*($3 + [32]) = $2
	$2 = *($0)
	CALL $32(($3 + [88]), ($3 + [104]))
	$0 = *($3 + [88])
	CALL send_deferred(($3 + [32]), $2, $0, (*($3 + [92]) - $0), [1])
	$0 = *($3 + [88])
	if ( ($0 == 0) ){ goto $label$1 }
	*($3 + [92]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $34(($3 + [104]))
	$global$0 = ($3 + [176])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $74(($7 + [28]), [32])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $109(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [32])) = [0]
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	$4 = *($0)
	*($2) = $4
	*($2 + [8]) = $4
	*($2 + [16]) = (int_64)-1
	if ( ((int_64)$1 == (int_64)-1) ){ goto $label$2 }
	$0 = CALL db_find_i64($4, $4, (int_64)-6147718988072747008, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $25($2, $0)
	CALL eosio_assert(((int_32)*($3 + [132]) == (int_32)$2), [18501])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)[30]), [18045])
	$0 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($0, [19105])
	CALL eosio_assert($0, [18980])
	$0 = CALL db_next_i64(*($3 + [136]), ($2 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	CALL $25($2, $0)
	
.LABEL $label$4
	CALL $55($2, $3)
	goto $label$1 
	
.LABEL $label$2
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)-6147718988072747008, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $25($2, $3)
	
.LOOP $label$5:
	CALL eosio_assert([1], [19105])
	CALL eosio_assert([1], [18980])
	$3 = [0]
	$5 = CALL db_next_i64(*($0 + [136]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $25($2, $5)
	
.LABEL $label$6
	CALL $55($2, $0)
	$0 = $3
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$1
	CALL $36(($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $56 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL eosio_assert(((uint_32)$3 >= (uint_32)$2), [18070])
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	*($4 + [36]) = [0]
	$5 = *($0)
	*($4) = $5
	*($4 + [8]) = $5
	$0 = [0]
	$2 = CALL db_lowerbound_i64($5, $5, (int_64)4229865762275196928, (CASTING uint_64)(uint_32 $2))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $37($4, $2)
	
.LABEL $label$1
	$5 = (CASTING uint_64)(uint_32 $3)
	$6 = ($4 + [8])
	
.LOOP $label$2:
	$3 = [0]
	$2 = CALL db_upperbound_i64(*($4), *($6), (int_64)4229865762275196928, $5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $37($4, $2)
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$4 }
	$3 = ((int_32)$0 != (int_32)[0])
	if ( ((int_64)*($0 + [8]) != (int_64)$1) ){ goto $label$5 }
	CALL eosio_assert($3, [19105])
	CALL eosio_assert($3, [18980])
	$3 = [0]
	$2 = CALL db_next_i64(*($0 + [104]), ($4 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $37($4, $2)
	
.LABEL $label$6
	CALL $57($4, $0)
	$0 = $3
	goto $label$2 
	
.LABEL $label$5
	CALL eosio_assert($3, [18980])
	$3 = *($0 + [104])
	$0 = [0]
	$3 = CALL db_next_i64($3, ($4 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $37($4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL $35(($4 + [24]))
	$global$0 = ($4 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [19139])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19184])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19234])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [96])))
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($4 + [56])))
	if ( (*($4 + [24]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	if ( ((*($6 + [88]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($6 + [96])))
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($6 + [56])))
	if ( (*($6 + [24]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$17
	CALL _ZdlPv($6)
	
.LABEL $label$16
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$15 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [104]))
	$6 = *($1 + [108])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$23 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196928, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$22 }
	
.LABEL $label$23
	CALL db_idx64_remove($6)
	
.LABEL $label$22
	$6 = *(($1 + [112]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$25 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196929, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$24 }
	
.LABEL $label$25
	CALL db_idx64_remove($6)
	
.LABEL $label$24
	$global$0 = ($2 + [16])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $156($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [96])))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [56])))
	if ( (*($3 + [24]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $156($0)
	
.LABEL $label$1
}

void .FUNC $110 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8416 align=4]) = (int_64)0
	*([0] + [8424]) = [0]
	$0 = CALL $147([17132])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$5 }
	*([0] + [8416]) = ($0 << [1])
	$1 = [8417]
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8416]) = ($2 | [1])
	*([0] + [8424]) = $1
	*([0] + [8420]) = $0
	
.LABEL $label$4
	CALL memcpy($1, [17132], $0)
	
.LABEL $label$3
	*(($1 + $0)) = [0]
	CALL $138([10], [0], [8192])
	*([0] + [8428 align=4]) = (int_64)0
	*([0] + [8436]) = [0]
	$0 = CALL $147([17255])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$8 }
	*([0] + [8428]) = ($0 << [1])
	$1 = [8429]
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8428]) = ($2 | [1])
	*([0] + [8436]) = $1
	*([0] + [8432]) = $0
	
.LABEL $label$7
	CALL memcpy($1, [17255], $0)
	
.LABEL $label$6
	*(($1 + $0)) = [0]
	CALL $138([11], [0], [8192])
	return (unreachable)
	
.LABEL $label$2
	CALL $119([8416])
	
.LABEL $label$1
	CALL $119([8428])
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $152($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8440])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $152($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $119 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $152 (int_32 $0)
{
	return CALL $153([8736], $0)
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $154($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8247])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $150 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $136())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $151($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $152($1)
	
.LABEL $label$2
	*(CALL $136()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $152(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $156($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $156 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17120])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16928]
	$3 = (((int_32)$1 * (int_32)[12]) + [16928])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $154 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8728]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8732])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8728]) = [1]
	$2 = ($2 << [16])
	*([0] + [8732]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8732])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8732]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8728]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8728]) = [1]
	$3 = ($3 << [16])
	*([0] + [8732]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8732])
	
.LABEL $label$10
	*([0] + [8732]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $153([8736], $1)
	CALL memset($0, [0], $1)
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)4229865762275196928, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [100]) == (int_32)$7), [18501])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $37($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4229865762275196928, $6))
	CALL eosio_assert(((int_32)*($4 + [100]) == (int_32)$7), [18501])
	
.LABEL $label$2
	*($4 + [108]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4229865762275196928, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [100]) == (int_32)$7), [18501])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $37($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4229865762275196928, $6))
	CALL eosio_assert(((int_32)*($4 + [100]) == (int_32)$7), [18501])
	
.LABEL $label$2
	*($4 + [108]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [132]) == (int_32)$0), [19139])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [19184])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19234])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	$9 = *($4 + [112])
	if ( ($9 == 0) ){ goto $label$10 }
	*(($4 + [116])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = *($4 + [76])
	if ( ($9 == 0) ){ goto $label$11 }
	*(($4 + [80])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$11
	$9 = *($4 + [64])
	if ( ($9 == 0) ){ goto $label$12 }
	*(($4 + [68])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$12
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$13
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$8 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$15 }
	$9 = *($6 + [112])
	if ( ($9 == 0) ){ goto $label$16 }
	*(($6 + [116])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$16
	$9 = *($6 + [76])
	if ( ($9 == 0) ){ goto $label$17 }
	*(($6 + [80])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$17
	$9 = *($6 + [64])
	if ( ($9 == 0) ){ goto $label$18 }
	*(($6 + [68])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$18
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($6 + [28])))
	
.LABEL $label$19
	CALL _ZdlPv($6)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$14 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [136]))
	$6 = *($1 + [140])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$21 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747008, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$20 }
	
.LABEL $label$21
	CALL db_idx64_remove($6)
	
.LABEL $label$20
	$6 = *(($1 + [144]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$23 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747007, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$22 }
	
.LABEL $label$23
	CALL db_idx64_remove($6)
	
.LABEL $label$22
	$global$0 = ($2 + [16])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [80])
	$global$0 = $4
	*(($5 = $4) + [32]) = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [18870])
	$6 = *(($1 + [24]))
	$8 = ($7 & [1])
	$7 = *($1 + [16])
	$7 = ( *(($1 + [20])) ? uint_32($7 >> [1]) : $8 )
	if ( ($7 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [18171])
	goto $label$3 
	
.LABEL $label$4
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = ( $6 ? ($1 + [17]) : $8 )
	$2 = (int_64)0
	
.LOOP $label$5:
	$8 = (($9 + $7) + [-1])
	$6 = *($8)
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [18216])
	$6 = *($8)
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$5 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)0
	
.LABEL $label$1
	$8 = ($1 + [16])
	*($5 + [24]) = ((int_64)$2 | (int_64)*($1 + [28]))
	$2 = *($1)
	*($5 + [16]) = $2
	$7 = *(*($3 + [4]) + [4])
	*(*($3)) = *($7 + [40])
	*($1 + [40]) = ((int_64)*($7 + [40]) + (int_64)1)
	$10 = *($5 + [16])
	CALL eosio_assert(((int_64)$2 == (int_64)$10), [18921])
	$7 = *($1 + [4])
	$6 = ( *(($1 + [8])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($6 + [19])
	$2 = (CASTING uint_64)(uint_32 $6)
	$9 = ($1 + [4])
	$3 = ($1 + [40])
	$11 = ($1 + [28])
	
.LOOP $label$7:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$7 }
	$6 = *(($1 + [16]))
	$6 = ( *(($1 + [20])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$7 = ($6 + $7)
	$2 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$8:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$8 }
	if ( ($7 <= [513]) ){ goto $label$10 }
	$6 = CALL $152($7)
	goto $label$9 
	
.LABEL $label$10
	$6 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$9
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($6 + $7)
	*($5 + [40]) = $5
	*($5 + [52]) = $9
	*($5 + [56]) = $8
	*($5 + [60]) = $11
	*($5 + [72]) = $3
	*($5 + [48]) = $1
	*($5 + [64]) = ($1 + [32])
	*($5 + [68]) = ($1 + [36])
	CALL $88(($5 + [48]), ($5 + [40]))
	CALL db_update_i64(*(($1 + [52])), *($5 + [32]), $6, $7)
	if ( ($7 <= [513]) ){ goto $label$11 }
	CALL $156($6)
	$10 = *($5 + [16])
	
.LABEL $label$11
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($5 + [52]) = $1
	*($5 + [60]) = $1
	*($5 + [48]) = $0
	*($5 + [56]) = ($5 + [24])
	*($5 + [64]) = ($5 + [16])
	*($5 + [68]) = ($5 + [32])
	CALL $108(($5 + [48]), ($0 + [36]))
	$global$0 = ($5 + [80])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [18824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [18870])
	$6 = *($1)
	$7 = (CASTING uint_64)(uint_32 $6)
	$8 = *(*($3))
	if ( ((int_32)$8 == (int_32)[20]) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[10]) ){ goto $label$2 }
	$3 = *(*($3 + [8]) + [4])
	*(*($3 + [4])) = *($3 + [24])
	*($1 + [24]) = ((int_64)*($3 + [24]) + (int_64)1)
	$3 = $6
	goto $label$1 
	
.LABEL $label$3
	$3 = *(*($3 + [8]) + [4])
	*(*($3 + [4])) = *($3 + [32])
	*($1 + [32]) = ((int_64)*($3 + [32]) + (int_64)1)
	$3 = $6
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [19020])
	$3 = *($1)
	
.LABEL $label$1
	$9 = ((int_64)$7 & (int_64)255)
	CALL eosio_assert(((int_32)($6 & [255]) == (int_32)($3 & [255])), [18921])
	$3 = *($1 + [4])
	$6 = ( *($1 + [8]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [18])
	$7 = (CASTING uint_64)(uint_32 $6)
	$8 = ($1 + [4])
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	$10 = ($1 + [40])
	$11 = *($1 + [40])
	$6 = *($1 + [44])
	$12 = ($6 - $11)
	$7 = (CASTING uint_64)(uint_32 int_32($12 >> [1]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$6 }
	$3 = (($12 & [-2]) + $3)
	
.LABEL $label$6
	$6 = ($3 + [3])
	if ( ($6 <= [513]) ){ goto $label$8 }
	$3 = CALL $152($6)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$7
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	*($5 + [16]) = $5
	*($5 + [28]) = $8
	*($5 + [44]) = $10
	*($5 + [24]) = $1
	*($5 + [32]) = ($1 + [16])
	*($5 + [36]) = ($1 + [24])
	*($5 + [40]) = ($1 + [32])
	*($5 + [48]) = ($1 + [52])
	*($5 + [52]) = ($1 + [53])
	*($5 + [56]) = ($1 + [54])
	CALL $90(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*(($1 + [60])), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)$9) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $156($3)
	if ( ((uint_64)*($0 + [16]) > (uint_64)$9) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = ((int_64)$9 + (int_64)1)
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [64])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [4 align=4]) = (int_64)0
	$3 = ($2 | [4])
	*($2) = $3
	$5 = *($1 + [4])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	$6 = [0]
	$7 = ($2 + [8])
	$8 = [0]
	$9 = uint_32(((uint_32)*($4) % (uint_32)[52]) >> [2])
	if ( [0] ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$6 = [0]
	$10 = [12]
	goto $label$1 
	
.LABEL $label$3
	$10 = [13]
	goto $label$1 
	
.LABEL $label$2
	$10 = [4]
	
.LABEL $label$1
	
.LOOP $label$5:
	goto $label$33 
	
.LABEL $label$37
	$9 = uint_32(((uint_32)*($4) % (uint_32)[52]) >> [2])
	$8 = *($2 + [4])
	if ( ($8 == 0) ){ goto $label$21 }
	$10 = [4]
	goto $label$5 
	
.LABEL $label$36
	$11 = $3
	$13 = ($9 & [255])
	$12 = *($8 + [13])
	if ( ((uint_32)$12 <= (uint_32)$13) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$35
	$11 = $8
	$13 = ($9 & [255])
	$8 = $12
	$12 = *($8 + [13])
	if ( ((uint_32)$12 <= (uint_32)$13) ){ goto $label$17 }
	$10 = [5]
	goto $label$5 
	
.LABEL $label$34
	$12 = *($8)
	if ( $12 ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$33
	if ( ((uint_32)$12 >= (uint_32)$13) ){ goto $label$14 }
	$10 = [14]
	goto $label$5 
	
.LABEL $label$32
	$11 = ($8 + [4])
	$12 = *($8 + [4])
	if ( ($12 == 0) ){ goto $label$16 }
	$10 = [15]
	goto $label$5 
	
.LABEL $label$31
	$8 = $11
	goto $label$15 
	
.LABEL $label$30
	$8 = $3
	$11 = $3
	$10 = [1]
	goto $label$5 
	
.LABEL $label$29
	if ( (*($11) == 0) ){ goto $label$11 }
	$10 = [2]
	goto $label$5 
	
.LABEL $label$28
	$4 = ($4 + [2])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$27
	$11 = $8
	if ( *($11) ){ goto $label$20 }
	$10 = [8]
	goto $label$5 
	
.LABEL $label$26
	*(($12 = CALL _Znwj([16])) + [13]) = $9
	*($12) = (int_64)0
	*($12 + [8]) = $8
	*($11) = $12
	$8 = *(*($2))
	if ( ($8 == 0) ){ goto $label$7 }
	$10 = [9]
	goto $label$5 
	
.LABEL $label$25
	*($2) = $8
	$12 = *($11)
	$10 = [10]
	goto $label$5 
	
.LABEL $label$24
	CALL $22(*($2 + [4]), $12)
	$6 = (*($7) + [1])
	*($7) = $6
	$4 = ($4 + [2])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$10 }
	$10 = [11]
	goto $label$5 
	
.LABEL $label$23
	$5 = *(($1 + [4]))
	$4 = *($1)
	$8 = *($2 + [4])
	goto $label$6 
	
.LABEL $label$22
	CALL $23($2, $8)
	$global$0 = ($2 + [16])
	return ($6 <= int_32(($5 - $4) >> [1]))
	
.LABEL $label$21
	$10 = [13]
	goto $label$5 
	
.LABEL $label$20
	$10 = [2]
	goto $label$5 
	
.LABEL $label$19
	$10 = [11]
	goto $label$5 
	
.LABEL $label$18
	$10 = [3]
	goto $label$5 
	
.LABEL $label$17
	$10 = [0]
	goto $label$5 
	
.LABEL $label$16
	$10 = [1]
	goto $label$5 
	
.LABEL $label$15
	$10 = [6]
	goto $label$5 
	
.LABEL $label$14
	$10 = [1]
	goto $label$5 
	
.LABEL $label$13
	$10 = [5]
	goto $label$5 
	
.LABEL $label$12
	$10 = [0]
	goto $label$5 
	
.LABEL $label$11
	$10 = [8]
	goto $label$5 
	
.LABEL $label$10
	$10 = [3]
	goto $label$5 
	
.LABEL $label$9
	$10 = [7]
	goto $label$5 
	
.LABEL $label$8
	$10 = [6]
	goto $label$5 
	
.LABEL $label$7
	$10 = [10]
	goto $label$5 
	
.LABEL $label$6
	$10 = [12]
	goto $label$5 
	return $10
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	*($2 + [52]) = [0]
	$3 = *($0)
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	*($2 + [8]) = ($2 + [16])
	*($2) = *($1)
	CALL $9(($2 + [56]), ($2 + [8]), $2)
	CALL eosio_assert(((int_32)*($2 + [60]) != (int_32)[0]), [17426])
	$4 = *($2 + [60])
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$6
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	$1 = *(($2 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$1 = $5
	
.LABEL $label$2
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
	return $4
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $23($0, *($1))
	CALL $23($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18552])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $152($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([152])) + [28]) = [0]
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80 align=4]) = (int_64)0
	*($5 + [112 align=4]) = (int_64)0
	*($5 + [120]) = [0]
	*($5 + [132]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [20])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [76])
	*($3 + [72]) = ($5 + [88])
	*($3 + [76]) = ($5 + [96])
	*($3 + [80]) = ($5 + [104])
	*($3 + [84]) = ($5 + [112])
	*($3 + [88]) = ($5 + [124])
	*($3 + [92]) = ($5 + [128])
	CALL $92(($3 + [32]), ($3 + [24]))
	*($5 + [136]) = $1
	*($5 + [140 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [112])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [116])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [76])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	$4 = *($1 + [64])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [68])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$13
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [432])
	$global$0 = $3
	*($3 + [408]) = $1
	CALL require_auth(*($0))
	$4 = CALL $18($0)
	*($3 + [352]) = *($4)
	$5 = CALL $120((($3 + [352]) | [4]), ($4 + [4]))
	$1 = *(($4 + [24]))
	$6 = *(($4 + [32]))
	$7 = *($4 + [16])
	*((($3 + [352]) + [44])) = (int_64)0
	*((($3 + [352]) + [32])) = $6
	*((($3 + [352]) + [24])) = $1
	$8 = [0]
	*($3 + [392]) = [0]
	*($3 + [368]) = $7
	$9 = (*(($4 + [44])) - *($4 + [40]))
	if ( ($9 == 0) ){ goto $label$5 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$4 }
	$10 = CALL _Znwj($9)
	*((($3 + [352]) + [40])) = $10
	*(($3 + [400])) = ($10 + (int_32($9 >> [1]) << [1]))
	*(($9 = (($3 + [352]) + [44]))) = $10
	$11 = *(($4 + [40]))
	$12 = (*(($4 + [44])) - $11)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($10, $11, $12)
	*($9) = (*($9) + $12)
	
.LABEL $label$5
	*((($3 + [352]) + [54])) = *(($4 + [54]))
	*($3 + [404]) = *($4 + [52])
	*((($3 + [312]) + [32])) = [0]
	*($3 + [328]) = (int_64)-1
	*($3 + [336]) = (int_64)0
	*($3 + [348]) = [0]
	$1 = *($0)
	*($3 + [312]) = $1
	*($3 + [320]) = $1
	$4 = CALL db_find_i64($1, $1, (int_64)-6147718988072747008, *($3 + [408]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	$8 = CALL $25(($3 + [312]), $4)
	CALL eosio_assert(((int_32)*($8 + [132]) == (int_32)($3 + [312])), [18501])
	
.LABEL $label$6
	*($3 + [308]) = $8
	*($3 + [304]) = ($3 + [312])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [17469])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)[15]), [17488])
	$4 = *($8 + [20])
	if ( ($4 & [1]) ){ goto $label$8 }
	$10 = (($8 + [20]) + [1])
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)[8]) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	$10 = *(($8 + [28]))
	$4 = *(($8 + [24]))
	if ( ($4 <= [8]) ){ goto $label$3 }
	
.LABEL $label$7
	CALL eosio_assert([0], [18171])
	goto $label$2 
	
.LABEL $label$4
	CALL $135(($3 + [392]))
	
.LABEL $label$3
	if ( $4 ){ goto $label$2 }
	$1 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)0
	
.LOOP $label$9:
	$9 = (($10 + $4) + [-1])
	$8 = *($9)
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [18216])
	$8 = *($9)
	
.LABEL $label$10
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$9 }
	$8 = *($3 + [308])
	
.LABEL $label$1
	*($3 + [296]) = ((int_64)((int_64)$1 << (int_64)8) | (int_64)*($8 + [32]))
	$4 = CALL $20($0, ($3 + [296]))
	*($3 + [248]) = *($4)
	$11 = CALL $120((($3 + [248]) | [4]), ($4 + [4]))
	$13 = CALL $120((($3 + [248]) + [16]), ($4 + [16]))
	*((($3 + [248]) + [44])) = *(($4 + [44]))
	*((($3 + [248]) + [36])) = *(($4 + [36]))
	*($3 + [276 align=4]) = *($4 + [28 align=4])
	CALL $3(($3 + [232]), $2, [124])
	*($3 + [208]) = [0]
	*($3 + [200]) = (int_64)0
	$4 = (*($3 + [236]) - *($3 + [232]))
	$9 = ((int_32)$4 / (int_32)[12])
	if ( ($4 == 0) ){ goto $label$18 }
	if ( ((uint_32)$9 >= (uint_32)[357913942]) ){ goto $label$14 }
	$8 = CALL _Znwj($4)
	*(($3 + [208])) = ($8 + ((int_32)$9 * (int_32)[12]))
	*($3 + [200]) = $8
	*($3 + [204]) = $8
	$9 = *($3 + [236])
	$4 = *($3 + [232])
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$17 }
	
.LOOP $label$19:
	CALL $120($8, $4)
	$8 = (*($3 + [204]) + [12])
	*($3 + [204]) = $8
	$4 = ($4 + [12])
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$19 }
	$10 = *($3 + [200])
	*($3 + [224]) = [0]
	*($3 + [216]) = (int_64)0
	$4 = $10
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$8 = [0]
	$10 = [0]
	$4 = [0]
	*($3 + [224]) = [0]
	*($3 + [216]) = (int_64)0
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$10 = $8
	*($3 + [224]) = [0]
	*($3 + [216]) = (int_64)0
	$4 = $8
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$15 }
	
.LABEL $label$16
	$10 = ($3 + [224])
	
.LOOP $label$21:
	$9 = CALL $129($4, [0], [10])
	*($3 + [32]) = $9
	$8 = *($3 + [220])
	if ( ((uint_32)$8 >= (uint_32)*($10)) ){ goto $label$22 }
	*($8) = $9
	*($3 + [220]) = ($8 + [2])
	$4 = ($4 + [12])
	if ( ((int_32)$4 != (int_32)*($3 + [204])) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL $26(($3 + [216]), ($3 + [32]))
	$4 = ($4 + [12])
	if ( ((int_32)$4 != (int_32)*($3 + [204])) ){ goto $label$21 }
	
.LABEL $label$20
	$8 = $4
	$10 = *($3 + [200])
	$4 = $10
	
.LABEL $label$15
	if ( ($4 == 0) ){ goto $label$23 }
	$9 = $10
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$24 }
	
.LOOP $label$25:
	$9 = ($8 + [-12])
	if ( ((*($9) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$26
	$8 = $9
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$25 }
	$9 = *($3 + [200])
	
.LABEL $label$24
	*($3 + [204]) = $10
	CALL _ZdlPv($9)
	
.LABEL $label$23
	CALL eosio_assert(((int_32)(*($3 + [220]) - *($3 + [216])) == (int_32)[12]), [17534])
	$8 = *($3 + [220])
	$4 = *($3 + [216])
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$27 }
	
.LOOP $label$28:
	CALL eosio_assert((*($4) <= [416]), [17574])
	$4 = ($4 + [2])
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$28 }
	
.LABEL $label$27
	CALL prints([17621])
	$8 = *($3 + [220])
	$4 = *($3 + [216])
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$29 }
	
.LOOP $label$30:
	CALL printi(*($4))
	CALL prints([17628])
	$4 = ($4 + [2])
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$30 }
	
.LABEL $label$29
	CALL prints([17467])
	*($3 + [184]) = (int_64)0
	*($3 + [192]) = [0]
	$8 = *($3 + [216])
	*(($4 = CALL _Znwj([4]))) = *($8)
	*($4 + [2]) = *($8 + [2])
	*($3 + [184]) = $4
	$4 = ($4 + [4])
	*($3 + [192]) = $4
	*($3 + [188]) = $4
	*($3 + [168]) = (int_64)0
	*($3 + [176]) = [0]
	$8 = *($3 + [216])
	*(($4 = CALL _Znwj([4]))) = *($8 + [4])
	*($4 + [2]) = *($8 + [6])
	*($3 + [168]) = $4
	$10 = ($4 + [4])
	*($3 + [176]) = $10
	*($3 + [172]) = $10
	$12 = [0]
	$2 = *($3 + [188])
	$8 = *($3 + [184])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$33 }
	$4 = [0]
	
.LOOP $label$34:
	$9 = *($8)
	CALL prints([17459])
	$9 = ((uint_32)$9 % (uint_32)[52])
	$4 = ($4 + ( [0] ? (uint_32($9 >> [2]) + [1]) : ((uint_32)$9 > (uint_32)[35]) ))
	CALL printi((CASTING uint_64)(uint_32 $4))
	CALL prints([17467])
	$8 = ($8 + [2])
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$34 }
	$12 = ((uint_32)$4 % (uint_32)[10])
	$10 = *($3 + [172])
	$4 = *($3 + [168])
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$32 }
	
.LABEL $label$33
	$8 = [0]
	
.LOOP $label$35:
	$9 = *($4)
	CALL prints([17459])
	$9 = ((uint_32)$9 % (uint_32)[52])
	$8 = ($8 + ( [0] ? (uint_32($9 >> [2]) + [1]) : ((uint_32)$9 > (uint_32)[35]) ))
	CALL printi((CASTING uint_64)(uint_32 $8))
	CALL prints([17467])
	$4 = ($4 + [2])
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$35 }
	$10 = ((uint_32)$8 % (uint_32)[10])
	goto $label$31 
	
.LABEL $label$32
	$10 = [0]
	
.LABEL $label$31
	CALL prints([17631])
	CALL printui(((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)255))
	CALL prints([17639])
	CALL printui(((int_64)(CASTING uint_64)(uint_32 $12) & (int_64)255))
	CALL prints([17467])
	*($3 + [164]) = [0]
	$4 = [4]
	if ( (CALL $21($3, ($3 + [184])) == 0) ){ goto $label$36 }
	*($3 + [164]) = [8]
	$4 = [12]
	
.LABEL $label$36
	if ( (CALL $21($3, ($3 + [168])) == 0) ){ goto $label$37 }
	*($3 + [164]) = $4
	
.LABEL $label$37
	if ( ((uint_32)(($10 | $12) & [255]) > (uint_32)[7]) ){ goto $label$11 }
	if ( ((uint_32)($12 & [255]) > (uint_32)[5]) ){ goto $label$12 }
	$8 = (*($3 + [216]) + [8])
	$4 = *($3 + [188])
	if ( ((int_32)$4 == (int_32)*((($3 + [184]) + [8]))) ){ goto $label$39 }
	*($4) = *($8)
	$2 = ($4 + [2])
	*($3 + [188]) = $2
	$4 = *($3 + [184])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$38 }
	goto $label$13 
	
.LABEL $label$39
	CALL $27(($3 + [184]), $8)
	$2 = *($3 + [188])
	$4 = *($3 + [184])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$38
	$12 = [0]
	goto $label$12 
	
.LABEL $label$14
	CALL $135(($3 + [200]))
	
.LABEL $label$13
	$8 = [0]
	
.LOOP $label$40:
	$9 = *($4)
	CALL prints([17459])
	$9 = ((uint_32)$9 % (uint_32)[52])
	$8 = ($8 + ( [0] ? (uint_32($9 >> [2]) + [1]) : ((uint_32)$9 > (uint_32)[35]) ))
	CALL printi((CASTING uint_64)(uint_32 $8))
	CALL prints([17467])
	$4 = ($4 + [2])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$40 }
	$12 = ((uint_32)$8 % (uint_32)[10])
	
.LABEL $label$12
	$4 = ($10 & [255])
	if ( ($4 <= [3]) ){ goto $label$41 }
	$4 = (($4 <= [6]) & ((int_32)($12 & [-2]) == (int_32)[6]))
	if ( ((int_32)$10 == (int_32)[7]) ){ goto $label$55 }
	$8 = *($3 + [184])
	if ( ((int_32)(*($3 + [188]) - $8) != (int_32)[6]) ){ goto $label$55 }
	$8 = *($8 + [4])
	*($3) = (int_64)4294967296
	*($3 + [8 align=4]) = (int_64)38654705672
	*((($3 + [120]) + [16])) = *([0] + [17664 align=4])
	*((($3 + [120]) + [8])) = *([0] + [17656 align=4])
	*($3 + [120]) = *([0] + [17648 align=4])
	*(($3 + [56])) = *([0] + [17696 align=4])
	*((($3 + [32]) + [16])) = *([0] + [17688 align=4])
	*((($3 + [32]) + [8])) = *([0] + [17680 align=4])
	*($3 + [32]) = *([0] + [17672 align=4])
	$8 = ((uint_32)$8 % (uint_32)[52])
	$9 = (($10 & [255]) + [-3])
	if ( ((uint_32)$9 > (uint_32)[3]) ){ goto $label$56 }
	$2 = ( [0] ? (uint_32($8 >> [2]) + [1]) : ((uint_32)$8 > (uint_32)[35]) )
	goto $label$60 
	
.LABEL $label$60
	$10 = [3]
	if ( ($4 | ((int_32)$2 != (int_32)[8])) ){ goto $label$41 }
	goto $label$11 
	
.LABEL $label$59
	$14 = ($3 + [16])
	$9 = $3
	if ( ((uint_32)($8 & [65535]) > (uint_32)[35]) ){ goto $label$50 }
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$54 }
	$9 = ($3 + [4])
	goto $label$50 
	
.LABEL $label$58
	$14 = ($3 + [144])
	$9 = ($3 + [120])
	if ( ((uint_32)($8 & [65535]) > (uint_32)[35]) ){ goto $label$44 }
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$53 }
	$9 = (($3 + [120]) | [4])
	goto $label$44 
	
.LABEL $label$57
	$14 = ($3 + [64])
	$9 = ($3 + [32])
	if ( ((uint_32)($8 & [65535]) > (uint_32)[35]) ){ goto $label$42 }
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$52 }
	$9 = (($3 + [32]) | [4])
	goto $label$42 
	
.LABEL $label$56
	CALL eosio_assert([0], [17704])
	
.LABEL $label$55
	if ( ($4 == 0) ){ goto $label$11 }
	goto $label$41 
	
.LABEL $label$54
	if ( ((int_32)$2 != (int_32)[8]) ){ goto $label$51 }
	$9 = ($3 + [8])
	goto $label$50 
	
.LABEL $label$53
	if ( ((int_32)$2 != (int_32)[2]) ){ goto $label$49 }
	$9 = ($3 + [128])
	goto $label$44 
	
.LABEL $label$52
	if ( ((int_32)$2 != (int_32)[2]) ){ goto $label$48 }
	$9 = ($3 + [40])
	goto $label$42 
	
.LABEL $label$51
	$9 = ( ($3 + [12]) ? $14 : ((int_32)$2 == (int_32)[9]) )
	
.LABEL $label$50
	$10 = [4]
	if ( ($4 | ((int_32)$9 == (int_32)$14)) ){ goto $label$41 }
	goto $label$11 
	
.LABEL $label$49
	if ( ((int_32)$2 != (int_32)[3]) ){ goto $label$47 }
	$9 = ($3 + [132])
	goto $label$44 
	
.LABEL $label$48
	if ( ((int_32)$2 != (int_32)[3]) ){ goto $label$46 }
	$9 = ($3 + [44])
	goto $label$42 
	
.LABEL $label$47
	if ( ((int_32)$2 != (int_32)[8]) ){ goto $label$45 }
	$9 = ($3 + [136])
	goto $label$44 
	
.LABEL $label$46
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$43 }
	$9 = ($3 + [48])
	goto $label$42 
	
.LABEL $label$45
	$9 = ( ($3 + [140]) ? $14 : ((int_32)$2 == (int_32)[9]) )
	
.LABEL $label$44
	$10 = [5]
	if ( ($4 | ((int_32)$9 == (int_32)$14)) ){ goto $label$41 }
	goto $label$11 
	
.LABEL $label$43
	if ( ((int_32)$2 != (int_32)[5]) ){ goto $label$61 }
	$9 = ($3 + [52])
	goto $label$42 
	
.LABEL $label$61
	if ( ((int_32)$2 != (int_32)[8]) ){ goto $label$62 }
	$9 = ($3 + [56])
	goto $label$42 
	
.LABEL $label$62
	$9 = ( ($3 + [60]) ? $14 : ((int_32)$2 == (int_32)[9]) )
	
.LABEL $label$42
	$10 = [6]
	if ( (($4 | ((int_32)$9 == (int_32)$14)) == 0) ){ goto $label$11 }
	
.LABEL $label$41
	$8 = (*($3 + [216]) + [10])
	$4 = *($3 + [172])
	if ( ((int_32)$4 == (int_32)*(($3 + [176]))) ){ goto $label$65 }
	*($4) = *($8)
	$10 = ($4 + [2])
	*($3 + [172]) = $10
	$4 = *($3 + [168])
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	CALL $27(($3 + [168]), $8)
	$10 = *($3 + [172])
	$4 = *($3 + [168])
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$63 }
	
.LABEL $label$64
	$10 = [0]
	goto $label$11 
	
.LABEL $label$63
	$8 = [0]
	
.LOOP $label$66:
	$9 = *($4)
	CALL prints([17459])
	$9 = ((uint_32)$9 % (uint_32)[52])
	$8 = ($8 + ( [0] ? (uint_32($9 >> [2]) + [1]) : ((uint_32)$9 > (uint_32)[35]) ))
	CALL printi((CASTING uint_64)(uint_32 $8))
	CALL prints([17467])
	$4 = ($4 + [2])
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$66 }
	$10 = ((uint_32)$8 % (uint_32)[10])
	
.LABEL $label$11
	CALL prints([17631])
	CALL printui(((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)255))
	CALL prints([17639])
	CALL printui(((int_64)(CASTING uint_64)(uint_32 $12) & (int_64)255))
	CALL prints([17467])
	if ( ((uint_32)($10 & [255]) <= (uint_32)($12 & [255])) ){ goto $label$67 }
	*($3 + [164]) = (*($3 + [164]) | [1])
	
.LABEL $label$67
	if ( ((uint_32)($10 & [255]) >= (uint_32)($12 & [255])) ){ goto $label$68 }
	*($3 + [164]) = (*($3 + [164]) | [2])
	
.LABEL $label$68
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$69 }
	*($3 + [164]) = (*($3 + [164]) | [16])
	
.LABEL $label$69
	*(($3 + [152])) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	*($3 + [156]) = [0]
	$1 = *($0)
	*($3 + [120]) = $1
	*($3 + [128]) = $1
	*($3 + [112]) = ($3 + [120])
	CALL $28(($3 + [104]), ($3 + [112]), ($3 + [408]))
	CALL $29(($3 + [96]), ($3 + [112]), ($3 + [408]))
	$1 = CALL current_time()
	*(($3 + [60])) = (int_64)0
	*(($3 + [76])) = (int_64)0
	*(($3 + [84])) = (int_64)0
	*($3 + [44]) = [0]
	*($3 + [48]) = [0]
	*($3 + [52 align=4]) = (int_64)0
	*($3 + [68 align=4]) = (int_64)0
	*($3 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	$1 = *($3 + [104])
	*($3 + [416]) = $1
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)*($3 + [100]) == (int_32)$4)) ){ goto $label$70 }
	$8 = ($3 + [8])
	$9 = ($3 + [12])
	$10 = ($3 + [16])
	$2 = ($3 + [20])
	
.LOOP $label$71:
	if ( ((([1] << *($4 + [64])) & *($3 + [164])) == 0) ){ goto $label$72 }
	$1 = *($0)
	*($8) = $0
	*($9) = ($3 + [32])
	*($10) = ($3 + [248])
	*($2) = ($3 + [296])
	*($3 + [4]) = ($3 + [416])
	*($3) = ($3 + [304])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18789])
	CALL $30(*($3 + [112]), $4, $1, $3)
	
.LABEL $label$72
	CALL $31(($3 + [416]))
	$4 = *($3 + [420])
	if ( ((int_32)$4 != (int_32)*($3 + [100])) ){ goto $label$71 }
	if ( ((int_32)*(($3 + [72])) == (int_32)*($3 + [68])) ){ goto $label$70 }
	*(($3 + [52])) = [5]
	$1 = CALL current_time()
	*($3 + [8]) = (int_64)0
	*($3) = $1
	$1 = *($0)
	CALL $32(($3 + [416]), ($3 + [32]))
	$4 = *($3 + [416])
	CALL send_deferred($3, $1, $4, (*($3 + [420]) - $4), [1])
	$4 = *($3 + [416])
	if ( ($4 == 0) ){ goto $label$70 }
	*($3 + [420]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$70
	$4 = *($3 + [308])
	$1 = *($0)
	*($3 + [4]) = ($3 + [184])
	*($3) = ($3 + [164])
	*($3 + [8]) = ($3 + [168])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18789])
	CALL $33(($3 + [312]), $4, $1, $3)
	CALL $34(($3 + [32]))
	CALL $35(($3 + [144]))
	$4 = *($3 + [168])
	if ( ($4 == 0) ){ goto $label$73 }
	*($3 + [172]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$73
	$4 = *($3 + [184])
	if ( ($4 == 0) ){ goto $label$74 }
	*($3 + [188]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$74
	$4 = *($3 + [216])
	if ( ($4 == 0) ){ goto $label$75 }
	*($3 + [220]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$75
	$9 = *($3 + [232])
	if ( ($9 == 0) ){ goto $label$76 }
	$8 = *($3 + [236])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$78 }
	
.LOOP $label$79:
	$4 = ($8 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$80 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$80
	$8 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$79 }
	$4 = *($3 + [232])
	goto $label$77 
	
.LABEL $label$78
	$4 = $9
	
.LABEL $label$77
	*($3 + [236]) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$76
	if ( ((*($13) & [1]) == 0) ){ goto $label$81 }
	CALL _ZdlPv(*(($3 + [272])))
	
.LABEL $label$81
	if ( ((*($11) & [1]) == 0) ){ goto $label$82 }
	CALL _ZdlPv(*(($3 + [260])))
	
.LABEL $label$82
	CALL $36(($3 + [336]))
	$4 = *($3 + [392])
	if ( ($4 == 0) ){ goto $label$83 }
	*(($3 + [396])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$83
	if ( ((*($5) & [1]) == 0) ){ goto $label$84 }
	CALL _ZdlPv(*(($3 + [364])))
	
.LABEL $label$84
	$global$0 = ($3 + [432])
	(unreachable)
	(unreachable)
	$9
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	if ( ((int_32)$4 <= (int_32)[-3]) ){ goto $label$2 }
	$4 = (*($0 + [8]) - $3)
	$5 = int_32($4 >> [1])
	$6 = ($5 + [1])
	$4 = ( ( $6 ? $4 : ($4 <= $6) ) ? [2147483647] : (int_32($4 >> [1]) <= [1073741823]) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL _Znwj(($4 << [1]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	
.LABEL $label$3
	*(($5 = ($6 + ($5 << [1])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($5 - $2)
	$4 = ($6 + ($4 << [1]))
	$6 = ($5 + [2])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	CALL abort()
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	if ( ((int_32)$4 <= (int_32)[-3]) ){ goto $label$2 }
	$4 = (*($0 + [8]) - $3)
	$5 = int_32($4 >> [1])
	$6 = ($5 + [1])
	$4 = ( ( $6 ? $4 : ($4 <= $6) ) ? [2147483647] : (int_32($4 >> [1]) <= [1073741823]) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL _Znwj(($4 << [1]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	
.LABEL $label$3
	*(($5 = ($6 + ($5 << [1])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($5 - $2)
	$4 = ($6 + ($4 << [1]))
	$6 = ($5 + [2])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	CALL abort()
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($1 + [4]), ($0 + [24]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $135 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = CALL $120(($2 + [16]), $1)
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$4 = *($1 + [24])
	$5 = *($1 + [16])
	$6 = *($1 + [12])
	$7 = (*(($1 + [36])) - *($1 + [32]))
	if ( ($7 == 0) ){ goto $label$2 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$1 }
	$8 = CALL _Znwj($7)
	*(($2 + [8])) = ($8 + (int_32($7 >> [1]) << [1]))
	*($2) = $8
	*($2 + [4]) = $8
	$9 = *(($1 + [32]))
	$7 = (*(($1 + [36])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($8, $9, $7)
	*($2 + [4]) = (*($2 + [4]) + $7)
	
.LABEL $label$2
	$7 = *($1 + [45])
	$8 = *($1 + [44])
	$1 = *($0 + [4])
	$9 = *($1 + [4])
	$0 = (*($0) + int_32($9 >> [1]))
	$1 = *($1)
	if ( (($9 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($0) + $1))
	
.LABEL $label$3
	$9 = CALL $120(($2 + [32]), $3)
	CALL void $0((int_32 $9), (int_32 ($6 & [255])), (int_32 $5), (int_64 $4), (int_64 $2), (int_32 ($8 & [255])), (int_32 ($7 & [255])), (int_32 $1))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$4
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$5 }
	*($2 + [4]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$6
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $135($2)
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $72(*($1), *($0))
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [18575])
	CALL memcpy(($0 + [12]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy(($0 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $85(*($1), ($0 + [32]))
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [18575])
	CALL memcpy(($0 + [44]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [18575])
	CALL memcpy(($0 + [45]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *(($4 + [24]))
	$7 = ($6 & [1])
	$6 = *($4 + [16])
	$6 = ( *(($4 + [20])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [18171])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ( $5 ? ($4 + [17]) : $7 )
	$9 = (int_64)0
	
.LOOP $label$5:
	$7 = (($8 + $6) + [-1])
	$5 = *($7)
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [18216])
	$5 = *($7)
	
.LABEL $label$6
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)0
	
.LABEL $label$1
	*($2 + [8]) = ((int_64)$9 | (int_64)*($4 + [28]))
	if ( (CALL $146(*($0 + [8]), ($2 + [8]), [8]) == 0) ){ goto $label$7 }
	$6 = *(*($0 + [12]) + [56])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$8 }
	$6 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-4060986526864314368, $2, *(*($0 + [16])))
	*(*(($0 + [12])) + [56]) = $6
	
.LABEL $label$8
	CALL db_idx64_update($6, *(*($0 + [20])), ($2 + [8]))
	
.LABEL $label$7
	$global$0 = ($2 + [16])
}

int_32 .FUNC $65 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18575])
	CALL memcpy(($4 + [32]), $2, [8])
	$3 = ($7 & [-2])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [18575])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [2])
	CALL eosio_assert(((int_32)$3 != (int_32)[10]), [18575])
	CALL memcpy((($4 + [32]) + [10]), ($2 + [10]), [2])
	*(($4 + [20])) = ($2 + [12])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [42])
	$9 = *($4 + [40])
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($9 & [65535])), (int_32 ($8 & [65535])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $156($2)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $64 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18575])
	CALL memcpy(($4 + [8]), $2, [8])
	$8 = *($4 + [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $8
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [40])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $156($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18575])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $72(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $66 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18575])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	$8 = (($4 + [72]) + [8])
	CALL $72(($4 + [56]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($9 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($9)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = CALL $120(($4 + [112]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $156($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [128])
	return $2
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18575])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $156($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = [0]
	*($4 + [100 align=4]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $70(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $71(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	$2 = [1]
	if ( (*($4 + [84]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $156($2)
	$2 = [1]
	if ( ((*($4 + [84]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [92])))
	if ( (*($4 + [72]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [72]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $63 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [112])) = [0]
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [84]) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [116]) = [0]
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $68(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $69(($4 + [144]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $156($2)
	
.LABEL $label$4
	$2 = *(($4 + [104]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [108])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $62 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $152($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18575])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $156($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = (*($2) + [17])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [25])
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [32])
	$4 = *($3 + [4])
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [1]))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	$1 = (($6 & [-2]) + $1)
	
.LABEL $label$4
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [36])
	$4 = *($3 + [4])
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [1]))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	$1 = (($6 & [-2]) + $1)
	
.LABEL $label$6
	$1 = ($1 + [18])
	*($2) = $1
	$0 = *($0)
	$0 = *($0 + [52])
	$3 = *($0 + [4])
	$4 = ($3 - $0)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [1]))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	$1 = (($4 & [-2]) + $1)
	
.LABEL $label$8
	*($2) = ($1 + [5])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [1])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [1])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = ( ( $4 ? $5 : ($5 <= $4) ) ? [2147483647] : (int_32($5 >> [1]) <= [1073741823]) )
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = ($6 << [1])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$3 = int_32($5 >> [1])
	$5 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $5) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$5 = ($7 - $1)
	if ( ($5 == 0) ){ goto $label$6 }
	CALL memmove($6, $1, $5)
	
.LABEL $label$6
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($5 >> [1]) << [1]))
	return (unreachable)
	
.LABEL $label$1
	CALL $135($0)
}

int_64 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [76]) = $1
	*(($2 + [64])) = [0]
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	$3 = *($0)
	*($2 + [32]) = $3
	*($2 + [40]) = $3
	$1 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)7235159541906337792, (int_64)1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $14(($2 + [32]), $4)
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)($2 + [32])), [18501])
	
.LABEL $label$1
	*($2 + [28]) = $1
	*($2 + [24]) = ($2 + [32])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [17375])
	$1 = *($2 + [28])
	$3 = *($0)
	*($2 + [4]) = ($2 + [16])
	*($2) = ($2 + [76])
	*($2 + [8]) = ($2 + [24])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18789])
	CALL $106(($2 + [32]), $1, $3, $2)
	$3 = *($2 + [16])
	$5 = *($2 + [56])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [60])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($1 + [44])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$1 = *(($2 + [56]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($2 + [80])
	return $3
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18338])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	CALL $89(*($1), *($0 + [12]))
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18338])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $91(*($1), *($0 + [32]))
	CALL $91(*($1), *($0 + [36]))
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [18338])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $91(*($1), *($0 + [52]))
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18338])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [60])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18338])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $74(($6 + [28]), [16])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [18338])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [18338])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($5 = ($2 + [-16]))) = [0]
	$3 = ($8 + [-24])
	*($4) = *($3)
	$4 = ($8 + [-16])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$5 = ($8 + [-12])
	*($4) = *($5)
	*($3) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_64 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($2 + [72])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	*($2 + [76]) = [0]
	$3 = *($0)
	*($2 + [40]) = $3
	*($2 + [48]) = $3
	*($2 + [32]) = ($2 + [40])
	*($2 + [16]) = *($1)
	CALL $9(($2 + [24]), ($2 + [32]), ($2 + [16]))
	CALL eosio_assert(((int_32)*($2 + [28]) != (int_32)[0]), [17426])
	$1 = *($2 + [28])
	$3 = *($0)
	*($2 + [12]) = ($2 + [24])
	*($2 + [8]) = ($2 + [16])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18789])
	CALL $107(*($2 + [32]), $1, $3, ($2 + [8]))
	$3 = *($2 + [16])
	$4 = *($2 + [64])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [68])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($0 + [24])))
	
.LABEL $label$6
	if ( ((*($0 + [4]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($0 + [12])))
	
.LABEL $label$7
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	$0 = *(($2 + [64]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
	return $3
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18338])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18338])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [18338])
	CALL memcpy(*($3 + [4]), $2, [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	CALL $89(*($1), *($0 + [4]))
	CALL $89(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18338])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18338])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [18338])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18338])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [52]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18741])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4060986526864314368)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18687])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18687])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $81(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [1]) >= (uint_32)$1) ){ goto $label$3 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [1])
	$3 = ($5 + $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [0]
	$2 = ($2 - $4)
	$2 = ( ( $3 ? $2 : ($2 <= $3) ) ? [2147483647] : (int_32($2 >> [1]) <= [1073741823]) )
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL _Znwj(($2 << [1]))
	
.LABEL $label$4
	$4 = ($6 + ($2 << [1]))
	$3 = ($6 + ($5 << [1]))
	$6 = $3
	$2 = $1
	
.LOOP $label$5:
	*($6) = [0]
	$6 = ($6 + [2])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$5 = ($3 + ($1 << [1]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$7 }
	CALL _ZdlPv($6)
	
.LABEL $label$7
	return (unreachable)
	
.LABEL $label$3
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [2])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	*(($0 + [4])) = ($3 + ($1 << [1]))
	return (unreachable)
	
.LABEL $label$2
	CALL $135($0)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18580])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [1])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $86($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [1]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($5) - $3) > (uint_32)[1]), [18575])
	CALL memcpy($7, *($2), [2])
	$3 = (*($2) + [2])
	*($2) = $3
	$7 = ($7 + [2])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18575])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	CALL $72(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18575])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $85(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18575])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [18575])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18575])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18580])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $74($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18575])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [18575])
	CALL memcpy($2, *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	CALL $72(*($1), *($0 + [4]))
	CALL $72(*($1), *($0 + [8]))
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18575])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18575])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [18575])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18552])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $152($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [4 align=4]) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [4])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [28])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [36])
	*($3 + [56]) = ($5 + [40])
	CALL $82(($3 + [32]), ($3 + [24]))
	*($5 + [56]) = [-1]
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$10
	if ( ((*($1 + [4]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [12])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-4060986526864314368, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)$6 == (int_64)*($4)) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [18501])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $81($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-4060986526864314368, $6))
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)$7), [18501])
	
.LABEL $label$2
	*(($4 + [56])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $149 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $148 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $144 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $141($3, (int_64)0)
	$4 = CALL $143($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $147 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $146 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $141 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $140 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $139($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_64 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $142($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $136()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $142($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19297]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $141($0, (int_64)0)
	*(CALL $136()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $142($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $142($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $142($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $142($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19297])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19297]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19297]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $142($0)
	$5 = *(($6 + [19297]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $142($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19297]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8209]))
	$8 = (int_64)0
	$5 = *(($6 + [19297]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19297]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $142($0)
	$5 = *(($6 + [19297]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $142($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19297]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $141($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19297]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19297]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $142($0) + [19297]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $136()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $136()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $136()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $142 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $140($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $83($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $124($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $124($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $119($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $72(*($1), *($0))
	$0 = *($0)
	CALL $72(*($1), ($0 + [12]))
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [18575])
	CALL memcpy(($0 + [24]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [18575])
	CALL memcpy(($0 + [28]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [18575])
	CALL memcpy(($0 + [32]), *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [18575])
	CALL memcpy(($0 + [40]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = CALL $120(($2 + [16]), $1)
	$4 = CALL $120($2, ($1 + [12]))
	$5 = *($1 + [40])
	$6 = *($1 + [32])
	$7 = *($1 + [28])
	$8 = *($1 + [24])
	$1 = *($0 + [4])
	$9 = *($1 + [4])
	$0 = (*($0) + int_32($9 >> [1]))
	$1 = *($1)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$10 = CALL $120(($2 + [32]), $4)
	$9 = CALL $120(($2 + [48]), $3)
	CALL void $0((int_32 $9), (int_32 $10), (int_32 ($8 & [255])), (int_32 $7), (int_32 $6), (int_32 $5), (int_64 $1))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($9 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($3) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18338])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18338])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18338])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $78(CALL $79($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18338])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [18338])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $78($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $135($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-6147718988072747008, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $25(($2 + [8]), $5)
	CALL eosio_assert(((int_32)*($4 + [132]) == (int_32)($2 + [8])), [18501])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)[20]), [17726])
	$3 = *($0)
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [18789])
	CALL $40(($2 + [8]), $4, $3)
	CALL $36(($2 + [32]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [112])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [116])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($3 + [76])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($3 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = *($3 + [64])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [68])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18552])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $152($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([120])) + [32]) = [0]
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = [0]
	*($5 + [88 align=4]) = (int_64)0
	*($5 + [96]) = [0]
	*($5 + [100]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [72])
	*($3 + [72]) = ($5 + [80])
	*($3 + [76]) = ($5 + [88])
	CALL $94(($3 + [40]), ($3 + [32]))
	*($5 + [104]) = $1
	*($5 + [108 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $50(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $156($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [88]) & [1]) ){ goto $label$14 }
	if ( (*($1 + [48]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [96])))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [56])))
	if ( (*($1 + [24]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18338])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18338])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18338])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18338])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18338])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $73($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $74($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $75($2, $1)
	CALL $77(CALL $76(CALL $76($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$4 = ($global$0 - [112])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [132]) == (int_32)$0), [18824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [18870])
	$6 = ($1 + [20])
	$7 = ($1 + [8])
	$8 = *($7)
	$9 = *($1 + [20])
	if ( ($9 & [1]) ){ goto $label$5 }
	$10 = ($6 + [1])
	$9 = uint_32($9 >> [1])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$10 = *(($1 + [28]))
	$9 = *(($1 + [24]))
	if ( ($9 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [18171])
	goto $label$2 
	
.LABEL $label$3
	if ( $9 ){ goto $label$2 }
	$11 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$11 = (int_64)0
	
.LOOP $label$6:
	$12 = (($10 + $9) + [-1])
	$13 = *($12)
	if ( ((($13 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [18216])
	$13 = *($12)
	
.LABEL $label$7
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$6 }
	$11 = ((int_64)$11 << (int_64)8)
	
.LABEL $label$1
	*($1 + [16]) = [20]
	*($5 + [24]) = $8
	*($5 + [32]) = ((int_64)$11 | (int_64)*($1 + [32]))
	$8 = *($1)
	*($1 + [96]) = CALL current_time()
	*($1 + [88]) = *(*($3))
	$9 = *($3 + [4])
	$12 = ($1 + [64])
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$8 }
	CALL $100($12, *($9), *($9 + [4]))
	
.LABEL $label$8
	$14 = ($1 + [88])
	$15 = ($1 + [96])
	$16 = ($1 + [16])
	$17 = ($1 + [32])
	$9 = *($3 + [8])
	$10 = ($1 + [76])
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$9 }
	CALL $100($10, *($9), *($9 + [4]))
	
.LABEL $label$9
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [18921])
	*($5 + [104]) = [0]
	*($5 + [8]) = ($5 + [104])
	*($5 + [44]) = $7
	*($5 + [40]) = $1
	*($5 + [48]) = $16
	*($5 + [52]) = $6
	*($5 + [56]) = $17
	$3 = ($1 + [40])
	*($5 + [60]) = $3
	$18 = ($1 + [48])
	*($5 + [64]) = $18
	$19 = ($1 + [56])
	*($5 + [68]) = $19
	*($5 + [72]) = $12
	*($5 + [76]) = $10
	*($5 + [80]) = $14
	*($5 + [84]) = $15
	$20 = ($1 + [104])
	*($5 + [88]) = $20
	$21 = ($1 + [112])
	*($5 + [92]) = $21
	$22 = ($1 + [124])
	*($5 + [96]) = $22
	$23 = ($1 + [128])
	*($5 + [100]) = $23
	CALL $101(($5 + [40]), ($5 + [8]))
	$13 = *($5 + [104])
	if ( ($13 <= [513]) ){ goto $label$11 }
	$9 = CALL $152($13)
	goto $label$10 
	
.LABEL $label$11
	$9 = ($4 - (($13 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$10
	*($5 + [12]) = $9
	*($5 + [8]) = $9
	*($5 + [16]) = ($9 + $13)
	*($5 + [104]) = ($5 + [8])
	*($5 + [44]) = $7
	*($5 + [48]) = $16
	*($5 + [52]) = $6
	*($5 + [56]) = $17
	*($5 + [60]) = $3
	*($5 + [64]) = $18
	*($5 + [68]) = $19
	*($5 + [72]) = $12
	*($5 + [76]) = $10
	*($5 + [80]) = $14
	*($5 + [84]) = $15
	*($5 + [88]) = $20
	*($5 + [92]) = $21
	*($5 + [96]) = $22
	*($5 + [100]) = $23
	*($5 + [40]) = $1
	CALL $102(($5 + [40]), ($5 + [104]))
	CALL db_update_i64(*($1 + [136]), $2, $9, $13)
	if ( ($13 <= [513]) ){ goto $label$12 }
	CALL $156($9)
	
.LABEL $label$12
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($5 + [40]) = *($7)
	if ( (CALL $146(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$14 }
	$9 = *($1 + [140])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$15 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747008, ($5 + [104]), $8)
	*(($1 + [140])) = $9
	
.LABEL $label$15
	CALL db_idx64_update($9, $2, ($5 + [40]))
	
.LABEL $label$14
	$9 = *($6)
	if ( ($9 & [1]) ){ goto $label$20 }
	$10 = ($6 + [1])
	$6 = ($5 + [32])
	$9 = uint_32($9 >> [1])
	if ( ((uint_32)$9 >= (uint_32)[8]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$10 = *(($1 + [28]))
	$6 = ($5 + [32])
	$9 = *(($1 + [24]))
	if ( ($9 <= [8]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert([0], [18171])
	goto $label$17 
	
.LABEL $label$18
	if ( $9 ){ goto $label$17 }
	$11 = (int_64)0
	goto $label$16 
	
.LABEL $label$17
	$11 = (int_64)0
	
.LOOP $label$21:
	$12 = (($10 + $9) + [-1])
	$13 = *($12)
	if ( ((($13 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [18216])
	$13 = *($12)
	
.LABEL $label$22
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$21 }
	$11 = ((int_64)$11 << (int_64)8)
	
.LABEL $label$16
	*($5 + [40]) = ((int_64)$11 | (int_64)*($17))
	if ( (CALL $146($6, ($5 + [40]), [8]) == 0) ){ goto $label$23 }
	$13 = ($1 + [144])
	$9 = *($13)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$24 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6147718988072747007, ($5 + [104]), $8)
	*($13) = $9
	
.LABEL $label$24
	CALL db_idx64_update($9, $2, ($5 + [40]))
	
.LABEL $label$23
	$global$0 = ($5 + [112])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_64 $23
	$4 = ($global$0 - [208])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [18824])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$10()), [18870])
	$6 = ($1 + [24])
	$7 = ($1 + [8])
	$8 = *($7)
	$9 = *($1 + [24])
	if ( ($9 & [1]) ){ goto $label$2 }
	$9 = uint_32($9 >> [1])
	$10 = ($6 + [1])
	goto $label$1 
	
.LABEL $label$2
	$9 = *(($1 + [28]))
	$10 = *(($1 + [32]))
	
.LABEL $label$1
	*($5 + [164]) = $9
	*($5 + [160]) = $10
	*($5 + [48]) = *($5 + [160])
	*($5 + [64]) = *(CALL $2(($5 + [88]), ($5 + [48])))
	*($5 + [56]) = $8
	$11 = *($1)
	$9 = *(*($3 + [4]) + [4])
	*($1 + [72]) = ((uint_64)((int_64)*($9 + [40]) * (int_64)*((*(*(*($3) + [4]) + [112]) + (*($9 + [64]) << [1])))) / (uint_64)(int_64)100)
	$12 = *($3 + [12])
	$13 = *($3 + [8])
	$8 = *($13)
	*($5 + [160]) = [18013]
	*($5 + [164]) = CALL $147([18013])
	*($5 + [40]) = *($5 + [160])
	*($5 + [168]) = *(CALL $2(($5 + [88]), ($5 + [40])))
	*($5 + [160]) = $8
	$9 = *($3 + [16])
	$10 = *($9 + [4])
	if ( ($10 & [1]) ){ goto $label$4 }
	$10 = uint_32($10 >> [1])
	$9 = (($9 + [4]) + [1])
	goto $label$3 
	
.LABEL $label$4
	$10 = *(($9 + [8]))
	$9 = *(($9 + [12]))
	
.LABEL $label$3
	*($5 + [148]) = $10
	*($5 + [144]) = $9
	*($5 + [32]) = *($5 + [144])
	$14 = CALL $2(($5 + [152]), ($5 + [32]))
	*($5 + [176]) = [18162]
	*($5 + [180]) = CALL $147([18162])
	*($5 + [24]) = *($5 + [176])
	$15 = *(CALL $2(($5 + [88]), ($5 + [24])))
	*($5 + [136]) = $15
	$9 = *($6)
	if ( ($9 & [1]) ){ goto $label$6 }
	$9 = uint_32($9 >> [1])
	$10 = ($6 + [1])
	goto $label$5 
	
.LABEL $label$6
	$9 = *(($1 + [28]))
	$10 = *(($1 + [32]))
	
.LABEL $label$5
	$16 = ($1 + [72])
	$17 = ($12 + [36])
	$18 = (($5 + [56]) + [8])
	*($5 + [76]) = $9
	*($5 + [72]) = $10
	*($5 + [16]) = *($5 + [72])
	$19 = CALL $2(($5 + [80]), ($5 + [16]))
	$20 = *(*($3 + [20]))
	$21 = ((int_64)*($1 + [40]) + (int_64)*(($1 + [72])))
	CALL eosio_assert((uint_64)(((int_64)$21 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18269])
	$22 = ($1 + [40])
	$8 = (uint_64)$20 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$23 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $23
	$9 = [1]
	$10 = $3
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $23
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$3 < (int_32)[6])
	$10 = ($3 + [1])
	$3 = $10
	if ( $9 ){ goto $label$11 }
	$9 = [1]
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [18318])
	$8 = *($13)
	*((($5 + [88]) + [24])) = $20
	*($5 + [88]) = $8
	*($5 + [96]) = *($19)
	*($5 + [104]) = $21
	$10 = CALL $120((($5 + [88]) + [32]), [8416])
	$9 = *(($12 + [40]))
	if ( ((uint_32)$9 >= (uint_32)*(($12 + [44]))) ){ goto $label$16 }
	*($9 + [8]) = $15
	*($9 + [16 align=4]) = (int_64)0
	*($9) = *($14)
	*(($13 = ($9 + [24]))) = [0]
	$3 = CALL _Znwj([16])
	*($9 + [16]) = $3
	$14 = ($3 + [16])
	*($13) = $14
	*(($3 + [8])) = *((($5 + [160]) + [8]))
	*($3) = *($5 + [160])
	*(($9 + [20])) = $14
	*($9 + [28 align=4]) = (int_64)0
	*(($9 + [36])) = [0]
	$3 = *($10)
	$10 = ( *((($5 + [88]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($10 + [32])
	$8 = (CASTING uint_64)(uint_32 $10)
	$10 = ($9 + [28])
	
.LOOP $label$17:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$17 }
	if ( ($3 == 0) ){ goto $label$15 }
	CALL $74($10, $3)
	$10 = *(($9 + [32]))
	$3 = *(($9 + [28]))
	goto $label$14 
	
.LABEL $label$16
	CALL $96($17, ($5 + [160]), $14, ($5 + [136]), ($5 + [88]))
	if ( (*($5 + [120]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$10 = [0]
	$3 = [0]
	
.LABEL $label$14
	*($5 + [180]) = $3
	*($5 + [176]) = $3
	*($5 + [184]) = $10
	*($5 + [192]) = ($5 + [176])
	*($5 + [200]) = ($5 + [88])
	CALL $97(($5 + [200]), ($5 + [192]))
	*(($3 = ($12 + [40]))) = (*($3) + [40])
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($5 + [128])))
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$11 == (int_64)*($1)), [18921])
	*($5 + [176]) = [0]
	*($5 + [160]) = ($5 + [176])
	*($5 + [92]) = $7
	*($5 + [88]) = $1
	$10 = ($1 + [16])
	*($5 + [96]) = $10
	*($5 + [100]) = $6
	*($5 + [104]) = $22
	$12 = ($1 + [48])
	*($5 + [108]) = $12
	$13 = ($1 + [64])
	*($5 + [112]) = $13
	*($5 + [116]) = $16
	$14 = ($1 + [80])
	*($5 + [120]) = $14
	$19 = ($1 + [88])
	*($5 + [124]) = $19
	CALL $98(($5 + [88]), ($5 + [160]))
	$9 = *($5 + [176])
	if ( ($9 <= [513]) ){ goto $label$19 }
	$3 = CALL $152($9)
	goto $label$18 
	
.LABEL $label$19
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$18
	*($5 + [164]) = $3
	*($5 + [160]) = $3
	*($5 + [168]) = ($3 + $9)
	*($5 + [176]) = ($5 + [160])
	*($5 + [92]) = $7
	*($5 + [96]) = $10
	*($5 + [100]) = $6
	*($5 + [104]) = $22
	*($5 + [108]) = $12
	*($5 + [112]) = $13
	*($5 + [116]) = $16
	*($5 + [120]) = $14
	*($5 + [124]) = $19
	*($5 + [88]) = $1
	CALL $99(($5 + [88]), ($5 + [176]))
	CALL db_update_i64(*($1 + [104]), $2, $3, $9)
	if ( ($9 <= [513]) ){ goto $label$20 }
	CALL $156($3)
	
.LABEL $label$20
	if ( (uint_64)($11 <= *($0 + [16])) ){ goto $label$21 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	*($5 + [88]) = *($7)
	if ( (CALL $146(($5 + [56]), ($5 + [88]), [8]) == 0) ){ goto $label$22 }
	$3 = *($1 + [108])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$23 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196928, ($5 + [176]), $11)
	*(($1 + [108])) = $3
	
.LABEL $label$23
	CALL db_idx64_update($3, $2, ($5 + [88]))
	
.LABEL $label$22
	$3 = *($6)
	if ( ($3 & [1]) ){ goto $label$25 }
	$3 = uint_32($3 >> [1])
	$9 = ($6 + [1])
	goto $label$24 
	
.LABEL $label$25
	$3 = *(($1 + [28]))
	$9 = *(($1 + [32]))
	
.LABEL $label$24
	*($5 + [180]) = $3
	*($5 + [176]) = $9
	*($5 + [8]) = *($5 + [176])
	*($5 + [88]) = *(CALL $2(($5 + [88]), ($5 + [8])))
	if ( (CALL $146($18, ($5 + [88]), [8]) == 0) ){ goto $label$26 }
	$9 = ($1 + [112])
	$3 = *($9)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$27 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4229865762275196929, ($5 + [176]), $11)
	*($9) = $3
	
.LABEL $label$27
	CALL db_idx64_update($3, $2, ($5 + [88]))
	
.LABEL $label$26
	$global$0 = ($5 + [208])
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18980])
	$3 = *($0 + [4])
	$4 = *($3 + [108])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4229865762275196928, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [108]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$7), [18501])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $37($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4229865762275196928, $6))
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$7), [18501])
	
.LABEL $label$3
	*($2 + [108]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $147([8242])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8242], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $136())
	*(CALL $136()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $144($4, ($3 + [12]), $2)
	$5 = CALL $136()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $130($3)
	
.LABEL $label$1
	CALL $131($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $145(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}