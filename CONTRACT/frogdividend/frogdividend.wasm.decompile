(data (i32.const 16896) "V1.0\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 16910) "eosio.token\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 17013) "frogfrogcoin\00")
(data (i32.const 17026) "transfer\00")
(data (i32.const 17035) "status\00")
(data (i32.const 17042) "admin\00")
(data (i32.const 17048) "claim\00")
(data (i32.const 17054) "unstake\00")
(data (i32.const 17062) "calc\00")
(data (i32.const 17067) "cmessage\00")
(data (i32.const 17076) "string is too long to be a valid name\00")
(data (i32.const 17114) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17181) "character is not in allowed character set for names\00")
(data (i32.const 17233) " from: \00")
(data (i32.const 17241) " quantity: \00")
(data (i32.const 17253) " symbol: \00")
(data (i32.const 17263) " memo: \00")
(data (i32.const 17271) "EOS\00")
(data (i32.const 17276) "No!\00")
(data (i32.const 17280) "stake\00")
(data (i32.const 17286) "Symbol: \00")
(data (i32.const 17295) " Quack \00")
(data (i32.const 17303) "read\00")
(data (i32.const 17308) "get\00")
(data (i32.const 17312) ",\00: out of range\00")
(data (i32.const 17329) "string is too long to be a valid symbol_code\00")
(data (i32.const 17374) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17427) " deposit_eos \00")
(data (i32.const 17441) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17492) "error reading iterator\00")
(data (i32.const 17515) "cannot pass end iterator to modify\00")
(data (i32.const 17550) "object passed to modify is not in multi_index\00")
(data (i32.const 17596) "cannot modify objects in table of another contract\00")
(data (i32.const 17647) "updater cannot change primary key when modifying an object\00")
(data (i32.const 17706) "write\00")
(data (i32.const 17712) "STAKE_TOKEN \00")
(data (i32.const 17725) " A:\00")
(data (i32.const 17729) " \00")
(data (i32.const 17731) " Contract is locked for calculation! \00")
(data (i32.const 17769) " account  exist \00")
(data (i32.const 17786) "account will be created... \00")
(data (i32.const 17814) "cannot create objects in table of another contract\00")
(data (i32.const 17865) " Stake - \00")
(data (i32.const 17875) " VERSION: \00")
(data (i32.const 17886) "my EOS-balance is \00")
(data (i32.const 17905) "FROG\00")
(data (i32.const 17910) "my FROG-balance is \00")
(data (i32.const 17930) "unable to find key\00")
(data (i32.const 17949) ".\00")
(data (i32.const 17951) " ADMIN_1 \00")
(data (i32.const 17961) " weiter1 \00")
(data (i32.const 17971) " weiter2 \00")
(data (i32.const 17981) " ADMIN...[\00")
(data (i32.const 17992) "]\c2\a0\00")
(data (i32.const 17996) " first:...[\00")
(data (i32.const 18008) "test\00")
(data (i32.const 18013) " test-stake... \00")
(data (i32.const 18029) " start:(\00")
(data (i32.const 18038) ") \00")
(data (i32.const 18041) " stop:(\00")
(data (i32.const 18049) "a\00")
(data (i32.const 18051) "b\00")
(data (i32.const 18053) "c\00")
(data (i32.const 18055) "d\00")
(data (i32.const 18057) "e\00")
(data (i32.const 18059) "f\00")
(data (i32.const 18061) "g\00")
(data (i32.const 18063) "h\00")
(data (i32.const 18065) "i\00")
(data (i32.const 18067) "j\00")
(data (i32.const 18069) "k\00")
(data (i32.const 18071) "l\00")
(data (i32.const 18073) "m\00")
(data (i32.const 18075) "testtestab\00")
(data (i32.const 18086) " NAC:[\00")
(data (i32.const 18093) "] \00")
(data (i32.const 18096) " V: (\00")
(data (i32.const 18102) ")\00")
(data (i32.const 18104) "Hello, \00")
(data (i32.const 18112) " account \00")
(data (i32.const 18122) " existiert schon\00")
(data (i32.const 18139) "c \00")
(data (i32.const 18142) " FIN-TEST \00")
(data (i32.const 18153) "test2\00")
(data (i32.const 18159) " test2-stake... \00")
(data (i32.const 18176) " FIN-TEST2 \00")
(data (i32.const 18188) "reset\00")
(data (i32.const 18194) "Reset \00")
(data (i32.const 18201) " FIN-Reset \00")
(data (i32.const 18213) "init\00")
(data (i32.const 18218) " Init... \00")
(data (i32.const 18228) " globals Existiert schon\00")
(data (i32.const 18253) " globals wird angelegt2b... \00")
(data (i32.const 18282) "stop\00")
(data (i32.const 18287) "STOP\00")
(data (i32.const 18292) "resetaccounts\00")
(data (i32.const 18306) " Reset ALL Accounts \00")
(data (i32.const 18327) " max:(\00")
(data (i32.const 18334) " FIN-resetaccounts \00")
(data (i32.const 18354) "editaccount\00")
(data (i32.const 18366) " Edit account... \00")
(data (i32.const 18384) ") eosn:\00")
(data (i32.const 18392) " FIN-editaccount \00")
(data (i32.const 18410) "editaccountfrog\00")
(data (i32.const 18426) " Edit account frog... \00")
(data (i32.const 18449) ") frog:\00")
(data (i32.const 18457) "step\00")
(data (i32.const 18462) "setsec\00")
(data (i32.const 18469) " setlocked... \00")
(data (i32.const 18484) "secshort: \00")
(data (i32.const 18495) "seclong: \00")
(data (i32.const 18505) "setlocked\00")
(data (i32.const 18515) "locked: \00")
(data (i32.const 18524) "setloop\00")
(data (i32.const 18532) " setloop... \00")
(data (i32.const 18545) "setloop: \00")
(data (i32.const 18555) "setpool\00")
(data (i32.const 18563) " setpool... \00")
(data (i32.const 18576) "setpool: \00")
(data (i32.const 18586) "setchunk_size\00")
(data (i32.const 18600) " set chunk_size... \00")
(data (i32.const 18620) "chunk_size: \00")
(data (i32.const 18633) "cannot pass end iterator to erase\00")
(data (i32.const 18667) "cannot increment end iterator\00")
(data (i32.const 18697) "object passed to erase is not in multi_index\00")
(data (i32.const 18742) "cannot erase objects in table of another contract\00")
(data (i32.const 18792) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18845) "CLAIM\00")
(data (i32.const 18851) " claim eos...[\00")
(data (i32.const 18866) " user:...[\00")
(data (i32.const 18877) " before \00")
(data (i32.const 18886) " OK ...\00")
(data (i32.const 18894) " account exist! EOS Balance: \00")
(data (i32.const 18924) " UNKNOWN \00")
(data (i32.const 18934) "Unknown account!\00")
(data (i32.const 18951) "active\00")
(data (i32.const 18958) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 19007) "invalid symbol name\00")
(data (i32.const 19027) "UNSTAKE_TOKEN...\00")
(data (i32.const 19044) " unstake_token...[\00")
(data (i32.const 19063) " Unsteak-value: \00")
(data (i32.const 19080) " Unstake-amount is zero! \00")
(data (i32.const 19106) " account exist! Balance: \00")
(data (i32.const 19132) " unsufficient amount! \00")
(data (i32.const 19155) "Unstake\00")
(data (i32.const 19163) " CALC \00")
(data (i32.const 19170) " -*- \00")
(data (i32.const 19176) "round: \00")
(data (i32.const 19184) "pool: \00")
(data (i32.const 19191) "pooltoken: \00")
(data (i32.const 19203) "last_chunk: \00")
(data (i32.const 19216) "accountno: \00")
(data (i32.const 19228) " Update_globals_first-step \00")
(data (i32.const 19256) " Contract is locked now! \00")
(data (i32.const 19282) "my \00")
(data (i32.const 19286) "-balance is \00")
(data (i32.const 19299) " CNT:\00")
(data (i32.const 19305) " id2:\00")
(data (i32.const 19311) " Iterator-ID(by id2):\00")
(data (i32.const 19333) " [\00")
(data (i32.const 19336) "] (\00")
(data (i32.const 19340) " X\00")
(data (i32.const 19343) " factorY:\00")
(data (i32.const 19353) " dividend_eos:\00")
(data (i32.const 19368) " FINISHED \00")
(data (i32.const 19379) " Deferred calc-long \00")
(data (i32.const 19400) " WEITER_E... \00")
(data (i32.const 19414) " NOT FINISHED \00")
(data (i32.const 19429) " Deferred calc-short \00")
(data (i32.const 19451) " WEITER_B... \00")
(data (i32.const 19465) "true\00")
(data (i32.const 19470) "false\00")
(data (i32.const 19476) ": no conversion\00")
(data (i32.const 19504) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$4 (param i32)))
(import "env" "printn" (func $fimport$5 (param i64)))
(import "env" "printi" (func $fimport$6 (param i64)))
(import "env" "printui" (func $fimport$7 (param i64)))
(import "env" "prints_l" (func $fimport$8 (param i32 i32)))
(import "env" "require_auth" (func $fimport$9 (param i64)))
(import "env" "db_find_i64" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "printdf" (func $fimport$13 (param f64)))
(import "env" "current_time" (func $fimport$14 (result i64)))
(import "env" "send_deferred" (func $fimport$15 (param i32 i64 i32 i32 i32)))
(import "env" "require_recipient" (func $fimport$16 (param i64)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$18 (result i64)))
(import "env" "db_update_i64" (func $fimport$19 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$20 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$21 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$22 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$23 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$24 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$25 (param i32)))
(import "env" "send_inline" (func $fimport$26 (param i32 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$27 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$28))
(import "env" "memset" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$30 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$41 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$45 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$47 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$48 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$49 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $2))
(export "_ZdlPv" (func $77))
(export "_Znwj" (func $75))
(export "_Znaj" (func $76))
(export "_ZdaPv" (func $78))
(export "_ZnwjSt11align_val_t" (func $79))
(export "_ZnajSt11align_val_t" (func $80))
(export "_ZdlPvSt11align_val_t" (func $81))
(export "_ZdaPvSt11align_val_t" (func $82))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $4 $6 $7 $8 $9 $10 $11 $1)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19761))
(global $global$2 i32 (i32.const 19761))


int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $108([8216])
	$3 = *([0] + [8224])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8232]
	*([0] + [8224]) = [8232]
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $115([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8224])
	*([0] + [8224]) = $3
	*([0] + [8228]) = [0]
	
.LABEL $label$2
	*([0] + [8228]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $109([8216])
	return [0]
	
.LABEL $label$1
	CALL $109([8216])
	return [-1]
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

void .FUNC $94 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $95 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $96 ()
{
	return [8208]
}

void .FUNC $97 (int_32 $0)
{
}

void .FUNC $90 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $92($1, $0, [17314])
	CALL $93()
	(unreachable)
}

void .FUNC $91 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $92($1, $0, [19476])
	CALL $94()
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $107($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $85($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $93 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $113([8500], $1)
	CALL memset($0, [0], $1)
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [48]) = *(*($3))
	*($1 + [40]) = *(*($3 + [8]))
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [88]) = ($4 + [70])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $57(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [70])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [16]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [88]) = ($4 + [70])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $57(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [70])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$4 * (int_32)[12])))) = (int_64)0
	*(($3 + [8])) = [0]
	$1 = *($1)
	$2 = *($2)
	$8 = ($2 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$8 }
	*($3) = ($8 << [1])
	$5 = ($3 + [1])
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*(($4 = ($7 + ((int_32)$4 * (int_32)[12]))) + [8]) = $5
	*($4 + [4]) = $8
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($1)
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$5 = ($5 + $8)
	
.LABEL $label$6
	$8 = ($7 + $4)
	*($5) = [0]
	$5 = ($3 + [12])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($1 + [-4])
	*(($3 + [-4])) = *($2)
	$1 = ($1 + [-12])
	*(($3 = ($3 + [-12]))) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	$6 = *(($0 + [4]))
	$2 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($6 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$15
	$6 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $83($3)
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $70($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $54($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $71($2, $1)
	CALL $73(CALL $72(CALL $72($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $54(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [17706])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [40]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [88]) = ($4 + [70])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $57(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [70])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($4 + [72]) = *($1 + [8])
	*($1 + [48]) = *(*($3))
	*($1 + [24]) = *(*($3 + [4]))
	*($1 + [40]) = *(*($3 + [8]))
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	CALL $61(($4 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [88]) = *(($1 + [8]))
	if ( (CALL $106(($4 + [72]), ($4 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607819667127140352, ($4 + [80]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [88]))
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17303])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17303])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17303])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17303])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $46(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $53($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $86($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $86($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $83($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [48]) = [0]
	$5 = *($1)
	*($1 + [56]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [40]) = *(*($3))
	*($1 + [16]) = (int_64)0
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17647])
	*($4 + [88]) = ($4 + [70])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $57(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [70])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [192])
	$global$0 = $1
	CALL prints([18845])
	*(($1 + [184])) = [0]
	*($1 + [168]) = (int_64)-1
	*($1 + [176]) = (int_64)0
	$2 = *($0)
	*($1 + [152]) = $2
	*($1 + [160]) = $2
	$3 = CALL $22(($1 + [152]), CALL $fimport$10($2, $2, (int_64)7235159537265672192, (int_64)0))
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)($1 + [152])), [17441])
	CALL eosio_assert(((int_32)*($3 + [48]) ^ (int_32)[1]), [17731])
	CALL $19(($1 + [136]))
	CALL prints([18851])
	$3 = *($1 + [136])
	$4 = ($3 & [1])
	CALL prints_l(( *($1 + [144]) ? (($1 + [136]) | [1]) : $4 ), ( *($1 + [140]) ? uint_32($3 >> [1]) : $4 ))
	CALL prints([17992])
	*($1 + [128]) = [0]
	*($1 + [120]) = (int_64)0
	$3 = CALL $84(($1 + [104]), ($1 + [136]))
	CALL $14($0, ($1 + [120]), $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$1
	$3 = *($1 + [120])
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$3 }
	$4 = uint_32($4 >> [1])
	$3 = ($3 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = *($3 + [4])
	$3 = *($3 + [8])
	
.LABEL $label$2
	*($1 + [92]) = $4
	*($1 + [88]) = $3
	*($1 + [8]) = *($1 + [88])
	$3 = CALL $3(($1 + [96]), ($1 + [8]))
	CALL prints([18866])
	CALL printn(*($3))
	CALL prints([17992])
	CALL prints([18877])
	CALL require_auth(*($3))
	CALL prints([18886])
	*(($1 + [80])) = [0]
	*($1 + [64]) = (int_64)-1
	*($1 + [72]) = (int_64)0
	*($1 + [84]) = [0]
	$2 = *($0)
	*($1 + [48]) = $2
	*($1 + [56]) = $2
	$4 = CALL db_find_i64($2, $2, (int_64)3607819667127140352, *($3))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL $20(($1 + [48]), $4)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($1 + [48])), [17441])
	$2 = *($4 + [40])
	CALL prints([18894])
	CALL printui($2)
	$5 = *($0)
	CALL eosio_assert([1], [17515])
	CALL $33(($1 + [48]), $4, $5, ($1 + [32]))
	*(($1 + [40])) = [0]
	*($1 + [32]) = (int_64)0
	$4 = CALL $107([17048])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$12 }
	*($1 + [32]) = ($4 << [1])
	$6 = (($1 + [32]) | [1])
	if ( $4 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	CALL prints([18924])
	CALL eosio_assert([0], [18934])
	$4 = *($1 + [72])
	if ( $4 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$12
	$7 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($1 + [32]) = ($7 | [1])
	*($1 + [40]) = $6
	*($1 + [36]) = $4
	
.LABEL $label$11
	CALL memcpy($6, [17048], $4)
	
.LABEL $label$10
	*(($6 + $4)) = [0]
	$3 = CALL $84(($1 + [16]), ($1 + [32]))
	CALL $34($0, *($3), $2, $3)
	if ( (*($3) & [1]) ){ goto $label$15 }
	if ( (*($1 + [32]) & [1]) ){ goto $label$14 }
	goto $label$8 
	
.LABEL $label$15
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$14
	CALL _ZdlPv(*($1 + [40]))
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	CALL $83(($1 + [32]))
	
.LABEL $label$8
	$4 = *($1 + [72])
	if ( $4 ){ goto $label$6 }
	
.LABEL $label$7
	$4 = *($1 + [120])
	if ( ($4 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$6 = ($1 + [76])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	CALL _ZdlPv($3)
	
.LABEL $label$18
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($1 + [72]))
	*($6) = $4
	CALL _ZdlPv($0)
	$4 = *($1 + [120])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$16
	*($6) = $4
	CALL _ZdlPv($4)
	$4 = *($1 + [120])
	if ( ($4 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = *($1 + [124])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$20 }
	
.LOOP $label$21:
	$0 = ($3 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$22
	$3 = $0
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$21 }
	$0 = *($1 + [120])
	goto $label$19 
	
.LABEL $label$20
	$0 = $4
	
.LABEL $label$19
	*($1 + [124]) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$4
	if ( ((*($1 + [136]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($1 + [144])))
	
.LABEL $label$23
	$4 = *($1 + [176])
	if ( ($4 == 0) ){ goto $label$24 }
	$6 = ($1 + [180])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$26 }
	
.LOOP $label$27:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$28 }
	CALL _ZdlPv($3)
	
.LABEL $label$28
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$27 }
	$0 = *(($1 + [176]))
	goto $label$25 
	
.LABEL $label$26
	$0 = $4
	
.LABEL $label$25
	*($6) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$24
	$global$0 = ($1 + [192])
	(unreachable)
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [208])
	$global$0 = $1
	CALL prints([19027])
	*(($1 + [200])) = [0]
	*($1 + [184]) = (int_64)-1
	$2 = *($0)
	*($1 + [168]) = $2
	*($1 + [176]) = $2
	*($1 + [192]) = (int_64)0
	$3 = [0]
	$4 = CALL db_find_i64($2, $2, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $22(($1 + [168]), $4)
	CALL eosio_assert(((int_32)*($3 + [72]) == (int_32)($1 + [168])), [17441])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($3 + [48]) ^ (int_32)[1]), [17731])
	*($1 + [160]) = *($3 + [24])
	CALL $19(($1 + [144]))
	CALL prints([19044])
	$4 = *($1 + [144])
	$5 = ($4 & [1])
	CALL prints_l(( *($1 + [152]) ? (($1 + [144]) | [1]) : $5 ), ( *($1 + [148]) ? uint_32($4 >> [1]) : $5 ))
	CALL prints([17992])
	*($1 + [136]) = [0]
	*($1 + [128]) = (int_64)0
	$4 = CALL $84(($1 + [112]), ($1 + [144]))
	CALL $14($0, ($1 + [128]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$2
	$4 = *($1 + [128])
	$5 = *($4)
	if ( ($5 & [1]) ){ goto $label$4 }
	$5 = uint_32($5 >> [1])
	$4 = ($4 + [1])
	goto $label$3 
	
.LABEL $label$4
	$5 = *($4 + [4])
	$4 = *($4 + [8])
	
.LABEL $label$3
	*($1 + [100]) = $5
	*($1 + [96]) = $4
	*($1) = *($1 + [96])
	$4 = CALL $3(($1 + [104]), $1)
	CALL prints([18866])
	CALL printn(*($4))
	CALL prints([17992])
	CALL prints([18877])
	CALL require_auth(*($4))
	CALL prints([18886])
	*($1 + [88]) = (CASTING int_64)(int_32 CALL $89((*($1 + [128]) + [12]), [0], [10]))
	CALL prints([19063])
	CALL printui(*($1 + [88]))
	CALL prints([17729])
	CALL eosio_assert(((int_64)*($1 + [88]) != (int_64)0), [19080])
	*(($1 + [80])) = [0]
	*($1 + [64]) = (int_64)-1
	*($1 + [72]) = (int_64)0
	*($1 + [84]) = [0]
	$2 = *($0)
	*($1 + [48]) = $2
	*($1 + [56]) = $2
	$5 = CALL db_find_i64($2, $2, (int_64)3607819667127140352, *($4))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$14 }
	$5 = CALL $20(($1 + [48]), $5)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)($1 + [48])), [17441])
	*($1 + [40]) = *($5 + [32])
	CALL prints([19106])
	CALL printui(*($1 + [40]))
	CALL eosio_assert(((uint_64)*($1 + [88]) <= (uint_64)*($5 + [32])), [19132])
	$2 = *($0)
	*($1 + [28]) = ($1 + [88])
	*($1 + [24]) = ($1 + [40])
	CALL eosio_assert([1], [17515])
	CALL $35(($1 + [48]), $5, $2, ($1 + [24]))
	*($1 + [160]) = (int_64))(*($1 + [160]) - *($1 + [88]))
	$2 = *($0)
	*($1 + [24]) = ($1 + [160])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [17515])
	CALL $36(($1 + [168]), $3, $2, ($1 + [24]))
	*(($1 + [32])) = [0]
	*($1 + [24]) = (int_64)0
	$3 = CALL $107([19155])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$13 }
	*($1 + [24]) = ($3 << [1])
	$5 = (($1 + [24]) | [1])
	if ( $3 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	CALL prints([18924])
	CALL eosio_assert([0], [18934])
	$4 = *($1 + [72])
	if ( $4 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$13
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($1 + [24]) = ($6 | [1])
	*($1 + [32]) = $5
	*($1 + [28]) = $3
	
.LABEL $label$12
	CALL memcpy($5, [19155], $3)
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	$3 = CALL $84(($1 + [8]), ($1 + [24]))
	CALL $37($0, *($4), *($1 + [88]), $3)
	if ( (*($3) & [1]) ){ goto $label$16 }
	if ( (*($1 + [24]) & [1]) ){ goto $label$15 }
	goto $label$9 
	
.LABEL $label$16
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$15
	CALL _ZdlPv(*($1 + [32]))
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	CALL $83(($1 + [24]))
	
.LABEL $label$9
	$4 = *($1 + [72])
	if ( $4 ){ goto $label$7 }
	
.LABEL $label$8
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = ($1 + [76])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$17 }
	
.LOOP $label$18:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$19 }
	CALL _ZdlPv($3)
	
.LABEL $label$19
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$18 }
	$0 = *(($1 + [72]))
	*($5) = $4
	CALL _ZdlPv($0)
	$4 = *($1 + [128])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$17
	*($5) = $4
	CALL _ZdlPv($4)
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = *($1 + [132])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$21 }
	
.LOOP $label$22:
	$0 = ($3 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$23
	$3 = $0
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$22 }
	$0 = *($1 + [128])
	goto $label$20 
	
.LABEL $label$21
	$0 = $4
	
.LABEL $label$20
	*($1 + [132]) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((*($1 + [144]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($1 + [152])))
	
.LABEL $label$24
	$4 = *($1 + [192])
	if ( ($4 == 0) ){ goto $label$25 }
	$5 = ($1 + [196])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$27 }
	
.LOOP $label$28:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$29 }
	CALL _ZdlPv($3)
	
.LABEL $label$29
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$28 }
	$0 = *(($1 + [192]))
	goto $label$26 
	
.LABEL $label$27
	$0 = $4
	
.LABEL $label$26
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$25
	$global$0 = ($1 + [208])
	(unreachable)
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL prints([17865])
	CALL prints([17875])
	$2 = *([0] + [8192])
	$3 = ($2 & [1])
	CALL prints_l(( *([0] + [8200]) ? [8193] : $3 ), ( *([0] + [8196]) ? uint_32($2 >> [1]) : $3 ))
	CALL prints([17729])
	$2 = CALL $107([17271])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17329])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($2 + [17270]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17374])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	*($1 + [40]) = [16910]
	*($1 + [44]) = CALL $107([16910])
	*($1 + [16]) = *($1 + [40])
	$5 = *(CALL $3(($1 + [56]), ($1 + [16])))
	$6 = *($0)
	*(($1 + [88])) = [0]
	*($1 + [64]) = $6
	*($1 + [56]) = $5
	*($1 + [72]) = (int_64)-1
	*($1 + [80]) = (int_64)0
	$2 = CALL $17(($1 + [56]), $4, [17930])
	*((($1 + [40]) + [8])) = *(($2 + [8]))
	*($1 + [40]) = *($2)
	$7 = *($1 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	$8 = ($1 + [84])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($1 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$7
	CALL prints([17886])
	CALL $18(($1 + [40]))
	$2 = CALL $107([17905])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [17329])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$4 = (int_64)0
	
.LOOP $label$16:
	$3 = *(($2 + [17904]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [17374])
	
.LABEL $label$17
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	goto $label$12 
	
.LABEL $label$13
	$4 = (int_64)0
	
.LABEL $label$12
	*($1 + [24]) = [17013]
	*($1 + [28]) = CALL $107([17013])
	*($1 + [8]) = *($1 + [24])
	$5 = *(CALL $3(($1 + [56]), ($1 + [8])))
	$6 = *($0)
	*(($1 + [88])) = [0]
	*($1 + [64]) = $6
	*($1 + [56]) = $5
	*($1 + [72]) = (int_64)-1
	*($1 + [80]) = (int_64)0
	$2 = CALL $17(($1 + [56]), $4, [17930])
	*((($1 + [24]) + [8])) = *(($2 + [8]))
	*($1 + [24]) = *($2)
	$7 = *($1 + [80])
	if ( ($7 == 0) ){ goto $label$18 }
	$0 = ($1 + [84])
	$2 = *($0)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	CALL _ZdlPv($3)
	
.LABEL $label$22
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($1 + [80]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $7
	
.LABEL $label$19
	*($0) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$18
	CALL prints([17910])
	CALL $18(($1 + [24]))
	$global$0 = ($1 + [96])
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$1 = ($global$0 - [464])
	$global$0 = $1
	CALL prints([17951])
	CALL require_auth(*($0))
	CALL prints([17961])
	CALL $19(($1 + [448]))
	CALL prints([17971])
	CALL prints([17981])
	$2 = *($1 + [448])
	$3 = ($2 & [1])
	CALL prints_l(( *($1 + [456]) ? (($1 + [448]) | [1]) : $3 ), ( *($1 + [452]) ? uint_32($2 >> [1]) : $3 ))
	CALL prints([17992])
	*($1 + [440]) = [0]
	*($1 + [432]) = (int_64)0
	$2 = CALL $84(($1 + [416]), ($1 + [448]))
	CALL $14($0, ($1 + [432]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$2 = *($1 + [432])
	CALL prints([17996])
	$3 = *($2)
	$4 = ($3 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 + [1]) : $4 ), ( *($2 + [4]) ? uint_32($3 >> [1]) : $4 ))
	CALL prints([17992])
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18008])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$2 }
	if ( CALL $87($2, [0], [-1], [18008], $4) ){ goto $label$2 }
	CALL prints([18013])
	*($1 + [412]) = [7]
	$2 = *($1 + [432])
	if ( (*($2 + [12]) & [1]) ){ goto $label$4 }
	$2 = (($2 + [12]) + [1])
	goto $label$3 
	
.LABEL $label$4
	$2 = *(($2 + [20]))
	
.LABEL $label$3
	$2 = CALL $99($2)
	CALL prints([18029])
	CALL printi((CASTING int_64)(int_32 $2))
	CALL prints([18038])
	$3 = *($1 + [432])
	if ( (*($3 + [24]) & [1]) ){ goto $label$6 }
	$3 = (($3 + [24]) + [1])
	goto $label$5 
	
.LABEL $label$6
	$3 = *(($3 + [32]))
	
.LABEL $label$5
	$5 = CALL $99($3)
	CALL prints([18041])
	CALL printi((CASTING int_64)(int_32 $5))
	CALL prints([18038])
	*($1 + [216]) = [0]
	*($1 + [208]) = (int_64)0
	$3 = CALL $107([18049])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$35 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$38 }
	*($1 + [208]) = ($3 << [1])
	$4 = (($1 + [208]) | [1])
	if ( $3 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*($1 + [208]) = ($6 | [1])
	*($1 + [216]) = $4
	*($1 + [212]) = $3
	
.LABEL $label$37
	CALL memcpy($4, [18049], $3)
	
.LABEL $label$36
	*(($4 + $3)) = [0]
	*(($1 + [228])) = [0]
	*($1 + [220 align=4]) = (int_64)0
	$4 = (($1 + [208]) | [12])
	$3 = CALL $107([18051])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$39 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$42 }
	*($1 + [220]) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [228])) = $4
	*((($1 + [208]) + [16])) = $3
	*($1 + [220]) = ($6 | [1])
	
.LABEL $label$41
	CALL memcpy($4, [18051], $3)
	
.LABEL $label$40
	*(($4 + $3)) = [0]
	*(($1 + [240])) = [0]
	*($1 + [232]) = (int_64)0
	$4 = ($1 + [232])
	$3 = CALL $107([18053])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$43 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$46 }
	*(($1 + [232])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [240])) = $4
	*(($1 + [236])) = $3
	*($1 + [232]) = ($6 | [1])
	
.LABEL $label$45
	CALL memcpy($4, [18053], $3)
	
.LABEL $label$44
	*(($4 + $3)) = [0]
	*(($1 + [252])) = [0]
	*($1 + [244 align=4]) = (int_64)0
	$4 = ($1 + [244])
	$3 = CALL $107([18055])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$47 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$50 }
	*(($1 + [244])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [252])) = $4
	*(($1 + [248])) = $3
	*($1 + [244]) = ($6 | [1])
	
.LABEL $label$49
	CALL memcpy($4, [18055], $3)
	
.LABEL $label$48
	*(($4 + $3)) = [0]
	*(($1 + [264])) = [0]
	*($1 + [256]) = (int_64)0
	$4 = ($1 + [256])
	$3 = CALL $107([18057])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$51 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$54 }
	*(($1 + [256])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [264])) = $4
	*(($1 + [260])) = $3
	*($1 + [256]) = ($6 | [1])
	
.LABEL $label$53
	CALL memcpy($4, [18057], $3)
	
.LABEL $label$52
	*(($4 + $3)) = [0]
	*(($1 + [276])) = [0]
	*($1 + [268 align=4]) = (int_64)0
	$4 = ($1 + [268])
	$3 = CALL $107([18059])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$55 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$58 }
	*(($1 + [268])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [276])) = $4
	*(($1 + [272])) = $3
	*($1 + [268]) = ($6 | [1])
	
.LABEL $label$57
	CALL memcpy($4, [18059], $3)
	
.LABEL $label$56
	*(($4 + $3)) = [0]
	*(($1 + [288])) = [0]
	*($1 + [280]) = (int_64)0
	$4 = ($1 + [280])
	$3 = CALL $107([18061])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$59 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$62 }
	*(($1 + [280])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [288])) = $4
	*(($1 + [284])) = $3
	*($1 + [280]) = ($6 | [1])
	
.LABEL $label$61
	CALL memcpy($4, [18061], $3)
	
.LABEL $label$60
	*(($4 + $3)) = [0]
	*(($1 + [300])) = [0]
	*($1 + [292 align=4]) = (int_64)0
	$4 = ($1 + [292])
	$3 = CALL $107([18063])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$63 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$66 }
	*(($1 + [292])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [300])) = $4
	*(($1 + [296])) = $3
	*($1 + [292]) = ($6 | [1])
	
.LABEL $label$65
	CALL memcpy($4, [18063], $3)
	
.LABEL $label$64
	*(($4 + $3)) = [0]
	*(($1 + [312])) = [0]
	*($1 + [304]) = (int_64)0
	$4 = ($1 + [304])
	$3 = CALL $107([18065])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$67 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$70 }
	*(($1 + [304])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [312])) = $4
	*(($1 + [308])) = $3
	*($1 + [304]) = ($6 | [1])
	
.LABEL $label$69
	CALL memcpy($4, [18065], $3)
	
.LABEL $label$68
	*(($4 + $3)) = [0]
	*(($1 + [324])) = [0]
	*($1 + [316 align=4]) = (int_64)0
	$4 = ($1 + [316])
	$3 = CALL $107([18067])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$71 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$74 }
	*(($1 + [316])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [324])) = $4
	*(($1 + [320])) = $3
	*($1 + [316]) = ($6 | [1])
	
.LABEL $label$73
	CALL memcpy($4, [18067], $3)
	
.LABEL $label$72
	*(($4 + $3)) = [0]
	*(($1 + [336])) = [0]
	*($1 + [328]) = (int_64)0
	$4 = ($1 + [328])
	$3 = CALL $107([18069])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$75 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$78 }
	*(($1 + [328])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [336])) = $4
	*(($1 + [332])) = $3
	*($1 + [328]) = ($6 | [1])
	
.LABEL $label$77
	CALL memcpy($4, [18069], $3)
	
.LABEL $label$76
	*(($4 + $3)) = [0]
	*(($1 + [348])) = [0]
	*($1 + [340 align=4]) = (int_64)0
	$4 = ($1 + [340])
	$3 = CALL $107([18071])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$79 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$82 }
	*(($1 + [340])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [348])) = $4
	*(($1 + [344])) = $3
	*($1 + [340]) = ($6 | [1])
	
.LABEL $label$81
	CALL memcpy($4, [18071], $3)
	
.LABEL $label$80
	*(($4 + $3)) = [0]
	*(($1 + [360])) = [0]
	*($1 + [352]) = (int_64)0
	$4 = ($1 + [352])
	$3 = CALL $107([18073])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$83 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$86 }
	*(($1 + [352])) = ($3 << [1])
	$4 = ($4 + [1])
	if ( $3 ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$86
	$6 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($6)
	*(($1 + [360])) = $4
	*(($1 + [356])) = $3
	*($1 + [352]) = ($6 | [1])
	
.LABEL $label$85
	CALL memcpy($4, [18073], $3)
	
.LABEL $label$84
	*(($4 + $3)) = [0]
	*(($1 + [372])) = (int_64)0
	*(($1 + [380])) = (int_64)0
	*(($1 + [396])) = [0]
	*($1 + [364 align=4]) = (int_64)0
	*($1 + [388 align=4]) = (int_64)0
	*($1 + [412]) = $2
	if ( ((int_32)$2 > (int_32)$5) ){ goto $label$87 }
	$7 = (($1 + [136]) | [1])
	$8 = ($1 + [184])
	$9 = ($1 + [192])
	$10 = ($1 + [200])
	$11 = ($1 + [204])
	$12 = ($1 + [196])
	
.LOOP $label$88:
	$14 = *($0)
	*(($13 = (($1 + [168]) + [8]))) = $14
	*($8) = (int_64)-1
	*($9) = (int_64)0
	*($10) = [0]
	*($11) = [0]
	*($1 + [168]) = $14
	CALL $88(($1 + [136]), [18075], CALL $84(($1 + [152]), (($1 + [208]) + ((int_32)$2 * (int_32)[12]))))
	CALL prints([18086])
	$2 = *($1 + [136])
	$3 = ($2 & [1])
	$15 = (($1 + [136]) + [8])
	CALL prints_l(( *($15) ? $7 : $3 ), ( *($1 + [140]) ? uint_32($2 >> [1]) : $3 ))
	CALL prints([18093])
	$2 = *($1 + [136])
	$3 = ($2 & [1])
	*($1 + [120]) = ( *($15) ? $7 : $3 )
	*($1 + [124]) = ( *($1 + [140]) ? uint_32($2 >> [1]) : $3 )
	*($1 + [56]) = *($1 + [120])
	CALL $3(($1 + [128]), ($1 + [56]))
	$14 = *($1 + [128])
	$3 = *($12)
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$90 }
	
.LOOP $label$92:
	$2 = ($3 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$14) ){ goto $label$91 }
	$3 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$92 }
	goto $label$90 
	
.LABEL $label$91
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$90 }
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($1 + [168])), [17441])
	goto $label$89 
	
.LABEL $label$90
	$4 = [0]
	$2 = CALL db_find_i64(*($1 + [168]), *($13), (int_64)3607819667127140352, $14)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$89 }
	$4 = CALL $20(($1 + [168]), $2)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($1 + [168])), [17441])
	
.LABEL $label$89
	$2 = *($1 + [136])
	$3 = ($2 & [1])
	*($1 + [112]) = ( *($15) ? $7 : $3 )
	*($1 + [116]) = ( *($1 + [140]) ? uint_32($2 >> [1]) : $3 )
	*($1 + [48]) = *($1 + [112])
	CALL $3(($1 + [128]), ($1 + [48]))
	CALL prints([18096])
	CALL printui(*($1 + [128]))
	CALL prints([18102])
	$2 = *($1 + [136])
	$3 = ($2 & [1])
	*($1 + [104]) = ( *($15) ? $7 : $3 )
	*($1 + [108]) = ( *($1 + [140]) ? uint_32($2 >> [1]) : $3 )
	*($1 + [40]) = *($1 + [104])
	CALL $3(($1 + [128]), ($1 + [40]))
	$14 = *($1 + [128])
	CALL prints([18104])
	CALL printn($14)
	if ( ($4 == 0) ){ goto $label$95 }
	CALL prints([18112])
	CALL printi(*($1 + [412]))
	CALL prints([18122])
	if ( ((*($1 + [136]) & [1]) == 0) ){ goto $label$93 }
	goto $label$94 
	
.LABEL $label$95
	CALL prints([18139])
	$14 = *($0)
	*($1 + [132]) = ($1 + [412])
	*($1 + [128]) = ($1 + [136])
	CALL $21(($1 + [96]), ($1 + [168]), $14, ($1 + [128]))
	if ( ((*($1 + [136]) & [1]) == 0) ){ goto $label$93 }
	
.LABEL $label$94
	CALL _ZdlPv(*($15))
	
.LABEL $label$93
	if ( (*($1 + [152]) & [1]) ){ goto $label$98 }
	$4 = *($9)
	if ( ($4 == 0) ){ goto $label$96 }
	goto $label$97 
	
.LABEL $label$98
	CALL _ZdlPv(*((($1 + [152]) + [8])))
	$4 = *($9)
	if ( ($4 == 0) ){ goto $label$96 }
	
.LABEL $label$97
	$2 = *($12)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$100 }
	
.LOOP $label$101:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$102 }
	CALL _ZdlPv($3)
	
.LABEL $label$102
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$101 }
	$2 = *($9)
	goto $label$99 
	
.LABEL $label$100
	$2 = $4
	
.LABEL $label$99
	*($12) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$96
	$3 = *($1 + [412])
	$2 = ($3 + [1])
	*($1 + [412]) = $2
	if ( ((int_32)$3 < (int_32)$5) ){ goto $label$88 }
	
.LABEL $label$87
	CALL prints([18142])
	if ( (*($1 + [388]) & [1]) ){ goto $label$104 }
	if ( (*($1 + [376]) & [1]) ){ goto $label$103 }
	goto $label$34 
	
.LABEL $label$104
	CALL _ZdlPv(*(($1 + [396])))
	if ( ((*($1 + [376]) & [1]) == 0) ){ goto $label$34 }
	
.LABEL $label$103
	CALL _ZdlPv(*(($1 + [384])))
	$2 = [1]
	if ( ((*($1 + [364]) & [1]) == 0) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$83
	CALL $83($4)
	
.LABEL $label$79
	CALL $83($4)
	
.LABEL $label$75
	CALL $83($4)
	
.LABEL $label$71
	CALL $83($4)
	
.LABEL $label$67
	CALL $83($4)
	
.LABEL $label$63
	CALL $83($4)
	
.LABEL $label$59
	CALL $83($4)
	
.LABEL $label$55
	CALL $83($4)
	
.LABEL $label$51
	CALL $83($4)
	
.LABEL $label$47
	CALL $83($4)
	
.LABEL $label$43
	CALL $83($4)
	
.LABEL $label$39
	CALL $83($4)
	
.LABEL $label$35
	CALL $83(($1 + [208]))
	
.LABEL $label$34
	$2 = [1]
	if ( (*($1 + [364]) & [1]) ){ goto $label$32 }
	
.LABEL $label$33
	if ( (*($1 + [352]) & $2) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL _ZdlPv(*(($1 + [372])))
	if ( ((*($1 + [352]) & $2) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv(*(($1 + [360])))
	$2 = [1]
	if ( ((*($1 + [340]) & [1]) == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$2 = [1]
	if ( (*($1 + [340]) & [1]) ){ goto $label$28 }
	
.LABEL $label$29
	if ( (*($1 + [328]) & $2) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL _ZdlPv(*(($1 + [348])))
	if ( ((*($1 + [328]) & $2) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*(($1 + [336])))
	$2 = [1]
	if ( ((*($1 + [316]) & [1]) == 0) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$2 = [1]
	if ( (*($1 + [316]) & [1]) ){ goto $label$24 }
	
.LABEL $label$25
	if ( (*($1 + [304]) & $2) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL _ZdlPv(*(($1 + [324])))
	if ( ((*($1 + [304]) & $2) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($1 + [312])))
	$2 = [1]
	if ( ((*($1 + [292]) & [1]) == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$2 = [1]
	if ( (*($1 + [292]) & [1]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( (*($1 + [280]) & $2) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*(($1 + [300])))
	if ( ((*($1 + [280]) & $2) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*(($1 + [288])))
	$2 = [1]
	if ( ((*($1 + [268]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$2 = [1]
	if ( (*($1 + [268]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($1 + [256]) & $2) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($1 + [276])))
	if ( ((*($1 + [256]) & $2) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [264])))
	$2 = [1]
	if ( ((*($1 + [244]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$2 = [1]
	if ( (*($1 + [244]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($1 + [232]) & $2) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [252])))
	if ( ((*($1 + [232]) & $2) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [240])))
	$2 = [1]
	if ( ((*($1 + [220]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = [1]
	if ( (*($1 + [220]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((*($1 + [208]) & $2) == 0) ){ goto $label$2 }
	goto $label$7 
	
.LABEL $label$8
	CALL _ZdlPv(*(($1 + [228])))
	if ( ((*($1 + [208]) & $2) == 0) ){ goto $label$2 }
	
.LABEL $label$7
	CALL _ZdlPv(*($1 + [216]))
	
.LABEL $label$2
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18153])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$105 }
	if ( CALL $87($2, [0], [-1], [18153], $4) ){ goto $label$105 }
	CALL prints([18159])
	CALL prints([18176])
	
.LABEL $label$105
	$2 = *($1 + [448])
	$3 = CALL $107([18188])
	if ( ((int_32)$3 != (int_32)( *($1 + [452]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$106 }
	if ( CALL $87(($1 + [448]), [0], [-1], [18188], $3) ){ goto $label$106 }
	CALL prints([18194])
	*(($1 + [240])) = [0]
	*($1 + [224]) = (int_64)-1
	$14 = *($0)
	*($1 + [208]) = $14
	*($1 + [216]) = $14
	*($1 + [232]) = (int_64)0
	$2 = CALL db_lowerbound_i64($14, $14, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$107 }
	$3 = CALL $22(($1 + [208]), $2)
	
.LOOP $label$108:
	CALL eosio_assert([1], [18633])
	CALL eosio_assert([1], [18667])
	$2 = [0]
	$4 = CALL db_next_i64(*($3 + [76]), ($1 + [168]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$109 }
	$2 = CALL $22(($1 + [208]), $4)
	
.LABEL $label$109
	CALL $23(($1 + [208]), $3)
	$3 = $2
	if ( $2 ){ goto $label$108 }
	
.LABEL $label$107
	CALL prints([18201])
	$4 = *($1 + [232])
	if ( ($4 == 0) ){ goto $label$106 }
	$6 = ($1 + [236])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$111 }
	
.LOOP $label$112:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$113 }
	CALL _ZdlPv($3)
	
.LABEL $label$113
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$112 }
	$2 = *(($1 + [232]))
	goto $label$110 
	
.LABEL $label$111
	$2 = $4
	
.LABEL $label$110
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$106
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18213])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$114 }
	if ( CALL $87($2, [0], [-1], [18213], $4) ){ goto $label$114 }
	CALL prints([18218])
	*($1 + [152]) = [0]
	*(($1 + [240])) = [0]
	*($1 + [224]) = (int_64)-1
	$14 = *($0)
	*($1 + [208]) = $14
	*($1 + [216]) = $14
	*($1 + [232]) = (int_64)0
	$2 = CALL db_find_i64($14, $14, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$116 }
	CALL eosio_assert(((int_32)*(CALL $22(($1 + [208]), $2) + [72]) == (int_32)($1 + [208])), [17441])
	CALL prints([18228])
	$4 = *($1 + [232])
	if ( $4 ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$116
	CALL prints([18253])
	$14 = *($0)
	*($1 + [136]) = ($1 + [152])
	CALL $24(($1 + [168]), ($1 + [208]), $14, ($1 + [136]))
	$4 = *($1 + [232])
	if ( ($4 == 0) ){ goto $label$114 }
	
.LABEL $label$115
	$6 = ($1 + [236])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$118 }
	
.LOOP $label$119:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$120 }
	CALL _ZdlPv($3)
	
.LABEL $label$120
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$119 }
	$2 = *(($1 + [232]))
	goto $label$117 
	
.LABEL $label$118
	$2 = $4
	
.LABEL $label$117
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$114
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18282])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$121 }
	if ( CALL $87($2, [0], [-1], [18282], $4) ){ goto $label$121 }
	CALL prints([18287])
	
.LABEL $label$121
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18292])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$122 }
	if ( CALL $87($2, [0], [-1], [18292], $4) ){ goto $label$122 }
	CALL prints([18306])
	$2 = *($1 + [432])
	if ( (*($2 + [12]) & [1]) ){ goto $label$124 }
	$2 = (($2 + [12]) + [1])
	goto $label$123 
	
.LABEL $label$124
	$2 = *(($2 + [20]))
	
.LABEL $label$123
	$15 = CALL $99($2)
	CALL prints([18327])
	CALL printi((CASTING int_64)(int_32 $15))
	CALL prints([18038])
	*(($1 + [240])) = [0]
	*($1 + [224]) = (int_64)-1
	*($1 + [244]) = [0]
	$14 = *($0)
	*($1 + [208]) = $14
	*($1 + [216]) = $14
	*($1 + [232]) = (int_64)0
	$2 = CALL db_lowerbound_i64($14, $14, (int_64)3607819667127140352, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$125 }
	$2 = CALL $20(($1 + [208]), $2)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$125 }
	$4 = [1]
	
.LOOP $label$126:
	$3 = [0]
	$6 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($6, [18633])
	CALL eosio_assert($6, [18667])
	$6 = CALL db_next_i64(*($2 + [60]), ($1 + [168]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$127 }
	$3 = CALL $20(($1 + [208]), $6)
	
.LABEL $label$127
	CALL $25(($1 + [208]), $2)
	if ( ($3 == 0) ){ goto $label$125 }
	$6 = ((int_32)$4 < (int_32)$15)
	$4 = ($4 + [1])
	$2 = $3
	if ( $6 ){ goto $label$126 }
	
.LABEL $label$125
	CALL prints([18334])
	$4 = *($1 + [232])
	if ( ($4 == 0) ){ goto $label$122 }
	$6 = ($1 + [236])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$129 }
	
.LOOP $label$130:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$131 }
	CALL _ZdlPv($3)
	
.LABEL $label$131
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$130 }
	$2 = *(($1 + [232]))
	goto $label$128 
	
.LABEL $label$129
	$2 = $4
	
.LABEL $label$128
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$122
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18354])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$132 }
	if ( CALL $87($2, [0], [-1], [18354], $4) ){ goto $label$132 }
	CALL prints([18366])
	*(($1 + [240])) = [0]
	*($1 + [224]) = (int_64)-1
	*($1 + [232]) = (int_64)0
	*($1 + [244]) = [0]
	$14 = *($0)
	*($1 + [208]) = $14
	*($1 + [216]) = $14
	$2 = *($1 + [432])
	$3 = *($2 + [12])
	if ( ($3 & [1]) ){ goto $label$134 }
	$3 = uint_32($3 >> [1])
	$2 = (($2 + [12]) + [1])
	goto $label$133 
	
.LABEL $label$134
	$3 = *(($2 + [16]))
	$2 = *(($2 + [20]))
	
.LABEL $label$133
	*($1 + [92]) = $3
	*($1 + [88]) = $2
	*($1 + [32]) = *($1 + [88])
	$14 = *(CALL $3(($1 + [168]), ($1 + [32])))
	$3 = *(($1 + [236]))
	$6 = *(($1 + [232]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$136 }
	
.LOOP $label$138:
	$2 = ($3 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$14) ){ goto $label$137 }
	$3 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$138 }
	goto $label$136 
	
.LABEL $label$137
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$136 }
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($1 + [208])), [17441])
	goto $label$135 
	
.LABEL $label$136
	$4 = [0]
	$2 = CALL db_find_i64(*($1 + [208]), *(($1 + [216])), (int_64)3607819667127140352, $14)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$135 }
	$4 = CALL $20(($1 + [208]), $2)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($1 + [208])), [17441])
	
.LABEL $label$135
	$2 = *($1 + [432])
	if ( (*($2 + [24]) & [1]) ){ goto $label$140 }
	$2 = (($2 + [24]) + [1])
	goto $label$139 
	
.LABEL $label$140
	$2 = *(($2 + [32]))
	
.LABEL $label$139
	*($1 + [152]) = CALL $99($2)
	$2 = *($1 + [432])
	$3 = *($2 + [12])
	if ( ($3 & [1]) ){ goto $label$142 }
	$3 = uint_32($3 >> [1])
	$2 = (($2 + [12]) + [1])
	goto $label$141 
	
.LABEL $label$142
	$3 = *(($2 + [16]))
	$2 = *(($2 + [20]))
	
.LABEL $label$141
	*($1 + [84]) = $3
	*($1 + [80]) = $2
	*($1 + [24]) = *($1 + [80])
	$2 = CALL $3(($1 + [168]), ($1 + [24]))
	CALL prints([18096])
	CALL printui(*($2))
	CALL prints([18384])
	CALL printi(*($1 + [152]))
	CALL prints([17729])
	if ( ($4 == 0) ){ goto $label$143 }
	$14 = *($0)
	*($1 + [168]) = ($1 + [152])
	CALL eosio_assert([1], [17515])
	CALL $26(($1 + [208]), $4, $14, ($1 + [168]))
	
.LABEL $label$143
	CALL prints([18392])
	$4 = *($1 + [232])
	if ( ($4 == 0) ){ goto $label$132 }
	$6 = ($1 + [236])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$145 }
	
.LOOP $label$146:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$147 }
	CALL _ZdlPv($3)
	
.LABEL $label$147
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$146 }
	$2 = *(($1 + [232]))
	goto $label$144 
	
.LABEL $label$145
	$2 = $4
	
.LABEL $label$144
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$132
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18410])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$148 }
	if ( CALL $87($2, [0], [-1], [18410], $4) ){ goto $label$148 }
	CALL prints([18426])
	*(($1 + [240])) = [0]
	*($1 + [224]) = (int_64)-1
	*($1 + [232]) = (int_64)0
	*($1 + [244]) = [0]
	$14 = *($0)
	*($1 + [208]) = $14
	*($1 + [216]) = $14
	$2 = *($1 + [432])
	$3 = *($2 + [12])
	if ( ($3 & [1]) ){ goto $label$150 }
	$3 = uint_32($3 >> [1])
	$2 = (($2 + [12]) + [1])
	goto $label$149 
	
.LABEL $label$150
	$3 = *(($2 + [16]))
	$2 = *(($2 + [20]))
	
.LABEL $label$149
	*($1 + [76]) = $3
	*($1 + [72]) = $2
	*($1 + [16]) = *($1 + [72])
	$14 = *(CALL $3(($1 + [168]), ($1 + [16])))
	$3 = *(($1 + [236]))
	$6 = *(($1 + [232]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$152 }
	
.LOOP $label$154:
	$2 = ($3 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$14) ){ goto $label$153 }
	$3 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$154 }
	goto $label$152 
	
.LABEL $label$153
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$152 }
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($1 + [208])), [17441])
	goto $label$151 
	
.LABEL $label$152
	$4 = [0]
	$2 = CALL db_find_i64(*($1 + [208]), *(($1 + [216])), (int_64)3607819667127140352, $14)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$151 }
	$4 = CALL $20(($1 + [208]), $2)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)($1 + [208])), [17441])
	
.LABEL $label$151
	$2 = *($1 + [432])
	if ( (*($2 + [24]) & [1]) ){ goto $label$156 }
	$2 = (($2 + [24]) + [1])
	goto $label$155 
	
.LABEL $label$156
	$2 = *(($2 + [32]))
	
.LABEL $label$155
	*($1 + [168]) = (CASTING int_64)(int_32 CALL $99($2))
	$2 = *($1 + [432])
	$3 = *($2 + [12])
	if ( ($3 & [1]) ){ goto $label$158 }
	$3 = uint_32($3 >> [1])
	$2 = (($2 + [12]) + [1])
	goto $label$157 
	
.LABEL $label$158
	$3 = *(($2 + [16]))
	$2 = *(($2 + [20]))
	
.LABEL $label$157
	*($1 + [68]) = $3
	*($1 + [64]) = $2
	*($1 + [8]) = *($1 + [64])
	$2 = CALL $3(($1 + [152]), ($1 + [8]))
	CALL prints([18096])
	CALL printui(*($2))
	CALL prints([18449])
	CALL printui(*($1 + [168]))
	CALL prints([17729])
	if ( ($4 == 0) ){ goto $label$159 }
	$14 = *($0)
	*($1 + [152]) = ($1 + [168])
	CALL eosio_assert([1], [17515])
	CALL $27(($1 + [208]), $4, $14, ($1 + [152]))
	
.LABEL $label$159
	CALL prints([18392])
	$4 = *($1 + [232])
	if ( ($4 == 0) ){ goto $label$148 }
	$6 = ($1 + [236])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$161 }
	
.LOOP $label$162:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$163 }
	CALL _ZdlPv($3)
	
.LABEL $label$163
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$162 }
	$2 = *(($1 + [232]))
	goto $label$160 
	
.LABEL $label$161
	$2 = $4
	
.LABEL $label$160
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$148
	$2 = *($1 + [448])
	$3 = CALL $107([18457])
	if ( ((int_32)$3 != (int_32)( *($1 + [452]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$164 }
	CALL $87(($1 + [448]), [0], [-1], [18457], $3)
	
.LABEL $label$164
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18462])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$165 }
	if ( CALL $87($2, [0], [-1], [18462], $4) ){ goto $label$165 }
	CALL prints([18469])
	$2 = *($1 + [432])
	if ( (*($2 + [12]) & [1]) ){ goto $label$167 }
	$2 = (($2 + [12]) + [1])
	goto $label$166 
	
.LABEL $label$167
	$2 = *(($2 + [20]))
	
.LABEL $label$166
	*($1 + [152]) = CALL $99($2)
	$2 = *($1 + [432])
	if ( (*($2 + [24]) & [1]) ){ goto $label$169 }
	$2 = (($2 + [24]) + [1])
	goto $label$168 
	
.LABEL $label$169
	$2 = *(($2 + [32]))
	
.LABEL $label$168
	*($1 + [136]) = CALL $99($2)
	CALL prints([18484])
	CALL printui(*($1 + [152]))
	CALL prints([17729])
	CALL prints([18495])
	CALL printui(*($1 + [136]))
	CALL prints([17729])
	*(($1 + [240])) = [0]
	*($1 + [224]) = (int_64)-1
	$14 = *($0)
	*($1 + [208]) = $14
	*($1 + [216]) = $14
	*($1 + [232]) = (int_64)0
	$2 = [0]
	$3 = CALL db_find_i64($14, $14, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$170 }
	$2 = CALL $22(($1 + [208]), $3)
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)($1 + [208])), [17441])
	
.LABEL $label$170
	$14 = *($0)
	*($1 + [172]) = ($1 + [136])
	*($1 + [168]) = ($1 + [152])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17515])
	CALL $28(($1 + [208]), $2, $14, ($1 + [168]))
	$4 = *($1 + [232])
	if ( ($4 == 0) ){ goto $label$165 }
	$6 = ($1 + [236])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$172 }
	
.LOOP $label$173:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$174 }
	CALL _ZdlPv($3)
	
.LABEL $label$174
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$173 }
	$2 = *(($1 + [232]))
	goto $label$171 
	
.LABEL $label$172
	$2 = $4
	
.LABEL $label$171
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$165
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18505])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$175 }
	if ( CALL $87($2, [0], [-1], [18505], $4) ){ goto $label$175 }
	CALL prints([18469])
	$2 = *($1 + [432])
	if ( (*($2 + [12]) & [1]) ){ goto $label$177 }
	$2 = (($2 + [12]) + [1])
	goto $label$176 
	
.LABEL $label$177
	$2 = *(($2 + [20]))
	
.LABEL $label$176
	*($1 + [168]) = (CASTING int_64)(int_32 CALL $99($2))
	CALL prints([18515])
	CALL printui(*($1 + [168]))
	*(($1 + [240])) = [0]
	*($1 + [224]) = (int_64)-1
	$14 = *($0)
	*($1 + [208]) = $14
	*($1 + [216]) = $14
	*($1 + [232]) = (int_64)0
	$2 = [0]
	$3 = CALL db_find_i64($14, $14, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$178 }
	$2 = CALL $22(($1 + [208]), $3)
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)($1 + [208])), [17441])
	
.LABEL $label$178
	$14 = *($0)
	*($1 + [152]) = ($1 + [168])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17515])
	CALL $29(($1 + [208]), $2, $14, ($1 + [152]))
	$4 = *($1 + [232])
	if ( ($4 == 0) ){ goto $label$175 }
	$6 = ($1 + [236])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$180 }
	
.LOOP $label$181:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$182 }
	CALL _ZdlPv($3)
	
.LABEL $label$182
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$181 }
	$2 = *(($1 + [232]))
	goto $label$179 
	
.LABEL $label$180
	$2 = $4
	
.LABEL $label$179
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$175
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18524])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$183 }
	if ( CALL $87($2, [0], [-1], [18524], $4) ){ goto $label$183 }
	CALL prints([18532])
	$2 = *($1 + [432])
	if ( (*($2 + [12]) & [1]) ){ goto $label$185 }
	$2 = (($2 + [12]) + [1])
	goto $label$184 
	
.LABEL $label$185
	$2 = *(($2 + [20]))
	
.LABEL $label$184
	*($1 + [168]) = (CASTING int_64)(int_32 CALL $99($2))
	CALL prints([18545])
	CALL printui(*($1 + [168]))
	*(($1 + [240])) = [0]
	*($1 + [224]) = (int_64)-1
	$14 = *($0)
	*($1 + [208]) = $14
	*($1 + [216]) = $14
	*($1 + [232]) = (int_64)0
	$2 = [0]
	$3 = CALL db_find_i64($14, $14, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$186 }
	$2 = CALL $22(($1 + [208]), $3)
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)($1 + [208])), [17441])
	
.LABEL $label$186
	$14 = *($0)
	*($1 + [152]) = ($1 + [168])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17515])
	CALL $30(($1 + [208]), $2, $14, ($1 + [152]))
	$4 = *($1 + [232])
	if ( ($4 == 0) ){ goto $label$183 }
	$6 = ($1 + [236])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$188 }
	
.LOOP $label$189:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$190 }
	CALL _ZdlPv($3)
	
.LABEL $label$190
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$189 }
	$2 = *(($1 + [232]))
	goto $label$187 
	
.LABEL $label$188
	$2 = $4
	
.LABEL $label$187
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$183
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18555])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$191 }
	if ( CALL $87($2, [0], [-1], [18555], $4) ){ goto $label$191 }
	CALL prints([18563])
	$2 = *($1 + [432])
	if ( (*($2 + [12]) & [1]) ){ goto $label$193 }
	$2 = (($2 + [12]) + [1])
	goto $label$192 
	
.LABEL $label$193
	$2 = *(($2 + [20]))
	
.LABEL $label$192
	*($1 + [168]) = (CASTING int_64)(int_32 CALL $99($2))
	CALL prints([18576])
	CALL printui(*($1 + [168]))
	*(($1 + [240])) = [0]
	*($1 + [224]) = (int_64)-1
	$14 = *($0)
	*($1 + [208]) = $14
	*($1 + [216]) = $14
	*($1 + [232]) = (int_64)0
	$2 = [0]
	$3 = CALL db_find_i64($14, $14, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$194 }
	$2 = CALL $22(($1 + [208]), $3)
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)($1 + [208])), [17441])
	
.LABEL $label$194
	$14 = *($0)
	*($1 + [152]) = ($1 + [168])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17515])
	CALL $31(($1 + [208]), $2, $14, ($1 + [152]))
	$4 = *($1 + [232])
	if ( ($4 == 0) ){ goto $label$191 }
	$6 = ($1 + [236])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$196 }
	
.LOOP $label$197:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$198 }
	CALL _ZdlPv($3)
	
.LABEL $label$198
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$197 }
	$2 = *(($1 + [232]))
	goto $label$195 
	
.LABEL $label$196
	$2 = $4
	
.LABEL $label$195
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$191
	$2 = *($1 + [432])
	$3 = *($2)
	$4 = CALL $107([18586])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$199 }
	if ( CALL $87($2, [0], [-1], [18586], $4) ){ goto $label$199 }
	CALL prints([18600])
	$2 = *($1 + [432])
	if ( (*($2 + [12]) & [1]) ){ goto $label$201 }
	$2 = (($2 + [12]) + [1])
	goto $label$200 
	
.LABEL $label$201
	$2 = *(($2 + [20]))
	
.LABEL $label$200
	$14 = (CASTING int_64)(int_32 CALL $99($2))
	*($1 + [168]) = $14
	CALL prints([18620])
	CALL printui($14)
	*(($1 + [240])) = [0]
	*($1 + [224]) = (int_64)-1
	$14 = *($0)
	*($1 + [208]) = $14
	*($1 + [216]) = $14
	*($1 + [232]) = (int_64)0
	$2 = [0]
	$3 = CALL db_find_i64($14, $14, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$202 }
	$2 = CALL $22(($1 + [208]), $3)
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)($1 + [208])), [17441])
	
.LABEL $label$202
	$14 = *($0)
	*($1 + [152]) = ($1 + [168])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17515])
	CALL $32(($1 + [208]), $2, $14, ($1 + [152]))
	$4 = *($1 + [232])
	if ( ($4 == 0) ){ goto $label$199 }
	$6 = ($1 + [236])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$204 }
	
.LOOP $label$205:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$206 }
	CALL _ZdlPv($3)
	
.LABEL $label$206
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$205 }
	$2 = *(($1 + [232]))
	goto $label$203 
	
.LABEL $label$204
	$2 = $4
	
.LABEL $label$203
	*($6) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$199
	$4 = *($1 + [432])
	if ( ($4 == 0) ){ goto $label$207 }
	$3 = *($1 + [436])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$209 }
	
.LOOP $label$210:
	$2 = ($3 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$211 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$211
	$3 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$210 }
	$2 = *($1 + [432])
	goto $label$208 
	
.LABEL $label$209
	$2 = $4
	
.LABEL $label$208
	*($1 + [436]) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$207
	if ( ((*($1 + [448]) & [1]) == 0) ){ goto $label$212 }
	CALL _ZdlPv(*(($1 + [456])))
	
.LABEL $label$212
	$global$0 = ($1 + [464])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL $13(($1 + [40]))
	CALL prints([17233])
	CALL printn(*($1 + [40]))
	CALL prints([17241])
	CALL printi(*($1 + [56]))
	CALL prints([17253])
	$2 = ($1 + [64])
	CALL printui(*($2))
	CALL prints([17312])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$1 }
	$2 = [0]
	
.LOOP $label$3:
	*((($1 + [89]) + $2)) = $3
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$2 }
	$2 = $4
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	
.LABEL $label$2
	CALL prints_l(($1 + [89]), $4)
	
.LABEL $label$1
	CALL prints([17263])
	$2 = *($1 + [72])
	$4 = ($2 & [1])
	CALL prints_l(( *(($1 + [80])) ? ($1 + [73]) : $4 ), ( *(($1 + [76])) ? uint_32($2 >> [1]) : $4 ))
	*($1 + [32]) = [0]
	*($1 + [24]) = (int_64)0
	$2 = CALL $84(($1 + [8]), ($1 + [72]))
	CALL $14($0, ($1 + [24]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$4
	$2 = CALL $107([17271])
	if ( ($2 <= [8]) ){ goto $label$8 }
	CALL eosio_assert([0], [17329])
	goto $label$7 
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$3 = (int_64)0
	
.LOOP $label$9:
	$4 = *(($2 + [17270]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$10 }
	CALL eosio_assert([0], [17374])
	
.LABEL $label$10
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$9 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$5 
	
.LABEL $label$6
	$3 = (int_64)4
	
.LABEL $label$5
	if ( ((int_64)*(($1 + [64])) != (int_64)$3) ){ goto $label$11 }
	$2 = *($1 + [24])
	$4 = *($2)
	$5 = CALL $107([17275])
	if ( ((int_32)$5 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$11 }
	if ( CALL $87($2, [0], [-1], [17275], $5) ){ goto $label$11 }
	CALL eosio_assert(((int_64)*($1 + [48]) == (int_64)*($0)), [17276])
	CALL $15($0, *(($1 + [56])))
	
.LABEL $label$11
	$2 = *($1 + [24])
	$4 = *($2)
	$5 = CALL $107([17280])
	if ( ((int_32)$5 != (int_32)( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$12 }
	if ( CALL $87($2, [0], [-1], [17280], $5) ){ goto $label$12 }
	CALL prints([17286])
	$2 = ($1 + [64])
	CALL printui(*($2))
	CALL prints([17312])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$13 }
	$2 = [0]
	
.LOOP $label$15:
	*((($1 + [89]) + $2)) = $3
	$4 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$14 }
	$2 = $4
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	
.LABEL $label$14
	CALL prints_l(($1 + [89]), $4)
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($1 + [48]) == (int_64)*($0)), [17276])
	$2 = *($0 + [32])
	if ( ($2 & [1]) ){ goto $label$20 }
	$6 = (($0 + [32]) + [1])
	$2 = uint_32($2 >> [1])
	if ( ((uint_32)$2 >= (uint_32)[8]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$6 = *(($0 + [40]))
	$2 = *(($0 + [36]))
	if ( ($2 <= [8]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert([0], [17329])
	goto $label$17 
	
.LABEL $label$18
	if ( $2 ){ goto $label$17 }
	$3 = (int_64)4
	goto $label$16 
	
.LABEL $label$17
	$3 = (int_64)0
	
.LOOP $label$21:
	$5 = (($6 + $2) + [-1])
	$4 = *($5)
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$22 }
	CALL eosio_assert([0], [17374])
	$4 = *($5)
	
.LABEL $label$22
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$21 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	
.LABEL $label$16
	if ( ((int_64)*(($1 + [64])) != (int_64)$3) ){ goto $label$12 }
	CALL prints([17295])
	CALL $16($0, *($1 + [40]), *(($1 + [56])))
	
.LABEL $label$12
	$5 = *($1 + [24])
	if ( ($5 == 0) ){ goto $label$23 }
	$4 = *($1 + [28])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = ($4 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$27
	$4 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$26 }
	$2 = *($1 + [24])
	goto $label$24 
	
.LABEL $label$25
	$2 = $5
	
.LABEL $label$24
	*($1 + [28]) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$23
	if ( ((*(($1 + [72])) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($1 + [80])))
	
.LABEL $label$28
	$global$0 = ($1 + [96])
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$7 = CALL $112($8)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$2
	CALL read_action_data($7, $8)
	
.LABEL $label$1
	*(($4 + [20])) = $7
	*(($4 + [24])) = ($7 + $8)
	*(($4 + [40])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $7
	*($4 + [28]) = [23332844]
	*($4 + [32]) = (int_64)0
	$3 = ($4 + [32])
	$2 = CALL $107([17905])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$7 }
	*(($4 + [32])) = ($2 << [1])
	$3 = ($3 + [1])
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = (($2 + [16]) & [-16])
	$3 = CALL _Znwj($9)
	*(($4 + [40])) = $3
	*(($4 + [36])) = $2
	*($4 + [32]) = ($9 | [1])
	
.LABEL $label$6
	CALL memcpy($3, [17905], $2)
	
.LABEL $label$5
	*(($3 + $2)) = [0]
	$2 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$8 }
	$6 = *((*($2) + $6))
	
.LABEL $label$8
	CALL void $2((int_32 $6))
	if ( ($8 <= [513]) ){ goto $label$9 }
	CALL $116($7)
	
.LABEL $label$9
	if ( ((*(($4 + [32])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$10
	$global$0 = ($4 + [48])
	return [1]
	
.LABEL $label$4
	CALL $83($3)
	return (unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 apply)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [288])
	$global$0 = $3
	CALL memory()
	*($3 + [272]) = [16910]
	*($3 + [276]) = CALL $107([16910])
	*($3 + [128]) = *($3 + [272])
	CALL $3(($3 + [280]), ($3 + [128]))
	$4 = [0]
	if ( ((int_64)$1 == (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [256]) = [17013]
	*($3 + [260]) = CALL $107([17013])
	*($3 + [120]) = *($3 + [256])
	CALL $3(($3 + [264]), ($3 + [120]))
	$4 = [1]
	if ( ((int_64)$1 != (int_64)6766875999750921520) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [240]) = [17026]
	*($3 + [244]) = CALL $107([17026])
	*($3 + [112]) = *($3 + [240])
	CALL $3(($3 + [248]), ($3 + [112]))
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	
.LABEL $label$3
	*($3 + [236]) = [0]
	*($3 + [232]) = [1]
	*($3 + [104]) = *($3 + [232])
	CALL $5($0, $1, ($3 + [104]))
	
.LABEL $label$1
	*($3 + [224]) = [17035]
	*($3 + [228]) = CALL $107([17035])
	*($3 + [96]) = *($3 + [224])
	CALL $3(($3 + [280]), ($3 + [96]))
	if ( ((int_64)$2 != (int_64)-4157493845350678528) ){ goto $label$5 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [2]
	*($3 + [88]) = *($3 + [216])
	CALL $5($0, $1, ($3 + [88]))
	
.LABEL $label$5
	*($3 + [208]) = [17042]
	*($3 + [212]) = CALL $107([17042])
	*($3 + [80]) = *($3 + [208])
	CALL $3(($3 + [280]), ($3 + [80]))
	if ( ((int_64)$2 != (int_64)3631283935532548096) ){ goto $label$6 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [3]
	*($3 + [72]) = *($3 + [200])
	CALL $5($0, $1, ($3 + [72]))
	
.LABEL $label$6
	*($3 + [192]) = [17048]
	*($3 + [196]) = CALL $107([17048])
	*($3 + [64]) = *($3 + [192])
	CALL $3(($3 + [280]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)4921564679018381312) ){ goto $label$7 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [4]
	*($3 + [56]) = *($3 + [184])
	CALL $5($0, $1, ($3 + [56]))
	
.LABEL $label$7
	*($3 + [176]) = [17054]
	*($3 + [180]) = CALL $107([17054])
	*($3 + [48]) = *($3 + [176])
	CALL $3(($3 + [280]), ($3 + [48]))
	if ( ((int_64)$2 != (int_64)-3102536759825661952) ){ goto $label$8 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [5]
	*($3 + [40]) = *($3 + [168])
	CALL $5($0, $1, ($3 + [40]))
	
.LABEL $label$8
	*($3 + [160]) = [17062]
	*($3 + [164]) = CALL $107([17062])
	*($3 + [32]) = *($3 + [160])
	CALL $3(($3 + [280]), ($3 + [32]))
	if ( ((int_64)$2 != (int_64)4729483296180797440) ){ goto $label$9 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [6]
	*($3 + [24]) = *($3 + [152])
	CALL $5($0, $1, ($3 + [24]))
	
.LABEL $label$9
	*($3 + [144]) = [17067]
	*($3 + [148]) = CALL $107([17067])
	*($3 + [16]) = *($3 + [144])
	CALL $3(($3 + [280]), ($3 + [16]))
	if ( ((int_64)$2 != (int_64)4942010207426314240) ){ goto $label$10 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [7]
	*($3 + [8]) = *($3 + [136])
	CALL $12($0, $1, ($3 + [8]))
	
.LABEL $label$10
	CALL $97([0])
	$global$0 = ($3 + [288])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17076])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17181])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17114])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17181])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC memory ()
{
	CALL $74()
}

void .FUNC $1 (int_32 $0)
{
	if ( ((*([0] + [8192]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8200]))
	
.LABEL $label$1
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$2 }
	$5 = ($2 + [1])
	$2 = ($5 + uint_32($4 >> [1]))
	goto $label$1 
	
.LABEL $label$2
	$5 = *($2 + [8])
	$2 = ($5 + *($2 + [4]))
	
.LABEL $label$1
	*($3 + [24]) = $2
	*($3 + [16]) = $5
	*($3 + [8]) = $5
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$5 }
	$6 = ($1 + [8])
	$7 = ($1 + [4])
	$4 = $5
	
.LOOP $label$6:
	if ( ((int_32)*($4) != (int_32)[59]) ){ goto $label$12 }
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*($6)) ){ goto $label$11 }
	*($2) = (int_64)0
	*(($2 + [8])) = [0]
	$8 = ($4 - $5)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$10 }
	*($2) = ($8 << [1])
	$9 = ($2 + [1])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$4 = ($4 + [1])
	*($3 + [8]) = $4
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$11
	CALL $48($1, ($3 + [16]), ($3 + [8]))
	goto $label$7 
	
.LABEL $label$10
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($2) = ($10 | [1])
	*($2 + [8]) = $9
	*($2 + [4]) = $8
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = $9
	
.LOOP $label$13:
	*($2) = *($5)
	$2 = ($2 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$13 }
	$9 = ($9 + $8)
	
.LABEL $label$8
	*($9) = [0]
	*($7) = (*($7) + [12])
	
.LABEL $label$7
	$4 = (*($3 + [8]) + [1])
	*($3 + [16]) = $4
	$2 = *($3 + [24])
	$5 = $4
	*($3 + [8]) = $4
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$16 }
	$4 = *($1 + [4])
	if ( ((uint_32)$4 >= (uint_32)*($1 + [8])) ){ goto $label$17 }
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$9 = ($2 - $5)
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$9 > (uint_32)[10]) ){ goto $label$15 }
	*($4) = ($9 << [1])
	$7 = ($4 + [1])
	goto $label$14 
	
.LABEL $label$17
	CALL $48($1, ($3 + [16]), ($3 + [24]))
	
.LABEL $label$16
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$15
	$8 = (($9 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($4) = ($8 | [1])
	*($4 + [8]) = $7
	*($4 + [4]) = $9
	
.LABEL $label$14
	$4 = $7
	
.LOOP $label$18:
	*($4) = *($5)
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$18 }
	*(($7 + $9)) = [0]
	*(($5 = ($1 + [4]))) = (*($5) + [12])
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$4
	CALL $83($2)
	
.LABEL $label$3
	CALL $83($4)
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL prints([17427])
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)-1
	$3 = *($0)
	*($2 + [24]) = $3
	*($2 + [32]) = $3
	*($2 + [48]) = (int_64)0
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $22(($2 + [24]), $5)
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)($2 + [24])), [17441])
	
.LABEL $label$1
	*($2 + [16]) = ((int_64)*($4 + [16]) + (int_64)$1)
	$3 = *($0)
	*($2 + [8]) = ($2 + [16])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [17515])
	CALL $49(($2 + [24]), $4, $3, ($2 + [8]))
	$5 = *($2 + [48])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [52])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($2 + [48]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [128]) = $2
	*($3 + [136]) = $1
	CALL prints([17712])
	CALL printn($1)
	CALL prints([17725])
	CALL printui($2)
	CALL prints([17729])
	*((($3 + [88]) + [32])) = [0]
	*($3 + [104]) = (int_64)-1
	$4 = *($0)
	*($3 + [88]) = $4
	*($3 + [96]) = $4
	*($3 + [112]) = (int_64)0
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $22(($3 + [88]), $6)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)($3 + [88])), [17441])
	$1 = *($3 + [136])
	$2 = *($3 + [128])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($5 + [48]) ^ (int_32)[1]), [17731])
	$7 = *($5 + [52])
	*($3 + [84]) = $7
	*($3 + [72]) = ((int_64)$2 + (int_64)*($5 + [24]))
	*((($3 + [32]) + [32])) = [0]
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	*($3 + [68]) = [0]
	$2 = *($0)
	*($3 + [32]) = $2
	*($3 + [40]) = $2
	$6 = CALL db_find_i64($2, $2, (int_64)3607819667127140352, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $20(($3 + [32]), $6)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($3 + [32])), [17441])
	CALL prints([17769])
	$1 = *($0)
	*($3 + [16]) = ($3 + [128])
	CALL eosio_assert([1], [17515])
	CALL $50(($3 + [32]), $6, $1, ($3 + [16]))
	if ( ($5 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	*($3 + [84]) = ($7 + [1])
	CALL prints([17786])
	$1 = *($0)
	*($3 + [20]) = ($3 + [84])
	*($3 + [16]) = ($3 + [136])
	*($3 + [24]) = ($3 + [128])
	CALL $51(($3 + [8]), ($3 + [32]), $1, ($3 + [16]))
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$1 = *($0)
	*($3 + [20]) = ($3 + [72])
	*($3 + [16]) = ($3 + [84])
	CALL eosio_assert([1], [17515])
	CALL $52(($3 + [88]), $5, $1, ($3 + [16]))
	
.LABEL $label$2
	$6 = *($3 + [56])
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ($3 + [60])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL _ZdlPv($0)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($3 + [56]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$6 = *($3 + [112])
	if ( ($6 == 0) ){ goto $label$10 }
	$7 = ($3 + [116])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($3 + [112]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $6
	
.LABEL $label$11
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$global$0 = ($3 + [144])
}

int_32 .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [17441])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $62($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [17441])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	float_64 $18
	float_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	float_64 $26
	$1 = ($global$0 - [288])
	$global$0 = $1
	CALL prints([19163])
	CALL require_auth(*($0))
	CALL prints([19170])
	$2 = [0]
	*(($1 + [264])) = [0]
	*($1 + [248]) = (int_64)-1
	$3 = *($0)
	*($1 + [232]) = $3
	*($1 + [240]) = $3
	*($1 + [256]) = (int_64)0
	$4 = CALL db_find_i64($3, $3, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $22(($1 + [232]), $4)
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)($1 + [232])), [17441])
	
.LABEL $label$1
	*($1 + [231]) = *($2 + [48])
	$5 = *($2 + [49])
	*($1 + [216]) = *($2 + [8])
	$6 = *($2 + [24])
	$7 = *($2 + [16])
	*($1 + [208]) = *($2 + [40])
	$8 = *($2 + [64])
	$9 = *($2 + [68])
	$10 = *($2 + [52])
	$11 = *($2 + [32])
	CALL prints([18515])
	CALL prints(( [19465] ? [19470] : *($1 + [231]) ))
	CALL prints([17729])
	CALL prints([19176])
	CALL printui(*($1 + [216]))
	CALL prints([17729])
	CALL prints([19184])
	CALL printui($7)
	CALL prints([17729])
	CALL prints([19191])
	CALL printui($6)
	CALL prints([17729])
	CALL prints([19203])
	CALL printui(*($1 + [208]))
	CALL prints([17729])
	CALL prints([18620])
	CALL printui($11)
	CALL prints([17729])
	CALL prints([19216])
	CALL printui($10)
	CALL prints([17729])
	if ( *($1 + [231]) ){ goto $label$5 }
	*($1 + [231]) = [1]
	*($1 + [208]) = (int_64)0
	*($1 + [216]) = ((int_64)*($1 + [216]) + (int_64)1)
	CALL prints([19228])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = *($0)
	*($1 + [124]) = ($1 + [216])
	*($1 + [120]) = ($1 + [231])
	*($1 + [128]) = ($1 + [208])
	CALL eosio_assert([1], [17515])
	CALL $38(($1 + [232]), $2, $3, ($1 + [120]))
	
.LABEL $label$6
	if ( (*($1 + [231]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL prints([19256])
	$12 = ($0 + [32])
	$4 = *($0 + [32])
	if ( ($4 & [1]) ){ goto $label$11 }
	$13 = ($12 + [1])
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)[8]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$13 = *(($0 + [40]))
	$4 = *(($0 + [36]))
	if ( ($4 <= [8]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert([0], [17329])
	goto $label$8 
	
.LABEL $label$9
	if ( $4 ){ goto $label$8 }
	$14 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$3 = (int_64)0
	
.LOOP $label$12:
	$15 = (($13 + $4) + [-1])
	$16 = *($15)
	if ( ((($16 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [17374])
	$16 = *($15)
	
.LABEL $label$13
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$12 }
	$14 = ((int_64)$3 & (int_64)72057594037927935)
	
.LABEL $label$7
	*($1 + [96]) = [17013]
	*($1 + [100]) = CALL $107([17013])
	*($1 + [40]) = *($1 + [96])
	$3 = *(CALL $3(($1 + [120]), ($1 + [40])))
	$17 = *($0)
	*((($1 + [120]) + [32])) = [0]
	*($1 + [128]) = $17
	*($1 + [120]) = $3
	*($1 + [136]) = (int_64)-1
	*($1 + [144]) = (int_64)0
	$3 = *(CALL $17(($1 + [120]), $14, [17930]))
	$15 = *($1 + [144])
	if ( ($15 == 0) ){ goto $label$14 }
	$13 = ($1 + [148])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$15) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$16 = *($4)
	*($4) = [0]
	if ( ($16 == 0) ){ goto $label$18 }
	CALL _ZdlPv($16)
	
.LABEL $label$18
	if ( ((int_32)$15 != (int_32)$4) ){ goto $label$17 }
	$4 = *(($1 + [144]))
	goto $label$15 
	
.LABEL $label$16
	$4 = $15
	
.LABEL $label$15
	*($13) = $15
	CALL _ZdlPv($4)
	
.LABEL $label$14
	CALL prints([19282])
	$4 = *(($0 + [32]))
	$16 = ($4 & [1])
	CALL prints_l(( *(($0 + [40])) ? ($12 + [1]) : $16 ), ( *(($0 + [36])) ? uint_32($4 >> [1]) : $16 ))
	CALL prints([19286])
	CALL printi($3)
	CALL prints([17729])
	$3 = *($1 + [208])
	if ( (int_64)($11 == 0) ){ goto $label$19 }
	if ( ((uint_64)$3 >= (uint_64)$10) ){ goto $label$19 }
	$18 = (CASTING float_64)(uint_64 $7)
	$19 = (CASTING float_64)(uint_64 $6)
	$20 = ($1 + [136])
	$21 = ($1 + [144])
	$22 = ($1 + [152])
	$23 = ($1 + [156])
	$24 = (($1 + [120]) + [8])
	$25 = ($1 + [148])
	$6 = (int_64)0
	$12 = [0]
	
.LOOP $label$20:
	CALL prints([19299])
	CALL printui($6)
	CALL prints([17729])
	*($1 + [272]) = ((int_64)*($1 + [208]) + (int_64)1)
	CALL prints([19305])
	CALL printui(*($1 + [272]))
	CALL prints([17729])
	*($20) = (int_64)-1
	*($21) = (int_64)0
	*($22) = [0]
	*($23) = [0]
	$3 = *($0)
	*($24) = $3
	*($1 + [120]) = $3
	*($1 + [200]) = ($1 + [120])
	CALL $39(($1 + [96]), ($1 + [200]), ($1 + [272]))
	$4 = [0]
	$16 = *($1 + [100])
	if ( ($16 == 0) ){ goto $label$21 }
	$4 = ( $16 ? [0] : ((int_64)*($1 + [272]) == (int_64)*($16 + [8])) )
	
.LABEL $label$21
	*($1 + [192]) = *($4 + [24])
	$6 = *($4 + [32])
	*($1 + [184]) = *($4 + [40])
	$3 = *($4 + [48])
	CALL prints([19311])
	CALL printn(*($4 + [16]))
	CALL prints([19333])
	CALL printui(*($4))
	CALL prints([19336])
	CALL printui(*($1 + [192]))
	CALL prints([18038])
	if ( ((int_64)$3 == (int_64)*($1 + [216])) ){ goto $label$22 }
	CALL prints([19340])
	$3 = *($1 + [192])
	CALL prints([19343])
	$26 = ((float_64)(CASTING float_64)(uint_64 $3) / (float_64)$19)
	CALL printdf($26)
	CALL prints([17729])
	$26 = ((float_64)((float_64)$26 * (float_64)$18) + (float_64)(CASTING float_64)(uint_64 *($1 + [184])))
	if ( (((float_64)$26 < (float_64)(float_64)18446744073709551615) & ((float_64)$26 >= (float_64)(float_64)0)) ){ goto $label$24 }
	$3 = (int_64)0
	goto $label$23 
	
.LABEL $label$24
	$3 = (Rounds 0)($26)
	
.LABEL $label$23
	*($1 + [184]) = $3
	CALL prints([19353])
	CALL printui(*($1 + [184]))
	CALL prints([17729])
	*($1 + [192]) = $6
	$3 = *($4)
	$16 = *($25)
	$13 = *($21)
	if ( ((int_32)$13 == (int_32)$16) ){ goto $label$26 }
	
.LOOP $label$28:
	$4 = ($16 + [-24])
	$15 = *($4)
	if ( ((int_64)*($15) == (int_64)$3) ){ goto $label$27 }
	$16 = $4
	if ( ((int_32)$13 != (int_32)$4) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$13 == (int_32)$16) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*($15 + [56]) == (int_32)($1 + [120])), [17441])
	goto $label$25 
	
.LABEL $label$26
	$15 = [0]
	$4 = CALL db_find_i64(*($1 + [120]), *($24), (int_64)3607819667127140352, $3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$25 }
	$15 = CALL $20(($1 + [120]), $4)
	CALL eosio_assert(((int_32)*($15 + [56]) == (int_32)($1 + [120])), [17441])
	
.LABEL $label$25
	$3 = *($0)
	*((($1 + [96]) + [8])) = ($1 + [184])
	*($1 + [100]) = ($1 + [192])
	*($1 + [96]) = ($1 + [216])
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [17515])
	CALL $40(($1 + [120]), $15, $3, ($1 + [96]))
	*($1 + [208]) = ((int_64)*($1 + [208]) + (int_64)1)
	
.LABEL $label$22
	$12 = ($12 + [1])
	$15 = *($21)
	if ( ($15 == 0) ){ goto $label$29 }
	$4 = *($25)
	if ( ((int_32)$4 == (int_32)$15) ){ goto $label$31 }
	
.LOOP $label$32:
	$4 = ($4 + [-24])
	$16 = *($4)
	*($4) = [0]
	if ( ($16 == 0) ){ goto $label$33 }
	CALL _ZdlPv($16)
	
.LABEL $label$33
	if ( ((int_32)$15 != (int_32)$4) ){ goto $label$32 }
	$4 = *($21)
	goto $label$30 
	
.LABEL $label$31
	$4 = $15
	
.LABEL $label$30
	*($25) = $15
	CALL _ZdlPv($4)
	
.LABEL $label$29
	$3 = *($1 + [208])
	$6 = (CASTING uint_64)(uint_32 $12)
	if ( ((uint_64)$11 <= (uint_64)$6) ){ goto $label$19 }
	if ( (uint_64)($3 <= $10) ){ goto $label$20 }
	
.LABEL $label$19
	if ( ((uint_64)$3 >= (uint_64)$10) ){ goto $label$34 }
	CALL prints([19414])
	$3 = *($0)
	*($1 + [120]) = ($1 + [208])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17515])
	CALL $41(($1 + [232]), $2, $3, ($1 + [120]))
	if ( (($5 & [255]) == 0) ){ goto $label$4 }
	CALL prints([19429])
	$3 = CALL current_time()
	*(($1 + [148])) = (int_64)0
	*(($1 + [164])) = (int_64)0
	*(($1 + [172])) = (int_64)0
	*($1 + [132]) = [0]
	*($1 + [136]) = [0]
	*($1 + [140 align=4]) = (int_64)0
	*($1 + [156 align=4]) = (int_64)0
	*($1 + [120]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	$3 = *($0)
	*($1 + [56]) = [18951]
	*($1 + [60]) = CALL $107([18951])
	*($1 + [16]) = *($1 + [56])
	$4 = CALL $3(($1 + [64]), ($1 + [16]))
	*($1 + [96]) = $3
	*($1 + [104]) = *($4)
	*($1 + [48]) = [17062]
	*($1 + [52]) = CALL $107([17062])
	*($1 + [8]) = *($1 + [48])
	$4 = CALL $3(($1 + [272]), ($1 + [8]))
	*($1 + [192]) = *($1 + [216])
	CALL $42(($1 + [156]), ($1 + [96]), $0, $4, ($1 + [192]))
	*($1 + [140]) = $8
	$3 = CALL current_time()
	*($1 + [104]) = (int_64)0
	*($1 + [96]) = ((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($0)
	CALL $43(($1 + [272]), ($1 + [120]))
	$4 = *($1 + [272])
	CALL send_deferred(($1 + [96]), $3, $4, (*($1 + [276]) - $4), [0])
	$4 = *($1 + [272])
	if ( ($4 == 0) ){ goto $label$35 }
	*($1 + [276]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$35
	CALL prints([19451])
	CALL $44(($1 + [120]))
	$15 = *($1 + [256])
	if ( $15 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$34
	CALL prints([19368])
	$3 = *($0)
	*($1 + [120]) = ($1 + [208])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [17515])
	CALL $45(($1 + [232]), $2, $3, ($1 + [120]))
	if ( (($5 & [255]) == 0) ){ goto $label$4 }
	CALL prints([19379])
	$3 = CALL current_time()
	*(($1 + [148])) = (int_64)0
	*(($1 + [164])) = (int_64)0
	*(($1 + [172])) = (int_64)0
	*($1 + [132]) = [0]
	*($1 + [136]) = [0]
	*($1 + [140 align=4]) = (int_64)0
	*($1 + [156 align=4]) = (int_64)0
	*($1 + [120]) = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [60])
	$3 = *($0)
	*($1 + [80]) = [18951]
	*($1 + [84]) = CALL $107([18951])
	*($1 + [32]) = *($1 + [80])
	$4 = CALL $3(($1 + [88]), ($1 + [32]))
	*($1 + [96]) = $3
	*($1 + [104]) = *($4)
	*($1 + [72]) = [17062]
	*($1 + [76]) = CALL $107([17062])
	*($1 + [24]) = *($1 + [72])
	$4 = CALL $3(($1 + [272]), ($1 + [24]))
	*($1 + [192]) = *($1 + [216])
	CALL $42(($1 + [156]), ($1 + [96]), $0, $4, ($1 + [192]))
	*($1 + [140]) = $9
	$3 = CALL current_time()
	*($1 + [104]) = (int_64)0
	*($1 + [96]) = ((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($0)
	CALL $43(($1 + [272]), ($1 + [120]))
	$4 = *($1 + [272])
	CALL send_deferred(($1 + [96]), $3, $4, (*($1 + [276]) - $4), [0])
	$4 = *($1 + [272])
	if ( ($4 == 0) ){ goto $label$36 }
	*($1 + [276]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$36
	CALL prints([19400])
	CALL $44(($1 + [120]))
	
.LABEL $label$4
	$15 = *($1 + [256])
	if ( ($15 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$13 = ($1 + [260])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$15) ){ goto $label$38 }
	
.LOOP $label$39:
	$4 = ($4 + [-24])
	$16 = *($4)
	*($4) = [0]
	if ( ($16 == 0) ){ goto $label$40 }
	CALL _ZdlPv($16)
	
.LABEL $label$40
	if ( ((int_32)$15 != (int_32)$4) ){ goto $label$39 }
	$4 = *(($1 + [256]))
	goto $label$37 
	
.LABEL $label$38
	$4 = $15
	
.LABEL $label$37
	*($13) = $15
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$global$0 = ($1 + [288])
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_recipient($1)
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $112($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [104])) = [0]
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [80]) = ($2 + $7)
	*($4 + [72]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17303])
	CALL memcpy(($4 + [88]), $2, [8])
	*($4 + [76]) = ($2 + [8])
	$8 = (($4 + [88]) + [8])
	CALL $46(($4 + [72]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [80])
	*($4 + [8]) = *($4 + [72])
	*(($9 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($9)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	*($4 + [52]) = [23332844]
	$9 = ($4 + [56])
	$3 = CALL $107([17905])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$10 }
	*(($4 + [56])) = ($3 << [1])
	$9 = ($9 + [1])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$10 = (($3 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*(($4 + [64])) = $9
	*(($4 + [60])) = $3
	*($4 + [56]) = ($10 | [1])
	
.LABEL $label$9
	CALL memcpy($9, [17905], $3)
	
.LABEL $label$8
	*(($9 + $3)) = [0]
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [88])
	$9 = CALL $84(($4 + [112]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$11 }
	$6 = *((*($3) + $6))
	
.LABEL $label$11
	$5 = CALL $84(($4 + [128]), $9)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [128]) & [1]) ){ goto $label$13 }
	if ( (*($4 + [112]) & [1]) ){ goto $label$12 }
	goto $label$6 
	
.LABEL $label$13
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$12
	CALL _ZdlPv(*($9 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL $83($9)
	
.LABEL $label$6
	if ( ($7 <= [513]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $116($2)
	
.LABEL $label$4
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$14
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [104])))
	
.LABEL $label$15
	$global$0 = ($4 + [144])
	(unreachable)
	return [1]
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $112($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $47(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $112($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $112($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = *($0 + [8])
	$4 = (CASTING uint_32)(uint_64 $3)
	$5 = ((int_64)$3 & (int_64)255)
	$6 = (int_64)($5 == 0)
	if ( $6 ){ goto $label$2 }
	$3 = ((int_64)$5 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$3:
	$7 = ((int_64)$7 * (int_64)10)
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)1
	
.LABEL $label$1
	$4 = ($4 & [255])
	$8 = ($1 - (($4 + [16]) & [496]))
	$global$0 = $8
	*(($1 = ($8 + $4))) = [0]
	$9 = *($0)
	if ( $6 ){ goto $label$4 }
	$5 = ((int_64)$5 + (int_64)1)
	$3 = ((int_64)$9 % (int_64)$7)
	$1 = ($1 + [-1])
	
.LOOP $label$5:
	$10 = ((int_64)$3 / (int_64)10)
	*($1) = ((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$10 * (int_64)10))) + [48])
	$1 = ($1 + [-1])
	$3 = $10
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$9 / (int_64)$7))
	CALL prints([17949])
	CALL prints_l($8, $4)
	CALL prints([17729])
	$3 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	if ( (int_64)($3) == 0) ){ goto $label$6 }
	$1 = [0]
	
.LOOP $label$8:
	*((($2 + [9]) + $1)) = $3
	$0 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$7 }
	$1 = $0
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	
.LABEL $label$7
	CALL prints_l(($2 + [9]), $0)
	
.LABEL $label$6
	$global$0 = ($2 + [16])
}

void .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $112($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	CALL $46($2, $0)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($0 + [56]) = $1
	*($0 + [16]) = (int_64)0
	$1 = *($2 + [4])
	$4 = *($1)
	*($0) = *($4)
	*($0 + [8]) = *(*($1 + [4]))
	$5 = *($4)
	*($0 + [24]) = (int_64)0
	*($0 + [16]) = $5
	*($0 + [32]) = *(*($1 + [8]))
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	$1 = *($2)
	*($3 + [64]) = ($3 + [56])
	*($3 + [60]) = $3
	*($3 + [56]) = $3
	CALL $61(($3 + [56]), $0)
	$5 = *($0)
	*($0 + [60]) = CALL db_store_i64(*($1 + [8]), (int_64)3607819667127140352, *(*($2 + [8])), $5, $3, [56])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($1 + [8]))
	$6 = *(*(($2 + [8])))
	$7 = *($0)
	*($3 + [72]) = *(($0 + [8]))
	*($0 + [64]) = CALL db_idx64_store($5, (int_64)3607819667127140352, $6, $7, ($3 + [72]))
	$global$0 = ($3 + [80])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($4 + [72]) = *($1 + [8])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	CALL $61(($4 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [88]) = *(($1 + [8]))
	if ( (CALL $106(($4 + [72]), ($4 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607819667127140352, ($4 + [80]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [88]))
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [17814])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([72])
	CALL $58($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [52]) = *(*($3))
	*($1 + [24]) = *(*($3 + [4]))
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [88]) = ($4 + [70])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $57(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [70])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [17308])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $54($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17303])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $95($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = CALL $107([17271])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17329])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [17270]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17374])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18958])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [19007])
	$6 = *($0)
	*($4 + [104]) = [18951]
	*($4 + [108]) = CALL $107([18951])
	*($4 + [16]) = *($4 + [104])
	$9 = *(CALL $3(($4 + [112]), ($4 + [16])))
	*($4 + [88]) = [16910]
	*($4 + [92]) = CALL $107([16910])
	*($4 + [8]) = *($4 + [88])
	$5 = CALL $3(($4 + [96]), ($4 + [8]))
	*($4 + [72]) = [17026]
	*($4 + [76]) = CALL $107([17026])
	*($4) = *($4 + [72])
	$7 = CALL $3(($4 + [80]), $4)
	*((($4 + [24]) + [24])) = $8
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [24]) = *($0)
	$10 = CALL $84((($4 + [24]) + [32]), $3)
	*($4 + [120]) = *($5)
	*($4 + [128]) = *($7)
	*(($5 = CALL _Znwj([16]))) = $6
	*($5 + [8]) = $9
	*((($4 + [120]) + [36])) = [0]
	$7 = ($5 + [16])
	*((($4 + [120]) + [24])) = $7
	*(($4 + [140])) = $7
	*($4 + [136]) = $5
	*($4 + [148 align=4]) = (int_64)0
	$5 = *($10)
	$7 = ( *((($4 + [24]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [32])
	$6 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [148])
	
.LOOP $label$12:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$12 }
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $54($7, $5)
	$7 = *(($4 + [152]))
	$5 = *(($4 + [148]))
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	$5 = [0]
	
.LABEL $label$13
	*($4 + [180]) = $5
	*($4 + [176]) = $5
	*($4 + [184]) = $7
	*($4 + [160]) = ($4 + [176])
	*($4 + [168]) = ($4 + [24])
	CALL $65(($4 + [168]), ($4 + [160]))
	CALL $66(($4 + [176]), ($4 + [120]))
	$5 = *($4 + [176])
	CALL send_inline($5, (*($4 + [180]) - $5))
	$5 = *($4 + [176])
	if ( ($5 == 0) ){ goto $label$15 }
	*($4 + [180]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$5 = *($4 + [148])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($4 + [152])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *($4 + [136])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($4 + [140])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$18
	$global$0 = ($4 + [192])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [14]) = *($1 + [48])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [17706])
	CALL memcpy(*($0 + [4]), ($2 + [14]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [49])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [17706])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [52]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [68]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $116 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16884])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16692]
	$3 = (((int_32)$1 * (int_32)[12]) + [16692])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $114 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8492]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8496])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8492]) = [1]
	$2 = ($2 << [16])
	*([0] + [8496]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8496])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8496]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8492]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8492]) = [1]
	$3 = ($3 << [16])
	*([0] + [8496]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8496])
	
.LABEL $label$10
	*([0] + [8496]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [24]) = (int_64)0
	*($4 + [72]) = *($1 + [8])
	*($1 + [32]) = (int_64))(*(*($3)) - *(*($3 + [4])))
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	CALL $61(($4 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [88]) = *(($1 + [8]))
	if ( (CALL $106(($4 + [72]), ($4 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607819667127140352, ($4 + [80]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [88]))
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

int_32 .FUNC $112 (int_32 $0)
{
	return CALL $113([8500], $0)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $114($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16927])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $96())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $111($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $112($1)
	
.LABEL $label$2
	*(CALL $96()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $112(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $116($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [48]) = ((int_64)*(*($3)) != (int_64)0)
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [88]) = ($4 + [70])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $57(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [70])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [64]) = *(*($3))
	*($1 + [68]) = *(*($3 + [4]))
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [88]) = ($4 + [70])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $57(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [70])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17303])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [17303])
	CALL memcpy(($2 + [14]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [48]) = ((int_32)*($2 + [14]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [17303])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [49]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [17303])
	CALL memcpy(($1 + [52]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [17303])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [17303])
	CALL memcpy(($1 + [68]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [17814])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [56]) = $1
	*($3 + [16]) = (int_64)0
	CALL $64(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $59(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17492])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $112($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [56]) = $0
	*($5 + [16]) = (int_64)0
	CALL $60(($3 + [32]), $5)
	*($5 + [64]) = [-1]
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $59(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $116($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [18697])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [18742])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18792])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17492])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $112($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [72]) = $0
	CALL $55(($3 + [32]), $5)
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $56(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $116($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [18697])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [18742])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18792])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [60]))
	$6 = *(($1 + [64]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607819667127140352, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$18()), [17814])
	*(($5 = CALL _Znwj([88])) + [72]) = $1
	*($5 + [8]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)2
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = [256]
	*($5 + [52]) = [0]
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)2576980377605
	*($5) = *(*($3))
	*($4 + [104]) = (($4 + [16]) + [70])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $57(($4 + [96]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, $6, ($4 + [16]), [70])
	*($5 + [76]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $56(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($4 + [72]) = *($1 + [8])
	$3 = *($3)
	*($1 + [24]) = *($3)
	*($1 + [32]) = *($3)
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	CALL $61(($4 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [88]) = *(($1 + [8]))
	if ( (CALL $106(($4 + [72]), ($4 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607819667127140352, ($4 + [80]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [88]))
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($4 + [72]) = *($1 + [8])
	$5 = *(*($3))
	*($1 + [24]) = $5
	*($1 + [32]) = $5
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	CALL $61(($4 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [88]) = *(($1 + [8]))
	if ( (CALL $106(($4 + [72]), ($4 + [88]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [64])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607819667127140352, ($4 + [80]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [88]))
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

void .FUNC $109 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17706])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17706])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17706])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17706])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17706])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $108 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17706])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17706])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17706])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17706])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $67(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6)
	if ( ($7 & [1]) ){ goto $label$2 }
	$7 = uint_32($7 >> [1])
	$6 = ($6 + [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *($6 + [4])
	$6 = *($6 + [8])
	
.LABEL $label$1
	*($3 + [44]) = $7
	*($3 + [40]) = $6
	*($3 + [8]) = *($3 + [40])
	*($1) = *(CALL $3(($3 + [16]), ($3 + [8])))
	$6 = *($5)
	$7 = *($6)
	if ( ($7 & [1]) ){ goto $label$4 }
	$7 = uint_32($7 >> [1])
	$6 = ($6 + [1])
	goto $label$3 
	
.LABEL $label$4
	$7 = *($6 + [4])
	$6 = *($6 + [8])
	
.LABEL $label$3
	*($3 + [36]) = $7
	*($3 + [32]) = $6
	*($3) = *($3 + [32])
	*($1 + [16]) = *(CALL $3(($3 + [16]), $3))
	*($1 + [24]) = (CASTING int_64)(int_32 (*(*($5 + [4])) + [100]))
	$5 = $2
	$2 = ($5 + [-64])
	$global$0 = $2
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($5 + [-8])
	CALL $61(($3 + [16]), $1)
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)3607819667127140352, *(*($0 + [8])), $8, $2, [56])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$5 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$8 = *(($4 + [8]))
	$9 = *(*(($0 + [8])))
	$10 = *($1)
	*($3 + [40]) = *($1 + [8])
	*($1 + [64]) = CALL db_idx64_store($8, (int_64)3607819667127140352, $9, $10, ($3 + [40]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17706])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17706])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $54($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17706])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17706])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $69(CALL $68($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17303])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [17303])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17492])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $112($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17303])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [17303])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $63(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $116($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $101 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $100($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $103 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $101($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $102 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $102($3, (int_64)0)
	$4 = CALL $104($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_64 .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $103($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $96()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $103($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19505]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $102($0, (int_64)0)
	*(CALL $96()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $103($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $103($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $103($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $103($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19505])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $103($0)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $103($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16901]))
	$8 = (int_64)0
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $103($0)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $103($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19505]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $102($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19505]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19505]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $103($0) + [19505]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $96()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $96()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $96()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $107([16922])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [16922], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $96())
	*(CALL $96()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $105($4, ($3 + [12]), $2)
	$5 = CALL $96()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $90($3)
	
.LABEL $label$1
	CALL $91($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $107($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $85($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $106(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $83 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $116($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17706])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [17706])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [17706])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $69(CALL $68($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17706])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [17706])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $69($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [17706])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [17706])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [17706])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [17706])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [17706])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $116($0)
	
.LABEL $label$1
}

void .FUNC $74 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8192 align=4]) = (int_64)0
	*([0] + [8200]) = [0]
	$0 = CALL $107([16896])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*([0] + [8192]) = ($0 << [1])
	$1 = [8193]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8192]) = ($2 | [1])
	*([0] + [8200]) = $1
	*([0] + [8196]) = $0
	
.LABEL $label$3
	CALL memcpy($1, [16896], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL $98([8], [0], [8192])
	return (unreachable)
	
.LABEL $label$1
	CALL $83([8192])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)3607819667127140352, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [17441])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $20($7, CALL $fimport$10(*($7), *($7 + [8]), (int_64)3607819667127140352, $6))
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$7), [17441])
	
.LABEL $label$2
	*(($4 + [64])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [24]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [88]) = ($4 + [70])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $57(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [70])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $37 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = CALL $107([17905])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17329])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [17904]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17374])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18958])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [19007])
	$6 = *($0)
	*($4 + [104]) = [18951]
	*($4 + [108]) = CALL $107([18951])
	*($4 + [16]) = *($4 + [104])
	$9 = *(CALL $3(($4 + [112]), ($4 + [16])))
	*($4 + [88]) = [17013]
	*($4 + [92]) = CALL $107([17013])
	*($4 + [8]) = *($4 + [88])
	$5 = CALL $3(($4 + [96]), ($4 + [8]))
	*($4 + [72]) = [17026]
	*($4 + [76]) = CALL $107([17026])
	*($4) = *($4 + [72])
	$7 = CALL $3(($4 + [80]), $4)
	*((($4 + [24]) + [24])) = $8
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [24]) = *($0)
	$10 = CALL $84((($4 + [24]) + [32]), $3)
	*($4 + [120]) = *($5)
	*($4 + [128]) = *($7)
	*(($5 = CALL _Znwj([16]))) = $6
	*($5 + [8]) = $9
	*((($4 + [120]) + [36])) = [0]
	$7 = ($5 + [16])
	*((($4 + [120]) + [24])) = $7
	*(($4 + [140])) = $7
	*($4 + [136]) = $5
	*($4 + [148 align=4]) = (int_64)0
	$5 = *($10)
	$7 = ( *((($4 + [24]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [32])
	$6 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [148])
	
.LOOP $label$12:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$12 }
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $54($7, $5)
	$7 = *(($4 + [152]))
	$5 = *(($4 + [148]))
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	$5 = [0]
	
.LABEL $label$13
	*($4 + [180]) = $5
	*($4 + [176]) = $5
	*($4 + [184]) = $7
	*($4 + [160]) = ($4 + [176])
	*($4 + [168]) = ($4 + [24])
	CALL $65(($4 + [168]), ($4 + [160]))
	CALL $66(($4 + [176]), ($4 + [120]))
	$5 = *($4 + [176])
	CALL send_inline($5, (*($4 + [180]) - $5))
	$5 = *($4 + [176])
	if ( ($5 == 0) ){ goto $label$15 }
	*($4 + [180]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$5 = *($4 + [148])
	if ( ($5 == 0) ){ goto $label$16 }
	*(($4 + [152])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *($4 + [136])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($4 + [140])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$18
	$global$0 = ($4 + [192])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $110(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8204])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $110(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [32]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [88]) = ($4 + [70])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $57(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [70])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [40]) = (int_64)0
	*($4 + [72]) = *($1 + [8])
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [64]) = ($4 + [56])
	*($4 + [60]) = $4
	*($4 + [56]) = $4
	CALL $61(($4 + [56]), $1)
	CALL db_update_i64(*($1 + [60]), $2, $4, [56])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [88]) = *(($1 + [8]))
	if ( (CALL $106(($4 + [72]), ($4 + [88]), [8]) == 0) ){ goto $label$2 }
	$6 = ($1 + [64])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607819667127140352, ($4 + [80]), $5)
	*($6) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [88]))
	
.LABEL $label$2
	$global$0 = ($4 + [96])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [49]) = ((int_64)*(*($3)) != (int_64)0)
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [88]) = ($4 + [70])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $57(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [70])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17550])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$18()), [17596])
	*($1 + [16]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [17647])
	*($4 + [88]) = ($4 + [70])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $57(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [70])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}