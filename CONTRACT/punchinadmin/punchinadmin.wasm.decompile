(data (i32.const 8192) "invite error\00")
(data (i32.const 8205) "config error\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8304) "EOS\00")
(data (i32.const 8308) "balance error\00")
(data (i32.const 8322) "amount error\00")
(data (i32.const 8335) "please wait\00")
(data (i32.const 8347) "cant buy anymore\00")
(data (i32.const 8364) "punchin success!!!\00")
(data (i32.const 8383) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8434) "error reading iterator\00")
(data (i32.const 8457) "read\00")
(data (i32.const 8462) "get\00")
(data (i32.const 8466) "string is too long to be a valid symbol_code\00")
(data (i32.const 8511) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8564) "cannot pass end iterator to modify\00")
(data (i32.const 8599) "object passed to modify is not in multi_index\00")
(data (i32.const 8645) "cannot modify objects in table of another contract\00")
(data (i32.const 8696) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8755) "write\00")
(data (i32.const 8761) "cannot create objects in table of another contract\00")
(data (i32.const 8812) "fatal error about reward\00")
(data (i32.const 8837) "eosio.token")
(data (i32.const 8848) "string is too long to be a valid name\00")
(data (i32.const 8886) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8953) "character is not in allowed character set for names\00")
(data (i32.const 9005) "active")
(data (i32.const 9011) "king")
(data (i32.const 9015) "queen")
(data (i32.const 9020) "prince")
(data (i32.const 9026) "abandon\00")
(data (i32.const 9034) "no bonus at term 1.\00")
(data (i32.const 9054) "you already withdraw\00")
(data (i32.const 9075) "you cant withdraw,last term you are not hang up\00")
(data (i32.const 9123) "withdraw amount error bonus\00")
(data (i32.const 9151) "withdraw amount error balance\00")
(data (i32.const 9181) "withdraw success!!!\00")
(data (i32.const 9201) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9250) "invalid symbol name\00")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "is_account" (func $fimport$6 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$11 (param i32 i64 i32 i32)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "abort" (func $fimport$13))
(import "env" "memset" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$16 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$24 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$27 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$28 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$31 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$33 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$34 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$35 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $68))
(export "_Znwj" (func $66))
(export "_Znaj" (func $67))
(export "_ZdaPv" (func $69))
(export "_ZnwjSt11align_val_t" (func $70))
(export "_ZnajSt11align_val_t" (func $71))
(export "_ZdlPvSt11align_val_t" (func $72))
(export "_ZdaPvSt11align_val_t" (func $73))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $2 $4 $6 $7 $9)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17688))
(global $global$2 i32 (i32.const 17688))


void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [32]) = *(*(*($3) + [4]) + [16])
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)*(*($3 + [4])))
	$5 = *($1)
	CALL eosio_assert([1], [8696])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $44(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8462])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $50($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8457])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $49($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $78($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $78($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $74($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1) = *(*(*(*($0 + [4])) + [4]) + [8])
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = (int_64)1
	$3 = *($0)
	CALL eosio_assert([1], [8755])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [8755])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8755])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	$4 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)8236400921739788288, *(*($0 + [8])), $4, $2, [24])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)1)
	$6 = *($1)
	CALL eosio_assert([1], [8696])
	$7 = *($1 + [24])
	$8 = ( *(($1 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($8 + [36])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$4 = CALL $85($7)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $7)
	CALL $65($5, $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $88($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [8761])
	*(($5 = CALL _Znwj([56])) + [40]) = $1
	*($5 + [24]) = (int_64)0
	*($5 + [16]) = *(*(*($3 + [4]) + [4]) + [16])
	*($5) = ((int_64)*(*(*($3) + [4]) + [16]) + (int_64)1)
	*($4 + [72]) = (($4 + [16]) + [40])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $56(($4 + [64]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-5022196381238951936, $2, $6, ($4 + [16]), [40])
	*($5 + [44]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $52(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8457])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $48($0, ($1 + [24]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8457])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8457])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8457])
	CALL memcpy(($1 + [44]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $85($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [96])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $3
	*($4 + [48]) = $3
	*($4 + [56]) = ($3 + $2)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $31(($4 + [16]), ($4 + [144]))
	*(($5 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$5 = *($5)
	*((($4 + [112]) + [8])) = $5
	*(($6 = (($4 + [128]) + [8]))) = $5
	$7 = *($4)
	*($4 + [128]) = $7
	*($4 + [112]) = $7
	$5 = *($6)
	*((($4 + [144]) + [8])) = $5
	*(($4 + [40])) = $5
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [16])
	CALL $32(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$7 }
	$3 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $88($3)
	$3 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [160])
	return $3
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return $3
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [120])) = [0]
	*($2 + [104]) = (int_64)-1
	*($2 + [112]) = (int_64)0
	$4 = *($0)
	*($2 + [88]) = $4
	*($2 + [96]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)4777636407919247360, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $12(($2 + [88]), $5)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)($2 + [88])), [8383])
	*($2 + [84]) = $3
	*($2 + [80]) = ($2 + [88])
	goto $label$1 
	
.LABEL $label$2
	*($2 + [84]) = [0]
	*($2 + [80]) = ($2 + [88])
	
.LABEL $label$1
	*(($2 + [72])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	$4 = *($0)
	*($2 + [40]) = $4
	$1 = *($3 + [8])
	*($2 + [48]) = $1
	$5 = CALL db_find_i64($4, $1, (int_64)-5022196381238951936, *($3 + [16]))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL $13(($2 + [40]), $5)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)($2 + [40])), [8383])
	*($2 + [36]) = $3
	$3 = (*($2 + [84]) + [16])
	*($2 + [32]) = ($2 + [40])
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 + [16])
	*($2 + [36]) = [0]
	*($2 + [32]) = ($2 + [40])
	
.LABEL $label$3
	$4 = ((int_64)*($3) + (int_64)-1)
	$5 = *(($2 + [68]))
	$6 = *(($2 + [64]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$10:
	$3 = ($5 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$9 }
	$5 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($2 + [40])), [8383])
	goto $label$7 
	
.LABEL $label$8
	$3 = CALL db_find_i64(*($2 + [40]), *(($2 + [48])), (int_64)-5022196381238951936, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $13(($2 + [40]), $3)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($2 + [40])), [8383])
	
.LABEL $label$7
	*($2 + [28]) = $7
	*($2 + [24]) = ($2 + [40])
	if ( (*($2 + [36]) == 0) ){ goto $label$5 }
	$3 = *($2 + [36])
	$4 = *($0)
	*($2 + [16]) = ($2 + [24])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8564])
	CALL $39(($2 + [40]), $3, $4, ($2 + [16]))
	goto $label$5 
	
.LABEL $label$6
	*($2 + [28]) = [0]
	*($2 + [24]) = ($2 + [40])
	
.LABEL $label$5
	$4 = *($0)
	*($2 + [20]) = ($2 + [32])
	*($2 + [16]) = ($2 + [80])
	CALL $40(($2 + [8]), ($2 + [40]), $4, ($2 + [16]))
	$4 = *($0)
	$3 = *($2 + [84])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8564])
	CALL $41(($2 + [88]), $3, $4, ($2 + [16]))
	$7 = *($2 + [64])
	if ( ($7 == 0) ){ goto $label$11 }
	$6 = ($2 + [68])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	CALL _ZdlPv($5)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($2 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $7
	
.LABEL $label$12
	*($6) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$7 = *($2 + [112])
	if ( ($7 == 0) ){ goto $label$16 }
	$6 = ($2 + [116])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$21
	CALL _ZdlPv($5)
	
.LABEL $label$20
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($2 + [112]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $7
	
.LABEL $label$17
	*($6) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$global$0 = ($2 + [128])
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL eosio_assert([0], [9026])
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	$7 = ($global$0 - [192])
	$global$0 = $7
	*($7 + [176]) = $1
	*($7 + [184]) = $2
	*($7 + [172]) = $3
	*($7 + [168]) = $4
	*($7 + [164]) = $6
	CALL require_auth(*($0))
	*((($7 + [120]) + [32])) = [0]
	*($7 + [136]) = (int_64)-1
	*($7 + [144]) = (int_64)0
	$1 = *($0)
	*($7 + [120]) = $1
	*($7 + [128]) = $1
	*((($7 + [80]) + [32])) = [0]
	*($7 + [88]) = $2
	*($7 + [80]) = $1
	*($7 + [96]) = (int_64)-1
	*($7 + [104]) = (int_64)0
	*((($7 + [40]) + [32])) = [0]
	*($7 + [48]) = $2
	*($7 + [40]) = $1
	*($7 + [56]) = (int_64)-1
	*($7 + [64]) = (int_64)0
	*($7 + [24]) = $5
	*($7 + [20]) = ($7 + [172])
	*($7 + [16]) = ($7 + [176])
	*($7 + [28]) = ($7 + [164])
	*($7 + [32]) = ($7 + [184])
	*($7 + [36]) = ($7 + [168])
	CALL $33(($7 + [8]), ($7 + [120]), $1, ($7 + [16]))
	CALL $34(($7 + [16]), ($7 + [80]), *($0), ($7 + [8]))
	CALL $35(($7 + [16]), ($7 + [40]), *($0), ($7 + [8]))
	$6 = *($7 + [64])
	if ( ($6 == 0) ){ goto $label$1 }
	$4 = ($7 + [68])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL _ZdlPv($5)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($7 + [64]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $6
	
.LABEL $label$2
	*($4) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$6 = *($7 + [104])
	if ( ($6 == 0) ){ goto $label$6 }
	$4 = ($7 + [108])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($7 + [104]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $6
	
.LABEL $label$7
	*($4) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$6 = *($7 + [144])
	if ( ($6 == 0) ){ goto $label$11 }
	$4 = ($7 + [148])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$16
	CALL _ZdlPv($5)
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$14 }
	$0 = *(($7 + [144]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $6
	
.LABEL $label$12
	*($4) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$global$0 = ($7 + [192])
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [352])
	$global$0 = $3
	CALL require_auth($2)
	$4 = [0]
	*((($3 + [248]) + [32])) = [0]
	*($3 + [264]) = (int_64)-1
	*($3 + [272]) = (int_64)0
	$5 = *($0)
	*($3 + [248]) = $5
	*($3 + [256]) = $5
	*((($3 + [208]) + [32])) = [0]
	*($3 + [216]) = $2
	*($3 + [208]) = $5
	*($3 + [224]) = (int_64)-1
	*($3 + [232]) = (int_64)0
	*((($3 + [168]) + [32])) = [0]
	*($3 + [176]) = $2
	*($3 + [168]) = $5
	*($3 + [184]) = (int_64)-1
	*($3 + [192]) = (int_64)0
	$6 = CALL db_find_i64($5, $5, (int_64)4777636407919247360, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL $12(($3 + [248]), $6)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($3 + [248])), [8383])
	
.LABEL $label$1
	*($3 + [164]) = $4
	*($3 + [160]) = ($3 + [248])
	*(($3 + [152])) = [0]
	*($3 + [144]) = (int_64)0
	$5 = *($0)
	*($3 + [120]) = $5
	$1 = *($4 + [8])
	*($3 + [128]) = $1
	*($3 + [136]) = (int_64)-1
	$4 = CALL db_find_i64($5, $1, (int_64)-5022196381238951936, ((int_64)*($4 + [16]) + (int_64)-1))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL $13(($3 + [120]), $4)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)($3 + [120])), [8383])
	*($3 + [116]) = $4
	*($3 + [112]) = ($3 + [120])
	goto $label$2 
	
.LABEL $label$3
	*($3 + [116]) = [0]
	*($3 + [112]) = ($3 + [120])
	
.LABEL $label$2
	$5 = *(*($3 + [164]) + [16])
	$6 = *(($3 + [148]))
	$7 = *(($3 + [144]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$6 }
	$6 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($3 + [120])), [8383])
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	$4 = CALL db_find_i64(*($3 + [120]), *(($3 + [128])), (int_64)-5022196381238951936, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $13(($3 + [120]), $4)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)($3 + [120])), [8383])
	
.LABEL $label$4
	$5 = *(*($3 + [164]) + [8])
	$6 = *(($3 + [236]))
	$7 = *(($3 + [232]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$11:
	$4 = ($6 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$10 }
	$6 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)($3 + [208])), [8383])
	*($3 + [108]) = $9
	*($3 + [104]) = ($3 + [208])
	goto $label$8 
	
.LABEL $label$9
	$4 = CALL db_find_i64(*($3 + [208]), *(($3 + [216])), (int_64)3624714903312400384, $5)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$12 }
	$4 = CALL $14(($3 + [208]), $4)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($3 + [208])), [8383])
	*($3 + [108]) = $4
	*($3 + [104]) = ($3 + [208])
	goto $label$8 
	
.LABEL $label$12
	*($3 + [108]) = [0]
	*($3 + [104]) = ($3 + [208])
	
.LABEL $label$8
	$5 = *(*($3 + [164]) + [8])
	$6 = *(($3 + [196]))
	$9 = *(($3 + [192]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$14 }
	
.LOOP $label$16:
	$4 = ($6 + [-24])
	$7 = *($4)
	if ( ((int_64)*($7) == (int_64)$5) ){ goto $label$15 }
	$6 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$14 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [168])), [8383])
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	$4 = CALL db_find_i64(*($3 + [168]), *(($3 + [176])), (int_64)8236400921739788288, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$7 = CALL $15(($3 + [168]), $4)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($3 + [168])), [8383])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)*($3 + [116]) != (int_32)[0]), [9034])
	CALL eosio_assert(((int_64)*(*($3 + [108]) + [8]) != (int_64)0), [9054])
	CALL eosio_assert((int_64)(*(*($3 + [108]) + [32]) == 0), [9054])
	CALL eosio_assert(((int_64)((int_64)*(*($3 + [108]) + [8]) + (int_64)1) == (int_64)*(*($3 + [164]) + [16])), [9075])
	$5 = (int_64)0
	if ( ($7 == 0) ){ goto $label$17 }
	$5 = ((int_64)*($7 + [16]) * (int_64)10000)
	
.LABEL $label$17
	$4 = *($3 + [116])
	$1 = *($4 + [8])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$21 }
	$6 = *($3 + [108])
	$10 = (CASTING float_32)(uint_64 ((uint_64)((int_64)((int_64)((int_64)*($6 + [16]) + (int_64)$5) + (int_64)((int_64)*($6 + [24]) * (int_64)10000)) * (int_64)$1) / (uint_64)*($4 + [24])))
	if ( ((float_32)(float_32)|$10| < (float_32)(float_32)9223372036854775808) ){ goto $label$20 }
	$5 = (int_64)-9223372036854775808
	goto $label$19 
	
.LABEL $label$21
	*($3 + [96]) = (int_64)0
	goto $label$18 
	
.LABEL $label$20
	$5 = (Rounds 0)($10)
	
.LABEL $label$19
	*($3 + [96]) = $5
	CALL eosio_assert(((uint_64)$1 >= (uint_64)$5), [9123])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($3 + [96]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9151])
	
.LABEL $label$18
	$4 = *($3 + [116])
	$5 = *($0)
	*($3 + [292]) = ($3 + [96])
	*($3 + [288]) = ($3 + [104])
	*($3 + [296]) = ($3 + [112])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8564])
	CALL $36(($3 + [120]), $4, $5, ($3 + [288]))
	$5 = *($0)
	*($3 + [292]) = ($3 + [96])
	*($3 + [288]) = ($3 + [104])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8564])
	CALL $37(($3 + [120]), $8, $5, ($3 + [288]))
	$4 = CALL $82([8304])
	if ( ($4 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [8466])
	goto $label$24 
	
.LABEL $label$25
	if ( ($4 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$5 = (int_64)0
	
.LOOP $label$26:
	$6 = *(($4 + [8303]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [8511])
	
.LABEL $label$27
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$26 }
	$1 = ((int_64)$5 << (int_64)8)
	goto $label$22 
	
.LABEL $label$23
	$1 = (int_64)0
	
.LABEL $label$22
	CALL eosio_assert([1], [9201])
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	$11 = ((int_64)$1 | (int_64)4)
	$4 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$1 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$5 = $1
	$6 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$5 = $1
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $6 ){ goto $label$32 }
	$6 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$6 = [0]
	
.LABEL $label$28
	CALL eosio_assert($6, [9250])
	$5 = ((int_64)*($3 + [96]) + (int_64)*(*($3 + [108]) + [16]))
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9201])
	$4 = *($3 + [108])
	*($3 + [292]) = ($3 + [96])
	*($3 + [288]) = ($3 + [160])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8564])
	CALL $38(($3 + [208]), $4, $2, ($3 + [288]))
	*($3 + [52]) = [11]
	*($3 + [48]) = [8837]
	*($3 + [24]) = *($3 + [48])
	$1 = *(CALL $29(($3 + [288]), ($3 + [24])))
	$12 = *($0)
	*($3 + [52]) = [6]
	*($3 + [48]) = [9005]
	*($3 + [16]) = *($3 + [48])
	*($3 + [56]) = *(CALL $29(($3 + [288]), ($3 + [16])))
	*($3 + [48]) = $12
	*($3 + [340]) = [6]
	*($3 + [336]) = [9005]
	*($3 + [8]) = *($3 + [336])
	*(($6 = (($3 + [48]) + [24]))) = *(CALL $29(($3 + [288]), ($3 + [8])))
	*($3 + [64]) = $2
	*(($4 = CALL _Znwj([32]))) = *($3 + [48])
	*(($4 + [8])) = *($3 + [56])
	*($4 + [16]) = *($3 + [64])
	*(($4 + [24])) = *($6)
	*($3 + [80]) = $4
	$4 = ($4 + [32])
	*($3 + [88]) = $4
	*($3 + [84]) = $4
	*((($3 + [32]) + [8])) = [0]
	*($3 + [32]) = (int_64)0
	$4 = CALL $82([9181])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$36 }
	*($3 + [32]) = ($4 << [1])
	$6 = (($3 + [32]) | [1])
	if ( $4 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$8 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($3 + [32]) = ($8 | [1])
	*($3 + [40]) = $6
	*($3 + [36]) = $4
	
.LABEL $label$35
	CALL memcpy($6, [9181], $4)
	
.LABEL $label$34
	*(($6 + $4)) = [0]
	$12 = *($3 + [32])
	*($3 + [32]) = (int_64)0
	$4 = *($3 + [40])
	*($3 + [40]) = [0]
	$13 = *($0)
	*(($3 + [312])) = $11
	*(($8 = ($3 + [328]))) = $4
	$4 = ($3 + [88])
	$6 = *($4)
	*($4) = [0]
	*($3 + [288]) = $13
	*($3 + [296]) = $2
	*($3 + [304]) = $5
	*($3 + [320]) = $12
	*($3 + [336]) = *($3 + [80])
	*($3 + [344]) = $6
	*($3 + [80]) = (int_64)0
	CALL $30($1, (int_64)-3617168760277827584, ($3 + [336]), ($3 + [288]))
	if ( ((*($3 + [320]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$37
	$4 = *($3 + [336])
	if ( ($4 == 0) ){ goto $label$38 }
	*($3 + [340]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$38
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$39
	$8 = *($3 + [144])
	if ( ($8 == 0) ){ goto $label$40 }
	$7 = ($3 + [148])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$42 }
	
.LOOP $label$43:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$44 }
	CALL _ZdlPv($6)
	
.LABEL $label$44
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$43 }
	$4 = *(($3 + [144]))
	goto $label$41 
	
.LABEL $label$42
	$4 = $8
	
.LABEL $label$41
	*($7) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$40
	$8 = *($3 + [192])
	if ( ($8 == 0) ){ goto $label$45 }
	$7 = ($3 + [196])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$47 }
	
.LOOP $label$48:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$49 }
	CALL _ZdlPv($6)
	
.LABEL $label$49
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$48 }
	$4 = *(($3 + [192]))
	goto $label$46 
	
.LABEL $label$47
	$4 = $8
	
.LABEL $label$46
	*($7) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$45
	$8 = *($3 + [232])
	if ( ($8 == 0) ){ goto $label$50 }
	$7 = ($3 + [236])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$52 }
	
.LOOP $label$53:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$54 }
	CALL _ZdlPv($6)
	
.LABEL $label$54
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$53 }
	$4 = *(($3 + [232]))
	goto $label$51 
	
.LABEL $label$52
	$4 = $8
	
.LABEL $label$51
	*($7) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$50
	$8 = *($3 + [272])
	if ( ($8 == 0) ){ goto $label$55 }
	$7 = ($3 + [276])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$57 }
	
.LOOP $label$58:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$59 }
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$60 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$60
	CALL _ZdlPv($6)
	
.LABEL $label$59
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$58 }
	$4 = *(($3 + [272]))
	goto $label$56 
	
.LABEL $label$57
	$4 = $8
	
.LABEL $label$56
	*($7) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$55
	$global$0 = ($3 + [352])
	return (unreachable)
	
.LABEL $label$33
	CALL $74(($3 + [32]))
}

int_32 .FUNC $5 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8457])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8457])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $88($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [480])
	$global$0 = $5
	*($5 + [408]) = $2
	CALL require_auth($2)
	*(($5 + [400])) = [0]
	*($5 + [384]) = (int_64)-1
	*($5 + [392]) = (int_64)0
	$6 = *($0)
	*($5 + [368]) = $6
	*($5 + [376]) = $6
	$7 = CALL db_find_i64($6, $6, (int_64)4777636407919247360, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL $12(($5 + [368]), $7)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($5 + [368])), [8383])
	*($5 + [364]) = $7
	$8 = (($5 + [360]) | [4])
	$2 = *($5 + [408])
	goto $label$1 
	
.LABEL $label$2
	*($5 + [364]) = [0]
	$8 = (($5 + [360]) | [4])
	
.LABEL $label$1
	*($5 + [360]) = ($5 + [368])
	CALL eosio_assert(((int_64)$2 != (int_64)$3), [8192])
	CALL eosio_assert(((int_32)*($5 + [364]) != (int_32)[0]), [8205])
	$7 = CALL $82([8304])
	if ( ($7 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8466])
	goto $label$5 
	
.LABEL $label$6
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$2 = (int_64)0
	
.LOOP $label$7:
	$9 = *(($7 + [8303]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [8511])
	
.LABEL $label$8
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$3 
	
.LABEL $label$4
	$2 = (int_64)0
	
.LABEL $label$3
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)((int_64)$2 | (int_64)4)), [8308])
	CALL eosio_assert(((int_64)*($4) < (int_64)100001), [8322])
	CALL eosio_assert(((int_64)*($4) > (int_64)9999), [8322])
	$2 = CALL current_time()
	$9 = *($7 + [40])
	$7 = *($8)
	CALL eosio_assert(((uint_64)((int_64)((int_64)((int_64)((int_64)*($7 + [16]) + (int_64)-1) * (int_64)(CASTING uint_64)(uint_32 $9)) + (int_64)*($7 + [36])) + (int_64)(CASTING uint_64)(uint_32 ((uint_32)$9 / (uint_32)*($7 + [44])))) > (uint_64)((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8335])
	$2 = CALL current_time()
	$7 = *($8)
	CALL eosio_assert((uint_64)(((int_64)((int_64)((int_64)*($7 + [16]) + (int_64)-1) * (int_64)*($7 + [40])) + (int_64)*($7 + [36])) <= ((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8335])
	*((($5 + [320]) + [32])) = [0]
	*($5 + [336]) = (int_64)-1
	*($5 + [344]) = (int_64)0
	$2 = *($0)
	*($5 + [320]) = $2
	$7 = *($8)
	$6 = *($7 + [8])
	*($5 + [328]) = $6
	*((($5 + [280]) + [32])) = [0]
	*($5 + [280]) = $2
	*($5 + [296]) = (int_64)-1
	*($5 + [304]) = (int_64)0
	$1 = *($5 + [408])
	*($5 + [288]) = $1
	*((($5 + [240]) + [32])) = [0]
	*($5 + [248]) = $1
	*($5 + [240]) = $2
	*($5 + [256]) = (int_64)-1
	*($5 + [264]) = (int_64)0
	*((($5 + [200]) + [32])) = [0]
	*($5 + [208]) = $6
	*($5 + [200]) = $2
	*($5 + [216]) = (int_64)-1
	*($5 + [224]) = (int_64)0
	$7 = CALL db_find_i64($2, $6, (int_64)-5022196381238951936, *($7 + [16]))
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL $13(($5 + [320]), $7)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($5 + [320])), [8383])
	*($5 + [196]) = $7
	*($5 + [192]) = ($5 + [320])
	goto $label$9 
	
.LABEL $label$10
	*($5 + [196]) = [0]
	*($5 + [192]) = ($5 + [320])
	
.LABEL $label$9
	$2 = ((int_64)*(*($8) + [16]) + (int_64)-1)
	$9 = *(($5 + [348]))
	$10 = *(($5 + [344]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$12 }
	
.LOOP $label$14:
	$7 = ($9 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$13 }
	$9 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($5 + [320])), [8383])
	*($5 + [188]) = $11
	*($5 + [184]) = ($5 + [320])
	goto $label$11 
	
.LABEL $label$12
	$7 = CALL db_find_i64(*($5 + [320]), *(($5 + [328])), (int_64)-5022196381238951936, $2)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$15 }
	$7 = CALL $13(($5 + [320]), $7)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($5 + [320])), [8383])
	*($5 + [188]) = $7
	*($5 + [184]) = ($5 + [320])
	goto $label$11 
	
.LABEL $label$15
	*($5 + [188]) = [0]
	*($5 + [184]) = ($5 + [320])
	
.LABEL $label$11
	$2 = *(*($8) + [8])
	$9 = *(($5 + [308]))
	$10 = *(($5 + [304]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$17 }
	
.LOOP $label$19:
	$7 = ($9 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$18 }
	$9 = $7
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)($5 + [280])), [8383])
	*($5 + [180]) = $11
	*($5 + [176]) = ($5 + [280])
	goto $label$16 
	
.LABEL $label$17
	$7 = CALL db_find_i64(*($5 + [280]), *(($5 + [288])), (int_64)3624714903312400384, $2)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$20 }
	$7 = CALL $14(($5 + [280]), $7)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($5 + [280])), [8383])
	*($5 + [180]) = $7
	*($5 + [176]) = ($5 + [280])
	goto $label$16 
	
.LABEL $label$20
	*($5 + [180]) = [0]
	*($5 + [176]) = ($5 + [280])
	
.LABEL $label$16
	$2 = *(*($8) + [8])
	$9 = *(($5 + [268]))
	$11 = *(($5 + [264]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$22 }
	
.LOOP $label$24:
	$7 = ($9 + [-24])
	$10 = *($7)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$23 }
	$9 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$22 }
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($5 + [240])), [8383])
	goto $label$21 
	
.LABEL $label$22
	$10 = [0]
	$7 = CALL db_find_i64(*($5 + [240]), *(($5 + [248])), (int_64)8236400921739788288, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$21 }
	$10 = CALL $15(($5 + [240]), $7)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)($5 + [240])), [8383])
	
.LABEL $label$21
	$9 = *(($5 + [228]))
	$11 = *(($5 + [224]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$26 }
	
.LOOP $label$28:
	$7 = ($9 + [-24])
	$12 = *($7)
	if ( (int_64)(*($12) == 0) ){ goto $label$27 }
	$9 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*($12 + [128]) == (int_32)($5 + [200])), [8383])
	*($5 + [172]) = $12
	*($5 + [168]) = ($5 + [200])
	goto $label$25 
	
.LABEL $label$26
	$7 = CALL db_find_i64(*($5 + [200]), *(($5 + [208])), (int_64)-9057421647362916352, (int_64)0)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$29 }
	$7 = CALL $16(($5 + [200]), $7)
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)($5 + [200])), [8383])
	*($5 + [172]) = $7
	*($5 + [168]) = ($5 + [200])
	goto $label$25 
	
.LABEL $label$29
	*($5 + [172]) = [0]
	*($5 + [168]) = ($5 + [200])
	
.LABEL $label$25
	$2 = *($4)
	*($5 + [160]) = $2
	$6 = (int_64)1
	*($5 + [152]) = (int_64)1
	$1 = (int_64)0
	*($5 + [144]) = (int_64)0
	*($5 + [136]) = $2
	*($5 + [128]) = (int_64)1
	*($5 + [120]) = (int_64)0
	$7 = *($5 + [180])
	if ( ($7 == 0) ){ goto $label$30 }
	$6 = (int_64)1
	if ( ((int_64)((int_64)*($7 + [8]) + (int_64)1) != (int_64)*(*($8) + [16])) ){ goto $label$30 }
	$6 = ((int_64)*($7 + [24]) + (int_64)1)
	*($5 + [152]) = $6
	$2 = ((int_64)*($7 + [16]) + (int_64)$2)
	*($5 + [160]) = $2
	
.LABEL $label$30
	if ( ($10 == 0) ){ goto $label$31 }
	*($5 + [144]) = ((int_64)*($10 + [16]) + (int_64)*($10 + [8]))
	$2 = *($0)
	*($5 + [416]) = ($5 + [144])
	CALL eosio_assert([1], [8564])
	CALL $17(($5 + [240]), $10, $2, ($5 + [416]))
	$1 = *($5 + [144])
	$6 = *($5 + [152])
	$2 = *($5 + [160])
	
.LABEL $label$31
	*($5 + [112]) = ((int_64)((int_64)((int_64)$1 + (int_64)$6) * (int_64)10000) + (int_64)$2)
	$2 = *($0)
	$7 = *($5 + [196])
	*($5 + [416]) = $4
	*($5 + [420]) = ($5 + [112])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8564])
	CALL $18(($5 + [320]), $7, $2, ($5 + [416]))
	$7 = *($5 + [180])
	if ( ($7 == 0) ){ goto $label$37 }
	$6 = *(*($8) + [16])
	$2 = ((int_64)*($7 + [8]) + (int_64)1)
	if ( ((int_64)$2 != (int_64)$6) ){ goto $label$39 }
	if ( (*($5 + [188]) == 0) ){ goto $label$38 }
	$7 = *($5 + [188])
	$2 = *($0)
	*($5 + [420]) = ($5 + [184])
	*($5 + [416]) = ($5 + [176])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8564])
	CALL $19(($5 + [320]), $7, $2, ($5 + [416]))
	$2 = ((int_64)*(*($5 + [180]) + [8]) + (int_64)1)
	$6 = *(*($8) + [16])
	
.LABEL $label$39
	if ( ((int_64)$2 != (int_64)$6) ){ goto $label$36 }
	
.LABEL $label$38
	$2 = *($5 + [408])
	$7 = *($5 + [180])
	*($5 + [416]) = $4
	*($5 + [420]) = ($5 + [360])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8564])
	CALL $20(($5 + [280]), $7, $2, ($5 + [416]))
	goto $label$32 
	
.LABEL $label$37
	if ( (CALL is_account($3) == 0) ){ goto $label$33 }
	*(($5 + [448])) = [0]
	*($5 + [432]) = (int_64)-1
	*($5 + [440]) = (int_64)0
	*($5 + [120]) = (int_64)1
	$2 = *($0)
	*($5 + [416]) = $2
	*($5 + [424]) = $3
	$7 = CALL db_find_i64($2, $3, (int_64)8236400921739788288, *(*($8) + [8]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$35 }
	$7 = CALL $15(($5 + [416]), $7)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)($5 + [416])), [8383])
	$2 = *($0)
	CALL eosio_assert([1], [8564])
	CALL $21(($5 + [416]), $7, $2, ($5 + [64]))
	$10 = *($5 + [440])
	if ( $10 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	if ( ((uint_64)$2 >= (uint_64)$6) ){ goto $label$40 }
	$2 = *($5 + [408])
	$7 = *($5 + [180])
	*($5 + [416]) = $4
	*($5 + [420]) = ($5 + [360])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8564])
	CALL $22(($5 + [280]), $7, $2, ($5 + [416]))
	CALL eosio_assert(((uint_64)*(*($5 + [172]) + [104]) >= (uint_64)*(*($5 + [180]) + [24])), [8347])
	CALL eosio_assert(((uint_64)*(*($5 + [172]) + [112]) >= (uint_64)*(*($5 + [180]) + [16])), [8347])
	$7 = *($5 + [180])
	*($5 + [128]) = (int_64))(*($5 + [128]) - *($7 + [24]))
	*($5 + [136]) = (int_64))(*($5 + [136]) - *($7 + [16]))
	goto $label$32 
	
.LABEL $label$40
	CALL eosio_assert([0], [8347])
	goto $label$32 
	
.LABEL $label$35
	$2 = *($0)
	*($5 + [464]) = ($5 + [360])
	CALL $23(($5 + [64]), ($5 + [416]), $2, ($5 + [464]))
	$10 = *($5 + [440])
	if ( ($10 == 0) ){ goto $label$33 }
	
.LABEL $label$34
	$11 = ($5 + [444])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$42 }
	
.LOOP $label$43:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$44 }
	CALL _ZdlPv($9)
	
.LABEL $label$44
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$43 }
	$7 = *(($5 + [440]))
	goto $label$41 
	
.LABEL $label$42
	$7 = $10
	
.LABEL $label$41
	*($11) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$33
	$2 = *($0)
	*($5 + [420]) = $4
	*($5 + [416]) = ($5 + [360])
	*($5 + [424]) = ($5 + [192])
	CALL $24(($5 + [64]), ($5 + [280]), $2, ($5 + [416]))
	
.LABEL $label$32
	$7 = *($5 + [172])
	$2 = ((int_64)((int_64)((int_64)*($5 + [144]) + (int_64)*($5 + [152])) * (int_64)10000) + (int_64)*($5 + [160]))
	if ( ((uint_64)$2 <= (uint_64)((int_64)((int_64)((int_64)*($7 + [24]) + (int_64)*($7 + [16])) * (int_64)10000) + (int_64)*($7 + [32]))) ){ goto $label$46 }
	$7 = *($5 + [172])
	$2 = *($0)
	*($5 + [420]) = ($5 + [160])
	*($5 + [416]) = ($5 + [168])
	*($5 + [424]) = ($5 + [152])
	*($5 + [428]) = ($5 + [144])
	*($5 + [432]) = ($5 + [408])
	*($5 + [436]) = ($5 + [128])
	*($5 + [440]) = ($5 + [136])
	*($5 + [444]) = ($5 + [120])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8564])
	CALL $25(($5 + [200]), $7, $2, ($5 + [416]))
	goto $label$45 
	
.LABEL $label$46
	if ( ((uint_64)$2 <= (uint_64)((int_64)((int_64)((int_64)*($7 + [56]) + (int_64)*($7 + [48])) * (int_64)10000) + (int_64)*($7 + [64]))) ){ goto $label$47 }
	$7 = *($5 + [172])
	$2 = *($0)
	*($5 + [420]) = ($5 + [160])
	*($5 + [416]) = ($5 + [168])
	*($5 + [424]) = ($5 + [152])
	*($5 + [428]) = ($5 + [144])
	*($5 + [432]) = ($5 + [408])
	*($5 + [436]) = ($5 + [128])
	*($5 + [440]) = ($5 + [136])
	*($5 + [444]) = ($5 + [120])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8564])
	CALL $26(($5 + [200]), $7, $2, ($5 + [416]))
	goto $label$45 
	
.LABEL $label$47
	$6 = *($0)
	$9 = *($5 + [172])
	if ( ((uint_64)$2 <= (uint_64)((int_64)((int_64)((int_64)*($7 + [88]) + (int_64)*($7 + [80])) * (int_64)10000) + (int_64)*($7 + [96]))) ){ goto $label$48 }
	*($5 + [420]) = ($5 + [152])
	*($5 + [416]) = ($5 + [160])
	*($5 + [424]) = ($5 + [144])
	*($5 + [428]) = ($5 + [408])
	*($5 + [432]) = ($5 + [128])
	*($5 + [436]) = ($5 + [136])
	*($5 + [440]) = ($5 + [120])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8564])
	CALL $27(($5 + [200]), $9, $6, ($5 + [416]))
	goto $label$45 
	
.LABEL $label$48
	*($5 + [420]) = ($5 + [136])
	*($5 + [416]) = ($5 + [128])
	*($5 + [424]) = ($5 + [120])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8564])
	CALL $28(($5 + [200]), $9, $6, ($5 + [416]))
	
.LABEL $label$45
	*($5 + [68]) = [11]
	*($5 + [64]) = [8837]
	*($5 + [24]) = *($5 + [64])
	$2 = *(CALL $29(($5 + [416]), ($5 + [24])))
	$6 = *($5 + [408])
	*($5 + [68]) = [6]
	*($5 + [64]) = [9005]
	*($5 + [16]) = *($5 + [64])
	*($5 + [72]) = *(CALL $29(($5 + [416]), ($5 + [16])))
	*($5 + [64]) = $6
	$6 = *($0)
	*($5 + [468]) = [6]
	*($5 + [464]) = [9005]
	*($5 + [8]) = *($5 + [464])
	*(($9 = (($5 + [64]) + [24]))) = *(CALL $29(($5 + [416]), ($5 + [8])))
	*($5 + [80]) = $6
	*(($7 = CALL _Znwj([32]))) = *($5 + [64])
	*(($7 + [8])) = *($5 + [72])
	*($7 + [16]) = *($5 + [80])
	*(($7 + [24])) = *($9)
	*($5 + [96]) = $7
	$7 = ($7 + [32])
	*($5 + [104]) = $7
	*($5 + [100]) = $7
	*((($5 + [32]) + [8])) = [0]
	*($5 + [32]) = (int_64)0
	$7 = CALL $82([8364])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$49 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$52 }
	*($5 + [32]) = ($7 << [1])
	$9 = (($5 + [32]) | [1])
	if ( $7 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$10 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($5 + [32]) = ($10 | [1])
	*($5 + [40]) = $9
	*($5 + [36]) = $7
	
.LABEL $label$51
	CALL memcpy($9, [8364], $7)
	
.LABEL $label$50
	*(($9 + $7)) = [0]
	*(($7 = (($5 + [48]) + [8]))) = *(($4 + [8]))
	*($5 + [48]) = *($4)
	$9 = *($5 + [40])
	*($5 + [40]) = [0]
	$6 = *($5 + [32])
	*($5 + [32]) = (int_64)0
	$3 = *($0)
	$1 = *($5 + [408])
	*(($11 = ($5 + [456]))) = $9
	$9 = (($5 + [96]) + [8])
	$10 = *($9)
	*($9) = [0]
	*(($5 + [440])) = *($7)
	*($5 + [416]) = $1
	*($5 + [424]) = $3
	*($5 + [448]) = $6
	*($5 + [464]) = *($5 + [96])
	*($5 + [472]) = $10
	*($5 + [96]) = (int_64)0
	*($5 + [432]) = *($5 + [48])
	CALL $30($2, (int_64)-3617168760277827584, ($5 + [464]), ($5 + [416]))
	if ( ((*($5 + [448]) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$53
	$7 = *($5 + [464])
	if ( ($7 == 0) ){ goto $label$54 }
	*($5 + [468]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$54
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$55 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$55
	$10 = *($5 + [224])
	if ( ($10 == 0) ){ goto $label$56 }
	$11 = ($5 + [228])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$58 }
	
.LOOP $label$59:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$60 }
	CALL _ZdlPv($9)
	
.LABEL $label$60
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$59 }
	$7 = *(($5 + [224]))
	goto $label$57 
	
.LABEL $label$58
	$7 = $10
	
.LABEL $label$57
	*($11) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$56
	$10 = *($5 + [264])
	if ( ($10 == 0) ){ goto $label$61 }
	$11 = ($5 + [268])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$63 }
	
.LOOP $label$64:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$65 }
	CALL _ZdlPv($9)
	
.LABEL $label$65
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$64 }
	$7 = *(($5 + [264]))
	goto $label$62 
	
.LABEL $label$63
	$7 = $10
	
.LABEL $label$62
	*($11) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$61
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$66 }
	$11 = ($5 + [308])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$68 }
	
.LOOP $label$69:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$70 }
	CALL _ZdlPv($9)
	
.LABEL $label$70
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$69 }
	$7 = *(($5 + [304]))
	goto $label$67 
	
.LABEL $label$68
	$7 = $10
	
.LABEL $label$67
	*($11) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$66
	$10 = *($5 + [344])
	if ( ($10 == 0) ){ goto $label$71 }
	$11 = ($5 + [348])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$73 }
	
.LOOP $label$74:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$75 }
	CALL _ZdlPv($9)
	
.LABEL $label$75
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$74 }
	$7 = *(($5 + [344]))
	goto $label$72 
	
.LABEL $label$73
	$7 = $10
	
.LABEL $label$72
	*($11) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$71
	$10 = *($5 + [392])
	if ( ($10 == 0) ){ goto $label$76 }
	$11 = ($5 + [396])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$78 }
	
.LOOP $label$79:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$80 }
	if ( ((*($9 + [24]) & [1]) == 0) ){ goto $label$81 }
	CALL _ZdlPv(*(($9 + [32])))
	
.LABEL $label$81
	CALL _ZdlPv($9)
	
.LABEL $label$80
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$79 }
	$7 = *(($5 + [392]))
	goto $label$77 
	
.LABEL $label$78
	$7 = $10
	
.LABEL $label$77
	*($11) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$76
	$global$0 = ($5 + [480])
	return (unreachable)
	
.LABEL $label$49
	CALL $74(($5 + [32]))
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [120]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $7)
	*($4 + [160]) = ($4 + [72])
	*($4 + [40]) = ($4 + [88])
	CALL $11(($4 + [40]), ($4 + [160]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [80])
	*($4 + [24]) = *($4 + [72])
	$10 = *($9)
	*(($3 = (($4 + [128]) + [8]))) = $10
	*(($9 = (($4 + [144]) + [8]))) = $10
	$11 = *($4 + [24])
	*($4 + [144]) = $11
	*($4 + [128]) = $11
	$10 = *($9)
	*((($4 + [160]) + [8])) = $10
	*(($4 + [64])) = $10
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$0 = *($4 + [144])
	*($4 + [56]) = $0
	*($4 + [160]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [112])
	$0 = *($4 + [104])
	$1 = *($4 + [96])
	$11 = *($4 + [88])
	*($9) = *($3)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$12 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $12
	*((($4 + [8]) + [8])) = $12
	$12 = *($4 + [144])
	*($4 + [8]) = $12
	*($4 + [160]) = $12
	CALL void $3((int_32 $11), (int_64 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $88($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)3849248711990637055) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)3849248711990637056) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)9015414805623734272) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3) = *($3 + [72])
	CALL $3($1, $1, $3)
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$2 == (int_64)-3841816772751654912) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$1 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3 + [24]) = *($3 + [48])
	CALL $5($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3 + [16]) = *($3 + [56])
	CALL $5($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [8]) = *($3 + [64])
	CALL $8($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [44]) = [0]
	*($3 + [40]) = [5]
	*($3 + [32]) = *($3 + [40])
	CALL $10($1, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $81([0])
	$global$0 = ($3 + [80])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8434])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $85($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	*($5) = (int_64)0
	CALL $53(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $45(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $88($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8434])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $85($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8457])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8457])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8457])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $88($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8434])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $85($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([144])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [128]) = $0
	CALL $54(($3 + [32]), $5)
	*($5 + [132]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $55(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $88($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	*($1 + [16]) = *(*($3))
	*($1 + [8]) = (int_64)0
	$5 = *($1)
	CALL eosio_assert([1], [8696])
	CALL eosio_assert([1], [8755])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8755])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8755])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8457])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $88($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8457])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8457])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8457])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8457])
	CALL memcpy(($4 + [24]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [8457])
	CALL memcpy(($2 + [8]), *($1 + [4]), [8])
	*(($4 + [32])) = *($2 + [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8434])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $85($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = [0]
	*($5 + [48]) = $0
	CALL $46(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $47(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $88($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8434])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $85($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	CALL $51(($3 + [32]), $5)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $52(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $88($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3 + [4])))
	$5 = *($1)
	CALL eosio_assert([1], [8696])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $56(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	$5 = *($1)
	CALL eosio_assert(((uint_64)*(*(*($3) + [4]) + [16]) <= (uint_64)*(*(*($3 + [4]) + [4]) + [16])), [8812])
	*($1 + [16]) = (int_64))(*($1 + [16]) - *(*(*($3) + [4]) + [16]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [8696])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $56(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8755])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8755])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8755])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8755])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $60(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $50($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8755])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8755])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $62(CALL $61($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $79($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8457])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8457])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8457])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8457])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [8761])
	*(($5 = CALL _Znwj([56])) + [40]) = $1
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)1
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($4 + [72]) = (($4 + [16]) + [40])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $56(($4 + [64]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-5022196381238951936, $2, $6, ($4 + [16]), [40])
	*($5 + [44]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($9 + [8]) = $6
	*($9 + [16]) = $7
	*($4 + [64]) = [0]
	*($9) = $5
	*($8) = ($9 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $52(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [8761])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([144])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [128]) = $1
	CALL $64(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [132])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $55(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8848])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8953])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8886])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8953])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	*($1 + [104]) = ((int_64)*($1 + [104]) + (int_64)*(*($3)))
	*($1 + [112]) = ((int_64)*($1 + [112]) + (int_64)*(*($3 + [4])))
	*($1 + [120]) = ((int_64)*($1 + [120]) + (int_64)*(*($3 + [8])))
	$5 = *($1)
	CALL eosio_assert([1], [8696])
	*($4 + [136]) = ($4 + [128])
	*($4 + [132]) = $4
	*($4 + [128]) = $4
	CALL $57(($4 + [128]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $4, [128])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$5 = *($1)
	CALL eosio_assert([1], [8696])
	CALL eosio_assert([1], [8755])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8755])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [8755])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)1)
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	*($1 + [8]) = *(*(*($3 + [4]) + [4]) + [16])
	$5 = *($1)
	CALL eosio_assert([1], [8696])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $44(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [8761])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	*($3) = (int_64)0
	CALL $42(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $43(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	*($1 + [24]) = (int_64)1
	*($1 + [32]) = (int_64)0
	*($1 + [16]) = *(*($3))
	*($1 + [8]) = *(*(*($3 + [4]) + [4]) + [16])
	$5 = *($1)
	CALL eosio_assert([1], [8696])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $44(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	$6 = *(*($3) + [4])
	$7 = *($6 + [40])
	$8 = *($6 + [32])
	$9 = *($6 + [8])
	*($1 + [32]) = *(*($3 + [4]))
	$10 = *($6 + [16])
	*($1 + [16]) = *(*($3 + [8]))
	$11 = *($1)
	$12 = *($6 + [56])
	$13 = *($6 + [48])
	$14 = *($6 + [64])
	$15 = *($6 + [24])
	*($1 + [24]) = *(*($3 + [12]))
	$6 = *($3 + [16])
	*($1 + [8]) = *($6)
	if ( ((int_64)$9 == (int_64)*($6)) ){ goto $label$1 }
	*($1 + [48]) = $10
	*($1 + [64]) = $8
	*($1 + [56]) = $15
	*($1 + [40]) = $9
	*($1 + [96]) = $14
	*($1 + [80]) = $13
	*($1 + [88]) = $12
	*($1 + [72]) = $7
	
.LABEL $label$1
	*($1 + [104]) = ((int_64)*($1 + [104]) + (int_64)*(*($3 + [20])))
	*($1 + [112]) = ((int_64)*($1 + [112]) + (int_64)*(*($3 + [24])))
	*($1 + [120]) = ((int_64)*($1 + [120]) + (int_64)*(*($3 + [28])))
	CALL eosio_assert([1], [8696])
	$6 = $4
	$3 = ($6 + [-128])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = $6
	CALL $57($5, $1)
	CALL db_update_i64(*($1 + [132]), $2, $3, [128])
	if ( (uint_64)($11 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($5 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [8761])
	*(($5 = CALL _Znwj([64])) + [48]) = $1
	*($5) = (int_64)0
	*($5) = *(*(*($3) + [4]) + [8])
	*($5 + [24]) = (int_64)1
	*($5 + [16]) = *(*($3 + [4]))
	*($5 + [8]) = *(*(*($3 + [8]) + [4]))
	*($4 + [72]) = (($4 + [16]) + [48])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $44(($4 + [64]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)3624714903312400384, $2, $6, ($4 + [16]), [48])
	*($5 + [52]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $45(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	*($1 + [96]) = *(*($3))
	*($1 + [80]) = *(*($3 + [4]))
	*($1 + [88]) = *(*($3 + [8]))
	*($1 + [72]) = *(*($3 + [12]))
	*($1 + [104]) = ((int_64)*($1 + [104]) + (int_64)*(*($3 + [16])))
	$5 = *($1)
	*($1 + [112]) = ((int_64)*($1 + [112]) + (int_64)*(*($3 + [20])))
	*($1 + [120]) = ((int_64)*($1 + [120]) + (int_64)*(*($3 + [24])))
	CALL eosio_assert([1], [8696])
	*($4 + [136]) = ($4 + [128])
	*($4 + [132]) = $4
	*($4 + [128]) = $4
	CALL $57(($4 + [128]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $4, [128])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	$6 = *(*($3) + [4])
	$7 = *($6 + [64])
	$8 = *($6 + [40])
	*($1 + [64]) = *(*($3 + [4]))
	$9 = *($6 + [48])
	*($1 + [48]) = *(*($3 + [8]))
	$10 = *($6 + [56])
	*($1 + [56]) = *(*($3 + [12]))
	$11 = *($1)
	$6 = *($3 + [16])
	*($1 + [40]) = *($6)
	if ( ((int_64)$8 == (int_64)*($6)) ){ goto $label$1 }
	*($1 + [80]) = $9
	*($1 + [96]) = $7
	*($1 + [88]) = $10
	*($1 + [72]) = $8
	
.LABEL $label$1
	*($1 + [104]) = ((int_64)*($1 + [104]) + (int_64)*(*($3 + [20])))
	*($1 + [112]) = ((int_64)*($1 + [112]) + (int_64)*(*($3 + [24])))
	*($1 + [120]) = ((int_64)*($1 + [120]) + (int_64)*(*($3 + [28])))
	CALL eosio_assert([1], [8696])
	$6 = $4
	$3 = ($6 + [-128])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = $6
	CALL $57($5, $1)
	CALL db_update_i64(*($1 + [132]), $2, $3, [128])
	if ( (uint_64)($11 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($5 + [16])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $88($0)
	
.LABEL $label$1
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $60($0, ($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [8755])
	CALL memcpy(*($0 + [4]), ($1 + [44]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [192])
	$global$0 = $2
	$3 = *($0)
	*($2 + [188]) = [4]
	*($2 + [184]) = [9011]
	*($2 + [24]) = *($2 + [184])
	$4 = *(CALL $29(($2 + [168]), ($2 + [24])))
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = $4
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($2 + [188]) = [5]
	*($2 + [184]) = [9015]
	*($2 + [16]) = *($2 + [184])
	$4 = *(CALL $29(($2 + [168]), ($2 + [16])))
	*($1 + [48]) = (int_64)0
	*($1 + [40]) = $4
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($2 + [188]) = [6]
	*($2 + [184]) = [9020]
	*($2 + [8]) = *($2 + [184])
	$4 = *(CALL $29(($2 + [168]), ($2 + [8])))
	*($1 + [80]) = (int_64)0
	*($1 + [72]) = $4
	*($1 + [88]) = (int_64)0
	*($1 + [96]) = (int_64)0
	*($1 + [104]) = (int_64)0
	*($1 + [112]) = (int_64)0
	*($1 + [120]) = (int_64)0
	*($2 + [176]) = (($2 + [32]) + [128])
	*($2 + [172]) = ($2 + [32])
	*($2 + [168]) = ($2 + [32])
	CALL $57(($2 + [168]), $1)
	$4 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($3 + [8]), (int_64)-9057421647362916352, *(*($0 + [8])), $4, ($2 + [32]), [128])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [192])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $85($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9272])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $85($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8755])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8755])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8755])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8755])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8755])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1 + [40]) = *(*($4 + [4]))
	*($1) = ((int_64)*($1) + (int_64)*(*($4)))
	$5 = *($0)
	CALL $76(($1 + [24]), *($4 + [8]))
	*($1 + [16]) = (int_64)1
	*($1 + [36]) = *(*($4 + [12]))
	*($1 + [8]) = *(*($4 + [16]))
	*($1 + [44]) = *(*($4 + [20]))
	$4 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [36])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $85($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL $65($3, $1)
	$7 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)4777636407919247360, *(*($0 + [8])), $7, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $88($2)
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8755])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8755])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17676])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17484]
	$3 = (((int_32)$1 * (int_32)[12]) + [17484])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9284]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9288])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9284]) = [1]
	$2 = ($2 << [16])
	*([0] + [9288]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9288])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9288]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9284]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9284]) = [1]
	$3 = ($3 << [16])
	*([0] + [9288]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9288])
	
.LABEL $label$10
	*([0] + [9288]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $87($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8218])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $85 (int_32 $0)
{
	return CALL $86([9292], $0)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $85($1)
	
.LABEL $label$2
	*(CALL $80()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $85(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $88($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $80())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $84($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $82 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $81 (int_32 $0)
{
}

int_32 .FUNC $80 ()
{
	return [9276]
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $88($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $83(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9272])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $83(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $77($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $74 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*(*($3) + [4]) + [16]))
	$5 = *($1)
	CALL eosio_assert([1], [8696])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $56(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	$6 = *($1)
	CALL eosio_assert(((uint_64)*($1 + [16]) >= (uint_64)((int_64)*(*($3 + [4])) + (int_64)*(*(*($3) + [4]) + [16]))), [9151])
	$7 = *($3 + [4])
	*($1 + [16]) = (int_64))(*($1 + [16]) - ((int_64)*($7) + (int_64)*(*(*($3) + [4]) + [16])))
	if ( (int_64)(*(*(*($3 + [8]) + [4]) + [8]) == 0) ){ goto $label$1 }
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*($7))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [8696])
	$4 = $4
	$3 = ($4 + [-48])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-8])
	CALL $56($5, $1)
	CALL db_update_i64(*($1 + [44]), $2, $3, [40])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($5 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [8599])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8645])
	*($1 + [16]) = (int_64))(*($1 + [16]) - ((int_64)*(*($3 + [4])) + (int_64)*(*(*($3) + [4]) + [16])))
	$5 = *($1)
	CALL eosio_assert([1], [8696])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $56(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $79 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [20])
	$4 = *($1 + [16])
	$5 = *($1 + [8])
	$6 = *($1)
	$7 = CALL $75($2, ($1 + [24]))
	$8 = *($1 + [36])
	$1 = *($0 + [4])
	$9 = *($1 + [4])
	$0 = (*($0) + int_32($9 >> [1]))
	$1 = *($1)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$9 = CALL $75(($2 + [16]), $7)
	CALL void $0((int_32 $6), (int_64 $5), (int_64 $4), (int_32 $3), (int_32 $9), (int_32 $8), (int_32 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($7) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($7 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$8()), [8761])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = [0]
	*($3 + [48]) = $1
	CALL $63(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $47(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $30 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $50($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $58(($4 + [72]), ($4 + [64]))
	CALL $59(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $79(($4 + [8]))
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8457])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8457])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8457])
	CALL memcpy(($3 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8457])
	CALL memcpy(($3 + [20]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $48(*($1), ($3 + [24]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [8457])
	CALL memcpy(($3 + [36]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}