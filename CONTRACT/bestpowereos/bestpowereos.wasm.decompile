(data (i32.const 8192) "\01\00\00\00")
(data (i32.const 8196) "eosio\00")
(data (i32.const 8202) "RAMCORE\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8296) "Round mismatch\00")
(data (i32.const 8311) "string is too long to be a valid name\00")
(data (i32.const 8349) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8416) "character is not in allowed character set for names\00")
(data (i32.const 8468) "string is too long to be a valid symbol_code\00")
(data (i32.const 8513) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8566) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8617) "error reading iterator\00")
(data (i32.const 8640) "read\00")
(data (i32.const 8645) "singleton does not exist\00")
(data (i32.const 8670) "get\00")
(data (i32.const 8674) "cannot pass end iterator to erase\00")
(data (i32.const 8708) "cannot increment end iterator\00")
(data (i32.const 8738) "object passed to erase is not in multi_index\00")
(data (i32.const 8783) "cannot erase objects in table of another contract\00")
(data (i32.const 8833) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8886) "cannot create objects in table of another contract\00")
(data (i32.const 8937) "write\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$5 (result i32)))
(import "env" "tapos_block_num" (func $fimport$6 (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "memmove" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$9 (result i64)))
(import "env" "action_data_size" (func $fimport$10 (result i32)))
(import "env" "read_action_data" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$14 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$15 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$16 (param i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$18 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$19 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "__lttf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "set_blockchain_parameters_packed" (func $fimport$22 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $16))
(export "_ZdlPv" (func $33))
(export "_Znwj" (func $31))
(export "_Znaj" (func $32))
(export "_ZdaPv" (func $34))
(export "_ZnwjSt11align_val_t" (func $35))
(export "_ZnajSt11align_val_t" (func $36))
(export "_ZdlPvSt11align_val_t" (func $37))
(export "_ZdaPvSt11align_val_t" (func $38))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $6 $9)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17360))
(global $global$2 i32 (i32.const 17360))


int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $45($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8640])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $48($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8640])
	CALL memcpy($1, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8640])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($1 + [8]) = *($2 + [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [16]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8640])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [32]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [40]), *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8640])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($1 + [68]) = *(*($0 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $39 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$5 }
	if ( ((uint_32)($6 & [255]) >= (uint_32)$7) ){ goto $label$4 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((uint_32)($6 & [255]) >= (uint_32)$7) ){ goto $label$2 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)$8) ){ goto $label$1 }
	*($0) = $6
	*($1) = $8
	$7 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$1 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$3
	$7 = $8
	goto $label$1 
	
.LABEL $label$2
	$7 = $6
	
.LABEL $label$1
	$6 = *($3)
	if ( ((uint_32)$6 >= (uint_32)($7 & [255])) ){ goto $label$10 }
	*($2) = $6
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$9 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$8 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	
.LABEL $label$10
	$6 = *($3)
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( ($7 <= $6) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( ($7 <= $6) ){ goto $label$6 }
	
.LABEL $label$7
	return $9
	
.LABEL $label$6
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$13 }
	*($2) = $7
	*($3) = $6
	$3 = *($1)
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$12 }
	*($1) = $7
	*($2) = $3
	$7 = *($0)
	$2 = *($1)
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$11 }
	*($0) = $2
	*($1) = $7
	return ($9 + [4])
	
.LABEL $label$13
	return ($9 + [1])
	
.LABEL $label$12
	return ($9 + [2])
	
.LABEL $label$11
	return ($9 + [3])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	
.LOOP $label$1:
	$5 = ($1 + [-2])
	$6 = ($1 + [-1])
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$6 }
	
.LOOP $label$8:
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$20 }
	$7 = ($4 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$21 }
	$0 = uint_32($0 >> [2])
	$8 = CALL $29($4, ($4 + $0), $7, ($7 + $0), $6, $2)
	goto $label$19 
	
.LABEL $label$21
	$0 = *($6)
	$9 = *($4)
	$10 = *($7)
	if ( ((uint_32)$10 >= (uint_32)$9) ){ goto $label$24 }
	if ( ((uint_32)($0 & [255]) >= (uint_32)$10) ){ goto $label$23 }
	*($4) = $0
	*($6) = $9
	$8 = [1]
	$9 = *($7)
	$3 = *($4)
	if ( ($3 <= $9) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$24
	$8 = [0]
	if ( ((uint_32)($0 & [255]) >= (uint_32)$10) ){ goto $label$19 }
	*($7) = $0
	*($6) = $10
	$8 = [1]
	$10 = *($4)
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$19 }
	*($4) = $0
	*($7) = $10
	goto $label$22 
	
.LABEL $label$23
	*($4) = $10
	*($7) = $9
	$8 = [1]
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)$9) ){ goto $label$19 }
	*($7) = $0
	*($6) = $9
	
.LABEL $label$22
	$8 = [2]
	$9 = *($7)
	$3 = *($4)
	if ( ($3 <= $9) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$0 = *($4 + [2])
	$9 = *($4)
	$10 = *($4 + [1])
	if ( ((uint_32)$10 >= (uint_32)$9) ){ goto $label$33 }
	$11 = ($0 & [255])
	if ( ((uint_32)$11 >= (uint_32)$10) ){ goto $label$32 }
	*($4) = $0
	*(($4 + [2])) = $9
	goto $label$31 
	
.LABEL $label$33
	$11 = ($0 & [255])
	if ( ((uint_32)$11 >= (uint_32)$10) ){ goto $label$29 }
	*(($4 + [2])) = $10
	*(($12 = ($4 + [1]))) = $0
	if ( ((uint_32)$11 >= (uint_32)$9) ){ goto $label$30 }
	*($4) = $0
	*($12) = $9
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$32
	*($4) = $10
	*(($10 = ($4 + [1]))) = $9
	if ( ((uint_32)$11 >= (uint_32)$9) ){ goto $label$29 }
	*(($4 + [2])) = $9
	*($10) = $0
	
.LABEL $label$31
	$10 = $9
	
.LABEL $label$30
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$10 = $0
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$25 }
	
.LABEL $label$28
	$7 = [0]
	$11 = *($6)
	if ( ((uint_32)$11 >= (uint_32)($10 & [255])) ){ goto $label$34 }
	$13 = [2]
	goto $label$3 
	
.LABEL $label$34
	$13 = [0]
	goto $label$3 
	
.LABEL $label$27
	$13 = [7]
	goto $label$3 
	
.LABEL $label$26
	$13 = [7]
	goto $label$3 
	
.LABEL $label$25
	$13 = [7]
	goto $label$3 
	
.LABEL $label$19
	$9 = *($7)
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = $6
	$3 = ($4 + [1])
	if ( ($3 <= $10) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$0 = $5
	
.LOOP $label$35:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$15 }
	$10 = *($0)
	$11 = ($0 + [-1])
	$0 = $11
	if ( ((uint_32)$10 >= (uint_32)$9) ){ goto $label$35 }
	*($4) = $10
	*(($10 = ($11 + [1]))) = $3
	$8 = ($8 + [1])
	$3 = ($4 + [1])
	if ( ((uint_32)$3 >= (uint_32)$10) ){ goto $label$14 }
	
.LABEL $label$16
	
.LOOP $label$36:
	$0 = ($3 + [-1])
	$11 = *($7)
	
.LOOP $label$37:
	$9 = ($11 & [255])
	$0 = ($0 + [1])
	$12 = *($0)
	if ( ($12 <= $9) ){ goto $label$37 }
	$3 = ($0 + [1])
	
.LOOP $label$38:
	$10 = ($10 + [-1])
	$11 = *($10)
	if ( ((uint_32)$11 >= (uint_32)$9) ){ goto $label$38 }
	if ( ((uint_32)$0 > (uint_32)$10) ){ goto $label$39 }
	*($0) = $11
	*($10) = $12
	$7 = ( $10 ? $7 : ((int_32)$7 == (int_32)$0) )
	$8 = ($8 + [1])
	goto $label$36 
	
.LABEL $label$39
	$3 = $0
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$12 = ($4 + [1])
	$9 = *($6)
	if ( ($3 <= $9) ){ goto $label$44 }
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$43 }
	$12 = ($4 + [2])
	
.LOOP $label$46:
	$0 = ($12 + [-1])
	$10 = *($0)
	if ( ($3 <= $10) ){ goto $label$45 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$46 }
	goto $label$42 
	
.LABEL $label$45
	*($0) = $9
	*($6) = $10
	
.LABEL $label$44
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$41 }
	
.LOOP $label$47:
	$0 = ($12 + [-1])
	$9 = *($4)
	
.LOOP $label$48:
	$0 = ($0 + [1])
	$11 = *($0)
	$10 = ($9 & [255])
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$48 }
	$12 = ($0 + [1])
	
.LOOP $label$49:
	$6 = ($6 + [-1])
	$9 = *($6)
	if ( ($10 <= $9) ){ goto $label$49 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$50 }
	*($0) = $9
	*($6) = $11
	goto $label$47 
	
.LABEL $label$50
	$10 = ([4] & [7])
	if ( ((uint_32)$10 > (uint_32)[4]) ){ goto $label$40 }
	goto $label$4 
	
.LABEL $label$43
	$13 = [7]
	goto $label$3 
	
.LABEL $label$42
	$13 = [7]
	goto $label$3 
	
.LABEL $label$41
	$13 = [7]
	goto $label$3 
	
.LABEL $label$40
	$13 = [7]
	goto $label$3 
	
.LABEL $label$14
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$12 }
	
.LABEL $label$13
	$10 = *($3)
	$0 = *($7)
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$12 }
	*($3) = $0
	*($7) = $10
	if ( ($8 + [1]) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( $8 ){ goto $label$10 }
	
.LABEL $label$11
	$10 = CALL $30($4, $3, $2)
	$0 = ($3 + [1])
	if ( CALL $30($0, $1, $2) ){ goto $label$7 }
	if ( $10 ){ goto $label$9 }
	
.LABEL $label$10
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $28($4, $3, $2)
	$0 = ($3 + [1])
	
.LABEL $label$9
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$6 }
	goto $label$8 
	
.LABEL $label$7
	$1 = ( $1 ? $3 : $10 )
	$0 = $4
	$10 = (( [1] ? [2] : $10 ) & [7])
	if ( ((uint_32)$10 <= (uint_32)[4]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	goto $label$58 
	
.LABEL $label$69
	$9 = *($4)
	$0 = ($1 + [-1])
	$10 = *($0)
	if ( ((uint_32)$10 >= (uint_32)$9) ){ goto $label$51 }
	*($4) = $10
	*($0) = $9
	return 
	
.LABEL $label$68
	$9 = ($1 + [-1])
	$0 = *($9)
	$11 = *($4)
	$10 = *($4 + [1])
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$65 }
	if ( ((uint_32)($0 & [255]) >= (uint_32)$10) ){ goto $label$63 }
	*($4) = $0
	*($9) = $11
	return 
	
.LABEL $label$67
	CALL $29($4, ($4 + [1]), ($4 + [2]), ($4 + [3]), ($1 + [-1]), $2)
	return 
	
.LABEL $label$66
	$11 = ($1 + [-1])
	$10 = *($4 + [2])
	$9 = *($4)
	$0 = *($4 + [1])
	if ( ((uint_32)$0 >= (uint_32)$9) ){ goto $label$64 }
	$12 = ($10 & [255])
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$62 }
	*($4) = $10
	*(($4 + [2])) = $9
	goto $label$61 
	
.LABEL $label$65
	if ( ((uint_32)($0 & [255]) >= (uint_32)$10) ){ goto $label$54 }
	*(($11 = ($4 + [1]))) = $0
	*($9) = $10
	$10 = *($4)
	$0 = *($11)
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$53 }
	*($4) = $0
	*($11) = $10
	return 
	
.LABEL $label$64
	$12 = ($10 & [255])
	if ( ((uint_32)$12 >= (uint_32)$0) ){ goto $label$60 }
	*(($4 + [2])) = $0
	*(($6 = ($4 + [1]))) = $10
	if ( ((uint_32)$12 >= (uint_32)$9) ){ goto $label$59 }
	*($4) = $10
	*($6) = $9
	goto $label$59 
	
.LABEL $label$63
	*($4) = $10
	*(($0 = ($4 + [1]))) = $11
	$10 = *($9)
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$52 }
	*($0) = $10
	*($9) = $11
	return 
	
.LABEL $label$62
	*($4) = $0
	*(($0 = ($4 + [1]))) = $9
	if ( ((uint_32)$12 >= (uint_32)$9) ){ goto $label$60 }
	*(($4 + [2])) = $9
	*($0) = $10
	
.LABEL $label$61
	$0 = $9
	goto $label$59 
	
.LABEL $label$60
	$0 = $10
	
.LABEL $label$59
	$10 = *($11)
	if ( ((uint_32)$10 >= (uint_32)($0 & [255])) ){ goto $label$57 }
	*(($9 = ($4 + [2]))) = $10
	*($11) = $0
	$10 = ($4 + [1])
	$11 = *($10)
	$0 = *($9)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$56 }
	*($9) = $11
	*($10) = $0
	$10 = *($4)
	if ( ((uint_32)$0 >= (uint_32)$10) ){ goto $label$55 }
	*($4) = $0
	*(($4 + [1])) = $10
	return $13
	
.LABEL $label$58
	$13 = [7]
	goto $label$3 
	
.LABEL $label$57
	$13 = [7]
	goto $label$3 
	
.LABEL $label$56
	$13 = [7]
	goto $label$3 
	
.LABEL $label$55
	$13 = [7]
	goto $label$3 
	
.LABEL $label$54
	$13 = [7]
	goto $label$3 
	
.LABEL $label$53
	$13 = [7]
	goto $label$3 
	
.LABEL $label$52
	$13 = [7]
	goto $label$3 
	
.LABEL $label$51
	$13 = [7]
	goto $label$3 
	
.LABEL $label$5
	$13 = [7]
	goto $label$3 
	
.LABEL $label$4
	if ( (([1] << $10) & [21]) ){ goto $label$1 }
	$13 = [7]
	
.LABEL $label$3
	
.LOOP $label$70:
	goto $label$78 
	
.LABEL $label$85
	$0 = $7
	$13 = [3]
	goto $label$70 
	
.LABEL $label$84
	*((($9 = ($4 + $0)) + $12)) = $10
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$72 }
	$13 = [4]
	goto $label$70 
	
.LABEL $label$83
	$0 = ($0 + [-1])
	$10 = *(($9 + [1]))
	if ( ($11 <= $10) ){ goto $label$73 }
	$13 = [5]
	goto $label$70 
	
.LABEL $label$82
	$0 = (($4 + $0) + $12)
	goto $label$71 
	
.LABEL $label$81
	$0 = $4
	$13 = [6]
	goto $label$70 
	
.LABEL $label$80
	*($0) = $11
	$0 = ($6 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$74 }
	$13 = [1]
	goto $label$70 
	
.LABEL $label$79
	$7 = ($7 + [1])
	$10 = *($6)
	$6 = $0
	$11 = *($6)
	if ( ($11 <= ($10 & [255])) ){ goto $label$76 }
	$13 = [0]
	goto $label$70 
	
.LABEL $label$78
	$0 = ($6 + [1])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$75 }
	$13 = [7]
	goto $label$70 
	
.LABEL $label$77
	return 
	
.LABEL $label$76
	$13 = [2]
	goto $label$70 
	
.LABEL $label$75
	$13 = [1]
	goto $label$70 
	
.LABEL $label$74
	$13 = [7]
	goto $label$70 
	
.LABEL $label$73
	$13 = [3]
	goto $label$70 
	
.LABEL $label$72
	$13 = [8]
	goto $label$70 
	
.LABEL $label$71
	$13 = [6]
	goto $label$70 
	
.LABEL $label$2
	CALL $28(($3 + [1]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $23($0, $1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [96]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [128]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8640])
	CALL memcpy(($1 + [152]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8640])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [168]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $39($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8640])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [44]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [52]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8640])
	CALL memcpy(($1 + [60]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8640])
	CALL memcpy(($1 + [64]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8640])
	CALL memcpy(($1 + [66]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $39($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $39($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8670])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $25($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [8640])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8937])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8937])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $39($0)
}

void .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17348])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17156]
	$3 = (((int_32)$1 * (int_32)[12]) + [17156])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $42())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $44($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $42 ()
{
	return [8948]
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $40 (int_32 $0)
{
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8956]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8960])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8956]) = [1]
	$2 = ($2 << [16])
	*([0] + [8960]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8960])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8960]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8956]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8956]) = [1]
	$3 = ($3 << [16])
	*([0] + [8960]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8960])
	
.LABEL $label$10
	*([0] + [8960]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $47($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8210])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $45 (int_32 $0)
{
	return CALL $46([8964], $0)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $45($1)
	
.LABEL $label$2
	*(CALL $42()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $45(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $48($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [8738])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$9()), [8783])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [8833])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	$9 = *($4 + [24])
	if ( ($9 == 0) ){ goto $label$10 }
	*(($4 + [28])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$8 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	$9 = *($6 + [24])
	if ( ($9 == 0) ){ goto $label$13 }
	*(($6 + [28])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
	$6 = *($1 + [44])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7760153368969871360, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [128])
	$global$0 = $2
	*($2 + [80]) = $1
	CALL require_auth(*($0))
	*(($2 + [72])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	*($2 + [76]) = [0]
	$3 = *($0)
	*($2 + [40]) = $3
	*($2 + [48]) = $3
	CALL eosio_assert(((int_64)((int_64)CALL $10($0) + (int_64)1) == (int_64)$1), [8296])
	*($2 + [32]) = [0]
	*($2 + [24]) = (int_64)0
	$4 = ((((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$6()) + (CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$7() / (uint_64)(int_64)1000000))) + (CASTING uint_32)(uint_64 ((int_64)CALL $1() + (int_64)CALL $4())))
	*([0] + [8192]) = $4
	*($2 + [20]) = $4
	*($2 + [104]) = [0]
	*($2 + [96]) = (int_64)0
	$5 = ($2 + [104])
	$6 = [0]
	$4 = [1]
	*($2 + [8]) = [1]
	if ( ((uint_32)[0] >= (uint_32)[0]) ){ goto $label$2 }
	$8 = [2]
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$92 
	
.LABEL $label$94
	$7 = *($5)
	$6 = *($2 + [100])
	$4 = ($4 + [1])
	*($2 + [8]) = $4
	if ( ((uint_32)$6 >= (uint_32)$7) ){ goto $label$39 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$93
	*($6) = $4
	*($2 + [100]) = (*($2 + [100]) + [1])
	if ( ((int_32)$4 != (int_32)[25]) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$92
	CALL $11(($2 + [96]), ($2 + [8]))
	if ( ((int_32)$4 != (int_32)[25]) ){ goto $label$38 }
	$8 = [3]
	goto $label$3 
	
.LABEL $label$91
	$4 = (((int_32)*([0] + [8192]) * (int_32)[1103515245]) + [12345])
	*([0] + [8192]) = $4
	$6 = ((uint_32)(uint_32($4 >> [16]) & [32767]) % (uint_32)(*($2 + [100]) - $6))
	$6 = *($2 + [96])
	$4 = ($6 + $6)
	$7 = *($2 + [28])
	if ( ((int_32)$7 == (int_32)*(($2 + [32]))) ){ goto $label$35 }
	$8 = [4]
	goto $label$3 
	
.LABEL $label$90
	*($7) = *($4)
	*($2 + [28]) = (*($2 + [28]) + [1])
	goto $label$34 
	
.LABEL $label$89
	CALL $12(($2 + [24]), $4)
	$8 = [5]
	goto $label$3 
	
.LABEL $label$88
	$4 = *($2 + [96])
	$6 = ($4 + $6)
	$5 = ($6 + [1])
	$7 = (*($2 + [100]) - $5)
	if ( ($7 == 0) ){ goto $label$33 }
	$8 = [6]
	goto $label$3 
	
.LABEL $label$87
	CALL memmove($6, $5, $7)
	$4 = *($2 + [96])
	$8 = [7]
	goto $label$3 
	
.LABEL $label$86
	$5 = (((int_32)*([0] + [8192]) * (int_32)[1103515245]) + [12345])
	*([0] + [8192]) = $5
	$6 = ($6 + $7)
	*($2 + [100]) = $6
	$6 = ((uint_32)(uint_32($5 >> [16]) & [32767]) % (uint_32)($6 - $4))
	$4 = ($4 + $6)
	$7 = *($2 + [28])
	if ( ((int_32)$7 == (int_32)*(($2 + [32]))) ){ goto $label$32 }
	$8 = [8]
	goto $label$3 
	
.LABEL $label$85
	*($7) = *($4)
	*($2 + [28]) = (*($2 + [28]) + [1])
	goto $label$31 
	
.LABEL $label$84
	CALL $12(($2 + [24]), $4)
	$8 = [9]
	goto $label$3 
	
.LABEL $label$83
	$4 = *($2 + [96])
	$6 = ($4 + $6)
	$5 = ($6 + [1])
	$7 = (*($2 + [100]) - $5)
	if ( ($7 == 0) ){ goto $label$30 }
	$8 = [10]
	goto $label$3 
	
.LABEL $label$82
	CALL memmove($6, $5, $7)
	$4 = *($2 + [96])
	$8 = [11]
	goto $label$3 
	
.LABEL $label$81
	$5 = (((int_32)*([0] + [8192]) * (int_32)[1103515245]) + [12345])
	*([0] + [8192]) = $5
	$6 = ($6 + $7)
	*($2 + [100]) = $6
	$6 = ((uint_32)(uint_32($5 >> [16]) & [32767]) % (uint_32)($6 - $4))
	$4 = ($4 + $6)
	$7 = *($2 + [28])
	if ( ((int_32)$7 == (int_32)*(($2 + [32]))) ){ goto $label$29 }
	$8 = [12]
	goto $label$3 
	
.LABEL $label$80
	*($7) = *($4)
	*($2 + [28]) = (*($2 + [28]) + [1])
	goto $label$28 
	
.LABEL $label$79
	CALL $12(($2 + [24]), $4)
	$8 = [13]
	goto $label$3 
	
.LABEL $label$78
	$4 = *($2 + [96])
	$6 = ($4 + $6)
	$5 = ($6 + [1])
	$7 = (*($2 + [100]) - $5)
	if ( ($7 == 0) ){ goto $label$27 }
	$8 = [14]
	goto $label$3 
	
.LABEL $label$77
	CALL memmove($6, $5, $7)
	$4 = *($2 + [96])
	$8 = [15]
	goto $label$3 
	
.LABEL $label$76
	$5 = (((int_32)*([0] + [8192]) * (int_32)[1103515245]) + [12345])
	*([0] + [8192]) = $5
	$6 = ($6 + $7)
	*($2 + [100]) = $6
	$6 = ((uint_32)(uint_32($5 >> [16]) & [32767]) % (uint_32)($6 - $4))
	$4 = ($4 + $6)
	$7 = *($2 + [28])
	if ( ((int_32)$7 == (int_32)*(($2 + [32]))) ){ goto $label$26 }
	$8 = [16]
	goto $label$3 
	
.LABEL $label$75
	*($7) = *($4)
	*($2 + [28]) = (*($2 + [28]) + [1])
	goto $label$25 
	
.LABEL $label$74
	CALL $12(($2 + [24]), $4)
	$8 = [17]
	goto $label$3 
	
.LABEL $label$73
	$4 = *($2 + [96])
	$6 = ($4 + $6)
	$5 = ($6 + [1])
	$7 = (*($2 + [100]) - $5)
	if ( ($7 == 0) ){ goto $label$24 }
	$8 = [18]
	goto $label$3 
	
.LABEL $label$72
	CALL memmove($6, $5, $7)
	$4 = *($2 + [96])
	$8 = [19]
	goto $label$3 
	
.LABEL $label$71
	$5 = (((int_32)*([0] + [8192]) * (int_32)[1103515245]) + [12345])
	*([0] + [8192]) = $5
	$6 = ($6 + $7)
	*($2 + [100]) = $6
	$6 = ((uint_32)(uint_32($5 >> [16]) & [32767]) % (uint_32)($6 - $4))
	$4 = ($4 + $6)
	$7 = *($2 + [28])
	if ( ((int_32)$7 == (int_32)*(($2 + [32]))) ){ goto $label$23 }
	$8 = [20]
	goto $label$3 
	
.LABEL $label$70
	*($7) = *($4)
	*($2 + [28]) = (*($2 + [28]) + [1])
	goto $label$22 
	
.LABEL $label$69
	CALL $12(($2 + [24]), $4)
	$8 = [21]
	goto $label$3 
	
.LABEL $label$68
	$4 = *($2 + [96])
	$6 = ($4 + $6)
	$5 = ($6 + [1])
	$7 = (*($2 + [100]) - $5)
	if ( ($7 == 0) ){ goto $label$21 }
	$8 = [22]
	goto $label$3 
	
.LABEL $label$67
	CALL memmove($6, $5, $7)
	$4 = *($2 + [96])
	$8 = [23]
	goto $label$3 
	
.LABEL $label$66
	$5 = (((int_32)*([0] + [8192]) * (int_32)[1103515245]) + [12345])
	*([0] + [8192]) = $5
	$6 = ($6 + $7)
	*($2 + [100]) = $6
	$6 = ((uint_32)(uint_32($5 >> [16]) & [32767]) % (uint_32)($6 - $4))
	$4 = ($4 + $6)
	$7 = *($2 + [28])
	if ( ((int_32)$7 == (int_32)*(($2 + [32]))) ){ goto $label$20 }
	$8 = [24]
	goto $label$3 
	
.LABEL $label$65
	*($7) = *($4)
	*($2 + [28]) = (*($2 + [28]) + [1])
	goto $label$19 
	
.LABEL $label$64
	CALL $12(($2 + [24]), $4)
	$8 = [25]
	goto $label$3 
	
.LABEL $label$63
	$4 = *($2 + [96])
	$6 = ($4 + $6)
	$5 = ($6 + [1])
	$7 = (*($2 + [100]) - $5)
	if ( ($7 == 0) ){ goto $label$18 }
	$8 = [26]
	goto $label$3 
	
.LABEL $label$62
	CALL memmove($6, $5, $7)
	$4 = *($2 + [96])
	$8 = [27]
	goto $label$3 
	
.LABEL $label$61
	*($2 + [100]) = ($6 + $7)
	if ( ($4 == 0) ){ goto $label$17 }
	$8 = [28]
	goto $label$3 
	
.LABEL $label$60
	*($2 + [100]) = $4
	CALL _ZdlPv($4)
	$8 = [29]
	goto $label$3 
	
.LABEL $label$59
	CALL $28(*($2 + [24]), *($2 + [28]), ($2 + [96]))
	$1 = *($0)
	*($2 + [12]) = ($2 + [20])
	*($2 + [8]) = ($2 + [80])
	*($2 + [16]) = ($2 + [24])
	*($2 + [120]) = $1
	CALL eosio_assert(((int_64)*($2 + [40]) == (int_64)CALL $fimport$9()), [8886])
	*($2 + [100]) = ($2 + [8])
	*($2 + [96]) = ($2 + [40])
	*($2 + [104]) = ($2 + [120])
	*(($4 = CALL _Znwj([48])) + [32]) = [0]
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [36]) = ($2 + [40])
	CALL $13(($2 + [96]), $4)
	*($2 + [112]) = $4
	$1 = *($4)
	*($2 + [96]) = $1
	$7 = *($4 + [40])
	*($2 + [92]) = $7
	$5 = ($2 + [68])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($2 + [72]))) ){ goto $label$16 }
	$8 = [48]
	goto $label$3 
	
.LABEL $label$58
	*($6 + [8]) = $1
	*($6 + [16]) = $7
	*($2 + [112]) = [0]
	*($6) = $4
	*($5) = ($6 + [24])
	$4 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	$8 = [31]
	goto $label$3 
	
.LABEL $label$57
	$6 = *($4 + [24])
	if ( ($6 == 0) ){ goto $label$13 }
	$8 = [32]
	goto $label$3 
	
.LABEL $label$56
	*(($4 + [28])) = $6
	CALL _ZdlPv($6)
	$8 = [33]
	goto $label$3 
	
.LABEL $label$55
	CALL _ZdlPv($4)
	$4 = *($2 + [24])
	if ( $4 ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$54
	CALL $14(($2 + [64]), ($2 + [112]), ($2 + [96]), ($2 + [92]))
	$4 = *($2 + [112])
	*($2 + [112]) = [0]
	if ( $4 ){ goto $label$15 }
	$8 = [47]
	goto $label$3 
	
.LABEL $label$53
	$4 = *($2 + [24])
	if ( ($4 == 0) ){ goto $label$12 }
	$8 = [34]
	goto $label$3 
	
.LABEL $label$52
	*($2 + [28]) = $4
	CALL _ZdlPv($4)
	$8 = [35]
	goto $label$3 
	
.LABEL $label$51
	$5 = *($2 + [64])
	if ( ($5 == 0) ){ goto $label$9 }
	$8 = [36]
	goto $label$3 
	
.LABEL $label$50
	$0 = (($2 + [40]) + [28])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	$8 = [37]
	goto $label$3 
	
.LABEL $label$49
	$8 = [38]
	goto $label$3 
	
.LABEL $label$48
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	$8 = [39]
	goto $label$3 
	
.LABEL $label$47
	$7 = *($6 + [24])
	if ( ($7 == 0) ){ goto $label$5 }
	$8 = [40]
	goto $label$3 
	
.LABEL $label$46
	*(($6 + [28])) = $7
	CALL _ZdlPv($7)
	$8 = [41]
	goto $label$3 
	
.LABEL $label$45
	CALL _ZdlPv($6)
	$8 = [42]
	goto $label$3 
	
.LABEL $label$44
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$8 = [43]
	goto $label$3 
	
.LABEL $label$43
	$4 = *(($2 + [64]))
	goto $label$4 
	
.LABEL $label$42
	$4 = $5
	$8 = [44]
	goto $label$3 
	
.LABEL $label$41
	*($0) = $5
	CALL _ZdlPv($4)
	$8 = [45]
	goto $label$3 
	
.LABEL $label$40
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$39
	$8 = [0]
	goto $label$3 
	
.LABEL $label$38
	$8 = [1]
	goto $label$3 
	
.LABEL $label$37
	$8 = [3]
	goto $label$3 
	
.LABEL $label$36
	$8 = [1]
	goto $label$3 
	
.LABEL $label$35
	$8 = [54]
	goto $label$3 
	
.LABEL $label$34
	$8 = [5]
	goto $label$3 
	
.LABEL $label$33
	$8 = [7]
	goto $label$3 
	
.LABEL $label$32
	$8 = [53]
	goto $label$3 
	
.LABEL $label$31
	$8 = [9]
	goto $label$3 
	
.LABEL $label$30
	$8 = [11]
	goto $label$3 
	
.LABEL $label$29
	$8 = [52]
	goto $label$3 
	
.LABEL $label$28
	$8 = [13]
	goto $label$3 
	
.LABEL $label$27
	$8 = [15]
	goto $label$3 
	
.LABEL $label$26
	$8 = [51]
	goto $label$3 
	
.LABEL $label$25
	$8 = [17]
	goto $label$3 
	
.LABEL $label$24
	$8 = [19]
	goto $label$3 
	
.LABEL $label$23
	$8 = [50]
	goto $label$3 
	
.LABEL $label$22
	$8 = [21]
	goto $label$3 
	
.LABEL $label$21
	$8 = [23]
	goto $label$3 
	
.LABEL $label$20
	$8 = [49]
	goto $label$3 
	
.LABEL $label$19
	$8 = [25]
	goto $label$3 
	
.LABEL $label$18
	$8 = [27]
	goto $label$3 
	
.LABEL $label$17
	$8 = [29]
	goto $label$3 
	
.LABEL $label$16
	$8 = [30]
	goto $label$3 
	
.LABEL $label$15
	$8 = [31]
	goto $label$3 
	
.LABEL $label$14
	$8 = [47]
	goto $label$3 
	
.LABEL $label$13
	$8 = [33]
	goto $label$3 
	
.LABEL $label$12
	$8 = [35]
	goto $label$3 
	
.LABEL $label$11
	$8 = [35]
	goto $label$3 
	
.LABEL $label$10
	$8 = [34]
	goto $label$3 
	
.LABEL $label$9
	$8 = [45]
	goto $label$3 
	
.LABEL $label$8
	$8 = [46]
	goto $label$3 
	
.LABEL $label$7
	$8 = [38]
	goto $label$3 
	
.LABEL $label$6
	$8 = [42]
	goto $label$3 
	
.LABEL $label$5
	$8 = [41]
	goto $label$3 
	
.LABEL $label$4
	$8 = [44]
	goto $label$3 
	$8
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	*($1 + [36]) = [0]
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	*($1 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $7($1, $0)
	$3 = [1]
	
.LOOP $label$2:
	$4 = [0]
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [8674])
	CALL eosio_assert($5, [8708])
	$5 = CALL db_next_i64(*($0 + [40]), ($1 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $7($1, $5)
	
.LABEL $label$3
	CALL $8($1, $0)
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($3 <= [51])
	$3 = ($3 + [1])
	$0 = $4
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$1
	$5 = *($1 + [24])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($1 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	$3 = *($4 + [24])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($4 + [28])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($1 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($1 + [48])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [8617])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$4 = CALL $45($6)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [40]) = ($4 + $6)
	*($3 + [32]) = $4
	*(($5 = CALL _Znwj([48])) + [32]) = [0]
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [36]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [8640])
	CALL memcpy($5, $4, [8])
	$2 = ($6 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [8640])
	CALL memcpy(($5 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [8640])
	CALL memcpy(($5 + [16]), ($4 + [16]), [8])
	*($3 + [36]) = ($4 + [24])
	CALL $24(($3 + [32]), ($5 + [24]))
	*($5 + [44]) = [-1]
	*($5 + [40]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $14(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $48($4)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [28])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_64 .FUNC $4 ()
{
	int_32 $0
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$0 = ($global$0 - [64])
	$global$0 = $0
	*($0 + [56]) = [8196]
	*($0 + [60]) = CALL $41([8196])
	*($0 + [8]) = *($0 + [56])
	$1 = *(CALL $2(($0 + [16]), ($0 + [8])))
	*($0 + [56]) = [8196]
	*($0 + [60]) = CALL $41([8196])
	*($0) = *($0 + [56])
	CALL $2(($0 + [16]), $0)
	*(($0 + [48])) = [0]
	*($0 + [16]) = $1
	*($0 + [32]) = (int_64)-1
	$2 = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [24]) = (int_64)6138663577826885632
	$3 = CALL db_find_i64($1, (int_64)6138663577826885632, (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $5(($0 + [16]), $3) + [176]) == (int_32)($0 + [16])), [8566])
	$3 = *(($0 + [44]))
	if ( ((int_32)$3 == (int_32)*(($0 + [40]))) ){ goto $label$3 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [176]) == (int_32)($0 + [16])), [8566])
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	$4 = CALL db_find_i64(*($0 + [16]), *(($0 + [24])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $5(($0 + [16]), $4)
	CALL eosio_assert(((int_32)*($3 + [176]) == (int_32)($0 + [16])), [8566])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8645])
	$2 = *($3 + [136])
	$5 = *($0 + [40])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($0 + [44])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($0 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($0 + [64])
	return $2
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8617])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $45($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([192])) + [80]) = (int_64)0
	*($5 + [72]) = (int_64)68719476736
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = [0]
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = [0]
	*($5 + [136]) = (int_64)0
	*($5 + [144]) = (int_64)0
	*($5 + [152]) = [0]
	*($5 + [160]) = (int_64)0
	*($5 + [168]) = [0]
	*($5 + [176]) = $0
	CALL $21(($3 + [32]), $5)
	*($5 + [180]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $22(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $48($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8311])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8416])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8349])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8416])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8617])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $45($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*($3 + [8]) = $0
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*(($5 = CALL _Znwj([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)4602678819172646912
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)4602678819172646912
	*($5 + [64]) = $0
	CALL $19(($3 + [8]), $5)
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [8]) = $6
	$7 = *($5 + [68])
	*($3 + [4]) = $7
	$8 = ($0 + [28])
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($1 + [8]) = $6
	*($1 + [16]) = $7
	*($3 + [24]) = [0]
	*($1) = $5
	*($8) = ($1 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $48($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC memory ()
{
}

int_64 .FUNC $1 ()
{
	int_32 $0
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$0 = ($global$0 - [64])
	$global$0 = $0
	*($0 + [56]) = [8196]
	*($0 + [60]) = CALL $41([8196])
	*($0 + [8]) = *($0 + [56])
	$1 = *(CALL $2(($0 + [16]), ($0 + [8])))
	*($0 + [56]) = [8196]
	*($0 + [60]) = CALL $41([8196])
	*($0) = *($0 + [56])
	CALL $2(($0 + [16]), $0)
	*(($0 + [48])) = [0]
	*($0 + [24]) = (int_64)6138663577826885632
	*($0 + [16]) = $1
	*($0 + [32]) = (int_64)-1
	*($0 + [40]) = (int_64)0
	$2 = CALL $41([8202])
	if ( ($2 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [8468])
	goto $label$6 
	
.LABEL $label$7
	if ( ($2 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$1 = (int_64)0
	
.LOOP $label$8:
	$3 = *(($2 + [8201]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [8513])
	
.LABEL $label$9
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	$3 = *(($0 + [44]))
	$4 = *(($0 + [40]))
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$11:
	$2 = ($3 + [-24])
	$5 = *($2)
	if ( ((int_64)*($5 + [8]) == (int_64)$1) ){ goto $label$10 }
	$3 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$11 }
	goto $label$4 
	
.LABEL $label$10
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)($0 + [16])), [8566])
	if ( ($5 == 0) ){ goto $label$3 }
	$1 = *($5 + [16])
	$4 = *($0 + [40])
	if ( ($4 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$1 = (int_64)4
	
.LABEL $label$4
	$2 = CALL db_find_i64(*($0 + [16]), *(($0 + [24])), (int_64)-5069606918720847872, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $3(($0 + [16]), $2)
	CALL eosio_assert(((int_32)*($2 + [64]) == (int_32)($0 + [16])), [8566])
	$1 = *($2 + [16])
	$4 = *($0 + [40])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$1 = (int_64)0
	$4 = *($0 + [40])
	if ( $4 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($0 + [64])
	return $1
	
.LABEL $label$1
	$5 = ($0 + [44])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($0 + [40]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $4
	
.LABEL $label$12
	*($5) = $4
	CALL _ZdlPv($2)
	$global$0 = ($0 + [64])
	return $1
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $39($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [24])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [28])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)7760153368969871360, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [36]) == (int_32)$7), [8566])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $7($7, CALL $fimport$1(*($7), *($7 + [8]), (int_64)7760153368969871360, $6))
	CALL eosio_assert(((int_32)*($4 + [36]) == (int_32)$7), [8566])
	
.LABEL $label$2
	*($4 + [44]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)5606357920649314304) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)4923678721393373152) ){ goto $label$1 }
	*($3 + [28]) = [0]
	*($3 + [24]) = [1]
	*($3) = *($3 + [24])
	CALL $17($1, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [20]) = [0]
	*($3 + [16]) = [2]
	*($3 + [8]) = *($3 + [16])
	CALL $18($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $40([0])
	$global$0 = ($3 + [32])
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $45($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $48($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

int_64 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [64])
	$global$0 = $1
	*(($1 + [48])) = [0]
	*($1 + [32]) = (int_64)-1
	$2 = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [52]) = [0]
	$3 = *($0)
	*($1 + [16]) = $3
	*($1 + [24]) = $3
	*($1 + [8]) = ($1 + [16])
	*($1 + [56]) = (int_64)0
	CALL $15($1, ($1 + [8]), ($1 + [56]))
	$0 = *($1 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	$2 = *($0)
	
.LABEL $label$1
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = (($1 + [16]) + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	$7 = *($6 + [24])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($6 + [28])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	CALL _ZdlPv($6)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($1 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($1 + [64])
	return $2
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $39($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $39($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [16]) = *(*($4 + [4]))
	$6 = [24]
	$4 = *($4 + [8])
	$7 = ($1 + [24])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	CALL $26($7, *($4), *($4 + [4]))
	
.LABEL $label$1
	$8 = ($1 + [16])
	$9 = ($1 + [8])
	$10 = *($1 + [24])
	$4 = *(($1 + [28]))
	$11 = ($4 - $10)
	$12 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$2 }
	$4 = ( $6 ? ($11 + $6) : ((int_32)$10 == (int_32)$4) )
	if ( ($4 <= [513]) ){ goto $label$4 }
	$6 = CALL $45($4)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($3 + [8]) = $6
	*($3 + [16]) = ($6 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [8937])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert(((int_32)($4 + [-8]) > (int_32)[7]), [8937])
	CALL memcpy(($6 + [8]), $9, [8])
	CALL eosio_assert(((int_32)($4 + [-16]) > (int_32)[7]), [8937])
	CALL memcpy(($6 + [16]), $8, [8])
	*($3 + [12]) = ($6 + [24])
	CALL $27(($3 + [8]), $7)
	$12 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($5 + [8]), (int_64)7760153368969871360, *(*($0 + [8])), $12, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL $48($6)
	
.LABEL $label$5
	if ( (uint_64)($12 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$12 = *(($5 + [8]))
	$13 = *(*(($0 + [8])))
	$14 = *($1)
	*($3 + [24]) = (int_64))((int_64)0 - $14)
	*($1 + [44]) = CALL db_idx64_store($12, (int_64)7760153368969871360, $13, $14, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $48($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $43(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8944])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $43(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $48($0)
	
.LABEL $label$1
}

int_32 .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = [1]
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$30 }
	goto $label$12 
	
.LABEL $label$31
	$5 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$4 }
	*($0) = $2
	*($4) = $5
	return [1]
	
.LABEL $label$30
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$26 }
	$6 = ($2 & [255])
	if ( ((uint_32)$6 >= (uint_32)$4) ){ goto $label$23 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$22 
	
.LABEL $label$29
	$5 = ($1 + [-1])
	$2 = *($5)
	$6 = *($0)
	$4 = *($0 + [1])
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$25 }
	if ( ((uint_32)($2 & [255]) >= (uint_32)$4) ){ goto $label$18 }
	*($0) = $2
	*($5) = $6
	return [1]
	
.LABEL $label$28
	CALL $29($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	return [1]
	
.LABEL $label$27
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$24 }
	$7 = ($2 & [255])
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$17 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$16 
	
.LABEL $label$26
	$6 = ($2 & [255])
	if ( ((uint_32)$6 >= (uint_32)$4) ){ goto $label$20 }
	*(($0 + [2])) = $4
	*(($7 = ($0 + [1]))) = $2
	if ( ((uint_32)$6 >= (uint_32)$5) ){ goto $label$21 }
	*($0) = $2
	*($7) = $5
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	goto $label$3 
	
.LABEL $label$25
	if ( ((uint_32)($2 & [255]) >= (uint_32)$4) ){ goto $label$8 }
	$3 = [1]
	*(($6 = ($0 + [1]))) = $2
	*($5) = $4
	$2 = *($0)
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$7 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$24
	$7 = ($2 & [255])
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$15 }
	*(($0 + [2])) = $4
	*(($8 = ($0 + [1]))) = $2
	if ( ((uint_32)$7 >= (uint_32)$5) ){ goto $label$14 }
	*($0) = $2
	*($8) = $5
	goto $label$14 
	
.LABEL $label$23
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((uint_32)$6 >= (uint_32)$5) ){ goto $label$20 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$22
	$4 = $5
	
.LABEL $label$21
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	goto $label$5 
	
.LABEL $label$20
	$4 = $2
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$19
	$8 = [0]
	$9 = [0]
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)($4 & [255])) ){ goto $label$13 }
	$10 = [2]
	goto $label$1 
	
.LABEL $label$18
	*($0) = $4
	$3 = [1]
	*(($0 + [1])) = $6
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$6 }
	*(($0 + [1])) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$17
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((uint_32)$7 >= (uint_32)$5) ){ goto $label$15 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$16
	$4 = $5
	goto $label$14 
	
.LABEL $label$15
	$4 = $2
	
.LABEL $label$14
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)($4 & [255])) ){ goto $label$11 }
	*(($5 = ($0 + [2]))) = $2
	*($6) = $4
	$3 = [1]
	$2 = *(($0 + [1]))
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$10 }
	*($5) = $2
	$3 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$9 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$13
	$10 = [0]
	goto $label$1 
	
.LABEL $label$12
	$10 = [7]
	goto $label$1 
	
.LABEL $label$11
	$10 = [7]
	goto $label$1 
	
.LABEL $label$10
	$10 = [7]
	goto $label$1 
	
.LABEL $label$9
	$10 = [7]
	goto $label$1 
	
.LABEL $label$8
	$10 = [7]
	goto $label$1 
	
.LABEL $label$7
	$10 = [7]
	goto $label$1 
	
.LABEL $label$6
	$10 = [7]
	goto $label$1 
	
.LABEL $label$5
	$10 = [7]
	goto $label$1 
	
.LABEL $label$4
	$10 = [7]
	goto $label$1 
	
.LABEL $label$3
	$10 = [7]
	goto $label$1 
	
.LABEL $label$2
	$10 = [7]
	
.LABEL $label$1
	
.LOOP $label$32:
	goto $label$44 
	
.LABEL $label$50
	$3 = $8
	$10 = [3]
	goto $label$32 
	
.LABEL $label$49
	*((($2 = ($0 + $3)) + $6)) = $4
	if ( ((int_32)$3 == (int_32)[-2]) ){ goto $label$33 }
	$10 = [4]
	goto $label$32 
	
.LABEL $label$48
	$3 = ($3 + [-1])
	$4 = *(($2 + [1]))
	if ( ($5 <= $4) ){ goto $label$34 }
	$10 = [5]
	goto $label$32 
	
.LABEL $label$47
	*((($0 + $3) + $6)) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[8]) ){ goto $label$37 }
	goto $label$38 
	
.LABEL $label$46
	*($0) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[8]) ){ goto $label$35 }
	goto $label$36 
	
.LABEL $label$45
	$8 = ($8 + [1])
	$4 = *($7)
	$7 = $2
	$5 = *($7)
	if ( ($5 <= ($4 & [255])) ){ goto $label$39 }
	$10 = [0]
	goto $label$32 
	
.LABEL $label$44
	$3 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$40 }
	goto $label$41 
	
.LABEL $label$43
	$3 = ((int_32)($7 + [1]) == (int_32)$1)
	$10 = [7]
	goto $label$32 
	
.LABEL $label$42
	return $3
	
.LABEL $label$41
	$10 = [7]
	goto $label$32 
	
.LABEL $label$40
	$10 = [1]
	goto $label$32 
	
.LABEL $label$39
	$10 = [2]
	goto $label$32 
	
.LABEL $label$38
	$10 = [6]
	goto $label$32 
	
.LABEL $label$37
	$10 = [0]
	goto $label$32 
	
.LABEL $label$36
	$10 = [6]
	goto $label$32 
	
.LABEL $label$35
	$10 = [0]
	goto $label$32 
	
.LABEL $label$34
	$10 = [3]
	goto $label$32 
	
.LABEL $label$33
	$10 = [8]
	goto $label$32 
	$4
	return $10
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $45($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8944])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $45($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}