(data (i32.const 8192) "at least 1 digit\00")
(data (i32.const 8209) "negative value is not allowed\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8325) "out of range of buffer\00")
(data (i32.const 8348) "unexpected asset symbol input\00")
(data (i32.const 8378) "invalid sell\00")
(data (i32.const 8391) "invalid conversion\00")
(data (i32.const 8410) "err_invalid_pair_id\00")
(data (i32.const 8430) "err_pair_not_activated\00")
(data (i32.const 8453) "RTCCORE\00")
(data (i32.const 8461) "rtc may only be increased\00")
(data (i32.const 8487) "rtc size is unrealistic\00")
(data (i32.const 8511) "attempt to set max below reserved\00")
(data (i32.const 8545) "invalid quantity\00")
(data (i32.const 8562) "must purchase a positive amount\00")
(data (i32.const 8594) "invalid symbol\00")
(data (i32.const 8609) "err_fee_not_enough\00")
(data (i32.const 8628) "eosio.token\00")
(data (i32.const 8640) "rtc fee\00")
(data (i32.const 8648) "rtc market does not exist\00")
(data (i32.const 8674) "err_invalid_amount\00")
(data (i32.const 8693) "err_exceed_supply\00")
(data (i32.const 8711) "err_require_open_account\00")
(data (i32.const 8736) "transfer\00")
(data (i32.const 8745) "try to transfer 0 token with \00")
(data (i32.const 8775) "\n\00")
(data (i32.const 8777) "should be rtc\00")
(data (i32.const 8791) "cannot sell negative rtc\00")
(data (i32.const 8816) "found no account\00")
(data (i32.const 8833) "err_liquid_not_enough\00")
(data (i32.const 8855) "err_amount_too_small\00")
(data (i32.const 8876) "err_overdrawn_staked\00")
(data (i32.const 8897) "sell rtc\00")
(data (i32.const 8906) "err_invalid_fee\00")
(data (i32.const 8922) "sell rtc fee\00")
(data (i32.const 8935) "Received transfer from \00")
(data (i32.const 8959) " with \00")
(data (i32.const 8966) "call transfer with our contract direclty for rtc\n\00")
(data (i32.const 9016) "Possible attack, add sender to blacklist!!!\n\00")
(data (i32.const 9061) "should be from dex account\00")
(data (i32.const 9088) "quantity should be positive\00")
(data (i32.const 9116) "should not happen\00")
(data (i32.const 9134) "cannot transfer to self\00")
(data (i32.const 9158) "must transfer positive quantity\00")
(data (i32.const 9190) "should be eos token only\00")
(data (i32.const 9215) "memo has more than 256 bytes\00")
(data (i32.const 9244) "unexpected notification\00")
(data (i32.const 9268) "can only send to us\00")
(data (i32.const 9288) "buyrtc\00")
(data (i32.const 9295) "err_invalid_memo\00")
(data (i32.const 9312) "invalid memo length\00")
(data (i32.const 9332) "invalid memo separator\00")
(data (i32.const 9355) "invalid memo parts\00")
(data (i32.const 9374) "fee\00")
(data (i32.const 9378) "wrong title\00")
(data (i32.const 9390) "malicious action\00")
(data (i32.const 9407) "exch fee not found, should not happen\00")
(data (i32.const 9445) "contract mismatch, malicious behaviour!\00")
(data (i32.const 9485) "to account does not exist\00")
(data (i32.const 9511) "err_transfer_not_open\00")
(data (i32.const 9533) "should be rtc token\00")
(data (i32.const 9553) "no account object found\00")
(data (i32.const 9577) "overdrawn liquid balance\00")
(data (i32.const 9602) "err_invalid_account\00")
(data (i32.const 9622) "err_invalid_ram_payer\00")
(data (i32.const 9644) "err_already_open_account\00")
(data (i32.const 9669) "err_account_not_found\00")
(data (i32.const 9691) "err_total_not_zero\00")
(data (i32.const 9710) "err_liquid_not_zero\00")
(data (i32.const 9730) "err_staked_not_zero\00")
(data (i32.const 9750) "err_refund_not_zero\00")
(data (i32.const 9770) "should not have outstanding RTC\00")
(data (i32.const 9802) "stake table should be empty\00")
(data (i32.const 9830) "err_invalid_quantity\00")
(data (i32.const 9851) "err_not_multiply_of_1000\00")
(data (i32.const 9876) "err_staked_not_enough\00")
(data (i32.const 9898) "err_pair_not_found\00")
(data (i32.const 9917) "bonus not found, should not happed\00")
(data (i32.const 9952) "should not be pending\00")
(data (i32.const 9974) "should not be negative value\00")
(data (i32.const 10003) "bonus should not be negative\00")
(data (i32.const 10032) "remain bonus is not enough, should not happen\00")
(data (i32.const 10078) "pair_id is out of range\00")
(data (i32.const 10102) "cannot make snapshot before end of bonus period\00")
(data (i32.const 10150) "mismatch pair id, should not happen\00")
(data (i32.const 10186) "time is up, exit asap to avoid timeout error\00")
(data (i32.const 10231) "pair not found\00")
(data (i32.const 10246) "should be pending\00")
(data (i32.const 10264) "exchfee not found\00")
(data (i32.const 10282) "effect stake should be positive\00")
(data (i32.const 10314) "mismatch period\00")
(data (i32.const 10330) "should be the sudo account\00")
(data (i32.const 10357) "err_refund_not_found\00")
(data (i32.const 10378) "err_refund_not_available\00")
(data (i32.const 10403) "refund mismatch, should not happen\00")
(data (i32.const 10438) "invalid status\00")
(data (i32.const 10453) "same status\00")
(data (i32.const 10465) "err_venus_not_active\00")
(data (i32.const 10486) "not a invalid account\00")
(data (i32.const 10508) "invalid role\00")
(data (i32.const 10521) "account should be different\00")
(data (i32.const 10549) "status should be different\00")
(data (i32.const 10576) "should be greater than current supply\00")
(data (i32.const 10614) "should be greater than current reserved value\00")
(data (i32.const 10660) "should be less than max supply\00")
(data (i32.const 10691) "rtc supply is unrealistic\00")
(data (i32.const 10717) "info has more than 256 bytes\00")
(data (i32.const 10746) "err_require_claim_bonus\00")
(data (i32.const 10770) "stake not found\00")
(data (i32.const 10786) "should be pending state\00")
(data (i32.const 10810) "exch fee not found\00")
(data (i32.const 10829) "period should be positive\00")
(data (i32.const 10855) "exch bonus not found\00")
(data (i32.const 10876) "exch pair does not exist\00")
(data (i32.const 10901) "unexpected contract\00")
(data (i32.const 10921) "unexpected action\00")
(data (i32.const 10939) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10988) "invalid symbol name\00")
(data (i32.const 11008) "write\00")
(data (i32.const 11014) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 11073) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 11124) "error reading iterator\00")
(data (i32.const 11147) "read\00")
(data (i32.const 11152) "cannot pass end iterator to modify\00")
(data (i32.const 11187) "object passed to modify is not in multi_index\00")
(data (i32.const 11233) "cannot modify objects in table of another contract\00")
(data (i32.const 11284) "updater cannot change primary key when modifying an object\00")
(data (i32.const 11343) "attempt to add asset with different symbol\00")
(data (i32.const 11386) "addition underflow\00")
(data (i32.const 11405) "addition overflow\00")
(data (i32.const 11423) "attempt to subtract asset with different symbol\00")
(data (i32.const 11471) "subtraction underflow\00")
(data (i32.const 11493) "subtraction overflow\00")
(data (i32.const 11514) "overflow_exception\00")
(data (i32.const 11533) "singleton does not exist\00")
(data (i32.const 11558) "cannot create objects in table of another contract\00")
(data (i32.const 11609) "err_balance_mismatch\00")
(data (i32.const 11630) "balance mismatch\00")
(data (i32.const 11647) " | \00")
(data (i32.const 11651) ".\00")
(data (i32.const 11653) " \00")
(data (i32.const 11655) ",\00")
(data (i32.const 11657) "next primary key in table is at autoincrement limit\00")
(data (i32.const 11709) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 11763) "cannot decrement iterator at beginning of table\00")
(data (i32.const 11811) "cannot pass end iterator to erase\00")
(data (i32.const 11845) "cannot increment end iterator\00")
(data (i32.const 11875) "object passed to erase is not in multi_index\00")
(data (i32.const 11920) "cannot erase objects in table of another contract\00")
(data (i32.const 11970) "attempt to remove object that was not in multi_index\00")
(data (i32.const 12023) " Erased % records from table %\n\00")
(data (i32.const 12055) "liquid underflow\00")
(data (i32.const 12072) "staked underflow\00")
(data (i32.const 12089) "should not be negative\00")
(data (i32.const 12112) "bonus beyond current period, should not happen\00")
(data (i32.const 12159) "sanity checking\00")
(data (i32.const 12175) "divide by zero\00")
(data (i32.const 12190) "signed division overflow\00")
(data (i32.const 12215) "remain should be positive\00")
(data (i32.const 12241) "effect amount should not be negative\00")
(data (i32.const 12278) "total staked asset should be not negative\00")
(data (i32.const 12320) "total effect asset should be not negative\00")
(data (i32.const 12362) "err_exceed_stake_threshold\00")
(data (i32.const 12389) "get\00")
(data (i32.const 20816) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 20832) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 20848) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "db_find_i64" (func $fimport$0 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "db_store_i64" (func $fimport$3 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$8 (param i32 i64 i32)))
(import "env" "prints" (func $fimport$9 (param i32)))
(import "env" "prints_l" (func $fimport$10 (param i32 i32)))
(import "env" "send_inline" (func $fimport$11 (param i32 i32)))
(import "env" "printn" (func $fimport$12 (param i64)))
(import "env" "require_recipient" (func $fimport$13 (param i64)))
(import "env" "is_account" (func $fimport$14 (param i64) (result i32)))
(import "env" "has_auth" (func $fimport$15 (param i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "eosio_exit" (func $fimport$18 (param i32)))
(import "env" "printui" (func $fimport$19 (param i64)))
(import "env" "current_time" (func $fimport$20 (result i64)))
(import "env" "cancel_deferred" (func $fimport$21 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$22 (param i32 i64 i32 i32 i32)))
(import "env" "db_idx128_find_primary" (func $fimport$23 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$24 (param i32 i64 i32)))
(import "env" "action_data_size" (func $fimport$25 (result i32)))
(import "env" "read_action_data" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$28 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$29 (param i64)))
(import "env" "db_idx64_store" (func $fimport$30 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$32 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$33 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$34 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$35 (param i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$36 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$37 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_store" (func $fimport$38 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_next" (func $fimport$39 (param i32 i32) (result i32)))
(import "env" "db_idx128_remove" (func $fimport$40 (param i32)))
(import "env" "abort" (func $fimport$41))
(import "env" "memset" (func $fimport$42 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$43 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$46 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$47 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$48 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$50 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$51 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$52 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$53 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$54 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$55 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$56 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$57 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$58 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$59 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$60 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$61 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$62 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $127))
(export "_ZdlPv" (func $158))
(export "_Znwj" (func $156))
(export "_Znaj" (func $157))
(export "_ZdaPv" (func $159))
(table $0 16 16 anyfunc)
(elem (i32.const 1) $109 $108 $91 $60 $111 $107 $70 $110 $29 $79 $55 $104 $103 $20 $57)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20864))
(global $global$2 i32 (i32.const 20864))


int_32 .FUNC $174 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [11124])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $176($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $179($4)
	
.LABEL $label$6
	*(($5 = CALL _Znwj([208])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [176]) = $0
	CALL $134(($3 + [32]), $5)
	*($5 + [180]) = $1
	*($5 + [184 align=4]) = (int_64)-1
	*($5 + [192 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $135(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $176 (int_32 $0)
{
	return CALL $177([12408], $0)
}

int_32 .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $178($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8239])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_64 .FUNC $170 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC $171 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $173($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $170($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [20832])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [20816]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [20848]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $172($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $172 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ($2 & [1])
	$1 = ($0 + [1])
	$4 = ( *($0 + [8]) ? $1 : $3 )
	$5 = ( *($0 + [4]) ? uint_32($2 >> [1]) : $3 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = ($4 + $5)
	$2 = $4
	
.LOOP $label$4:
	if ( (CALL $168(*($2)) == 0) ){ goto $label$3 }
	$2 = ($2 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$4 }
	$2 = $3
	
.LABEL $label$3
	$3 = (*($0) & [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = $4
	
.LABEL $label$1
	CALL $164($0, ($4 - ( *($0 + [8]) ? $1 : $3 )), ($2 - $4))
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$10 }
	$6 = $1
	$2 = (($0 + uint_32($2 >> [1])) + [1])
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = *(($0 + [8]))
	$2 = ($6 + *($0 + [4]))
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (CALL $168(*(($2 + [-1]))) == 0) ){ goto $label$8 }
	$4 = ($6 + [1])
	
.LOOP $label$11:
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$7 }
	$5 = ($2 + [-2])
	$3 = ($2 + [-1])
	$2 = $3
	if ( CALL $168(*($5)) ){ goto $label$11 }
	$2 = $3
	
.LABEL $label$8
	$5 = [1]
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = $6
	$5 = [1]
	$4 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$5 = *(($0 + [8]))
	CALL $164($0, ($2 - $5), (($5 + *($0 + [4])) - $2))
	return 
	
.LABEL $label$5
	CALL $164($0, ($2 - $1), ((($0 + uint_32($4 >> $5)) + $5) - $2))
}

int_32 .FUNC $178 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [12400]) == 0) ){ goto $label$2 }
	$2 = *([0] + [12404])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [12400]) = [1]
	$2 = ($2 << [16])
	*([0] + [12404]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [12404])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [12404]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [12400]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [12400]) = [1]
	$3 = ($3 << [16])
	*([0] + [12404]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [12404])
	
.LABEL $label$10
	*([0] + [12404]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	float_64 $6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($1 + [8])), [8348])
	$4 = *($2)
	$5 = *($3)
	$6 = CALL $171(((float_64)((float_64)(CASTING float_64)(int_64 $5) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1) - $5))) + (float_64)(float_64)1), ((float_64)(float_64)1e3 / (float_64)*($2 + [16])))
	*($1) = (int_64))(*($1) - $5)
	$6 = ((float_64)((float_64)$6 + (float_64)(float_64)-1) * (float_64)(CASTING float_64)(int_64 $4))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$5 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($6)
	
.LABEL $label$1
	*($0) = $5
	*($2) = (int_64))(*($2) - $5)
	$4 = *($2 + [8])
	*($0 + [8]) = $4
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10939])
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$5 = $4
	$3 = [1]
	$1 = $2
	$2 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = $4
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$1 = ((int_32)$2 < (int_32)[6])
	$0 = ($2 + [1])
	$2 = $0
	if ( $1 ){ goto $label$8 }
	$3 = [1]
	$2 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert($3, [10988])
	return 
	
.LABEL $label$4
	CALL eosio_assert([0], [10988])
	return 
	
.LABEL $label$3
	CALL eosio_assert([0], [10988])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	float_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = *(($1 + [48]))
	$6 = *(($1 + [24]))
	$7 = *($2 + [8])
	if ( ((int_64)$7 != (int_64)*($1 + [8])) ){ goto $label$10 }
	if ( ((int_64)$6 != (int_64)$3) ){ goto $label$9 }
	$8 = ($2 + [8])
	$7 = *($8)
	*((($4 + [80]) + [8])) = $7
	$6 = *($2)
	*((($4 + [16]) + [8])) = $7
	*($4 + [80]) = $6
	*($4 + [16]) = $6
	CALL $4(($4 + [96]), $1, ($1 + [16]), ($4 + [16]))
	*($8) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$7 != (int_64)$6) ){ goto $label$8 }
	$7 = *($1)
	$8 = ($1 + [16])
	$6 = *($2)
	$9 = CALL $171(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$6))) + (float_64)(float_64)1), ((float_64)*(($1 + [32])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$6 + (int_64)*($8))
	$9 = !(float_64)((float_64)(float_64))((float_64)1 - $9) * (float_64)(CASTING float_64)(int_64 $7)
	if ( ((float_64)(float_64)|$9)| < (float_64)(float_64)9223372036854775808) ){ goto $label$7 }
	$5 = (int_64)-9223372036854775808
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_64)$5 != (int_64)$3) ){ goto $label$5 }
	$8 = ($2 + [8])
	$7 = *($8)
	*((($4 + [64]) + [8])) = $7
	$6 = *($2)
	*((($4 + [32]) + [8])) = $7
	*($4 + [64]) = $6
	*($4 + [32]) = $6
	CALL $4(($4 + [96]), $1, ($1 + [40]), ($4 + [32]))
	*($8) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$7 != (int_64)$5) ){ goto $label$4 }
	$7 = *($1)
	$8 = ($1 + [40])
	$6 = *($2)
	$9 = CALL $171(((float_64)((float_64)(CASTING float_64)(int_64 $6) / (float_64)(CASTING float_64)(int_64 ((int_64)*($8) + (int_64)$6))) + (float_64)(float_64)1), ((float_64)*(($1 + [56])) / (float_64)(float_64)1e3))
	*($8) = ((int_64)$6 + (int_64)*($8))
	$9 = !(float_64)((float_64)(float_64))((float_64)1 - $9) * (float_64)(CASTING float_64)(int_64 $7)
	if ( ((float_64)(float_64)|$9)| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$5 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$7
	$5 = (Rounds 0)($9)
	
.LABEL $label$6
	*($1) = ((int_64)*($1) + (int_64)$5)
	$10 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10939])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$6 = $7
	$11 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$6 = $7
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$15 }
	$11 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$11 = [0]
	
.LABEL $label$11
	CALL eosio_assert($11, [10988])
	*(($2 + [8])) = $10
	*($2) = $5
	goto $label$1 
	
.LABEL $label$5
	CALL eosio_assert([0], [8391])
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [8378])
	goto $label$1 
	
.LABEL $label$3
	$5 = (Rounds 0)($9)
	
.LABEL $label$2
	*($1) = ((int_64)*($1) + (int_64)$5)
	$10 = *(($1 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10939])
	$6 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$6 = $7
	$11 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$6 = $7
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $11 ){ goto $label$20 }
	$11 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$11 = [0]
	
.LABEL $label$16
	CALL eosio_assert($11, [10988])
	*(($2 + [8])) = $10
	*($2) = $5
	
.LABEL $label$1
	$8 = ($2 + [8])
	if ( ((int_64)*($8) != (int_64)$3) ){ goto $label$21 }
	*($0) = *($2)
	*(($0 + [8])) = *($8)
	$global$0 = ($4 + [112])
	return 
	
.LABEL $label$21
	$7 = *($8)
	*((($4 + [48]) + [8])) = $7
	$6 = *($2)
	*(($4 + [8])) = $7
	*($4 + [48]) = $6
	*($4) = $6
	CALL $5($0, $1, $4, $3)
	$global$0 = ($4 + [112])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [400])
	$global$0 = $3
	CALL memory()
	$4 = CALL $9(($3 + [8]), $0)
	CALL $114($4, $1, $2)
	CALL $16($4)
	CALL $169([0])
	$global$0 = ($3 + [400])
}

int_32 .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8192])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8209])
	if ( ((int_64)$1 > (int_64)9) ){ goto $label$1 }
	*($0) = ((CASTING uint_32)(uint_64 $1) + [48])
	return [1]
	
.LABEL $label$1
	$3 = ((uint_64)$1 / (uint_64)(int_64)10)
	$4 = CALL $3($0, $3, $2)
	CALL eosio_assert(((int_32)$4 < (int_32)$2), [8325])
	*(($0 + $4)) = ((CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$3 * (int_64)10))) | [48])
	return ($4 + [1])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *(*($4 + [4]))
	CALL eosio_assert([1], [10939])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [10988])
	*(($1 + [16])) = $6
	*($1 + [8]) = (int_64)0
	$6 = *(*(($4 + [4])))
	CALL eosio_assert([1], [10939])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$10 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [10988])
	*(($1 + [32])) = $6
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = (int_64)0
	$7 = CALL current_time()
	*($1 + [52]) = [0]
	*($1 + [56]) = [0]
	*($1 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [70])
	$10 = $2
	$8 = ($10 + [-64])
	$global$0 = $8
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = ($10 + [-7])
	CALL $151($3, $1)
	$7 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($5 + [8]), (int_64)6291761580392579072, *(*($0 + [8])), $7, $8, [57])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$11 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($3 + [16])
}

void .FUNC memory ()
{
}

int_32 .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [10988])
	*(($1 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [10988])
	*(($1 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [10988])
	*(($0 + [72])) = (int_64)0
	*($0 + [64]) = (int_64)0
	return $0
}

void .FUNC $42 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-1) <= (int_64)65534), [10078])
	*(($3 + [40])) = (int_64)0
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *(($0 + [136]))
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$0 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)6291769033721118720, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $6(($3 + [8]), $5)
	CALL eosio_assert(((int_32)*($0 + [176]) == (int_32)($3 + [8])), [11073])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [10876])
	*(($2 + [8])) = *(($0 + [40]))
	*($2) = *($0 + [32])
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($3 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [11187])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11233])
	$5 = ($1 + [8])
	*(($4 = $3) + [24]) = (int_64))((int_64)0 - *($5))
	$6 = *($1)
	$7 = *($2)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [16]))), [11343])
	$8 = ((int_64)*($5) + (int_64)*($7))
	*($5) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [11405])
	if ( (*(*($2 + [4])) == 0) ){ goto $label$1 }
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [11284])
	$2 = $3
	$5 = ($2 + [-80])
	$global$0 = $5
	*($4 + [12]) = $5
	*($4 + [8]) = $5
	*($4 + [16]) = $2
	CALL $71(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [84]), (int_64)0, $5, [80])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($4 + [40]) = (int_64))((int_64)0 - *(($1 + [8])))
	if ( (CALL $174(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$3 }
	$5 = ($1 + [88])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$4 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6291763602739167232, ($4 + [32]), $6)
	*($5) = $1
	
.LABEL $label$4
	CALL db_idx64_update($1, (int_64)0, ($4 + [40]))
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $40 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [96])
	$global$0 = $5
	*($5 + [48]) = $3
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-1) <= (int_64)65534), [10078])
	CALL eosio_assert(((int_64)$3 != (int_64)0), [10829])
	$6 = [0]
	*(($7 = ($5 + [40]))) = [0]
	*($5 + [16]) = $1
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$3 = *($0)
	*($5 + [8]) = $3
	$8 = CALL db_lowerbound_i64($3, $1, (int_64)6291761580392579072, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	CALL $46(($5 + [8]), $8)
	$2 = *($5 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert($2, [10855])
	$1 = *($0)
	*($5 + [4]) = $4
	*($5) = ($5 + [48])
	*($5 + [88]) = $1
	CALL eosio_assert(((int_64)$3 == (int_64)CALL $fimport$2()), [11558])
	*($5 + [68]) = $5
	*($5 + [64]) = ($5 + [8])
	*($5 + [72]) = ($5 + [88])
	$0 = CALL _Znwj([72])
	CALL $47($0)
	*($0 + [60]) = ($5 + [8])
	CALL $48(($5 + [64]), $0)
	*($5 + [80]) = $0
	$1 = *($0)
	*($5 + [64]) = $1
	$2 = *($0 + [64])
	*($5 + [60]) = $2
	$6 = ($5 + [36])
	$8 = *($6)
	if ( ((uint_32)$8 >= (uint_32)*($7)) ){ goto $label$6 }
	*($8 + [8]) = $1
	*($8 + [16]) = $2
	*($5 + [80]) = [0]
	*($8) = $0
	*($6) = ($8 + [24])
	$0 = *($5 + [80])
	*($5 + [80]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $49(($5 + [32]), ($5 + [80]), ($5 + [64]), ($5 + [60]))
	$0 = *($5 + [80])
	*($5 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$6 = [1]
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($5 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$10 }
	CALL _ZdlPv($8)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($5 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $2
	
.LABEL $label$7
	*($4) = $2
	CALL _ZdlPv($0)
	$global$0 = ($5 + [96])
	return $6
	
.LABEL $label$1
	$global$0 = ($5 + [96])
	return $6
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [10988])
	*(($1 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [10988])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [10988])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [10988])
	return $0
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [11124])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $176($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $179($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([72])
	$4 = CALL $47($5)
	*($5 + [60]) = $0
	CALL $147(($3 + [32]), $4)
	*($5 + [64]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $49(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *(*($4 + [4]))
	CALL eosio_assert([1], [10939])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [10988])
	*(($1 + [16])) = $6
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$7 = (int_64)4412498
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$10 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [10988])
	*(($1 + [32])) = (int_64)1129599492
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$7 = (int_64)4412498
	$8 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$7 = $9
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$15 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$10 = [0]
	
.LABEL $label$11
	CALL eosio_assert($10, [10988])
	*(($1 + [48])) = (int_64)1129599492
	*($1 + [40]) = (int_64)0
	*($1 + [56]) = (int_64)0
	$8 = *(($4 + [4]))
	*($1 + [64]) = *($8)
	*(($1 + [72])) = *(($8 + [8]))
	$10 = $2
	$8 = ($10 + [-80])
	$global$0 = $8
	*($3 + [12]) = $8
	*($3 + [8]) = $8
	*($3 + [16]) = $10
	CALL $71(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($5 + [8]), (int_64)6291763602739167232, *(*($0 + [8])), $7, $8, [80])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$16 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	$7 = *(($5 + [8]))
	$9 = *(*(($0 + [8])))
	$6 = *($1)
	*($3 + [24]) = (int_64))((int_64)0 - *(($1 + [8])))
	*($1 + [88]) = CALL db_idx64_store($7, (int_64)6291763602739167232, $9, $6, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $167 (int_32 $0)
{
	return (($0 + [-48]) <= [10])
}

void .FUNC $166 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $174(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $164 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $162 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $160 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $169 (int_32 $0)
{
}

int_32 .FUNC $168 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $175 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [11845])
	$2 = *($0 + [4])
	$3 = *($2 + [88])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)3607749779137757184, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [88]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$6), [11073])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $51($6, CALL $fimport$0(*($6), *($6 + [8]), (int_64)3607749779137757184, $5))
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$6), [11073])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [88])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [11875])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11920])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11970])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [84]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $145(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $50 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$0), [11073])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $51($0, $4)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$0), [11073])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [11124])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $176($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $179($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([104])
	$4 = CALL $52($5)
	*($5 + [80]) = $0
	CALL $143(($3 + [32]), $4)
	*($5 + [84]) = $1
	*($5 + [88 align=4]) = (int_64)-1
	*($5 + [96 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $54(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [10988])
	*(($1 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [10988])
	*(($1 = ($0 + [56]))) = (int_64)1397703940
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [10988])
	*(($1 = ($0 + [72]))) = (int_64)1397703940
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$20
	$2 = $3
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$21 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert($6, [10988])
	return $0
	
.LABEL $label$17
	CALL eosio_assert([0], [10988])
	return $0
	
.LABEL $label$16
	CALL eosio_assert([0], [10988])
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1 + [8]) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	$4 = *($4 + [4])
	*($1 + [32]) = *($4)
	*(($1 + [40])) = *(($4 + [8]))
	CALL eosio_assert([1], [10939])
	$7 = (int_64)4412498
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [10988])
	*(($1 + [56])) = (int_64)1129599492
	*($1 + [48]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$7 = (int_64)4412498
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$10 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [10988])
	*(($1 + [72])) = (int_64)1129599492
	*($1 + [64]) = (int_64)0
	$6 = $2
	$4 = ($6 + [-80])
	$global$0 = $4
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = $6
	CALL $25(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($5 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $7, $4, [80])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$11 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$4 = ($5 + [8])
	$7 = *($4)
	$6 = *(($0 + [8]))
	$8 = *($6)
	$10 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [88]) = CALL db_idx64_store($7, (int_64)3607749779137757184, $8, $10, ($3 + [24]))
	$7 = *($6)
	$8 = *($4)
	$10 = *($1)
	*($3 + [24]) = (int_64))((int_64)0 - *($1 + [16]))
	*(($1 + [92])) = CALL db_idx64_store($8, (int_64)3607749779137757185, $7, $10, ($3 + [24]))
	$7 = *($6)
	$8 = *($4)
	$10 = *($1)
	*($3 + [24]) = (int_64))((int_64)0 - *($1 + [32]))
	*(($1 + [96])) = CALL db_idx64_store($8, (int_64)3607749779137757186, $7, $10, ($3 + [24]))
	$7 = *($6)
	$8 = *($4)
	$10 = *($1)
	*($3 + [24]) = (int_64))((int_64)0 - *(($1 + [48])))
	*(($1 + [100])) = CALL db_idx64_store($8, (int_64)3607749779137757187, $7, $10, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [16]) = $1
	CALL require_auth($2)
	$4 = [1]
	CALL eosio_assert(((int_32)*(($0 + [168])) == (int_32)[1]), [10465])
	CALL eosio_assert(CALL eosio_assert4($1), [9602])
	CALL eosio_assert(CALL eosio_assert4($2), [9622])
	$5 = ($0 + [312])
	*($3 + [8]) = $5
	CALL $24(($3 + [32]), ($3 + [8]), ($3 + [16]))
	$6 = *($3 + [36])
	if ( ($6 == 0) ){ goto $label$1 }
	$4 = ((int_64)*($3 + [16]) != (int_64)*($6 + [8]))
	
.LABEL $label$1
	CALL eosio_assert($4, [9644])
	*($3 + [4]) = ($3 + [16])
	*($3) = $0
	*($3 + [56]) = $2
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$2()), [11558])
	*($3 + [32]) = $5
	*($3 + [36]) = $3
	*($3 + [40]) = ($3 + [56])
	$4 = CALL _Znwj([104])
	CALL $52($4)
	*($4 + [80]) = $5
	CALL $56(($3 + [32]), $4)
	*($3 + [48]) = $4
	$2 = *($4)
	*($3 + [32]) = $2
	$6 = *($4 + [84])
	*($3 + [28]) = $6
	$7 = ($0 + [340])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [344]))) ){ goto $label$4 }
	*($5 + [8]) = $2
	*($5 + [16]) = $6
	*($3 + [48]) = [0]
	*($5) = $4
	*($7) = ($5 + [24])
	$0 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $54(($0 + [336]), ($3 + [48]), ($3 + [32]), ($3 + [28]))
	$0 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [64])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [328])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [312])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [320])), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $51($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $144(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [328])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [11657])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	CALL eosio_assert([1], [10939])
	$8 = (int_64)4412498
	$6 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $11
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$8 = $11
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$7 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [10988])
	*(($1 + [24])) = (int_64)1129599492
	*($1 + [16]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$8 = (int_64)4412498
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$8 = $11
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$8 = $11
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$12 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [10988])
	*(($1 + [40])) = (int_64)1129599492
	*($1 + [32]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$8 = (int_64)4412498
	$6 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$8 = $11
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$8 = $11
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$17 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$5 = [0]
	
.LABEL $label$13
	CALL eosio_assert($5, [10988])
	*(($1 + [56])) = (int_64)1129599492
	*($1 + [48]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$8 = (int_64)4412498
	$6 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$8 = $11
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$8 = $11
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$22 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$5 = [0]
	
.LABEL $label$18
	CALL eosio_assert($5, [10988])
	*(($1 + [72])) = (int_64)1129599492
	*($1 + [64]) = (int_64)0
	$5 = $2
	$6 = ($5 + [-80])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = $5
	CALL $25(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $8, $6, [80])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$23 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$6 = ($4 + [8])
	$8 = *($6)
	$5 = *(($0 + [8]))
	$11 = *($5)
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [88]) = CALL db_idx64_store($8, (int_64)3607749779137757184, $11, $12, ($3 + [24]))
	$8 = *($5)
	$11 = *($6)
	$12 = *($1)
	*($3 + [24]) = (int_64))((int_64)0 - *(($1 + [16])))
	*(($1 + [92])) = CALL db_idx64_store($11, (int_64)3607749779137757185, $8, $12, ($3 + [24]))
	$8 = *($5)
	$11 = *($6)
	$12 = *($1)
	*($3 + [24]) = (int_64))((int_64)0 - *(($1 + [32])))
	*(($1 + [96])) = CALL db_idx64_store($11, (int_64)3607749779137757186, $8, $12, ($3 + [24]))
	$8 = *($5)
	$11 = *($6)
	$12 = *($1)
	*($3 + [24]) = (int_64))((int_64)0 - *(($1 + [48])))
	*(($1 + [100])) = CALL db_idx64_store($11, (int_64)3607749779137757187, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $57 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = $1
	CALL require_auth($1)
	*($2 + [8]) = ($0 + [312])
	CALL $24(($2 + [24]), ($2 + [8]), ($2 + [16]))
	$3 = ($2 + [8])
	$4 = *($2 + [28])
	if ( ($4 == 0) ){ goto $label$2 }
	$0 = [0]
	if ( ((int_64)*($2 + [16]) != (int_64)*($4 + [8])) ){ goto $label$1 }
	$3 = *($2 + [24])
	$0 = $4
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [9669])
	CALL eosio_assert((int_64)(*($0 + [16]) == 0), [9691])
	CALL eosio_assert((int_64)(*($0 + [32]) == 0), [9710])
	CALL eosio_assert((int_64)(*($0 + [48]) == 0), [9730])
	CALL eosio_assert((int_64)(*($0 + [64]) == 0), [9750])
	*($2 + [24]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $3))
	CALL eosio_assert($4, [11811])
	CALL $58(($2 + [24]))
	CALL $59(*($2 + [8]), $0)
	$global$0 = ($2 + [32])
}

int_64 .FUNC $173 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [48])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-5001342326447013888, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [52]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-5001342326447013887, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [56]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5001342326447013886, ($4 + [8]), *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

int_32 .FUNC $153 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [100]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11763])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4157660971118100480)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [11709])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11709])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $61(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11763])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5001342326447013888)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [11709])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11709])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $148(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [52]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $176($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [12396])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $176($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$7 = ($global$0 - [16])
	$global$0 = $7
	$8 = *($0)
	$9 = *($8 + [4])
	$10 = *($9 + [104])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$2 }
	$10 = *($8)
	$10 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)-4157660971118100480, $7, *($9))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($10)
	
.LABEL $label$1
	$8 = *($0)
	$9 = *($8 + [4])
	$10 = *(($9 + [108]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$4 }
	$10 = *($8)
	$10 = CALL db_idx128_find_primary(*($10), *($10 + [8]), (int_64)-4157660971118100479, $7, *($9))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx128_remove($10)
	
.LABEL $label$3
	$8 = *($0)
	$9 = *($8 + [4])
	$10 = *(($9 + [112]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$6 }
	$10 = *($8)
	$10 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)-4157660971118100478, $7, *($9))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($10)
	
.LABEL $label$5
	$8 = *($0)
	$9 = *($8 + [4])
	$10 = *(($9 + [116]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$8 }
	$10 = *($8)
	$10 = CALL db_idx128_find_primary(*($10), *($10 + [8]), (int_64)-4157660971118100477, $7, *($9))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx128_remove($10)
	
.LABEL $label$7
	$8 = *($0)
	$9 = *($8 + [4])
	$10 = *(($9 + [120]))
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$10 }
	$10 = *($8)
	$10 = CALL db_idx64_find_primary(*($10), *($10 + [8]), (int_64)-4157660971118100476, $7, *($9))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($10)
	
.LABEL $label$9
	$10 = *($0)
	$8 = *($10 + [4])
	$0 = *(($8 + [124]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$12 }
	$0 = *($10)
	$0 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100475, $7, *($8))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx128_remove($0)
	
.LABEL $label$11
	$global$0 = ($7 + [16])
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [12389])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $26($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [11147])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $179($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $179 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [20792])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [20600]
	$3 = (((int_32)$1 * (int_32)[12]) + [20600])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [11875])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11920])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [11970])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [140]))
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [11875])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11920])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((int_64)*(*(($5 + [-24])) + [8]) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8) + [8]) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11970])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *(($0 + [28]))
	if ( ((int_32)$2 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [136]) == (int_32)$0), [11073])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $10($0, $2)
	CALL eosio_assert(((int_32)*($2 + [136]) == (int_32)$0), [11073])
	
.LABEL $label$2
	CALL eosio_assert([1], [11811])
	CALL eosio_assert([1], [11845])
	$3 = CALL db_next_i64(*($2 + [140]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	CALL $10($0, $3)
	
.LABEL $label$4
	CALL $69($0, $2)
	
.LABEL $label$1
	$global$0 = ($1 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$5 = *($2 + [4])
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [11811])
	CALL eosio_assert($6, [11845])
	$6 = CALL db_next_i64(*($5 + [68]), ($3 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $11(*($2), $6)
	
.LABEL $label$1
	*(($2 + [4])) = $4
	CALL $68($1, $5)
	*($0) = *($2)
	$global$0 = ($3 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [11875])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11920])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11970])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [84]))
	$6 = *(($1 + [88]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6291763602739167232, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [11875])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11920])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11970])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [64]))
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [11124])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $176($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $179($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([128])
	$4 = CALL $76($5)
	*($5 + [96]) = $0
	CALL $146(($3 + [32]), $4)
	*($5 + [100]) = $1
	*($5 + [104 align=4]) = (int_64)-1
	*($5 + [112 align=4]) = (int_64)-1
	*($5 + [120 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $78(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$1 = ($global$0 - [112])
	$global$0 = $1
	CALL require_auth(*($0))
	CALL eosio_assert((int_64)(*(($0 + [96])) == 0), [9770])
	$2 = CALL db_lowerbound_i64(*($0 + [264]), *(($0 + [272])), (int_64)-4157660971118100480, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $61(($0 + [264]), $2)
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	$2 = [1]
	
.LABEL $label$1
	CALL eosio_assert($2, [9802])
	*((($1 + [72]) + [32])) = (int_64)0
	*($1 + [88]) = (int_64)-1
	*($1 + [96]) = (int_64)0
	$3 = *(($0 + [136]))
	*($1 + [72]) = $3
	*($1 + [80]) = $3
	$2 = CALL db_lowerbound_i64($3, $3, (int_64)6291769033721118720, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $6(($1 + [72]), $2)
	$5 = ($1 + [40])
	$6 = ($1 + [48])
	$7 = ($1 + [56])
	$8 = (($1 + [32]) + [32])
	$9 = ($1 + [60])
	
.LOOP $label$6:
	*($5) = *($4)
	*($6) = (int_64)-1
	*($7) = (int_64)0
	*($8) = [0]
	*($1 + [32]) = *($0)
	$3 = CALL $62(($1 + [32]), (int_64)10)
	$10 = *($7)
	if ( ($10 == 0) ){ goto $label$7 }
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$11 = *($2)
	*($2) = [0]
	if ( ($11 == 0) ){ goto $label$11 }
	CALL _ZdlPv($11)
	
.LABEL $label$11
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$10 }
	$2 = *($7)
	goto $label$8 
	
.LABEL $label$9
	$2 = $10
	
.LABEL $label$8
	*($9) = $10
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$4 }
	CALL eosio_assert([1], [11845])
	$2 = CALL db_next_i64(*($4 + [180]), ($1 + [32]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $6(($1 + [72]), $2)
	goto $label$6 
	
.LABEL $label$5
	if ( ((int_64)CALL $63(($0 + [224]), (int_64)10) == (int_64)0) ){ goto $label$3 }
	
.LABEL $label$4
	$10 = *($1 + [96])
	if ( ($10 == 0) ){ goto $label$12 }
	$4 = ($1 + [100])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($2 + [-24])
	$11 = *($2)
	*($2) = [0]
	if ( ($11 == 0) ){ goto $label$16 }
	CALL _ZdlPv($11)
	
.LABEL $label$16
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($1 + [96]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $10
	
.LABEL $label$13
	*($4) = $10
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($1 + [112])
	return (unreachable)
	
.LABEL $label$3
	$2 = ($0 + [8])
	CALL $15(($1 + [32]), $2, CALL $8([4], [8453]))
	*($1 + [24]) = *($1 + [32])
	*($1 + [8]) = *($1 + [24])
	CALL $64(($1 + [16]), $2, ($1 + [8]))
	CALL $65(($0 + [48]))
	CALL eosio_exit([0])
}

int_64 .FUNC $63 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)6291763602739167232, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $39($0, $4)
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	$3 = (int_64)0
	
.LOOP $label$2:
	$5 = [0]
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [11811])
	CALL eosio_assert($6, [11845])
	$6 = CALL db_next_i64(*($4 + [84]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $39($0, $6)
	
.LABEL $label$3
	CALL $67($0, $4)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ($5 == 0) ){ goto $label$1 }
	$4 = $5
	if ( (uint_64)($3 <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = [12023]
	$5 = *([12023])
	if ( ($5 == 0) ){ goto $label$4 }
	
.LOOP $label$6:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$5 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$6 
	
.LABEL $label$5
	CALL printui($3)
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$4 }
	
.LOOP $label$8:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$7 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$8 
	
.LABEL $label$7
	CALL printn((int_64)6291763602739167232)
	CALL prints(($4 + [1]))
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return $3
}

int_64 .FUNC $62 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($0), *($0 + [8]), (int_64)6291761580392579072, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $46($0, $4)
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	$3 = (int_64)0
	
.LOOP $label$2:
	$5 = [0]
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [11811])
	CALL eosio_assert($6, [11845])
	$6 = CALL db_next_i64(*($4 + [64]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $46($0, $6)
	
.LABEL $label$3
	CALL $66($0, $4)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ($5 == 0) ){ goto $label$1 }
	$4 = $5
	if ( (uint_64)($3 <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = [12023]
	$5 = *([12023])
	if ( ($5 == 0) ){ goto $label$4 }
	
.LOOP $label$6:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$5 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$6 
	
.LABEL $label$5
	CALL printui($3)
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$4 }
	
.LOOP $label$8:
	if ( ((int_32)$5 == (int_32)[37]) ){ goto $label$7 }
	CALL prints_l($4, [1])
	$4 = ($4 + [1])
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$8 
	
.LABEL $label$7
	CALL printn((int_64)6291761580392579072)
	CALL prints(($4 + [1]))
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return $3
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$5 }
	$5 = ($1 + [1])
	*($3 + [24]) = $5
	$4 = uint_32($4 >> [1])
	$1 = ($5 + $4)
	*($3 + [16]) = $1
	*($3 + [8]) = $5
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($1 + [8])
	*($3 + [24]) = $5
	$4 = *($1 + [4])
	$1 = ($5 + $4)
	*($3 + [16]) = $1
	*($3 + [8]) = $5
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($2 & [255])
	$7 = ($0 + [8])
	$8 = ($0 + [4])
	$2 = $5
	
.LOOP $label$6:
	if ( ((int_32)*($2) != (int_32)$6) ){ goto $label$12 }
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*($7)) ){ goto $label$11 }
	*($1) = (int_64)0
	*(($1 + [8])) = [0]
	$9 = ($2 - $5)
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$9 > (uint_32)[10]) ){ goto $label$10 }
	*($1) = ($9 << [1])
	$4 = ($1 + [1])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$2 = ($2 + [1])
	*($3 + [8]) = $2
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$11
	CALL $2($0, ($3 + [24]), ($3 + [8]))
	goto $label$7 
	
.LABEL $label$10
	$10 = (($9 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1) = ($10 | [1])
	*($1 + [8]) = $4
	*($1 + [4]) = $9
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = $4
	
.LOOP $label$13:
	*($1) = *($5)
	$1 = ($1 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$13 }
	$4 = ($4 + $9)
	
.LABEL $label$8
	*($4) = [0]
	*($8) = (*($8) + [12])
	
.LABEL $label$7
	$2 = (*($3 + [8]) + [1])
	*($3 + [24]) = $2
	$1 = *($3 + [16])
	$5 = $2
	*($3 + [8]) = $2
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$6 }
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$16 }
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)*($0 + [8])) ){ goto $label$17 }
	*($2) = (int_64)0
	*(($2 + [8])) = [0]
	$4 = ($1 - $5)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$15 }
	*($2) = ($4 << [1])
	$6 = ($2 + [1])
	goto $label$14 
	
.LABEL $label$17
	CALL $2($0, ($3 + [24]), ($3 + [16]))
	
.LABEL $label$16
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$15
	$8 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($2) = ($8 | [1])
	*($2 + [8]) = $6
	*($2 + [4]) = $4
	
.LABEL $label$14
	$2 = $6
	
.LOOP $label$18:
	*($2) = *($5)
	$2 = ($2 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$18 }
	*(($6 + $4)) = [0]
	*(($5 = ($0 + [4]))) = (*($5) + [12])
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $160($1)
	
.LABEL $label$1
	CALL $160($2)
}

int_32 .FUNC $89 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [11845])
	$2 = *($0 + [4])
	$3 = *(($2 + [108]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx128_find_primary(*($3), *($3 + [8]), (int_64)-4157660971118100479, $1, *($2))
	*((*(($0 + [4])) + [108])) = $3
	
.LABEL $label$1
	*($1) = (int_64)0
	$4 = CALL db_idx128_next($3, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1)
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$6), [11073])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $61($6, CALL $fimport$0(*($6), *($6 + [8]), (int_64)-4157660971118100480, $5))
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$6), [11073])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [108])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [11187])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11233])
	$4 = ($1 + [40])
	$5 = *($4)
	$6 = *(($1 + [16]))
	$7 = *(($1 + [56]))
	$8 = *(($1 + [8]))
	$9 = *($1 + [24])
	$10 = ($1 + [48])
	CALL eosio_assert(((int_64)*($10) == (int_64)*(($1 + [32]))), [11343])
	$9 = ((int_64)$9 + (int_64)*($4))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [11405])
	*(((($11 = $3) + [80]) + [24])) = $8
	$12 = [0]
	$13 = (int_64)
	*((($11 + [80]) + [56])) = (int_64))($13((int_64)0 - $8)) - (CASTING uint_64)(uint_32 ((int_32)$7 != (int_32)[0])))
	*(($11 + [168])) = (int_64))($13 - (CASTING uint_64)(uint_32 ((int_64)$9 != (int_64)0)))
	*($11 + [96]) = $6
	$13 = (CASTING uint_64)(uint_32 $7)
	*($11 + [128]) = (int_64))((int_64)0 - $13)
	*($11 + [160]) = (int_64))((int_64)0 - $9)
	*($11 + [80]) = $6
	*($11 + [112]) = (CASTING uint_64)(uint_32 ([0] - $7))
	*($11 + [144]) = ((int_64)((int_64)((int_64)$8 << (int_64)40) | (int_64)$13) | (int_64)((int_64)(CASTING uint_64)(uint_32 ((int_64)$5 > (int_64)0)) << (int_64)32))
	$9 = *($1)
	$14 = *($2 + [4])
	$15 = *($2)
	CALL eosio_assert(((int_64)*($10) == (int_64)*($15 + [8])), [11014])
	$7 = *($2)
	if ( ((int_64)*($4) >= (int_64)*($15)) ){ goto $label$4 }
	$8 = *($7)
	$13 = *($7 + [8])
	CALL eosio_assert(((int_64)*($10) == (int_64)$13), [11423])
	$5 = (int_64)
	CALL eosio_assert(((int_64)$5($8 - *($4))) > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [11493])
	CALL eosio_assert([1], [10939])
	$8 = (int_64)4412498
	$12 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $6
	$4 = [1]
	$7 = $12
	$12 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$6
	$8 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$12 < (int_32)[6])
	$7 = ($12 + [1])
	$12 = $7
	if ( $4 ){ goto $label$7 }
	$4 = [1]
	$12 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*($10)), [11423])
	$8 = (int_64)
	*($4) = $8(*($4) - *($7)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [11493])
	$5 = *(*($2 + [8]))
	$4 = *($2)
	*((($11 + [192]) + [8])) = *(($4 + [8]))
	*($11 + [192]) = *($4)
	*($11 + [192]) = (int_64))((int_64)0 - *($11 + [192]))
	CALL eosio_assert([1], [10939])
	$8 = (int_64)4412498
	
.LOOP $label$9:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $6
	$10 = [1]
	$4 = $12
	$12 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$8 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$12 < (int_32)[6])
	$7 = ($12 + [1])
	$12 = $7
	if ( $4 ){ goto $label$11 }
	$10 = [1]
	$12 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($10, [10988])
	*((($11 + [32]) + [8])) = (int_64)1129599492
	*((($11 + [48]) + [8])) = *((($11 + [192]) + [8]))
	*($11 + [176]) = (int_64)0
	*($11 + [184]) = (int_64)1129599492
	*($11 + [32]) = (int_64)0
	*($11 + [48]) = *($11 + [192])
	CALL $112($14, $5, ($11 + [48]), ($11 + [32]))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [10988])
	*(($1 + [48])) = (int_64)1129599492
	*(($1 + [40])) = (int_64)0
	CALL eosio_assert(((int_64)$5 > (int_64)0), [12215])
	CALL eosio_assert(((int_64)$13 == (int_64)*(($1 + [32]))), [11423])
	$8 = (int_64)
	*(($12 = ($1 + [24]))) = $8(*($12) - $5))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)*($12) < (int_64)4611686018427387904), [11493])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($12) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [12241])
	$8 = *(*($2 + [8]))
	$4 = *($2)
	*(($12 = (($11 + [192]) + [8]))) = *(($4 + [8]))
	$6 = *($4)
	*(($11 + [8])) = $13
	*((($11 + [16]) + [8])) = *($12)
	*($11 + [192]) = $6
	*($11 + [192]) = (int_64))((int_64)0 - *($11 + [192]))
	$6 = (int_64)
	*($11 + [176]) = $6((int_64)0 - $5))
	*($11) = $6
	*($11 + [184]) = $13
	*($11 + [16]) = *($11 + [192])
	CALL $112($14, $8, ($11 + [16]), $11)
	
.LABEL $label$1
	if ( ((int_64)((int_64)*(($1 + [40])) | (int_64)*(($1 + [24]))) != (int_64)0) ){ goto $label$12 }
	*(*($2 + [12])) = [1]
	
.LABEL $label$12
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [11284])
	$4 = $3
	$12 = ($4 + [-96])
	$global$0 = $12
	*($11 + [68]) = $12
	*($11 + [64]) = $12
	*($11 + [72]) = ($4 + [-4])
	CALL $93(($11 + [64]), $1)
	CALL db_update_i64(*($1 + [100]), (int_64)0, $12, [92])
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$12 = (($11 + [80]) + [16])
	$4 = ($1 + [16])
	*($11 + [192]) = *($4)
	if ( (CALL $174(($11 + [80]), ($11 + [192]), [8]) == 0) ){ goto $label$14 }
	$2 = ($1 + [104])
	$7 = *($2)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$15 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100480, ($11 + [176]), $9)
	*($2) = $7
	
.LABEL $label$15
	CALL db_idx64_update($7, (int_64)0, ($11 + [192]))
	
.LABEL $label$14
	$7 = (($11 + [80]) + [32])
	*($11 + [200]) = *(($1 + [8]))
	*($11 + [192]) = *($4)
	if ( (CALL $174($12, ($11 + [192]), [16]) == 0) ){ goto $label$16 }
	$4 = ($1 + [108])
	$12 = *($4)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$17 }
	$12 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100479, ($11 + [176]), $9)
	*($4) = $12
	
.LABEL $label$17
	CALL db_idx128_update($12, (int_64)0, ($11 + [192]))
	
.LABEL $label$16
	$12 = (($11 + [80]) + [48])
	$4 = ($1 + [56])
	*($11 + [192]) = (CASTING uint_64)(uint_32 ([0] - *($4)))
	if ( (CALL $174($7, ($11 + [192]), [8]) == 0) ){ goto $label$18 }
	$2 = ($1 + [112])
	$7 = *($2)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$19 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100478, ($11 + [176]), $9)
	*($2) = $7
	
.LABEL $label$19
	CALL db_idx64_update($7, (int_64)0, ($11 + [192]))
	
.LABEL $label$18
	$7 = ($11 + [144])
	$8 = *($4)
	*($11 + [192]) = (int_64))((int_64)0 - $8)
	*($11 + [200]) = (int_64))((int_64))((int_64)0 - *(($1 + [8]))) - (CASTING uint_64)(uint_32 ((int_64)$8 != (int_64)0)))
	if ( (CALL $174($12, ($11 + [192]), [16]) == 0) ){ goto $label$20 }
	$4 = ($1 + [116])
	$12 = *($4)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$21 }
	$12 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100477, ($11 + [176]), $9)
	*($4) = $12
	
.LABEL $label$21
	CALL db_idx128_update($12, (int_64)0, ($11 + [192]))
	
.LABEL $label$20
	$12 = ($11 + [160])
	$2 = ($1 + [40])
	$4 = ($1 + [8])
	*($11 + [192]) = ((int_64)((int_64)((int_64)*($4) << (int_64)40) | (int_64)*(($1 + [56]))) | (int_64)((int_64)(CASTING uint_64)(uint_32 ((int_64)*($2) > (int_64)0)) << (int_64)32))
	if ( (CALL $174($7, ($11 + [192]), [8]) == 0) ){ goto $label$22 }
	$10 = ($1 + [120])
	$7 = *($10)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$23 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100476, ($11 + [176]), $9)
	*($10) = $7
	
.LABEL $label$23
	CALL db_idx64_update($7, (int_64)0, ($11 + [192]))
	
.LABEL $label$22
	$6 = *($4)
	$8 = *(($1 + [24]))
	CALL eosio_assert(((int_64)*(($1 + [48])) == (int_64)*(($1 + [32]))), [11343])
	$8 = ((int_64)$8 + (int_64)*($2))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [11405])
	*($11 + [200]) = (int_64))((int_64))((int_64)0 - $6) - (CASTING uint_64)(uint_32 ((int_64)$8 != (int_64)0)))
	*($11 + [192]) = (int_64))((int_64)0 - $8)
	if ( (CALL $174($12, ($11 + [192]), [16]) == 0) ){ goto $label$24 }
	$1 = ($1 + [124])
	$12 = *($1)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$25 }
	$12 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100475, ($11 + [176]), $9)
	*($1) = $12
	
.LABEL $label$25
	CALL db_idx128_update($12, (int_64)0, ($11 + [192]))
	
.LABEL $label$24
	$global$0 = ($11 + [208])
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $130($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $26($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $131($2, $1)
	CALL $133(CALL $132(CALL $132($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $26(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [11008])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [368])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [352])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [360])), (int_64)-5001342326447013888, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $148($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $150(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [368])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [11657])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	$5 = *($5 + [8])
	*(($1 + [32])) = *(($5 + [8]))
	*($1 + [24]) = *($5)
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = $2
	$2 = ($5 + [-48])
	$global$0 = $2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($5 + [-12])
	CALL $82(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-5001342326447013888, *(*($0 + [8])), $8, $2, [36])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = ($4 + [8])
	$8 = *($4)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [48]) = CALL db_idx64_store($8, (int_64)-5001342326447013888, $11, $12, ($3 + [24]))
	$8 = *($0)
	$11 = *($4)
	$12 = *($1)
	*($3 + [24]) = *(($1 + [16]))
	*(($1 + [52])) = CALL db_idx64_store($11, (int_64)-5001342326447013887, $8, $12, ($3 + [24]))
	$8 = *($0)
	$11 = *($4)
	$12 = *($1)
	*($3 + [24]) = (int_64))((int_64)0 - *($1 + [24]))
	*(($1 + [56])) = CALL db_idx64_store($11, (int_64)-5001342326447013886, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-5001342326447013888, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [11073])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $148($7, CALL $fimport$0(*($7), *($7 + [8]), (int_64)-5001342326447013888, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [11073])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $80 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [48]) = $3
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)65534), [10078])
	*($4 + [44]) = [0]
	*($4 + [32]) = (int_64)0
	CALL $73($0, $3, ($4 + [44]), ($4 + [32]))
	*($4 + [24]) = ($0 + [264])
	*($4 + [8]) = $3
	*($4) = $1
	CALL $74(($4 + [56]), ($4 + [24]), $4)
	$5 = ($4 + [24])
	$6 = *($4 + [60])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = [0]
	if ( ((int_64)((int_64)((int_64)*($4) ^ (int_64)*($6 + [16])) | (int_64)((int_64)*($4 + [8]) ^ (int_64)*($6 + [8]))) != (int_64)0) ){ goto $label$1 }
	$5 = *($4 + [56])
	$7 = $6
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [10770])
	*($4 + [56]) = [0]
	CALL eosio_assert(((int_64)*($7 + [64]) == (int_64)*($4 + [32])), [10746])
	*($4 + [4]) = $0
	*($4) = $2
	*($4 + [8]) = ($4 + [48])
	*($4 + [12]) = ($4 + [56])
	CALL eosio_assert($6, [11152])
	CALL $88(*($4 + [24]), $7, $4)
	if ( (*($4 + [56]) == 0) ){ goto $label$3 }
	*($4) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $5))
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [11811])
	CALL $89($4)
	CALL $90(*($4 + [24]), $7)
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [11147])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [11124])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $176($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $179($4)
	
.LABEL $label$6
	$6 = ($0 + [24])
	*(($7 = CALL _Znwj([64])) + [32]) = (int_64)1397703940
	*($7 + [24]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$8 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $9
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [10988])
	*($7 + [40]) = $0
	CALL $149(($3 + [32]), $7)
	*($7 + [44]) = $1
	*($7 + [48 align=4]) = (int_64)-1
	*($7 + [56]) = [-1]
	*($3 + [24]) = $7
	$8 = *($7)
	*($3 + [16]) = $8
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $8
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $7
	*($4) = ($5 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $84($6, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	$global$0 = ($3 + [48])
	return $7
}

void .FUNC $145 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *($7 + [88])
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$2 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3607749779137757184, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($8)
	
.LABEL $label$1
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [92]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$4 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3607749779137757185, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($8)
	
.LABEL $label$3
	$6 = *($0)
	$7 = *($6 + [4])
	$8 = *(($7 + [96]))
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$6 }
	$8 = *($6)
	$8 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3607749779137757186, ($5 + [8]), *($7))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($8)
	
.LABEL $label$5
	$8 = *($0)
	$6 = *($8 + [4])
	$0 = *(($6 + [100]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$8 }
	$0 = *($8)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749779137757187, ($5 + [8]), *($6))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($0)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

int_32 .FUNC $144 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [84]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11763])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)3607749779137757184)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [11709])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11709])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $51(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [11147])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [11147])
	CALL memcpy(($1 + [52]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [11147])
	CALL memcpy(($1 + [56]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [11147])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([11655])
	
.LABEL $label$1
	$3 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)8)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)16)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)24)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)56)
	*($2 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [11008])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [11008])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $72 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [112])
	$global$0 = $4
	*($4 + [56]) = $3
	*($4 + [64]) = $1
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)65534), [10078])
	$5 = ($0 + [264])
	*($4 + [48]) = $5
	*($4 + [44]) = [0]
	*($4 + [32]) = (int_64)0
	CALL $73($0, $3, ($4 + [44]), ($4 + [32]))
	*($4 + [28]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($4 + [8]) = $3
	*($4) = $1
	CALL $74(($4 + [80]), ($4 + [48]), $4)
	$6 = *($4 + [84])
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ((int_64)(((int_64)((int_64)*($4) ^ (int_64)*($6 + [16])) | (int_64)((int_64)*($4 + [8]) ^ (int_64)*($6 + [8]))) == 0) == 0) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($6 + [64]) == (int_64)*($4 + [32])), [10746])
	*($4) = $2
	*($4 + [12]) = $0
	*($4 + [4]) = ($4 + [44])
	*($4 + [8]) = ($4 + [28])
	*($4 + [16]) = ($4 + [56])
	CALL eosio_assert([1], [11152])
	CALL $75(*($4 + [48]), $6, $4)
	$global$0 = ($4 + [112])
	return 
	
.LABEL $label$1
	*($4 + [20]) = $2
	*($4 + [4]) = ($4 + [56])
	*($4 + [8]) = ($4 + [64])
	*($4 + [12]) = ($4 + [28])
	*($4 + [16]) = ($4 + [44])
	*($4 + [24]) = ($4 + [32])
	*($4) = $0
	*($4 + [104]) = $1
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$2()), [11558])
	*($4 + [80]) = $5
	*($4 + [84]) = $4
	*($4 + [88]) = ($4 + [104])
	$6 = CALL _Znwj([128])
	CALL $76($6)
	*($6 + [96]) = $5
	CALL $77(($4 + [80]), $6)
	*($4 + [96]) = $6
	$3 = *($6)
	*($4 + [80]) = $3
	$2 = *($6 + [100])
	*($4 + [76]) = $2
	$7 = ($0 + [292])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [296]))) ){ goto $label$4 }
	*($5 + [8]) = $3
	*($5 + [16]) = $2
	*($4 + [96]) = [0]
	*($5) = $6
	*($7) = ($5 + [24])
	$6 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $78(($0 + [288]), ($4 + [96]), ($4 + [80]), ($4 + [76]))
	$6 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($6)
	
.LABEL $label$2
	*(($6 = ($0 + [184]))) = ((int_64)*($6) + (int_64)1)
	CALL $17(($0 + [48]), ($0 + [88]), *($0))
	$global$0 = ($4 + [112])
}

void .FUNC $73 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-1) <= (int_64)65534), [10078])
	*(($4 + [32])) = [0]
	*($4 + [8]) = $1
	*($4 + [16]) = (int_64)-1
	$5 = *($0)
	*($4) = $5
	*($4 + [24]) = (int_64)0
	$0 = [0]
	$6 = CALL db_lowerbound_i64($5, $1, (int_64)6291761580392579072, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	CALL $46($4, $6)
	$0 = [1]
	
.LABEL $label$1
	CALL eosio_assert($0, [10231])
	*($4 + [44]) = [0]
	*($4 + [40]) = $4
	CALL eosio_assert((*(*(CALL $100(($4 + [40])) + [4]) + [56]) == 0), [10786])
	*($4 + [44]) = [0]
	*($4 + [40]) = $4
	*($2) = *(*(CALL $100(($4 + [40])) + [4]) + [48])
	*($4 + [44]) = [0]
	*($4 + [40]) = $4
	*($3) = *(*(CALL $100(($4 + [40])) + [4]))
	$3 = *($4 + [24])
	if ( ($3 == 0) ){ goto $label$2 }
	$6 = ($4 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($4 + [24]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $3
	
.LABEL $label$3
	*($6) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($4 + [48])
}

void .FUNC $70 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [192])
	$global$0 = $4
	*($4 + [40]) = $1
	CALL require_auth($1)
	CALL eosio_assert(((int_32)*(($0 + [168])) == (int_32)[1]), [10465])
	CALL eosio_assert(CALL eosio_assert4($1), [9602])
	$5 = *($2 + [8])
	$6 = [0]
	$7 = *($2)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $9
	$6 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9830])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8674])
	CALL eosio_assert(((int_64)$5 == (int_64)1129599492), [8594])
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)65534), [8410])
	CALL eosio_assert((int_64)(((uint_64)$7 % (uint_64)(int_64)10000000) == 0), [9851])
	CALL $38($0, $3, [1])
	$11 = ($0 + [224])
	$6 = *(($0 + [252]))
	$12 = *(($0 + [248]))
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$9:
	$8 = ($6 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10) == (int_64)$3) ){ goto $label$8 }
	$6 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$11), [11073])
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	$8 = CALL db_find_i64(*($11), *(($0 + [232])), (int_64)6291763602739167232, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $39($11, $8)
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$11), [11073])
	
.LABEL $label$6
	$8 = [0]
	$6 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($6, [9407])
	if ( (CALL $40($0, $3, [1], ((int_64)*($10 + [56]) + (int_64)1), ($10 + [64])) == 0) ){ goto $label$10 }
	CALL eosio_assert($6, [11152])
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$11), [11187])
	CALL eosio_assert(((int_64)*(($0 + [224])) == (int_64)CALL $fimport$2()), [11233])
	*($10 + [56]) = ((int_64)*($10 + [56]) + (int_64)1)
	$6 = ($10 + [8])
	*($4 + [176]) = (int_64))((int_64)0 - *($6))
	$1 = *($10)
	CALL eosio_assert([1], [11284])
	*($4 + [152]) = (($4 + [48]) + [80])
	*($4 + [148]) = ($4 + [48])
	*($4 + [144]) = ($4 + [48])
	CALL $71(($4 + [144]), $10)
	CALL db_update_i64(*($10 + [84]), (int_64)0, ($4 + [48]), [80])
	$12 = ($0 + [240])
	if ( (uint_64)($1 <= *($12)) ){ goto $label$11 }
	*($12) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($4 + [128]) = (int_64))((int_64)0 - *($6))
	if ( (CALL $174(($4 + [176]), ($4 + [128]), [8]) == 0) ){ goto $label$10 }
	$10 = ($10 + [88])
	$6 = *($10)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$12 }
	$6 = CALL db_idx64_find_primary(*(($0 + [224])), *(($0 + [232])), (int_64)6291763602739167232, ($4 + [184]), $1)
	*($10) = $6
	
.LABEL $label$12
	CALL db_idx64_update($6, (int_64)0, ($4 + [128]))
	
.LABEL $label$10
	*($4 + [32]) = ($0 + [312])
	CALL $24(($4 + [48]), ($4 + [32]), ($4 + [40]))
	$6 = *($4 + [52])
	if ( ($6 == 0) ){ goto $label$13 }
	$8 = ( $6 ? [0] : ((int_64)*($4 + [40]) == (int_64)*($6 + [8])) )
	
.LABEL $label$13
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [8711])
	$12 = ($8 + [40])
	CALL eosio_assert(((int_64)*($12) == (int_64)$5), [11014])
	CALL eosio_assert(((int_64)*($8 + [32]) >= (int_64)$7), [8833])
	CALL eosio_assert($6, [11152])
	$6 = *($4 + [32])
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$6), [11187])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$2()), [11233])
	$11 = ($8 + [8])
	*($4 + [144]) = *($11)
	*($4 + [152]) = (int_64))((int_64)0 - *(($8 + [16])))
	*($4 + [160]) = (int_64))((int_64)0 - *($8 + [32]))
	$10 = ($8 + [48])
	*($4 + [168]) = (int_64))((int_64)0 - *($10))
	$1 = *($8)
	CALL eosio_assert(((int_64)$5 == (int_64)*($12)), [11423])
	$7 = (int_64)
	*($8 + [32]) = $7(*($8 + [32]) - $7))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)*($8 + [32]) < (int_64)4611686018427387904), [11493])
	CALL eosio_assert(((int_64)$5 == (int_64)*(($8 + [56]))), [11343])
	$5 = ((int_64)*($10) + (int_64)*($2))
	*($10) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($8 + [32]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [12055])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [11284])
	*($4 + [136]) = (($4 + [48]) + [80])
	*($4 + [132]) = ($4 + [48])
	*($4 + [128]) = ($4 + [48])
	CALL $25(($4 + [128]), $8)
	CALL db_update_i64(*($8 + [84]), (int_64)0, ($4 + [48]), [80])
	if ( (uint_64)($1 <= *($6 + [16])) ){ goto $label$14 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$10 = (($4 + [144]) + [8])
	*($4 + [184]) = *($11)
	if ( (CALL $174(($4 + [144]), ($4 + [184]), [8]) == 0) ){ goto $label$15 }
	$11 = ($8 + [88])
	$12 = *($11)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$16 }
	$12 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)3607749779137757184, ($4 + [176]), $1)
	*($11) = $12
	
.LABEL $label$16
	CALL db_idx64_update($12, (int_64)0, ($4 + [184]))
	
.LABEL $label$15
	$12 = (($4 + [144]) + [16])
	*($4 + [184]) = (int_64))((int_64)0 - *(($8 + [16])))
	if ( (CALL $174($10, ($4 + [184]), [8]) == 0) ){ goto $label$17 }
	$11 = ($8 + [92])
	$10 = *($11)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$18 }
	$10 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)3607749779137757185, ($4 + [176]), $1)
	*($11) = $10
	
.LABEL $label$18
	CALL db_idx64_update($10, (int_64)0, ($4 + [184]))
	
.LABEL $label$17
	$10 = ($4 + [168])
	*($4 + [184]) = (int_64))((int_64)0 - *(($8 + [32])))
	if ( (CALL $174($12, ($4 + [184]), [8]) == 0) ){ goto $label$19 }
	$11 = ($8 + [96])
	$12 = *($11)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$20 }
	$12 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)3607749779137757186, ($4 + [176]), $1)
	*($11) = $12
	
.LABEL $label$20
	CALL db_idx64_update($12, (int_64)0, ($4 + [184]))
	
.LABEL $label$19
	*($4 + [184]) = (int_64))((int_64)0 - *(($8 + [48])))
	if ( (CALL $174($10, ($4 + [184]), [8]) == 0) ){ goto $label$21 }
	$10 = ($8 + [100])
	$8 = *($10)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	$8 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)3607749779137757187, ($4 + [176]), $1)
	*($10) = $8
	
.LABEL $label$22
	CALL db_idx64_update($8, (int_64)0, ($4 + [184]))
	
.LABEL $label$21
	$1 = *($2)
	$5 = *(($2 + [8]))
	*(($4 + [8])) = $5
	*((($4 + [16]) + [8])) = $5
	*($4) = $1
	*($4 + [16]) = $1
	CALL $72($0, *($4 + [40]), $4, $3)
	$global$0 = ($4 + [192])
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [24]) = (int_64)0
	*(($1 = ($0 + [32]))) = (int_64)1397703940
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [10988])
	*(($1 = ($0 + [48]))) = (int_64)1397703940
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [10988])
	*(($1 = ($0 + [80]))) = (int_64)1397703940
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$16 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert($6, [10988])
	return $0
	
.LABEL $label$12
	CALL eosio_assert([0], [10988])
	return $0
	
.LABEL $label$11
	CALL eosio_assert([0], [10988])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [280])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [264])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [272])), (int_64)-4157660971118100480, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $61($9, $10)
	*($3 + [52]) = [0]
	*($3 + [48]) = $9
	$8 = *(*(CALL $153(($3 + [48])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [280])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [11657])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	if ( ((uint_32)*(*($5 + [12])) <= (uint_32)*(*($5 + [16]))) ){ goto $label$8 }
	CALL eosio_assert([1], [10939])
	$8 = (int_64)4412498
	$7 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $11
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$10
	$8 = $11
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$11 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$8
	$7 = *($5 + [20])
	*($1 + [24]) = *($7)
	*(($1 + [32])) = *(($7 + [8]))
	CALL eosio_assert([1], [10939])
	$12 = ($1 + [24])
	$8 = (int_64)4412498
	$7 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$8 = $11
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$4 
	
.LABEL $label$13
	$8 = $11
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$14 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$4 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [10988])
	*(($1 + [32])) = (int_64)1129599492
	*($1 + [24]) = (int_64)0
	$7 = *($5 + [20])
	*($1 + [40]) = *($7)
	*(($1 + [48])) = *(($7 + [8]))
	$12 = ($1 + [24])
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	
.LABEL $label$4
	CALL eosio_assert($9, [10988])
	*(($1 + [48])) = (int_64)1129599492
	*($1 + [40]) = (int_64)0
	
.LABEL $label$3
	$7 = ($5 + [4])
	$13 = *(*($7))
	$9 = *(($5 + [20]))
	$14 = *(($9 + [8]))
	*((($3 + [48]) + [8])) = $14
	$8 = *($9)
	$15 = *(($12 + [8]))
	*((($3 + [32]) + [8])) = $15
	$11 = *($12)
	*(($3 + [8])) = $15
	*((($3 + [16]) + [8])) = $14
	*($3 + [48]) = $8
	*($3 + [32]) = $11
	*($3) = $11
	*($3 + [16]) = $8
	CALL $112($6, $13, ($3 + [16]), $3)
	$16 = ($6 + [224])
	$8 = *(*($7))
	$9 = *(($6 + [252]))
	$12 = *(($6 + [248]))
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$16 }
	
.LOOP $label$18:
	$7 = ($9 + [-24])
	$10 = *($7)
	if ( ((int_64)*($10) == (int_64)$8) ){ goto $label$17 }
	$9 = $7
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$16), [11073])
	goto $label$15 
	
.LABEL $label$16
	$10 = [0]
	$7 = CALL db_find_i64(*($16), *(($6 + [232])), (int_64)6291763602739167232, $8)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$15 }
	$10 = CALL $39($16, $7)
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$16), [11073])
	
.LABEL $label$15
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9407])
	*($1 + [64]) = *(*($5 + [24]))
	$13 = *($10 + [64])
	CALL eosio_assert([1], [10939])
	$8 = (uint_64)$13 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$8 = $11
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$8 = $11
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$23 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$9 = [0]
	
.LABEL $label$19
	CALL eosio_assert($9, [10988])
	*(($1 + [80])) = $13
	*($1 + [72]) = (int_64)0
	*($1 + [88]) = (int_64)0
	*($1 + [56]) = *(*(($5 + [12])))
	$9 = $2
	$7 = ($9 + [-96])
	$global$0 = $7
	*($3 + [36]) = $7
	*($3 + [32]) = $7
	*($3 + [40]) = ($9 + [-4])
	CALL $93(($3 + [32]), $1)
	$8 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660971118100480, *(*($0 + [8])), $8, $7, [92])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$24 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	$7 = ($4 + [8])
	$8 = *($7)
	$9 = *(($0 + [8]))
	$11 = *($9)
	$13 = *($1)
	$12 = ($1 + [16])
	*($3 + [48]) = *($12)
	*($1 + [104]) = CALL db_idx64_store($8, (int_64)-4157660971118100480, $11, $13, ($3 + [48]))
	$8 = *($9)
	$11 = *($7)
	$13 = *($1)
	$10 = ($1 + [8])
	*($3 + [56]) = *($10)
	*($3 + [48]) = *($12)
	*(($1 + [108])) = CALL db_idx128_store($11, (int_64)-4157660971118100479, $8, $13, ($3 + [48]))
	$8 = *($9)
	$11 = *($7)
	$13 = *($1)
	$12 = ($1 + [56])
	*($3 + [48]) = (CASTING uint_64)(uint_32 ([0] - *($12)))
	*(($1 + [112])) = CALL db_idx64_store($11, (int_64)-4157660971118100478, $8, $13, ($3 + [48]))
	$8 = *($9)
	$11 = *($7)
	$13 = *($1)
	$14 = *($12)
	*($3 + [48]) = (int_64))((int_64)0 - $14)
	*($3 + [56]) = (int_64))((int_64))((int_64)0 - *($10)) - (CASTING uint_64)(uint_32 ((int_64)$14 != (int_64)0)))
	*(($1 + [116])) = CALL db_idx128_store($11, (int_64)-4157660971118100477, $8, $13, ($3 + [48]))
	$8 = *($9)
	$11 = *($7)
	$13 = *($1)
	*($3 + [48]) = ((int_64)((int_64)((int_64)*($10) << (int_64)40) | (int_64)*($12)) | (int_64)((int_64)(CASTING uint_64)(uint_32 ((int_64)*($1 + [40]) > (int_64)0)) << (int_64)32))
	*(($1 + [120])) = CALL db_idx64_store($11, (int_64)-4157660971118100476, $8, $13, ($3 + [48]))
	$11 = *($9)
	$13 = *($7)
	$14 = *($1)
	$15 = *($10)
	$8 = *($1 + [24])
	CALL eosio_assert(((int_64)*(($1 + [48])) == (int_64)*(($1 + [32]))), [11343])
	$8 = ((int_64)$8 + (int_64)*($1 + [40]))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [11405])
	*($3 + [56]) = (int_64))((int_64))((int_64)0 - $15) - (CASTING uint_64)(uint_32 ((int_64)$8 != (int_64)0)))
	*($3 + [48]) = (int_64))((int_64)0 - $8)
	*(($1 + [124])) = CALL db_idx128_store($13, (int_64)-4157660971118100475, $11, $14, ($3 + [48]))
	$global$0 = ($3 + [64])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-4157660971118100479, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [11073])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $61($7, CALL $fimport$0(*($7), *($7 + [8]), (int_64)-4157660971118100480, $6))
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [11073])
	
.LABEL $label$2
	*(($4 + [108])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [11187])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11233])
	$4 = ($1 + [40])
	$5 = *($4)
	$6 = *(($1 + [16]))
	$7 = *(($1 + [56]))
	$8 = *(($1 + [8]))
	$9 = *($1 + [24])
	CALL eosio_assert(((int_64)*(($1 + [48])) == (int_64)*(($1 + [32]))), [11343])
	$9 = ((int_64)$9 + (int_64)*($4))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [11405])
	*(((($10 = $3) + [48]) + [24])) = $8
	$4 = [0]
	$11 = (int_64)
	*((($10 + [48]) + [56])) = (int_64))($11((int_64)0 - $8)) - (CASTING uint_64)(uint_32 ((int_32)$7 != (int_32)[0])))
	*(($10 + [136])) = (int_64))($11 - (CASTING uint_64)(uint_32 ((int_64)$9 != (int_64)0)))
	*($10 + [64]) = $6
	$11 = (CASTING uint_64)(uint_32 $7)
	*($10 + [96]) = (int_64))((int_64)0 - $11)
	*($10 + [128]) = (int_64))((int_64)0 - $9)
	*($10 + [48]) = $6
	*($10 + [80]) = (CASTING uint_64)(uint_32 ([0] - $7))
	*($10 + [112]) = ((int_64)((int_64)((int_64)$8 << (int_64)40) | (int_64)$11) | (int_64)((int_64)(CASTING uint_64)(uint_32 ((int_64)$5 > (int_64)0)) << (int_64)32))
	$6 = *($1)
	$12 = *($2 + [12])
	CALL eosio_assert([1], [10939])
	$13 = ($10 + [128])
	$14 = ($10 + [112])
	$15 = (($10 + [48]) + [48])
	$16 = (($10 + [48]) + [32])
	$17 = (($10 + [48]) + [16])
	$8 = (int_64)4412498
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$7 = [1]
	$18 = $4
	$4 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$18 = ($4 + [1])
	$4 = $18
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [10988])
	$4 = *(*($2 + [4]))
	if ( ((uint_32)*(($1 + [56])) <= (uint_32)$4) ){ goto $label$7 }
	$5 = (int_64)1129599492
	$9 = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	$5 = *(($1 + [48]))
	$9 = *(($1 + [40]))
	CALL eosio_assert([1], [10939])
	$8 = (int_64)4412498
	$4 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$11 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$8 = $11
	$7 = [1]
	$18 = $4
	$4 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$8 = $11
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$18 = ($4 + [1])
	$4 = $18
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$4 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [10988])
	*(($1 + [48])) = (int_64)1129599492
	*(($1 + [40])) = (int_64)0
	$4 = *(*(($2 + [4])))
	
.LABEL $label$6
	$7 = *($2)
	$8 = *($7 + [8])
	if ( ((uint_32)*(*($2 + [8])) >= (uint_32)$4) ){ goto $label$15 }
	CALL eosio_assert(((int_64)$8 == (int_64)$5), [11343])
	$9 = ((int_64)*($7) + (int_64)$9)
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [11405])
	if ( ((int_64)$9 >= (int_64)1) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL eosio_assert(((int_64)$8 == (int_64)*(($1 + [48]))), [11343])
	$8 = ((int_64)*($4) + (int_64)*($7))
	*(($4 = ($1 + [40]))) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [11405])
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert(((int_64)$5 == (int_64)*(($1 + [32]))), [11343])
	$8 = ((int_64)*($4) + (int_64)$9)
	*(($4 = ($1 + [24]))) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [11405])
	
.LABEL $label$13
	$11 = *(*($2 + [16]))
	$4 = *($2)
	$19 = *(($4 + [8]))
	*((($10 + [160]) + [8])) = $19
	$8 = *($4)
	*((($10 + [16]) + [8])) = $19
	*(($10 + [8])) = $5
	*($10 + [160]) = $8
	*($10 + [144]) = $9
	*($10 + [152]) = $5
	*($10 + [16]) = $8
	*($10) = $9
	CALL $112($12, $11, ($10 + [16]), $10)
	*(($1 + [56])) = *(*(($2 + [8])))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [11284])
	$7 = $3
	$4 = ($7 + [-96])
	$global$0 = $4
	*($10 + [36]) = $4
	*($10 + [32]) = $4
	*($10 + [40]) = ($7 + [-4])
	CALL $93(($10 + [32]), $1)
	CALL db_update_i64(*($1 + [100]), (int_64)0, $4, [92])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$16 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	$4 = ($1 + [16])
	*($10 + [160]) = *($4)
	if ( (CALL $174(($10 + [48]), ($10 + [160]), [8]) == 0) ){ goto $label$17 }
	$18 = ($1 + [104])
	$7 = *($18)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$18 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100480, ($10 + [144]), $6)
	*($18) = $7
	
.LABEL $label$18
	CALL db_idx64_update($7, (int_64)0, ($10 + [160]))
	
.LABEL $label$17
	*($10 + [168]) = *(($1 + [8]))
	*($10 + [160]) = *($4)
	if ( (CALL $174($17, ($10 + [160]), [16]) == 0) ){ goto $label$19 }
	$7 = ($1 + [108])
	$4 = *($7)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$20 }
	$4 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100479, ($10 + [144]), $6)
	*($7) = $4
	
.LABEL $label$20
	CALL db_idx128_update($4, (int_64)0, ($10 + [160]))
	
.LABEL $label$19
	$4 = ($1 + [56])
	*($10 + [160]) = (CASTING uint_64)(uint_32 ([0] - *($4)))
	if ( (CALL $174($16, ($10 + [160]), [8]) == 0) ){ goto $label$21 }
	$18 = ($1 + [112])
	$7 = *($18)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$22 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100478, ($10 + [144]), $6)
	*($18) = $7
	
.LABEL $label$22
	CALL db_idx64_update($7, (int_64)0, ($10 + [160]))
	
.LABEL $label$21
	$8 = *($4)
	*($10 + [160]) = (int_64))((int_64)0 - $8)
	$4 = ($1 + [8])
	*($10 + [168]) = (int_64))((int_64))((int_64)0 - *($4)) - (CASTING uint_64)(uint_32 ((int_64)$8 != (int_64)0)))
	if ( (CALL $174($15, ($10 + [160]), [16]) == 0) ){ goto $label$23 }
	$18 = ($1 + [116])
	$7 = *($18)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$24 }
	$7 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100477, ($10 + [144]), $6)
	*($18) = $7
	
.LABEL $label$24
	CALL db_idx128_update($7, (int_64)0, ($10 + [160]))
	
.LABEL $label$23
	$4 = ($1 + [40])
	*($10 + [160]) = ((int_64)((int_64)((int_64)*($4) << (int_64)40) | (int_64)*(($1 + [56]))) | (int_64)((int_64)(CASTING uint_64)(uint_32 ((int_64)*($4) > (int_64)0)) << (int_64)32))
	if ( (CALL $174($14, ($10 + [160]), [8]) == 0) ){ goto $label$25 }
	$18 = ($1 + [120])
	$7 = *($18)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$26 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100476, ($10 + [144]), $6)
	*($18) = $7
	
.LABEL $label$26
	CALL db_idx64_update($7, (int_64)0, ($10 + [160]))
	
.LABEL $label$25
	$9 = *(($1 + [8]))
	$8 = *(($1 + [24]))
	CALL eosio_assert(((int_64)*(($1 + [48])) == (int_64)*(($1 + [32]))), [11343])
	$8 = ((int_64)$8 + (int_64)*($4))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [11405])
	*($10 + [168]) = (int_64))((int_64))((int_64)0 - $9) - (CASTING uint_64)(uint_32 ((int_64)$8 != (int_64)0)))
	*($10 + [160]) = (int_64))((int_64)0 - $8)
	if ( (CALL $174($13, ($10 + [160]), [16]) == 0) ){ goto $label$27 }
	$7 = ($1 + [124])
	$4 = *($7)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$28 }
	$4 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100475, ($10 + [144]), $6)
	*($7) = $4
	
.LABEL $label$28
	CALL db_idx128_update($4, (int_64)0, ($10 + [160]))
	
.LABEL $label$27
	$global$0 = ($10 + [176])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [208])
	$global$0 = $4
	*($4 + [56]) = $1
	CALL require_auth($1)
	CALL eosio_assert(((int_32)*(($0 + [168])) == (int_32)[1]), [10465])
	CALL eosio_assert(CALL eosio_assert4($1), [9602])
	$5 = [0]
	$6 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $8
	$6 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9830])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [8674])
	$6 = ($2 + [8])
	CALL eosio_assert(((int_64)*($6) == (int_64)1129599492), [8594])
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)65534), [8410])
	CALL eosio_assert((int_64)(((uint_64)*($2) % (uint_64)(int_64)10000000) == 0), [9851])
	CALL $38($0, $3, [0])
	*($4 + [48]) = ($0 + [312])
	CALL $24(($4 + [64]), ($4 + [48]), ($4 + [56]))
	$7 = *($4 + [68])
	if ( ($7 == 0) ){ goto $label$6 }
	$5 = ( $7 ? [0] : ((int_64)*($4 + [56]) == (int_64)*($7 + [8])) )
	
.LABEL $label$6
	$7 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($7, [8711])
	$9 = ($5 + [56])
	CALL eosio_assert(((int_64)*($9) == (int_64)*($6)), [11014])
	CALL eosio_assert(((int_64)*($5 + [48]) >= (int_64)*($2)), [9876])
	$1 = *($2)
	$8 = *($6)
	*((($4 + [8]) + [8])) = $8
	*((($4 + [32]) + [8])) = $8
	*($4 + [8]) = $1
	*($4 + [32]) = $1
	CALL $80($0, *($4 + [56]), ($4 + [8]), $3)
	CALL eosio_assert($7, [11152])
	$7 = *($4 + [48])
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$7), [11187])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$2()), [11233])
	*($4 + [144]) = *(($5 + [8]))
	*($4 + [152]) = (int_64))((int_64)0 - *(($5 + [16])))
	*($4 + [160]) = (int_64))((int_64)0 - *(($5 + [32])))
	*($4 + [168]) = (int_64))((int_64)0 - *($5 + [48]))
	$1 = *($5)
	CALL eosio_assert(((int_64)*($6) == (int_64)*($9)), [11423])
	$8 = (int_64)
	*($5 + [48]) = $8(*($5 + [48]) - *($2)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)*($5 + [48]) < (int_64)4611686018427387904), [11493])
	CALL eosio_assert(((int_64)*($6) == (int_64)*(($5 + [72]))), [11343])
	$8 = ((int_64)*($5 + [64]) + (int_64)*($2))
	*($5 + [64]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($5 + [64]) < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($5 + [48]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [12072])
	CALL eosio_assert(((int_64)$1 == (int_64)*($5)), [11284])
	*($4 + [184]) = (($4 + [64]) + [80])
	*($4 + [180]) = ($4 + [64])
	*($4 + [176]) = ($4 + [64])
	CALL $25(($4 + [176]), $5)
	CALL db_update_i64(*($5 + [84]), (int_64)0, ($4 + [64]), [80])
	if ( (uint_64)($1 <= *($7 + [16])) ){ goto $label$7 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$6 = (($4 + [144]) + [8])
	*($4 + [200]) = *(($5 + [8]))
	if ( (CALL $174(($4 + [144]), ($4 + [200]), [8]) == 0) ){ goto $label$8 }
	$10 = ($5 + [88])
	$9 = *($10)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$9 }
	$9 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)3607749779137757184, ($4 + [192]), $1)
	*($10) = $9
	
.LABEL $label$9
	CALL db_idx64_update($9, (int_64)0, ($4 + [200]))
	
.LABEL $label$8
	$9 = (($4 + [144]) + [16])
	*($4 + [200]) = (int_64))((int_64)0 - *(($5 + [16])))
	if ( (CALL $174($6, ($4 + [200]), [8]) == 0) ){ goto $label$10 }
	$10 = ($5 + [92])
	$6 = *($10)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$11 }
	$6 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)3607749779137757185, ($4 + [192]), $1)
	*($10) = $6
	
.LABEL $label$11
	CALL db_idx64_update($6, (int_64)0, ($4 + [200]))
	
.LABEL $label$10
	$6 = ($4 + [168])
	*($4 + [200]) = (int_64))((int_64)0 - *(($5 + [32])))
	if ( (CALL $174($9, ($4 + [200]), [8]) == 0) ){ goto $label$12 }
	$10 = ($5 + [96])
	$9 = *($10)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$13 }
	$9 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)3607749779137757186, ($4 + [192]), $1)
	*($10) = $9
	
.LABEL $label$13
	CALL db_idx64_update($9, (int_64)0, ($4 + [200]))
	
.LABEL $label$12
	*($4 + [200]) = (int_64))((int_64)0 - *(($5 + [48])))
	if ( (CALL $174($6, ($4 + [200]), [8]) == 0) ){ goto $label$14 }
	$6 = ($5 + [100])
	$5 = *($6)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$15 }
	$5 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)3607749779137757187, ($4 + [192]), $1)
	*($6) = $5
	
.LABEL $label$15
	CALL db_idx64_update($5, (int_64)0, ($4 + [200]))
	
.LABEL $label$14
	$10 = ($0 + [352])
	*($4 + [24]) = $10
	CALL $81(($4 + [64]), ($4 + [24]), ($4 + [56]))
	$1 = *($4 + [56])
	$7 = *($4 + [68])
	if ( ($7 == 0) ){ goto $label$17 }
	$6 = ($7 + [8])
	if ( ((int_64)$1 != (int_64)*($6)) ){ goto $label$17 }
	CALL eosio_assert([1], [11152])
	$5 = *($4 + [24])
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$5), [11187])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$2()), [11233])
	*($4 + [144]) = *($6)
	$9 = ($7 + [16])
	*($4 + [152]) = *($9)
	$6 = ($7 + [24])
	*($4 + [160]) = (int_64))((int_64)0 - *($6))
	$1 = *($7)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($7 + [32]))), [11343])
	$8 = ((int_64)*($6) + (int_64)*($2))
	*($6) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [11405])
	*($9) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$1 == (int_64)*($7)), [11284])
	*($4 + [184]) = (($4 + [64]) + [36])
	*($4 + [180]) = ($4 + [64])
	*($4 + [176]) = ($4 + [64])
	CALL $82(($4 + [176]), $7)
	CALL db_update_i64(*($7 + [44]), (int_64)0, ($4 + [64]), [36])
	if ( (uint_64)($1 <= *($5 + [16])) ){ goto $label$18 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	$6 = (($4 + [144]) + [8])
	*($4 + [200]) = *(($7 + [8]))
	if ( (CALL $174(($4 + [144]), ($4 + [200]), [8]) == 0) ){ goto $label$19 }
	$2 = ($7 + [48])
	$9 = *($2)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-5001342326447013888, ($4 + [192]), $1)
	*($2) = $9
	
.LABEL $label$20
	CALL db_idx64_update($9, (int_64)0, ($4 + [200]))
	
.LABEL $label$19
	$9 = (($4 + [144]) + [16])
	*($4 + [200]) = *(($7 + [16]))
	if ( (CALL $174($6, ($4 + [200]), [8]) == 0) ){ goto $label$21 }
	$2 = ($7 + [52])
	$6 = *($2)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$22 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-5001342326447013887, ($4 + [192]), $1)
	*($2) = $6
	
.LABEL $label$22
	CALL db_idx64_update($6, (int_64)0, ($4 + [200]))
	
.LABEL $label$21
	*($4 + [200]) = (int_64))((int_64)0 - *(($7 + [24])))
	if ( (CALL $174($9, ($4 + [200]), [8]) == 0) ){ goto $label$16 }
	$6 = ($7 + [56])
	$7 = *($6)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$23 }
	$7 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-5001342326447013886, ($4 + [192]), $1)
	*($6) = $7
	
.LABEL $label$23
	CALL db_idx64_update($7, (int_64)0, ($4 + [200]))
	goto $label$16 
	
.LABEL $label$17
	*($4 + [152]) = $2
	*($4 + [148]) = ($4 + [56])
	*($4 + [144]) = $0
	*($4 + [176]) = $1
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$2()), [11558])
	*($4 + [64]) = $10
	*($4 + [68]) = ($4 + [144])
	*($4 + [72]) = ($4 + [176])
	*(($9 = CALL _Znwj([64])) + [32]) = (int_64)1397703940
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$1 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$1 = $8
	$5 = [1]
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$1 = $8
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$6 = ($7 + [1])
	$7 = $6
	if ( $5 ){ goto $label$28 }
	$5 = [1]
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$5 = [0]
	
.LABEL $label$24
	CALL eosio_assert($5, [10988])
	*($9 + [40]) = $10
	CALL $83(($4 + [64]), $9)
	*($4 + [200]) = $9
	$1 = *($9)
	*($4 + [64]) = $1
	$5 = *($9 + [44])
	*($4 + [192]) = $5
	$6 = ($0 + [380])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [384]))) ){ goto $label$30 }
	*($7 + [8]) = $1
	*($7 + [16]) = $5
	*($4 + [200]) = [0]
	*($7) = $9
	*($6) = ($7 + [24])
	$7 = *($4 + [200])
	*($4 + [200]) = [0]
	if ( $7 ){ goto $label$29 }
	goto $label$16 
	
.LABEL $label$30
	CALL $84(($0 + [376]), ($4 + [200]), ($4 + [64]), ($4 + [192]))
	$7 = *($4 + [200])
	*($4 + [200]) = [0]
	if ( ($7 == 0) ){ goto $label$16 }
	
.LABEL $label$29
	CALL _ZdlPv($7)
	
.LABEL $label$16
	$1 = CALL current_time()
	*(($4 + [92])) = (int_64)0
	*(($4 + [108])) = (int_64)0
	*(($4 + [116])) = (int_64)0
	*($4 + [76]) = [0]
	*($4 + [80]) = [0]
	*($4 + [84 align=4]) = (int_64)0
	*($4 + [100 align=4]) = (int_64)0
	*($4 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	$7 = ($4 + [100])
	$1 = (int_64)6
	$8 = *($4 + [56])
	
.LOOP $label$31:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$31 }
	*($4 + [152]) = (int_64)3617214756542218240
	*($4 + [144]) = $8
	$1 = (int_64)6
	
.LOOP $label$32:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$32 }
	*($4 + [176]) = (int_64)-5001342339331915776
	CALL $85($7, ($4 + [144]), $0, ($4 + [176]), ($4 + [56]))
	$1 = *($4 + [56])
	*(($4 + [84])) = [30]
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = $1
	CALL cancel_deferred(($4 + [144]))
	*($4 + [152]) = (int_64)0
	$1 = *($4 + [56])
	*($4 + [144]) = $1
	CALL $86(($4 + [176]), ($4 + [64]))
	$7 = *($4 + [176])
	CALL send_deferred(($4 + [144]), $1, $7, (*($4 + [180]) - $7), [1])
	$7 = *($4 + [176])
	if ( ($7 == 0) ){ goto $label$33 }
	*($4 + [180]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$33
	CALL $87(($4 + [64]))
	$global$0 = ($4 + [208])
}

int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [11845])
	$2 = *($0 + [4])
	$3 = *(($2 + [120]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-4157660971118100476, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [120])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$6), [11073])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $61($6, CALL $fimport$0(*($6), *($6 + [8]), (int_64)-4157660971118100480, $5))
	CALL eosio_assert(((int_32)*($8 + [96]) == (int_32)$6), [11073])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [120])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [11187])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11233])
	$4 = ($1 + [40])
	$5 = *($4)
	$6 = *(($1 + [16]))
	$7 = *(($1 + [56]))
	$8 = *(($1 + [8]))
	$9 = *($1 + [24])
	$11 = ($1 + [32])
	$10 = ($1 + [48])
	CALL eosio_assert(((int_64)*($10) == (int_64)*($11)), [11343])
	$9 = ((int_64)$9 + (int_64)*($4))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [11405])
	*(((($12 = $3) + [48]) + [24])) = $8
	$13 = [0]
	$14 = (int_64)
	*((($12 + [48]) + [56])) = (int_64))($14((int_64)0 - $8)) - (CASTING uint_64)(uint_32 ((int_32)$7 != (int_32)[0])))
	*(($12 + [136])) = (int_64))($14 - (CASTING uint_64)(uint_32 ((int_64)$9 != (int_64)0)))
	*($12 + [64]) = $6
	$14 = (CASTING uint_64)(uint_32 $7)
	*($12 + [96]) = (int_64))((int_64)0 - $14)
	*($12 + [128]) = (int_64))((int_64)0 - $9)
	*($12 + [48]) = $6
	*($12 + [80]) = (CASTING uint_64)(uint_32 ([0] - $7))
	*($12 + [112]) = ((int_64)((int_64)((int_64)$8 << (int_64)40) | (int_64)$14) | (int_64)((int_64)(CASTING uint_64)(uint_32 ((int_64)$5 > (int_64)0)) << (int_64)32))
	$6 = *($1)
	$5 = *($4)
	$15 = *($2)
	$14 = *($10)
	CALL eosio_assert(((int_64)$14 == (int_64)*($11)), [11343])
	$8 = ((int_64)$5 + (int_64)*($1 + [24]))
	*($1 + [24]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [11405])
	CALL eosio_assert([1], [10939])
	$10 = ($12 + [128])
	$11 = ($12 + [112])
	$16 = (($12 + [48]) + [48])
	$17 = (($12 + [48]) + [32])
	$18 = (($12 + [48]) + [16])
	$8 = (int_64)4412498
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$7 = [1]
	$4 = $13
	$13 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$13 < (int_32)[6])
	$4 = ($13 + [1])
	$13 = $4
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$13 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [10988])
	*(($1 + [48])) = (int_64)1129599492
	*(($1 + [40])) = (int_64)0
	$19 = *(*($2 + [4]))
	*($12 + [160]) = (int_64)0
	*($12 + [168]) = (int_64)1129599492
	CALL eosio_assert([1], [10939])
	$8 = (int_64)4412498
	$13 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$8 = $9
	$7 = [1]
	$4 = $13
	$13 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$8 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$13 < (int_32)[6])
	$4 = ($13 + [1])
	$13 = $4
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$13 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [10988])
	*(($12 + [8])) = $14
	*((($12 + [16]) + [8])) = *((($12 + [160]) + [8]))
	*($12 + [152]) = $14
	*($12 + [144]) = $5
	*($12) = $5
	*($12 + [16]) = *($12 + [160])
	CALL $112($15, $19, ($12 + [16]), $12)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [11284])
	$7 = $3
	$13 = ($7 + [-96])
	$global$0 = $13
	*($12 + [36]) = $13
	*($12 + [32]) = $13
	*($12 + [40]) = ($7 + [-4])
	CALL $93(($12 + [32]), $1)
	CALL db_update_i64(*($1 + [100]), (int_64)0, $13, [92])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$13 = ($1 + [16])
	*($12 + [160]) = *($13)
	if ( (CALL $174(($12 + [48]), ($12 + [160]), [8]) == 0) ){ goto $label$12 }
	$4 = ($1 + [104])
	$7 = *($4)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$13 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100480, ($12 + [144]), $6)
	*($4) = $7
	
.LABEL $label$13
	CALL db_idx64_update($7, (int_64)0, ($12 + [160]))
	
.LABEL $label$12
	*($12 + [168]) = *(($1 + [8]))
	*($12 + [160]) = *($13)
	if ( (CALL $174($18, ($12 + [160]), [16]) == 0) ){ goto $label$14 }
	$7 = ($1 + [108])
	$13 = *($7)
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$15 }
	$13 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100479, ($12 + [144]), $6)
	*($7) = $13
	
.LABEL $label$15
	CALL db_idx128_update($13, (int_64)0, ($12 + [160]))
	
.LABEL $label$14
	$13 = ($1 + [56])
	*($12 + [160]) = (CASTING uint_64)(uint_32 ([0] - *($13)))
	if ( (CALL $174($17, ($12 + [160]), [8]) == 0) ){ goto $label$16 }
	$4 = ($1 + [112])
	$7 = *($4)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$17 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100478, ($12 + [144]), $6)
	*($4) = $7
	
.LABEL $label$17
	CALL db_idx64_update($7, (int_64)0, ($12 + [160]))
	
.LABEL $label$16
	$8 = *($13)
	*($12 + [160]) = (int_64))((int_64)0 - $8)
	$13 = ($1 + [8])
	*($12 + [168]) = (int_64))((int_64))((int_64)0 - *($13)) - (CASTING uint_64)(uint_32 ((int_64)$8 != (int_64)0)))
	if ( (CALL $174($16, ($12 + [160]), [16]) == 0) ){ goto $label$18 }
	$4 = ($1 + [116])
	$7 = *($4)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$19 }
	$7 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100477, ($12 + [144]), $6)
	*($4) = $7
	
.LABEL $label$19
	CALL db_idx128_update($7, (int_64)0, ($12 + [160]))
	
.LABEL $label$18
	$13 = ($1 + [40])
	*($12 + [160]) = ((int_64)((int_64)((int_64)*($13) << (int_64)40) | (int_64)*(($1 + [56]))) | (int_64)((int_64)(CASTING uint_64)(uint_32 ((int_64)*($13) > (int_64)0)) << (int_64)32))
	if ( (CALL $174($11, ($12 + [160]), [8]) == 0) ){ goto $label$20 }
	$4 = ($1 + [120])
	$7 = *($4)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$21 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100476, ($12 + [144]), $6)
	*($4) = $7
	
.LABEL $label$21
	CALL db_idx64_update($7, (int_64)0, ($12 + [160]))
	
.LABEL $label$20
	$9 = *(($1 + [8]))
	$8 = *(($1 + [24]))
	CALL eosio_assert(((int_64)*(($1 + [48])) == (int_64)*(($1 + [32]))), [11343])
	$8 = ((int_64)$8 + (int_64)*($13))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [11405])
	*($12 + [168]) = (int_64))((int_64))((int_64)0 - $9) - (CASTING uint_64)(uint_32 ((int_64)$8 != (int_64)0)))
	*($12 + [160]) = (int_64))((int_64)0 - $8)
	if ( (CALL $174($10, ($12 + [160]), [16]) == 0) ){ goto $label$22 }
	$7 = ($1 + [124])
	$13 = *($7)
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$23 }
	$13 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4157660971118100475, ($12 + [144]), $6)
	*($7) = $13
	
.LABEL $label$23
	CALL db_idx128_update($13, (int_64)0, ($12 + [160]))
	
.LABEL $label$22
	$global$0 = ($12 + [176])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [11187])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11233])
	$5 = *($1)
	$7 = *($2)
	$6 = ($1 + [32])
	CALL eosio_assert(((int_64)*($6) == (int_64)*($7 + [8])), [11014])
	CALL eosio_assert(((int_64)*($1 + [24]) >= (int_64)*($7)), [12159])
	$2 = *($2)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($6)), [11423])
	$8 = (int_64)
	*($1 + [24]) = $8(*($1 + [24]) - *($2)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [11493])
	if ( ((int_64)*($1 + [24]) != (int_64)0) ){ goto $label$1 }
	*($1 + [56]) = [2]
	*($1 + [52]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [11284])
	$3 = $3
	$2 = ($3 + [-64])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($3 + [-7])
	CALL $151($4, $1)
	CALL db_update_i64(*($1 + [64]), (int_64)0, $2, [57])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($4 + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [16]) = [1852793386]
	*($3 + [20]) = [29557]
	*($3 + [22]) = [58]
	*((($4 = (($3 + [16]) | [7])) + CALL $3($4, $2, [20]))) = [42]
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $175(($3 + [16]))
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, ($3 + [16]), $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$6 }
	*($1) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$5
	CALL $163($1, [0])
	*(($1 + [8])) = *(($3 + [8]))
	*($1) = *($3)
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $160($3)
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-4157660971118100476, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [11073])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $61($7, CALL $fimport$0(*($7), *($7 + [8]), (int_64)-4157660971118100480, $6))
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [11073])
	
.LABEL $label$2
	*(($4 + [120])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)-4157660971118100476, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [11073])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $61($7, CALL $fimport$0(*($7), *($7 + [8]), (int_64)-4157660971118100480, $6))
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [11073])
	
.LABEL $label$2
	*(($4 + [120])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [11875])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11920])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11970])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [100]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $154(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]), ($0 + [40]), ($0 + [41]))
	$global$0 = ($2 + [16])
}

void .FUNC $91 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	float_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_64 $20
	$3 = ($global$0 - [384])
	$global$0 = $3
	CALL require_auth($1)
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)-1) <= (int_64)65534), [8410])
	CALL eosio_assert(((int_32)*(($0 + [168])) == (int_32)[1]), [10465])
	*(($3 + [136])) = (int_64)0
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	$4 = *(($0 + [136]))
	*($3 + [104]) = $4
	*($3 + [112]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)6291769033721118720, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $6(($3 + [104]), $6)
	CALL eosio_assert(((int_32)*($5 + [176]) == (int_32)($3 + [104])), [11073])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9898])
	CALL eosio_assert(((int_32)*($5 + [80]) != (int_32)[0]), [8430])
	CALL $92($0, $2)
	*($3 + [96]) = ($0 + [264])
	*($3 + [264]) = $2
	*($3 + [256]) = $1
	CALL $74(($3 + [144]), ($3 + [96]), ($3 + [256]))
	$6 = *($3 + [148])
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((int_64)(((int_64)((int_64)*($3 + [256]) ^ (int_64)*(($6 + [16]))) | (int_64)((int_64)*($3 + [264]) ^ (int_64)*(($6 + [8])))) == 0) == 0) ){ goto $label$2 }
	$7 = [0]
	*($3 + [92]) = [0]
	*($3 + [80]) = (int_64)0
	CALL $73($0, $2, ($3 + [92]), ($3 + [80]))
	$8 = *($3 + [80])
	$4 = *($6 + [64])
	if ( ((uint_64)$4 >= (uint_64)$8) ){ goto $label$2 }
	*((($3 + [40]) + [32])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$9 = *($0)
	*($3 + [40]) = $9
	*($3 + [48]) = $2
	$5 = CALL db_find_i64($9, $2, (int_64)6291761580392579072, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $46(($3 + [40]), $5)
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)($3 + [40])), [11073])
	
.LABEL $label$3
	$5 = [0]
	$10 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($10, [9917])
	CALL eosio_assert(((int_32)*($7 + [56]) != (int_32)[0]), [9952])
	$11 = ((float_64)*($7 + [40]) * (float_64)(CASTING float_64)(int_64 *($6 + [24])))
	CALL eosio_assert(((float_64)$11 >= (float_64)(float_64)0), [9974])
	*($3 + [32]) = *(($7 + [32]))
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$5 }
	$4 = (int_64)-9223372036854775808
	goto $label$4 
	
.LABEL $label$5
	$4 = (Rounds 0)($11)
	
.LABEL $label$4
	*($3 + [24]) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10939])
	$4 = (uint_64)*($3 + [32]) >> (uint_64)(int_64)8)
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $9
	$12 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$12 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $12 ){ goto $label$10 }
	$12 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$12 = [0]
	
.LABEL $label$6
	CALL eosio_assert($12, [10988])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($3 + [24]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [10003])
	$14 = (($3 + [24]) + [8])
	CALL eosio_assert(((int_64)*(($7 + [32])) == (int_64)*($14)), [11014])
	CALL eosio_assert(((int_64)*($7 + [24]) >= (int_64)*($3 + [24])), [10032])
	$12 = ($6 + [64])
	$15 = *($12)
	CALL eosio_assert([1], [11152])
	$5 = *($3 + [96])
	CALL eosio_assert(((int_32)*($6 + [96]) == (int_32)$5), [11187])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$2()), [11233])
	$16 = ($6 + [40])
	$17 = *($16)
	$18 = ($6 + [16])
	$19 = *($18)
	$13 = *(($6 + [56]))
	$4 = *(($6 + [8]))
	$9 = *($6 + [24])
	CALL eosio_assert(((int_64)*(($6 + [48])) == (int_64)*(($6 + [32]))), [11343])
	$9 = ((int_64)$9 + (int_64)*($16))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [11405])
	*(($3 + [280])) = $4
	$20 = (int_64)
	*((($3 + [256]) + [56])) = (int_64))($20((int_64)0 - $4)) - (CASTING uint_64)(uint_32 ((int_32)$13 != (int_32)[0])))
	*(($3 + [344])) = (int_64))($20 - (CASTING uint_64)(uint_32 ((int_64)$9 != (int_64)0)))
	*($12) = ((int_64)*($12) + (int_64)1)
	*($3 + [272]) = $19
	$20 = (CASTING uint_64)(uint_32 $13)
	*($3 + [304]) = (int_64))((int_64)0 - $20)
	*($3 + [336]) = (int_64))((int_64)0 - $9)
	*($3 + [256]) = $19
	*($3 + [288]) = (CASTING uint_64)(uint_32 ([0] - $13))
	*($3 + [320]) = ((int_64)((int_64)((int_64)$4 << (int_64)40) | (int_64)$20) | (int_64)((int_64)(CASTING uint_64)(uint_32 ((int_64)$17 > (int_64)0)) << (int_64)32))
	$4 = *($6)
	CALL eosio_assert(((int_64)*($14) == (int_64)*(($6 + [80]))), [11343])
	$9 = ((int_64)*($6 + [72]) + (int_64)*($3 + [24]))
	*($6 + [72]) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($6 + [72]) < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($6 + [72]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [12089])
	CALL eosio_assert(((uint_64)*($12) <= (uint_64)$8), [12112])
	CALL eosio_assert(((int_64)$4 == (int_64)*($6)), [11284])
	*($3 + [248]) = (($3 + [144]) + [92])
	*($3 + [244]) = ($3 + [144])
	*($3 + [240]) = ($3 + [144])
	CALL $93(($3 + [240]), $6)
	CALL db_update_i64(*($6 + [100]), (int_64)0, ($3 + [144]), [92])
	if ( (uint_64)($4 <= *($5 + [16])) ){ goto $label$11 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$12 = (($3 + [256]) + [16])
	*($3 + [368]) = *($18)
	if ( (CALL $174(($3 + [256]), ($3 + [368]), [8]) == 0) ){ goto $label$12 }
	$14 = ($6 + [104])
	$13 = *($14)
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$13 }
	$13 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-4157660971118100480, ($3 + [352]), $4)
	*($14) = $13
	
.LABEL $label$13
	CALL db_idx64_update($13, (int_64)0, ($3 + [368]))
	
.LABEL $label$12
	$13 = (($3 + [256]) + [32])
	*($3 + [376]) = *(($6 + [8]))
	*($3 + [368]) = *(($6 + [16]))
	if ( (CALL $174($12, ($3 + [368]), [16]) == 0) ){ goto $label$14 }
	$14 = ($6 + [108])
	$12 = *($14)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$15 }
	$12 = CALL db_idx128_find_primary(*($5), *($5 + [8]), (int_64)-4157660971118100479, ($3 + [352]), $4)
	*($14) = $12
	
.LABEL $label$15
	CALL db_idx128_update($12, (int_64)0, ($3 + [368]))
	
.LABEL $label$14
	$12 = (($3 + [256]) + [48])
	$14 = ($6 + [56])
	*($3 + [368]) = (CASTING uint_64)(uint_32 ([0] - *($14)))
	if ( (CALL $174($13, ($3 + [368]), [8]) == 0) ){ goto $label$16 }
	$16 = ($6 + [112])
	$13 = *($16)
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$17 }
	$13 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-4157660971118100478, ($3 + [352]), $4)
	*($16) = $13
	
.LABEL $label$17
	CALL db_idx64_update($13, (int_64)0, ($3 + [368]))
	
.LABEL $label$16
	$13 = (($3 + [256]) + [64])
	$9 = *($14)
	*($3 + [368]) = (int_64))((int_64)0 - $9)
	$14 = ($6 + [8])
	*($3 + [376]) = (int_64))((int_64))((int_64)0 - *($14)) - (CASTING uint_64)(uint_32 ((int_64)$9 != (int_64)0)))
	if ( (CALL $174($12, ($3 + [368]), [16]) == 0) ){ goto $label$18 }
	$16 = ($6 + [116])
	$12 = *($16)
	if ( ((int_32)$12 > (int_32)[-1]) ){ goto $label$19 }
	$12 = CALL db_idx128_find_primary(*($5), *($5 + [8]), (int_64)-4157660971118100477, ($3 + [352]), $4)
	*($16) = $12
	
.LABEL $label$19
	CALL db_idx128_update($12, (int_64)0, ($3 + [368]))
	
.LABEL $label$18
	$12 = (($3 + [256]) + [80])
	$14 = ($6 + [40])
	*($3 + [368]) = ((int_64)((int_64)((int_64)*($14) << (int_64)40) | (int_64)*(($6 + [56]))) | (int_64)((int_64)(CASTING uint_64)(uint_32 ((int_64)*($14) > (int_64)0)) << (int_64)32))
	if ( (CALL $174($13, ($3 + [368]), [8]) == 0) ){ goto $label$20 }
	$16 = ($6 + [120])
	$13 = *($16)
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$21 }
	$13 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-4157660971118100476, ($3 + [352]), $4)
	*($16) = $13
	
.LABEL $label$21
	CALL db_idx64_update($13, (int_64)0, ($3 + [368]))
	
.LABEL $label$20
	$8 = *(($6 + [8]))
	$9 = *(($6 + [24]))
	CALL eosio_assert(((int_64)*(($6 + [48])) == (int_64)*(($6 + [32]))), [11343])
	$9 = ((int_64)$9 + (int_64)*($14))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [11405])
	*($3 + [376]) = (int_64))((int_64))((int_64)0 - $8) - (CASTING uint_64)(uint_32 ((int_64)$9 != (int_64)0)))
	*($3 + [368]) = (int_64))((int_64)0 - $9)
	if ( (CALL $174($12, ($3 + [368]), [16]) == 0) ){ goto $label$22 }
	$12 = ($6 + [124])
	$6 = *($12)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$23 }
	$6 = CALL db_idx128_find_primary(*($5), *($5 + [8]), (int_64)-4157660971118100475, ($3 + [352]), $4)
	*($12) = $6
	
.LABEL $label$23
	CALL db_idx128_update($6, (int_64)0, ($3 + [368]))
	
.LABEL $label$22
	if ( ((int_64)*($3 + [24]) < (int_64)1) ){ goto $label$24 }
	*($3 + [256]) = ($3 + [24])
	CALL eosio_assert($10, [11152])
	CALL $94(($3 + [40]), $7, ($3 + [256]))
	$7 = ($0 + [224])
	$6 = *(($0 + [252]))
	$13 = *(($0 + [248]))
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$26 }
	
.LOOP $label$28:
	$5 = ($6 + [-24])
	$12 = *($5)
	if ( ((int_64)*($12) == (int_64)$2) ){ goto $label$27 }
	$6 = $5
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*($12 + [80]) == (int_32)$7), [11073])
	goto $label$25 
	
.LABEL $label$26
	$12 = [0]
	$5 = CALL db_find_i64(*($7), *(($0 + [232])), (int_64)6291763602739167232, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$25 }
	$12 = CALL $39($7, $5)
	CALL eosio_assert(((int_32)*($12 + [80]) == (int_32)$7), [11073])
	
.LABEL $label$25
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [9407])
	$4 = *(($12 + [72]))
	*($3 + [264]) = [0]
	*($3 + [256]) = (int_64)0
	CALL $95($5, ($3 + [256]), $15)
	$5 = CALL $161(($3 + [8]), ($3 + [256]))
	CALL $22($0, $4, *($0), $1, ($3 + [24]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$29
	if ( ((*($3 + [256]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($3 + [264])))
	
.LABEL $label$24
	$12 = *($3 + [64])
	if ( ($12 == 0) ){ goto $label$2 }
	$0 = ($3 + [68])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$31 }
	
.LOOP $label$32:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$33 }
	CALL _ZdlPv($6)
	
.LABEL $label$33
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$32 }
	$5 = *(($3 + [64]))
	goto $label$30 
	
.LABEL $label$31
	$5 = $12
	
.LABEL $label$30
	*($0) = $12
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$12 = *($3 + [128])
	if ( ($12 == 0) ){ goto $label$34 }
	$0 = ($3 + [132])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$36 }
	
.LOOP $label$37:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$38 }
	CALL _ZdlPv($6)
	
.LABEL $label$38
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$37 }
	$5 = *(($3 + [128]))
	goto $label$35 
	
.LABEL $label$36
	$5 = $12
	
.LABEL $label$35
	*($0) = $12
	CALL _ZdlPv($5)
	
.LABEL $label$34
	$global$0 = ($3 + [384])
}

void .FUNC $92 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	float_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [272])
	$global$0 = $2
	*($2 + [136]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-1) <= (int_64)65534), [10078])
	*($2 + [132]) = [0]
	*($2 + [120]) = (int_64)0
	CALL $73($0, $1, ($2 + [132]), ($2 + [120]))
	$3 = *($2 + [132])
	if ( ((uint_32)($3 + [230]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$1 }
	CALL prints([10102])
	$global$0 = ($2 + [272])
	return 
	
.LABEL $label$1
	*($2 + [112]) = ($0 + [264])
	*($2 + [144]) = ((int_64)((int_64)$1 << (int_64)40) | (int_64)4294967296)
	CALL $96(($2 + [104]), ($2 + [112]), ($2 + [144]))
	*($2 + [144]) = ((int_64)((int_64)((int_64)*($2 + [136]) << (int_64)40) | (int_64)(CASTING uint_64)(uint_32 $3)) | (int_64)4294967296)
	CALL $97(($2 + [96]), ($2 + [112]), ($2 + [144]))
	$1 = CALL current_time()
	$4 = *($2 + [104])
	*($2 + [144]) = $4
	$5 = ((float_64)(CASTING float_64)(uint_64 $1) + (float_64)(float_64)75e3)
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$9 }
	$1 = (int_64)0
	$3 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ($3) == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	$1 = (Rounds 0)($5)
	$3 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ($3) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((int_32)*($2 + [100]) == (int_32)$3) ){ goto $label$7 }
	$6 = [0]
	
.LOOP $label$10:
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($2 + [136])), [10150])
	if ( ((uint_64)CALL current_time() >= (uint_64)$1) ){ goto $label$6 }
	$3 = *($2 + [148])
	CALL $98(($2 + [144]))
	if ( ((int_64)*($3 + [40]) < (int_64)1) ){ goto $label$11 }
	*($2 + [56]) = $0
	*($2 + [60]) = ($2 + [136])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [11152])
	CALL $99(*($2 + [112]), $3, ($2 + [56]))
	$6 = [1]
	
.LABEL $label$11
	$3 = *($2 + [148])
	if ( ($3 == 0) ){ goto $label$12 }
	if ( ((int_32)$3 != (int_32)*($2 + [100])) ){ goto $label$10 }
	
.LABEL $label$12
	if ( ($6 & [1]) ){ goto $label$2 }
	
.LABEL $label$7
	*(($2 + [88])) = [0]
	*($2 + [72]) = (int_64)-1
	$1 = *($0)
	*($2 + [56]) = $1
	$4 = *($2 + [136])
	*($2 + [64]) = $4
	*($2 + [80]) = (int_64)0
	$3 = [0]
	$6 = CALL db_lowerbound_i64($1, $4, (int_64)6291761580392579072, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$3 = CALL $46(($2 + [56]), $6)
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [10231])
	*($2 + [148]) = [0]
	*($2 + [144]) = ($2 + [56])
	$1 = *(*(CALL $100(($2 + [144])) + [4]))
	$6 = *(($2 + [84]))
	$7 = *(($2 + [80]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$14:
	$3 = ($6 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$5 }
	$6 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$14 }
	goto $label$4 
	
.LABEL $label$6
	CALL prints([10186])
	$global$0 = ($2 + [272])
	return 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($8 + [60])) == (int_32)($2 + [56])), [11073])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$3 = CALL db_find_i64(*($2 + [56]), *(($2 + [64])), (int_64)6291761580392579072, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $46(($2 + [56]), $3)
	CALL eosio_assert(((int_32)*($8 + [60]) == (int_32)($2 + [56])), [11073])
	
.LABEL $label$3
	CALL eosio_assert((*($8 + [56]) == 0), [10246])
	$9 = ($0 + [224])
	$1 = *($2 + [136])
	$6 = *(($0 + [252]))
	$10 = *(($0 + [248]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$16 }
	
.LOOP $label$18:
	$3 = ($6 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$17 }
	$6 = $3
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$9), [11073])
	goto $label$15 
	
.LABEL $label$16
	$3 = CALL db_find_i64(*($9), *(($0 + [232])), (int_64)6291763602739167232, $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$19 }
	$7 = CALL $39($9, $3)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$9), [11073])
	goto $label$15 
	
.LABEL $label$19
	$7 = [0]
	
.LABEL $label$15
	*($2 + [52]) = $7
	*($2 + [48]) = $9
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10264])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($7 + [40]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [10282])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($7 + [56])), [10314])
	*($2 + [40]) = *($7 + [56])
	*(($2 + [32])) = *(($7 + [72]))
	*($2 + [24]) = *($7 + [64])
	*($2 + [8]) = (int_64)0
	$1 = *($2 + [24])
	*($2 + [16]) = $1
	CALL eosio_assert([1], [10939])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$1 = $4
	$6 = [1]
	$10 = $3
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$1 = $4
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$10 = ($3 + [1])
	$3 = $10
	if ( $6 ){ goto $label$24 }
	$6 = [1]
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$6 = [0]
	
.LABEL $label$20
	CALL eosio_assert($6, [10988])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [11152])
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$9), [11187])
	CALL eosio_assert(((int_64)*(($0 + [224])) == (int_64)CALL $fimport$2()), [11233])
	$3 = ($7 + [8])
	*($2 + [248]) = (int_64))((int_64)0 - *($3))
	$4 = *(($7 + [16]))
	$1 = *($7)
	$11 = *($7 + [8])
	CALL eosio_assert([1], [12175])
	CALL eosio_assert([1], [12190])
	*((($2 + [8]) + [8])) = $4
	$12 = *(($7 + [16]))
	$11 = ((int_64)$11 / (int_64)2)
	*($2 + [8]) = $11
	CALL eosio_assert(((int_64)$4 == (int_64)$12), [11423])
	$4 = (int_64)
	*($3) = $4(*($3) - $11))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [11493])
	*($7 + [56]) = ((int_64)*($7 + [56]) + (int_64)1)
	CALL eosio_assert(((int_64)$1 == (int_64)*($7)), [11284])
	*($2 + [240]) = (($2 + [144]) + [80])
	*($2 + [236]) = ($2 + [144])
	*($2 + [232]) = ($2 + [144])
	CALL $71(($2 + [232]), $7)
	CALL db_update_i64(*($7 + [84]), (int_64)0, ($2 + [144]), [80])
	$6 = ($0 + [240])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$25 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$25
	*($2 + [264]) = (int_64))((int_64)0 - *($3))
	if ( (CALL $174(($2 + [248]), ($2 + [264]), [8]) == 0) ){ goto $label$26 }
	$6 = ($7 + [88])
	$3 = *($6)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$27 }
	$3 = CALL db_idx64_find_primary(*(($0 + [224])), *(($0 + [232])), (int_64)6291763602739167232, ($2 + [256]), $1)
	*($6) = $3
	
.LABEL $label$27
	CALL db_idx64_update($3, (int_64)0, ($2 + [264]))
	
.LABEL $label$26
	*($2 + [148]) = ($2 + [48])
	*($2 + [144]) = ($2 + [8])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [11152])
	CALL $101(($2 + [56]), $8, ($2 + [144]))
	$1 = *($0)
	*($2 + [268]) = ($2 + [24])
	*($2 + [264]) = ($2 + [40])
	*($2 + [232]) = $1
	CALL eosio_assert(((int_64)*($2 + [56]) == (int_64)CALL $fimport$2()), [11558])
	*($2 + [148]) = ($2 + [264])
	*($2 + [144]) = ($2 + [56])
	*($2 + [152]) = ($2 + [232])
	$3 = CALL _Znwj([72])
	CALL $47($3)
	*($3 + [60]) = ($2 + [56])
	CALL $102(($2 + [144]), $3)
	*($2 + [256]) = $3
	$1 = *($3)
	*($2 + [144]) = $1
	$7 = *($3 + [64])
	*($2 + [248]) = $7
	$10 = ($2 + [84])
	$6 = *($10)
	if ( ((uint_32)$6 >= (uint_32)*(($2 + [88]))) ){ goto $label$30 }
	*($6 + [8]) = $1
	*($6 + [16]) = $7
	*($2 + [256]) = [0]
	*($6) = $3
	*($10) = ($6 + [24])
	$3 = *($2 + [256])
	*($2 + [256]) = [0]
	if ( $3 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	CALL $49(($2 + [80]), ($2 + [256]), ($2 + [144]), ($2 + [248]))
	$3 = *($2 + [256])
	*($2 + [256]) = [0]
	if ( ($3 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$7 = *($2 + [80])
	if ( ($7 == 0) ){ goto $label$2 }
	$10 = ($2 + [84])
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$32 }
	
.LOOP $label$33:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$34 }
	CALL _ZdlPv($6)
	
.LABEL $label$34
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$33 }
	$3 = *(($2 + [80]))
	goto $label$31 
	
.LABEL $label$32
	$3 = $7
	
.LABEL $label$31
	*($10) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$global$0 = ($2 + [272])
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0 + [4])
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy($1, *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [8]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [16]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [24]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [32]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [40]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	*($1 + [68]) = *(*($0 + [8]))
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [81]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [11008])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [11008])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [11008])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [11008])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11008])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [11008])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [11008])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $129(CALL $128($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11008])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [11008])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $129($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [11147])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [11147])
	CALL memcpy(($1 + [76]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [11147])
	CALL memcpy(($1 + [80]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [11147])
	CALL memcpy(($1 + [112]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [168]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [11147])
	CALL memcpy(($1 + [80]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [11147])
	CALL memcpy(($1 + [81]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11008])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [11008])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [11008])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [11008])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [11008])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_64 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = [0]
	
.LOOP $label$1:
	$3 = ($1 + $2)
	$4 = ($2 + [1])
	$2 = $4
	if ( *($3) ){ goto $label$1 }
	$5 = (int_64)0
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$2 }
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($4 + [-1])) << (int_64)3)
	$7 = (int_64)0
	$5 = (int_64)0
	
.LOOP $label$3:
	$2 = *($1)
	if ( ((uint_32)(($2 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$5 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$7 + (int_64)8) & (int_64)4294967288)) | (int_64)$5)
	
.LABEL $label$4
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)8)
	if ( ((int_64)$6 != (int_64)$7) ){ goto $label$3 }
	
.LABEL $label$2
	return ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 $0))
}

int_32 .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($0 + [8]) = $1
	*($0) = $1
	*($0 + [48]) = $1
	$3 = (int_64)10000000000000
	*($0 + [88]) = (int_64)10000000000000
	*($0 + [224]) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	$4 = (int_64)0
	*(($0 + [32])) = (int_64)0
	$5 = [0]
	*(($0 + [40])) = [0]
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($6 = ($0 + [72]))) = (int_64)0
	*(($0 + [80])) = [0]
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = (int_64)0
	*(($0 + [232])) = $1
	*(($0 + [240])) = (int_64)-1
	*(($0 + [256])) = [0]
	*(($0 + [248])) = (int_64)0
	*(($0 + [260])) = [0]
	*($0 + [264]) = $1
	*(($0 + [272])) = $1
	*(($0 + [280])) = (int_64)-1
	*(($0 + [288])) = (int_64)0
	*(($0 + [296])) = (int_64)0
	*(($0 + [304])) = [0]
	*($0 + [312]) = $1
	*(($0 + [320])) = $1
	*(($0 + [328])) = (int_64)-1
	*(($0 + [336])) = (int_64)0
	*(($0 + [344])) = (int_64)0
	*($0 + [352]) = $1
	*(($0 + [360])) = $1
	*(($0 + [368])) = (int_64)-1
	*(($0 + [384])) = [0]
	*(($0 + [376])) = (int_64)0
	*(($0 + [390])) = [0]
	*(($0 + [388])) = [0]
	$7 = CALL db_find_i64($1, $1, (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$5 = ($0 + [48])
	CALL eosio_assert(((int_32)*(CALL $10($5, $7) + [136]) == (int_32)$5), [11073])
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)*($6)) ){ goto $label$3 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$5), [11073])
	goto $label$2 
	
.LABEL $label$4
	$8 = (int_64)10
	$7 = [0]
	$1 = *($0)
	$9 = $1
	$10 = $1
	$11 = $1
	$12 = $1
	$13 = $1
	$14 = (int_64)0
	$15 = (int_64)0
	$16 = (int_64)0
	$17 = (int_64)0
	$18 = (int_64)0
	$19 = (int_64)0
	$20 = (int_64)0
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $10($5, $7)
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$5), [11073])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [11533])
	*(($2 + [20])) = *(($6 + [86]))
	*($2 + [16]) = *($6 + [82 align=2])
	$20 = *($6 + [128])
	$19 = *($6 + [120])
	$18 = *($6 + [112])
	$17 = *($6 + [104])
	$16 = *($6 + [96])
	$15 = *($6 + [88])
	$5 = *($6 + [81])
	$7 = *($6 + [80])
	$8 = *($6 + [72])
	$1 = *($6 + [64])
	$9 = *($6 + [56])
	$10 = *($6 + [48])
	$11 = *($6 + [40])
	$12 = *($6 + [32])
	$13 = *($6 + [24])
	$4 = *($6 + [16])
	$14 = *($6 + [8])
	$3 = *($6)
	
.LABEL $label$1
	$21 = ($0 + [8])
	*($0 + [170 align=2]) = *($2 + [16])
	*(($0 + [96])) = $14
	*(($0 + [88])) = $3
	*(($0 + [104])) = $4
	*(($0 + [112])) = $13
	*(($0 + [120])) = $12
	*(($0 + [128])) = $11
	*(($0 + [136])) = $10
	*(($0 + [144])) = $9
	*(($0 + [152])) = $1
	*(($0 + [160])) = $8
	*(($0 + [168])) = $7
	*(($0 + [169])) = $5
	*(($0 + [176])) = $15
	*(($0 + [184])) = $16
	*(($0 + [174])) = *(($2 + [20]))
	*(($0 + [200])) = $18
	*(($0 + [192])) = $17
	*(($0 + [208])) = $19
	*(($0 + [216])) = $20
	$5 = *(($0 + [36]))
	$7 = *(($0 + [32]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($5 + [-24])
	$22 = *($6)
	if ( ((int_64)*($22 + [8]) == (int_64)4995142087018304004) ){ goto $label$6 }
	$5 = $6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($22 + [64]) == (int_32)$21), [11073])
	$global$0 = ($2 + [96])
	return $0
	
.LABEL $label$5
	$7 = ($0 + [16])
	$5 = ($0 + [8])
	$6 = CALL db_find_i64(*($5), *($7), (int_64)-4732962846574903296, (int_64)4995142087018304004)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $11($21, $6) + [64]) == (int_32)$21), [11073])
	$global$0 = ($2 + [96])
	return $0
	
.LABEL $label$8
	$3 = *($0)
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$2()), [11558])
	$6 = CALL _Znwj([80])
	$5 = CALL $12($6)
	*($6 + [64]) = $21
	*($6 + [8]) = (int_64)4995142087018304004
	*($6) = (int_64)100000000000000
	*($6 + [24]) = (int_64)1129599492
	*($6 + [40]) = (int_64)100000000000
	*($6 + [48]) = (int_64)1397703940
	*($6 + [16]) = (int_64))(*(($0 + [88])) - *(($0 + [96])))
	*($2 + [88]) = (($2 + [16]) + [64])
	*($2 + [84]) = ($2 + [16])
	*($2 + [80]) = ($2 + [16])
	CALL $13(($2 + [80]), $5)
	$1 = *($6 + [8])
	$7 = CALL db_store_i64(*($7), (int_64)-4732962846574903296, $3, $1, ($2 + [16]), [64])
	*($6 + [68]) = $7
	$5 = ($0 + [24])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$9 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($2 + [80]) = $6
	$1 = *(($6 + [8]))
	*($2 + [16]) = $1
	*($2 + [12]) = $7
	$22 = ($0 + [36])
	$5 = *($22)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [40]))) ){ goto $label$12 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [80]) = [0]
	*($5) = $6
	*($22) = ($5 + [24])
	$6 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $14(($0 + [32]), ($2 + [80]), ($2 + [16]), ($2 + [12]))
	$6 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$global$0 = ($2 + [96])
	return $0
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1397703940
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [10988])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [11147])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [11147])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [11147])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $179($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [11147])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $179($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $176($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)1397703940
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [10988])
	*($3 + [40]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = ($3 + [16])
	CALL $125(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $179($6)
	
.LABEL $label$8
	*(($1 = (($3 + [48]) + [8]))) = *(($3 + [32]))
	*($3 + [48]) = *($3 + [24])
	$8 = *(($3 + [40]))
	$10 = *($3 + [16])
	*((($3 + [64]) + [8])) = *($1)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$12 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $12
	*(($3 + [8])) = $12
	$12 = *($3 + [64])
	*($3) = $12
	*($3 + [80]) = $12
	CALL void $1((int_32 $10), (int_64 $3), (int_32 $8), (int_64 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $176($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [36]) = $1
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + $6)
	CALL $126(($3 + [32]), $3)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $179($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$6 = CALL $161(($3 + [16]), $3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	$4 = CALL $161(($3 + [32]), $6)
	CALL void $1((int_32 $4), (int_32 $5))
	if ( (*($3 + [32]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$1 = [1]
	if ( (*($3) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $1
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [8])))
	$global$0 = ($3 + [48])
	return $1
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$4 * (int_32)[12])))) = (int_64)0
	*(($3 + [8])) = [0]
	$1 = *($1)
	$2 = *($2)
	$8 = ($2 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$8 }
	*($3) = ($8 << [1])
	$5 = ($3 + [1])
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*(($4 = ($7 + ((int_32)$4 * (int_32)[12]))) + [8]) = $5
	*($4 + [4]) = $8
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($1)
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$5 = ($5 + $8)
	
.LABEL $label$6
	$8 = ($7 + $4)
	*($5) = [0]
	$5 = ($3 + [12])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($1 + [-4])
	*(($3 + [-4])) = *($2)
	$1 = ($1 + [-12])
	*(($3 = ($3 + [-12]))) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	$6 = *(($0 + [4]))
	$2 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($6 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$15
	$6 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $160($3)
	(unreachable)
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $155($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $163($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $163($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $160($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $126($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11147])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11147])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $166($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	if ( ((int_64)*(*($5) + [8]) == (int_64)$2) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$1), [11073])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$1
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4732962846574903296, $2)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $11($1, $5)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$1), [11073])
	*($0 + [4]) = $5
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $17(($0 + [48]), ($0 + [88]), *($0))
	$1 = *(($0 + [376]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [380])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [376]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [336]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [340])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [336]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [288]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [292])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [288]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [248]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [252])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [248]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [72]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [32]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)$0), [11073])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $10($0, $4)
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)$0), [11073])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [11152])
	CALL $18($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $19($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [11124])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $176($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $179($4)
	
.LABEL $label$6
	*(($5 = CALL _Znwj([152])) + [8]) = (int_64)0
	*($5) = (int_64)10000000000000
	*($5 + [16]) = (int_64)0
	*($5 + [136]) = $0
	CALL $136(($3 + [32]), $5)
	*($5 + [140]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)7235159537265672192
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $137(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [11124])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $176($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $179($4)
	
.LABEL $label$6
	*($3 + [8]) = $0
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	$5 = CALL _Znwj([80])
	CALL $12($5)
	*($5 + [64]) = $0
	CALL $138(($3 + [8]), $5)
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [8]) = $6
	$4 = *($5 + [68])
	*($3 + [4]) = $4
	$2 = ($0 + [28])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($1 + [8]) = $6
	*($1 + [16]) = $4
	*($3 + [24]) = [0]
	*($1) = $5
	*($2) = ($1 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $14(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $12 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [10939])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [10988])
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [10988])
	*($0 + [40]) = (int_64)0
	*(($0 + [32])) = (int_64)4602678819172646912
	*(($2 = ($0 + [48]))) = (int_64)1397703940
	CALL eosio_assert([1], [10939])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$1 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [10988])
	*(($0 + [56])) = (int_64)4602678819172646912
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [11187])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11233])
	$1 = CALL memcpy($1, *($3), [136])
	CALL eosio_assert([1], [11284])
	*($4 + [152]) = ($4 + [130])
	*($4 + [148]) = $4
	*($4 + [144]) = $4
	CALL $139(($4 + [144]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $4, [130])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [160])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [11558])
	*(($5 = CALL _Znwj([152])) + [8]) = (int_64)0
	*($5) = (int_64)10000000000000
	*($5 + [16]) = (int_64)0
	*($5 + [136]) = $1
	$5 = CALL memcpy($5, *($3), [136])
	*($4 + [168]) = (($4 + [16]) + [130])
	*($4 + [164]) = ($4 + [16])
	*($4 + [160]) = ($4 + [16])
	CALL $139(($4 + [160]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [130])
	*($5 + [140]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [160]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [160]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $137(($1 + [24]), ($4 + [160]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [160])
	*($4 + [160]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [176])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $176($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [11147])
	CALL memcpy(($3 + [8]), $6, [1])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $179($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($2 & [255])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $176($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [11147])
	CALL memcpy($3, $6, [1])
	CALL eosio_assert(((uint_32)($1 + [-1]) > (uint_32)[7]), [11147])
	$2 = ($3 + [8])
	CALL memcpy($2, ($6 + [1]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $179($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($2)
	$6 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($6 & [255])), (int_32 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $114 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [288])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8736]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	CALL $115(($3 + [240]))
	CALL $30($0, ($3 + [240]), $1)
	if ( ((*($3 + [272]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [280])))
	
.LABEL $label$8
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$7
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$24 }
	if ( ((int_64)$2 <= (int_64)-4417031406028324865) ){ goto $label$23 }
	if ( ((int_64)$2 > (int_64)-3111238946495234049) ){ goto $label$22 }
	if ( ((int_64)$2 > (int_64)-4137880438398643201) ){ goto $label$20 }
	if ( ((int_64)$2 == (int_64)-4417031406028324864) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)-4417015721773847040) ){ goto $label$9 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [1]
	*($3 + [96]) = *($3 + [136])
	CALL $116($0, ($3 + [96]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$24
	CALL eosio_assert([0], [10901])
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$23
	if ( ((int_64)$2 <= (int_64)-4421659738786234369) ){ goto $label$21 }
	if ( ((int_64)$2 > (int_64)-4417049782883713025) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)-4421659738786234368) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)-4417358184711307264) ){ goto $label$9 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [2]
	*($3 + [88]) = *($3 + [144])
	CALL $117($0, ($3 + [88]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$22
	if ( ((int_64)$2 > (int_64)4929617609699534735) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)-3111238946495234048) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)4921564810347675648) ){ goto $label$9 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [3]
	*($3 + [56]) = *($3 + [176])
	CALL $118($0, ($3 + [56]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$21
	if ( ((int_64)$2 == (int_64)-6533259467254599168) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-4994302320998088704) ){ goto $label$9 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [4]
	*($3 + [32]) = *($3 + [200])
	CALL $119($0, ($3 + [32]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$20
	if ( ((int_64)$2 == (int_64)-4137880438398643200) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-3778238612387135488) ){ goto $label$9 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [5]
	*($3 + [112]) = *($3 + [120])
	CALL $120($0, ($3 + [112]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)-4417049782883713024) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-4417032211186843648) ){ goto $label$9 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [6]
	*($3 + [80]) = *($3 + [152])
	CALL $116($0, ($3 + [80]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)4929617609699534736) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)5378043540632764416) ){ goto $label$9 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [7]
	*($3 + [40]) = *($3 + [192])
	CALL $121($0, ($3 + [40]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$17
	*($3 + [132]) = [0]
	*($3 + [128]) = [8]
	*($3 + [104]) = *($3 + [128])
	CALL $122($0, ($3 + [104]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$16
	*($3 + [236]) = [0]
	*($3 + [232]) = [9]
	*($3) = *($3 + [232])
	CALL $123($0, $3)
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$15
	*($3 + [188]) = [0]
	*($3 + [184]) = [10]
	*($3 + [48]) = *($3 + [184])
	CALL $121($0, ($3 + [48]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$14
	*($3 + [220]) = [0]
	*($3 + [216]) = [11]
	*($3 + [16]) = *($3 + [216])
	CALL $118($0, ($3 + [16]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$13
	*($3 + [164]) = [0]
	*($3 + [160]) = [12]
	*($3 + [72]) = *($3 + [160])
	CALL $122($0, ($3 + [72]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$12
	*($3 + [172]) = [0]
	*($3 + [168]) = [13]
	*($3 + [64]) = *($3 + [168])
	CALL $118($0, ($3 + [64]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$11
	*($3 + [228]) = [0]
	*($3 + [224]) = [14]
	*($3 + [8]) = *($3 + [224])
	CALL $122($0, ($3 + [8]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$10
	*($3 + [212]) = [0]
	*($3 + [208]) = [15]
	*($3 + [24]) = *($3 + [208])
	CALL $122($0, ($3 + [24]))
	$global$0 = ($3 + [288])
	return 
	
.LABEL $label$9
	CALL eosio_assert([0], [10921])
	$global$0 = ($3 + [288])
}

void .FUNC $115 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $176($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [10939])
	$5 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $6
	$7 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [10988])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($2 + [4]) = $4
	*($2) = $4
	*($2 + [8]) = ($4 + $3)
	CALL $124($2, $0)
	$global$0 = ($2 + [16])
}

void .FUNC $112 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [24]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-1) <= (int_64)65534), [10078])
	$5 = ($0 + [224])
	$7 = *(($0 + [252]))
	$6 = *(($0 + [248]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$5), [11073])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [232])), (int_64)6291763602739167232, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $39($5, $8)
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$5), [11073])
	
.LABEL $label$1
	$8 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($8, [10264])
	*($4 + [12]) = $3
	*($4 + [8]) = $2
	*($4 + [16]) = $0
	*($4 + [20]) = ($4 + [24])
	CALL eosio_assert($8, [11152])
	CALL $113($5, $9, ($4 + [8]))
	$global$0 = ($4 + [32])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [11187])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11233])
	*(($4 = $3)) = (int_64))((int_64)0 - *(($1 + [8])))
	$5 = *($1)
	$6 = *($2 + [8])
	$7 = *($2)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [32]))), [11343])
	$8 = ((int_64)*($1 + [24]) + (int_64)*($7))
	*($1 + [24]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [11405])
	$7 = *($2 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [48]))), [11343])
	$8 = ((int_64)*($1 + [40]) + (int_64)*($7))
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($1 + [24]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [12278])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($1 + [40]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [12320])
	if ( ((int_64)*(*($2)) < (int_64)1) ){ goto $label$1 }
	*((($4 + [24]) + [32])) = (int_64)0
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$8 = *(($6 + [136]))
	*($4 + [24]) = $8
	*($4 + [32]) = $8
	$7 = [0]
	$2 = CALL db_find_i64($8, $8, (int_64)6291769033721118720, *(*($2 + [12])))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $6(($4 + [24]), $2)
	CALL eosio_assert(((int_32)*($7 + [176]) == (int_32)($4 + [24])), [11073])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10876])
	CALL eosio_assert(((uint_64)*(($1 + [24])) <= (uint_64)*($7 + [96])), [12362])
	$6 = *($4 + [48])
	if ( ($6 == 0) ){ goto $label$1 }
	$9 = ($4 + [52])
	$2 = *($9)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	CALL _ZdlPv($7)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$5 }
	$2 = *(($4 + [48]))
	goto $label$3 
	
.LABEL $label$4
	$2 = $6
	
.LABEL $label$3
	*($9) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [11284])
	$7 = $3
	$2 = ($7 + [-80])
	$global$0 = $2
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	*($4 + [32]) = $7
	CALL $71(($4 + [24]), $1)
	CALL db_update_i64(*($1 + [84]), (int_64)0, $2, [80])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($4 + [16]) = (int_64))((int_64)0 - *(($1 + [8])))
	if ( (CALL $174($4, ($4 + [16]), [8]) == 0) ){ goto $label$8 }
	$7 = ($1 + [88])
	$2 = *($7)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$9 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6291763602739167232, ($4 + [8]), $5)
	*($7) = $2
	
.LABEL $label$9
	CALL db_idx64_update($2, (int_64)0, ($4 + [16]))
	
.LABEL $label$8
	$global$0 = ($4 + [64])
}

void .FUNC $110 (int_32 $0, int_64 $1)
{
	int_32 $2
	CALL require_auth(*($0))
	$2 = ($0 + [176])
	CALL eosio_assert((uint_64)(*($2) <= $1), [10576])
	CALL eosio_assert((uint_64)(*(($0 + [96])) <= $1), [10614])
	CALL eosio_assert(((uint_64)*($0 + [88]) >= (uint_64)$1), [10660])
	CALL eosio_assert((uint_64)($1 <= (int_64)10000000000000000), [10691])
	*($2) = $1
	CALL $17(($0 + [48]), ($0 + [88]), *($0))
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	CALL require_auth(*(($0 + [152])))
	CALL eosio_assert(((int_32)*(($0 + [168])) == (int_32)[1]), [10465])
	$0 = *($1)
	if ( ($0 & [1]) ){ goto $label$2 }
	$0 = uint_32($0 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$0 = *($1 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($0 <= [257]), [10717])
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $176($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [11147])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [11147])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $179($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $176($5)
	CALL read_action_data($2, $5)
	CALL $179($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

void .FUNC $29 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [56]) = $1
	CALL require_auth($1)
	$4 = *($2 + [8])
	$5 = [0]
	$6 = [0]
	$7 = *($2)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $9
	$6 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8545])
	CALL eosio_assert(((int_64)$4 == (int_64)1129599492), [8777])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8791])
	*($3 + [48]) = ($0 + [312])
	CALL $24(($3 + [64]), ($3 + [48]), ($3 + [56]))
	$8 = *($3 + [68])
	if ( ($8 == 0) ){ goto $label$6 }
	$5 = ( $8 ? [0] : ((int_64)*($3 + [56]) == (int_64)*($8 + [8])) )
	
.LABEL $label$6
	$11 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($11, [8816])
	CALL eosio_assert(((int_64)*(($5 + [40])) == (int_64)$4), [11014])
	CALL eosio_assert(((int_64)*($5 + [32]) >= (int_64)$7), [8833])
	CALL eosio_assert([1], [10939])
	$1 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $9
	$6 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$1 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [10988])
	$12 = ($0 + [8])
	$6 = *(($0 + [36]))
	$13 = *(($0 + [32]))
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$15:
	$8 = ($6 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10 + [8]) == (int_64)4995142087018304004) ){ goto $label$14 }
	$6 = $8
	if ( ((int_32)$13 != (int_32)$8) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$12), [11073])
	goto $label$12 
	
.LABEL $label$13
	$10 = [0]
	$8 = CALL db_find_i64(*($12), *(($0 + [16])), (int_64)-4732962846574903296, (int_64)4995142087018304004)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	$10 = CALL $11($12, $8)
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$12), [11073])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [11152])
	CALL eosio_assert(((int_32)*($10 + [64]) == (int_32)$12), [11187])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [11233])
	$1 = *($10 + [8])
	$12 = ($2 + [8])
	$4 = *($12)
	*(($13 = (($3 + [160]) + [8]))) = $4
	$9 = *($2)
	*(($3 + [8])) = $4
	*($3) = $9
	*($3 + [160]) = $9
	CALL $5(($3 + [64]), $10, $3, (int_64)1397703940)
	$14 = *($3 + [72])
	$9 = *($3 + [64])
	CALL eosio_assert(((int_64)$1 == (int_64)*($10 + [8])), [11284])
	*($3 + [168]) = (($3 + [64]) + [64])
	*($3 + [164]) = ($3 + [64])
	*($3 + [160]) = ($3 + [64])
	CALL $13(($3 + [160]), $10)
	CALL db_update_i64(*($10 + [68]), (int_64)0, ($3 + [64]), [64])
	$8 = ($0 + [24])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$16 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8855])
	$1 = *($2)
	*(($8 = ($0 + [96]))) = (int_64))(*($8) - $1)
	$4 = (int_64)
	*(($8 = ($0 + [104]))) = $4(*($8) - $9))
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [8876])
	$7 = *($3 + [56])
	CALL eosio_assert($11, [11152])
	$8 = *($3 + [48])
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$8), [11187])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$2()), [11233])
	*($3 + [160]) = *(($5 + [8]))
	$6 = ($5 + [16])
	*($3 + [168]) = (int_64))((int_64)0 - *($6))
	$10 = ($5 + [32])
	*($3 + [176]) = (int_64))((int_64)0 - *($10))
	$11 = ($5 + [48])
	*($3 + [184]) = (int_64))((int_64)0 - *($11))
	$4 = *($5)
	$12 = ($5 + [24])
	$15 = *($12)
	CALL eosio_assert(((int_64)$15 == (int_64)*($12)), [11423])
	$1 = (int_64)
	*($6) = $1(*($6) - $1))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [11493])
	$16 = ($5 + [40])
	CALL eosio_assert(((int_64)$15 == (int_64)*($16)), [11423])
	$1 = (int_64)
	*($10) = $1(*($10) - *($2)))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)*($10) < (int_64)4611686018427387904), [11493])
	$1 = *($10)
	$15 = *($16)
	CALL eosio_assert(((int_64)*(($5 + [56])) == (int_64)$15), [11343])
	$1 = ((int_64)$1 + (int_64)*($11))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_64)$15 == (int_64)*($12)), [11014])
	CALL eosio_assert(((int_64)*($6) == (int_64)$1), [11630])
	CALL eosio_assert(((int_64)$4 == (int_64)*($5)), [11284])
	*($3 + [152]) = (($3 + [64]) + [80])
	*($3 + [148]) = ($3 + [64])
	*($3 + [144]) = ($3 + [64])
	CALL $25(($3 + [144]), $5)
	CALL db_update_i64(*($5 + [84]), $7, ($3 + [64]), [80])
	if ( (uint_64)($4 <= *($8 + [16])) ){ goto $label$17 }
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	*($3 + [200]) = *(($5 + [8]))
	if ( (CALL $174(($3 + [160]), ($3 + [200]), [8]) == 0) ){ goto $label$18 }
	$10 = ($5 + [88])
	$6 = *($10)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$19 }
	$6 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3607749779137757184, ($3 + [192]), $4)
	*($10) = $6
	
.LABEL $label$19
	CALL db_idx64_update($6, $7, ($3 + [200]))
	
.LABEL $label$18
	$6 = (($3 + [160]) + [16])
	*($3 + [200]) = (int_64))((int_64)0 - *(($5 + [16])))
	if ( (CALL $174($13, ($3 + [200]), [8]) == 0) ){ goto $label$20 }
	$13 = ($5 + [92])
	$10 = *($13)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$21 }
	$10 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3607749779137757185, ($3 + [192]), $4)
	*($13) = $10
	
.LABEL $label$21
	CALL db_idx64_update($10, $7, ($3 + [200]))
	
.LABEL $label$20
	$10 = (($3 + [160]) + [24])
	*($3 + [200]) = (int_64))((int_64)0 - *(($5 + [32])))
	if ( (CALL $174($6, ($3 + [200]), [8]) == 0) ){ goto $label$22 }
	$13 = ($5 + [96])
	$6 = *($13)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$23 }
	$6 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3607749779137757186, ($3 + [192]), $4)
	*($13) = $6
	
.LABEL $label$23
	CALL db_idx64_update($6, $7, ($3 + [200]))
	
.LABEL $label$22
	$1 = (int_64)0
	*($3 + [200]) = (int_64))((int_64)0 - *(($5 + [48])))
	if ( (CALL $174($10, ($3 + [200]), [8]) == 0) ){ goto $label$24 }
	$10 = ($5 + [100])
	$6 = *($10)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$25 }
	$6 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)3607749779137757187, ($3 + [192]), $4)
	*($10) = $6
	
.LABEL $label$25
	CALL db_idx64_update($6, $7, ($3 + [200]))
	
.LABEL $label$24
	*($3 + [72]) = $14
	$4 = ((int_64)((int_64)$9 + (int_64)199) / (int_64)200)
	*($3 + [64]) = $4
	*($3 + [160]) = (int_64))($9 - $4)
	*($3 + [168]) = $14
	$4 = (int_64)59
	$8 = [8628]
	$7 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$31 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$6 = ($6 + [-91])
	goto $label$29 
	
.LABEL $label$31
	$9 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$27
	$8 = ($8 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$26 }
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	$1 = *($0)
	$9 = *($3 + [56])
	$8 = CALL $175([8897])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$36 }
	*($3 + [32]) = ($8 << [1])
	$6 = (($3 + [32]) | [1])
	if ( $8 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($3 + [32]) = ($10 | [1])
	*($3 + [40]) = $6
	*($3 + [36]) = $8
	
.LABEL $label$35
	CALL memcpy($6, [8897], $8)
	
.LABEL $label$34
	*(($6 + $8)) = [0]
	CALL $22($0, $7, $1, $9, ($3 + [160]), ($3 + [32]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$37
	$1 = (int_64)0
	$9 = *($3 + [64])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8906])
	if ( ((int_64)$9 < (int_64)1) ){ goto $label$38 }
	$4 = (int_64)59
	$8 = [8628]
	$7 = (int_64)0
	
.LOOP $label$39:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$44 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$6 = ($6 + [-91])
	goto $label$42 
	
.LABEL $label$44
	$9 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$43
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$41
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$40
	$8 = ($8 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$39 }
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	$1 = *(($0 + [128]))
	$9 = *($0)
	$8 = CALL $175([8922])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$47 }
	*($3 + [16]) = ($8 << [1])
	$6 = (($3 + [16]) | [1])
	if ( $8 ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($3 + [16]) = ($10 | [1])
	*($3 + [24]) = $6
	*($3 + [20]) = $8
	
.LABEL $label$46
	CALL memcpy($6, [8922], $8)
	
.LABEL $label$45
	*(($6 + $8)) = [0]
	CALL $22($0, $7, $9, $1, ($3 + [64]), ($3 + [16]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($3 + [24]))
	
.LABEL $label$38
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$33
	CALL $160(($3 + [32]))
	
.LABEL $label$32
	CALL $160(($3 + [16]))
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $26($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [11008])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [11008])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $129(CALL $128($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [56]) = $1
	CALL require_auth($1)
	$4 = *($2 + [8])
	$5 = [0]
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $8
	$5 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8545])
	$1 = (int_64)0
	CALL eosio_assert(((int_64)$6 > (int_64)0), [8562])
	CALL eosio_assert(((int_64)$4 == (int_64)1397703940), [8594])
	*((($3 + [40]) + [8])) = *(($2 + [8]))
	$8 = *(($0 + [160]))
	$8 = ((uint_64)((int_64)((int_64)*($2) + (int_64)$8) + (int_64)-1) / (uint_64)$8)
	*($3 + [40]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8609])
	$10 = (int_64))($6 - $8)
	$6 = (int_64)59
	$7 = [8628]
	$11 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$11 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [-91])
	goto $label$9 
	
.LABEL $label$11
	$8 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$7
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)4294967291)
	$11 = ((int_64)$8 | (int_64)$11)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$6 }
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$1 = *(($0 + [128]))
	$8 = *($0)
	$5 = CALL $175([8640])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$15 }
	*($3 + [24]) = ($5 << [1])
	$9 = (($3 + [24]) | [1])
	if ( $5 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$7 = (($5 + [16]) & [-16])
	$9 = CALL _Znwj($7)
	*($3 + [24]) = ($7 | [1])
	*($3 + [32]) = $9
	*($3 + [28]) = $5
	
.LABEL $label$14
	CALL memcpy($9, [8640], $5)
	
.LABEL $label$13
	$7 = [0]
	*(($9 + $5)) = [0]
	CALL $22($0, $11, $8, $1, ($3 + [40]), ($3 + [24]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($3 + [32]))
	
.LABEL $label$16
	CALL eosio_assert([1], [10939])
	$1 = (int_64)5459781
	
.LOOP $label$18:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$1 = $8
	$2 = [1]
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$1 = $8
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $5 ){ goto $label$20 }
	$2 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$18 }
	
.LABEL $label$17
	CALL eosio_assert($2, [10988])
	$5 = ($0 + [8])
	$7 = CALL $23($5, (int_64)4995142087018304004, [8648])
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)$5), [11187])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$2()), [11233])
	$8 = *($7 + [8])
	*(($3 + [8])) = $4
	*($3 + [168]) = $4
	*($3) = $10
	*($3 + [160]) = $10
	CALL $5(($3 + [64]), $7, $3, (int_64)1129599492)
	$11 = *($3 + [72])
	$1 = *($3 + [64])
	CALL eosio_assert(((int_64)$8 == (int_64)*($7 + [8])), [11284])
	*($3 + [168]) = (($3 + [64]) + [64])
	*($3 + [164]) = ($3 + [64])
	*($3 + [160]) = ($3 + [64])
	CALL $13(($3 + [160]), $7)
	CALL db_update_i64(*($7 + [68]), (int_64)0, ($3 + [64]), [64])
	$7 = ($0 + [24])
	if ( (uint_64)($8 <= *($7)) ){ goto $label$21 }
	*($7) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	CALL eosio_assert(((int_64)$1 > (int_64)0), [8674])
	$8 = ((int_64)*($7) + (int_64)$1)
	*(($7 = ($0 + [96]))) = $8
	*(($7 = ($0 + [104]))) = ((int_64)*($7) + (int_64)$10)
	CALL eosio_assert(((uint_64)$8 <= (uint_64)*(($0 + [176]))), [8693])
	*($3 + [16]) = ($0 + [312])
	CALL $24(($3 + [64]), ($3 + [16]), ($3 + [56]))
	$7 = [0]
	$5 = *($3 + [68])
	if ( ($5 == 0) ){ goto $label$22 }
	$7 = ( $5 ? [0] : ((int_64)*($3 + [56]) == (int_64)*($5 + [8])) )
	
.LABEL $label$22
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [8711])
	$6 = *($3 + [56])
	CALL eosio_assert($5, [11152])
	$5 = *($3 + [16])
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$5), [11187])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$2()), [11233])
	$2 = ($7 + [8])
	*($3 + [160]) = *($2)
	$9 = ($7 + [16])
	*($3 + [168]) = (int_64))((int_64)0 - *($9))
	$0 = ($7 + [32])
	*($3 + [176]) = (int_64))((int_64)0 - *($0))
	$12 = ($7 + [48])
	*($3 + [184]) = (int_64))((int_64)0 - *($12))
	$8 = *($7)
	$13 = ($7 + [24])
	CALL eosio_assert(((int_64)$11 == (int_64)*($13)), [11343])
	$4 = ((int_64)*($9) + (int_64)$1)
	*($9) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($9) < (int_64)4611686018427387904), [11405])
	$14 = ($7 + [40])
	CALL eosio_assert(((int_64)$11 == (int_64)*($14)), [11343])
	$1 = ((int_64)*($0) + (int_64)$1)
	*($0) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [11405])
	$1 = *($0)
	$11 = *($14)
	CALL eosio_assert(((int_64)*(($7 + [56])) == (int_64)$11), [11343])
	$1 = ((int_64)$1 + (int_64)*($12))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_64)$11 == (int_64)*($13)), [11014])
	CALL eosio_assert(((int_64)*($9) == (int_64)$1), [11609])
	CALL eosio_assert(((int_64)$8 == (int_64)*($7)), [11284])
	*($3 + [152]) = (($3 + [64]) + [80])
	*($3 + [148]) = ($3 + [64])
	*($3 + [144]) = ($3 + [64])
	CALL $25(($3 + [144]), $7)
	CALL db_update_i64(*($7 + [84]), $6, ($3 + [64]), [80])
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$23 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	$9 = (($3 + [160]) + [8])
	*($3 + [200]) = *($2)
	if ( (CALL $174(($3 + [160]), ($3 + [200]), [8]) == 0) ){ goto $label$24 }
	$2 = ($7 + [88])
	$0 = *($2)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$25 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)3607749779137757184, ($3 + [192]), $8)
	*($2) = $0
	
.LABEL $label$25
	CALL db_idx64_update($0, $6, ($3 + [200]))
	
.LABEL $label$24
	$0 = (($3 + [160]) + [16])
	*($3 + [200]) = (int_64))((int_64)0 - *(($7 + [16])))
	if ( (CALL $174($9, ($3 + [200]), [8]) == 0) ){ goto $label$26 }
	$2 = ($7 + [92])
	$9 = *($2)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$27 }
	$9 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)3607749779137757185, ($3 + [192]), $8)
	*($2) = $9
	
.LABEL $label$27
	CALL db_idx64_update($9, $6, ($3 + [200]))
	
.LABEL $label$26
	$9 = (($3 + [160]) + [24])
	*($3 + [200]) = (int_64))((int_64)0 - *(($7 + [32])))
	if ( (CALL $174($0, ($3 + [200]), [8]) == 0) ){ goto $label$28 }
	$2 = ($7 + [96])
	$0 = *($2)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$29 }
	$0 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)3607749779137757186, ($3 + [192]), $8)
	*($2) = $0
	
.LABEL $label$29
	CALL db_idx64_update($0, $6, ($3 + [200]))
	
.LABEL $label$28
	*($3 + [200]) = (int_64))((int_64)0 - *(($7 + [48])))
	if ( (CALL $174($9, ($3 + [200]), [8]) == 0) ){ goto $label$30 }
	$9 = ($7 + [100])
	$7 = *($9)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$31 }
	$7 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)3607749779137757187, ($3 + [192]), $8)
	*($9) = $7
	
.LABEL $label$31
	CALL db_idx64_update($7, $6, ($3 + [200]))
	
.LABEL $label$30
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$12
	CALL $160(($3 + [24]))
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL eosio_assert((uint_64)(*($0 + [88]) <= $1), [8461])
	CALL eosio_assert((uint_64)($1 <= (int_64)10000000000000000), [8487])
	CALL eosio_assert((uint_64)(*(($0 + [96])) <= $1), [8511])
	$3 = ($0 + [8])
	$4 = (int_64))($1 - *($0 + [88]))
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8 + [8]) == (int_64)4995142087018304004) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$3), [11073])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)-4732962846574903296, (int_64)4995142087018304004)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $11($3, $7)
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$3), [11073])
	
.LABEL $label$1
	$7 = ($0 + [88])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [11152])
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$3), [11187])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [11233])
	*($8 + [16]) = ((int_64)$4 + (int_64)*($8 + [16]))
	$4 = *($8 + [8])
	CALL eosio_assert([1], [11284])
	*($2 + [72]) = ($2 + [64])
	*($2 + [68]) = $2
	*($2 + [64]) = $2
	CALL $13(($2 + [64]), $8)
	CALL db_update_i64(*($8 + [68]), (int_64)0, $2, [64])
	$6 = ($0 + [24])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*(($0 + [88])) = $1
	CALL $17(($0 + [48]), $7, *($0))
	$global$0 = ($2 + [80])
}

int_32 .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6 + [8]) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [11073])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4732962846574903296, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $11($0, $4)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)$0), [11073])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$6 = ($global$0 - [128])
	$global$0 = $6
	if ( ((int_64)*($4) < (int_64)1) ){ goto $label$3 }
	$7 = *($0)
	$8 = (int_64)6
	
.LOOP $label$4:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$4 }
	$8 = (int_64)0
	$9 = (int_64)59
	$0 = [8736]
	$10 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$10 }
	$11 = *($0)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$11 = ($11 + [-91])
	goto $label$8 
	
.LABEL $label$10
	$12 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$6
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$12 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$5 }
	*((($6 + [8]) + [24])) = *(($4 + [8]))
	*($6 + [16]) = $3
	*($6 + [8]) = $2
	*($6 + [24]) = *($4)
	$11 = CALL $161((($6 + [8]) + [32]), $5)
	*($6 + [64]) = $10
	*($6 + [56]) = $1
	*(($0 = CALL _Znwj([16]))) = $7
	*($0 + [8]) = (int_64)3617214756542218240
	*((($6 + [56]) + [36])) = [0]
	$4 = ($0 + [16])
	*((($6 + [56]) + [24])) = $4
	*(($6 + [76])) = $4
	*($6 + [72]) = $0
	*($6 + [84 align=4]) = (int_64)0
	$0 = *($11)
	$11 = ( *((($6 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($11 + [32])
	$8 = (CASTING uint_64)(uint_32 $11)
	$11 = ($6 + [84])
	
.LOOP $label$11:
	$0 = ($0 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	if ( ($0 == 0) ){ goto $label$2 }
	CALL $26($11, $0)
	$11 = *(($6 + [88]))
	$0 = *(($6 + [84]))
	goto $label$1 
	
.LABEL $label$3
	CALL prints([8745])
	$0 = *($5)
	$11 = ($0 & [1])
	CALL prints_l(( *($5 + [8]) ? ($5 + [1]) : $11 ), ( *($5 + [4]) ? uint_32($0 >> [1]) : $11 ))
	CALL prints([8775])
	$global$0 = ($6 + [128])
	return 
	
.LABEL $label$2
	$11 = [0]
	$0 = [0]
	
.LABEL $label$1
	*($6 + [116]) = $0
	*($6 + [112]) = $0
	*($6 + [120]) = $11
	*($6 + [96]) = ($6 + [112])
	*($6 + [104]) = ($6 + [8])
	CALL $27(($6 + [104]), ($6 + [96]))
	CALL $28(($6 + [112]), ($6 + [56]))
	$0 = *($6 + [112])
	CALL send_inline($0, (*($6 + [116]) - $0))
	$0 = *($6 + [112])
	if ( ($0 == 0) ){ goto $label$12 }
	*($6 + [116]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$0 = *($6 + [84])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($6 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	$0 = *($6 + [72])
	if ( ($0 == 0) ){ goto $label$14 }
	*(($6 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$14
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [48])))
	
.LABEL $label$15
	$global$0 = ($6 + [128])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)3607749779137757184, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$7), [11073])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $51($7, CALL $fimport$0(*($7), *($7 + [8]), (int_64)3607749779137757184, $6))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$7), [11073])
	
.LABEL $label$2
	*(($4 + [88])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11008])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11008])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [11008])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [11008])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $140(*($1), ($0 + [32]))
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $166($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	float_64 $8
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [11187])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11233])
	$5 = *($2)
	*($1 + [8]) = *($5)
	*(($1 + [16])) = *(($5 + [8]))
	$5 = *($2)
	*($1 + [24]) = *($5)
	*(($1 + [32])) = *(($5 + [8]))
	$6 = *($1)
	$7 = *(*(*($2 + [4]) + [4]) + [40])
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$2 }
	$8 = ((float_64)(CASTING float_64)(int_64 *(*($2))) / (float_64)(CASTING float_64)(int_64 $7))
	goto $label$1 
	
.LABEL $label$2
	$8 = (float_64)0
	
.LABEL $label$1
	*($1 + [56]) = [1]
	*($1 + [40]) = $8
	CALL eosio_assert([1], [11284])
	$3 = $3
	$2 = ($3 + [-64])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($3 + [-7])
	CALL $151($4, $1)
	CALL db_update_i64(*($1 + [64]), (int_64)0, $2, [57])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

int_32 .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [64]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11763])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)6291761580392579072)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [11709])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [11709])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $46(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $103 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL require_auth($1)
	CALL eosio_assert(((int_32)*(($0 + [168])) == (int_32)[1]), [10465])
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)$1), [10330])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = ((int_64)*(*($4)) + (int_64)1)
	$5 = *($0)
	$6 = *(*($4 + [4]))
	CALL eosio_assert([1], [10939])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [10988])
	*(($1 + [16])) = $6
	*($1 + [8]) = (int_64)0
	$6 = *(*(($4 + [4])))
	CALL eosio_assert([1], [10939])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$10 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [10988])
	*(($1 + [32])) = $6
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = (int_64)0
	$7 = CALL current_time()
	*($1 + [52]) = [0]
	*($1 + [56]) = [0]
	*($1 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [70])
	$10 = $2
	$8 = ($10 + [-64])
	$global$0 = $8
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = ($10 + [-7])
	CALL $151($3, $1)
	$7 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($5 + [8]), (int_64)6291761580392579072, *(*($0 + [8])), $7, $8, [57])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$11 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($3 + [16])
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [11845])
	$2 = *($0 + [4])
	$3 = *($2 + [48])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-5001342326447013888, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [48]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [11073])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $148($6, CALL $fimport$0(*($6), *($6 + [8]), (int_64)-5001342326447013888, $5))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [11073])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [48])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $104 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [176])
	$global$0 = $2
	*($2 + [24]) = $1
	CALL require_auth($1)
	CALL eosio_assert(((int_32)*(($0 + [168])) == (int_32)[1]), [10465])
	*($2 + [16]) = ($0 + [312])
	CALL $24(($2 + [32]), ($2 + [16]), ($2 + [24]))
	$3 = [0]
	$4 = [0]
	$5 = *($2 + [36])
	if ( ($5 == 0) ){ goto $label$1 }
	$4 = ( $5 ? [0] : ((int_64)*($2 + [24]) == (int_64)*($5 + [8])) )
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8711])
	CALL eosio_assert(((int_64)*($4 + [64]) > (int_64)0), [9830])
	*($2 + [8]) = ($0 + [352])
	CALL $81(($2 + [32]), ($2 + [8]), ($2 + [24]))
	$6 = ($2 + [8])
	$0 = *($2 + [36])
	if ( ($0 == 0) ){ goto $label$2 }
	if ( ((int_64)*($2 + [24]) != (int_64)*($0 + [8])) ){ goto $label$2 }
	$6 = *($2 + [32])
	$3 = $0
	
.LABEL $label$2
	$7 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($7, [10357])
	CALL eosio_assert(((uint_32)(*($3 + [16]) + [30]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$20() / (uint_64)(int_64)1000000))), [10378])
	$9 = ($4 + [72])
	$8 = ($3 + [32])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($9)), [11014])
	CALL eosio_assert(((int_64)*($3 + [24]) == (int_64)*($4 + [64])), [10403])
	CALL eosio_assert($5, [11152])
	$0 = *($2 + [16])
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$0), [11187])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11233])
	$10 = ($4 + [8])
	*($2 + [128]) = *($10)
	$11 = ($4 + [16])
	*($2 + [136]) = (int_64))((int_64)0 - *($11))
	$5 = ($4 + [32])
	*($2 + [144]) = (int_64))((int_64)0 - *($5))
	$12 = ($4 + [48])
	*($2 + [152]) = (int_64))((int_64)0 - *($12))
	$1 = *($4)
	$13 = ($4 + [40])
	CALL eosio_assert(((int_64)*($9) == (int_64)*($13)), [11343])
	$14 = ((int_64)*($5) + (int_64)*($4 + [64]))
	*($5) = $14
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($9)), [11423])
	$14 = (int_64)
	*($4 + [64]) = $14(*($4 + [64]) - *($3 + [24])))
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)*($4 + [64]) < (int_64)4611686018427387904), [11493])
	CALL eosio_assert((int_64)(*($4 + [64]) == 0), [10403])
	$15 = *($5)
	$14 = *($13)
	CALL eosio_assert(((int_64)*(($4 + [56])) == (int_64)$14), [11343])
	$15 = ((int_64)$15 + (int_64)*($12))
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_64)$14 == (int_64)*($9)), [11343])
	$15 = ((int_64)*($4 + [64]) + (int_64)$15)
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_64)$14 == (int_64)*(($4 + [24]))), [11014])
	CALL eosio_assert(((int_64)*($11) == (int_64)$15), [11630])
	CALL eosio_assert(((int_64)$1 == (int_64)*($4)), [11284])
	*($2 + [120]) = (($2 + [32]) + [80])
	*($2 + [116]) = ($2 + [32])
	*($2 + [112]) = ($2 + [32])
	CALL $25(($2 + [112]), $4)
	CALL db_update_i64(*($4 + [84]), (int_64)0, ($2 + [32]), [80])
	if ( (uint_64)($1 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = (($2 + [128]) + [8])
	*($2 + [168]) = *($10)
	if ( (CALL $174(($2 + [128]), ($2 + [168]), [8]) == 0) ){ goto $label$4 }
	$8 = ($4 + [88])
	$9 = *($8)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$5 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749779137757184, ($2 + [160]), $1)
	*($8) = $9
	
.LABEL $label$5
	CALL db_idx64_update($9, (int_64)0, ($2 + [168]))
	
.LABEL $label$4
	$9 = (($2 + [128]) + [16])
	*($2 + [168]) = (int_64))((int_64)0 - *(($4 + [16])))
	if ( (CALL $174($5, ($2 + [168]), [8]) == 0) ){ goto $label$6 }
	$8 = ($4 + [92])
	$5 = *($8)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$7 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749779137757185, ($2 + [160]), $1)
	*($8) = $5
	
.LABEL $label$7
	CALL db_idx64_update($5, (int_64)0, ($2 + [168]))
	
.LABEL $label$6
	$5 = (($2 + [128]) + [24])
	*($2 + [168]) = (int_64))((int_64)0 - *(($4 + [32])))
	if ( (CALL $174($9, ($2 + [168]), [8]) == 0) ){ goto $label$8 }
	$8 = ($4 + [96])
	$9 = *($8)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$9 }
	$9 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749779137757186, ($2 + [160]), $1)
	*($8) = $9
	
.LABEL $label$9
	CALL db_idx64_update($9, (int_64)0, ($2 + [168]))
	
.LABEL $label$8
	*($2 + [168]) = (int_64))((int_64)0 - *(($4 + [48])))
	if ( (CALL $174($5, ($2 + [168]), [8]) == 0) ){ goto $label$10 }
	$5 = ($4 + [100])
	$4 = *($5)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$11 }
	$4 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749779137757187, ($2 + [160]), $1)
	*($5) = $4
	
.LABEL $label$11
	CALL db_idx64_update($4, (int_64)0, ($2 + [168]))
	
.LABEL $label$10
	*($2 + [36]) = $3
	*($2 + [32]) = $6
	CALL eosio_assert($7, [11811])
	CALL $105(($2 + [32]))
	CALL $106(*($2 + [8]), $3)
	$global$0 = ($2 + [176])
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL require_auth(*(($0 + [120])))
	CALL eosio_assert(($1 <= [2]), [10438])
	$2 = ($0 + [168])
	CALL eosio_assert(((int_32)*($2) != (int_32)$1), [10453])
	*($2) = $1
	CALL $17(($0 + [48]), ($0 + [88]), *($0))
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [11875])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [11920])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11970])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [44]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $152(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL require_auth(*($0))
	CALL eosio_assert(($1 <= [2]), [10438])
	$2 = ($0 + [169])
	CALL eosio_assert(((int_32)*($2) != (int_32)$1), [10549])
	*($2) = $1
	CALL $17(($0 + [48]), ($0 + [88]), *($0))
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2)
{
	CALL require_auth(*($0))
	CALL eosio_assert(CALL eosio_assert4($2), [10486])
	$1 = ($1 + [-1])
	CALL eosio_assert((($1 & [255]) <= [6]), [10508])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$8
	$1 = ($0 + [112])
	CALL eosio_assert(((int_64)*($1) != (int_64)$2), [10521])
	*($1) = $2
	goto $label$1 
	
.LABEL $label$7
	CALL eosio_assert([0], [10508])
	goto $label$1 
	
.LABEL $label$6
	$1 = ($0 + [120])
	CALL eosio_assert(((int_64)*($1) != (int_64)$2), [10521])
	*($1) = $2
	goto $label$1 
	
.LABEL $label$5
	$1 = ($0 + [128])
	CALL eosio_assert(((int_64)*($1) != (int_64)$2), [10521])
	*($1) = $2
	goto $label$1 
	
.LABEL $label$4
	$1 = ($0 + [136])
	CALL eosio_assert(((int_64)*($1) != (int_64)$2), [10521])
	*($1) = $2
	goto $label$1 
	
.LABEL $label$3
	$1 = ($0 + [144])
	CALL eosio_assert(((int_64)*($1) != (int_64)$2), [10521])
	*($1) = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = ($0 + [152])
	CALL eosio_assert(((int_64)*($1) != (int_64)$2), [10521])
	*($1) = $2
	
.LABEL $label$1
	CALL $17(($0 + [48]), ($0 + [88]), *($0))
	$1
}

void .FUNC $38 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [32]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)-1) <= (int_64)65534), [10078])
	$4 = ($0 + [224])
	$6 = *(($0 + [252]))
	$5 = *(($0 + [248]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [80]) == (int_32)$4), [11073])
	if ( $8 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [232])), (int_64)6291763602739167232, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $39($4, $7) + [80]) == (int_32)$4), [11073])
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$2
	CALL eosio_assert($2, [10810])
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL $42($0, $1, ($3 + [16]))
	$1 = *($0)
	*($3 + [12]) = ($3 + [16])
	*($3 + [8]) = ($3 + [32])
	*($3 + [72]) = $1
	CALL eosio_assert(((int_64)*(($0 + [224])) == (int_64)CALL $fimport$2()), [11558])
	*($3 + [48]) = $4
	*($3 + [52]) = ($3 + [8])
	*($3 + [56]) = ($3 + [72])
	$7 = CALL _Znwj([96])
	CALL $43($7)
	*($7 + [80]) = $4
	CALL $44(($3 + [48]), $7)
	*($3 + [64]) = $7
	$1 = *($7)
	*($3 + [48]) = $1
	$5 = *($7 + [84])
	*($3 + [44]) = $5
	$8 = ($0 + [252])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [256]))) ){ goto $label$7 }
	*($6 + [8]) = $1
	*($6 + [16]) = $5
	*($3 + [64]) = [0]
	*($6) = $7
	*($8) = ($6 + [24])
	$7 = *($3 + [64])
	*($3 + [64]) = [0]
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$7
	CALL $45(($0 + [248]), ($3 + [64]), ($3 + [48]), ($3 + [44]))
	$7 = *($3 + [64])
	*($3 + [64]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [11124])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $176($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $179($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([96])
	$4 = CALL $43($5)
	*($5 + [80]) = $0
	CALL $142(($3 + [32]), $4)
	*($5 + [88]) = [-1]
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $45(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $36 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [192])
	$global$0 = $4
	*($4 + [40]) = $1
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1129599492), [8777])
	*(($5 = ($4 + [32]))) = (int_64)0
	*($4 + [8]) = $1
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$6 = *($0)
	*($4) = $6
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $51($4, $0)
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$4), [11073])
	CALL eosio_assert([1], [11152])
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)$4), [11187])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$2()), [11233])
	$7 = ($0 + [8])
	*($4 + [144]) = *($7)
	$5 = ($0 + [16])
	*($4 + [152]) = (int_64))((int_64)0 - *($5))
	$8 = ($0 + [32])
	*($4 + [160]) = (int_64))((int_64)0 - *($8))
	$9 = ($0 + [48])
	*($4 + [168]) = (int_64))((int_64)0 - *($9))
	$1 = *($0)
	$11 = ($0 + [40])
	$10 = ($2 + [8])
	CALL eosio_assert(((int_64)*($10) == (int_64)*($11)), [11343])
	$6 = ((int_64)*($8) + (int_64)*($2))
	*($8) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [11405])
	$10 = ($0 + [24])
	CALL eosio_assert(((int_64)*($10) == (int_64)*($10)), [11343])
	$6 = ((int_64)*($5) + (int_64)*($2))
	*($5) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [11405])
	$3 = *($8)
	$6 = *($11)
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)$6), [11343])
	$3 = ((int_64)$3 + (int_64)*($9))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($0 + [72]))), [11343])
	$3 = ((int_64)*($0 + [64]) + (int_64)$3)
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_64)$6 == (int_64)*($10)), [11014])
	CALL eosio_assert(((int_64)*($5) == (int_64)$3), [11630])
	CALL eosio_assert(((int_64)$1 == (int_64)*($0)), [11284])
	*($4 + [136]) = (($4 + [48]) + [80])
	*($4 + [132]) = ($4 + [48])
	*($4 + [128]) = ($4 + [48])
	CALL $25(($4 + [128]), $0)
	CALL db_update_i64(*($0 + [84]), (int_64)0, ($4 + [48]), [80])
	$2 = ($4 + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$5 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$2 = (($4 + [144]) + [8])
	*($4 + [184]) = *($7)
	if ( (CALL $174(($4 + [144]), ($4 + [184]), [8]) == 0) ){ goto $label$6 }
	$8 = ($0 + [88])
	$5 = *($8)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$7 }
	$5 = CALL db_idx64_find_primary(*($4), *(($4 + [8])), (int_64)3607749779137757184, ($4 + [176]), $1)
	*($8) = $5
	
.LABEL $label$7
	CALL db_idx64_update($5, (int_64)0, ($4 + [184]))
	
.LABEL $label$6
	$5 = (($4 + [144]) + [16])
	*($4 + [184]) = (int_64))((int_64)0 - *(($0 + [16])))
	if ( (CALL $174($2, ($4 + [184]), [8]) == 0) ){ goto $label$8 }
	$8 = ($0 + [92])
	$2 = *($8)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$9 }
	$2 = CALL db_idx64_find_primary(*($4), *(($4 + [8])), (int_64)3607749779137757185, ($4 + [176]), $1)
	*($8) = $2
	
.LABEL $label$9
	CALL db_idx64_update($2, (int_64)0, ($4 + [184]))
	
.LABEL $label$8
	$2 = (($4 + [144]) + [24])
	*($4 + [184]) = (int_64))((int_64)0 - *(($0 + [32])))
	if ( (CALL $174($5, ($4 + [184]), [8]) == 0) ){ goto $label$10 }
	$8 = ($0 + [96])
	$5 = *($8)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$11 }
	$5 = CALL db_idx64_find_primary(*($4), *(($4 + [8])), (int_64)3607749779137757186, ($4 + [176]), $1)
	*($8) = $5
	
.LABEL $label$11
	CALL db_idx64_update($5, (int_64)0, ($4 + [184]))
	
.LABEL $label$10
	*($4 + [184]) = (int_64))((int_64)0 - *(($0 + [48])))
	if ( (CALL $174($2, ($4 + [184]), [8]) == 0) ){ goto $label$3 }
	$2 = ($0 + [100])
	$0 = *($2)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$12 }
	$0 = CALL db_idx64_find_primary(*($4), *(($4 + [8])), (int_64)3607749779137757187, ($4 + [176]), $1)
	*($2) = $0
	
.LABEL $label$12
	CALL db_idx64_update($0, (int_64)0, ($4 + [184]))
	$5 = *($4 + [24])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($4 + [132]) = $2
	*($4 + [128]) = ($4 + [40])
	*($4 + [144]) = $3
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$2()), [11558])
	*($4 + [52]) = ($4 + [128])
	*($4 + [48]) = $4
	*($4 + [56]) = ($4 + [144])
	$0 = CALL _Znwj([104])
	CALL $52($0)
	*($0 + [80]) = $4
	CALL $53(($4 + [48]), $0)
	*($4 + [184]) = $0
	$1 = *($0)
	*($4 + [48]) = $1
	$8 = *($0 + [84])
	*($4 + [176]) = $8
	$7 = ($4 + [28])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*($5)) ){ goto $label$14 }
	*($2 + [8]) = $1
	*($2 + [16]) = $8
	*($4 + [184]) = [0]
	*($2) = $0
	*($7) = ($2 + [24])
	$0 = *($4 + [184])
	*($4 + [184]) = [0]
	if ( $0 ){ goto $label$13 }
	goto $label$3 
	
.LABEL $label$14
	CALL $54(($4 + [24]), ($4 + [184]), ($4 + [48]), ($4 + [176]))
	$0 = *($4 + [184])
	*($4 + [184]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$13
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$5 = *($4 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [28])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$18 }
	CALL _ZdlPv($2)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$17 }
	$0 = *(($4 + [24]))
	goto $label$15 
	
.LABEL $label$16
	$0 = $5
	
.LABEL $label$15
	*($8) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

int_64 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	$0 = (( *($0 + [8]) ? ($0 + [1]) : (*($0) & [1]) ) + [-1])
	
.LOOP $label$1:
	$0 = ($0 + [1])
	if ( CALL $168(*($0)) ){ goto $label$1 }
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$8 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$6 }
	$2 = [1]
	goto $label$7 
	
.LABEL $label$8
	$2 = [0]
	
.LABEL $label$7
	$0 = ($0 + [1])
	if ( (CALL $167(*($0)) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = [0]
	if ( CALL $167($1) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = (int_64)0
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (int_64)0
	
.LOOP $label$9:
	$1 = $0
	if ( (uint_64)($3 <= (int_64)1844674407370955162) ){ goto $label$10 }
	CALL eosio_assert([0], [11514])
	
.LABEL $label$10
	$3 = ((int_64)$3 * (int_64)10)
	$4 = *($1)
	$5 = ((int_64)$4 + (int_64)-48)
	if ( (int_64)($5 == 0) ){ goto $label$11 }
	if ( ((uint_64)$3 <= (uint_64)(int_64))((int_64)47 - $4)) ){ goto $label$11 }
	CALL eosio_assert([0], [11514])
	
.LABEL $label$11
	$0 = ($1 + [1])
	$3 = ((int_64)$5 + (int_64)$3)
	if ( CALL $167(*(($1 + [1]))) ){ goto $label$9 }
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$12 }
	CALL eosio_assert([0], [11514])
	
.LABEL $label$12
	$3 = (int_64))((int_64)0 - $3)
	
.LABEL $label$2
	return $3
}

int_32 .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [9134])
	$6 = *($3 + [8])
	$7 = [0]
	$8 = *($3)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $11
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8545])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [9158])
	CALL eosio_assert(((int_64)$6 == (int_64)1397703940), [9190])
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$7 }
	$10 = uint_32($10 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$10 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($10 <= [257]), [9215])
	$9 = *($0)
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$10 }
	CALL eosio_assert([1], [9268])
	if ( ((int_64)*(($0 + [136])) != (int_64)$1) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(($0 + [168])) == (int_32)[1]), [10465])
	$9 = (int_64)0
	$1 = (int_64)59
	$10 = [8628]
	$2 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$16 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$7 = ($7 + [-91])
	goto $label$14 
	
.LABEL $label$16
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$12
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)4294967291)
	$2 = ((int_64)$11 | (int_64)$2)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$11 }
	$10 = CALL $33($0, $2, $3, $4)
	$global$0 = ($5 + [32])
	return $10
	
.LABEL $label$10
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [9244])
	goto $label$8 
	
.LABEL $label$9
	$10 = *($4)
	$7 = CALL $175([9288])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$18 }
	if ( (CALL $165($4, [0], [-1], [9288], $7) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL eosio_assert([0], [9295])
	goto $label$8 
	
.LABEL $label$17
	$11 = *(($3 + [8]))
	*((($5 + [16]) + [8])) = $11
	$9 = *($3)
	*(($5 + [8])) = $11
	*($5 + [16]) = $9
	*($5) = $9
	CALL $21($0, $1, $5)
	
.LABEL $label$8
	$global$0 = ($5 + [32])
	return [1]
}

void .FUNC $35 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [192])
	$global$0 = $3
	*((($3 + [8]) + [32])) = (int_64)0
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$4 = *($2 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)1129599492), [8777])
	$6 = *($2)
	$0 = CALL $50(($3 + [8]), $1, [9553])
	$5 = ($0 + [32])
	CALL eosio_assert(((int_64)*($5) >= (int_64)$6), [9577])
	CALL eosio_assert(((int_32)*($0 + [80]) == (int_32)($3 + [8])), [11187])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$2()), [11233])
	$7 = ($0 + [8])
	*($3 + [144]) = *($7)
	$2 = ($0 + [16])
	*($3 + [152]) = (int_64))((int_64)0 - *($2))
	*($3 + [160]) = (int_64))((int_64)0 - *($5))
	$8 = ($0 + [48])
	*($3 + [168]) = (int_64))((int_64)0 - *($8))
	$9 = *($0)
	$10 = ($0 + [40])
	CALL eosio_assert(((int_64)$4 == (int_64)*($10)), [11423])
	$11 = (int_64)
	*($5) = $11(*($5) - $6))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [11493])
	$12 = ($0 + [24])
	CALL eosio_assert(((int_64)$4 == (int_64)*($12)), [11423])
	$4 = (int_64)
	*($2) = $4(*($2) - $6))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [11471])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [11493])
	$6 = *($5)
	$4 = *($10)
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)$4), [11343])
	$6 = ((int_64)$6 + (int_64)*($8))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_64)$4 == (int_64)*(($0 + [72]))), [11343])
	$6 = ((int_64)*($0 + [64]) + (int_64)$6)
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [11386])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [11405])
	CALL eosio_assert(((int_64)$4 == (int_64)*($12)), [11014])
	CALL eosio_assert(((int_64)*($2) == (int_64)$6), [11630])
	CALL eosio_assert(((int_64)$9 == (int_64)*($0)), [11284])
	*($3 + [136]) = (($3 + [48]) + [80])
	*($3 + [132]) = ($3 + [48])
	*($3 + [128]) = ($3 + [48])
	CALL $25(($3 + [128]), $0)
	CALL db_update_i64(*($0 + [84]), $1, ($3 + [48]), [80])
	if ( (uint_64)($9 <= *($3 + [24])) ){ goto $label$1 }
	*((($3 + [8]) + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = (($3 + [144]) + [8])
	*($3 + [184]) = *($7)
	if ( (CALL $174(($3 + [144]), ($3 + [184]), [8]) == 0) ){ goto $label$2 }
	$7 = ($0 + [88])
	$2 = *($7)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL db_idx64_find_primary(*($3 + [8]), *(($3 + [16])), (int_64)3607749779137757184, ($3 + [176]), $9)
	*($7) = $2
	
.LABEL $label$3
	CALL db_idx64_update($2, $1, ($3 + [184]))
	
.LABEL $label$2
	$2 = (($3 + [144]) + [16])
	*($3 + [184]) = (int_64))((int_64)0 - *(($0 + [16])))
	if ( (CALL $174($5, ($3 + [184]), [8]) == 0) ){ goto $label$4 }
	$7 = ($0 + [92])
	$5 = *($7)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL db_idx64_find_primary(*($3 + [8]), *(($3 + [16])), (int_64)3607749779137757185, ($3 + [176]), $9)
	*($7) = $5
	
.LABEL $label$5
	CALL db_idx64_update($5, $1, ($3 + [184]))
	
.LABEL $label$4
	$5 = (($3 + [144]) + [24])
	*($3 + [184]) = (int_64))((int_64)0 - *(($0 + [32])))
	if ( (CALL $174($2, ($3 + [184]), [8]) == 0) ){ goto $label$6 }
	$7 = ($0 + [96])
	$2 = *($7)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$7 }
	$2 = CALL db_idx64_find_primary(*($3 + [8]), *(($3 + [16])), (int_64)3607749779137757186, ($3 + [176]), $9)
	*($7) = $2
	
.LABEL $label$7
	CALL db_idx64_update($2, $1, ($3 + [184]))
	
.LABEL $label$6
	*($3 + [184]) = (int_64))((int_64)0 - *(($0 + [48])))
	if ( (CALL $174($5, ($3 + [184]), [8]) == 0) ){ goto $label$8 }
	$5 = ($0 + [100])
	$0 = *($5)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$9 }
	$0 = CALL db_idx64_find_primary(*($3 + [8]), *(($3 + [16])), (int_64)3607749779137757187, ($3 + [176]), $9)
	*($5) = $0
	
.LABEL $label$9
	CALL db_idx64_update($0, $1, ($3 + [184]))
	
.LABEL $label$8
	$2 = *($3 + [32])
	if ( ($2 == 0) ){ goto $label$10 }
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$13 }
	$0 = *(($3 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$0 = $2
	
.LABEL $label$11
	*($7) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$global$0 = ($3 + [192])
}

int_32 .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$5 = ($global$0 - [64])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [9134])
	CALL require_auth($1)
	CALL eosio_assert(CALL eosio_assert4($2), [9485])
	CALL require_recipient($1)
	CALL require_recipient($2)
	CALL eosio_assert(((int_32)*(($0 + [169])) == (int_32)[1]), [9511])
	$6 = *($3 + [8])
	$7 = [0]
	$8 = *($3)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $11
	$7 = [1]
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$10 < (int_32)[6])
	$12 = ($10 + [1])
	$10 = $12
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8545])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [9158])
	CALL eosio_assert(((int_64)$6 == (int_64)1129599492), [9533])
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$7 }
	$10 = uint_32($10 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$10 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($10 <= [257]), [9215])
	$10 = CALL has_auth($2)
	$7 = ($3 + [8])
	$11 = *($7)
	*((($5 + [48]) + [8])) = $11
	$9 = *($3)
	*((($5 + [16]) + [8])) = $11
	*($5 + [16]) = $9
	*($5 + [48]) = $9
	CALL $35($0, $1, ($5 + [16]))
	$11 = *($7)
	*((($5 + [32]) + [8])) = $11
	$9 = *($3)
	*(($5 + [8])) = $11
	*($5) = $9
	*($5 + [32]) = $9
	CALL $36($0, $2, $5, ( $2 ? $1 : $10 ))
	$global$0 = ($5 + [64])
	return [1]
}

int_32 .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [9088])
	$3 = CALL $161(($4 + [48]), $3)
	CALL $7($3)
	CALL eosio_assert(((int_32)*(($0 + [168])) == (int_32)[1]), [10465])
	$6 = ($5 & [1])
	$5 = *($4 + [48])
	$5 = ( *($3 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ((uint_32)$5 > (uint_32)[13]) ){ goto $label$4 }
	CALL prints([9312])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( *($3 + [8]) ? ($3 + [1]) : $6 )
	if ( ((int_32)*($6) != (int_32)[42]) ){ goto $label$9 }
	if ( ((int_32)(*((($6 + $5) + [-1])) & [255]) != (int_32)[42]) ){ goto $label$9 }
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	$5 = CALL $162(($4 + [16]), $3, [1], ($5 + [-2]), $3)
	CALL $1(($4 + [32]), $5, [58])
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$10
	$5 = *($4 + [32])
	if ( ((uint_32)((int_32)(*($4 + [36]) - $5) / (int_32)[12]) > (uint_32)[5]) ){ goto $label$8 }
	CALL prints([9355])
	$6 = [2]
	$5 = *($4 + [32])
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	CALL prints([9332])
	goto $label$3 
	
.LABEL $label$8
	$7 = CALL $161(($4 + [16]), $5)
	$5 = *($4 + [16])
	$6 = CALL $175([9374])
	if ( ((int_32)$6 != (int_32)( *($7 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$15 }
	if ( (CALL $165($7, [0], [-1], [9374], $6) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL prints([9378])
	goto $label$13 
	
.LABEL $label$14
	$8 = CALL $37((*($4 + [32]) + [12]))
	if ( ((int_64)*($2) <= (int_64)0) ){ goto $label$19 }
	CALL $38($0, $8, [1])
	$9 = ($0 + [224])
	$6 = *(($0 + [252]))
	$10 = *(($0 + [248]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$17 }
	
.LOOP $label$20:
	$5 = ($6 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$8) ){ goto $label$18 }
	$6 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$20 }
	goto $label$17 
	
.LABEL $label$19
	CALL prints([9390])
	goto $label$13 
	
.LABEL $label$18
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*($11 + [80]) == (int_32)$9), [11073])
	goto $label$16 
	
.LABEL $label$17
	$11 = [0]
	$5 = CALL db_find_i64(*($9), *(($0 + [232])), (int_64)6291763602739167232, $8)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$16 }
	$11 = CALL $39($9, $5)
	CALL eosio_assert(((int_32)*($11 + [80]) == (int_32)$9), [11073])
	
.LABEL $label$16
	$5 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($5, [9407])
	CALL eosio_assert(((int_64)*(($11 + [72])) == (int_64)$1), [9445])
	$6 = [1]
	*($4 + [15]) = CALL $40($0, $8, [1], ((int_64)*($11 + [56]) + (int_64)1), ($11 + [64]))
	*($4) = $2
	*($4 + [4]) = ($4 + [15])
	CALL eosio_assert($5, [11152])
	CALL $41($9, $11, $4)
	if ( (*($4 + [16]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$6 = [2]
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$11
	$5 = *($4 + [32])
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$7
	$0 = [1]
	if ( ((int_32)$6 != (int_32)[2]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$2 = *($4 + [36])
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$22 }
	
.LOOP $label$23:
	$0 = ($2 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$24
	$2 = $0
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$23 }
	$0 = *($4 + [32])
	goto $label$21 
	
.LABEL $label$22
	$0 = $5
	
.LABEL $label$21
	*($4 + [36]) = $5
	CALL _ZdlPv($0)
	$0 = [1]
	if ( ((int_32)$6 == (int_32)[2]) ){ goto $label$3 }
	
.LABEL $label$5
	if ( (*($4 + [48]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$0 = [0]
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($4 + [64])
	return $0
	
.LABEL $label$1
	$global$0 = ($4 + [64])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL require_auth(*($1))
	CALL prints([8935])
	CALL printn($2)
	CALL prints([8959])
	$4 = *($1 + [8])
	CALL printn(*($1))
	CALL prints([11647])
	CALL printn($4)
	CALL prints([11647])
	$5 = ($1 + [16])
	CALL $31($5)
	CALL prints([11647])
	$6 = *($1 + [32])
	$7 = ($6 & [1])
	CALL prints_l(( *(($1 + [40])) ? ($1 + [33]) : $7 ), ( *(($1 + [36])) ? uint_32($6 >> [1]) : $7 ))
	CALL prints([8775])
	$8 = ($1 + [32])
	$9 = *($0)
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$2 }
	CALL prints([8966])
	*(($7 = (($3 + [144]) + [8]))) = *(($5 + [8]))
	*($3 + [144]) = *($5)
	$10 = ($1 + [8])
	$4 = *($10)
	$11 = *($1)
	$6 = CALL $161(($3 + [128]), $8)
	*(($3 + [8])) = *($7)
	*($3) = *($3 + [144])
	CALL $32($0, $11, $4, $3, $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$3
	$4 = *($1)
	if ( ((int_64)$4 != (int_64)*(($0 + [136]))) ){ goto $label$1 }
	$11 = *($10)
	if ( ((int_64)$11 != (int_64)*($0)) ){ goto $label$1 }
	*(($7 = (($3 + [112]) + [8]))) = *(($5 + [8]))
	*($3 + [112]) = *($5)
	$6 = CALL $161(($3 + [96]), $8)
	*((($3 + [160]) + [8])) = *($7)
	*($3 + [160]) = *($3 + [112])
	CALL require_auth($4)
	CALL eosio_assert(((int_32)*(($0 + [168])) == (int_32)[1]), [10465])
	CALL eosio_assert(((int_64)*(($0 + [136])) == (int_64)$4), [9061])
	CALL eosio_assert(((int_64)*($3 + [160]) > (int_64)0), [9088])
	CALL eosio_assert(CALL $33($0, $11, ($3 + [160]), $6), [9116])
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($3 + [176])
	return 
	
.LABEL $label$2
	$4 = (int_64)0
	$12 = (int_64)59
	$6 = [8628]
	$13 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$9 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$9
	$11 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$5
	$6 = ($6 + [1])
	$12 = ((int_64)$12 + (int_64)4294967291)
	$13 = ((int_64)$11 | (int_64)$13)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$4 }
	$4 = *($1)
	if ( ((int_64)$13 != (int_64)$2) ){ goto $label$10 }
	*(($7 = (($3 + [80]) + [8]))) = *(($5 + [8]))
	*($3 + [80]) = *($5)
	$11 = *(($1 + [8]))
	$6 = CALL $161(($3 + [64]), $8)
	*((($3 + [16]) + [8])) = *($7)
	*($3 + [16]) = *($3 + [80])
	$7 = CALL $34($0, $4, $11, ($3 + [16]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$11
	if ( $7 ){ goto $label$1 }
	CALL prints([9016])
	CALL require_recipient(*(($0 + [144])))
	$global$0 = ($3 + [176])
	return 
	
.LABEL $label$10
	if ( ((int_64)$4 != (int_64)*(($0 + [136]))) ){ goto $label$1 }
	if ( ((int_64)*(($1 + [8])) != (int_64)$9) ){ goto $label$1 }
	*(($7 = (($3 + [48]) + [8]))) = *(($5 + [8]))
	*($3 + [48]) = *($5)
	$6 = CALL $161(($3 + [32]), $8)
	*((($3 + [160]) + [8])) = *($7)
	*($3 + [160]) = *($3 + [48])
	CALL require_auth($4)
	CALL eosio_assert(((int_32)*(($0 + [168])) == (int_32)[1]), [10465])
	CALL eosio_assert(((int_64)*(($0 + [136])) == (int_64)$4), [9061])
	CALL eosio_assert(((int_64)*($3 + [160]) > (int_64)0), [9088])
	CALL eosio_assert(CALL $33($0, $2, ($3 + [160]), $6), [9116])
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [176])
}

void .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$1 = $global$0
	$2 = $1
	$3 = *($0 + [8])
	$4 = (int_64)($3 == 0)
	if ( $4 ){ goto $label$2 }
	$5 = ((int_64)$3 + (int_64)1)
	$6 = (int_64)1
	
.LOOP $label$3:
	$6 = ((int_64)$6 * (int_64)10)
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)1
	
.LABEL $label$1
	$7 = ($0 + [8])
	$8 = (CASTING uint_32)(uint_64 $3)
	$1 = ($1 - (($8 + [16]) & [496]))
	$global$0 = $1
	*(($9 = ($1 + $8))) = [0]
	$10 = *($0)
	if ( $4 ){ goto $label$4 }
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$10 % (int_64)$6)
	$0 = ($9 + [-1])
	
.LOOP $label$5:
	$11 = ((int_64)$5 / (int_64)10)
	*($0) = ((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$11 * (int_64)10))) + [48])
	$0 = ($0 + [-1])
	$5 = $11
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$10 / (int_64)$6))
	CALL prints([11651])
	CALL prints_l($1, $8)
	CALL prints([11653])
	CALL $141($7, [0])
	$global$0 = $2
}