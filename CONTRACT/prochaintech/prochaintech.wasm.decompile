(data (i32.const 4) "pj\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "epraofficial\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 208) "cannot pass end iterator to erase\00")
(data (i32.const 256) "cannot increment end iterator\00")
(data (i32.const 288) "object passed to erase is not in multi_index\00")
(data (i32.const 336) "cannot erase objects in table of another contract\00")
(data (i32.const 400) "attempt to remove object that was not in multi_index\00")
(data (i32.const 464) "error reading iterator\00")
(data (i32.const 496) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 560) "invalid symbol name\00")
(data (i32.const 592) "read\00")
(data (i32.const 608) "teacher account is not valid\00")
(data (i32.const 640) "teacher relation already exist \00")
(data (i32.const 672) "cannot create objects in table of another contract\00")
(data (i32.const 736) "next primary key in table is at autoincrement limit\00")
(data (i32.const 800) "write\00")
(data (i32.const 816) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 880) "cannot decrement iterator at beginning of table\00")
(data (i32.const 928) "user not exist\00")
(data (i32.const 944) "cannot pass end iterator to modify\00")
(data (i32.const 992) "object passed to modify is not in multi_index\00")
(data (i32.const 1040) "cannot modify objects in table of another contract\00")
(data (i32.const 1104) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1184) "active\00")
(data (i32.const 1200) "notify\00")
(data (i32.const 1216) "get\00")
(data (i32.const 1232) "game\00")
(data (i32.const 1248) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1312) "attempt to subtract asset with different symbol\00")
(data (i32.const 1360) "subtraction underflow\00")
(data (i32.const 1392) "subtraction overflow\00")
(data (i32.const 1424) "white candy not exist\00")
(data (i32.const 1456) "white candy exist\00")
(data (i32.const 1488) "balance is not enough\00")
(data (i32.const 1520) "#PRAERROR$5#\00")
(data (i32.const 1536) "symbol does not match\00")
(data (i32.const 1568) "quantity amount no bigger than 0\00")
(data (i32.const 1616) "#PRAERROR$2#\00")
(data (i32.const 1632) "trigger\00")
(data (i32.const 1648) "#PRAERROR$10#\00")
(data (i32.const 1664) "#PRAERROR$4#\00")
(data (i32.const 1680) "#PRAERROR$3#\00")
(data (i32.const 1696) "referrer can not be self#PRAERROR$101#\00")
(data (i32.const 1744) "getcandy\00")
(data (i32.const 1760) "#PRAERROR$9#\00")
(data (i32.const 1776) "#PRAERROR$8#\00")
(data (i32.const 1792) "#PRAERROR$6#\00")
(data (i32.const 1808) ".game\00")
(data (i32.const 1824) "only .game user can click #PRAERROR$7#\00")
(data (i32.const 1872) ".ex\00")
(data (i32.const 1888) ".net\00")
(data (i32.const 1904) "d\00\00\00\00\00\00\00P\00\00\00\00\00\00\00<\00\00\00\00\00\00\00(\00\00\00\00\00\00\00\1e\00\00\00\00\00\00\00")
(data (i32.const 1952) "multiplication overflow\00")
(data (i32.const 1984) "multiplication underflow\00")
(data (i32.const 2016) "divide by zero\00")
(data (i32.const 2032) "signed division overflow\00")
(data (i32.const 2064) "attempt to add asset with different symbol\00")
(data (i32.const 2112) "addition underflow\00")
(data (i32.const 2144) "addition overflow\00")
(data (i32.const 2176) "epra.game\00")
(data (i32.const 2192) "referral reward!\00")
(data (i32.const 2212) "\b0\08\00\00")
(data (i32.const 2224) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 2272) "total and perclick mismatch\00")
(data (i32.const 2304) "imgurl too long\00")
(data (i32.const 2320) "brief is too long\00")
(data (i32.const 2352) "id is not exist\00")
(data (i32.const 10768) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$9 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$11 (param i32)))
(import "env" "db_idx64_store" (func $fimport$12 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$19 (param i32 i32)))
(import "env" "is_account" (func $fimport$20 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$25 (param i64)))
(import "env" "require_auth2" (func $fimport$26 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$27 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$28 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $200))
(export "free" (func $203))
(export "ceil" (func $218))
(export "memchr" (func $219))
(export "memcmp" (func $220))
(export "strlen" (func $221))
(table $0 35 35 anyfunc)
(elem (i32.const 0) $222 $37 $44 $29 $35 $13 $24 $11 $21 $32 $20 $50 $19 $22 $34 $26 $15 $52 $42 $54 $56 $28 $45 $30 $57 $9 $25 $39 $49 $46 $17 $7 $41 $48 $31)



int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $174 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $204([176])
	CALL $99($3)
	*($3 + [164]) = $1
	CALL $176(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [14]) = $2
	$4 = *($3 + [168])
	*($7 + [16]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $101(($1 + [24]), ($7 + [32]), ($7 + [14]), ($7 + [16]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $93($1)
	CALL $205($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $6 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL $195(($5 + [64]))
	$1 = *($5 + [72])
	if ( ((int_64)$1 != (int_64)*($0)) ){ goto $label$1 }
	*(($5 + [56])) = [0]
	*($5 + [24]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$3 = CALL db_find_i64($1, $1, (int_64)-3922483085538492416, *($5 + [64]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $70(($5 + [24]), $3)
	CALL eosio_assert(((int_32)*($3 + [36]) == (int_32)($5 + [24])), [144])
	*($5 + [20]) = $0
	*($5 + [16]) = ($5 + [64])
	CALL eosio_assert([1], [944])
	CALL $196(($5 + [24]), $3, (int_64)0, ($5 + [16]))
	$2 = *($5 + [48])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($5 + [20]) = $0
	*($5 + [16]) = ($5 + [64])
	CALL $197(($5 + [8]), ($5 + [24]), $1, ($5 + [16]))
	$2 = *($5 + [48])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($5 + [52])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $205($0)
	
.LABEL $label$1
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$8 }
	CALL $205(*(($5 + [104])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$2 = *($0)
	CALL $177(*($0 + [4]), $1)
	*(($6 = $5)) = [0]
	CALL $96($6, $1)
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $97($6, $1)
	$4 = *($1)
	*($1 + [168]) = CALL db_store_i64(*($2 + [8]), (int_64)-3887392663594336256, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$2 = *($0)
	$4 = *($2 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($2), *($2 + [8]), (int_64)-3887392663594336256, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $92($2, $3)
	*($5 + [12]) = [0]
	*($5 + [8]) = $2
	$4 = ((int_64)*(*(CALL $178(($5 + [8])) + [4])) + (int_64)1)
	
.LABEL $label$2
	*(($2 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [736])
	*($1) = *(($2 + [16]))
	*($1 + [8]) = *(*($0 + [4]) + [8])
	*($1 + [16]) = *(*($0 + [4]) + [16])
	CALL $207(($1 + [24]), (*($0 + [4]) + [24]))
	CALL $207(($1 + [36]), (*($0 + [4]) + [36]))
	CALL $207(($1 + [48]), (*($0 + [4]) + [48]))
	CALL $207(($1 + [60]), (*($0 + [4]) + [60]))
	CALL $207(($1 + [72]), (*($0 + [4]) + [72]))
	$2 = *($0 + [4])
	*($1 + [88]) = *($2 + [88])
	*(($1 + [96])) = *(($2 + [96]))
	$2 = *($0 + [4])
	*($1 + [104]) = *($2 + [104])
	*(($1 + [112])) = *(($2 + [112]))
	$2 = *($0 + [4])
	*($1 + [120]) = *($2 + [120])
	*(($1 + [128])) = *(($2 + [128]))
	CALL $207(($1 + [136]), (*($0 + [4]) + [136]))
	*($1 + [148]) = *(*($0 + [4]) + [148])
	*($1 + [149]) = *(*($0 + [4]) + [149])
	CALL $207(($1 + [152]), (*($0 + [4]) + [152]))
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $170 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $205($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	$6 = (*($1) & [65535])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $93($4)
	CALL $205($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $93($4)
	CALL $205($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [168]))
}

int_32 .FUNC $172 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [48 align=4]) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	$2 = [0]
	*(($0 + [56])) = [0]
	*($0 + [60]) = [0]
	*(($0 + [64])) = [0]
	*(($0 + [68])) = [0]
	*($0 + [72]) = [0]
	*(($0 + [76])) = [0]
	*(($0 + [80])) = [0]
	*($0 + [88]) = (int_64)0
	*(($3 = ($0 + [96]))) = (int_64)1397703940
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [560])
	*(($2 = ($0 + [112]))) = (int_64)1397703940
	*($0 + [104]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [560])
	*(($2 = ($0 + [128]))) = (int_64)1397703940
	*($0 + [120]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [560])
	*(($0 + [144])) = [0]
	*($0 + [136 align=4]) = (int_64)0
	*($0 + [152]) = [0]
	*(($0 + [156])) = [0]
	*(($0 + [160])) = [0]
	return $0
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($6 + [56]) = $1
	CALL require_auth(*($0))
	*(($6 + [48])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$4 = *($0)
	*($6 + [16]) = $4
	*($6 + [24]) = $4
	$3 = CALL db_find_i64($4, $4, (int_64)5606361038203797504, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $58(($6 + [16]), $3)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($6 + [16])), [144])
	*($6 + [8]) = $2
	CALL eosio_assert([1], [944])
	CALL $192(($6 + [16]), $0, (int_64)0, ($6 + [8]))
	$3 = *($6 + [40])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0)
	*($6 + [12]) = $2
	*($6 + [8]) = ($6 + [56])
	CALL $193($6, ($6 + [16]), $4, ($6 + [8]))
	$3 = *($6 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $205($2)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL $205($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $178 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [168]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [880])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3887392663594336256)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [816])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [816])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $92(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [560])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$16:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$17 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$26 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$3 = ($3 + [165])
	goto $label$24 
	
.LABEL $label$26
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$22
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$21 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$20
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$32 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$3 = ($3 + [165])
	goto $label$30 
	
.LABEL $label$32
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$28
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$27 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [552]) = $0
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$33:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$3 = ($3 + [165])
	goto $label$35 
	
.LABEL $label$36
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$34
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$33 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$37 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$43 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$3 = ($3 + [165])
	goto $label$41 
	
.LABEL $label$43
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$39
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$38 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$37 }
	CALL $6(($9 + [552]))
	goto $label$14 
	
.LABEL $label$37
	if ( ((int_64)$2 > (int_64)4859080532723499007) ){ goto $label$76 }
	if ( ((int_64)$2 <= (int_64)3626093248780435455) ){ goto $label$75 }
	if ( ((int_64)$2 <= (int_64)3626283126868672511) ){ goto $label$73 }
	if ( ((int_64)$2 <= (int_64)3626371063527505919) ){ goto $label$69 }
	if ( ((int_64)$2 == (int_64)3626371063527505920) ){ goto $label$61 }
	if ( ((int_64)$2 == (int_64)3626460632129208320) ){ goto $label$60 }
	if ( ((int_64)$2 != (int_64)3941441322321182720) ){ goto $label$14 }
	*($9 + [388]) = [0]
	*($9 + [384]) = [1]
	*($9 + [168 align=4]) = *($9 + [384])
	CALL $38(($9 + [552]), ($9 + [168]))
	goto $label$14 
	
.LABEL $label$76
	if ( ((int_64)$2 <= (int_64)5378031997594763263) ){ goto $label$74 }
	if ( ((int_64)$2 <= (int_64)5378206588898115583) ){ goto $label$72 }
	if ( ((int_64)$2 <= (int_64)5378271318574628863) ){ goto $label$68 }
	if ( ((int_64)$2 == (int_64)5378271318574628864) ){ goto $label$59 }
	if ( ((int_64)$2 == (int_64)5378271318574862848) ){ goto $label$58 }
	if ( ((int_64)$2 != (int_64)5378360887176331264) ){ goto $label$14 }
	*($9 + [356]) = [0]
	*($9 + [352]) = [2]
	*($9 + [200 align=4]) = *($9 + [352])
	CALL $43(($9 + [552]), ($9 + [200]))
	goto $label$14 
	
.LABEL $label$75
	if ( ((int_64)$2 > (int_64)-5868446081271109249) ){ goto $label$71 }
	if ( ((int_64)$2 > (int_64)-7119375207604682753) ){ goto $label$67 }
	if ( ((int_64)$2 == (int_64)-7704985912691769344) ){ goto $label$57 }
	if ( ((int_64)$2 != (int_64)-7704951644701589504) ){ goto $label$14 }
	*($9 + [436]) = [0]
	*($9 + [432]) = [3]
	*($9 + [120 align=4]) = *($9 + [432])
	CALL $16(($9 + [552]), ($9 + [120]))
	goto $label$14 
	
.LABEL $label$74
	if ( ((int_64)$2 > (int_64)5377971004819521535) ){ goto $label$70 }
	if ( ((int_64)$2 > (int_64)4925961626017857535) ){ goto $label$66 }
	if ( ((int_64)$2 == (int_64)4859080532723499008) ){ goto $label$56 }
	if ( ((int_64)$2 != (int_64)4923678619613790208) ){ goto $label$14 }
	*($9 + [396]) = [0]
	*($9 + [392]) = [4]
	*($9 + [160 align=4]) = *($9 + [392])
	CALL $36(($9 + [552]), ($9 + [160]))
	goto $label$14 
	
.LABEL $label$73
	if ( ((int_64)$2 > (int_64)3626131742547640319) ){ goto $label$65 }
	if ( ((int_64)$2 == (int_64)3626093248780435456) ){ goto $label$55 }
	if ( ((int_64)$2 != (int_64)3626105017762578432) ){ goto $label$14 }
	*($9 + [524]) = [0]
	*($9 + [520]) = [5]
	*($9 + [32 align=4]) = *($9 + [520])
	CALL $14(($9 + [552]), ($9 + [32]))
	goto $label$14 
	
.LABEL $label$72
	if ( ((int_64)$2 > (int_64)5378183381915795455) ){ goto $label$64 }
	if ( ((int_64)$2 == (int_64)5378031997594763264) ){ goto $label$54 }
	if ( ((int_64)$2 != (int_64)5378165939265077248) ){ goto $label$14 }
	*($9 + [468]) = [0]
	*($9 + [464]) = [6]
	*($9 + [88 align=4]) = *($9 + [464])
	CALL $16(($9 + [552]), ($9 + [88]))
	goto $label$14 
	
.LABEL $label$71
	if ( ((int_64)$2 > (int_64)-3841119874875162625) ){ goto $label$63 }
	if ( ((int_64)$2 == (int_64)-5868446081271109248) ){ goto $label$53 }
	if ( ((int_64)$2 != (int_64)-4997502824164282368) ){ goto $label$14 }
	*($9 + [532]) = [0]
	*($9 + [528]) = [7]
	*($9 + [24 align=4]) = *($9 + [528])
	CALL $12(($9 + [552]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$70
	if ( ((int_64)$2 > (int_64)5377993503827558399) ){ goto $label$62 }
	if ( ((int_64)$2 == (int_64)5377971004819521536) ){ goto $label$52 }
	if ( ((int_64)$2 != (int_64)5377987782880788480) ){ goto $label$14 }
	*($9 + [484]) = [0]
	*($9 + [480]) = [8]
	*($9 + [72 align=4]) = *($9 + [480])
	CALL $16(($9 + [552]), ($9 + [72]))
	goto $label$14 
	
.LABEL $label$69
	if ( ((int_64)$2 == (int_64)3626283126868672512) ){ goto $label$51 }
	if ( ((int_64)$2 != (int_64)3626306056625324032) ){ goto $label$14 }
	*($9 + [412]) = [0]
	*($9 + [408]) = [9]
	*($9 + [144 align=4]) = *($9 + [408])
	CALL $33(($9 + [552]), ($9 + [144]))
	goto $label$14 
	
.LABEL $label$68
	if ( ((int_64)$2 == (int_64)5378206588898115584) ){ goto $label$50 }
	if ( ((int_64)$2 != (int_64)5378271171437920256) ){ goto $label$14 }
	*($9 + [492]) = [0]
	*($9 + [488]) = [10]
	*($9 + [64 align=4]) = *($9 + [488])
	CALL $16(($9 + [552]), ($9 + [64]))
	goto $label$14 
	
.LABEL $label$67
	if ( ((int_64)$2 == (int_64)-7119375207604682752) ){ goto $label$49 }
	if ( ((int_64)$2 != (int_64)-5915097261842366464) ){ goto $label$14 }
	*($9 + [316]) = [0]
	*($9 + [312]) = [11]
	*($9 + [240 align=4]) = *($9 + [312])
	CALL $51(($9 + [552]), ($9 + [240]))
	goto $label$14 
	
.LABEL $label$66
	if ( ((int_64)$2 == (int_64)4925961626017857536) ){ goto $label$48 }
	if ( ((int_64)$2 != (int_64)4925962090948067328) ){ goto $label$14 }
	*($9 + [500]) = [0]
	*($9 + [496]) = [12]
	*($9 + [56 align=4]) = *($9 + [496])
	CALL $18(($9 + [552]), ($9 + [56]))
	goto $label$14 
	
.LABEL $label$65
	if ( ((int_64)$2 == (int_64)3626131742547640320) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)3626265684217954304) ){ goto $label$14 }
	*($9 + [476]) = [0]
	*($9 + [472]) = [13]
	*($9 + [80 align=4]) = *($9 + [472])
	CALL $23(($9 + [552]), ($9 + [80]))
	goto $label$14 
	
.LABEL $label$64
	if ( ((int_64)$2 == (int_64)5378183381915795456) ){ goto $label$46 }
	if ( ((int_64)$2 != (int_64)5378206311672446976) ){ goto $label$14 }
	*($9 + [404]) = [0]
	*($9 + [400]) = [14]
	*($9 + [152 align=4]) = *($9 + [400])
	CALL $16(($9 + [552]), ($9 + [152]))
	goto $label$14 
	
.LABEL $label$63
	if ( ((int_64)$2 == (int_64)-3841119874875162624) ){ goto $label$45 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$14 }
	*($9 + [452]) = [0]
	*($9 + [448]) = [15]
	*($9 + [104 align=4]) = *($9 + [448])
	CALL $27(($9 + [552]), ($9 + [104]))
	goto $label$14 
	
.LABEL $label$62
	if ( ((int_64)$2 == (int_64)5377993503827558400) ){ goto $label$44 }
	if ( ((int_64)$2 != (int_64)5378005272809701376) ){ goto $label$14 }
	*($9 + [516]) = [0]
	*($9 + [512]) = [16]
	*($9 + [40 align=4]) = *($9 + [512])
	CALL $16(($9 + [552]), ($9 + [40]))
	goto $label$14 
	
.LABEL $label$61
	*($9 + [308]) = [0]
	*($9 + [304]) = [17]
	*($9 + [248 align=4]) = *($9 + [304])
	CALL $53(($9 + [552]), ($9 + [248]))
	goto $label$14 
	
.LABEL $label$60
	*($9 + [364]) = [0]
	*($9 + [360]) = [18]
	*($9 + [192 align=4]) = *($9 + [360])
	CALL $43(($9 + [552]), ($9 + [192]))
	goto $label$14 
	
.LABEL $label$59
	*($9 + [300]) = [0]
	*($9 + [296]) = [19]
	*($9 + [256 align=4]) = *($9 + [296])
	CALL $55(($9 + [552]), ($9 + [256]))
	goto $label$14 
	
.LABEL $label$58
	*($9 + [292]) = [0]
	*($9 + [288]) = [20]
	*($9 + [264 align=4]) = *($9 + [288])
	CALL $16(($9 + [552]), ($9 + [264]))
	goto $label$14 
	
.LABEL $label$57
	*($9 + [444]) = [0]
	*($9 + [440]) = [21]
	*($9 + [112 align=4]) = *($9 + [440])
	CALL $16(($9 + [552]), ($9 + [112]))
	goto $label$14 
	
.LABEL $label$56
	*($9 + [348]) = [0]
	*($9 + [344]) = [22]
	*($9 + [208 align=4]) = *($9 + [344])
	CALL $16(($9 + [552]), ($9 + [208]))
	goto $label$14 
	
.LABEL $label$55
	*($9 + [428]) = [0]
	*($9 + [424]) = [23]
	*($9 + [128 align=4]) = *($9 + [424])
	CALL $16(($9 + [552]), ($9 + [128]))
	goto $label$14 
	
.LABEL $label$54
	*($9 + [284]) = [0]
	*($9 + [280]) = [24]
	*($9 + [272 align=4]) = *($9 + [280])
	CALL $16(($9 + [552]), ($9 + [272]))
	goto $label$14 
	
.LABEL $label$53
	*($9 + [540]) = [0]
	*($9 + [536]) = [25]
	*($9 + [16 align=4]) = *($9 + [536])
	CALL $10(($9 + [552]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$52
	*($9 + [460]) = [0]
	*($9 + [456]) = [26]
	*($9 + [96 align=4]) = *($9 + [456])
	CALL $16(($9 + [552]), ($9 + [96]))
	goto $label$14 
	
.LABEL $label$51
	*($9 + [380]) = [0]
	*($9 + [376]) = [27]
	*($9 + [176 align=4]) = *($9 + [376])
	CALL $40(($9 + [552]), ($9 + [176]))
	goto $label$14 
	
.LABEL $label$50
	*($9 + [324]) = [0]
	*($9 + [320]) = [28]
	*($9 + [232 align=4]) = *($9 + [320])
	CALL $16(($9 + [552]), ($9 + [232]))
	goto $label$14 
	
.LABEL $label$49
	*($9 + [340]) = [0]
	*($9 + [336]) = [29]
	*($9 + [216 align=4]) = *($9 + [336])
	CALL $47(($9 + [552]), ($9 + [216]))
	goto $label$14 
	
.LABEL $label$48
	*($9 + [508]) = [0]
	*($9 + [504]) = [30]
	*($9 + [48 align=4]) = *($9 + [504])
	CALL $18(($9 + [552]), ($9 + [48]))
	goto $label$14 
	
.LABEL $label$47
	*($9 + [548]) = [0]
	*($9 + [544]) = [31]
	*($9 + [8 align=4]) = *($9 + [544])
	CALL $8(($9 + [552]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$46
	*($9 + [372]) = [0]
	*($9 + [368]) = [32]
	*($9 + [184 align=4]) = *($9 + [368])
	CALL $16(($9 + [552]), ($9 + [184]))
	goto $label$14 
	
.LABEL $label$45
	*($9 + [332]) = [0]
	*($9 + [328]) = [33]
	*($9 + [224 align=4]) = *($9 + [328])
	CALL $36(($9 + [552]), ($9 + [224]))
	goto $label$14 
	
.LABEL $label$44
	*($9 + [420]) = [0]
	*($9 + [416]) = [34]
	*($9 + [136 align=4]) = *($9 + [416])
	CALL $16(($9 + [552]), ($9 + [136]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [560])
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $205(*(($1 + [16])))
	
.LABEL $label$11
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $205($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$2 = *($0)
	$4 = *($2 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($2), *($2 + [8]), (int_64)-3921691482146209792, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $179($2, $3)
	*($5 + [12]) = [0]
	*($5 + [8]) = $2
	$4 = *(*(CALL $191(($5 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($2 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [736])
	*($1) = *(($2 + [16]))
	CALL $207(($1 + [8]), (*($0 + [4]) + [8]))
	CALL $207(($1 + [20]), (*($0 + [4]) + [20]))
	CALL $207(($1 + [32]), (*($0 + [4]) + [32]))
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $188 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$2 = *($0)
	CALL $189(*($0 + [4]), $1)
	*(($6 = $5)) = [0]
	CALL $190($6, $1)
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [800])
	CALL memcpy($5, $1, [8])
	*($6 + [4]) = ($5 + [8])
	CALL $83(CALL $83(CALL $83($6, ($1 + [8])), ($1 + [20])), ($1 + [32]))
	$4 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($2 + [8]), (int_64)-3921691482146209792, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $49 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-3681244989058187264, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $75($6, $3)
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$6), [144])
	
.LABEL $label$1
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [208])
	CALL eosio_assert($3, [256])
	$3 = CALL db_next_i64(*($0 + [12]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $75($6, $3)
	
.LABEL $label$2
	CALL $76($6, $0)
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $48 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [128])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	*(($9 + [104])) = [0]
	*($9 + [96]) = (int_64)0
	$4 = CALL strlen([1168])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($9 + [96]) = ($4 << [1])
	$2 = (($9 + [96]) | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($4 + [16]) & [-16])
	$2 = CALL $204($3)
	*($9 + [96]) = ($3 | [1])
	*($9 + [104]) = $2
	*($9 + [100]) = $4
	
.LABEL $label$3
	CALL memcpy($2, [1168], $4)
	
.LABEL $label$2
	*(($2 + $4)) = [0]
	$1 = *($0)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1184]
	$7 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$10 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$2 = ($2 + [165])
	goto $label$8 
	
.LABEL $label$10
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$6
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$5 }
	*($9 + [48]) = $7
	*($9 + [40]) = $1
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1200]
	$7 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$16 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$2 = ($2 + [165])
	goto $label$14 
	
.LABEL $label$16
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$11 }
	*($9 + [16]) = $1
	*($9 + [8]) = $1
	CALL $216(($9 + [24]), ($9 + [96]))
	$4 = CALL $78(($9 + [56]), ($9 + [40]), $1, $7, ($9 + [8]))
	CALL $79(($9 + [112]), $4)
	$2 = *($9 + [112])
	CALL send_inline($2, (*($9 + [116]) - $2))
	$2 = *($9 + [112])
	if ( ($2 == 0) ){ goto $label$17 }
	*($9 + [116]) = $2
	CALL $205($2)
	
.LABEL $label$17
	$2 = *($4 + [28])
	if ( ($2 == 0) ){ goto $label$18 }
	*(($4 + [32])) = $2
	CALL $205($2)
	
.LABEL $label$18
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$19 }
	*(($4 + [20])) = $2
	CALL $205($2)
	
.LABEL $label$19
	if ( ((*($9 + [24]) & [1]) == 0) ){ goto $label$20 }
	CALL $205(*(($9 + [32])))
	
.LABEL $label$20
	if ( ((*($9 + [96]) & [1]) == 0) ){ goto $label$21 }
	CALL $205(*($9 + [104]))
	
.LABEL $label$21
	*([0] + [4]) = ($9 + [128])
	return (unreachable)
	
.LABEL $label$1
	CALL $206(($9 + [96]))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [80])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	CALL $106(($6 + [16]), $4, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*(($1 = (($6 + [32]) + [8]))) = *((($6 + [16]) + [8]))
	*($6 + [32]) = *($6 + [16])
	*((($6 + [48]) + [8])) = *($1)
	*($6 + [48]) = *($6 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$3 = *((($6 + [48]) + [8]))
	*((($6 + [64]) + [8])) = $3
	*(($6 + [8])) = $3
	$3 = *($6 + [48])
	*($6 + [64]) = $3
	*($6) = $3
	CALL void $1((int_32 $6), (int_32 $5))
	*([0] + [4]) = ($6 + [80])
	return [1]
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	$3 = [0]
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$4 = *($0)
	*($5 + [24]) = $4
	*($5 + [32]) = $4
	$2 = CALL db_find_i64($4, $4, (int_64)-3523243552165330944, (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$2) < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $102(($5 + [24]), $2) + [16]) == (int_32)($5 + [24])), [144])
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [1456])
	$4 = *($0)
	*($5 + [16]) = $1
	CALL $107(($5 + [8]), ($5 + [24]), $4, ($5 + [16]))
	$3 = *($5 + [48])
	if ( ($3 == 0) ){ goto $label$3 }
	$2 = ($5 + [52])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $205($1)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($2) = $3
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $41 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-3705008938953998336, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $109($6, $3)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)$6), [144])
	
.LABEL $label$1
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [208])
	CALL eosio_assert($3, [256])
	$3 = CALL db_next_i64(*($0 + [24]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $109($6, $3)
	
.LABEL $label$2
	CALL $110($6, $0)
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $205(*(($3 + [16])))
	
.LABEL $label$8
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [592])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $84(($2 + [48]), (($2 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $112(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $205(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [592])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	CALL $84(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $85(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $205(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC $46 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	*($8 + [104]) = $2
	CALL require_auth($1)
	$4 = [0]
	*((($8 + [64]) + [32])) = [0]
	*($8 + [80]) = (int_64)-1
	*($8 + [88]) = (int_64)0
	$6 = *($0)
	*($8 + [64]) = $6
	*($8 + [72]) = $6
	$5 = CALL db_find_i64($6, $6, (int_64)-3681244989058187264, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $75(($8 + [64]), $5) + [8]) == (int_32)($8 + [64])), [144])
	*((($8 + [24]) + [32])) = [0]
	*($8 + [40]) = (int_64)-1
	*($8 + [48]) = (int_64)0
	$6 = *($0)
	*($8 + [24]) = $6
	*($8 + [32]) = $1
	$5 = CALL db_find_i64($6, $1, (int_64)-3689428501300510720, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $87(($8 + [24]), $5)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($8 + [24])), [144])
	
.LABEL $label$2
	*($8 + [20]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ($4 == 0) ){ goto $label$5 }
	*($8 + [12]) = ($8 + [20])
	*($8 + [8]) = ($8 + [104])
	CALL eosio_assert([1], [944])
	CALL $89(($8 + [24]), $4, (int_64)0, ($8 + [8]))
	$5 = *($8 + [48])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = *($0)
	*($8 + [12]) = ($8 + [20])
	*($8 + [8]) = ($8 + [104])
	CALL $88($8, ($8 + [24]), $1, ($8 + [8]))
	$5 = *($8 + [48])
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($8 + [52])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $205($4)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($8 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $5
	
.LABEL $label$6
	*($7) = $5
	CALL $205($0)
	
.LABEL $label$3
	$5 = *($8 + [88])
	if ( ($5 == 0) ){ goto $label$1 }
	$7 = ($8 + [92])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $205($4)
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($8 + [88]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $5
	
.LABEL $label$10
	*($7) = $5
	CALL $205($0)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $45 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [192])
	*([0] + [4]) = $17
	CALL require_auth(*($0))
	*(($17 + [168])) = [0]
	*($17 + [152]) = (int_64)-1
	*($17 + [160]) = (int_64)0
	$12 = *($0)
	*($17 + [136]) = $12
	*($17 + [144]) = $12
	*(($17 + [128])) = [0]
	*($17 + [120]) = (int_64)0
	$0 = CALL strlen([1168])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*($17 + [120]) = ($0 << [1])
	$13 = (($17 + [120]) | [1])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($0 + [16]) & [-16])
	$13 = CALL $204($4)
	*($17 + [120]) = ($4 | [1])
	*($17 + [128]) = $13
	*($17 + [124]) = $0
	
.LABEL $label$3
	CALL memcpy($13, [1168], $0)
	
.LABEL $label$2
	*(($13 + $0)) = [0]
	$0 = CALL db_lowerbound_i64(*($17 + [136]), *((($17 + [136]) + [8])), (int_64)-3887392663594336256, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	$3 = ($17 + [32])
	$0 = CALL $92(($17 + [136]), $0)
	$7 = (($17 + [104]) + [8])
	$2 = ($17 + [16])
	$8 = ($2 + [4])
	$9 = ($17 + [92])
	$11 = ($17 + [40])
	$10 = ($17 + [84])
	
.LOOP $label$6:
	$13 = *($0 + [136])
	$4 = CALL strlen([1232])
	if ( ((int_32)$4 != (int_32)( *(($0 + [140])) ? uint_32($13 >> [1]) : ($13 & [1]) )) ){ goto $label$8 }
	if ( (CALL $212(($0 + [136]), [0], [-1], [1232], $4) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	if ( *($0 + [148]) ){ goto $label$7 }
	$12 = *($0)
	if ( ((uint_64)$12 > (uint_64)(int_64)15) ){ goto $label$9 }
	if ( ((int_64)((int_64)((int_64)1 << (int_64)$12) & (int_64)33800) != (int_64)0) ){ goto $label$7 }
	
.LABEL $label$9
	$6 = CALL ceil(((float_64)(CASTING float_64)(int_64 *($0 + [120])) * (float_64)((float_64)CALL ceil(((float_64)((float_64)(CASTING float_64)(int_64 *($0 + [104])) * (float_64)(float_64)10) / (float_64)(CASTING float_64)(int_64 *($0 + [88])))) / (float_64)(float_64)10)))
	$12 = *(($0 + [96]))
	*($7) = $12
	$15 = (Rounds 0)($6)
	*($17 + [104]) = $15
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$4 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$4 = [0]
	
.LABEL $label$10
	CALL eosio_assert($4, [560])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($0 + [112]))), [1248])
	if ( ((int_64)*($17 + [104]) >= (int_64)*(($0 + [104]))) ){ goto $label$7 }
	$5 = *($0 + [8])
	$12 = (int_64)0
	$14 = (int_64)59
	$13 = [1184]
	$16 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$20 }
	$4 = *($13)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$4 = ($4 + [165])
	goto $label$18 
	
.LABEL $label$20
	$15 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$16
	$13 = ($13 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$15 }
	*((($17 + [48]) + [8])) = $16
	*($17 + [48]) = $5
	$5 = *($0 + [16])
	$12 = (int_64)0
	$14 = (int_64)59
	$13 = [128]
	$16 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$26 }
	$4 = *($13)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$4 = ($4 + [165])
	goto $label$24 
	
.LABEL $label$26
	$15 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$22
	$13 = ($13 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$21 }
	*(($17 + [8])) = $1
	$12 = *(($0 + [8]))
	*($8) = *($17 + [108])
	*(($2 + [12])) = *((($17 + [104]) + [12]))
	*(($2 + [8])) = *($7)
	*($17) = $12
	*($2) = *($17 + [104])
	CALL $216($3, ($17 + [120]))
	CALL $79(($17 + [176]), CALL $94(($17 + [64]), ($17 + [48]), $5, $16, $17))
	$13 = *($17 + [176])
	CALL send_inline($13, (*($17 + [180]) - $13))
	$13 = *($17 + [176])
	if ( ($13 == 0) ){ goto $label$27 }
	*($17 + [180]) = $13
	CALL $205($13)
	
.LABEL $label$27
	$13 = *($9)
	if ( ($13 == 0) ){ goto $label$28 }
	*((($17 + [64]) + [32])) = $13
	CALL $205($13)
	
.LABEL $label$28
	$13 = *((($17 + [64]) + [16]))
	if ( ($13 == 0) ){ goto $label$29 }
	*($10) = $13
	CALL $205($13)
	
.LABEL $label$29
	if ( ((*($3) & [1]) == 0) ){ goto $label$30 }
	CALL $205(*($11))
	
.LABEL $label$30
	*($17) = ($17 + [104])
	CALL eosio_assert([1], [944])
	CALL $95(($17 + [136]), $0, (int_64)0, $17)
	
.LABEL $label$7
	CALL eosio_assert([1], [256])
	$0 = CALL db_next_i64(*($0 + [168]), $17)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$5 }
	$0 = CALL $92(($17 + [136]), $0)
	goto $label$6 
	
.LABEL $label$5
	if ( ((*($17 + [120]) & [1]) == 0) ){ goto $label$31 }
	CALL $205(*($17 + [128]))
	
.LABEL $label$31
	$4 = *($17 + [160])
	if ( ($4 == 0) ){ goto $label$32 }
	$7 = ($17 + [164])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$34 }
	
.LOOP $label$35:
	$0 = ($0 + [-24])
	$13 = *($0)
	*($0) = [0]
	if ( ($13 == 0) ){ goto $label$36 }
	CALL $93($13)
	CALL $205($13)
	
.LABEL $label$36
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$35 }
	$0 = *(($17 + [160]))
	goto $label$33 
	
.LABEL $label$34
	$0 = $4
	
.LABEL $label$33
	*($7) = $4
	CALL $205($0)
	
.LABEL $label$32
	*([0] + [4]) = ($17 + [192])
	return (unreachable)
	
.LABEL $label$1
	CALL $206(($17 + [120]))
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$3 = *($0)
	*($5) = $3
	*($5 + [8]) = $3
	$0 = [0]
	$1 = CALL db_find_i64($3, $3, (int_64)-3523243552165330944, (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $102($5, $1)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$5), [144])
	
.LABEL $label$1
	$1 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($1, [1424])
	CALL eosio_assert($1, [208])
	CALL eosio_assert($1, [256])
	$1 = CALL db_next_i64(*($0 + [20]), ($5 + [40]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	CALL $102($5, $1)
	
.LABEL $label$2
	CALL $103($5, $0)
	$2 = *($5 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$4 = ($5 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $205($1)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $222 ()
{
	(unreachable)
}

void .FUNC $167 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	*($1 + [17]) = (*($1 + [17]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1104])
	*($5 + [40]) = ($5 + [18])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $119(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [18])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $166 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	$7 = *(*($3 + [4]))
	$6 = *($1 + [8])
	$5 = *(*($3))
	$8 = *($1 + [16])
	if ( ((uint_32)(($8 + ((uint_32)($5 - $6) / (uint_32)$7)) & [255]) >= (uint_32)*(*($3 + [8]))) ){ goto $label$3 }
	if ( (($8 & [255]) == 0) ){ goto $label$2 }
	*(($1 + [16])) = ($8 + [-1])
	goto $label$1 
	
.LABEL $label$3
	*(($1 + [8])) = $5
	*(($1 + [16])) = (*(*(($3 + [8]))) + [255])
	goto $label$1 
	
.LABEL $label$2
	*(($1 + [8])) = ($7 + $6)
	
.LABEL $label$1
	CALL eosio_assert([1], [1104])
	$10 = $10
	$3 = ($10 + [-32])
	*([0] + [4]) = $3
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($10 + [-14])
	CALL $119($9, $1)
	CALL db_update_i64(*($1 + [28]), $2, $3, [18])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $165 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*(($4 = CALL $204([40])) + [24]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = *(*($3 + [4]))
	*($4 + [16]) = (*(*($3 + [8])) + [255])
	*($4 + [12]) = [0]
	*($4 + [17]) = [0]
	*($8 + [56]) = (($8 + [16]) + [18])
	*($8 + [52]) = ($8 + [16])
	*($8 + [48]) = ($8 + [16])
	CALL $119(($8 + [48]), $4)
	$5 = *($4)
	*($4 + [28]) = CALL db_store_i64(*($1 + [8]), (int_64)-3615112468298203136, $2, $5, ($8 + [16]), [18])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [48]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [28])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [48]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $120(($1 + [24]), ($8 + [48]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $205($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [64])
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $204([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [2212]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $217($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $209($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $204([32])
	$6 = CALL $169($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $170(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-8] - $5)
	$4 = (CASTING uint_64)(uint_32 $5)
	$2 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $80($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($6) = $3
	*($6 + [8]) = $5
	CALL eosio_assert(((int_32)($5 - $3) > (int_32)[7]), [800])
	CALL memcpy($3, $1, [8])
	*($6 + [4]) = ($3 + [8])
	CALL $83($6, $2)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $161 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	*($1 + [17]) = (*($1 + [17]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [1104])
	*($5 + [40]) = ($5 + [18])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $119(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [18])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $160 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	$7 = *(*($3 + [4]))
	$6 = *($1 + [8])
	$5 = *(*($3))
	$8 = *($1 + [16])
	if ( ((uint_32)(($8 + ((uint_32)($5 - $6) / (uint_32)$7)) & [255]) >= (uint_32)*(*($3 + [8]))) ){ goto $label$3 }
	if ( (($8 & [255]) == 0) ){ goto $label$2 }
	*(($1 + [16])) = ($8 + [-1])
	goto $label$1 
	
.LABEL $label$3
	*(($1 + [8])) = $5
	*(($1 + [16])) = (*(*(($3 + [8]))) + [255])
	goto $label$1 
	
.LABEL $label$2
	*(($1 + [8])) = ($7 + $6)
	
.LABEL $label$1
	CALL eosio_assert([1], [1104])
	$10 = $10
	$3 = ($10 + [-32])
	*([0] + [4]) = $3
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($10 + [-14])
	CALL $119($9, $1)
	CALL db_update_i64(*($1 + [28]), $2, $3, [18])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $168 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	$5 = *($3)
	$7 = *($5)
	$6 = *($5 + [8])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$6), [2064])
	$7 = ((int_64)$7 + (int_64)*($3))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [2112])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [2144])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [112]))), [1312])
	$7 = (int_64)
	*($1 + [104]) = $7(*($1 + [104]) - $7))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1360])
	CALL eosio_assert(((int_64)*($1 + [104]) < (int_64)4611686018427387904), [1392])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 $4) == (int_32)*($1)), [1104])
	*(($3 = $8)) = [0]
	CALL $96($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$8 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$8 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$1
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = ($8 + $5)
	CALL $97($3, $1)
	CALL db_update_i64(*($1 + [168]), $2, $8, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($8)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $175 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*(($4 = CALL $204([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [800])
	CALL memcpy(($8 + [16]), $4, [8])
	$5 = *($4)
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-3681244989058187264, $2, $5, ($8 + [16]), [8])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [8]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [12])
	*($8 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [8]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $77(($1 + [24]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $205($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [464])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $204([48])) + [24]) = (int_64)1397703940
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [560])
	*($4 + [32]) = $0
	CALL $60(($8 + [32]), $4)
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $61($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $205($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $205($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $205($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL require_auth(*($1))
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$3 = *($0)
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	$0 = [0]
	$1 = CALL db_find_i64($3, $3, (int_64)-3922483085538492416, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $70(($5 + [8]), $1)
	CALL eosio_assert(((int_32)*($0 + [36]) == (int_32)($5 + [8])), [144])
	
.LABEL $label$1
	$1 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($1, [928])
	CALL eosio_assert($1, [944])
	CALL $71(($5 + [8]), $0, (int_64)0, $5)
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($5 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $205($1)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($4) = $2
	CALL $205($0)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*($6 + [8]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [8])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL require_auth(*($1))
	CALL eosio_assert(CALL $fimport$20(*($2)), [608])
	*(($5 + [72])) = [0]
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	$3 = *($0)
	*($5 + [40]) = $3
	*($5 + [48]) = $3
	*($5 + [76]) = [0]
	*($5 + [32]) = ($5 + [40])
	*($5 + [8]) = *($1)
	CALL $65(($5 + [24]), ($5 + [32]), ($5 + [8]))
	$4 = *($5 + [28])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	if ( ((int_64)*($4 + [8]) != (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([0], [640])
	
.LABEL $label$3
	CALL $66(($5 + [24]))
	$4 = *($5 + [28])
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	$3 = *($0)
	*($5 + [12]) = $1
	*($5 + [16]) = $2
	*($5 + [8]) = ($5 + [40])
	CALL $67($5, ($5 + [40]), $3, ($5 + [8]))
	$0 = *($5 + [64])
	if ( ($0 == 0) ){ goto $label$4 }
	$2 = ($5 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $205($1)
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$7 }
	$4 = *(($5 + [64]))
	goto $label$5 
	
.LABEL $label$6
	$4 = $0
	
.LABEL $label$5
	*($2) = $0
	CALL $205($4)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [80])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [32])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [592])
	$3 = ($7 + [8])
	CALL memcpy($3, ($5 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	$4 = *($3)
	*($7 + [24]) = *($7)
	*($7 + [16]) = $4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 ($7 + [24])), (int_32 ($7 + [16])), (int_32 $6))
	*([0] + [4]) = ($7 + [32])
	return [1]
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [48])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$2 = *($0)
	*($6 + [16]) = $2
	*($6 + [24]) = $2
	*($6 + [52]) = [0]
	*($6 + [8]) = ($6 + [16])
	CALL $65($6, ($6 + [8]), $1)
	$0 = *($6 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	$2 = *($0)
	$3 = *(($6 + [40]))
	$5 = *(($6 + [44]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$0 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$3:
	if ( ((int_64)*(*($0)) == (int_64)$2) ){ goto $label$2 }
	$5 = $0
	$1 = ($0 + [-24])
	$0 = $1
	if ( ((int_32)($1 + $4) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$5 }
	$0 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($6 + [16])), [144])
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	$1 = CALL db_find_i64(*($6 + [16]), *(($6 + [24])), (int_64)3634027333790515200, $2)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $62(($6 + [16]), $1)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($6 + [16])), [144])
	
.LABEL $label$4
	$1 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($1, [208])
	CALL eosio_assert($1, [256])
	$1 = CALL db_next_i64(*($0 + [28]), ($6 + [56]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	CALL $62(($6 + [16]), $1)
	
.LABEL $label$6
	CALL $63(($6 + [16]), $0)
	
.LABEL $label$1
	$5 = *($6 + [40])
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = ($6 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $205($1)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($6 + [40]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $5
	
.LABEL $label$8
	*($4) = $5
	CALL $205($0)
	
.LABEL $label$7
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*($6 + [8]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [8])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $56 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	*($6 + [36]) = [0]
	$0 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)3634027333790515200, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $62($6, $3)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$6), [144])
	
.LABEL $label$1
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [208])
	CALL eosio_assert($3, [256])
	$3 = CALL db_next_i64(*($0 + [28]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $62($6, $3)
	
.LABEL $label$2
	CALL $63($6, $0)
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $57 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)5606361038203797504, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $58($6, $0)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)$6), [144])
	CALL eosio_assert([1], [208])
	CALL eosio_assert([1], [256])
	$3 = CALL db_next_i64(*($0 + [36]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $58($6, $3)
	
.LABEL $label$2
	CALL $59($6, $0)
	
.LABEL $label$1
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $84(*($1), *($0 + [12]))
	CALL $84(*($1), *($0 + [16]))
	CALL $84(*($1), *($0 + [20]))
	CALL $84(*($1), *($0 + [24]))
	CALL $84(*($1), *($0 + [28]))
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [592])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $84(*($1), *($0 + [44]))
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy(($5 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [15]) != (int_32)[0])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [592])
	CALL memcpy(($5 + [14]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [14]) != (int_32)[0])
	CALL $84(*($1), *($0 + [56]))
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $205($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $205($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $205($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
	$7 = *(($1 + [32]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3722870213289443328, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $204([40])) + [24]) = $0
	CALL $151(($8 + [32]), $6)
	*($6 + [32]) = [-1]
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $152(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [592])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [592])
	CALL memcpy(($1 + [20]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

int_32 .FUNC $156 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [28]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [880])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3722870213289443328)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [816])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [816])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $150(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $157 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	*($1 + [17]) = [0]
	$4 = *($1)
	CALL eosio_assert([1], [1104])
	*($5 + [40]) = ($5 + [18])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $119(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [18])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $154 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $204([40])) + [24]) = $1
	CALL $155(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $152(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $205($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$6 = *($4 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)-3722870213289443328, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $150($4, $5)
	*($9 + [12]) = [0]
	*($9 + [8]) = $4
	$6 = *(*(CALL $156(($9 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [736])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = (CASTING uint_32)(float_64 ((float_64)*(*($3 + [4]) + [8]) * (float_64)(float_64)3600))
	*($1 + [20]) = *(*($3 + [4]) + [16])
	$3 = $10
	$4 = ($3 + [-32])
	*([0] + [4]) = $4
	CALL eosio_assert([1], [800])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [800])
	$10 = ($1 + [8])
	CALL memcpy(($3 + [-24]), $10, [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($3 + [-16]), ($1 + [16]), [4])
	CALL eosio_assert([1], [800])
	CALL memcpy(($3 + [-12]), ($1 + [20]), [1])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-3722870213289443328, *(*($0 + [8])), $6, $4, [21])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$6 = *(($2 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($9 + [8]) = *($10)
	*($1 + [32]) = CALL db_idx64_store($6, (int_64)-3722870213289443328, $7, $8, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $158 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $205($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $205($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $159 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*(($4 = CALL $204([40])) + [24]) = $1
	*($4) = *(*($3))
	*($4 + [8]) = *(*($3 + [4]))
	*($4 + [16]) = (*(*($3 + [8])) + [255])
	*($4 + [12]) = [0]
	*($4 + [17]) = [0]
	*($8 + [56]) = (($8 + [16]) + [18])
	*($8 + [52]) = ($8 + [16])
	*($8 + [48]) = ($8 + [16])
	CALL $119(($8 + [48]), $4)
	$5 = *($4)
	*($4 + [28]) = CALL db_store_i64(*($1 + [8]), (int_64)-3615112468298203136, $2, $5, ($8 + [16]), [18])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [48]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [28])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [48]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $120(($1 + [24]), ($8 + [48]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $205($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $204([56])) + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40]) = [0]
	*($6 + [44]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [592])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $84(CALL $84(CALL $84(($8 + [32]), ($6 + [8])), ($6 + [20])), ($6 + [32]))
	*($6 + [48]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [48])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $182(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $205(*(($4 + [40])))
	
.LABEL $label$10
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL $205(*(($4 + [28])))
	
.LABEL $label$11
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $205(*(($4 + [16])))
	
.LABEL $label$12
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $183 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $205(*(($2 + [40])))
	
.LABEL $label$4
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL $205(*(($2 + [28])))
	
.LABEL $label$5
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $205(*(($2 + [16])))
	
.LABEL $label$6
	CALL $205($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $205($2)
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [28]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [880])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)3634027333790515200)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [816])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [816])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $62(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$6 = *($4 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)3634027333790515200, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $62($4, $5)
	*($9 + [12]) = [0]
	*($9 + [8]) = $4
	$6 = *(*(CALL $69(($9 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [736])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$4 = $10
	$10 = ($4 + [-32])
	*([0] + [4]) = $10
	CALL eosio_assert([1], [800])
	CALL memcpy($10, $1, [8])
	CALL eosio_assert([1], [800])
	$3 = ($1 + [8])
	CALL memcpy(($4 + [-24]), $3, [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($4 + [-16]), ($1 + [16]), [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)3634027333790515200, *(*($0 + [8])), $6, $10, [24])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$6 = *(($2 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($9 + [8]) = *($3)
	*($1 + [32]) = CALL db_idx64_store($6, (int_64)3634027333790515200, $7, $8, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)3634027333790515200, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$4), [144])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $62($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)3634027333790515200, $5))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$4), [144])
	
.LABEL $label$4
	*(($2 + [32])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $205($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $204([40])) + [24]) = $1
	CALL $68(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $64(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $205($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [256])
	$6 = *($0 + [4])
	$7 = *($6 + [32])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)3634027333790515200, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [32]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$2), [144])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $62($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)3634027333790515200, $3))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$2), [144])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [32])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $205($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $205($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $205($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
	$7 = *(($1 + [32]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3634027333790515200, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [464])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $204([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [592])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [592])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [592])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [32]) = [-1]
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $64(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	$5 = *(*($3))
	*($1) = $5
	*($1 + [8]) = *(*($3 + [4]))
	CALL eosio_assert(((int_64)$4 == (int_64)$5), [1104])
	CALL eosio_assert([1], [800])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 | [12]), ($1 + [12]), [4])
	CALL db_update_i64(*($1 + [20]), $2, $6, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $204([32])) + [16]) = $1
	CALL $90(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $91(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $205($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [464])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $204([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [592])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-4])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [592])
	CALL memcpy(($6 + [8]), ($7 + [8]), [4])
	CALL eosio_assert(((int_32)$4 != (int_32)[12]), [592])
	CALL memcpy(($6 + [12]), ($7 + [12]), [4])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $91(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1216])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $80($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [592])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $216($5, ($1 + [16]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $216(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [16])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $205(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $205(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $86($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $209($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $204($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $209($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $205($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $206($7)
	return (unreachable)
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [800])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [800])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [800])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [800])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [800])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [800])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [800])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $204($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $215($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $205($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $182 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $204(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $183(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $149 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$3 = ((*(*($3) + [28]) + *($1 + [16])) - *(*($3 + [4])))
	*($1 + [16]) = ( $3 ? [0] : ((int_32)$3 > (int_32)[0]) )
	$4 = *($1)
	CALL eosio_assert([1], [1104])
	*($5 + [40]) = ($5 + [18])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $119(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [18])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $148 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-3722870213289443328, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$4), [144])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $150($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)-3722870213289443328, $5))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$4), [144])
	
.LABEL $label$4
	*(($2 + [32])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [800])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [800])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [800])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $82(CALL $81($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [800])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [800])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [800])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [800])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	*((($5 + [72]) + [32])) = [0]
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	$3 = *($0)
	*($5 + [72]) = $3
	*($5 + [80]) = $3
	*($5 + [108]) = [0]
	*($5 + [64]) = ($5 + [72])
	*($5 + [8]) = *($1 + [8])
	CALL $148(($5 + [56]), ($5 + [64]), ($5 + [8]))
	*($5 + [55]) = *($1 + [28])
	$2 = *($5 + [60])
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = *($2 + [20])
	$2 = *($2 + [16])
	goto $label$1 
	
.LABEL $label$2
	$4 = [12]
	$2 = [3600]
	
.LABEL $label$1
	*($1 + [24]) = $2
	*($1 + [32]) = [0]
	*(($1 + [28])) = $4
	*((($5 + [8]) + [32])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$3 = *($0)
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)-3615112468298203136, *($1))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $116(($5 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($5 + [8])), [144])
	*($5) = $1
	*($5 + [4]) = ($5 + [55])
	CALL eosio_assert([1], [944])
	CALL $149(($5 + [8]), $0, (int_64)0, $5)
	
.LABEL $label$3
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($5 + [36])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL $205($0)
	
.LABEL $label$8
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	$1 = *(($5 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $2
	
.LABEL $label$5
	*($4) = $2
	CALL $205($1)
	
.LABEL $label$4
	$2 = *($5 + [96])
	if ( ($2 == 0) ){ goto $label$9 }
	$4 = ($5 + [100])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$11 }
	
.LOOP $label$12:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	CALL $205($0)
	
.LABEL $label$13
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$12 }
	$1 = *(($5 + [96]))
	goto $label$10 
	
.LABEL $label$11
	$1 = $2
	
.LABEL $label$10
	*($4) = $2
	CALL $205($1)
	
.LABEL $label$9
	*([0] + [4]) = ($5 + [112])
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [800])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [800])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $82($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $141 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $204([48])) + [24]) = (int_64)1397703940
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [560])
	*($4 + [32]) = $1
	CALL $142(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [36])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $61(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $205($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($3)
	*($1 + [16]) = *($3 + [8])
	*(($5 = ($1 + [24]))) = *(($3 + [16]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1104])
	CALL eosio_assert([1], [800])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 + [24]), $5, [8])
	CALL db_update_i64(*($1 + [36]), $2, $6, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$2 = *($0)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = *($4)
	*($1 + [16]) = *($4 + [8])
	*(($5 = ($1 + [24]))) = *(($4 + [16]))
	CALL eosio_assert([1], [800])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 + [24]), $5, [8])
	$3 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)5606361038203797504, *(*($0 + [8])), $3, $6, [32])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [592])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [592])
	CALL memcpy(($1 + [28]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [592])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [464])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $204([48])) + [16]) = (int_64)1397703940
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [496])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [560])
	*($4 + [36]) = $0
	CALL $73(($8 + [32]), $4)
	*($4 + [40]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [40])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $74($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $205($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	*($1 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [259200])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1104])
	*($5 + [56]) = ($5 + [33])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $72(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [40]), $2, $5, [33])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $205($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $205($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $205($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $205($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [464])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $204([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [592])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $204([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [16])
	$1 = ( *(($4 + [20])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [16])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [16])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $80($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [800])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [800])
	CALL memcpy($6, ($4 + [8]), [8])
	*($9 + [4]) = ($8 + [16])
	CALL $83($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $80($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [800])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [800])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $82(CALL $81($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [800])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [800])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [800])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [800])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $83(*($1), ($0 + [32]))
}

int_32 .FUNC $99 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [48 align=4]) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	$2 = [0]
	*(($0 + [64])) = [0]
	*(($0 + [68])) = [0]
	*($0 + [72]) = [0]
	*(($0 + [76])) = [0]
	*(($0 + [80])) = [0]
	*($0 + [88]) = (int_64)0
	*(($3 = ($0 + [96]))) = (int_64)1397703940
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [560])
	*(($2 = ($0 + [112]))) = (int_64)1397703940
	*($0 + [104]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [560])
	*(($2 = ($0 + [128]))) = (int_64)1397703940
	*($0 + [120]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [560])
	*(($0 + [144])) = [0]
	*($0 + [136 align=4]) = (int_64)0
	*($0 + [152]) = [0]
	*(($0 + [156])) = [0]
	*(($0 + [160])) = [0]
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $204([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $80($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $98(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [112]))), [1312])
	$6 = (int_64)
	*($1 + [104]) = $6(*($1 + [104]) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1360])
	CALL eosio_assert(((int_64)*($1 + [104]) < (int_64)4611686018427387904), [1392])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 $4) == (int_32)*($1)), [1104])
	*(($3 = $7)) = [0]
	CALL $96($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$7 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$1
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($7 + $5)
	CALL $97($3, $1)
	CALL db_update_i64(*($1 + [168]), $2, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($7)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*($0) + [24])
	*($0) = $4
	$2 = *($1 + [24])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $4
	$2 = *(($1 + [24]))
	$2 = ( *(($1 + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$2
	$2 = *($1 + [36])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [40])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *(($1 + [36]))
	$2 = ( *(($1 + [40])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$4
	$2 = *($1 + [48])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [52])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	*($0) = $4
	$2 = *(($1 + [48]))
	$2 = ( *(($1 + [52])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$6
	$2 = *($1 + [60])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [64])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$7:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$7 }
	*($0) = $4
	$2 = *(($1 + [60]))
	$2 = ( *(($1 + [64])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$8
	$2 = *($1 + [72])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [76])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$9:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $4
	$2 = *(($1 + [72]))
	$2 = ( *(($1 + [76])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$10 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$10
	$4 = ($4 + [48])
	*($0) = $4
	$2 = *($1 + [136])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [140])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$11:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$11 }
	*($0) = $4
	$2 = *(($1 + [136]))
	$2 = ( *(($1 + [140])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$12 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$12
	$4 = ($4 + [2])
	*($0) = $4
	$2 = *($1 + [152])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [156])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$13:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$13 }
	*($0) = $4
	$1 = *(($1 + [152]))
	$1 = ( *(($1 + [156])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$14 }
	*($0) = ($1 + $4)
	
.LABEL $label$14
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $83(CALL $83(CALL $83(CALL $83(CALL $83($0, ($1 + [24])), ($1 + [36])), ($1 + [48])), ($1 + [60])), ($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $83($0, ($1 + [136]))
	*($3 + [14]) = *($1 + [148])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [800])
	CALL memcpy(*($0 + [4]), ($3 + [14]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [149])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [800])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = CALL $83($0, ($1 + [152]))
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0 + [4])
	*($1) = *(*($2))
	*($1 + [8]) = *(*($2 + [4]))
	$2 = *($0)
	CALL eosio_assert([1], [800])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [800])
	CALL memcpy(($4 | [12]), ($1 + [12]), [4])
	$3 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)-3689428501300510720, *(*($0 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $205($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $204([176])
	$4 = CALL $99($6)
	*($6 + [164]) = $0
	CALL $100(($8 + [16]), $4)
	*($6 + [168]) = $1
	*($8 + [8]) = $6
	$5 = *($6)
	*($8 + [6]) = $5
	$7 = *($6 + [168])
	*($8) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [8]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $101(($0 + [24]), ($8 + [8]), ($8 + [6]), $8)
	
.LABEL $label$8
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $93($4)
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $93 (int_32 $0)
{
	if ( ((*($0 + [152]) & [1]) == 0) ){ goto $label$1 }
	CALL $205(*(($0 + [160])))
	
.LABEL $label$1
	if ( ((*($0 + [136]) & [1]) == 0) ){ goto $label$2 }
	CALL $205(*(($0 + [144])))
	
.LABEL $label$2
	if ( ((*($0 + [72]) & [1]) == 0) ){ goto $label$3 }
	CALL $205(*(($0 + [80])))
	
.LABEL $label$3
	if ( ((*($0 + [60]) & [1]) == 0) ){ goto $label$4 }
	CALL $205(*(($0 + [68])))
	
.LABEL $label$4
	if ( ((*($0 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $205(*(($0 + [56])))
	
.LABEL $label$5
	if ( ((*($0 + [36]) & [1]) == 0) ){ goto $label$6 }
	CALL $205(*(($0 + [44])))
	
.LABEL $label$6
	if ( ((*($0 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $205(*(($0 + [32])))
	
.LABEL $label$7
	return $0
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $143($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $80($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $144($4, $1)
	CALL $146(CALL $145(CALL $145($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $205($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $205($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $205($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $205($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $205($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $205($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $205($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $205($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [24]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [880])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3681528868142841856)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [816])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [816])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $125(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*(($4 = CALL $204([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [800])
	CALL memcpy(($8 + [16]), $4, [8])
	$5 = *($4)
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-3899444101308743680, $2, $5, ($8 + [16]), [8])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [8]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [12])
	*($8 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [8]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $124(($1 + [24]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $205($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [164]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	*($1) = (int_64)52
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 $4) == (int_32)[52]), [1104])
	*(($7 = $6)) = [0]
	CALL $96($7, $1)
	$5 = *($7)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $97($7, $1)
	CALL db_update_i64(*($1 + [168]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $133 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	*($1 + [32]) = [222]
	$4 = *($1)
	CALL eosio_assert([1], [1104])
	*($5 + [56]) = ($5 + [33])
	*($5 + [52]) = $5
	*($5 + [48]) = $5
	CALL $72(($5 + [48]), $1)
	CALL db_update_i64(*($1 + [40]), $2, $5, [33])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $205($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $205($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
}

void .FUNC $135 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	$5 = *($3 + [4])
	$3 = *($3)
	CALL eosio_assert(((int_64)*(($3 + [16])) == (int_64)*(($1 + [16]))), [1312])
	$6 = (int_64)
	*($1 + [8]) = $6(*($1 + [8]) - *($3 + [8])))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1360])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1392])
	CALL $147($5, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1104])
	*($7 + [56]) = ($7 + [33])
	*($7 + [52]) = $7
	*($7 + [48]) = $7
	CALL $72(($7 + [48]), $1)
	CALL db_update_i64(*($1 + [40]), $2, $7, [33])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$4 = [0]
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$3 = *($1)
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	$2 = CALL db_find_i64($3, $3, (int_64)-3705008938953998336, (CASTING uint_64)(uint_32 ($2 & [3])))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $109(($5 + [8]), $2)
	CALL eosio_assert(((int_32)*($4 + [20]) == (int_32)($5 + [8])), [144])
	
.LABEL $label$1
	CALL $216($0, ($4 + [8]))
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$1 = ($5 + [36])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $205(*(($0 + [16])))
	
.LABEL $label$7
	CALL $205($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $2
	
.LABEL $label$3
	*($1) = $2
	CALL $205($4)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($7 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$5 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($1)
	*($8 + [16]) = *($1 + [16])
	*(($8 + [8])) = *(($1 + [8]))
	$7 = ($1 + [20])
	*(($8 + [20])) = *($7)
	*($7) = [0]
	$7 = ($1 + [24])
	$3 = *($7)
	*($7) = [0]
	*(($8 + [24])) = $3
	*($1 + [16]) = [0]
	*($8 + [28]) = *($1 + [28])
	$7 = ($1 + [32])
	*(($8 + [32])) = *($7)
	$3 = ($1 + [36])
	$4 = *($3)
	*($3) = [0]
	*(($8 + [36])) = $4
	*($7) = [0]
	*($1 + [28]) = [0]
	$4 = ($6 + ((int_32)$5 * (int_32)[40]))
	$2 = ($8 + [40])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$6 }
	$3 = ([0] - $1)
	$1 = ($5 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($1 + [-12]))
	*(($8 + [-40])) = *(($1 + [-20]))
	*(($5 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($1 + [-4])
	*($5) = *($7)
	*(($8 + [-20])) = *($1)
	$5 = ($1 + [4])
	*($6) = *($5)
	*($5) = [0]
	*(($5 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($1 + [8])
	*($5) = *($7)
	*(($8 + [-8])) = *(($1 + [12]))
	$5 = ($1 + [16])
	*($6) = *($5)
	*($5) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$1 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $1
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $2
	*(($0 + [8])) = $4
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$8 }
	$5 = ([0] - $6)
	$8 = ($1 + [-24])
	
.LOOP $label$9:
	$1 = *(($8 + [12]))
	if ( ($1 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $1
	CALL $205($1)
	
.LABEL $label$10
	$1 = *($8)
	if ( ($1 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $1
	CALL $205($1)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $205($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $213 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = CALL strlen($1)
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$6 = CALL $204($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, $1, $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $214($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $208 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $204($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $205($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $209 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $204(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $205($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $202 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10854]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10856])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10854]) = [1]
	$7 = ($7 << [16])
	*([0] + [10856]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10856])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10856]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10854]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10854]) = [1]
	$3 = ($3 << [16])
	*([0] + [10856]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10856])
	
.LABEL $label$8
	*([0] + [10856]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10752])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10560]
	$1 = (((int_32)$2 * (int_32)[12]) + [10560])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $201([2368], $0)
}

int_32 .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $202($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10768])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $206 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $207 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $208($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $204 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10860])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $205 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $181 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $205(*(($2 + [40])))
	
.LABEL $label$6
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$7 }
	CALL $205(*(($2 + [28])))
	
.LABEL $label$7
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $205(*(($2 + [16])))
	
.LABEL $label$8
	CALL $205($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $205($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	$2 = *($0)
	$3 = *($0 + [4])
	$5 = *($3)
	$6 = *($5 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)-3681528868142841856, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $125($5, $4)
	*($8 + [4]) = [0]
	*($8) = $5
	$6 = *(*(CALL $130($8) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [736])
	*($1) = *(($5 + [16]))
	$4 = ($1 + [8])
	CALL $207($4, *($3 + [4]))
	$5 = *($1 + [8])
	$3 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [8])
	$6 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ($5 <= [513]) ){ goto $label$5 }
	$7 = CALL malloc($5)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$4
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [800])
	CALL memcpy($7, $1, [8])
	*($8 + [4]) = ($7 + [8])
	CALL $83($8, $4)
	$6 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-3681528868142841856, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL free($7)
	
.LABEL $label$6
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $128 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $204([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $129(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $127(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL $205(*(($3 + [16])))
	
.LABEL $label$4
	CALL $205($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1397703940
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [496])
	$6 = (int_64)5459781
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [560])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [592])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [592])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [592])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	CALL require_auth(*($0))
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$3 = *($0)
	*($4 + [24]) = $3
	*($4 + [32]) = $3
	$2 = CALL db_find_i64($3, $3, (int_64)-3921691482146209792, *($1))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $179(($4 + [24]), $2)
	CALL eosio_assert(((int_32)*($0 + [44]) == (int_32)($4 + [24])), [144])
	*($4 + [16]) = $1
	CALL eosio_assert([1], [944])
	CALL $186(($4 + [24]), $0, (int_64)0, ($4 + [16]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *($0)
	*($4 + [20]) = $1
	*($4 + [16]) = ($4 + [24])
	CALL $187(($4 + [8]), ($4 + [24]), $3, ($4 + [16]))
	
.LABEL $label$1
	CALL $181(($4 + [48]))
	*([0] + [4]) = ($4 + [64])
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $205($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $205($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [464])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $204([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [592])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $124(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [592])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [592])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [592])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [592])
	CALL memcpy(($1 + [17]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $205($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $205(*(($4 + [16])))
	
.LABEL $label$7
	CALL $205($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $205(*(($4 + [16])))
	
.LABEL $label$10
	CALL $205($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $204([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [592])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $84(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $127(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $205(*(($4 + [16])))
	
.LABEL $label$10
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $205($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [368])
	$15 = $16
	*([0] + [4]) = $16
	$2 = *($1 + [4])
	$14 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($16 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	CALL memset(($15 + [8]), [0], [168])
	CALL $172(($15 + [8]))
	*($15 + [180]) = $1
	*($15 + [176]) = $1
	*($15 + [184]) = ($1 + $3)
	*($15 + [192]) = ($15 + [176])
	$16 = (($15 + [8]) + [8])
	*($15 + [204]) = $16
	$12 = (($15 + [8]) + [16])
	*($15 + [208]) = $12
	$4 = (($15 + [8]) + [24])
	*($15 + [212]) = $4
	$5 = (($15 + [8]) + [36])
	*($15 + [216]) = $5
	$6 = (($15 + [8]) + [48])
	*($15 + [220]) = $6
	$7 = (($15 + [8]) + [60])
	*($15 + [224]) = $7
	*($15 + [200]) = ($15 + [8])
	$8 = (($15 + [8]) + [72])
	*($15 + [228]) = $8
	$9 = (($15 + [8]) + [88])
	*($15 + [232]) = $9
	*($15 + [236]) = ($15 + [112])
	*($15 + [240]) = ($15 + [128])
	$10 = (($15 + [8]) + [136])
	*($15 + [244]) = $10
	$13 = ($15 + [156])
	*($15 + [248]) = $13
	*($15 + [252]) = ($15 + [157])
	$11 = (($15 + [8]) + [152])
	*($15 + [256]) = $11
	CALL $173(($15 + [200]), ($15 + [192]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*((($15 + [200]) + [16])) = *($12)
	*((($15 + [200]) + [8])) = *($16)
	*($15 + [200]) = *($15 + [8])
	CALL $216((($15 + [200]) + [24]), $4)
	CALL $216((($15 + [200]) + [36]), $5)
	CALL $216((($15 + [200]) + [48]), $6)
	CALL $216((($15 + [200]) + [60]), $7)
	CALL $216((($15 + [200]) + [72]), $8)
	CALL memcpy((($15 + [200]) + [88]), $9, [48])
	CALL $216((($15 + [200]) + [136]), $10)
	*($15 + [348]) = *($13)
	CALL $216((($15 + [200]) + [152]), $11)
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$14 = *((*($1) + $14))
	
.LABEL $label$5
	CALL void $1((int_32 ($15 + [200])), (int_32 $14))
	if ( ((*(($15 + [352])) & [1]) == 0) ){ goto $label$6 }
	CALL $205(*(($15 + [360])))
	
.LABEL $label$6
	if ( ((*(($15 + [336])) & [1]) == 0) ){ goto $label$7 }
	CALL $205(*(($15 + [344])))
	
.LABEL $label$7
	if ( ((*(($15 + [272])) & [1]) == 0) ){ goto $label$8 }
	CALL $205(*(($15 + [280])))
	
.LABEL $label$8
	if ( ((*(($15 + [260])) & [1]) == 0) ){ goto $label$9 }
	CALL $205(*(($15 + [268])))
	
.LABEL $label$9
	if ( ((*(($15 + [248])) & [1]) == 0) ){ goto $label$10 }
	CALL $205(*(($15 + [256])))
	
.LABEL $label$10
	if ( ((*(($15 + [236])) & [1]) == 0) ){ goto $label$11 }
	CALL $205(*(($15 + [244])))
	
.LABEL $label$11
	if ( ((*(($15 + [224])) & [1]) == 0) ){ goto $label$12 }
	CALL $205(*(($15 + [232])))
	
.LABEL $label$12
	if ( ((*(($15 + [160])) & [1]) == 0) ){ goto $label$13 }
	CALL $205(*(($15 + [168])))
	
.LABEL $label$13
	if ( ((*(($15 + [144])) & [1]) == 0) ){ goto $label$14 }
	CALL $205(*(($15 + [152])))
	
.LABEL $label$14
	if ( ((*(($15 + [80])) & [1]) == 0) ){ goto $label$15 }
	CALL $205(*(($15 + [88])))
	
.LABEL $label$15
	if ( ((*(($15 + [68])) & [1]) == 0) ){ goto $label$16 }
	CALL $205(*(($15 + [76])))
	
.LABEL $label$16
	if ( ((*(($15 + [56])) & [1]) == 0) ){ goto $label$17 }
	CALL $205(*(($15 + [64])))
	
.LABEL $label$17
	if ( ((*(($15 + [44])) & [1]) == 0) ){ goto $label$18 }
	CALL $205(*(($15 + [52])))
	
.LABEL $label$18
	if ( ((*(($15 + [32])) & [1]) == 0) ){ goto $label$19 }
	CALL $205(*(($15 + [40])))
	
.LABEL $label$19
	*([0] + [4]) = ($15 + [368])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)-3887392663594336256, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $92($6, $0)
	CALL eosio_assert(((int_32)*($0 + [164]) == (int_32)$6), [144])
	CALL eosio_assert([1], [208])
	CALL eosio_assert([1], [256])
	$3 = CALL db_next_i64(*($0 + [168]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $92($6, $3)
	
.LABEL $label$2
	CALL $171($6, $0)
	
.LABEL $label$1
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $93($3)
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	float_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	int_32 $24
	$24 = (*([0] + [4]) - [400])
	*([0] + [4]) = $24
	CALL require_auth(*($1))
	$2 = [0]
	*((($24 + [344]) + [32])) = [0]
	*($24 + [360]) = (int_64)-1
	*($24 + [368]) = (int_64)0
	$16 = *($0)
	*($24 + [344]) = $16
	*($24 + [352]) = $16
	$23 = CALL db_find_i64($16, $16, (int_64)-3899444101308743680, *($1))
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $122(($24 + [344]), $23) + [8]) == (int_32)($24 + [344])), [144])
	$13 = *($24 + [368])
	if ( $13 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	*($24 + [340]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*((($24 + [296]) + [32])) = [0]
	*($24 + [312]) = (int_64)-1
	*($24 + [320]) = (int_64)0
	$16 = *($0)
	*($24 + [296]) = $16
	*($24 + [304]) = $16
	$23 = CALL db_find_i64($16, $16, (int_64)-3887392663594336256, *($1 + [8]))
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$5 }
	$2 = CALL $92(($24 + [296]), $23)
	CALL eosio_assert(((int_32)*($2 + [164]) == (int_32)($24 + [296])), [144])
	
.LABEL $label$5
	$23 = [0]
	$3 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($3, [1616])
	$4 = ($2 + [136])
	$14 = *($2 + [136])
	$13 = CALL strlen([1632])
	if ( ((int_32)$13 != (int_32)( *(($2 + [140])) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$6 }
	$23 = (CALL $212($4, [0], [-1], [1632], $13) == 0)
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$23 ^ (int_32)[1]), [1760])
	$23 = *($4)
	if ( ($23 & [1]) ){ goto $label$8 }
	$14 = uint_32($23 >> [1])
	$19 = ($4 + [1])
	goto $label$7 
	
.LABEL $label$8
	$14 = *(($2 + [140]))
	$19 = *(($2 + [144]))
	
.LABEL $label$7
	$23 = CALL strlen([1200])
	if ( ($23 == 0) ){ goto $label$10 }
	if ( ((int_32)$14 < (int_32)$23) ){ goto $label$9 }
	$5 = ($19 + $14)
	$13 = $19
	
.LOOP $label$11:
	$14 = (($14 - $23) + [1])
	if ( ($14 == 0) ){ goto $label$9 }
	$14 = CALL memchr($13, [110], $14)
	if ( ($14 == 0) ){ goto $label$9 }
	if ( (CALL memcmp($14, [1200], $23) == 0) ){ goto $label$12 }
	$13 = ($14 + [1])
	$14 = ($5 - $13)
	if ( ((int_32)$14 >= (int_32)$23) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$9 }
	if ( ((int_32)$14 != (int_32)$19) ){ goto $label$9 }
	
.LABEL $label$10
	$14 = [-1]
	CALL $217(($24 + [256]), $4, (CALL $210($4, [58], [0]) + [1]), [-1], $4)
	$23 = ( *($24 + [264]) ? (($24 + [256]) | [1]) : (*($24 + [256]) & [1]) )
	
.LOOP $label$13:
	$13 = ($23 + $14)
	$5 = ($14 + [1])
	$14 = $5
	if ( *(($13 + [1])) ){ goto $label$13 }
	$22 = (CASTING uint_64)(uint_32 $5)
	$16 = (int_64)0
	$21 = (int_64)59
	$17 = (int_64)0
	
.LOOP $label$14:
	$18 = (int_64)0
	if ( ((uint_64)$16 >= (uint_64)$22) ){ goto $label$15 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$14 = ($14 + [165])
	goto $label$16 
	
.LABEL $label$17
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	if ( ((uint_64)$16 > (uint_64)(int_64)11) ){ goto $label$19 }
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	goto $label$18 
	
.LABEL $label$19
	$18 = ((int_64)$18 & (int_64)15)
	
.LABEL $label$18
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$18 | (int_64)$17)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$14 }
	$23 = [0]
	*(($24 + [64])) = [0]
	*($24 + [48]) = (int_64)-1
	*($24 + [56]) = (int_64)0
	$16 = *($0)
	*($24 + [32]) = $16
	*($24 + [40]) = $17
	$14 = CALL db_find_i64($16, $17, (int_64)-3689428501300510720, *($1))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$20 }
	$23 = CALL $87(($24 + [32]), $14)
	CALL eosio_assert(((int_32)*($23 + [16]) == (int_32)($24 + [32])), [144])
	$23 = ((uint_32)(*($23 + [8]) + [86400]) > (uint_32)*($24 + [340]))
	
.LABEL $label$20
	CALL eosio_assert($23, [1776])
	$13 = *($24 + [56])
	if ( ($13 == 0) ){ goto $label$21 }
	$5 = ($24 + [60])
	$23 = *($5)
	if ( ((int_32)$23 == (int_32)$13) ){ goto $label$23 }
	
.LOOP $label$24:
	$23 = ($23 + [-24])
	$14 = *($23)
	*($23) = [0]
	if ( ($14 == 0) ){ goto $label$25 }
	CALL $205($14)
	
.LABEL $label$25
	if ( ((int_32)$13 != (int_32)$23) ){ goto $label$24 }
	$23 = *(($24 + [56]))
	goto $label$22 
	
.LABEL $label$23
	$23 = $13
	
.LABEL $label$22
	*($5) = $13
	CALL $205($23)
	
.LABEL $label$21
	if ( ((*($24 + [256]) & [1]) == 0) ){ goto $label$9 }
	CALL $205(*(($24 + [264])))
	
.LABEL $label$9
	if ( (*($2 + [148]) == 0) ){ goto $label$26 }
	*($24 + [48]) = (int_64)-1
	*($24 + [56]) = [0]
	$16 = *($2 + [16])
	*($24 + [32]) = $16
	$21 = *($1)
	*($24 + [40]) = $21
	*(($24 + [60])) = [0]
	*(($24 + [64])) = [0]
	$23 = [0]
	$14 = CALL db_find_i64($16, $21, (int_64)3607749779137757184, (uint_64)*(($2 + [96])) >> (uint_64)(int_64)8)
	if ( ((int_32)$14) < (int_32)[0]) ){ goto $label$27 }
	$23 = CALL $163(($24 + [32]), $14)
	CALL eosio_assert(((int_32)*($23 + [16]) == (int_32)($24 + [32])), [144])
	
.LABEL $label$27
	CALL eosio_assert(((int_32)$23 != (int_32)[0]), [1792])
	$13 = *($24 + [56])
	if ( ($13 == 0) ){ goto $label$26 }
	$5 = ($24 + [60])
	$23 = *($5)
	if ( ((int_32)$23 == (int_32)$13) ){ goto $label$29 }
	
.LOOP $label$30:
	$23 = ($23 + [-24])
	$14 = *($23)
	*($23) = [0]
	if ( ($14 == 0) ){ goto $label$31 }
	CALL $205($14)
	
.LABEL $label$31
	if ( ((int_32)$13 != (int_32)$23) ){ goto $label$30 }
	$23 = *(($24 + [56]))
	goto $label$28 
	
.LABEL $label$29
	$23 = $13
	
.LABEL $label$28
	*($5) = $13
	CALL $205($23)
	
.LABEL $label$26
	$19 = [0]
	*((($24 + [256]) + [32])) = [0]
	*($24 + [272]) = (int_64)-1
	*($24 + [280]) = (int_64)0
	$16 = *($0)
	*($24 + [256]) = $16
	*($24 + [264]) = $16
	*((($24 + [216]) + [32])) = [0]
	*($24 + [224]) = $16
	*($24 + [216]) = $16
	*($24 + [232]) = (int_64)-1
	*($24 + [240]) = (int_64)0
	$23 = CALL db_find_i64($16, $16, (int_64)-3922483085538492416, *($1))
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$32 }
	$19 = CALL $70(($24 + [216]), $23)
	CALL eosio_assert(((int_32)*($19 + [36]) == (int_32)($24 + [216])), [144])
	
.LABEL $label$32
	$16 = *($1)
	$6 = *(($24 + [280]))
	$13 = *(($24 + [284]))
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$33 }
	$23 = ($13 + [-24])
	$5 = ([0] - $6)
	
.LOOP $label$34:
	if ( ((int_64)*(*($23)) == (int_64)$16) ){ goto $label$33 }
	$13 = $23
	$14 = ($23 + [-24])
	$23 = $14
	if ( ((int_32)($14 + $5) != (int_32)[-24]) ){ goto $label$34 }
	
.LABEL $label$33
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$40 }
	$23 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)($24 + [256])), [144])
	if ( $19 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$23 = [0]
	$14 = CALL db_find_i64(*($24 + [256]), *(($24 + [264])), (int_64)-3615112468298203136, $16)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$41 }
	$23 = CALL $116(($24 + [256]), $14)
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)($24 + [256])), [144])
	
.LABEL $label$41
	if ( ($19 == 0) ){ goto $label$38 }
	
.LABEL $label$39
	*($24 + [212]) = *($19 + [24])
	*($24 + [211]) = *($19 + [28])
	if ( $23 ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	*($24 + [212]) = [14400]
	*($24 + [211]) = [1]
	if ( ($23 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	$14 = ((*($24 + [340]) - *($23 + [12])) <= [86401])
	goto $label$35 
	
.LABEL $label$36
	$14 = [0]
	
.LABEL $label$35
	CALL eosio_assert($14, [1664])
	$14 = [1]
	if ( *($23 + [16]) ){ goto $label$42 }
	$14 = ((uint_32)(*($24 + [340]) - *($23 + [8])) >= (uint_32)*($24 + [212]))
	
.LABEL $label$42
	CALL eosio_assert($14, [1680])
	CALL eosio_assert(((int_64)*($1 + [16]) != (int_64)*($1)), [1696])
	*($24 + [200]) = *($1)
	CALL $164(($24 + [184]), ($24 + [200]))
	$14 = CALL $211(($24 + [184]), [46], [-1])
	$13 = *(($2 + [136]))
	$5 = CALL strlen([1232])
	if ( ((int_32)$5 != (int_32)( *(($2 + [140])) ? uint_32($13 >> [1]) : ($13 & [1]) )) ){ goto $label$45 }
	$13 = [0]
	if ( (CALL $212($4, [0], [-1], [1232], $5) == 0) ){ goto $label$44 }
	
.LABEL $label$45
	CALL eosio_assert([1], [1824])
	goto $label$43 
	
.LABEL $label$44
	CALL $217(($24 + [32]), ($24 + [184]), $14, [-1], ($24 + [184]))
	$5 = *($24 + [32])
	$19 = CALL strlen([1808])
	if ( ((int_32)$19 != (int_32)( *($24 + [36]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$46 }
	$13 = (CALL $212(($24 + [32]), [0], [-1], [1808], $19) == 0)
	
.LABEL $label$46
	CALL eosio_assert($13, [1824])
	if ( ((*($24 + [32]) & [1]) == 0) ){ goto $label$43 }
	CALL $205(*($24 + [40]))
	
.LABEL $label$43
	$13 = [1]
	$5 = *(($2 + [136]))
	$19 = CALL strlen([1232])
	if ( ((int_32)$19 != (int_32)( *(($2 + [140])) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$47 }
	$13 = ((int_32)CALL $212($4, [0], [-1], [1232], $19) != (int_32)[0])
	
.LABEL $label$47
	$21 = (int_64)0
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$48 }
	$21 = (int_64)0
	if ( ($13 == 0) ){ goto $label$48 }
	CALL $217(($24 + [32]), ($24 + [184]), $14, [-1], ($24 + [184]))
	$13 = [1]
	$5 = *($24 + [32])
	$4 = CALL strlen([1808])
	if ( ((int_32)$4 != (int_32)( *($24 + [36]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$50 }
	if ( (CALL $212(($24 + [32]), [0], [-1], [1808], $4) == 0) ){ goto $label$49 }
	
.LABEL $label$50
	CALL $217(($24 + [96]), ($24 + [184]), $14, [-1], ($24 + [184]))
	$13 = *($24 + [96])
	$5 = CALL strlen([1872])
	if ( ((int_32)$5 != (int_32)( *($24 + [100]) ? uint_32($13 >> [1]) : ($13 & [1]) )) ){ goto $label$53 }
	if ( (CALL $212(($24 + [96]), [0], [-1], [1872], $5) == 0) ){ goto $label$52 }
	
.LABEL $label$53
	CALL $217(($24 + [152]), ($24 + [184]), $14, [-1], ($24 + [184]))
	$13 = [0]
	$5 = *($24 + [152])
	$4 = CALL strlen([1888])
	if ( ((int_32)$4 != (int_32)( *($24 + [156]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$54 }
	$13 = (CALL $212(($24 + [152]), [0], [-1], [1888], $4) == 0)
	$5 = *($24 + [152])
	
.LABEL $label$54
	if ( (($5 & [1]) == 0) ){ goto $label$51 }
	CALL $205(*($24 + [160]))
	goto $label$51 
	
.LABEL $label$52
	$13 = [1]
	
.LABEL $label$51
	if ( ((*($24 + [96]) & [1]) == 0) ){ goto $label$49 }
	CALL $205(*($24 + [104]))
	
.LABEL $label$49
	if ( ((*($24 + [32]) & [1]) == 0) ){ goto $label$55 }
	CALL $205(*($24 + [40]))
	
.LABEL $label$55
	$21 = (int_64)0
	if ( ($13 == 0) ){ goto $label$48 }
	$21 = (int_64)20
	$14 = ($14 + [-2])
	if ( ((uint_32)$14 > (uint_32)[4]) ){ goto $label$48 }
	$21 = *((($14 << [3]) + [1904]))
	
.LABEL $label$48
	*(($24 + [176])) = [0]
	*($24 + [168]) = (int_64)0
	$14 = CALL strlen([1168])
	if ( ((uint_32)$14 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$14 >= (uint_32)[11]) ){ goto $label$58 }
	*($24 + [168]) = ($14 << [1])
	$13 = (($24 + [168]) | [1])
	if ( $14 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$5 = (($14 + [16]) & [-16])
	$13 = CALL $204($5)
	*($24 + [168]) = ($5 | [1])
	*($24 + [176]) = $13
	*($24 + [172]) = $14
	
.LABEL $label$57
	CALL memcpy($13, [1168], $14)
	
.LABEL $label$56
	*(($13 + $14)) = [0]
	if ( ((int_64)*(($2 + [96])) != (int_64)280553866500) ){ goto $label$59 }
	CALL $136(($24 + [32]), $0, *($24 + [340]))
	if ( (*($24 + [168]) & [1]) ){ goto $label$61 }
	*($24 + [168]) = [0]
	goto $label$60 
	
.LABEL $label$61
	*(*($24 + [176])) = [0]
	*($24 + [172]) = [0]
	
.LABEL $label$60
	CALL $209(($24 + [168]), [0])
	*((($24 + [168]) + [8])) = *((($24 + [32]) + [8]))
	*($24 + [168]) = *($24 + [32])
	
.LABEL $label$59
	if ( ($23 == 0) ){ goto $label$63 }
	*($24 + [36]) = ($24 + [212])
	*($24 + [32]) = ($24 + [340])
	*($24 + [40]) = ($24 + [211])
	CALL eosio_assert([1], [944])
	CALL $166(($24 + [256]), $23, (int_64)0, ($24 + [32]))
	goto $label$62 
	
.LABEL $label$63
	$16 = *($0)
	*($24 + [32]) = $1
	*($24 + [36]) = ($24 + [340])
	*($24 + [40]) = ($24 + [211])
	CALL $165(($24 + [96]), ($24 + [256]), $16, ($24 + [32]))
	
.LABEL $label$62
	$16 = *($1)
	$0 = *(($24 + [280]))
	$13 = *(($24 + [284]))
	if ( ((int_32)$13 == (int_32)$0) ){ goto $label$64 }
	$23 = ($13 + [-24])
	$5 = ([0] - $0)
	
.LOOP $label$65:
	if ( ((int_64)*(*($23)) == (int_64)$16) ){ goto $label$64 }
	$13 = $23
	$14 = ($23 + [-24])
	$23 = $14
	if ( ((int_32)($14 + $5) != (int_32)[-24]) ){ goto $label$65 }
	
.LABEL $label$64
	if ( ((int_32)$13 == (int_32)$0) ){ goto $label$67 }
	$23 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)($24 + [256])), [144])
	goto $label$66 
	
.LABEL $label$67
	$23 = [0]
	$14 = CALL db_find_i64(*($24 + [256]), *(($24 + [264])), (int_64)-3615112468298203136, $16)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$66 }
	$23 = CALL $116(($24 + [256]), $14)
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)($24 + [256])), [144])
	
.LABEL $label$66
	if ( ((*($24 + [340]) - *($23 + [12])) <= [86401]) ){ goto $label$69 }
	CALL eosio_assert(((int_32)$23 != (int_32)[0]), [944])
	CALL $167(($24 + [256]), $23, (int_64)0, ($24 + [32]))
	goto $label$68 
	
.LABEL $label$69
	$15 = CALL ceil(((float_64)(CASTING float_64)(int_64 *($2 + [120])) * (float_64)((float_64)CALL ceil(((float_64)((float_64)(CASTING float_64)(int_64 *($2 + [104])) * (float_64)(float_64)10) / (float_64)(CASTING float_64)(int_64 *($2 + [88])))) / (float_64)(float_64)10)))
	$16 = *(($2 + [96]))
	*($24 + [160]) = $16
	$18 = (Rounds 0)($15)
	*($24 + [152]) = $18
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$23 = [0]
	
.LOOP $label$72:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$71 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$73 }
	
.LOOP $label$74:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$71 }
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$74 }
	
.LABEL $label$73
	$14 = [1]
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$72 }
	goto $label$70 
	
.LABEL $label$71
	$14 = [0]
	
.LABEL $label$70
	CALL eosio_assert($14, [560])
	$22 = *(($24 + [160]))
	$18 = ((int_64)((int_64)*($24 + [152]) * (int_64)80) / (int_64)100)
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$16 = (uint_64)$22 >> (uint_64)(int_64)8)
	$23 = [0]
	
.LOOP $label$77:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$76 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$78 }
	
.LOOP $label$79:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$76 }
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$79 }
	
.LABEL $label$78
	$14 = [1]
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$77 }
	goto $label$75 
	
.LABEL $label$76
	$14 = [0]
	
.LABEL $label$75
	CALL __multi3($24, $18, (int_64)$18 >> (int_64)63), $21, (int_64)$21 >> (int_64)63))
	CALL eosio_assert($14, [560])
	$16 = *(($24 + [8]))
	$21 = *($24)
	CALL eosio_assert(( (uint_64)($21 <= (int_64)4611686018427387904) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ), [1952])
	CALL eosio_assert(( ((uint_64)$21 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$16 > (int_64)-1) : ((int_64)$16 == (int_64)-1) ), [1984])
	*($24 + [144]) = $22
	CALL eosio_assert([1], [2016])
	CALL eosio_assert([1], [2032])
	*($24 + [136]) = ((int_64)$21 / (int_64)100)
	CALL eosio_assert(((int_64)*($24 + [144]) == (int_64)$22), [2064])
	$7 = ((int_64)*($24 + [136]) + (int_64)$18)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [2112])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [2144])
	$20 = (int_64)0
	$16 = *(($1 + [16]))
	if ( (int_64)($16 == 0) ){ goto $label$80 }
	$20 = ( (int_64)5 ? (int_64)0 : CALL is_account($16) )
	
.LABEL $label$80
	$9 = *((($24 + [152]) + [8]))
	$8 = ((int_64)((int_64)*($24 + [152]) * (int_64)$20) / (int_64)100)
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$16 = (uint_64)$9 >> (uint_64)(int_64)8)
	$23 = [0]
	
.LOOP $label$83:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$82 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$84 }
	
.LOOP $label$85:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$82 }
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$85 }
	
.LABEL $label$84
	$14 = [1]
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$83 }
	goto $label$81 
	
.LABEL $label$82
	$14 = [0]
	
.LABEL $label$81
	CALL eosio_assert($14, [560])
	$11 = *(($24 + [160]))
	$10 = ((int_64)((int_64)*($24 + [152]) * (int_64))((int_64)20 - $20)) / (int_64)100
	CALL eosio_assert((uint_64)(((int_64)$10) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$16 = (uint_64)$11 >> (uint_64)(int_64)8)
	$23 = [0]
	
.LOOP $label$88:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$87 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$89 }
	
.LOOP $label$90:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$87 }
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$90 }
	
.LABEL $label$89
	$14 = [1]
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$88 }
	goto $label$86 
	
.LABEL $label$87
	$14 = [0]
	
.LABEL $label$86
	CALL eosio_assert($14, [560])
	if ( (*($2 + [149]) == 0) ){ goto $label$92 }
	$12 = *($2 + [8])
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [1184]
	$17 = (int_64)0
	
.LOOP $label$93:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$98 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$14 = ($14 + [165])
	goto $label$96 
	
.LABEL $label$98
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$97
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$95
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$94
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$93 }
	*($24 + [88]) = $17
	*($24 + [80]) = $12
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [128]
	$17 = (int_64)0
	
.LOOP $label$99:
	if ( ((uint_64)$16 > (uint_64)(int_64)7) ){ goto $label$104 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$103 }
	$14 = ($14 + [165])
	goto $label$102 
	
.LABEL $label$104
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$103
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$102
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$101
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$100
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$99 }
	$16 = *(($2 + [8]))
	*(($24 + [56])) = $22
	*($24 + [40]) = *($1)
	*($24 + [32]) = $16
	*($24 + [48]) = $7
	CALL $216(($24 + [64]), ($24 + [168]))
	$23 = CALL $94(($24 + [96]), ($24 + [80]), (int_64)-5923224759593108480, $17, ($24 + [32]))
	CALL $79(($24 + [384]), $23)
	$14 = *($24 + [384])
	CALL send_inline($14, (*($24 + [388]) - $14))
	$14 = *($24 + [384])
	if ( ($14 == 0) ){ goto $label$105 }
	*($24 + [388]) = $14
	CALL $205($14)
	
.LABEL $label$105
	$14 = *($23 + [28])
	if ( ($14 == 0) ){ goto $label$106 }
	*(($23 + [32])) = $14
	CALL $205($14)
	
.LABEL $label$106
	$14 = *($23 + [16])
	if ( ($14 == 0) ){ goto $label$107 }
	*(($23 + [20])) = $14
	CALL $205($14)
	
.LABEL $label$107
	if ( ((*($24 + [64]) & [1]) == 0) ){ goto $label$108 }
	CALL $205(*(($24 + [72])))
	
.LABEL $label$108
	$22 = *(($2 + [8]))
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [1184]
	$17 = (int_64)0
	
.LOOP $label$109:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$114 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$113 }
	$14 = ($14 + [165])
	goto $label$112 
	
.LABEL $label$114
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$113
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$112
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$111
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$110
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$109 }
	*($24 + [88]) = $17
	*($24 + [80]) = $22
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [128]
	$17 = (int_64)0
	
.LOOP $label$115:
	if ( ((uint_64)$16 > (uint_64)(int_64)7) ){ goto $label$120 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$119 }
	$14 = ($14 + [165])
	goto $label$118 
	
.LABEL $label$120
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$119
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$118
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$117
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$116
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$115 }
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [2176]
	$22 = (int_64)0
	
.LOOP $label$121:
	if ( ((uint_64)$16 > (uint_64)(int_64)8) ){ goto $label$126 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$125 }
	$14 = ($14 + [165])
	goto $label$124 
	
.LABEL $label$126
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$125
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$124
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$123
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$122
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$22 = ((int_64)$21 | (int_64)$22)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$121 }
	CALL $213(($24 + [16]), [2192], ($24 + [168]))
	$16 = *(($2 + [8]))
	*(($24 + [56])) = $11
	*(($24 + [68])) = *($24 + [20])
	*($24 + [40]) = $22
	$23 = (($24 + [16]) + [8])
	*(($24 + [72])) = *($23)
	*($24 + [32]) = $16
	*($24 + [48]) = $10
	*($24 + [64]) = *($24 + [16])
	*($24 + [16]) = [0]
	*($24 + [20]) = [0]
	*($23) = [0]
	$23 = CALL $94(($24 + [96]), ($24 + [80]), (int_64)-5923224759593108480, $17, ($24 + [32]))
	CALL $79(($24 + [384]), $23)
	$14 = *($24 + [384])
	CALL send_inline($14, (*($24 + [388]) - $14))
	$14 = *($24 + [384])
	if ( ($14 == 0) ){ goto $label$127 }
	*($24 + [388]) = $14
	CALL $205($14)
	
.LABEL $label$127
	$14 = *($23 + [28])
	if ( ($14 == 0) ){ goto $label$128 }
	*(($23 + [32])) = $14
	CALL $205($14)
	
.LABEL $label$128
	$14 = *($23 + [16])
	if ( ($14 == 0) ){ goto $label$129 }
	*(($23 + [20])) = $14
	CALL $205($14)
	
.LABEL $label$129
	if ( ((*(($24 + [64])) & [1]) == 0) ){ goto $label$130 }
	CALL $205(*(($24 + [72])))
	
.LABEL $label$130
	if ( ((*($24 + [16]) & [1]) == 0) ){ goto $label$131 }
	CALL $205(*(($24 + [24])))
	
.LABEL $label$131
	if ( (int_64)($20 == 0) ){ goto $label$91 }
	$22 = *(($2 + [8]))
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [1184]
	$17 = (int_64)0
	
.LOOP $label$132:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$137 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$136 }
	$14 = ($14 + [165])
	goto $label$135 
	
.LABEL $label$137
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$134 }
	goto $label$133 
	
.LABEL $label$136
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$135
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$134
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$133
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$132 }
	*($24 + [88]) = $17
	*($24 + [80]) = $22
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [128]
	$17 = (int_64)0
	
.LOOP $label$138:
	if ( ((uint_64)$16 > (uint_64)(int_64)7) ){ goto $label$143 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$142 }
	$14 = ($14 + [165])
	goto $label$141 
	
.LABEL $label$143
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$140 }
	goto $label$139 
	
.LABEL $label$142
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$141
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$140
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$139
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$138 }
	CALL $213(($24 + [16]), [2192], ($24 + [168]))
	$16 = *(($2 + [8]))
	*(($24 + [56])) = $9
	*(($24 + [68])) = *($24 + [20])
	*($24 + [40]) = *(($1 + [16]))
	$23 = (($24 + [16]) + [8])
	*(($24 + [72])) = *($23)
	*($24 + [32]) = $16
	*($24 + [48]) = $8
	*($24 + [64]) = *($24 + [16])
	*($24 + [16]) = [0]
	*($24 + [20]) = [0]
	*($23) = [0]
	$23 = CALL $94(($24 + [96]), ($24 + [80]), (int_64)-5923224759593108480, $17, ($24 + [32]))
	CALL $79(($24 + [384]), $23)
	$14 = *($24 + [384])
	CALL send_inline($14, (*($24 + [388]) - $14))
	$14 = *($24 + [384])
	if ( ($14 == 0) ){ goto $label$144 }
	*($24 + [388]) = $14
	CALL $205($14)
	
.LABEL $label$144
	$14 = *($23 + [28])
	if ( ($14 == 0) ){ goto $label$145 }
	*(($23 + [32])) = $14
	CALL $205($14)
	
.LABEL $label$145
	$14 = *($23 + [16])
	if ( ($14 == 0) ){ goto $label$146 }
	*(($23 + [20])) = $14
	CALL $205($14)
	
.LABEL $label$146
	if ( ((*(($24 + [64])) & [1]) == 0) ){ goto $label$147 }
	CALL $205(*(($24 + [72])))
	
.LABEL $label$147
	if ( ((*($24 + [16]) & [1]) == 0) ){ goto $label$91 }
	CALL $205(*(($24 + [24])))
	goto $label$91 
	
.LABEL $label$92
	$12 = *($2 + [8])
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [1184]
	$17 = (int_64)0
	
.LOOP $label$148:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$153 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$152 }
	$14 = ($14 + [165])
	goto $label$151 
	
.LABEL $label$153
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$150 }
	goto $label$149 
	
.LABEL $label$152
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$151
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$150
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$149
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$148 }
	*($24 + [88]) = $17
	*($24 + [80]) = $12
	$12 = *($2 + [16])
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [128]
	$17 = (int_64)0
	
.LOOP $label$154:
	if ( ((uint_64)$16 > (uint_64)(int_64)7) ){ goto $label$159 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$158 }
	$14 = ($14 + [165])
	goto $label$157 
	
.LABEL $label$159
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$158
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$157
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$156
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$155
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$154 }
	$16 = *(($2 + [8]))
	*(($24 + [56])) = $22
	*($24 + [40]) = *($1)
	*($24 + [32]) = $16
	*($24 + [48]) = $7
	CALL $216(($24 + [64]), ($24 + [168]))
	$23 = CALL $94(($24 + [96]), ($24 + [80]), $12, $17, ($24 + [32]))
	CALL $79(($24 + [384]), $23)
	$14 = *($24 + [384])
	CALL send_inline($14, (*($24 + [388]) - $14))
	$14 = *($24 + [384])
	if ( ($14 == 0) ){ goto $label$160 }
	*($24 + [388]) = $14
	CALL $205($14)
	
.LABEL $label$160
	$14 = *($23 + [28])
	if ( ($14 == 0) ){ goto $label$161 }
	*(($23 + [32])) = $14
	CALL $205($14)
	
.LABEL $label$161
	$14 = *($23 + [16])
	if ( ($14 == 0) ){ goto $label$162 }
	*(($23 + [20])) = $14
	CALL $205($14)
	
.LABEL $label$162
	if ( ((*($24 + [64]) & [1]) == 0) ){ goto $label$163 }
	CALL $205(*(($24 + [72])))
	
.LABEL $label$163
	$22 = *(($2 + [8]))
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [1184]
	$17 = (int_64)0
	
.LOOP $label$164:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$169 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$168 }
	$14 = ($14 + [165])
	goto $label$167 
	
.LABEL $label$169
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$166 }
	goto $label$165 
	
.LABEL $label$168
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$167
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$166
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$165
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$164 }
	*($24 + [88]) = $17
	*($24 + [80]) = $22
	$7 = *(($2 + [16]))
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [128]
	$17 = (int_64)0
	
.LOOP $label$170:
	if ( ((uint_64)$16 > (uint_64)(int_64)7) ){ goto $label$175 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$174 }
	$14 = ($14 + [165])
	goto $label$173 
	
.LABEL $label$175
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$172 }
	goto $label$171 
	
.LABEL $label$174
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$173
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$172
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$171
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$170 }
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [2176]
	$22 = (int_64)0
	
.LOOP $label$176:
	if ( ((uint_64)$16 > (uint_64)(int_64)8) ){ goto $label$181 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$180 }
	$14 = ($14 + [165])
	goto $label$179 
	
.LABEL $label$181
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$178 }
	goto $label$177 
	
.LABEL $label$180
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$179
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$178
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$177
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$22 = ((int_64)$21 | (int_64)$22)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$176 }
	CALL $213(($24 + [16]), [2192], ($24 + [168]))
	$16 = *(($2 + [8]))
	*(($24 + [56])) = $11
	*(($24 + [68])) = *($24 + [20])
	*($24 + [40]) = $22
	$23 = (($24 + [16]) + [8])
	*(($24 + [72])) = *($23)
	*($24 + [32]) = $16
	*($24 + [48]) = $10
	*($24 + [64]) = *($24 + [16])
	*($24 + [16]) = [0]
	*($24 + [20]) = [0]
	*($23) = [0]
	$23 = CALL $94(($24 + [96]), ($24 + [80]), $7, $17, ($24 + [32]))
	CALL $79(($24 + [384]), $23)
	$14 = *($24 + [384])
	CALL send_inline($14, (*($24 + [388]) - $14))
	$14 = *($24 + [384])
	if ( ($14 == 0) ){ goto $label$182 }
	*($24 + [388]) = $14
	CALL $205($14)
	
.LABEL $label$182
	$14 = *($23 + [28])
	if ( ($14 == 0) ){ goto $label$183 }
	*(($23 + [32])) = $14
	CALL $205($14)
	
.LABEL $label$183
	$14 = *($23 + [16])
	if ( ($14 == 0) ){ goto $label$184 }
	*(($23 + [20])) = $14
	CALL $205($14)
	
.LABEL $label$184
	if ( ((*(($24 + [64])) & [1]) == 0) ){ goto $label$185 }
	CALL $205(*(($24 + [72])))
	
.LABEL $label$185
	if ( ((*($24 + [16]) & [1]) == 0) ){ goto $label$186 }
	CALL $205(*(($24 + [24])))
	
.LABEL $label$186
	if ( (int_64)($20 == 0) ){ goto $label$91 }
	$22 = *(($2 + [8]))
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [1184]
	$17 = (int_64)0
	
.LOOP $label$187:
	if ( ((uint_64)$16 > (uint_64)(int_64)5) ){ goto $label$192 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$191 }
	$14 = ($14 + [165])
	goto $label$190 
	
.LABEL $label$192
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$189 }
	goto $label$188 
	
.LABEL $label$191
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$190
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$189
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$188
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$187 }
	*($24 + [88]) = $17
	*($24 + [80]) = $22
	$22 = *(($2 + [16]))
	$16 = (int_64)0
	$18 = (int_64)59
	$23 = [128]
	$17 = (int_64)0
	
.LOOP $label$193:
	if ( ((uint_64)$16 > (uint_64)(int_64)7) ){ goto $label$198 }
	$14 = *($23)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$197 }
	$14 = ($14 + [165])
	goto $label$196 
	
.LABEL $label$198
	$21 = (int_64)0
	if ( ((uint_64)$16 <= (uint_64)(int_64)11) ){ goto $label$195 }
	goto $label$194 
	
.LABEL $label$197
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$196
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$195
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$194
	$23 = ($23 + [1])
	$16 = ((int_64)$16 + (int_64)1)
	$17 = ((int_64)$21 | (int_64)$17)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$193 }
	CALL $213(($24 + [16]), [2192], ($24 + [168]))
	$16 = *(($2 + [8]))
	*(($24 + [56])) = $9
	*(($24 + [68])) = *($24 + [20])
	*($24 + [40]) = *(($1 + [16]))
	$23 = (($24 + [16]) + [8])
	*(($24 + [72])) = *($23)
	*($24 + [32]) = $16
	*($24 + [48]) = $8
	*($24 + [64]) = *($24 + [16])
	*($24 + [16]) = [0]
	*($24 + [20]) = [0]
	*($23) = [0]
	$23 = CALL $94(($24 + [96]), ($24 + [80]), $22, $17, ($24 + [32]))
	CALL $79(($24 + [384]), $23)
	$14 = *($24 + [384])
	CALL send_inline($14, (*($24 + [388]) - $14))
	$14 = *($24 + [384])
	if ( ($14 == 0) ){ goto $label$199 }
	*($24 + [388]) = $14
	CALL $205($14)
	
.LABEL $label$199
	$14 = *($23 + [28])
	if ( ($14 == 0) ){ goto $label$200 }
	*(($23 + [32])) = $14
	CALL $205($14)
	
.LABEL $label$200
	$14 = *($23 + [16])
	if ( ($14 == 0) ){ goto $label$201 }
	*(($23 + [20])) = $14
	CALL $205($14)
	
.LABEL $label$201
	if ( ((*(($24 + [64])) & [1]) == 0) ){ goto $label$202 }
	CALL $205(*(($24 + [72])))
	
.LABEL $label$202
	if ( ((*($24 + [16]) & [1]) == 0) ){ goto $label$91 }
	CALL $205(*(($24 + [24])))
	
.LABEL $label$91
	*($24 + [36]) = ($24 + [136])
	*($24 + [32]) = ($24 + [152])
	CALL eosio_assert($3, [944])
	CALL $168(($24 + [296]), $2, (int_64)0, ($24 + [32]))
	
.LABEL $label$68
	if ( ((*($24 + [168]) & [1]) == 0) ){ goto $label$203 }
	CALL $205(*($24 + [176]))
	
.LABEL $label$203
	if ( ((*($24 + [184]) & [1]) == 0) ){ goto $label$204 }
	CALL $205(*($24 + [192]))
	
.LABEL $label$204
	$13 = *($24 + [240])
	if ( ($13 == 0) ){ goto $label$205 }
	$2 = ($24 + [244])
	$23 = *($2)
	if ( ((int_32)$23 == (int_32)$13) ){ goto $label$207 }
	
.LOOP $label$208:
	$23 = ($23 + [-24])
	$14 = *($23)
	*($23) = [0]
	if ( ($14 == 0) ){ goto $label$209 }
	CALL $205($14)
	
.LABEL $label$209
	if ( ((int_32)$13 != (int_32)$23) ){ goto $label$208 }
	$23 = *(($24 + [240]))
	goto $label$206 
	
.LABEL $label$207
	$23 = $13
	
.LABEL $label$206
	*($2) = $13
	CALL $205($23)
	
.LABEL $label$205
	$13 = *($24 + [280])
	if ( ($13 == 0) ){ goto $label$210 }
	$2 = ($24 + [284])
	$23 = *($2)
	if ( ((int_32)$23 == (int_32)$13) ){ goto $label$212 }
	
.LOOP $label$213:
	$23 = ($23 + [-24])
	$14 = *($23)
	*($23) = [0]
	if ( ($14 == 0) ){ goto $label$214 }
	CALL $205($14)
	
.LABEL $label$214
	if ( ((int_32)$13 != (int_32)$23) ){ goto $label$213 }
	$23 = *(($24 + [280]))
	goto $label$211 
	
.LABEL $label$212
	$23 = $13
	
.LABEL $label$211
	*($2) = $13
	CALL $205($23)
	
.LABEL $label$210
	$13 = *($24 + [320])
	if ( ($13 == 0) ){ goto $label$215 }
	$2 = ($24 + [324])
	$23 = *($2)
	if ( ((int_32)$23 == (int_32)$13) ){ goto $label$217 }
	
.LOOP $label$218:
	$23 = ($23 + [-24])
	$14 = *($23)
	*($23) = [0]
	if ( ($14 == 0) ){ goto $label$219 }
	CALL $93($14)
	CALL $205($14)
	
.LABEL $label$219
	if ( ((int_32)$13 != (int_32)$23) ){ goto $label$218 }
	$23 = *(($24 + [320]))
	goto $label$216 
	
.LABEL $label$217
	$23 = $13
	
.LABEL $label$216
	*($2) = $13
	CALL $205($23)
	
.LABEL $label$215
	$13 = *($24 + [368])
	if ( ($13 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($24 + [372])
	$23 = *($2)
	if ( ((int_32)$23 == (int_32)$13) ){ goto $label$221 }
	
.LOOP $label$222:
	$23 = ($23 + [-24])
	$14 = *($23)
	*($23) = [0]
	if ( ($14 == 0) ){ goto $label$223 }
	CALL $205($14)
	
.LABEL $label$223
	if ( ((int_32)$13 != (int_32)$23) ){ goto $label$222 }
	$23 = *(($24 + [368]))
	goto $label$220 
	
.LABEL $label$221
	$23 = $13
	
.LABEL $label$220
	*($2) = $13
	CALL $205($23)
	
.LABEL $label$2
	*([0] + [4]) = ($24 + [400])
	return (unreachable)
	
.LABEL $label$1
	CALL $206(($24 + [168]))
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	$2 = CALL memset($2, [0], [48])
	CALL $184($2)
	*($2 + [72]) = ($1 + $0)
	*($2 + [64]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [592])
	CALL memcpy($2, $1, [8])
	*($2 + [68]) = ($1 + [8])
	CALL $84(($2 + [64]), ($2 + [8]))
	CALL $84(($2 + [64]), ($2 + [20]))
	$3 = ($2 + [32])
	CALL $84(($2 + [64]), $3)
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $185(($2 + [64]), $2)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL $205(*(($2 + [40])))
	
.LABEL $label$5
	if ( ((*(($2 + [20])) & [1]) == 0) ){ goto $label$6 }
	CALL $205(*(($2 + [28])))
	
.LABEL $label$6
	if ( ((*(($2 + [8])) & [1]) == 0) ){ goto $label$7 }
	CALL $205(*(($2 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [80])
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	CALL require_auth(*($0))
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$2 = *($0)
	*($3) = $2
	*($3 + [8]) = $2
	$0 = [0]
	$1 = CALL db_find_i64($2, $2, (int_64)-3921691482146209792, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $179($3, $1)
	CALL eosio_assert(((int_32)*($0 + [44]) == (int_32)$3), [144])
	
.LABEL $label$1
	$1 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($1, [2352])
	CALL eosio_assert($1, [208])
	CALL eosio_assert($1, [256])
	$1 = CALL db_next_i64(*($0 + [48]), ($3 + [40]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	CALL $179($3, $1)
	
.LABEL $label$2
	CALL $180($3, $0)
	CALL $181(($3 + [24]))
	*([0] + [4]) = ($3 + [48])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*($6 + [8]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [8])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)*(($1 + [96])) == (int_64)*(($1 + [128]))), [2272])
	$5 = *($1 + [24])
	if ( ($5 & [1]) ){ goto $label$2 }
	$5 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *(($1 + [28]))
	
.LABEL $label$1
	CALL eosio_assert(($5 <= [300]), [2304])
	$5 = *($1 + [48])
	if ( ($5 & [1]) ){ goto $label$4 }
	$5 = uint_32($5 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$5 = *(($1 + [52]))
	
.LABEL $label$3
	CALL eosio_assert(($5 <= [300]), [2320])
	*(($12 + [120])) = [0]
	*($12 + [104]) = (int_64)-1
	*($12 + [112]) = (int_64)0
	$9 = *($0)
	*($12 + [88]) = $9
	*($12 + [96]) = $9
	*($12 + [24]) = ($12 + [88])
	*($12 + [28]) = $1
	CALL $174(($12 + [72]), ($12 + [88]), $9, ($12 + [24]))
	$2 = ($1 + [136])
	$5 = *($1 + [136])
	if ( ($5 & [1]) ){ goto $label$6 }
	$5 = uint_32($5 >> [1])
	$7 = ($2 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *(($1 + [140]))
	$7 = *(($1 + [144]))
	
.LABEL $label$5
	$1 = CALL strlen([1200])
	if ( ($1 == 0) ){ goto $label$8 }
	if ( ((int_32)$5 < (int_32)$1) ){ goto $label$7 }
	$3 = ($7 + $5)
	$6 = $7
	
.LOOP $label$9:
	$5 = (($5 - $1) + [1])
	if ( ($5 == 0) ){ goto $label$7 }
	$5 = CALL memchr($6, [110], $5)
	if ( ($5 == 0) ){ goto $label$7 }
	if ( (CALL memcmp($5, [1200], $1) == 0) ){ goto $label$10 }
	$6 = ($5 + [1])
	$5 = ($3 - $6)
	if ( ((int_32)$5 >= (int_32)$1) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = [-1]
	CALL $217(($12 + [72]), $2, (CALL $210($2, [58], [0]) + [1]), [-1], $2)
	$1 = ( *($12 + [80]) ? (($12 + [72]) | [1]) : (*($12 + [72]) & [1]) )
	
.LOOP $label$11:
	$6 = ($1 + $5)
	$3 = ($5 + [1])
	$5 = $3
	if ( *(($6 + [1])) ){ goto $label$11 }
	$4 = (CASTING uint_64)(uint_32 $3)
	$9 = (int_64)0
	$8 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$12:
	$11 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$4) ){ goto $label$13 }
	$5 = *($1)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$17 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$16 
	
.LABEL $label$17
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$16
	$1 = ($1 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$12 }
	*($12 + [64]) = $10
	*(($12 + [56])) = [0]
	*($12 + [40]) = (int_64)-1
	*($12 + [48]) = (int_64)0
	$9 = *($0)
	*($12 + [24]) = $9
	*($12 + [32]) = $9
	*($12 + [16]) = ($12 + [64])
	CALL $175(($12 + [8]), ($12 + [24]), $9, ($12 + [16]))
	$6 = *($12 + [48])
	if ( ($6 == 0) ){ goto $label$18 }
	$3 = ($12 + [52])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$20 }
	
.LOOP $label$21:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	CALL $205($5)
	
.LABEL $label$22
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$21 }
	$1 = *(($12 + [48]))
	goto $label$19 
	
.LABEL $label$20
	$1 = $6
	
.LABEL $label$19
	*($3) = $6
	CALL $205($1)
	
.LABEL $label$18
	if ( ((*($12 + [72]) & [1]) == 0) ){ goto $label$7 }
	CALL $205(*(($12 + [80])))
	
.LABEL $label$7
	$6 = *($12 + [112])
	if ( ($6 == 0) ){ goto $label$23 }
	$3 = ($12 + [116])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$25 }
	
.LOOP $label$26:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$27 }
	CALL $93($5)
	CALL $205($5)
	
.LABEL $label$27
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$26 }
	$1 = *(($12 + [112]))
	goto $label$24 
	
.LABEL $label$25
	$1 = $6
	
.LABEL $label$24
	*($3) = $6
	CALL $205($1)
	
.LABEL $label$23
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [48])
	*([0] + [4]) = $3
	*($3) = *($1)
	CALL $216(($3 + [8]), ($1 + [8]))
	CALL $216(($3 + [20]), ($1 + [20]))
	CALL $216(($3 + [32]), ($1 + [32]))
	$1 = *($0 + [4])
	$2 = *($1 + [4])
	$0 = (*(*($0)) + int_32($2 >> [1]))
	$1 = *($1)
	if ( (($2 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 $3), (int_32 $1))
	if ( ((*(($3 + [32])) & [1]) == 0) ){ goto $label$2 }
	CALL $205(*(($3 + [40])))
	
.LABEL $label$2
	if ( ((*(($3 + [20])) & [1]) == 0) ){ goto $label$3 }
	CALL $205(*(($3 + [28])))
	
.LABEL $label$3
	if ( ((*(($3 + [8])) & [1]) == 0) ){ goto $label$4 }
	CALL $205(*(($3 + [16])))
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [48])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [80])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*(($3 = (($8 + [8]) + [16]))) = (int_64)0
	*(($4 = (($8 + [8]) + [8]))) = (int_64)0
	*($8 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy(($8 + [8]), $6, [8])
	$5 = ($1 & [-8])
	CALL eosio_assert(((int_32)$5 != (int_32)[8]), [592])
	CALL memcpy($4, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[16]), [592])
	CALL memcpy($3, ($6 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	*(($1 = (($8 + [32]) + [16]))) = *($3)
	*(($6 = (($8 + [32]) + [8]))) = *($4)
	*($8 + [32]) = *($8 + [8])
	*((($8 + [56]) + [16])) = *($1)
	*((($8 + [56]) + [8])) = *($6)
	*($8 + [56]) = *($8 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 ($8 + [56])), (int_32 $7))
	*([0] + [4]) = ($8 + [80])
	return [1]
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [272])
	*([0] + [4]) = $16
	CALL require_auth(*($1))
	$7 = [0]
	*((($16 + [216]) + [32])) = [0]
	*($16 + [232]) = (int_64)-1
	*($16 + [240]) = (int_64)0
	$11 = *($0)
	*($16 + [216]) = $11
	*($16 + [224]) = $11
	$15 = CALL db_find_i64($11, $11, (int_64)-3899444101308743680, *($1))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $122(($16 + [216]), $15) + [8]) == (int_32)($16 + [216])), [144])
	$1 = *($16 + [240])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	*($16 + [212]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*((($16 + [168]) + [32])) = [0]
	*($16 + [184]) = (int_64)-1
	*($16 + [192]) = (int_64)0
	$11 = *($0)
	*($16 + [168]) = $11
	*($16 + [176]) = $11
	$15 = CALL db_find_i64($11, $11, (int_64)-3887392663594336256, *($1 + [8]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $92(($16 + [168]), $15)
	CALL eosio_assert(((int_32)*($7 + [164]) == (int_32)($16 + [168])), [144])
	
.LABEL $label$5
	$8 = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [1616])
	$15 = [0]
	$6 = *($7 + [136])
	$9 = CALL strlen([1632])
	if ( ((int_32)$9 != (int_32)( *(($7 + [140])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$6 }
	$15 = (CALL $212(($7 + [136]), [0], [-1], [1632], $9) == 0)
	
.LABEL $label$6
	CALL eosio_assert($15, [1648])
	*((($16 + [128]) + [32])) = [0]
	*($16 + [144]) = (int_64)-1
	*($16 + [152]) = (int_64)0
	$11 = *($0)
	*($16 + [128]) = $11
	*($16 + [136]) = $11
	*((($16 + [88]) + [32])) = [0]
	*($16 + [96]) = $11
	*($16 + [88]) = $11
	*($16 + [104]) = (int_64)-1
	*($16 + [112]) = (int_64)0
	$15 = CALL db_find_i64($11, $11, (int_64)-3922483085538492416, *($1))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $70(($16 + [88]), $15)
	CALL eosio_assert(((int_32)*($8 + [36]) == (int_32)($16 + [88])), [144])
	
.LABEL $label$7
	$11 = *($1)
	$2 = *(($16 + [152]))
	$9 = *(($16 + [156]))
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$8 }
	$15 = ($9 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$9:
	if ( ((int_64)*(*($15)) == (int_64)$11) ){ goto $label$8 }
	$9 = $15
	$6 = ($15 + [-24])
	$15 = $6
	if ( ((int_32)($6 + $3) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$15 }
	$15 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)($16 + [128])), [144])
	if ( $8 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$15 = [0]
	$6 = CALL db_find_i64(*($16 + [128]), *(($16 + [136])), (int_64)-3615112468298203136, $11)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	$15 = CALL $116(($16 + [128]), $6)
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)($16 + [128])), [144])
	
.LABEL $label$16
	if ( ($8 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	*($16 + [84]) = *($8 + [24])
	*($16 + [83]) = *($8 + [28])
	if ( $15 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	*($16 + [84]) = [14400]
	*($16 + [83]) = [1]
	if ( ($15 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$6 = ((*($16 + [212]) - *($15 + [12])) <= [86401])
	goto $label$10 
	
.LABEL $label$11
	$6 = [0]
	
.LABEL $label$10
	CALL eosio_assert($6, [1664])
	$6 = [1]
	if ( *($15 + [16]) ){ goto $label$17 }
	$6 = ((uint_32)(*($16 + [212]) - *($15 + [8])) >= (uint_32)*($16 + [84]))
	
.LABEL $label$17
	CALL eosio_assert($6, [1680])
	CALL eosio_assert(((int_64)*($1 + [16]) != (int_64)*($1)), [1696])
	if ( ($15 == 0) ){ goto $label$19 }
	*($16 + [44]) = ($16 + [84])
	*($16 + [40]) = ($16 + [212])
	*($16 + [48]) = ($16 + [83])
	CALL eosio_assert([1], [944])
	CALL $160(($16 + [128]), $15, (int_64)0, ($16 + [40]))
	goto $label$18 
	
.LABEL $label$19
	$11 = *($0)
	*($16 + [40]) = $1
	*($16 + [44]) = ($16 + [212])
	*($16 + [48]) = ($16 + [83])
	CALL $159(($16 + [16]), ($16 + [128]), $11, ($16 + [40]))
	
.LABEL $label$18
	$11 = *($1)
	$8 = *(($16 + [152]))
	$9 = *(($16 + [156]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$20 }
	$15 = ($9 + [-24])
	$3 = ([0] - $8)
	
.LOOP $label$21:
	if ( ((int_64)*(*($15)) == (int_64)$11) ){ goto $label$20 }
	$9 = $15
	$6 = ($15 + [-24])
	$15 = $6
	if ( ((int_32)($6 + $3) != (int_32)[-24]) ){ goto $label$21 }
	
.LABEL $label$20
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$23 }
	$15 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)($16 + [128])), [144])
	goto $label$22 
	
.LABEL $label$23
	$15 = [0]
	$6 = CALL db_find_i64(*($16 + [128]), *(($16 + [136])), (int_64)-3615112468298203136, $11)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$22 }
	$15 = CALL $116(($16 + [128]), $6)
	CALL eosio_assert(((int_32)*($15 + [24]) == (int_32)($16 + [128])), [144])
	
.LABEL $label$22
	if ( ((*($16 + [212]) - *($15 + [12])) <= [86401]) ){ goto $label$26 }
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [944])
	CALL $161(($16 + [128]), $15, (int_64)0, ($16 + [40]))
	$1 = *($16 + [112])
	if ( $1 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$4 = *($0)
	$11 = (int_64)0
	$10 = (int_64)59
	$15 = [1184]
	$12 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$32 }
	$6 = *($15)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$6 = ($6 + [165])
	goto $label$30 
	
.LABEL $label$32
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$28
	$15 = ($15 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$27 }
	$5 = *($7 + [8])
	$11 = (int_64)0
	$10 = (int_64)59
	$15 = [1744]
	$14 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$11 > (uint_64)(int_64)7) ){ goto $label$38 }
	$6 = *($15)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$6 = ($6 + [165])
	goto $label$36 
	
.LABEL $label$38
	$13 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$34
	$15 = ($15 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$33 }
	*(($16 + [8])) = [0]
	*($16) = (int_64)0
	$15 = CALL strlen([1168])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$41 }
	*($16) = ($15 << [1])
	$6 = ($16 | [1])
	if ( $15 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$9 = (($15 + [16]) & [-16])
	$6 = CALL $204($9)
	*($16) = ($9 | [1])
	*($16 + [8]) = $6
	*($16 + [4]) = $15
	
.LABEL $label$40
	CALL memcpy($6, [1168], $15)
	
.LABEL $label$39
	*(($6 + $15)) = [0]
	$15 = ($16 + [8])
	*((($16 + [16]) + [16])) = *($15)
	*(($16 + [28])) = *($16 + [4])
	*($16 + [16]) = *($1)
	$6 = *($16)
	*($16) = [0]
	*($16 + [24]) = $6
	*($16 + [4]) = [0]
	*($15) = [0]
	*($16 + [40]) = $5
	*($16 + [48]) = $14
	*($16 + [56]) = [0]
	*(($6 = ($16 + [60]))) = [0]
	*(($1 = ($16 + [64]))) = [0]
	*(($15 = CALL $204([16]))) = $4
	*($15 + [8]) = $12
	$9 = ($15 + [16])
	*($1) = $9
	*($6) = $9
	*($16 + [56]) = $15
	CALL $162(($16 + [68]), ($16 + [16]))
	CALL $79(($16 + [256]), ($16 + [40]))
	$15 = *($16 + [256])
	CALL send_inline($15, (*($16 + [260]) - $15))
	$15 = *($16 + [256])
	if ( ($15 == 0) ){ goto $label$42 }
	*($16 + [260]) = $15
	CALL $205($15)
	
.LABEL $label$42
	$15 = *($16 + [68])
	if ( ($15 == 0) ){ goto $label$43 }
	*(($16 + [72])) = $15
	CALL $205($15)
	
.LABEL $label$43
	$15 = *($16 + [56])
	if ( ($15 == 0) ){ goto $label$44 }
	*(($16 + [60])) = $15
	CALL $205($15)
	
.LABEL $label$44
	if ( ((*(($16 + [24])) & [1]) == 0) ){ goto $label$45 }
	CALL $205(*(($16 + [32])))
	
.LABEL $label$45
	if ( ((*($16) & [1]) == 0) ){ goto $label$46 }
	CALL $205(*(($16 + [8])))
	
.LABEL $label$46
	$1 = *($16 + [112])
	if ( ($1 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$9 = ($16 + [116])
	$15 = *($9)
	if ( ((int_32)$15 == (int_32)$1) ){ goto $label$48 }
	
.LOOP $label$49:
	$15 = ($15 + [-24])
	$6 = *($15)
	*($15) = [0]
	if ( ($6 == 0) ){ goto $label$50 }
	CALL $205($6)
	
.LABEL $label$50
	if ( ((int_32)$1 != (int_32)$15) ){ goto $label$49 }
	$15 = *(($16 + [112]))
	goto $label$47 
	
.LABEL $label$48
	$15 = $1
	
.LABEL $label$47
	*($9) = $1
	CALL $205($15)
	
.LABEL $label$24
	$1 = *($16 + [152])
	if ( ($1 == 0) ){ goto $label$51 }
	$9 = ($16 + [156])
	$15 = *($9)
	if ( ((int_32)$15 == (int_32)$1) ){ goto $label$53 }
	
.LOOP $label$54:
	$15 = ($15 + [-24])
	$6 = *($15)
	*($15) = [0]
	if ( ($6 == 0) ){ goto $label$55 }
	CALL $205($6)
	
.LABEL $label$55
	if ( ((int_32)$1 != (int_32)$15) ){ goto $label$54 }
	$15 = *(($16 + [152]))
	goto $label$52 
	
.LABEL $label$53
	$15 = $1
	
.LABEL $label$52
	*($9) = $1
	CALL $205($15)
	
.LABEL $label$51
	$1 = *($16 + [192])
	if ( ($1 == 0) ){ goto $label$56 }
	$9 = ($16 + [196])
	$15 = *($9)
	if ( ((int_32)$15 == (int_32)$1) ){ goto $label$58 }
	
.LOOP $label$59:
	$15 = ($15 + [-24])
	$6 = *($15)
	*($15) = [0]
	if ( ($6 == 0) ){ goto $label$60 }
	CALL $93($6)
	CALL $205($6)
	
.LABEL $label$60
	if ( ((int_32)$1 != (int_32)$15) ){ goto $label$59 }
	$15 = *(($16 + [192]))
	goto $label$57 
	
.LABEL $label$58
	$15 = $1
	
.LABEL $label$57
	*($9) = $1
	CALL $205($15)
	
.LABEL $label$56
	$1 = *($16 + [240])
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = ($16 + [244])
	$15 = *($9)
	if ( ((int_32)$15 == (int_32)$1) ){ goto $label$62 }
	
.LOOP $label$63:
	$15 = ($15 + [-24])
	$6 = *($15)
	*($15) = [0]
	if ( ($6 == 0) ){ goto $label$64 }
	CALL $205($6)
	
.LABEL $label$64
	if ( ((int_32)$1 != (int_32)$15) ){ goto $label$63 }
	$15 = *(($16 + [240]))
	goto $label$61 
	
.LABEL $label$62
	$15 = $1
	
.LABEL $label$61
	*($9) = $1
	CALL $205($15)
	
.LABEL $label$2
	*([0] + [4]) = ($16 + [272])
	return (unreachable)
	
.LABEL $label$1
	CALL $206($16)
}

int_32 .FUNC $184 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	*($0 + [8 align=4]) = (int_64)0
	*(($0 + [16])) = [0]
	$3 = ($0 + [8])
	$1 = CALL strlen([1168])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($1 << [1])
	$3 = ($3 + [1])
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = (($1 + [16]) & [-16])
	$3 = CALL $204($2)
	*(($0 + [8])) = ($2 | [1])
	*(($0 + [16])) = $3
	*(($0 + [12])) = $1
	
.LABEL $label$5
	CALL memcpy($3, [1168], $1)
	
.LABEL $label$4
	*(($3 + $1)) = [0]
	*(($0 + [28])) = [0]
	*($0 + [20 align=4]) = (int_64)0
	$3 = ($0 + [20])
	$1 = CALL strlen([1168])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$9 }
	*($3) = ($1 << [1])
	$3 = ($3 + [1])
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = (($1 + [16]) & [-16])
	$3 = CALL $204($2)
	*(($0 + [20])) = ($2 | [1])
	*(($0 + [28])) = $3
	*(($0 + [24])) = $1
	
.LABEL $label$8
	CALL memcpy($3, [1168], $1)
	
.LABEL $label$7
	*(($3 + $1)) = [0]
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	$3 = ($0 + [32])
	$1 = CALL strlen([1168])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$12 }
	*($3) = ($1 << [1])
	$3 = ($3 + [1])
	if ( $1 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$2 = (($1 + [16]) & [-16])
	$3 = CALL $204($2)
	*(($0 + [32])) = ($2 | [1])
	*(($0 + [40])) = $3
	*(($0 + [36])) = $1
	
.LABEL $label$11
	CALL memcpy($3, [1168], $1)
	
.LABEL $label$10
	*(($3 + $1)) = [0]
	return $0
	
.LABEL $label$3
	CALL $206($3)
	
.LABEL $label$2
	CALL $206($3)
	
.LABEL $label$1
	CALL $206($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $187 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $204([56])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [44]) = $1
	CALL $188(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $182(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $205(*(($3 + [40])))
	
.LABEL $label$4
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL $205(*(($3 + [28])))
	
.LABEL $label$5
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $205(*(($3 + [16])))
	
.LABEL $label$6
	CALL $205($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_64 .FUNC ceil (float_64 $0)
{
	int_64 $1
	int_32 $2
	float_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$1 = (CASTING int_64)(float_64 $0)
	$2 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$2) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ((int_64)$1 < (int_64)0)
	$3 = (float_64))(((float_64)( (float_64)4503599627370496 ? (float_64)-4503599627370496 : $4 ) + (float_64)((float_64)( (float_64)-4503599627370496 ? (float_64)4503599627370496 : $4 ) + (float_64)$0)) - $0)
	if ( ((uint_32)$2 > (uint_32)[1022]) ){ goto $label$2 }
	*($5 + [8]) = $3
	return ( (float_64)-0 ? (float_64)1 : $4 )
	
.LABEL $label$2
	$0 = ((float_64)$3 + (float_64)$0)
	if ( (((float_64)$3 >= (float_64)(float_64)0) | ((float_64)$3 != (float_64)$3)) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)1)
	
.LABEL $label$1
	return $0
}

void .FUNC $186 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	*($1) = *(*($3))
	$5 = ($1 + [8])
	CALL $207($5, (*($3) + [8]))
	$6 = ($1 + [20])
	CALL $207($6, (*($3) + [20]))
	$7 = ($1 + [32])
	CALL $207($7, (*($3) + [32]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1104])
	*(($3 = $9)) = [0]
	CALL $190($3, $1)
	$8 = *($3)
	if ( ($8 <= [513]) ){ goto $label$2 }
	$9 = CALL malloc($8)
	goto $label$1 
	
.LABEL $label$2
	$9 = ($9 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$1
	*($3) = $9
	*($3 + [8]) = ($9 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [800])
	CALL memcpy($9, $1, [8])
	*($3 + [4]) = ($9 + [8])
	CALL $83(CALL $83(CALL $83($3, $5), $6), $7)
	CALL db_update_i64(*($1 + [48]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$3 }
	CALL free($9)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $180 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$4 = ($0 + [28])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$5 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$8 = ($6 + [-24])
	$6 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$6 = *($4)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = ([0] - $6)
	$6 = $8
	
.LOOP $label$5:
	$8 = ($6 + [24])
	$5 = *($8)
	*($8) = [0]
	$7 = *($6)
	*($6) = $5
	if ( ($7 == 0) ){ goto $label$6 }
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $205(*(($7 + [40])))
	
.LABEL $label$7
	if ( ((*($7 + [20]) & [1]) == 0) ){ goto $label$8 }
	CALL $205(*(($7 + [28])))
	
.LABEL $label$8
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL $205(*(($7 + [16])))
	
.LABEL $label$9
	CALL $205($7)
	
.LABEL $label$6
	*(($6 + [16])) = *(($6 + [40]))
	*(($6 + [8])) = *(($6 + [32]))
	$6 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $205(*(($6 + [40])))
	
.LABEL $label$12
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$13 }
	CALL $205(*(($6 + [28])))
	
.LABEL $label$13
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL $205(*(($6 + [16])))
	
.LABEL $label$14
	CALL $205($6)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$10 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $204([40])) + [24]) = $0
	CALL $121(($8 + [32]), $6)
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $120(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*(($4 = CALL $204([40])) + [24]) = $1
	*($4 + [8]) = [0]
	*($4) = *(*($3))
	*($4 + [16]) = [0]
	*($4 + [12]) = *(*($3 + [4]))
	*($8 + [56]) = (($8 + [16]) + [18])
	*($8 + [52]) = ($8 + [16])
	*($8 + [48]) = ($8 + [16])
	CALL $119(($8 + [48]), $4)
	$5 = *($4)
	*($4 + [28]) = CALL db_store_i64(*($1 + [8]), (int_64)-3615112468298203136, $2, $5, ($8 + [16]), [18])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [48]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [28])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [48]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $120(($1 + [24]), ($8 + [48]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [48])
	*($8 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $205($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [64])
}

void .FUNC $114 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $204([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $115(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $111(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL $205(*(($3 + [16])))
	
.LABEL $label$4
	CALL $205($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	$5 = *($0 + [4])
	*($1) = *(*($5))
	$2 = *($0)
	$3 = ($1 + [8])
	CALL $207($3, *($5 + [4]))
	$5 = *($1 + [8])
	$4 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [8])
	$6 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [800])
	CALL memcpy($7, $1, [8])
	*($8 + [4]) = ($7 + [8])
	CALL $83($8, $3)
	$6 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-3705008938953998336, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $216($4, ($1 + [8]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $216(($4 + [16]), $4)
	CALL void $1((int_32 $2), (int_64 ($4 + [16])), (int_32 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $205(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $205(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	$5 = ($1 + [8])
	CALL $207($5, *($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1104])
	$3 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [8])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = ($8 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [800])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $83($9, $5)
	CALL db_update_i64(*($1 + [24]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $205(*(($4 + [16])))
	
.LABEL $label$7
	CALL $205($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $205(*(($4 + [16])))
	
.LABEL $label$10
	CALL $205($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $205(*(($1 + [16])))
	
.LABEL $label$11
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $205($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	*($1 + [12]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [1104])
	*($5 + [40]) = ($5 + [18])
	*($5 + [36]) = $5
	*($5 + [32]) = $5
	CALL $119(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $5, [18])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [800])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [800])
	CALL memcpy(*($0 + [4]), ($1 + [17]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $29 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)-3887392663594336256, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $92(($6 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [164]) == (int_32)($6 + [8])), [144])
	CALL eosio_assert([1], [944])
	CALL $132(($6 + [8]), $0, (int_64)0, $6)
	
.LABEL $label$1
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($6 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $93($3)
	CALL $205($3)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($6 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)-3922483085538492416, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $70(($6 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [36]) == (int_32)($6 + [8])), [144])
	CALL eosio_assert([1], [944])
	CALL $133(($6 + [8]), $0, (int_64)0, $6)
	
.LABEL $label$1
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($6 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $205($3)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($6 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $21 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	$5 = [0]
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$2 = *($0)
	*($6) = $2
	*($6 + [8]) = $2
	$0 = CALL db_find_i64($2, $2, (int_64)-3615112468298203136, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $116($6, $0)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$6), [144])
	
.LABEL $label$1
	$0 = [200]
	
.LOOP $label$3:
	if ( ($5 == 0) ){ goto $label$2 }
	CALL eosio_assert([1], [944])
	CALL $157($6, $5, (int_64)0, ($6 + [40]))
	CALL eosio_assert([1], [256])
	$3 = *($5 + [28])
	$5 = [0]
	$3 = CALL db_next_i64($3, ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $116($6, $3)
	
.LABEL $label$4
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$3 }
	
.LABEL $label$2
	$3 = *($6 + [24])
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = ($6 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL $205($0)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($6 + [24]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $3
	
.LABEL $label$6
	*($4) = $3
	CALL $205($5)
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-3615112468298203136, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $116($6, $3)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$6), [144])
	
.LABEL $label$1
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [208])
	CALL eosio_assert($3, [256])
	$3 = CALL db_next_i64(*($0 + [28]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $116($6, $3)
	
.LABEL $label$2
	CALL $158($6, $0)
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [80])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*(($3 = (($7 + [8]) + [16]))) = (int_64)0
	*(($4 = (($7 + [8]) + [8]))) = (int_64)0
	*($7 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy(($7 + [8]), $5, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [592])
	CALL memcpy($4, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [592])
	CALL memcpy($3, ($5 + [16]), [1])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($1 = (($7 + [32]) + [16]))) = *($3)
	*(($5 = (($7 + [32]) + [8]))) = *($4)
	*($7 + [32]) = *($7 + [8])
	*((($7 + [56]) + [16])) = *($1)
	*((($7 + [56]) + [8])) = *($5)
	*($7 + [56]) = *($7 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 ($7 + [56])), (int_32 $6))
	*([0] + [4]) = ($7 + [80])
	return [1]
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$3 = *($0)
	*($5 + [24]) = $3
	*($5 + [32]) = $3
	*($5 + [60]) = [0]
	*($5 + [20]) = $1
	*($5 + [16]) = ($5 + [24])
	CALL $154(($5 + [8]), ($5 + [24]), $3, ($5 + [16]))
	$2 = *($5 + [48])
	if ( ($2 == 0) ){ goto $label$1 }
	$4 = ($5 + [52])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $205($1)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($5 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $2
	
.LABEL $label$2
	*($4) = $2
	CALL $205($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $25 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)-3922483085538492416, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $70($6, $0)
	CALL eosio_assert(((int_32)*($0 + [36]) == (int_32)$6), [144])
	CALL eosio_assert([1], [208])
	CALL eosio_assert([1], [256])
	$3 = CALL db_next_i64(*($0 + [40]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $70($6, $3)
	
.LABEL $label$2
	CALL $134($6, $0)
	
.LABEL $label$1
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $24 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	*($6 + [36]) = [0]
	$0 = CALL db_find_i64($4, $4, (int_64)-3722870213289443328, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $150($6, $0)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$6), [144])
	CALL eosio_assert([1], [208])
	CALL eosio_assert([1], [256])
	$3 = CALL db_next_i64(*($0 + [28]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $150($6, $3)
	
.LABEL $label$2
	CALL $153($6, $0)
	
.LABEL $label$1
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [80])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	*(($8 + [24])) = (int_64)1397703940
	*($8 + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	CALL eosio_assert([1], [496])
	$5 = (int_64)5459781
	
.LOOP $label$5:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($6, [560])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [592])
	CALL memcpy(($8 + [8]), $4, [8])
	$1 = ($3 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [592])
	$6 = (($8 + [8]) + [8])
	CALL memcpy($6, ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [592])
	$1 = (($8 + [8]) + [16])
	CALL memcpy($1, ($4 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($4)
	
.LABEL $label$8
	*(($3 = (($8 + [32]) + [16]))) = *($1)
	*(($1 = (($8 + [32]) + [8]))) = *($6)
	*($8 + [32]) = *($8 + [8])
	*((($8 + [56]) + [16])) = *($3)
	*((($8 + [56]) + [8])) = *($1)
	*($8 + [56]) = *($8 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$7 = *((*($1) + $7))
	
.LABEL $label$9
	CALL void $1((int_32 ($8 + [56])), (int_32 $7))
	*([0] + [4]) = ($8 + [80])
	return [1]
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [256])
	*([0] + [4]) = $14
	CALL require_auth(*($1))
	$6 = ($1 + [16])
	CALL eosio_assert(((int_64)*($6) == (int_64)280553866500), [1536])
	CALL eosio_assert(((int_64)*($1 + [8]) > (int_64)0), [1568])
	*(($14 + [248])) = [0]
	*($14 + [232]) = (int_64)-1
	*($14 + [240]) = (int_64)0
	$10 = *($0)
	*($14 + [216]) = $10
	*($14 + [224]) = $10
	$2 = ($1 + [8])
	$8 = [0]
	$4 = CALL db_find_i64($10, $10, (int_64)-3922483085538492416, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $70(($14 + [216]), $4)
	CALL eosio_assert(((int_32)*($8 + [36]) == (int_32)($14 + [216])), [144])
	
.LABEL $label$1
	$10 = CALL current_time()
	$4 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($4, [928])
	$7 = ($8 + [16])
	CALL eosio_assert(((int_64)*($7) == (int_64)*($6)), [1248])
	CALL eosio_assert(((int_64)*($8 + [8]) >= (int_64)*($2)), [1488])
	$12 = ((uint_64)$10 / (uint_64)(int_64)1000000)
	$3 = (CASTING uint_32)(uint_64 $12)
	CALL eosio_assert(((uint_32)*($8 + [32]) <= (uint_32)$3), [1520])
	CALL eosio_assert(((int_64)*($7) == (int_64)*($6)), [1248])
	if ( ((int_64)*($8 + [8]) != (int_64)*($2)) ){ goto $label$3 }
	CALL eosio_assert($4, [208])
	CALL eosio_assert($4, [256])
	$6 = CALL db_next_i64(*($8 + [40]), ($14 + [136]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	CALL $70(($14 + [216]), $6)
	
.LABEL $label$4
	CALL $134(($14 + [216]), $8)
	goto $label$2 
	
.LABEL $label$3
	*($14 + [140]) = $0
	*($14 + [136]) = $1
	CALL eosio_assert($4, [944])
	CALL $135(($14 + [216]), $8, (int_64)0, ($14 + [136]))
	
.LABEL $label$2
	CALL $136(($14 + [200]), $0, $3)
	$10 = CALL current_time()
	*(($14 + [164])) = [0]
	*(($14 + [168])) = [0]
	*($14 + [148]) = [0]
	*($14 + [152]) = [0]
	*($14 + [156]) = [0]
	*($14 + [160]) = [0]
	*($14 + [136]) = ((CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000)) + [60])
	*($14 + [172]) = [0]
	*(($14 + [176])) = [0]
	*(($14 + [180])) = [0]
	*($14 + [184]) = [0]
	*(($14 + [188])) = [0]
	*(($14 + [192])) = [0]
	$10 = (int_64)0
	*($14 + [120]) = (int_64)0
	*($14 + [112]) = ((int_64)$12 & (int_64)4294967295)
	$4 = ($14 + [172])
	$5 = *($0)
	$9 = (int_64)59
	$8 = [1184]
	$11 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$10 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$6 = ($6 + [165])
	goto $label$8 
	
.LABEL $label$10
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$6
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$5 }
	*($14 + [64]) = $11
	*($14 + [56]) = $5
	$10 = (int_64)0
	$12 = (int_64)59
	$8 = [112]
	$11 = (int_64)0
	
.LOOP $label$11:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$12 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$6 = ($6 + [165])
	goto $label$13 
	
.LABEL $label$14
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$12
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$11 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [128]
	$13 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$20 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$6 = ($6 + [165])
	goto $label$18 
	
.LABEL $label$20
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$16
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$15 }
	*(($14 + [36])) = *(($2 + [12]))
	*((($14 + [8]) + [24])) = *(($2 + [8]))
	*((($14 + [8]) + [20])) = *(($2 + [4]))
	*($14 + [8]) = $5
	*($14 + [16]) = *($1)
	*($14 + [24]) = *($2)
	$8 = (($14 + [200]) + [8])
	*((($14 + [8]) + [40])) = *($8)
	*($14 + [40]) = *($14 + [200])
	*($14 + [200]) = [0]
	*($14 + [204]) = [0]
	*($8) = [0]
	$8 = CALL $94(($14 + [72]), ($14 + [56]), $11, $13, ($14 + [8]))
	$2 = (($14 + [136]) + [40])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($14 + [180]))) ){ goto $label$23 }
	*($6) = *($14 + [72])
	*($6 + [16 align=4]) = (int_64)0
	*(($6 + [8])) = *((($14 + [72]) + [8]))
	*(($4 = ($6 + [24]))) = [0]
	$7 = ($8 + [20])
	*(($6 + [20])) = *($7)
	*($6 + [16]) = *($8 + [16])
	$3 = ($8 + [24])
	*($4) = *($3)
	*($7) = [0]
	*($8 + [16]) = [0]
	*($3) = [0]
	*($6 + [28]) = [0]
	*(($4 = ($6 + [32]))) = [0]
	*(($7 = ($6 + [36]))) = [0]
	*($6 + [28]) = *($8 + [28])
	$6 = ($8 + [32])
	*($4) = *($6)
	$4 = ($8 + [36])
	*($7) = *($4)
	*($8 + [28]) = [0]
	*($6) = [0]
	*($4) = [0]
	*($2) = (*($2) + [40])
	$6 = *($8 + [16])
	if ( $6 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL $137($4, $8)
	$6 = *($8 + [28])
	if ( ($6 == 0) ){ goto $label$24 }
	*(($8 + [32])) = $6
	CALL $205($6)
	
.LABEL $label$24
	$6 = *($8 + [16])
	if ( ($6 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	*(($8 + [20])) = $6
	CALL $205($6)
	
.LABEL $label$21
	if ( ((*(($14 + [40])) & [1]) == 0) ){ goto $label$25 }
	CALL $205(*(($14 + [48])))
	
.LABEL $label$25
	*(($14 + [156])) = [259200]
	$10 = *($0)
	CALL $138(($14 + [8]), ($14 + [136]))
	$8 = *($14 + [8])
	CALL send_deferred(($14 + [112]), $10, $8, (*($14 + [12]) - $8), [0])
	$8 = *($14 + [8])
	if ( ($8 == 0) ){ goto $label$26 }
	*($14 + [12]) = $8
	CALL $205($8)
	
.LABEL $label$26
	CALL $139(($14 + [136]))
	*(($14 + [168])) = [0]
	*($14 + [152]) = (int_64)-1
	*($14 + [160]) = (int_64)0
	$10 = *($0)
	*($14 + [136]) = $10
	*($14 + [144]) = $10
	$8 = CALL db_find_i64($10, $10, (int_64)5606361038203797504, *($1))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$29 }
	$8 = CALL $58(($14 + [136]), $8)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($14 + [136])), [144])
	*($14 + [8]) = $1
	CALL eosio_assert([1], [944])
	CALL $140(($14 + [136]), $8, (int_64)0, ($14 + [8]))
	$1 = *($14 + [160])
	if ( $1 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$10 = *($0)
	*($14 + [72]) = $1
	CALL $141(($14 + [8]), ($14 + [136]), $10, ($14 + [72]))
	$1 = *($14 + [160])
	if ( ($1 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$2 = ($14 + [164])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$31 }
	
.LOOP $label$32:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$33 }
	CALL $205($6)
	
.LABEL $label$33
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$32 }
	$8 = *(($14 + [160]))
	goto $label$30 
	
.LABEL $label$31
	$8 = $1
	
.LABEL $label$30
	*($2) = $1
	CALL $205($8)
	
.LABEL $label$27
	if ( ((*($14 + [200]) & [1]) == 0) ){ goto $label$34 }
	CALL $205(*(($14 + [208])))
	
.LABEL $label$34
	$1 = *($14 + [240])
	if ( ($1 == 0) ){ goto $label$35 }
	$2 = ($14 + [244])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$37 }
	
.LOOP $label$38:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$39 }
	CALL $205($6)
	
.LABEL $label$39
	if ( ((int_32)$1 != (int_32)$8) ){ goto $label$38 }
	$8 = *(($14 + [240]))
	goto $label$36 
	
.LABEL $label$37
	$8 = $1
	
.LABEL $label$36
	*($2) = $1
	CALL $205($8)
	
.LABEL $label$35
	*([0] + [4]) = ($14 + [256])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $93($1)
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $205($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $84(CALL $84(CALL $84(CALL $84(CALL $84($0, ($1 + [24])), ($1 + [36])), ($1 + [48])), ($1 + [60])), ($1 + [72]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $84($0, ($1 + [136]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [592])
	CALL memcpy(($3 + [14]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [148]) = ((int_32)*($3 + [14]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [592])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [149]) = ((int_32)*($3 + [15]) != (int_32)[0])
	$0 = CALL $84($0, ($1 + [152]))
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [288])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [336])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1 + [8])
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( (uint_64)(((int_64)*(*($8) + [8]) ^ (int_64)$2) <= (int_64)256) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [400])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $205($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $205($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $204([32])
	$6 = CALL $104($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $105(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $204(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $215($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $205($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $205($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $204([32])
	CALL $108($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($7 + [16]) = $2)
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $105(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $205($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [592])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [592])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [464])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $204([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [592])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $84(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $111(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $205(*(($4 + [16])))
	
.LABEL $label$10
	CALL $205($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	*($0 + [16]) = $1
	$4 = *($2)
	$1 = *(*($2 + [4]))
	*($0) = *($1)
	*(($5 = ($0 + [8]))) = *(($1 + [8]))
	CALL eosio_assert([1], [800])
	CALL memcpy($6, $0, [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 | [8]), $5, [8])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)-3523243552165330944, *(*($2 + [8])), $3), $6, [16])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
	return $0
}

int_32 .FUNC $212 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*($6 + [8]) = $3
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($6 + [8])), (int_32 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $39 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($6 + [56]) = $1
	CALL require_auth(*($0))
	*(($6 + [48])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$4 = *($0)
	*($6 + [16]) = $4
	*($6 + [24]) = $4
	$3 = CALL db_find_i64($4, $4, (int_64)-3705008938953998336, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $109(($6 + [16]), $3)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)($6 + [16])), [144])
	*($6 + [8]) = $2
	CALL eosio_assert([1], [944])
	CALL $113(($6 + [16]), $0, (int_64)0, ($6 + [8]))
	$3 = *($6 + [40])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0)
	*($6 + [12]) = $2
	*($6 + [8]) = ($6 + [56])
	CALL $114($6, ($6 + [16]), $4, ($6 + [8]))
	$3 = *($6 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $205(*(($2 + [16])))
	
.LABEL $label$8
	CALL $205($2)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL $205($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	$3 = [0]
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$4 = *($0)
	*($5 + [24]) = $4
	*($5 + [32]) = $4
	$2 = CALL db_find_i64($4, $4, (int_64)-3615112468298203136, *($1))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $116(($5 + [24]), $2)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($5 + [24])), [144])
	
.LABEL $label$1
	*($5 + [20]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ($3 == 0) ){ goto $label$4 }
	*($5 + [8]) = ($5 + [20])
	CALL eosio_assert([1], [944])
	CALL $118(($5 + [24]), $3, (int_64)0, ($5 + [8]))
	$1 = *($5 + [48])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = *($0)
	*($5 + [8]) = $1
	*($5 + [12]) = ($5 + [20])
	CALL $117($5, ($5 + [24]), $4, ($5 + [8]))
	$1 = *($5 + [48])
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($5 + [52])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $205($3)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($5 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $1
	
.LABEL $label$5
	*($2) = $1
	CALL $205($0)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $34 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-3681528868142841856, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $125($6, $3)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)$6), [144])
	
.LABEL $label$1
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [928])
	CALL eosio_assert($3, [208])
	CALL eosio_assert($3, [256])
	$3 = CALL db_next_i64(*($0 + [24]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $125($6, $3)
	
.LABEL $label$2
	CALL $126($6, $0)
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $205(*(($3 + [16])))
	
.LABEL $label$8
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	$2 = *($0)
	*($5) = $2
	*($5 + [8]) = $2
	*($5 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)-3899444101308743680, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $122($5, $0)
	
.LOOP $label$2:
	CALL eosio_assert([1], [208])
	CALL eosio_assert([1], [256])
	$0 = [0]
	$1 = CALL db_next_i64(*($4 + [12]), ($5 + [40]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $122($5, $1)
	
.LABEL $label$3
	CALL $123($5, $4)
	$4 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($5 + [24])
	if ( ($1 == 0) ){ goto $label$4 }
	$3 = ($5 + [28])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $205($4)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($5 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $1
	
.LABEL $label$5
	*($3) = $1
	CALL $205($0)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$3 = *($0)
	*($5 + [24]) = $3
	*($5 + [32]) = $3
	*($5 + [20]) = $1
	*($5 + [16]) = ($5 + [24])
	CALL $128(($5 + [8]), ($5 + [24]), $3, ($5 + [16]))
	$2 = *($5 + [48])
	if ( ($2 == 0) ){ goto $label$1 }
	$4 = ($5 + [52])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $205(*(($1 + [16])))
	
.LABEL $label$6
	CALL $205($1)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($5 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $2
	
.LABEL $label$2
	*($4) = $2
	CALL $205($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $84(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $216(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $216(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $205(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $205(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $205(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC $30 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($6 + [56]) = $1
	CALL require_auth(*($0))
	*(($6 + [48])) = [0]
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$4 = *($0)
	*($6 + [16]) = $4
	*($6 + [24]) = $4
	$3 = CALL db_find_i64($4, $4, (int_64)-3899444101308743680, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $122(($6 + [16]), $3) + [8]) == (int_32)($6 + [16])), [144])
	$2 = *($6 + [40])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0)
	*($6 + [8]) = ($6 + [56])
	CALL $131($6, ($6 + [16]), $4, ($6 + [8]))
	$2 = *($6 + [40])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	$0 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)-3899444101308743680, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $122($6, $3)
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$6), [144])
	
.LABEL $label$1
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [928])
	CALL eosio_assert($3, [208])
	CALL eosio_assert($3, [256])
	$3 = CALL db_next_i64(*($0 + [12]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $122($6, $3)
	
.LABEL $label$2
	CALL $123($6, $0)
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $205($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $205($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $215 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $214 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $208($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $217 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $204($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $204($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $211 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$4 }
	$4 = ($0 + [1])
	$0 = uint_32($3 >> [1])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = *($0 + [8])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$0 = ( ($2 + [1]) ? $0 : ((uint_32)$0 > (uint_32)$2) )
	$1 = ($1 & [255])
	
.LOOP $label$5:
	if ( ($0 == 0) ){ goto $label$1 }
	$2 = ($4 + $0)
	$0 = ($0 + [-1])
	if ( ((int_32)*(($2 + [-1])) != (int_32)$1) ){ goto $label$5 }
	return $0
	
.LABEL $label$2
	return [-1]
	
.LABEL $label$1
	return [-1]
}

int_32 .FUNC $210 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $198 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [496])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [560])
	*($0 + [36]) = $1
	$5 = *($2 + [4])
	*($0) = *(*($5))
	$4 = *($2)
	$1 = *($5 + [4])
	$5 = *($5)
	*($0 + [8]) = *($5 + [16])
	*(($0 + [16])) = *(($5 + [24]))
	*($0 + [28]) = [1]
	CALL $147($1, $0)
	*($6 + [56]) = ($6 + [33])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $72(($6 + [48]), $0)
	$3 = *($0)
	*($0 + [40]) = CALL db_store_i64(*($4 + [8]), (int_64)-3922483085538492416, *(*($2 + [8])), $3, $6, [33])
	if ( (uint_64)($3 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [64])
	return $0
}

int_32 .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $84($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $196 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	$5 = *($3 + [4])
	$3 = *($3)
	CALL eosio_assert(((int_64)*(($3 + [24])) == (int_64)*(($1 + [16]))), [2064])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($3 + [16]))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [2112])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [2144])
	CALL $147($5, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1104])
	*($7 + [56]) = ($7 + [33])
	*($7 + [52]) = $7
	*($7 + [48]) = $7
	CALL $72(($7 + [48]), $1)
	CALL db_update_i64(*($1 + [40]), $2, $7, [33])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $197 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $204([48])
	CALL $198($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [40])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $205($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$2 = *($0)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = *($4 + [4])
	*($1 + [16]) = *($4)
	*(($5 = ($1 + [24]))) = *(($4 + [8]))
	CALL eosio_assert([1], [800])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 + [24]), $5, [8])
	$3 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)5606361038203797504, *(*($0 + [8])), $3, $6, [32])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $195 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [560])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $199($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $192 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [992])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [1040])
	$4 = *($1)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$3 = *($3)
	*($1 + [16]) = *($3)
	*(($5 = ($1 + [24]))) = *(($3 + [8]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1104])
	CALL eosio_assert([1], [800])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [800])
	CALL memcpy(($6 + [24]), $5, [8])
	CALL db_update_i64(*($1 + [36]), $2, $6, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $193 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [672])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $204([48])) + [24]) = (int_64)1397703940
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [560])
	*($4 + [32]) = $1
	CALL $194(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [36])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $61(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $205($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*($0) + [8])
	*($0) = $4
	$2 = *($1 + [8])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [12])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $4
	$2 = *(($1 + [8]))
	$2 = ( *(($1 + [12])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$2
	$2 = *($1 + [20])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *(($1 + [20]))
	$2 = ( *(($1 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$4
	$2 = *($1 + [32])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	*($0) = $4
	$1 = *(($1 + [32]))
	$1 = ( *(($1 + [36])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$6 }
	*($0) = ($1 + $4)
	
.LABEL $label$6
	return $0
}

int_32 .FUNC $191 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [48]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [880])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3921691482146209792)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [816])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [816])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $179(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}