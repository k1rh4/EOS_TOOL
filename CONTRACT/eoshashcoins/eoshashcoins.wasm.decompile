(data (i32.const 8232) "failed to allocate pages\00eoshashcoins\00")
(data (i32.const 8272) "\01\00\00\00\00\00\00\00\n\00\00\00\00\00\00\00d\00\00\00\00\00\00\00\e8\03\00\00\00\00\00\00\10\'\00\00\00\00\00\00\a0\86\01\00\00\00\00\00@B\0f\00\00\00\00\00\80\96\98\00\00\00\00\00\00\e1\f5\05\00\00\00\00\00\ca\9a;\00\00\00\00\00\e4\0bT\02\00\00\00\00\e8vH\17\00\00\00\00\10\a5\d4\e8\00\00\00\00\a0rN\18\t\00\00\00@z\10\f3Z\00\00\00\80\c6\a4~\8d\03\00\00\00\c1o\f2\86#\00\00\00\8a]xEc\01\00\00d\a7\b3\b6\e0\0d\00\00\e8\89\04#\c7\8a")
(data (i32.const 8432) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 8448) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 8464) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 8480) "symbol not support\00")
(data (i32.const 8499) "symbol mismatch\00")
(data (i32.const 8515) "tokensbridge\00")
(data (i32.const 8528) "bethash.pra\00")
(data (i32.const 8540) "dextop2match\00")
(data (i32.const 8553) "dextopadmin1\00")
(data (i32.const 8566) "dextop2admin\00")
(data (i32.const 8579) "eosmaji12345\00")
(data (i32.const 8592) "tpmooncake11\00")
(data (i32.const 8605) "candyboxoftp\00")
(data (i32.const 8618) "bethashbonus\00")
(data (i32.const 8631) "eoshashagent\00")
(data (i32.const 8644) "paytomat4eos\00")
(data (i32.const 8657) "bethashprize\00")
(data (i32.const 8670) "eoshashlotto\00")
(data (i32.const 8683) "eoshashbulls\00")
(data (i32.const 8696) "eoshashdices\00")
(data (i32.const 8709) "eoshashslots\00")
(data (i32.const 8722) "eoshashpoker\00")
(data (i32.const 8735) "eoshashstake\00")
(data (i32.const 8748) "eoshashjkpot\00")
(data (i32.const 8761) "eoshashfunds\00")
(data (i32.const 8774) "eoshashadmin\00")
(data (i32.const 8787) "eoshashtasks\00")
(data (i32.const 8800) "eoshashhouse\00")
(data (i32.const 8813) "unstake\00")
(data (i32.const 8821) "sell ram\00")
(data (i32.const 8830) "deposit\00")
(data (i32.const 8838) "chintailease\00")
(data (i32.const 8851) "positive assert\00")
(data (i32.const 8867) "invalid transfer\00")
(data (i32.const 8884) "HASH\00")
(data (i32.const 8889) "HPOINT\00")
(data (i32.const 8896) "active\00")
(data (i32.const 8903) "transfer\00")
(data (i32.const 8912) "string is too long to be a valid name\00")
(data (i32.const 8950) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9017) "character is not in allowed character set for names\00")
(data (i32.const 9069) "string is too long to be a valid symbol_code\00")
(data (i32.const 9114) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9167) "invalid symbol name\00")
(data (i32.const 9187) "attempt to add asset with different symbol\00")
(data (i32.const 9230) "addition underflow\00")
(data (i32.const 9249) "addition overflow\00")
(data (i32.const 9267) "attempt to subtract asset with different symbol\00")
(data (i32.const 9315) "subtraction underflow\00")
(data (i32.const 9337) "subtraction overflow\00")
(data (i32.const 9358) "write\00")
(data (i32.const 9364) "invalid supply\00")
(data (i32.const 9379) "max-supply must be positive\00")
(data (i32.const 9407) "token with symbol already exists\00")
(data (i32.const 9440) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9491) "error reading iterator\00")
(data (i32.const 9514) "cannot create objects in table of another contract\00")
(data (i32.const 9565) "issue not allowed\00")
(data (i32.const 9583) "memo has more than 256 bytes\00")
(data (i32.const 9612) "token with symbol does not exist, create token before issue\00")
(data (i32.const 9672) "invalid quantity\00")
(data (i32.const 9689) "must issue positive quantity\00")
(data (i32.const 9718) "symbol precision mismatch\00")
(data (i32.const 9744) "quantity exceeds available supply\00")
(data (i32.const 9778) "object passed to modify is not in multi_index\00")
(data (i32.const 9824) "cannot modify objects in table of another contract\00")
(data (i32.const 9875) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9934) "cannot pass end iterator to modify\00")
(data (i32.const 9969) "cannot transfer to self\00")
(data (i32.const 9993) "to account does not exist\00")
(data (i32.const 10019) "unable to find key\00")
(data (i32.const 10038) "must transfer positive quantity\00")
(data (i32.const 10070) "transfer not allowed\00")
(data (i32.const 10091) "no balance object found\00")
(data (i32.const 10115) "overdrawn balance\00")
(data (i32.const 10133) "overdrawn balance, you have some HASH in staking or un staking\00")
(data (i32.const 10196) "symbol does not exist\00")
(data (i32.const 10218) "Balance row already deleted or never existed. Action won\'t have any effect.\00")
(data (i32.const 10294) "Cannot close because the balance is not zero.\00")
(data (i32.const 10340) "cannot pass end iterator to erase\00")
(data (i32.const 10374) "cannot increment end iterator\00")
(data (i32.const 10404) "object passed to erase is not in multi_index\00")
(data (i32.const 10449) "cannot erase objects in table of another contract\00")
(data (i32.const 10499) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10552) "token with symbol does not exist\00")
(data (i32.const 10585) "must retire positive quantity\00")
(data (i32.const 10615) "must burns positive quantity\00")
(data (i32.const 10644) "burns overdrawn balance\00")
(data (i32.const 10668) "mine not allowed\00")
(data (i32.const 10685) "EIDOS\00")
(data (i32.const 10691) "eidosonecoin\00")
(data (i32.const 10704) "EUSD\00")
(data (i32.const 10709) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10768) "add token not allowed\00")
(data (i32.const 10790) "only 1 unit for token\00")
(data (i32.const 10812) "quote symbol only support EUSD\00")
(data (i32.const 10843) "delete token not allowed\00")
(data (i32.const 10868) "out of bet range\00")
(data (i32.const 10885) "not support symbol\00")
(data (i32.const 10904) "LYNX\00")
(data (i32.const 10909) "IOST\00")
(data (i32.const 10915) "exchange from \00")
(data (i32.const 10930) " to \00")
(data (i32.const 10935) "insufficient space in buffer\00")
(data (i32.const 10964) "read\00")
(data (i32.const 10969) "get\00")
(data (i32.const 0) "\e0*\00\00")
(import "env" "db_find_i64" (func $fimport$0 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memcpy" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$3))
(import "env" "memset" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$6 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$7 (param i32 i32)))
(import "env" "__multf3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$9 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$12 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$16 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$17 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$19 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$20 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$23 (param i64 i64) (result i32)))
(import "env" "is_account" (func $fimport$24 (param i64) (result i32)))
(import "env" "send_inline" (func $fimport$25 (param i32 i32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$26 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "set_proposed_producers" (func $fimport$28 (param i32 i32) (result i64)))
(import "env" "current_time" (func $fimport$29 (result i64)))
(import "env" "get_active_producers" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$31 (result i32)))
(import "env" "read_action_data" (func $fimport$32 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$33 (param i64)))
(import "env" "require_recipient" (func $fimport$34 (param i64)))
(import "env" "has_auth" (func $fimport$35 (param i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$36 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$37 (param i32 i64)))
(import "env" "current_receiver" (func $fimport$38 (result i64)))
(import "env" "db_store_i64" (func $fimport$39 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$40 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$41 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$42 (param i32)))
(export "apply" (func $50))
(table $0 13 13 anyfunc)
(elem (i32.const 1) $51 $53 $55 $57 $59 $61 $62 $64 $66 $67 $68 $70)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 10973))
(global $global$2 i32 (i32.const 10973))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9491])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([120])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [104]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	*($3 + [48]) = ($5 + [56])
	*($3 + [52]) = ($5 + [72])
	*($3 + [56]) = ($5 + [88])
	*($3 + [60]) = ($5 + [96])
	CALL $114(($3 + [32]), ($3 + [24]))
	*($5 + [108]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $7)
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $130(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	$3 = CALL $1([10704])
	if ( ($3 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9069])
	goto $label$4 
	
.LABEL $label$5
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = (int_64)0
	
.LOOP $label$6:
	$5 = *(($3 + [10703]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$7
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$6 }
	$6 = *($2 + [8])
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$4 << (int_64)8) | (int_64)8)) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = *($2 + [8])
	if ( ((int_64)$6 == (int_64)8) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ($1 + [32])
	$5 = *(($1 + [60]))
	$8 = *(($1 + [56]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$12:
	$3 = ($5 + [-24])
	$9 = *($3)
	if ( ((int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8) == (int_64)$4) ){ goto $label$11 }
	$5 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$10 }
	if ( ((int_32)*($9 + [104]) == (int_32)$7) ){ goto $label$9 }
	CALL eosio_assert([0], [9440])
	goto $label$9 
	
.LABEL $label$10
	$3 = CALL db_find_i64(*($7), *(($1 + [40])), (int_64)-3665743585900232704, $4)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$9 = CALL $98($7, $3)
	if ( ((int_32)*($9 + [104]) == (int_32)$7) ){ goto $label$9 }
	CALL eosio_assert([0], [9440])
	
.LABEL $label$9
	*($0 + [8]) = *(($9 + [32]))
	$10 = ((float_64)((float_64)(CASTING float_64)(int_64 *($2)) / (float_64)(CASTING float_64)(int_64 *($9))) * (float_64)(CASTING float_64)(int_64 *($9 + [24])))
	if ( ((float_64)(float_64)|$10| < (float_64)(float_64)9223372036854775808) ){ goto $label$13 }
	*($0) = (int_64)-9223372036854775808
	return 
	
.LABEL $label$13
	*($0) = (Rounds 0)($10)
	return (unreachable)
	
.LABEL $label$8
	CALL eosio_assert([0], [8480])
	
.LABEL $label$1
	*($0) = *($2)
	*(($0 + [8])) = *(($2 + [8]))
}

void .FUNC $94 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	$5 = ($global$0 - [192])
	$global$0 = $5
	$6 = ($2 + [8])
	$7 = *($6)
	*((($5 + [160]) + [8])) = $7
	$8 = *($2)
	*((($5 + [48]) + [8])) = $7
	*($5 + [160]) = $8
	*($5 + [48]) = $8
	CALL $99(($5 + [176]), $0, ($5 + [48]))
	*($6) = *((($5 + [176]) + [8]))
	*($2) = *($5 + [176])
	$9 = *($2)
	if ( (int_64)($9 == 0) ){ goto $label$1 }
	$6 = CALL $1([8889])
	if ( ($6 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9069])
	goto $label$4 
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = (int_64)0
	
.LOOP $label$6:
	$10 = *(($6 + [8888]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$7
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	$7 = ((int_64)$8 << (int_64)8)
	goto $label$2 
	
.LABEL $label$3
	$7 = (int_64)0
	
.LABEL $label$2
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$11 = ((int_64)$7 | (int_64)4)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$8 = $7
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$8 = $7
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $10 ){ goto $label$12 }
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [9167])
	
.LABEL $label$8
	$9 = ((int_64)$9 * (int_64)10000)
	$8 = (int_64)1
	$13 = *($2 + [8])
	$2 = (int_64)($13 == 0)
	if ( $2 ){ goto $label$13 }
	$7 = ((int_64)$13 + (int_64)1)
	$8 = (int_64)1
	
.LOOP $label$14:
	$8 = ((int_64)$8 * (int_64)10)
	$7 = ((int_64)$7 + (int_64)-1)
	if ( ((int_64)$7 > (int_64)1) ){ goto $label$14 }
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$9 / (int_64)$8) / (int_64)10)
	$8 = ((int_64)((uint_64)((int_64)((int_64)$4 * (int_64)$8) * (int_64)10) / (uint_64)(int_64)6000) + (int_64)$8)
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$1 }
	*($5 + [152]) = $11
	*($5 + [144]) = $8
	$6 = CALL $20(($5 + [128]), $3)
	*((($5 + [32]) + [8])) = *($5 + [152])
	*($5 + [32]) = *($5 + [144])
	CALL $76($0, $1, ($5 + [32]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $10(*($6 + [8]))
	
.LABEL $label$15
	$6 = CALL $1([10685])
	if ( ($6 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9069])
	goto $label$18 
	
.LABEL $label$19
	if ( ($6 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$8 = (int_64)0
	
.LOOP $label$20:
	$10 = *(($6 + [10684]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$21
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$20 }
	$4 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$16 
	
.LABEL $label$17
	$4 = (int_64)4
	
.LABEL $label$16
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$8 = $7
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$28
	$8 = $7
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $10 ){ goto $label$29 }
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$26 }
	
.LABEL $label$27
	if ( $2 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL eosio_assert([0], [9167])
	if ( ($2 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$8 = (int_64)1
	goto $label$22 
	
.LABEL $label$23
	$7 = ((int_64)$13 + (int_64)1)
	$8 = (int_64)1
	
.LOOP $label$30:
	$8 = ((int_64)$8 * (int_64)10)
	$7 = ((int_64)$7 + (int_64)-1)
	if ( ((int_64)$7 > (int_64)1) ){ goto $label$30 }
	
.LABEL $label$22
	*($5 + [112]) = [10691]
	*($5 + [116]) = CALL $1([10691])
	*($5 + [24]) = *($5 + [112])
	$7 = ((int_64)((int_64)$9 / (int_64)$8) / (int_64)50)
	$12 = CALL $36(($5 + [120]), ($5 + [24]))
	$6 = CALL $1([10685])
	if ( ($6 <= [8]) ){ goto $label$34 }
	CALL eosio_assert([0], [9069])
	goto $label$33 
	
.LABEL $label$34
	if ( ($6 == 0) ){ goto $label$32 }
	
.LABEL $label$33
	$8 = (int_64)0
	
.LOOP $label$35:
	$10 = *(($6 + [10684]))
	if ( ((($10 + [-65]) & [255]) <= [26]) ){ goto $label$36 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$36
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$35 }
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$31 
	
.LABEL $label$32
	$8 = (int_64)4
	
.LABEL $label$31
	CALL $43(($5 + [176]), *($12), $8, *($0))
	if ( ((int_64)*($5 + [184]) == (int_64)$4) ){ goto $label$37 }
	CALL eosio_assert([0], [10709])
	
.LABEL $label$37
	if ( ((int_64)*($5 + [176]) < (int_64)$7) ){ goto $label$1 }
	*($5 + [96]) = [10691]
	*($5 + [100]) = CALL $1([10691])
	*($5 + [16]) = *($5 + [96])
	$10 = CALL $36(($5 + [104]), ($5 + [16]))
	*($5 + [80]) = $7
	*($5 + [88]) = $4
	$8 = *($0)
	$6 = CALL $20(($5 + [64]), $3)
	$7 = *($10)
	*(($5 + [8])) = *($5 + [88])
	*($5) = *($5 + [80])
	CALL $45($7, $8, $1, $5, $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($6 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [192])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	$7 = [0]
	
.LOOP $label$1:
	if ( ($3 <= *($5)) ){ goto $label$2 }
	CALL eosio_assert([0], [10969])
	$3 = *($6)
	
.LABEL $label$2
	$8 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$7 = ($7 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $7)))
	$7 = ($7 + [7])
	$3 = $3
	if ( ($8 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$3 = *($1)
	$8 = *($1 + [4])
	$6 = ((int_32)($8 - $3) / (int_32)[104])
	if ( ((uint_32)$6 >= (uint_32)$7) ){ goto $label$5 }
	CALL $113($1, ($7 - $6))
	$8 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$7) ){ goto $label$6 }
	$8 = ($3 + ((int_32)$7 * (int_32)[104]))
	*(($1 + [4])) = $8
	
.LABEL $label$6
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($2 + [24])
	$6 = ($2 + [28])
	$5 = ($2 + [36])
	$1 = ($2 + [44])
	
.LOOP $label$7:
	*($2 + [8]) = $0
	*($2 + [16]) = $3
	*($7) = ($3 + [24])
	*($6) = ($3 + [40])
	*((($2 + [16]) + [16])) = ($3 + [56])
	*($5) = ($3 + [72])
	*((($2 + [16]) + [24])) = ($3 + [88])
	*($1) = ($3 + [96])
	*($2 + [20]) = ($3 + [16])
	CALL $114(($2 + [16]), ($2 + [8]))
	$3 = ($3 + [104])
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$7 }
	
.LABEL $label$3
	$global$0 = ($2 + [48])
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	float_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL $34((float_64)10, (CASTING float_64)(uint_32 *($1 + [8])))
	if ( ((float_64)(float_64)|$3| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	if ( ((int_64)*($1) != (int_64)-9223372036854775808) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)*($1) == (int_64)(Rounds 0)($3)) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [10790])
	
.LABEL $label$1
	$4 = CALL $1([10704])
	if ( ($4 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [9069])
	goto $label$6 
	
.LABEL $label$7
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$5 = (int_64)0
	
.LOOP $label$8:
	$6 = *(($4 + [10703]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$9 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$9
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$8 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)8)
	goto $label$4 
	
.LABEL $label$5
	$5 = (int_64)8
	
.LABEL $label$4
	if ( ((int_64)*(($1 + [32])) == (int_64)$5) ){ goto $label$10 }
	CALL eosio_assert([0], [10812])
	
.LABEL $label$10
	$7 = ($0 + [32])
	$5 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$6 = *(($0 + [60]))
	$8 = *(($0 + [56]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$17:
	$4 = ($6 + [-24])
	$9 = *($4)
	if ( ((int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8) == (int_64)$5) ){ goto $label$16 }
	$6 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)*($9 + [104]) == (int_32)$7) ){ goto $label$14 }
	CALL eosio_assert([0], [9440])
	$5 = *($0)
	*($2 + [8]) = $1
	if ( $9 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$15
	$4 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-3665743585900232704, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$9 = CALL $98($7, $4)
	if ( ((int_32)*($9 + [104]) == (int_32)$7) ){ goto $label$14 }
	CALL eosio_assert([0], [9440])
	
.LABEL $label$14
	$5 = *($0)
	*($2 + [8]) = $1
	if ( $9 ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$5 = *($0)
	*($2) = $1
	CALL $131(($2 + [8]), $7, $5, $2)
	$9 = *($2 + [12])
	$5 = *($0)
	*($2 + [8]) = $1
	if ( $9 ){ goto $label$11 }
	
.LABEL $label$12
	CALL eosio_assert([0], [9934])
	
.LABEL $label$11
	CALL $132($7, $9, $5, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($0 + [32])
	$4 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8) == (int_64)$4) ){ goto $label$4 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	if ( ((int_32)*($7 + [104]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9440])
	goto $label$2 
	
.LABEL $label$3
	$1 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)-3665743585900232704, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $98($3, $1)
	if ( ((int_32)*($7 + [104]) == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert([0], [9440])
	
.LABEL $label$2
	$1 = CALL db_next_i64(*($7 + [108]), ($2 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	CALL $98($3, $1)
	
.LABEL $label$6
	CALL $135($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9778])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9824])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9267])
	
.LABEL $label$3
	$7 = (int_64)
	*($1) = $7(*($1) - *($3)))
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [9315])
	$7 = *($1)
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [9337])
	
.LABEL $label$5
	$3 = ($1 + [8])
	if ( ((int_64)$6 == (int_64)(uint_64)*($3) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [9875])
	
.LABEL $label$6
	$8 = $4
	$4 = ($8 + [-16])
	$global$0 = $4
	CALL memcpy($4, $1, [8])
	*($5 + [8]) = *($3)
	CALL memcpy(($8 + [-8]), ($5 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9778])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9824])
	
.LABEL $label$2
	$6 = *($1 + [8])
	CALL $129($3, $1)
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)$6) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)) ){ goto $label$3 }
	CALL eosio_assert([0], [9875])
	
.LABEL $label$3
	$3 = $4
	$4 = ($3 + [-48])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-8])
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [16])
	*($5 + [40]) = ($1 + [32])
	CALL $118(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10964])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10964])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($0 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10964])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($4 + [24])) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $105(*($1), ($4 + [32]))
	$0 = ($4 + [48])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$4 = *(($1 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, $4, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $20(($2 + [16]), ($1 + [32]))
	$7 = *($1 + [48])
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*($0) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($8 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$3 = CALL $20(($2 + [64]), $6)
	*(($2 + [8])) = *($8)
	*($2) = *($2 + [80])
	CALL void $0((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $3), (int_32 $7), (int_64 $1))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($6) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($3 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($6 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $29($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9778])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9824])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9187])
	
.LABEL $label$3
	$7 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $7
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [9230])
	$7 = *($1)
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [9249])
	
.LABEL $label$5
	$3 = ($1 + [8])
	if ( ((int_64)$6 == (int_64)(uint_64)*($3) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [9875])
	
.LABEL $label$6
	$8 = $4
	$4 = ($8 + [-16])
	$global$0 = $4
	CALL memcpy($4, $1, [8])
	*($5 + [8]) = *($3)
	CALL memcpy(($8 + [-8]), ($5 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $115 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	*($3 + [152]) = ($2 + $4)
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	*($3 + [148]) = ($2 + [8])
	*($3 + [128]) = [0]
	*($3 + [120]) = (int_64)0
	CALL $95(($3 + [144]), ($3 + [120]))
	*(($2 = (($3 + [24]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [24]) = *($3 + [144])
	$2 = *($2)
	*((($3 + [160]) + [8])) = $2
	*(($4 = (($3 + [176]) + [8]))) = $2
	$5 = *($3 + [24])
	*($3 + [176]) = $5
	*($3 + [160]) = $5
	$2 = *($4)
	*((($3 + [192]) + [8])) = $2
	*(($3 + [64])) = $2
	*($3 + [40]) = $0
	*($3 + [48]) = $1
	$5 = *($3 + [176])
	*($3 + [56]) = $5
	*($3 + [192]) = $5
	*(($3 + [80])) = $0
	*(($3 + [88])) = (int_64)-1
	*(($3 + [96])) = (int_64)0
	*(($3 + [104])) = [0]
	*($3 + [72]) = $0
	*($3 + [112]) = $1
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = [0]
	$2 = (*($3 + [124]) - *($3 + [120]))
	$4 = ((int_32)$2 / (int_32)[104])
	$0 = *($3 + [136])
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ((uint_32)$4 >= (uint_32)[41297763]) ){ goto $label$6 }
	$2 = CALL $8($2)
	*(($3 + [16])) = ($2 + ((int_32)$4 * (int_32)[104]))
	*($3 + [8]) = $2
	*($3 + [12]) = $2
	$6 = *($3 + [120])
	$4 = (*($3 + [124]) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($2, $6, $4)
	*($3 + [12]) = (*($3 + [12]) + ((int_32)((uint_32)$4 / (uint_32)[104]) * (int_32)[104]))
	
.LABEL $label$7
	CALL $67(($3 + [40]), $0, ($3 + [8]))
	$2 = *($3 + [8])
	if ( ($2 == 0) ){ goto $label$8 }
	*($3 + [12]) = $2
	CALL $10($2)
	
.LABEL $label$8
	$6 = *(($3 + [96]))
	if ( ($6 == 0) ){ goto $label$9 }
	$7 = ($3 + [100])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$12 }
	$2 = *(($3 + [96]))
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($7) = $6
	CALL $10($2)
	
.LABEL $label$9
	$2 = *($3 + [120])
	if ( ($2 == 0) ){ goto $label$14 }
	*($3 + [124]) = $2
	CALL $10($2)
	
.LABEL $label$14
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$6
	CALL $29(($3 + [8]))
}

void .FUNC $122 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL $8($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $46($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [68]) = $7
	*($4 + [64]) = $7
	*($4 + [72]) = $2
	*($4 + [80]) = ($4 + [64])
	*($4 + [88]) = $3
	CALL $47(($4 + [88]), ($4 + [80]))
	CALL $48(($4 + [24]))
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [56])) = $7
	CALL $10($7)
	
.LABEL $label$7
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [44])) = $7
	CALL $10($7)
	
.LABEL $label$8
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [12]) = $7
	CALL $10($7)
	
.LABEL $label$9
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $29(($4 + [8]))
}

void .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $29($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9514])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL $8([120])
	CALL $133($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [108])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $130(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $10($1)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [104]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9778])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9824])
	
.LABEL $label$2
	$6 = *($1 + [8])
	*(($1 = CALL memcpy($1, *($3), [104])) + [88]) = ((int_64)((int_64)CALL $30() / (int_64)1000000) & (int_64)4294967295)
	$3 = ($1 + [88])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)$6) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)) ){ goto $label$3 }
	CALL eosio_assert([0], [9875])
	
.LABEL $label$3
	$7 = $4
	$4 = ($7 + [-112])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($7 + [-8])
	*($5 + [24]) = ($5 + [8])
	*($5 + [56]) = $3
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [16])
	*($5 + [40]) = ($1 + [24])
	*($5 + [44]) = ($1 + [40])
	*($5 + [48]) = ($1 + [56])
	*($5 + [52]) = ($1 + [72])
	*($5 + [60]) = ($1 + [96])
	CALL $134(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$4
	$global$0 = ($5 + [64])
}

int_32 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [104]) = $1
	*(($0 + [32])) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($0 + [80])) = (int_64)0
	$1 = *($2)
	*(($0 = CALL memcpy($0, *(*($2 + [4])), [104])) + [88]) = ((int_64)((int_64)CALL $30() / (int_64)1000000) & (int_64)4294967295)
	*($3 + [112]) = ($3 + [104])
	*($3 + [108]) = $3
	*($3 + [104]) = $3
	*($3 + [120]) = ($3 + [104])
	*($3 + [132]) = ($0 + [16])
	*($3 + [128]) = $0
	*($3 + [136]) = ($0 + [24])
	*($3 + [140]) = ($0 + [40])
	*($3 + [144]) = ($0 + [56])
	*($3 + [148]) = ($0 + [72])
	*($3 + [152]) = ($0 + [88])
	*($3 + [156]) = ($0 + [96])
	CALL $134(($3 + [128]), ($3 + [120]))
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	*($0 + [108]) = CALL db_store_i64(*($1 + [8]), (int_64)-3665743585900232704, *(*($2 + [8])), $4), $3, [104])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [160])
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9358])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $6, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($5, $6, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($5, $6, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $6, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($5, $6, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $5) > (int_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy($5, ($2 + [8]), [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($5, $6, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [28])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [9358])
	$1 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($1, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9778])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9824])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9187])
	
.LABEL $label$3
	$7 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $7
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [9230])
	$7 = *($1)
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [9249])
	
.LABEL $label$5
	if ( ((int_64)$6 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [9875])
	
.LABEL $label$6
	$3 = $4
	$4 = ($3 + [-48])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-8])
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [16])
	*($5 + [40]) = ($1 + [32])
	CALL $118(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$5 = (int_64)$4 >> (int_64)63
	$4 = *($0)
	$6 = ((int_64)((int_64)$4 + (int_64)$5)) ^ (int_64)$5)
	$7 = *($0 + [8])
	$8 = ($7 & [255])
	if ( $3 ){ goto $label$4 }
	if ( ((uint_32)(($1 + ( $8 ? [19] : ((uint_32)$8 > (uint_32)[19]) )) + [11]) <= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$4
	$9 = (CALL $31($1, $2, [1], $6, $8, (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)63))) + [1])
	$8 = [0]
	$5 = *(($0 + [8]))
	if ( (int_64)(((int_64)$5 & (int_64)65280) == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$8 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[7]) ){ goto $label$5 }
	$10 = ((int_64)$5 & (int_64)16711680)
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	$8 = ($9 + $8)
	if ( ((uint_32)$8 > (uint_32)$2) ){ goto $label$2 }
	if ( ($8 <= $1) ){ goto $label$2 }
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [0]
	*(($3 = CALL $31($1, $2, [0], $6, ($7 & [255]), (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)63))))) = [32]
	$1 = ($3 + [1])
	$10 = *(($0 + [8]))
	$5 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((uint_32)($3 + [8]) <= (uint_32)$2) ){ goto $label$7 }
	if ( (int_64)(((int_64)$10 & (int_64)65280) == 0) ){ goto $label$8 }
	$8 = [0]
	$10 = $5
	
.LOOP $label$9:
	$8 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[7]) ){ goto $label$8 }
	$4 = ((int_64)$10 & (int_64)65280)
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$9 }
	
.LABEL $label$8
	$8 = ($1 + $8)
	if ( ((uint_32)$8 > (uint_32)$2) ){ goto $label$2 }
	
.LABEL $label$7
	if ( (int_64)($5 == 0) ){ goto $label$1 }
	$8 = [0]
	
.LOOP $label$11:
	*(($1 + $8)) = $5
	$2 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$10 }
	$8 = $2
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$11 }
	
.LABEL $label$10
	$8 = ($1 + $2)
	
.LABEL $label$2
	return $8
	
.LABEL $label$1
	return $1
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10964])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($6, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [28])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [10964])
	$1 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10964])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10964])
	$6 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$0 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $38 (int_64 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [288])
	$global$0 = $1
	*($1 + [272]) = [8515]
	*($1 + [276]) = CALL $1([8515])
	*($1 + [88]) = *($1 + [272])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [280]), ($1 + [88]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [256]) = [8528]
	*($1 + [260]) = CALL $1([8528])
	*($1 + [80]) = *($1 + [256])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [264]), ($1 + [80]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [240]) = [8540]
	*($1 + [244]) = CALL $1([8540])
	*($1 + [72]) = *($1 + [240])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [248]), ($1 + [72]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [224]) = [8553]
	*($1 + [228]) = CALL $1([8553])
	*($1 + [64]) = *($1 + [224])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [232]), ($1 + [64]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [208]) = [8566]
	*($1 + [212]) = CALL $1([8566])
	*($1 + [56]) = *($1 + [208])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [216]), ($1 + [56]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [192]) = [8579]
	*($1 + [196]) = CALL $1([8579])
	*($1 + [48]) = *($1 + [192])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [200]), ($1 + [48]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [176]) = [8592]
	*($1 + [180]) = CALL $1([8592])
	*($1 + [40]) = *($1 + [176])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [184]), ($1 + [40]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [160]) = [8605]
	*($1 + [164]) = CALL $1([8605])
	*($1 + [32]) = *($1 + [160])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [168]), ($1 + [32]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [144]) = [8618]
	*($1 + [148]) = CALL $1([8618])
	*($1 + [24]) = *($1 + [144])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [152]), ($1 + [24]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [128]) = [8631]
	*($1 + [132]) = CALL $1([8631])
	*($1 + [16]) = *($1 + [128])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [136]), ($1 + [16]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [112]) = [8644]
	*($1 + [116]) = CALL $1([8644])
	*($1 + [8]) = *($1 + [112])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [120]), ($1 + [8]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [96]) = [8657]
	*($1 + [100]) = CALL $1([8657])
	*($1) = *($1 + [96])
	$2 = ((int_64)*(CALL $36(($1 + [104]), $1)) == (int_64)$0)
	
.LABEL $label$1
	$global$0 = ($1 + [288])
	return $2
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9358])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9358])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $117(CALL $116($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9358])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9358])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $46($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $49(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $10($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $29($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $43 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = [0]
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $3
	*($4 + [8]) = $1
	$6 = (uint_64)$2 >> (uint_64)(int_64)8
	$7 = CALL db_find_i64($1, $3, (int_64)3607749779137757184, $6)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $44(($4 + [8]), $7)
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [9440])
	
.LABEL $label$6
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$4 }
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$7:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL $10($0)
	
.LABEL $label$8
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	$5 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($0 + [8]) = $2
	*($0) = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$1 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $1
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$9 }
	goto $label$4 
	
.LABEL $label$10
	$6 = $1
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $0 ){ goto $label$11 }
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$4
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$3
	CALL eosio_assert([0], [9167])
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$5 = $7
	
.LABEL $label$1
	*($8) = $7
	CALL $10($5)
	$global$0 = ($4 + [48])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9491])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $8([80])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	CALL $139(($3 + [40]), ($3 + [32]))
	*($5 + [72]) = [-1]
	*($5 + [68]) = $1
	*($3 + [32]) = $5
	$7 = *($5)
	*($3 + [40]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $140(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $41 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($2 + [40]) = [8735]
	*($2 + [44]) = CALL $1([8735])
	*($2 + [16]) = *($2 + [40])
	$3 = CALL $36(($2 + [48]), ($2 + [16]))
	*($2 + [24]) = [8735]
	*($2 + [28]) = CALL $1([8735])
	*($2 + [8]) = *($2 + [24])
	CALL $36(($2 + [32]), ($2 + [8]))
	*(($2 + [88])) = [0]
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	*($2 + [92]) = [0]
	$4 = *($3)
	*($2 + [56]) = $4
	*($2 + [64]) = (int_64)6138638708771496096
	$3 = CALL db_find_i64($4, (int_64)6138638708771496096, (int_64)-4157661383434960896, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $42(($2 + [56]), $3)
	if ( ((int_32)*($3 + [64]) == (int_32)($2 + [56])) ){ goto $label$10 }
	CALL eosio_assert([0], [9440])
	
.LABEL $label$10
	*($0) = *($3 + [8])
	$1 = *(($3 + [16]))
	*(($0 + [8])) = $1
	if ( ((int_64)$1 == (int_64)*(($3 + [32]))) ){ goto $label$11 }
	CALL eosio_assert([0], [9187])
	
.LABEL $label$11
	$1 = ((int_64)*($0) + (int_64)*($3 + [24]))
	*($0) = $1
	if ( ((int_64)$1 <= (int_64)-4611686018427387904) ){ goto $label$8 }
	if ( ((int_64)$1 < (int_64)4611686018427387904) ){ goto $label$3 }
	CALL eosio_assert([0], [9249])
	$0 = *($2 + [80])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$9
	$3 = CALL $1([8884])
	if ( ($3 <= [8]) ){ goto $label$7 }
	CALL eosio_assert([0], [9069])
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [9230])
	$0 = *($2 + [80])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$1 = (int_64)0
	
.LOOP $label$12:
	$5 = *(($3 + [8883]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$13
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$12 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$4 
	
.LABEL $label$5
	$1 = (int_64)4
	
.LABEL $label$4
	*($0 + [8]) = $1
	*($0) = (int_64)0
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$1 = $4
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$15 }
	goto $label$3 
	
.LABEL $label$16
	$1 = $4
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$0 = ($3 + [1])
	$3 = $0
	if ( $5 ){ goto $label$17 }
	$3 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$15 }
	goto $label$3 
	
.LABEL $label$14
	CALL eosio_assert([0], [9167])
	
.LABEL $label$3
	$0 = *($2 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($2 + [84])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$21 }
	CALL $10($5)
	
.LABEL $label$21
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$20 }
	$3 = *(($2 + [80]))
	goto $label$18 
	
.LABEL $label$19
	$3 = $0
	
.LABEL $label$18
	*($6) = $0
	CALL $10($3)
	
.LABEL $label$1
	$global$0 = ($2 + [96])
}

int_32 .FUNC $40 (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = [0]
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)$0) ){ goto $label$1 }
	if ( CALL $39($1) ){ goto $label$1 }
	$6 = *($4)
	$7 = CALL $1([8813])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$2 }
	$6 = [0]
	if ( (CALL $28($4, [0], [-1], [8813], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = *($4)
	$7 = ($4 + [4])
	$8 = CALL $1([8821])
	if ( ((int_32)$8 != (int_32)( *($7) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$3 }
	$6 = [0]
	if ( (CALL $28($4, [0], [-1], [8821], $8) == 0) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = *($4)
	$8 = CALL $1([8830])
	if ( ((int_32)$8 != (int_32)( *($7) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$4 }
	$6 = [0]
	if ( (CALL $28($4, [0], [-1], [8830], $8) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	*($5 + [16]) = [8838]
	*($5 + [20]) = CALL $1([8838])
	*($5 + [8]) = *($5 + [16])
	$6 = [0]
	if ( ((int_64)*(CALL $36(($5 + [24]), ($5 + [8]))) == (int_64)$1) ){ goto $label$1 }
	$0 = *($3)
	if ( ((int_64)$0 > (int_64)0) ){ goto $label$5 }
	CALL eosio_assert([0], [8851])
	
.LABEL $label$5
	if ( ((uint_64)((int_64)$0 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$0 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $0) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$1 = (uint_64)$0 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$0 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$0 = $1
	$3 = $4
	goto $label$8 
	
.LABEL $label$9
	$0 = $1
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$0 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$0 = (uint_64)$0 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$3 = ($4 + [1])
	$4 = $3
	if ( $6 ){ goto $label$10 }
	
.LABEL $label$8
	$6 = [1]
	$4 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$6
	CALL eosio_assert([0], [8867])
	$6 = [1]
	
.LABEL $label$1
	$global$0 = ($5 + [32])
	return $6
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9358])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9358])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9358])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $126(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $29($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $45 (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = ($global$0 - [176])
	$global$0 = $5
	if ( (CALL is_account($2) == 0) ){ goto $label$1 }
	$6 = *($3)
	if ( (int_64)($6 == 0) ){ goto $label$1 }
	if ( ((int_64)$6 > (int_64)0) ){ goto $label$2 }
	CALL eosio_assert([0], [8867])
	
.LABEL $label$2
	*($5 + [88]) = [8896]
	*($5 + [92]) = CALL $1([8896])
	*($5 + [16]) = *($5 + [88])
	$6 = *(CALL $36(($5 + [96]), ($5 + [16])))
	*($5 + [72]) = [8903]
	*($5 + [76]) = CALL $1([8903])
	*($5 + [8]) = *($5 + [72])
	$7 = CALL $36(($5 + [80]), ($5 + [8]))
	*((($5 + [24]) + [24])) = *(($3 + [8]))
	*($5 + [32]) = $2
	*($5 + [24]) = $1
	*($5 + [40]) = *($3)
	$4 = CALL $20((($5 + [24]) + [32]), $4)
	*($5 + [104]) = $0
	*($5 + [112]) = *($7)
	*(($3 = CALL $8([16]))) = $1
	*($3 + [8]) = $6
	*((($5 + [104]) + [36])) = [0]
	$7 = ($3 + [16])
	*((($5 + [104]) + [24])) = $7
	*(($5 + [124])) = $7
	*($5 + [120]) = $3
	*($5 + [132 align=4]) = (int_64)0
	$3 = *($4)
	$4 = ( *((($5 + [24]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$2 = (CASTING uint_64)(uint_32 $4)
	$4 = ($5 + [132])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $46($4, $3)
	$4 = *(($5 + [136]))
	$3 = *(($5 + [132]))
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	$3 = [0]
	
.LABEL $label$4
	*($5 + [148]) = $3
	*($5 + [144]) = $3
	*($5 + [152]) = $4
	*($5 + [160]) = ($5 + [144])
	*($5 + [168]) = ($5 + [24])
	CALL $47(($5 + [168]), ($5 + [160]))
	CALL $48(($5 + [104]))
	$3 = *($5 + [132])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [136])) = $3
	CALL $10($3)
	
.LABEL $label$6
	$3 = *($5 + [120])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($5 + [124])) = $3
	CALL $10($3)
	
.LABEL $label$7
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*(($5 + [64])))
	
.LABEL $label$1
	$global$0 = ($5 + [176])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9491])
	
.LABEL $label$5
	$2 = CALL $2($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $8([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $141(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $3($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $10($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9514])
	
.LABEL $label$1
	*(($5 = CALL $8([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $1
	$3 = *($3)
	*($5) = *($3)
	*($5 + [8]) = *(($3 + [8]))
	CALL memcpy(($4 + [16]), $5, [8])
	*($4 + [40]) = *($5 + [8])
	CALL memcpy((($4 + [16]) | [8]), ($4 + [40]), [8])
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)3607749779137757184, $2, $6), ($4 + [16]), [16]
	*($5 + [20]) = $7)
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$2 }
	*(($1 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$2
	*($4 + [40]) = $5
	$6 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($4 + [16]) = $6)
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [40]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $125(($1 + [24]), ($4 + [40]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [40])
	*($4 + [40]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $10($5)
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *(*(*($0 + [4])))
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = *($0)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $8
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9167])
	
.LABEL $label$1
	*($1 + [8]) = $4
	*($1) = (int_64)0
	$9 = $2
	$7 = ($9 + [-16])
	$global$0 = $7
	CALL memcpy($7, $1, [8])
	*($3 + [8]) = *($1 + [8])
	CALL memcpy(($9 + [-8]), ($3 + [8]), [8])
	$5 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [20]) = CALL db_store_i64(*($6 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $5), $7, [16])
	if ( (uint_64)($5 <= *($6 + [16])) ){ goto $label$6 }
	*(($6 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $2($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $2($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $2($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $2(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $3($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $4 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $5 ()
{
	return [8208]
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8232])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $3 (int_32 $0)
{
}

void .FUNC $0 ()
{
	CALL $4()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_64 .FUNC $17 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $20(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $20(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_64 .FUNC $18 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

void .FUNC $19 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $58 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $7)
	*($4 + [176]) = ($4 + [104])
	*($4 + [24]) = ($4 + [120])
	CALL $81(($4 + [24]), ($4 + [176]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [112])
	*($4 + [8]) = *($4 + [104])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($8 = (($4 + [160]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [160]) = $9
	*($4 + [144]) = $9
	$3 = *($8)
	*((($4 + [176]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$9 = *($4 + [160])
	*($4 + [40]) = $9
	*($4 + [176]) = $9
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $1
	$0 = *($4 + [136])
	$1 = *($4 + [120])
	*($4 + [176]) = *($4 + [128])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 ($4 + [176])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $3($2)
	
.LABEL $label$5
	$5 = *(($4 + [80]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL $10($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [80]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$6
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $59 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [136]) = [8257]
	*($3 + [140]) = CALL $1([8257])
	*($3 + [8]) = *($3 + [136])
	if ( ((int_64)*(CALL $36(($3 + [16]), ($3 + [8]))) == (int_64)$1) ){ goto $label$1 }
	*($3 + [120]) = [8800]
	*($3 + [124]) = CALL $1([8800])
	*($3) = *($3 + [120])
	if ( ((int_64)*(CALL $36(($3 + [128]), $3)) == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [10768])
	
.LABEL $label$1
	CALL require_auth($1)
	$4 = *($2)
	if ( ((int_32)*($2 + [4]) == (int_32)$4) ){ goto $label$2 }
	$5 = [0]
	$6 = ($2 + [4])
	$7 = [0]
	
.LOOP $label$3:
	CALL memcpy(($3 + [16]), ($4 + $5), [104])
	CALL $96($0, ($3 + [16]))
	$5 = ($5 + [104])
	$4 = *($2)
	$7 = ($7 + [1])
	if ( ($7 <= ((int_32)(*($6) - $4) / (int_32)[104])) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($3 + [144])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)3626411730323822591) ){ goto $label$11 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)3626411730323822592) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)4516894921973563392) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4929617502180212736) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [1]
	*($3 + [56]) = *($3 + [184])
	CALL $52($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 <= (int_64)-4993669930013425665) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-4993669930013425664) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)3626220936060993536) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [2]
	*($3 + [72]) = *($3 + [168])
	CALL $54($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)5378311985370945536) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$1 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [3]
	*($3 + [24]) = *($3 + [216])
	CALL $56($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 == (int_64)-7807376982139731968) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-6533262907872903168) ){ goto $label$1 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [4]
	*($3 + [48]) = *($3 + [192])
	CALL $58($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [148]) = [0]
	*($3 + [144]) = [5]
	*($3 + [96]) = *($3 + [144])
	CALL $60($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [164]) = [0]
	*($3 + [160]) = [6]
	*($3 + [80]) = *($3 + [160])
	CALL $56($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [180]) = [0]
	*($3 + [176]) = [7]
	*($3 + [64]) = *($3 + [176])
	CALL $63($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [204]) = [0]
	*($3 + [200]) = [8]
	*($3 + [40]) = *($3 + [200])
	CALL $65($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [212]) = [0]
	*($3 + [208]) = [9]
	*($3 + [32]) = *($3 + [208])
	CALL $65($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [140]) = [0]
	*($3 + [136]) = [10]
	*($3 + [104]) = *($3 + [136])
	CALL $60($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [156]) = [0]
	*($3 + [152]) = [11]
	*($3 + [88]) = *($3 + [152])
	CALL $69($1, $1, ($3 + [88]))
	
.LABEL $label$1
	*($3 + [120]) = [8903]
	*($3 + [124]) = CALL $1([8903])
	*($3 + [16]) = *($3 + [120])
	CALL $36(($3 + [128]), ($3 + [16]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$12 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [12]
	*($3 + [8]) = *($3 + [112])
	CALL $65($0, $1, ($3 + [8]))
	
.LABEL $label$12
	CALL $32([0])
	$global$0 = ($3 + [224])
}

void .FUNC $51 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [0]
	*(($3 + [32])) = [0]
	*($3 + [8]) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$5 = *($0)
	*($3) = $5
	$2 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)*($2) >> (uint_64)(int_64)8)
	if ( ((int_32)$2) <= (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL $82($3, $2)
	if ( ((int_32)*($4 + [16]) == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert([0], [9440])
	
.LABEL $label$4
	if ( (int_64)(*($4) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [10218])
	if ( (int_64)(*([0]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [10294])
	
.LABEL $label$1
	if ( $4 ){ goto $label$5 }
	CALL eosio_assert([0], [10340])
	CALL eosio_assert([0], [10374])
	
.LABEL $label$5
	$2 = CALL db_next_i64(*($4 + [20]), ($3 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	CALL $82($3, $2)
	
.LABEL $label$6
	CALL $84($3, $4)
	$0 = *($3 + [24])
	if ( ($0 == 0) ){ goto $label$7 }
	$6 = ($3 + [28])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($3 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $0
	
.LABEL $label$8
	*($6) = $0
	CALL $10($4)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
}

int_32 .FUNC $52 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$5
	$3 = ($2 + $7)
	CALL memcpy(($4 + [88]), $2, [8])
	*($4 + [8]) = (int_64)0
	$8 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$6
	CALL memcpy(($4 + [8]), $8, [8])
	$9 = *($4 + [8])
	*((($4 + [88]) + [8])) = $9
	*(($4 + [32])) = $3
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*($4 + [24]) = $2
	*(($4 + [28])) = ($2 + [16])
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [40]) = $0
	*($4 + [80]) = $1
	$0 = *($4 + [88])
	*($4 + [104]) = $9
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 $0), (int_64 ($4 + [104])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $3($2)
	
.LABEL $label$8
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = ($4 + [68])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	CALL $10($7)
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$12 }
	$2 = *(($4 + [64]))
	goto $label$10 
	
.LABEL $label$11
	$2 = $5
	
.LABEL $label$10
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$9
	$global$0 = ($4 + [112])
	return [1]
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1 + [8])
	*(($2 + [40])) = [0]
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	*($2 + [16]) = $3)
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [8]) = *($0)
	$4 = CALL $78(($2 + [8]), $3, [10019])
	CALL require_auth(*($0))
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $6
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9672])
	
.LABEL $label$1
	$3 = *($0)
	*($2) = $1
	CALL $88(($2 + [8]), $4, $3, $2)
	$8 = *($2 + [32])
	if ( ($8 == 0) ){ goto $label$6 }
	$0 = ($2 + [36])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL $10($7)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$9 }
	$5 = *(($2 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $8
	
.LABEL $label$7
	*($0) = $8
	CALL $10($5)
	
.LABEL $label$6
	$global$0 = ($2 + [48])
}

int_32 .FUNC $54 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [104]) = (int_64)0
	*($4 + [96]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$5
	$3 = ($2 + $7)
	CALL memcpy(($4 + [96]), $2, [8])
	*($4 + [16]) = (int_64)0
	$8 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$6
	CALL memcpy(($4 + [16]), $8, [8])
	*(($8 = (($4 + [96]) + [8]))) = *($4 + [16])
	*(($4 + [40])) = $3
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*($4 + [32]) = $2
	*(($4 + [36])) = ($2 + [16])
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [48]) = $0
	*($4 + [88]) = $1
	*(($3 = (($4 + [112]) + [8]))) = *($8)
	*($4 + [112]) = *($4 + [96])
	*((($4 + [128]) + [8])) = *($3)
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	$0 = *((($4 + [128]) + [8]))
	*((($4 + [144]) + [8])) = $0
	*(($4 + [8])) = $0
	$0 = *($4 + [128])
	*($4) = $0
	*($4 + [144]) = $0
	CALL void $3((int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $3($2)
	
.LABEL $label$8
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	CALL $10($7)
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$12 }
	$2 = *(($4 + [72]))
	goto $label$10 
	
.LABEL $label$11
	$2 = $5
	
.LABEL $label$10
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$9
	$global$0 = ($4 + [160])
	return [1]
}

int_64 .FUNC $34 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $33($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $18($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [8448])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [8432]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [8464]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $17($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_32 .FUNC $56 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [152]))) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [124]) = $2
	*($4 + [120]) = $2
	*($4 + [128]) = ($2 + $7)
	*($4 + [192]) = ($4 + [120])
	*($4 + [40]) = ($4 + [136])
	CALL $71(($4 + [40]), ($4 + [192]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [128])
	*($4 + [24]) = *($4 + [120])
	$10 = *($9)
	*(($3 = (($4 + [160]) + [8]))) = $10
	*(($9 = (($4 + [176]) + [8]))) = $10
	$11 = *($4 + [24])
	*($4 + [176]) = $11
	*($4 + [160]) = $11
	$10 = *($9)
	*((($4 + [192]) + [8])) = $10
	*(($4 + [64])) = $10
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$11 = *($4 + [176])
	*($4 + [56]) = $11
	*($4 + [192]) = $11
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [72]) = $0
	*($4 + [112]) = $1
	*($3) = *($8)
	*($4 + [160]) = *($4 + [144])
	$0 = *($4 + [136])
	*($9) = *($3)
	*($4 + [176]) = *($4 + [160])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [176]) + [8]))
	*((($4 + [192]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [176])
	*($4 + [8]) = $1
	*($4 + [192]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $3($2)
	
.LABEL $label$5
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL $10($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$6
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $57 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL require_auth($3)
	$5 = *($2)
	*((($4 + [56]) + [32])) = [0]
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	*($4 + [64]) = $5)
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	*($4 + [56]) = *($0)
	if ( ((int_64)*(CALL $78(($4 + [56]), $5, [10196]) + [8]) == (int_64)*($2)) ){ goto $label$1 }
	CALL eosio_assert([0], [9718])
	
.LABEL $label$1
	*((($4 + [16]) + [32])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$6 = *($0)
	*($4 + [16]) = $6
	*($4 + [24]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, $5)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$6 }
	if ( ((int_32)*(CALL $82(($4 + [16]), $0) + [16]) == (int_32)($4 + [16])) ){ goto $label$7 }
	CALL eosio_assert([0], [9440])
	
.LABEL $label$7
	$7 = *($4 + [40])
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*($4 + [8]) = $2
	CALL $83($4, ($4 + [16]), $3, ($4 + [8]))
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$8 = ($4 + [44])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL $10($0)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [40]))
	*($8) = $7
	CALL $10($2)
	$7 = *($4 + [80])
	if ( $7 ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$8
	*($8) = $7
	CALL $10($7)
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($4 + [80])
	if ( $7 ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($4 + [96])
	return 
	
.LABEL $label$2
	$8 = ($4 + [84])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	CALL $10($0)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [80]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $7
	
.LABEL $label$11
	*($8) = $7
	CALL $10($2)
	$global$0 = ($4 + [96])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9358])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9358])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9358])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9358])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9358])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10964])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$8
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [20])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$10
	CALL memcpy($6, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$11
	CALL memcpy(($2 + [8]), $5, [8])
	*($6 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [24])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$12
	CALL memcpy($6, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [28])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [10964])
	$1 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $35 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [40]) = [8257]
	*($3 + [44]) = CALL $1([8257])
	*($3 + [16]) = *($3 + [40])
	$4 = CALL $36(($3 + [48]), ($3 + [16]))
	*($3 + [24]) = [8257]
	*($3 + [28]) = CALL $1([8257])
	*($3 + [8]) = *($3 + [24])
	CALL $36(($3 + [32]), ($3 + [8]))
	$5 = [0]
	*(($3 + [88])) = [0]
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	$6 = *($4)
	*($3 + [56]) = $6
	*($3 + [64]) = (int_64)6138638708500572032
	$4 = CALL db_find_i64($6, (int_64)6138638708500572032, (int_64)-3665743585900232704, (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_32)$4) < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $37(($3 + [56]), $4)
	if ( ((int_32)*($5 + [104]) == (int_32)($3 + [56])) ){ goto $label$4 }
	CALL eosio_assert([0], [9440])
	
.LABEL $label$4
	if ( ((int_64)*($5 + [16]) == (int_64)$1) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [8480])
	if ( ((int_64)*([0] + [16]) == (int_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8499])
	
.LABEL $label$1
	CALL memcpy($0, $5, [104])
	$4 = *($3 + [80])
	if ( ($4 == 0) ){ goto $label$5 }
	$7 = ($3 + [84])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	CALL $10($0)
	
.LABEL $label$9
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($3 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $4
	
.LABEL $label$6
	*($7) = $4
	CALL $10($5)
	
.LABEL $label$5
	$global$0 = ($3 + [96])
}

void .FUNC $112 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	*($3 + [152]) = ($2 + $4)
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	*($3 + [148]) = ($2 + [8])
	*($3 + [128]) = [0]
	*($3 + [120]) = (int_64)0
	CALL $95(($3 + [144]), ($3 + [120]))
	*(($2 = (($3 + [24]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [24]) = *($3 + [144])
	$2 = *($2)
	*((($3 + [160]) + [8])) = $2
	*(($4 = (($3 + [176]) + [8]))) = $2
	$5 = *($3 + [24])
	*($3 + [176]) = $5
	*($3 + [160]) = $5
	$2 = *($4)
	*((($3 + [192]) + [8])) = $2
	*(($3 + [64])) = $2
	*($3 + [40]) = $0
	*($3 + [48]) = $1
	$5 = *($3 + [176])
	*($3 + [56]) = $5
	*($3 + [192]) = $5
	*(($3 + [80])) = $0
	*(($3 + [88])) = (int_64)-1
	*(($3 + [96])) = (int_64)0
	*(($3 + [104])) = [0]
	*($3 + [72]) = $0
	*($3 + [112]) = $1
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = [0]
	$2 = (*($3 + [124]) - *($3 + [120]))
	$4 = ((int_32)$2 / (int_32)[104])
	$0 = *($3 + [136])
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ((uint_32)$4 >= (uint_32)[41297763]) ){ goto $label$6 }
	$2 = CALL $8($2)
	*(($3 + [16])) = ($2 + ((int_32)$4 * (int_32)[104]))
	*($3 + [8]) = $2
	*($3 + [12]) = $2
	$6 = *($3 + [120])
	$4 = (*($3 + [124]) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($2, $6, $4)
	*($3 + [12]) = (*($3 + [12]) + ((int_32)((uint_32)$4 / (uint_32)[104]) * (int_32)[104]))
	
.LABEL $label$7
	CALL $59(($3 + [40]), $0, ($3 + [8]))
	$2 = *($3 + [8])
	if ( ($2 == 0) ){ goto $label$8 }
	*($3 + [12]) = $2
	CALL $10($2)
	
.LABEL $label$8
	$6 = *(($3 + [96]))
	if ( ($6 == 0) ){ goto $label$9 }
	$7 = ($3 + [100])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$12 }
	$2 = *(($3 + [96]))
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($7) = $6
	CALL $10($2)
	
.LABEL $label$9
	$2 = *($3 + [120])
	if ( ($2 == 0) ){ goto $label$14 }
	*($3 + [124]) = $2
	CALL $10($2)
	
.LABEL $label$14
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$6
	CALL $29(($3 + [8]))
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[104]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[104])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[41297763]) ){ goto $label$3 }
	$3 = [41297762]
	$2 = ((int_32)($2 - $4) / (int_32)[104])
	if ( ((uint_32)$2 > (uint_32)[20648880]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8(((int_32)$3 * (int_32)[104]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3 + [88]) = (int_64)0
	*(($3 + [96])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [64])) = (int_64)0
	*(($3 + [80])) = (int_64)0
	$3 = (*($0) + [104])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $29($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[104]))
	$5 = ($2 + ((int_32)$5 * (int_32)[104]))
	$3 = ($5 + [48])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [-48])) = (int_64)0
	*(($3 + [-40])) = (int_64)0
	*(($3 + [-32])) = (int_64)0
	*(($3 + [-24])) = (int_64)0
	*(($3 + [-16])) = (int_64)0
	*(($3 + [-8])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	$3 = ($3 + [104])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[104]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-104]) * (int_32)[104]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $10($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $110 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [104]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$5
	CALL memcpy(($3 + [104]), $2, [8])
	*($3 + [96]) = (int_64)0
	*($3 + [8]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$6
	$4 = ($2 + $4)
	CALL memcpy(($3 + [8]), $5, [8])
	*($3 + [96]) = *($3 + [8])
	*($3 + [88]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$7
	CALL memcpy(($3 + [88]), $5, [8])
	*((($3 + [8]) + [24])) = $4
	*(($3 + [48])) = $0
	*(($3 + [56])) = (int_64)-1
	*(($4 = ($3 + [64]))) = (int_64)0
	*(($3 + [72])) = [0]
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [24])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [40]) = $0
	*($3 + [80]) = $1
	CALL $57(($3 + [8]), *($3 + [104]), ($3 + [96]), *($3 + [88]))
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = ($3 + [68])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $10($4)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($3 + [64]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$8
	$global$0 = ($3 + [112])
}

void .FUNC $111 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [88]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [88]), $2, [8])
	*($3 + [80]) = (int_64)0
	*($3) = (int_64)0
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$6
	CALL memcpy($3, $6, [8])
	*($3 + [80]) = *($3)
	*(($3 + [24])) = $5
	*(($3 + [40])) = $0
	*(($3 + [48])) = (int_64)-1
	*(($4 = ($3 + [56]))) = (int_64)0
	*(($3 + [64])) = [0]
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [16])
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [32]) = $0
	*($3 + [72]) = $1
	CALL $51($3, *($3 + [88]), ($3 + [80]))
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$7 }
	$6 = ($3 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $10($4)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($3 + [56]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $5
	
.LABEL $label$8
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$7
	$global$0 = ($3 + [96])
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $5, [8])
	$5 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $5
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $5, [8])
	*($3 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [16])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$7
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0 + [20])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10964])
	$1 = *(($0 + [4]))
	
.LABEL $label$8
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9358])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9358])
	$6 = *($5)
	
.LABEL $label$4
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$0 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9358])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $29($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $29 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $16(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $55 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $1
	CALL require_auth(*($0))
	$4 = [0]
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$1 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $6
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9167])
	
.LABEL $label$1
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$1 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $6
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [9364])
	$9 = *($2)
	
.LABEL $label$6
	if ( ((int_64)$9 > (int_64)0) ){ goto $label$11 }
	CALL eosio_assert([0], [9379])
	
.LABEL $label$11
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1 = *($0)
	*($3 + [16]) = $1
	*($3 + [24]) = $5
	$4 = CALL db_find_i64($1, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	if ( ((int_32)*(CALL $72(($3 + [16]), $4) + [40]) == (int_32)($3 + [16])) ){ goto $label$13 }
	CALL eosio_assert([0], [9440])
	
.LABEL $label$13
	CALL eosio_assert([0], [9407])
	
.LABEL $label$12
	$1 = *($0)
	*($3 + [8]) = $2
	*($3 + [12]) = ($3 + [56])
	CALL $73($3, ($3 + [16]), $1, ($3 + [8]))
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$14 }
	$2 = ($3 + [44])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	CALL $10($7)
	
.LABEL $label$18
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$17 }
	$4 = *(($3 + [40]))
	goto $label$15 
	
.LABEL $label$16
	$4 = $8
	
.LABEL $label$15
	*($2) = $8
	CALL $10($4)
	
.LABEL $label$14
	$global$0 = ($3 + [64])
}

void .FUNC $107 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [272])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [212]) = $2
	*($3 + [208]) = $2
	$5 = ($2 + $4)
	*($3 + [216]) = $5
	*($3 + [200]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$5 = *(($3 + [216]))
	$2 = *($3 + [212])
	
.LABEL $label$5
	CALL memcpy(($3 + [200]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [212]) = $2
	*($3 + [192]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	$5 = *((($3 + [208]) + [8]))
	$2 = *($3 + [212])
	
.LABEL $label$6
	CALL memcpy(($3 + [192]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [212]) = $2
	*($3 + [184]) = (int_64)0
	*($3 + [176]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10964])
	$5 = *(($3 + [216]))
	$2 = *($3 + [212])
	
.LABEL $label$7
	CALL memcpy(($3 + [176]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [212]) = $2
	*($3 + [72]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10964])
	$2 = *($3 + [212])
	
.LABEL $label$8
	CALL memcpy(($3 + [72]), $2, [8])
	*((($3 + [176]) + [8])) = *($3 + [72])
	*($3 + [212]) = ($2 + [8])
	*($3 + [168]) = [0]
	*($3 + [160]) = (int_64)0
	CALL $105(($3 + [208]), ($3 + [160]))
	$2 = *($3 + [212])
	if ( ((uint_32)(*((($3 + [208]) + [8])) - $2) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [10964])
	$2 = *($3 + [212])
	
.LABEL $label$9
	CALL memcpy(($3 + [152]), $2, [8])
	*($3 + [212]) = (*($3 + [212]) + [8])
	*(($2 = (($3 + [56]) + [8]))) = *((($3 + [208]) + [8]))
	*($3 + [56]) = *($3 + [208])
	$5 = *($2)
	*((($3 + [240]) + [8])) = $5
	*(($2 = (($3 + [224]) + [8]))) = $5
	$6 = *($3 + [56])
	*($3 + [224]) = $6
	*($3 + [240]) = $6
	$5 = *($2)
	*(($4 = (($3 + [256]) + [8]))) = $5
	*(($3 + [96])) = $5
	*($3 + [72]) = $0
	*($3 + [80]) = $1
	$6 = *($3 + [224])
	*($3 + [88]) = $6
	*($3 + [256]) = $6
	*(($3 + [112])) = $0
	*(($3 + [120])) = (int_64)-1
	*(($3 + [128])) = (int_64)0
	*(($3 + [136])) = [0]
	*($3 + [104]) = $0
	*($3 + [144]) = $1
	*(($7 = (($3 + [40]) + [8]))) = *((($3 + [176]) + [8]))
	*($3 + [40]) = *($3 + [176])
	$1 = *($3 + [192])
	$0 = *($3 + [200])
	$5 = CALL $20(($3 + [24]), ($3 + [160]))
	$6 = *($3 + [152])
	*($2) = *($7)
	*($3 + [224]) = *($3 + [40])
	if ( CALL $39($0) ){ goto $label$10 }
	CALL eosio_assert([0], [10668])
	
.LABEL $label$10
	CALL require_auth($0)
	*($4) = *($2)
	*($3 + [256]) = *($3 + [224])
	$2 = CALL $20(($3 + [240]), $5)
	*((($3 + [8]) + [8])) = *($4)
	*($3 + [8]) = *($3 + [256])
	CALL $94(($3 + [72]), $1, ($3 + [8]), $2, $6)
	if ( (*($3 + [240]) & [1]) ){ goto $label$17 }
	if ( (*($5) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $10(*($2 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $10(*($5 + [8]))
	$4 = *(($3 + [128]))
	if ( ($4 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$4 = *(($3 + [128]))
	if ( $4 ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	$7 = ($3 + [132])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$21 }
	CALL $10($5)
	
.LABEL $label$21
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($3 + [128]))
	goto $label$18 
	
.LABEL $label$19
	$2 = $4
	
.LABEL $label$18
	*($7) = $4
	CALL $10($2)
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $10(*(($3 + [168])))
	
.LABEL $label$11
	$global$0 = ($3 + [272])
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [10969])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $46($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $10($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $8($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $1($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $21($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $21($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $8(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $21($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $1($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $21($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $26($0, $1, $2, CALL $1($2))
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $21($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $109 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [256])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [196]) = $2
	*($3 + [192]) = $2
	$5 = ($2 + $4)
	*($3 + [200]) = $5
	*($3 + [184]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$5 = *(($3 + [200]))
	$2 = *($3 + [196])
	
.LABEL $label$5
	CALL memcpy(($3 + [184]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [196]) = $2
	*($3 + [176]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	$5 = *((($3 + [192]) + [8]))
	$2 = *($3 + [196])
	
.LABEL $label$6
	CALL memcpy(($3 + [176]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [196]) = $2
	*($3 + [168]) = (int_64)0
	*($3 + [160]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10964])
	$5 = *(($3 + [200]))
	$2 = *($3 + [196])
	
.LABEL $label$7
	CALL memcpy(($3 + [160]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [196]) = $2
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10964])
	$2 = *($3 + [196])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $2, [8])
	*(($5 = (($3 + [160]) + [8]))) = *($3 + [64])
	*($3 + [196]) = ($2 + [8])
	*($3 + [152]) = [0]
	*($3 + [144]) = (int_64)0
	CALL $105(($3 + [192]), ($3 + [144]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [192]) + [8]))
	*($3 + [48]) = *($3 + [192])
	$2 = *($2)
	*((($3 + [208]) + [8])) = $2
	*(($4 = (($3 + [224]) + [8]))) = $2
	$6 = *($3 + [48])
	*($3 + [224]) = $6
	*($3 + [208]) = $6
	$2 = *($4)
	*((($3 + [240]) + [8])) = $2
	*(($3 + [88])) = $2
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$6 = *($3 + [224])
	*($3 + [80]) = $6
	*($3 + [240]) = $6
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($4 = ($3 + [120]))) = (int_64)0
	*(($3 + [128])) = [0]
	*($3 + [96]) = $0
	*($3 + [136]) = $1
	*(($7 = (($3 + [32]) + [8]))) = *($5)
	*($3 + [32]) = *($3 + [160])
	$0 = *($3 + [176])
	$1 = *($3 + [184])
	$2 = CALL $20(($3 + [16]), ($3 + [144]))
	*(($3 + [8])) = *($7)
	*($3) = *($3 + [32])
	CALL $64(($3 + [64]), $1, $0, $3, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$9
	$4 = *($4)
	if ( ($4 == 0) ){ goto $label$10 }
	$7 = ($3 + [124])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $10($5)
	
.LABEL $label$14
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($3 + [120]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $4
	
.LABEL $label$11
	*($7) = $4
	CALL $10($2)
	
.LABEL $label$10
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$15 }
	CALL $10(*(($3 + [152])))
	
.LABEL $label$15
	$global$0 = ($3 + [256])
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [104]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10404])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10449])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1 + [8])
	if ( (uint_64)(((int_64)*(*(($4 + [-24])) + [8]) ^ (int_64)$6) <= (int_64)256) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((uint_64)((int_64)*(*($9) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10499])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $10($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [108]))
}

int_32 .FUNC $69 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [112]) + [24])) = (int_64)0
	*((($4 + [112]) + [40])) = [0]
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $5)
	*($4 + [208]) = ($4 + [96])
	*($4 + [16]) = ($4 + [112])
	CALL $92(($4 + [16]), ($4 + [208]))
	*(($3 = ($4 + [8]))) = *($4 + [104])
	*($4) = *($4 + [96])
	$3 = *($3)
	*((($4 + [176]) + [8])) = $3
	*(($6 = (($4 + [192]) + [8]))) = $3
	$7 = *($4)
	*($4 + [192]) = $7
	*($4 + [176]) = $7
	$3 = *($6)
	*((($4 + [208]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$7 = *($4 + [192])
	*($4 + [32]) = $7
	*($4 + [208]) = $7
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($3 = ($4 + [72]))) = (int_64)0
	*(($4 + [80])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $1
	*($4 + [212]) = ($4 + [168])
	*($4 + [208]) = ($4 + [16])
	CALL $93(($4 + [208]), ($4 + [112]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $3($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL $10($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [72]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$5
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($4 + [152])))
	
.LABEL $label$10
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $68 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	$6 = ($global$0 - [48])
	$global$0 = $6
	if ( CALL $39($1) ){ goto $label$1 }
	CALL eosio_assert([0], [10668])
	
.LABEL $label$1
	CALL require_auth($1)
	*(($7 = (($6 + [32]) + [8]))) = *(($3 + [8]))
	*($6 + [32]) = *($3)
	$3 = CALL $20(($6 + [16]), $4)
	*(($6 + [8])) = *($7)
	*($6) = *($6 + [32])
	CALL $94($0, $2, $6, $3, $5)
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($3 + [8]))
	
.LABEL $label$2
	$global$0 = ($6 + [48])
}

void .FUNC $108 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [240])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [180]) = $2
	*($3 + [176]) = $2
	$5 = ($2 + $4)
	*($3 + [184]) = $5
	*($3 + [168]) = (int_64)0
	*($3 + [160]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$5 = *(($3 + [184]))
	$2 = *($3 + [180])
	
.LABEL $label$5
	CALL memcpy(($3 + [160]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [180]) = $2
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	$2 = *($3 + [180])
	
.LABEL $label$6
	CALL memcpy(($3 + [64]), $2, [8])
	*(($4 = (($3 + [160]) + [8]))) = *($3 + [64])
	*($3 + [180]) = ($2 + [8])
	*($3 + [152]) = [0]
	*($3 + [144]) = (int_64)0
	CALL $105(($3 + [176]), ($3 + [144]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [176]) + [8]))
	*($3 + [48]) = *($3 + [176])
	$2 = *($2)
	*((($3 + [192]) + [8])) = $2
	*(($5 = (($3 + [208]) + [8]))) = $2
	$6 = *($3 + [48])
	*($3 + [208]) = $6
	*($3 + [192]) = $6
	$2 = *($5)
	*((($3 + [224]) + [8])) = $2
	*(($3 + [88])) = $2
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$6 = *($3 + [208])
	*($3 + [80]) = $6
	*($3 + [224]) = $6
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($5 = ($3 + [120]))) = (int_64)0
	*(($3 + [128])) = [0]
	*($3 + [96]) = $0
	*($3 + [136]) = $1
	*(($7 = (($3 + [32]) + [8]))) = *($4)
	*($3 + [32]) = *($3 + [160])
	$2 = CALL $20(($3 + [16]), ($3 + [144]))
	*(($3 + [8])) = *($7)
	*($3) = *($3 + [32])
	CALL $62(($3 + [64]), $3, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$7
	$5 = *($5)
	if ( ($5 == 0) ){ goto $label$8 }
	$7 = ($3 + [124])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $10($4)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($3 + [120]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($7) = $5
	CALL $10($2)
	
.LABEL $label$8
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*(($3 + [152])))
	
.LABEL $label$13
	$global$0 = ($3 + [240])
}

int_32 .FUNC $65 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [224])
	$global$0 = $3
	*(($4 = $3) + [168]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [120]) + [24])) = (int_64)0
	*((($4 + [120]) + [40])) = [0]
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $5)
	*($4 + [208]) = ($4 + [104])
	*($4 + [24]) = ($4 + [120])
	CALL $74(($4 + [24]), ($4 + [208]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [112])
	*($4 + [8]) = *($4 + [104])
	$3 = *($3)
	*((($4 + [176]) + [8])) = $3
	*(($6 = (($4 + [192]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [192]) = $7
	*($4 + [176]) = $7
	$3 = *($6)
	*((($4 + [208]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$7 = *($4 + [192])
	*($4 + [40]) = $7
	*($4 + [208]) = $7
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($3 = ($4 + [80]))) = (int_64)0
	*(($4 + [88])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $1
	*($4 + [212]) = ($4 + [168])
	*($4 + [208]) = ($4 + [24])
	CALL $75(($4 + [208]), ($4 + [120]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $3($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL $10($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$5
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($4 + [160])))
	
.LABEL $label$10
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $64 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [144])
	$global$0 = $5
	$6 = *(($3 + [8]))
	*((($5 + [128]) + [8])) = $6
	$7 = *($3)
	*((($5 + [40]) + [8])) = $6
	*($5 + [128]) = $7
	*($5 + [40]) = $7
	CALL $77($0, $1, $2, ($5 + [40]))
	if ( ((int_64)$1 != (int_64)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [9969])
	
.LABEL $label$1
	CALL require_auth($1)
	if ( CALL is_account($2) ){ goto $label$2 }
	CALL eosio_assert([0], [9993])
	
.LABEL $label$2
	$8 = *($3 + [8])
	*(($5 + [120])) = [0]
	$7 = (uint_64)$8 >> (uint_64)(int_64)8
	*($5 + [96]) = $7)
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	*($5 + [88]) = *($0)
	$9 = CALL $78(($5 + [88]), $7, [10019])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$11 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$7 = $6
	$12 = $11
	$11 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$7 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$12 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $12 ){ goto $label$7 }
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([0], [9672])
	
.LABEL $label$3
	if ( ((int_64)$10 <= (int_64)0) ){ goto $label$12 }
	if ( ((int_64)$8 != (int_64)*($9 + [8])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL eosio_assert([0], [10038])
	if ( ((int_64)$8 == (int_64)*($9 + [8])) ){ goto $label$10 }
	
.LABEL $label$11
	CALL eosio_assert([0], [9718])
	if ( (*($4) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($4 + [4]) <= [257]) ){ goto $label$8 }
	CALL eosio_assert([0], [9583])
	
.LABEL $label$8
	$11 = CALL has_auth($2)
	$12 = ($3 + [8])
	$6 = *($12)
	*((($5 + [72]) + [8])) = $6
	$7 = *($3)
	*((($5 + [24]) + [8])) = $6
	*($5 + [24]) = $7
	*($5 + [72]) = $7
	CALL $79($0, $1, ($5 + [24]))
	$6 = *($12)
	*((($5 + [56]) + [8])) = $6
	$7 = *($3)
	*((($5 + [8]) + [8])) = $6
	*($5 + [8]) = $7
	*($5 + [56]) = $7
	CALL $80($0, $2, ($5 + [8]), ( $2 ? $1 : $11 ))
	$13 = *($5 + [112])
	if ( ($13 == 0) ){ goto $label$13 }
	$3 = ($5 + [116])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$15 }
	
.LOOP $label$16:
	$11 = ($11 + [-24])
	$12 = *($11)
	*($11) = [0]
	if ( ($12 == 0) ){ goto $label$17 }
	CALL $10($12)
	
.LABEL $label$17
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$16 }
	$11 = *(($5 + [112]))
	goto $label$14 
	
.LABEL $label$15
	$11 = $13
	
.LABEL $label$14
	*($3) = $13
	CALL $10($11)
	
.LABEL $label$13
	$global$0 = ($5 + [144])
}

void .FUNC $67 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [136]) = [8257]
	*($3 + [140]) = CALL $1([8257])
	*($3 + [8]) = *($3 + [136])
	if ( ((int_64)*(CALL $36(($3 + [16]), ($3 + [8]))) == (int_64)$1) ){ goto $label$1 }
	*($3 + [120]) = [8800]
	*($3 + [124]) = CALL $1([8800])
	*($3) = *($3 + [120])
	if ( ((int_64)*(CALL $36(($3 + [128]), $3)) == (int_64)$1) ){ goto $label$1 }
	CALL eosio_assert([0], [10843])
	
.LABEL $label$1
	CALL require_auth($1)
	$4 = *($2)
	if ( ((int_32)*($2 + [4]) == (int_32)$4) ){ goto $label$2 }
	$5 = [0]
	$6 = ($2 + [4])
	$7 = [0]
	
.LOOP $label$3:
	CALL memcpy(($3 + [16]), ($4 + $5), [104])
	CALL $97($0, ($3 + [16]))
	$5 = ($5 + [104])
	$4 = *($2)
	$7 = ($7 + [1])
	if ( ($7 <= ((int_32)(*($6) - $4) / (int_32)[104])) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($3 + [144])
}

void .FUNC $66 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [48])
	$global$0 = $5
	if ( CALL $39($1) ){ goto $label$1 }
	CALL eosio_assert([0], [9565])
	
.LABEL $label$1
	CALL require_auth($1)
	*(($6 = (($5 + [32]) + [8]))) = *(($3 + [8]))
	*($5 + [32]) = *($3)
	$3 = CALL $20(($5 + [16]), $4)
	*(($5 + [8])) = *($6)
	*($5) = *($5 + [32])
	CALL $76($0, $2, $5, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($3 + [8]))
	
.LABEL $label$2
	$global$0 = ($5 + [48])
}

void .FUNC $61 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = *($2)
	if ( ((uint_64)((int_64)$4 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $7
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$5 }
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9672])
	$4 = *($2)
	
.LABEL $label$1
	if ( ((int_64)$4 > (int_64)0) ){ goto $label$6 }
	CALL eosio_assert([0], [10615])
	
.LABEL $label$6
	$5 = *($2 + [8])
	*((($3 + [56]) + [32])) = [0]
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	*($3 + [64]) = $5)
	*($3 + [72]) = (int_64)-1
	*($3 + [80]) = (int_64)0
	*($3 + [56]) = *($0)
	$6 = CALL $78(($3 + [56]), $5, [10019])
	if ( CALL has_auth(*($0)) ){ goto $label$7 }
	CALL require_auth($1)
	
.LABEL $label$7
	*((($3 + [16]) + [32])) = [0]
	*($3 + [24]) = $1
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [16]) = *($0)
	$8 = CALL $89(($3 + [16]), $5, [10091])
	if ( ((int_64)*($8) >= (int_64)*($2)) ){ goto $label$8 }
	CALL eosio_assert([0], [10644])
	
.LABEL $label$8
	$5 = *($6 + [32])
	*($3 + [8]) = $2
	CALL $90(($3 + [16]), $8, $5, ($3 + [8]))
	$5 = *($0)
	*($3 + [8]) = $2
	CALL $91(($3 + [56]), $6, $5, ($3 + [8]))
	$9 = *($3 + [40])
	if ( ($9 == 0) ){ goto $label$9 }
	$2 = ($3 + [44])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$13 }
	CALL $10($8)
	
.LABEL $label$13
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$12 }
	$6 = *(($3 + [40]))
	goto $label$10 
	
.LABEL $label$11
	$6 = $9
	
.LABEL $label$10
	*($2) = $9
	CALL $10($6)
	
.LABEL $label$9
	$9 = *($3 + [80])
	if ( ($9 == 0) ){ goto $label$14 }
	$2 = ($3 + [84])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	CALL $10($8)
	
.LABEL $label$18
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$17 }
	$6 = *(($3 + [80]))
	goto $label$15 
	
.LABEL $label$16
	$6 = $9
	
.LABEL $label$15
	*($2) = $9
	CALL $10($6)
	
.LABEL $label$14
	$global$0 = ($3 + [96])
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [136])) = [0]
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $7)
	$3 = $2
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10964])
	$3 = *($4 + [108])
	
.LABEL $label$4
	CALL memcpy(($4 + [120]), $3, [8])
	*($4 + [108]) = ($3 + [8])
	CALL $95(($4 + [104]), (($4 + [120]) + [8]))
	*(($3 = (($4 + [8]) + [8]))) = *((($4 + [104]) + [8]))
	*($4 + [8]) = *($4 + [104])
	$3 = *($3)
	*((($4 + [144]) + [8])) = $3
	*(($8 = (($4 + [160]) + [8]))) = $3
	$9 = *($4 + [8])
	*($4 + [160]) = $9
	*($4 + [144]) = $9
	$3 = *($8)
	*((($4 + [176]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$9 = *($4 + [160])
	*($4 + [40]) = $9
	*($4 + [176]) = $9
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	$3 = [0]
	*(($4 + [88])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $1
	*($4 + [160]) = (int_64)0
	*($4 + [168]) = [0]
	$8 = (*(($4 + [132])) - *($4 + [128]))
	$10 = ((int_32)$8 / (int_32)[104])
	$0 = *($4 + [120])
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$10 >= (uint_32)[41297763]) ){ goto $label$6 }
	$3 = CALL $8($8)
	*((($4 + [160]) + [8])) = ($3 + ((int_32)$10 * (int_32)[104]))
	*($4 + [160]) = $3
	*($4 + [164]) = $3
	$10 = *((($4 + [120]) + [8]))
	$8 = (*(($4 + [132])) - $10)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($3, $10, $8)
	$3 = (*($4 + [164]) + ((int_32)((uint_32)$8 / (uint_32)[104]) * (int_32)[104]))
	*($4 + [164]) = $3
	
.LABEL $label$7
	$8 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$8 }
	$6 = *((*($8) + $6))
	
.LABEL $label$8
	*($4 + [184]) = [0]
	*($4 + [176]) = (int_64)0
	$3 = ($3 - *($4 + [160]))
	$5 = ((int_32)$3 / (int_32)[104])
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((uint_32)$5 >= (uint_32)[41297763]) ){ goto $label$5 }
	$3 = CALL $8($3)
	*(($4 + [184])) = ($3 + ((int_32)$5 * (int_32)[104]))
	*($4 + [176]) = $3
	*($4 + [180]) = $3
	$10 = *($4 + [160])
	$5 = (*($4 + [164]) - $10)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($3, $10, $5)
	*($4 + [180]) = ($3 + ((int_32)((uint_32)$5 / (uint_32)[104]) * (int_32)[104]))
	
.LABEL $label$9
	CALL void $8((int_32 $0), (int_64 ($4 + [176])), (int_32 $6))
	$3 = *($4 + [176])
	if ( ($3 == 0) ){ goto $label$10 }
	*($4 + [180]) = $3
	CALL $10($3)
	
.LABEL $label$10
	$3 = *($4 + [160])
	if ( ($3 == 0) ){ goto $label$11 }
	*($4 + [164]) = $3
	CALL $10($3)
	
.LABEL $label$11
	if ( ($7 <= [513]) ){ goto $label$12 }
	CALL $3($2)
	
.LABEL $label$12
	$3 = *(($4 + [80]))
	if ( ($3 == 0) ){ goto $label$13 }
	$5 = ($4 + [84])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	CALL $10($7)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [80]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LABEL $label$14
	*($5) = $3
	CALL $10($2)
	
.LABEL $label$13
	$2 = *(($4 + [128]))
	if ( ($2 == 0) ){ goto $label$18 }
	*(($4 + [132])) = $2
	CALL $10($2)
	
.LABEL $label$18
	$global$0 = ($4 + [192])
	return [1]
	
.LABEL $label$6
	CALL $29(($4 + [160]))
	
.LABEL $label$5
	CALL $29(($4 + [176]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $63 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [120]) + [24])) = [0]
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $5)
	*($4 + [192]) = ($4 + [104])
	*($4 + [24]) = ($4 + [120])
	CALL $85(($4 + [24]), ($4 + [192]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [112])
	*($4 + [8]) = *($4 + [104])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$7 = *($4 + [176])
	*($4 + [40]) = $7
	*($4 + [192]) = $7
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($3 = ($4 + [80]))) = (int_64)0
	*(($4 + [88])) = [0]
	*($4 + [56]) = $0
	*($4 + [96]) = $1
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [24])
	CALL $86(($4 + [192]), ($4 + [120]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $3($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL $10($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL $10($2)
	
.LABEL $label$5
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*(($4 + [144])))
	
.LABEL $label$10
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = [0]
	$5 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	$6 = $5)
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$6 = $7
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$7 }
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [9167])
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( (*($2 + [4]) <= [257]) ){ goto $label$1 }
	CALL eosio_assert([0], [9583])
	
.LABEL $label$1
	$2 = [0]
	*(($3 + [72])) = [0]
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	$6 = *($0)
	*($3 + [40]) = $6
	*($3 + [48]) = $5
	$4 = CALL db_find_i64($6, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	$2 = CALL $72(($3 + [40]), $4)
	if ( ((int_32)*($2 + [40]) == (int_32)($3 + [40])) ){ goto $label$8 }
	CALL eosio_assert([0], [9440])
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [10552])
	
.LABEL $label$8
	CALL require_auth(*($2 + [32]))
	$5 = *($1)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$6 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$6 = $7
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$6 = $7
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$14 }
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [9672])
	$5 = *($1)
	
.LABEL $label$10
	if ( ((int_64)$5 > (int_64)0) ){ goto $label$15 }
	CALL eosio_assert([0], [10585])
	
.LABEL $label$15
	$4 = ($1 + [8])
	if ( ((int_64)*($4) == (int_64)*($2 + [8])) ){ goto $label$16 }
	CALL eosio_assert([0], [9718])
	
.LABEL $label$16
	*($3 + [32]) = $1
	CALL $87(($3 + [40]), $2, (int_64)0, ($3 + [32]))
	$6 = *(($2 + [32]))
	*(($8 = (($3 + [16]) + [8]))) = *($4)
	$7 = *($1)
	*(($3 + [8])) = *($8)
	*($3 + [16]) = $7
	*($3) = *($3 + [16])
	CALL $79($0, $6, $3)
	$9 = *($3 + [64])
	if ( ($9 == 0) ){ goto $label$17 }
	$1 = ($3 + [68])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$21 }
	CALL $10($8)
	
.LABEL $label$21
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($3 + [64]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $9
	
.LABEL $label$18
	*($1) = $9
	CALL $10($4)
	
.LABEL $label$17
	$global$0 = ($3 + [80])
}

void .FUNC $101 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	*($3 + [128]) = (int_64)0
	*($3 + [120]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$6
	$4 = ($2 + $4)
	CALL memcpy(($3 + [120]), $5, [8])
	*($3 + [40]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $5, [8])
	*(($5 = (($3 + [120]) + [8]))) = *($3 + [40])
	*((($3 + [40]) + [24])) = $4
	*(($3 + [80])) = $0
	*(($3 + [88])) = (int_64)-1
	*(($4 = ($3 + [96]))) = (int_64)0
	*(($3 + [104])) = [0]
	$7 = *($5)
	*((($3 + [24]) + [8])) = $7
	*((($3 + [8]) + [8])) = $7
	*($3 + [56]) = $2
	*(($3 + [60])) = ($2 + [24])
	*($3 + [48]) = $1
	*($3 + [40]) = $0
	*($3 + [72]) = $0
	*($3 + [112]) = $1
	$0 = *($3 + [120])
	*($3 + [24]) = $0
	*($3 + [8]) = $0
	CALL $55(($3 + [40]), *($3 + [136]), ($3 + [8]))
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = ($3 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $10($4)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($3 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$8
	$global$0 = ($3 + [144])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [8])
	$4 = ( $4 ? [19] : ((uint_32)$4 > (uint_32)[19]) )
	$2 = ($2 - (($4 + [26]) & [496]))
	$global$0 = $2
	$4 = (($2 + $4) + [11])
	$1 = CALL $136($1, $2, $4, [0])
	if ( ((uint_32)$1 <= (uint_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [10935])
	
.LABEL $label$1
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = ($1 - $2)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$5 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$4
	$0 = $5
	
.LOOP $label$6:
	*($0) = *($2)
	$0 = ($0 + [1])
	$2 = ($2 + [1])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$6 }
	*(($5 + $4)) = [0]
	$global$0 = $3
	return (unreachable)
	
.LABEL $label$3
	CALL $19($0)
	
.LABEL $label$2
	*($5) = [0]
	$global$0 = $3
}

void .FUNC $103 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [144])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	*($3 + [128]) = (int_64)0
	*($3 + [120]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$6
	$4 = ($2 + $4)
	CALL memcpy(($3 + [120]), $5, [8])
	*($3 + [40]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $5, [8])
	*(($5 = (($3 + [120]) + [8]))) = *($3 + [40])
	*((($3 + [40]) + [24])) = $4
	*(($3 + [80])) = $0
	*(($3 + [88])) = (int_64)-1
	*(($4 = ($3 + [96]))) = (int_64)0
	*(($3 + [104])) = [0]
	$7 = *($5)
	*((($3 + [24]) + [8])) = $7
	*((($3 + [8]) + [8])) = $7
	*($3 + [56]) = $2
	*(($3 + [60])) = ($2 + [24])
	*($3 + [48]) = $1
	*($3 + [40]) = $0
	*($3 + [72]) = $0
	*($3 + [112]) = $1
	$0 = *($3 + [120])
	*($3 + [24]) = $0
	*($3 + [8]) = $0
	CALL $61(($3 + [40]), *($3 + [136]), ($3 + [8]))
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = ($3 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $10($4)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($3 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$8
	$global$0 = ($3 + [144])
}

void .FUNC $102 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [120]) = (int_64)0
	*($3 + [112]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [112]), $2, [8])
	*($3 + [32]) = (int_64)0
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$6
	CALL memcpy(($3 + [32]), $6, [8])
	*(($4 = (($3 + [112]) + [8]))) = *($3 + [32])
	*(($3 + [56])) = $5
	*(($3 + [72])) = $0
	*(($3 + [80])) = (int_64)-1
	*(($5 = ($3 + [88]))) = (int_64)0
	*(($3 + [96])) = [0]
	$7 = *($4)
	*((($3 + [16]) + [8])) = $7
	*(($3 + [8])) = $7
	*($3 + [48]) = $2
	*(($3 + [52])) = ($2 + [16])
	*($3 + [40]) = $1
	*($3 + [32]) = $0
	*($3 + [64]) = $0
	*($3 + [104]) = $1
	$0 = *($3 + [112])
	*($3 + [16]) = $0
	*($3) = $0
	CALL $53(($3 + [32]), $3)
	$5 = *($5)
	if ( ($5 == 0) ){ goto $label$7 }
	$6 = ($3 + [92])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $10($4)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($3 + [88]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $5
	
.LABEL $label$8
	*($6) = $5
	CALL $10($2)
	
.LABEL $label$7
	$global$0 = ($3 + [128])
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $106($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $22($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $22($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $19($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $104 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [256])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [196]) = $2
	*($3 + [192]) = $2
	$5 = ($2 + $4)
	*($3 + [200]) = $5
	*($3 + [184]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [10964])
	$5 = *(($3 + [200]))
	$2 = *($3 + [196])
	
.LABEL $label$5
	CALL memcpy(($3 + [184]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [196]) = $2
	*($3 + [176]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [10964])
	$5 = *((($3 + [192]) + [8]))
	$2 = *($3 + [196])
	
.LABEL $label$6
	CALL memcpy(($3 + [176]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [196]) = $2
	*($3 + [168]) = (int_64)0
	*($3 + [160]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10964])
	$5 = *(($3 + [200]))
	$2 = *($3 + [196])
	
.LABEL $label$7
	CALL memcpy(($3 + [160]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [196]) = $2
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [10964])
	$2 = *($3 + [196])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $2, [8])
	*(($4 = (($3 + [160]) + [8]))) = *($3 + [64])
	*($3 + [196]) = ($2 + [8])
	*($3 + [152]) = [0]
	*($3 + [144]) = (int_64)0
	CALL $105(($3 + [192]), ($3 + [144]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [192]) + [8]))
	*($3 + [48]) = *($3 + [192])
	$2 = *($2)
	*((($3 + [224]) + [8])) = $2
	*(($5 = (($3 + [208]) + [8]))) = $2
	$6 = *($3 + [48])
	*($3 + [208]) = $6
	*($3 + [224]) = $6
	$2 = *($5)
	*((($3 + [240]) + [8])) = $2
	*(($3 + [88])) = $2
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$6 = *($3 + [208])
	*($3 + [80]) = $6
	*($3 + [240]) = $6
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = (int_64)0
	*(($3 + [128])) = [0]
	*($3 + [96]) = $0
	*($3 + [136]) = $1
	*(($7 = (($3 + [32]) + [8]))) = *($4)
	*($3 + [32]) = *($3 + [160])
	$1 = *($3 + [176])
	$0 = *($3 + [184])
	$2 = CALL $20(($3 + [16]), ($3 + [144]))
	*($5) = *($7)
	*($3 + [208]) = *($3 + [32])
	if ( CALL $39($0) ){ goto $label$9 }
	CALL eosio_assert([0], [9565])
	
.LABEL $label$9
	CALL require_auth($0)
	*(($4 = (($3 + [240]) + [8]))) = *((($3 + [208]) + [8]))
	*($3 + [240]) = *($3 + [208])
	$5 = CALL $20(($3 + [224]), $2)
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [240])
	CALL $76(($3 + [64]), $1, $3, $5)
	if ( (*($3 + [224]) & [1]) ){ goto $label$16 }
	if ( (*($2) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $10(*($5 + [8]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $10(*($2 + [8]))
	$4 = *(($3 + [120]))
	if ( ($4 == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$4 = *(($3 + [120]))
	if ( $4 ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$7 = ($3 + [124])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$20 }
	CALL $10($5)
	
.LABEL $label$20
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$19 }
	$2 = *(($3 + [120]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $4
	
.LABEL $label$17
	*($7) = $4
	CALL $10($2)
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $10(*(($3 + [152])))
	
.LABEL $label$10
	$global$0 = ($3 + [256])
}

int_32 .FUNC $89 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	if ( ((int_32)*($6 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9440])
	return $6
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $82($0, $5)
	if ( ((int_32)*($6 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9440])
	return $6
	
.LABEL $label$5
	CALL eosio_assert([0], $2)
	
.LABEL $label$1
	return $6
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9778])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9824])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))) ){ goto $label$3 }
	CALL eosio_assert([0], [9187])
	
.LABEL $label$3
	$7 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $7
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [9230])
	$7 = *(($1 + [16]))
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [9249])
	
.LABEL $label$5
	if ( ((int_64)$6 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [9875])
	
.LABEL $label$6
	$3 = $4
	$4 = ($3 + [-48])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-8])
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [16])
	*($5 + [40]) = ($1 + [32])
	CALL $118(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9778])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9824])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9267])
	
.LABEL $label$3
	$7 = (int_64)
	*($1) = $7(*($1) - *($3)))
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [9315])
	$7 = *($1)
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [9337])
	
.LABEL $label$5
	if ( ((int_64)$6 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [9875])
	
.LABEL $label$6
	$3 = $4
	$4 = ($3 + [-48])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-8])
	*($5 + [24]) = ($5 + [8])
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [16])
	*($5 + [40]) = ($1 + [32])
	CALL $118(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [8]))
	*($2 + [32]) = *($1)
	$1 = CALL $20(($2 + [16]), ($1 + [16]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($5 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$4 = CALL $20(($2 + [64]), $1)
	*(($2 + [8])) = *($5)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $2), (int_32 $4), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10964])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $105(*($1), (*($0) + [16]))
	$global$0 = ($2 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10404])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10449])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1 + [8])
	if ( (uint_64)(((int_64)*(*(($4 + [-24])) + [8]) ^ (int_64)$6) <= (int_64)256) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((uint_64)((int_64)*(*($9) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [10499])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $10($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9514])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL $8([32])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = $1
	CALL $128(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $125(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $10($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9491])
	
.LABEL $label$5
	$2 = CALL $2($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL $8([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [10964])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $125(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $3($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $10($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $5, [8])
	*($0 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($0 + [16])
	$1 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10964])
	$1 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $1, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $80 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5 = *($0)
	*($4 + [24]) = $5
	$6 = *($2 + [8])
	*($4 + [32]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $82(($4 + [24]), $0)
	if ( ((int_32)*($0 + [16]) == (int_32)($4 + [24])) ){ goto $label$4 }
	CALL eosio_assert([0], [9440])
	
.LABEL $label$4
	*($4 + [8]) = $2
	CALL $123(($4 + [24]), $0, (int_64)0, ($4 + [8]))
	$7 = *($4 + [48])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [16]) = $2
	CALL $124(($4 + [8]), ($4 + [24]), $3, ($4 + [16]))
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [52])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL $10($0)
	
.LABEL $label$8
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$2 = *(($4 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($8) = $7
	CALL $10($2)
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $29($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $140 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $29($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9491])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $120(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $7)
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $119(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [9514])
	
.LABEL $label$1
	*(($5 = CALL $8([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $1
	$6 = *($3)
	*($5 + [8]) = *($6 + [8])
	*($5 + [24]) = *($6 + [8])
	*($5 + [16]) = *($6)
	*($5 + [32]) = *(*($3 + [4]))
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [16])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [32])
	CALL $118(($4 + [64]), ($4 + [56]))
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4157508551318700032, $2, $7), $4, [40]
	*($5 + [44]) = $6)
	if ( (uint_64)($7 <= *($1 + [16])) ){ goto $label$2 }
	*(($1 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$2
	*($4 + [64]) = $5
	$7 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($4) = $7)
	*($4 + [40]) = $6
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$4 }
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $119(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$3
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $10($5)
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

void .FUNC $70 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	$5 = ($global$0 - [336])
	$global$0 = $5
	CALL require_auth($1)
	*(($6 = (($5 + [272]) + [8]))) = *(($3 + [8]))
	*($5 + [272]) = *($3)
	$7 = *($0)
	$8 = CALL $20(($5 + [256]), $4)
	*((($5 + [40]) + [8])) = *($6)
	*($5 + [40]) = *($5 + [272])
	$6 = CALL $40($7, $1, $2, ($5 + [40]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($8 + [8]))
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$2 }
	$2 = *($3 + [8])
	CALL $35(($5 + [152]), *($0 + [72]), $2)
	if ( ((int_64)$2 != (int_64)*(($5 + [200]))) ){ goto $label$11 }
	if ( ((int_64)*($3) < (int_64)*($5 + [192])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert([0], [10709])
	if ( ((int_64)*($3) >= (int_64)*($5 + [192])) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert([0], [10868])
	$8 = [1]
	$6 = *($4)
	if ( (($6 & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$8 = [1]
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	$9 = ($4 + $8)
	$8 = uint_32($6 >> $8)
	if ( ((uint_32)$8 >= (uint_32)[8]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = *($4 + [8])
	$8 = *($4 + [4])
	if ( ($8 <= [8]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [9069])
	goto $label$4 
	
.LABEL $label$5
	if ( $8 ){ goto $label$4 }
	$2 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$2 = (int_64)0
	
.LOOP $label$12:
	$10 = (($9 + $8) + [-1])
	$6 = *($10)
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [9114])
	$6 = *($10)
	
.LABEL $label$13
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$12 }
	$2 = ((int_64)$2 & (int_64)72057594037927935)
	
.LABEL $label$3
	$11 = ($0 + [32])
	$6 = *(($0 + [60]))
	$10 = *(($0 + [56]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$17:
	$8 = ($6 + [-24])
	$9 = *($8)
	if ( ((int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$16 }
	$6 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)*($9 + [104]) == (int_32)$11) ){ goto $label$14 }
	CALL eosio_assert([0], [9440])
	goto $label$14 
	
.LABEL $label$15
	$9 = [0]
	$8 = CALL db_find_i64(*($11), *(($0 + [40])), (int_64)-3665743585900232704, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$18 }
	$9 = CALL $98($11, $8)
	if ( ((int_32)*($9 + [104]) == (int_32)$11) ){ goto $label$14 }
	CALL eosio_assert([0], [9440])
	goto $label$14 
	
.LABEL $label$18
	CALL eosio_assert([0], [8480])
	
.LABEL $label$14
	*(($8 = (($5 + [120]) + [8]))) = *(($3 + [8]))
	*($5 + [120]) = *($3)
	*(($6 = (($5 + [288]) + [8]))) = *($8)
	*($5 + [288]) = *($5 + [120])
	$7 = *($6)
	*((($5 + [304]) + [8])) = $7
	*((($5 + [24]) + [8])) = $7
	$7 = *($5 + [288])
	*($5 + [24]) = $7
	*($5 + [304]) = $7
	CALL $99(($5 + [320]), $0, ($5 + [24]))
	$6 = *(($0 + [60]))
	$12 = *(($0 + [56]))
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$20 }
	
.LOOP $label$22:
	$8 = ($6 + [-24])
	$10 = *($8)
	if ( ((int_64)(uint_64)*($10 + [8]) >> (uint_64)(int_64)8) == (int_64)$2) ){ goto $label$21 }
	$6 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$20 }
	if ( ((int_32)*($10 + [104]) == (int_32)$11) ){ goto $label$19 }
	CALL eosio_assert([0], [9440])
	goto $label$19 
	
.LABEL $label$20
	$10 = [0]
	$8 = CALL db_find_i64(*(($0 + [32])), *(($0 + [40])), (int_64)-3665743585900232704, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$23 }
	$10 = CALL $98($11, $8)
	if ( ((int_32)*($10 + [104]) == (int_32)$11) ){ goto $label$19 }
	CALL eosio_assert([0], [9440])
	goto $label$19 
	
.LABEL $label$23
	CALL eosio_assert([0], [8480])
	
.LABEL $label$19
	*((($5 + [136]) + [8])) = *(($10 + [8]))
	*($5 + [136]) = *($10)
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 *($5 + [320])) / (float_64)(CASTING float_64)(int_64 *($10 + [24]))) * (float_64)(CASTING float_64)(int_64 *($10)))
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$25 }
	$2 = (int_64)-9223372036854775808
	goto $label$24 
	
.LABEL $label$25
	$2 = (Rounds 0)($13)
	
.LABEL $label$24
	*($5 + [136]) = $2
	$8 = CALL $1([8884])
	if ( ($8 <= [8]) ){ goto $label$29 }
	CALL eosio_assert([0], [9069])
	goto $label$28 
	
.LABEL $label$29
	if ( ($8 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$2 = (int_64)0
	
.LOOP $label$30:
	$6 = *(($8 + [8883]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$31 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$31
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$30 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$26 
	
.LABEL $label$27
	$2 = (int_64)0
	
.LABEL $label$26
	if ( ((int_64)*(($3 + [8])) != (int_64)((int_64)$2 | (int_64)4)) ){ goto $label$33 }
	CALL eosio_assert([0], [10885])
	goto $label$32 
	
.LABEL $label$33
	$8 = CALL $1([8884])
	if ( ($8 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [9069])
	goto $label$36 
	
.LABEL $label$37
	if ( ($8 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$2 = (int_64)0
	
.LOOP $label$38:
	$6 = *(($8 + [8883]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$39
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$38 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$34 
	
.LABEL $label$35
	$2 = (int_64)0
	
.LABEL $label$34
	if ( ((int_64)*($5 + [144]) != (int_64)((int_64)$2 | (int_64)4)) ){ goto $label$32 }
	CALL eosio_assert([0], [10885])
	
.LABEL $label$32
	$8 = CALL $1([8889])
	if ( ($8 <= [8]) ){ goto $label$43 }
	CALL eosio_assert([0], [9069])
	goto $label$42 
	
.LABEL $label$43
	if ( ($8 == 0) ){ goto $label$41 }
	
.LABEL $label$42
	$2 = (int_64)0
	
.LOOP $label$44:
	$6 = *(($8 + [8888]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$45 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$45
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$44 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$40 
	
.LABEL $label$41
	$2 = (int_64)0
	
.LABEL $label$40
	if ( ((int_64)*(($3 + [8])) != (int_64)((int_64)$2 | (int_64)4)) ){ goto $label$47 }
	CALL eosio_assert([0], [10885])
	goto $label$46 
	
.LABEL $label$47
	$8 = CALL $1([8889])
	if ( ($8 <= [8]) ){ goto $label$51 }
	CALL eosio_assert([0], [9069])
	goto $label$50 
	
.LABEL $label$51
	if ( ($8 == 0) ){ goto $label$49 }
	
.LABEL $label$50
	$2 = (int_64)0
	
.LOOP $label$52:
	$6 = *(($8 + [8888]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$53 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$53
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$52 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$48 
	
.LABEL $label$49
	$2 = (int_64)0
	
.LABEL $label$48
	if ( ((int_64)*($5 + [144]) != (int_64)((int_64)$2 | (int_64)4)) ){ goto $label$46 }
	CALL eosio_assert([0], [10885])
	
.LABEL $label$46
	$8 = CALL $1([10904])
	if ( ($8 <= [8]) ){ goto $label$57 }
	CALL eosio_assert([0], [9069])
	goto $label$56 
	
.LABEL $label$57
	if ( ($8 == 0) ){ goto $label$55 }
	
.LABEL $label$56
	$2 = (int_64)0
	
.LOOP $label$58:
	$6 = *(($8 + [10903]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$59 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$59
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$58 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$54 
	
.LABEL $label$55
	$2 = (int_64)0
	
.LABEL $label$54
	if ( ((int_64)*(($3 + [8])) != (int_64)((int_64)$2 | (int_64)4)) ){ goto $label$61 }
	CALL eosio_assert([0], [10885])
	goto $label$60 
	
.LABEL $label$61
	$8 = CALL $1([10904])
	if ( ($8 <= [8]) ){ goto $label$65 }
	CALL eosio_assert([0], [9069])
	goto $label$64 
	
.LABEL $label$65
	if ( ($8 == 0) ){ goto $label$63 }
	
.LABEL $label$64
	$2 = (int_64)0
	
.LOOP $label$66:
	$6 = *(($8 + [10903]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$67 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$67
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$66 }
	$2 = ((int_64)$2 << (int_64)8)
	goto $label$62 
	
.LABEL $label$63
	$2 = (int_64)0
	
.LABEL $label$62
	if ( ((int_64)*($5 + [144]) != (int_64)((int_64)$2 | (int_64)4)) ){ goto $label$60 }
	CALL eosio_assert([0], [10885])
	
.LABEL $label$60
	$8 = CALL $1([10909])
	if ( ($8 <= [8]) ){ goto $label$71 }
	CALL eosio_assert([0], [9069])
	goto $label$70 
	
.LABEL $label$71
	if ( ($8 == 0) ){ goto $label$69 }
	
.LABEL $label$70
	$2 = (int_64)0
	
.LOOP $label$72:
	$6 = *(($8 + [10908]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$73 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$73
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$72 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)8)
	goto $label$68 
	
.LABEL $label$69
	$2 = (int_64)8
	
.LABEL $label$68
	if ( ((int_64)*(($3 + [8])) != (int_64)$2) ){ goto $label$75 }
	CALL eosio_assert([0], [10885])
	goto $label$74 
	
.LABEL $label$75
	$8 = CALL $1([10909])
	if ( ($8 <= [8]) ){ goto $label$79 }
	CALL eosio_assert([0], [9069])
	goto $label$78 
	
.LABEL $label$79
	if ( ($8 == 0) ){ goto $label$77 }
	
.LABEL $label$78
	$2 = (int_64)0
	
.LOOP $label$80:
	$6 = *(($8 + [10908]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$81 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$81
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$80 }
	if ( ((int_64)*($5 + [144]) != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)8)) ){ goto $label$74 }
	goto $label$76 
	
.LABEL $label$77
	if ( ((int_64)*($5 + [144]) != (int_64)8) ){ goto $label$74 }
	
.LABEL $label$76
	CALL eosio_assert([0], [10885])
	
.LABEL $label$74
	$13 = ((float_64)(CASTING float_64)(int_64 *($5 + [136])) * (float_64)(float_64)0.98)
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$83 }
	$2 = (int_64)-9223372036854775808
	goto $label$82 
	
.LABEL $label$83
	$2 = (Rounds 0)($13)
	
.LABEL $label$82
	*($5 + [136]) = $2
	CALL $23($4, [10914])
	CALL $100(($5 + [104]), $3)
	$8 = CALL $27(($5 + [104]), [0], [10915])
	$6 = ($8 + [8])
	*((($5 + [288]) + [8])) = *($6)
	*($5 + [288]) = *($8)
	*($8) = (int_64)0
	*($6) = [0]
	$8 = CALL $24(($5 + [288]), [10930])
	$6 = ($8 + [8])
	*((($5 + [304]) + [8])) = *($6)
	*($5 + [304]) = *($8)
	*($8) = (int_64)0
	*($6) = [0]
	CALL $100(($5 + [88]), ($5 + [136]))
	$8 = *($5 + [88])
	$10 = ($8 & [1])
	$8 = CALL $25(($5 + [304]), ( *($5 + [96]) ? (($5 + [88]) | [1]) : $10 ), ( *($5 + [92]) ? uint_32($8 >> [1]) : $10 ))
	$10 = ($8 + [8])
	*(($6 = (($5 + [320]) + [8]))) = *($10)
	*($5 + [320]) = *($8)
	*($8) = (int_64)0
	*($10) = [0]
	$8 = *($5 + [320])
	$10 = ($8 & [1])
	CALL $25($4, ( *($6) ? (($5 + [320]) | [1]) : $10 ), ( *($5 + [324]) ? uint_32($8 >> [1]) : $10 ))
	if ( (*($5 + [320]) & [1]) ){ goto $label$92 }
	if ( (*($5 + [88]) & [1]) ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	CALL $10(*($6))
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$90 }
	
.LABEL $label$91
	CALL $10(*(($5 + [96])))
	$8 = [1]
	if ( ((*($5 + [304]) & [1]) == 0) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$90
	$8 = [1]
	if ( (*($5 + [304]) & [1]) ){ goto $label$88 }
	
.LABEL $label$89
	if ( (*($5 + [288]) & $8) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$88
	CALL $10(*($5 + [312]))
	if ( ((*($5 + [288]) & $8) == 0) ){ goto $label$86 }
	
.LABEL $label$87
	CALL $10(*($5 + [296]))
	$10 = [1]
	if ( (*($5 + [104]) & [1]) ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$86
	$10 = [1]
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$84 }
	
.LABEL $label$85
	CALL $10(*($5 + [112]))
	
.LABEL $label$84
	*(($6 = (($5 + [72]) + [8]))) = *((($5 + [136]) + [8]))
	*($5 + [72]) = *($5 + [136])
	$2 = *($0)
	$7 = *($9 + [16])
	$8 = CALL $20(($5 + [56]), $4)
	*((($5 + [8]) + [8])) = *($6)
	*($5 + [8]) = *($5 + [72])
	CALL $45($7, $2, $1, ($5 + [8]), $8)
	if ( ((*($8) & $10) == 0) ){ goto $label$2 }
	CALL $10(*($8 + [8]))
	
.LABEL $label$2
	$global$0 = ($5 + [336])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10964])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	$0 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10964])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [16])) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $76 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$7 = $8
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$7 }
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [9167])
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( (*($3 + [4]) <= [257]) ){ goto $label$1 }
	CALL eosio_assert([0], [9583])
	
.LABEL $label$1
	$11 = [0]
	*(($4 + [136])) = [0]
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	$7 = *($0)
	*($4 + [104]) = $7
	*($4 + [112]) = $6
	$5 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$11 = CALL $72(($4 + [104]), $5)
	if ( ((int_32)*($11 + [40]) == (int_32)($4 + [104])) ){ goto $label$8 }
	CALL eosio_assert([0], [9440])
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [9612])
	
.LABEL $label$8
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$7 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$7 = $8
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$7 = $8
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$14 }
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [9672])
	$6 = *($2)
	
.LABEL $label$10
	if ( ((int_64)$6 > (int_64)0) ){ goto $label$15 }
	CALL eosio_assert([0], [9689])
	
.LABEL $label$15
	if ( ((int_64)*(($2 + [8])) == (int_64)*($11 + [8])) ){ goto $label$16 }
	CALL eosio_assert([0], [9718])
	
.LABEL $label$16
	if ( ((int_64)*($2) <= (int_64))(*($11 + [16]) - *($11))) ){ goto $label$17 }
	CALL eosio_assert([0], [9744])
	
.LABEL $label$17
	*($4 + [144]) = $2
	CALL $121(($4 + [104]), $11, (int_64)0, ($4 + [144]))
	$9 = ($2 + [8])
	$6 = *($9)
	*((($4 + [88]) + [8])) = $6
	$7 = *($11 + [32])
	$8 = *($2)
	*((($4 + [8]) + [8])) = $6
	*($4 + [88]) = $8
	*($4 + [8]) = $8
	CALL $80($0, $7, ($4 + [8]), $7)
	$7 = *($11 + [32])
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$18 }
	$8 = *($0)
	*($4 + [80]) = (int_64)3617214756542218240
	*($4 + [72]) = $7
	*((($5 = CALL $8([16])) + [8])) = *($4 + [80])
	*($5) = *($4 + [72])
	$7 = *(($11 + [32]))
	*(($10 = (($4 + [24]) + [24]))) = *($9)
	*($4 + [32]) = $1
	*($4 + [24]) = $7
	*($4 + [40]) = *($2)
	CALL $20((($4 + [24]) + [32]), $3)
	*((($4 + [144]) + [24])) = *($10)
	$9 = (($4 + [24]) + [40])
	*(($10 = (($4 + [144]) + [40]))) = *($9)
	*($9) = [0]
	$9 = ($5 + [16])
	*($4 + [196]) = $9
	*($4 + [192]) = $5
	*($4 + [200]) = $9
	*($4 + [144]) = *($4 + [24])
	*($4 + [152]) = *($4 + [32])
	*($4 + [160]) = *($4 + [40])
	*($4 + [176]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $122($8, (int_64)-3617168760277827584, ($4 + [192]), ($4 + [144]))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$19 }
	CALL $10(*($10))
	
.LABEL $label$19
	$5 = *($4 + [192])
	if ( ($5 == 0) ){ goto $label$20 }
	*($4 + [196]) = $5
	CALL $10($5)
	
.LABEL $label$20
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$18 }
	CALL $10(*(($4 + [64])))
	
.LABEL $label$18
	$10 = *($4 + [128])
	if ( ($10 == 0) ){ goto $label$21 }
	$2 = ($4 + [132])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$25 }
	CALL $10($9)
	
.LABEL $label$25
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($4 + [128]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $10
	
.LABEL $label$22
	*($2) = $10
	CALL $10($5)
	
.LABEL $label$21
	$global$0 = ($4 + [208])
}

void .FUNC $77 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = CALL $1([8889])
	if ( ($4 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9069])
	goto $label$4 
	
.LABEL $label$5
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($4 + [8888]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$6 }
	if ( ((int_64)*($3 + [8]) != (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)*($3 + [8]) != (int_64)4) ){ goto $label$1 }
	
.LABEL $label$2
	if ( CALL $39($1) ){ goto $label$1 }
	if ( CALL $39($2) ){ goto $label$1 }
	if ( CALL $38($1) ){ goto $label$1 }
	if ( CALL $38($2) ){ goto $label$1 }
	CALL eosio_assert([0], [10070])
	return 
	
.LABEL $label$1
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [10964])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [10964])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [10964])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [10964])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $105(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $39 (int_64 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [320])
	$global$0 = $1
	*($1 + [304]) = [8257]
	*($1 + [308]) = CALL $1([8257])
	*($1 + [104]) = *($1 + [304])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [312]), ($1 + [104]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [288]) = [8670]
	*($1 + [292]) = CALL $1([8670])
	*($1 + [96]) = *($1 + [288])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [296]), ($1 + [96]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [272]) = [8683]
	*($1 + [276]) = CALL $1([8683])
	*($1 + [88]) = *($1 + [272])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [280]), ($1 + [88]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [256]) = [8696]
	*($1 + [260]) = CALL $1([8696])
	*($1 + [80]) = *($1 + [256])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [264]), ($1 + [80]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [240]) = [8709]
	*($1 + [244]) = CALL $1([8709])
	*($1 + [72]) = *($1 + [240])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [248]), ($1 + [72]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [224]) = [8722]
	*($1 + [228]) = CALL $1([8722])
	*($1 + [64]) = *($1 + [224])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [232]), ($1 + [64]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [208]) = [8735]
	*($1 + [212]) = CALL $1([8735])
	*($1 + [56]) = *($1 + [208])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [216]), ($1 + [56]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [192]) = [8748]
	*($1 + [196]) = CALL $1([8748])
	*($1 + [48]) = *($1 + [192])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [200]), ($1 + [48]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [176]) = [8761]
	*($1 + [180]) = CALL $1([8761])
	*($1 + [40]) = *($1 + [176])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [184]), ($1 + [40]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [160]) = [8257]
	*($1 + [164]) = CALL $1([8257])
	*($1 + [32]) = *($1 + [160])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [168]), ($1 + [32]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [144]) = [8774]
	*($1 + [148]) = CALL $1([8774])
	*($1 + [24]) = *($1 + [144])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [152]), ($1 + [24]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [128]) = [8787]
	*($1 + [132]) = CALL $1([8787])
	*($1 + [16]) = *($1 + [128])
	$2 = [1]
	if ( ((int_64)*(CALL $36(($1 + [136]), ($1 + [16]))) == (int_64)$0) ){ goto $label$1 }
	*($1 + [112]) = [8800]
	*($1 + [116]) = CALL $1([8800])
	*($1 + [8]) = *($1 + [112])
	$2 = ((int_64)*(CALL $36(($1 + [120]), ($1 + [8]))) == (int_64)$0)
	
.LABEL $label$1
	$global$0 = ($1 + [320])
	return $2
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [8912])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9017])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8950])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9017])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9491])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([120])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [104]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	*($3 + [48]) = ($5 + [56])
	*($3 + [52]) = ($5 + [72])
	*($3 + [56]) = ($5 + [88])
	*($3 + [60]) = ($5 + [96])
	CALL $137(($3 + [32]), ($3 + [24]))
	*($5 + [108]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $7)
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $138(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $78 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	if ( ((int_32)*($6 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9440])
	return $6
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $72($0, $5)
	if ( ((int_32)*($6 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9440])
	return $6
	
.LABEL $label$5
	CALL eosio_assert([0], $2)
	
.LABEL $label$1
	return $6
}

void .FUNC $79 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*(($3 + [56])) = [0]
	*($3 + [32]) = $1
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	*($3 + [24]) = *($0)
	$4 = CALL $89(($3 + [24]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [10091]
	if ( ((int_64)*($4)) >= (int_64)*($2)) ){ goto $label$1 }
	CALL eosio_assert([0], [10115])
	
.LABEL $label$1
	$0 = CALL $1([8884])
	if ( ($0 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9069])
	goto $label$4 
	
.LABEL $label$5
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = *(($0 + [8883]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9114])
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$6 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$2 
	
.LABEL $label$3
	$5 = (int_64)4
	
.LABEL $label$2
	if ( ((int_64)*(($2 + [8])) != (int_64)$5) ){ goto $label$8 }
	CALL $41(($3 + [8]), $1)
	if ( ((int_64))(*($4) - *($3 + [8])) >= (int_64)*($2)) ){ goto $label$8 }
	CALL eosio_assert([0], [10133])
	
.LABEL $label$8
	*($3 + [8]) = $2
	CALL $127(($3 + [24]), $4, $1, ($3 + [8]))
	$2 = *($3 + [48])
	if ( ($2 == 0) ){ goto $label$9 }
	$4 = ($3 + [52])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($6)
	
.LABEL $label$13
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($3 + [48]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $2
	
.LABEL $label$10
	*($4) = $2
	CALL $10($0)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
}

void .FUNC $32 (int_32 $0)
{
}

int_64 .FUNC $33 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_64 .FUNC $30 ()
{
	int_64 $0
	if ( (*([0] + [8220]) == 0) ){ goto $label$1 }
	return *([0] + [8224])
	
.LABEL $label$1
	$0 = CALL current_time()
	*([0] + [8220]) = [1]
	*([0] + [8224]) = $0
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$6 = [20]
	$7 = [8272]
	
.LOOP $label$1:
	$9 = ((uint_64)*($9) > (uint_64)$3)
	$8 = ((int_32)$6 / (int_32)[2])
	$9 = ($7 + ($8 << [3]))
	$7 = ( $7 ? ($9 + [8]) : $9 )
	$6 = ( $8 ? (($6 + [-1]) - $8) : $9 )
	if ( $6 ){ goto $label$1 }
	$6 = ($7 & [255])
	$7 = uint_32(($7 - [8272]) >> [3])
	$7 = (( $4 ? $7 : ($6 <= $4) ) & [255])
	if ( ((uint_32)$6 <= (uint_32)$4) ){ goto $label$3 }
	$6 = ($6 - $4)
	goto $label$2 
	
.LABEL $label$3
	$6 = [1]
	$7 = ($7 + [1])
	
.LABEL $label$2
	$7 = ((($5 + ((int_32)$4 != (int_32)[0])) + $7) & [65535])
	$9 = ($0 + $7)
	if ( ((uint_32)$9 > (uint_32)$1) ){ goto $label$5 }
	if ( $2 ){ goto $label$5 }
	$7 = ($7 + [-1])
	$6 = (($6 + $5) & [65535])
	if ( (int_64)($3 == 0) ){ goto $label$10 }
	if ( ((int_32)$7 <= (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$12:
	$10 = ((uint_64)$3 / (uint_64)(int_64)10)
	*(($0 + $7)) = ((CASTING uint_32)(uint_64 (int_64))($3 - ((int_64)$10 * (int_64)10))) | [48])
	$7 = ($7 + [-1])
	if ( (uint_64)($3 <= (int_64)10) ){ goto $label$11 }
	$3 = $10
	if ( ((int_32)$7 > (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$7 <= (int_32)$6) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$10 = $3
	if ( ((int_32)$7 > (int_32)$6) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	
.LOOP $label$13:
	*(($0 + $7)) = [48]
	$7 = ($7 + [-1])
	if ( ((int_32)$7 > (int_32)$6) ){ goto $label$13 }
	
.LABEL $label$7
	*(($0 + $6)) = [46]
	$7 = ($6 + [-1])
	
.LABEL $label$6
	if ( ((int_32)$7 >= (int_32)$5) ){ goto $label$14 }
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$14
	
.LOOP $label$15:
	$3 = ((uint_64)$10 / (uint_64)(int_64)10)
	*(($0 + $7)) = ((CASTING uint_32)(uint_64 (int_64))($10 - ((int_64)$3 * (int_64)10))) | [48])
	$6 = ((int_32)$7 > (int_32)$5)
	$8 = ($7 + [-1])
	$7 = $8
	$10 = $3
	if ( $6 ){ goto $label$15 }
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	return $9
	
.LABEL $label$4
	*($0) = [45]
	return $9
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($0)
	if ( ((int_64)*($2 + [8]) == (int_64)*($1 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [9267])
	
.LABEL $label$1
	$3 = (int_64)
	*($1) = $3(*($1) - *($2)))
	if ( ((int_64)$3 > (int_64)-4611686018427387904) ){ goto $label$2 }
	CALL eosio_assert([0], [9315])
	$3 = *($1)
	
.LABEL $label$2
	if ( ((int_64)$3 < (int_64)4611686018427387904) ){ goto $label$3 }
	CALL eosio_assert([0], [9337])
	
.LABEL $label$3
	$0 = *($0)
	if ( ((int_64)*($0 + [8]) == (int_64)*(($1 + [24]))) ){ goto $label$4 }
	CALL eosio_assert([0], [9267])
	
.LABEL $label$4
	$3 = (int_64)
	*($1 + [16]) = $3(*($1 + [16]) - *($0)))
	if ( ((int_64)$3 <= (int_64)-4611686018427387904) ){ goto $label$7 }
	if ( ((int_64)$3 >= (int_64)4611686018427387904) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [9315])
	if ( ((int_64)*(($1 + [16])) < (int_64)4611686018427387904) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [9337])
	return 
	
.LABEL $label$5
}

void .FUNC $127 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9778])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9824])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9267])
	
.LABEL $label$3
	$7 = (int_64)
	*($1) = $7(*($1) - *($3)))
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [9315])
	$7 = *($1)
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [9337])
	
.LABEL $label$5
	$3 = ($1 + [8])
	if ( ((int_64)$6 == (int_64)(uint_64)*($3) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [9875])
	
.LABEL $label$6
	$8 = $4
	$4 = ($8 + [-16])
	$global$0 = $4
	CALL memcpy($4, $1, [8])
	*($5 + [8]) = *($3)
	CALL memcpy(($8 + [-8]), ($5 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}