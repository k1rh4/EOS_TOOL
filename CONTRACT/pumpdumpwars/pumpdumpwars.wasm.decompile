(data (i32.const 4) "@{\00\00")
(data (i32.const 16) "eosio.stake\00")
(data (i32.const 32) "eosio.ram\00")
(data (i32.const 48) "eosio.ramfee\00")
(data (i32.const 64) "Invalid token transfer\00")
(data (i32.const 96) "Quantity must be positive\00")
(data (i32.const 128) "Invalid token\00")
(data (i32.const 144) "unable to find key\00")
(data (i32.const 176) "object passed to modify is not in multi_index\00")
(data (i32.const 224) "cannot modify objects in table of another contract\00")
(data (i32.const 288) "attempt to add asset with different symbol\00")
(data (i32.const 336) "addition underflow\00")
(data (i32.const 368) "addition overflow\00")
(data (i32.const 400) "updater cannot change primary key when modifying an object\00")
(data (i32.const 464) "write\00")
(data (i32.const 480) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 544) "error reading iterator\00")
(data (i32.const 576) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 640) "invalid symbol name\00")
(data (i32.const 672) "read\00")
(data (i32.const 688) "get\00")
(data (i32.const 704) "no balance object found\00")
(data (i32.const 736) "overdrawn balance\00")
(data (i32.const 768) "attempt to subtract asset with different symbol\00")
(data (i32.const 816) "subtraction underflow\00")
(data (i32.const 848) "subtraction overflow\00")
(data (i32.const 880) "cryptocombat\00")
(data (i32.const 896) "active\00")
(data (i32.const 912) "eosio.token\00")
(data (i32.const 928) "transfer\00")
(data (i32.const 944) "Withdrawal from https://pumpdumpwars.com\00")
(data (i32.const 992) "multiplication overflow\00")
(data (i32.const 1024) "multiplication underflow\00")
(data (i32.const 1056) "divide by zero\00")
(data (i32.const 1072) "signed division overflow\00")
(data (i32.const 1104) "cannot create objects in table of another contract\00")
(data (i32.const 1168) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1232) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1296) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1344) "Player already registered\00")
(data (i32.const 1376) "No referrer found\00")
(data (i32.const 1408) "object passed to erase is not in multi_index\00")
(data (i32.const 1456) "cannot erase objects in table of another contract\00")
(data (i32.const 1520) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1584) "cannot increment end iterator\00")
(data (i32.const 1616) "cannot pass end iterator to modify\00")
(data (i32.const 1664) "singleton does not exist\00")
(data (i32.const 1696) "Warriors sold out\00")
(data (i32.const 1728) "Equipments sold out\00")
(data (i32.const 1760) "Warrior is for sale already\00")
(data (i32.const 1792) "Can\'t sell - warrior in battle\00")
(data (i32.const 1824) "Can\'t sell - invalid token\00")
(data (i32.const 1856) "Invalid price\00")
(data (i32.const 1872) "Can\'t buy warrior is not for sale\00")
(data (i32.const 1920) "Can\'t cancel sell - warrior is not for sale\00")
(data (i32.const 1968) "Equipment is for sale already\00")
(data (i32.const 2000) "Can\'t sell attached equipment\00")
(data (i32.const 2032) "Can\'t buy equipment is not for sale\00")
(data (i32.const 2080) "Can\'t cancel sell - equipment is not for sale\00")
(data (i32.const 2128) "Unknown body part\00")
(data (i32.const 2160) "Can\'t attach - warrior using potion\00")
(data (i32.const 2208) "Can\'t attach - warrior in battle\00")
(data (i32.const 2256) "Can\'t attach - warrior is for sale\00")
(data (i32.const 2304) "Can\'t attach - equipment is for sale\00")
(data (i32.const 2352) "Can\'t attach - equipment level is to high\00")
(data (i32.const 2400) "Equipment attached\00")
(data (i32.const 2432) "Equipment incompatible with thi body part\00")
(data (i32.const 2480) "Body part isn\'t free\00")
(data (i32.const 2512) "Cant attach this equipment\00")
(data (i32.const 2544) "Equipment detached\00")
(data (i32.const 2576) "Can\'t detach - warrior in battle\00")
(data (i32.const 2624) "Can\'t detach - warrior is for sale\00")
(data (i32.const 2672) "Can\'t detach - warrior using potion\00")
(data (i32.const 2720) "Cant detach this equipment\00")
(data (i32.const 2752) "Can\'t transfer to itself\00")
(data (i32.const 2784) "Can\'t transfer - warrior in battle\00")
(data (i32.const 2832) "Can\'t transfer - warrior is for sale\00")
(data (i32.const 2880) "Receiver not found\00")
(data (i32.const 2912) "Can\'t transfer - equipment is for sale\00")
(data (i32.const 2960) "Can\'t transfer attached equipment\00")
(data (i32.const 3008) "Can\'t use points when in battle\00")
(data (i32.const 3040) "Not enough power\00")
(data (i32.const 3072) "Unknown attribute\00")
(data (i32.const 3104) "Can\'t upgrade luck > 50%\00")
(data (i32.const 3136) "Can\'t upgrade agility > 50%\00")
(data (i32.const 3168) "Warrior using potion already\00")
(data (i32.const 3200) "Can\'t use potion - life fully restored\00")
(data (i32.const 3248) "Cant use this potion\00")
(data (i32.const 3280) "Potions sold out\00")
(data (i32.const 3312) "memo has more than 12 bytes\00")
(data (i32.const 3344) "Can\'t destroy battle with warriors\00")
(data (i32.const 3392) "Warrior not joined in battle\00")
(data (i32.const 3424) "Battle started already\00")
(data (i32.const 3456) "invalid team\00")
(data (i32.const 3472) "team is full\00")
(data (i32.const 3488) "fixlevel\00")
(data (i32.const 3504) "Warrior not in battle\00")
(data (i32.const 3536) "Enemy warrior is not in this battle\00")
(data (i32.const 3584) "Warrior isn\'t alive\00")
(data (i32.const 3616) "Enemy warrior isn\'t alive\00")
(data (i32.const 3648) "Battle not started\00")
(data (i32.const 3680) "Battle finished\00")
(data (i32.const 3696) "Warrior make hit in this round\00")
(data (i32.const 3728) "Invalid players count\00")
(data (i32.const 3760) "Can\'t fight - invalid token\00")
(data (i32.const 3792) "Warrior already joined in battle\00")
(data (i32.const 3840) "Can\'t fight, warrior is for sale\00")
(data (i32.const 3888) "Health not restored\00")
(data (i32.const 3936) "bdestroy\00")
(data (i32.const 3952) "onerror\00")
(data (i32.const 3968) "eosio\00")
(data (i32.const 3984) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 12448) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 12544) "%d\00")
(data (i32.const 12560) "%lld\00")
(data (i32.const 12576) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 12592) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 12608) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 12624) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 13088) "0123456789ABCDEF")
(data (i32.const 13104) "-+   0X0x\00")
(data (i32.const 13120) "(null)\00")
(data (i32.const 13136) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 13168) "inf\00")
(data (i32.const 13184) "INF\00")
(data (i32.const 13200) "nan\00")
(data (i32.const 13216) "NAN\00")
(data (i32.const 13232) ".\00")
(data (i32.const 13248) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 13344) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$12))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "cancel_deferred" (func $fimport$14 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "current_time" (func $fimport$16 (result i64)))
(import "env" "db_end_i64" (func $fimport$17 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$20 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$21 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$23 (param i32)))
(import "env" "db_idx64_store" (func $fimport$24 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$25 (param i32 i64 i32)))
(import "env" "db_idx64_upperbound" (func $fimport$26 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$29 (param i32)))
(import "env" "db_store_i64" (func $fimport$30 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$31 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$32 (param i32 i32)))
(import "env" "has_auth" (func $fimport$33 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$35 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$36 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$37 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$38 (param i64)))
(import "env" "require_auth2" (func $fimport$39 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$40 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$41 (param i32 i32)))
(import "env" "sha256" (func $fimport$42 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$43 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$44 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z4randyy" (func $5))
(export "_ZN5eosio2bk8transferEyy" (func $6))
(export "_ZN5eosio2bk8withdrawEyNS_5assetE" (func $18))
(export "_ZN5eosio2bk16transfer_balanceERKNS0_6playerES3_NS_5assetE" (func $24))
(export "_ZN5eosio2bk11addtwarriorENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEhttttttNS_5assetEt" (func $25))
(export "_ZN5eosio2bk10addtpotionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEsssssNS_5assetEt" (func $34))
(export "_ZN5eosio2bk4initEv" (func $42))
(export "_ZN5eosio2bk9regplayerEyy" (func $44))
(export "_ZN5eosio2bk10trygiftboxENS0_6playerE" (func $61))
(export "_ZN5eosio2bk7giftboxEyy" (func $66))
(export "_ZN5eosio2bk9updatesetEyhhtt" (func $88))
(export "_ZN5eosio2bk9addtequipENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEhhsssssNS_5assetEtt" (func $89))
(export "_ZN5eosio2bk10droptablesEv" (func $98))
(export "_ZN5eosio2bk10buywarriorEyy" (func $99))
(export "_ZN5eosio2bk28create_warrior_from_twarriorEyNS0_8twarriorE" (func $102))
(export "_ZN5eosio2bk12buyequipmentEyy" (func $115))
(export "_ZN5eosio2bk33create_equipment_from_tequipmentsEyNS0_10tequipmentE" (func $118))
(export "_ZN5eosio2bk5wsellEyNS_5assetE" (func $126))
(export "_ZN5eosio2bk4wbuyEyy" (func $129))
(export "_ZN5eosio2bk11wsellcancelEy" (func $132))
(export "_ZN5eosio2bk5esellEyNS_5assetE" (func $134))
(export "_ZN5eosio2bk4ebuyEyy" (func $136))
(export "_ZN5eosio2bk11esellcancelEy" (func $137))
(export "_ZN5eosio2bk9remplayerEy" (func $138))
(export "_ZN5eosio2bk6attachEyyh" (func $139))
(export "_ZN5eosio2bk6detachEy" (func $141))
(export "_ZN5eosio2bk9wtransferEyy" (func $143))
(export "_ZN5eosio2bk9etransferEyy" (func $145))
(export "_ZN5eosio2bk10wusepointsEyht" (func $146))
(export "_ZN5eosio2bk16exit_from_battleEyb" (func $148))
(export "_ZN5eosio2bk11wchecklevelERNS0_7warriorE" (func $151))
(export "_ZN5eosio2bk10wusepotionEyy" (func $152))
(export "_ZN5eosio2bk7setnameEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE" (func $155))
(export "_ZN5eosio2bk7bcreateEyNS_5assetEh" (func $157))
(export "_ZN5eosio2bk8bdestroyEy" (func $182))
(export "_ZN5eosio2bk24remove_from_free_battlesENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy" (func $188))
(export "_ZN5eosio2bk6bleaveEy" (func $189))
(export "_ZN5eosio2bk10printregenEy" (func $193))
(export "_ZN5eosio2bk5bjoinEyyh" (func $194))
(export "_ZN5eosio2bk20apply_round_check_txEy" (func $199))
(export "_ZN5eosio2bk4bhitEyyh" (func $207))
(export "_ZN5eosio2bk5fightEyNS_5assetEh" (func $213))
(export "_ZN5eosio2bk18get_free_battle_idERKNS0_7warriorENS_5assetEh" (func $214))
(export "_ZN5eosio2bk23battle_level_acceptableEtNS0_6battleE" (func $218))
(export "_ZN5eosio2bk26battle_has_player_warriorsERKNS0_6battleEy" (func $219))
(export "_ZN5eosio2bk17add_random_attackERKNS0_6battleERKNS0_12battle_levelERKNS0_7warriorE" (func $220))
(export "_ZN5eosio2bk8fixlevelEy" (func $222))
(export "_ZN5eosio2bk13finish_battleERNS0_6battleENSt3__16vectorIhNS3_9allocatorIhEEEE" (func $230))
(export "_ZN5eosio2bk9createboxEyNSt3__16vectorIyNS1_9allocatorIyEEEEht" (func $234))
(export "_ZN5eosio2bk9unpackboxEy" (func $236))
(export "apply" (func $239))
(export "malloc" (func $269))
(export "free" (func $272))
(export "_ZNSt3__19to_stringEi" (func $282))
(export "_ZNSt3__19to_stringEx" (func $284))
(export "fmax" (func $287))
(export "fmin" (func $288))
(export "pow" (func $289))
(export "sqrt" (func $290))
(export "fabs" (func $291))
(export "scalbn" (func $292))
(export "snprintf" (func $293))
(export "vsnprintf" (func $294))
(export "__errno_location" (func $296))
(export "vfprintf" (func $297))
(export "__lockfile" (func $299))
(export "__unlockfile" (func $300))
(export "__fwritex" (func $301))
(export "strerror" (func $303))
(export "strnlen" (func $304))
(export "wctomb" (func $305))
(export "__signbitl" (func $306))
(export "__fpclassifyl" (func $307))
(export "frexpl" (func $308))
(export "wcrtomb" (func $309))
(export "memchr" (func $310))
(export "__lctrans" (func $311))
(export "__lctrans_impl" (func $312))
(export "__mo_lookup" (func $313))
(export "strcmp" (func $314))
(export "__towrite" (func $315))
(export "llabs" (func $316))
(export "memcmp" (func $317))
(export "strlen" (func $318))
(table $0 35 35 anyfunc)
(elem (i32.const 0) $319 $42 $44 $139 $126 $98 $236 $115 $152 $145 $155 $207 $143 $134 $129 $234 $34 $213 $222 $193 $25 $18 $141 $6 $189 $146 $137 $138 $182 $132 $136 $88 $99 $89 $295)



void .FUNC _ZN5eosio2bk17add_random_attackERKNS0_6battleERKNS0_12battle_levelERKNS0_7warriorE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [192])
	*([0] + [4]) = $8
	$1 = (*($1 + [56]) + ((int_32)(*($3 + [74]) == 0) * (int_32)[12]))
	$5 = *($1)
	$4 = *($1 + [4])
	*($8 + [160]) = ((int_32)((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$43()) * (int_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$16() / (uint_64)(int_64)1000000)))
	CALL sha256(($8 + [160]), [4], ($8 + [16]))
	$1 = CALL $127(($0 + [96]), *((*($1) + ((CASTING uint_32)(uint_64 ((uint_64)CALL $316(*($8 + [16])) % (uint_64)((int_64)(CASTING uint_64)(uint_32 (int_32(($4 - $5) >> [3]) + [-1])) + (int_64)1))) << [3]))), [144])
	*($8 + [16]) = *($1)
	CALL $286((($8 + [16]) + [8]), ($1 + [8]))
	CALL memcpy((($8 + [16]) + [20]), ($1 + [20]), [96])
	*(($8 + [140])) = [0]
	*($8 + [132 align=4]) = (int_64)0
	$5 = (*(($1 + [120])) - *($1 + [116]))
	$4 = int_32($5 >> [4])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = CALL $273($5)
	*((($8 + [16]) + [116])) = $5
	*(($8 + [140])) = ($5 + ($4 << [4]))
	*(($4 = (($8 + [16]) + [120]))) = $5
	$6 = *(($1 + [116]))
	$1 = (*(($1 + [120])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $6, $1)
	*($4) = (*($4) + $1)
	
.LABEL $label$2
	$1 = *($3)
	*($8 + [156]) = ((int_32)((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$43()) * (int_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$16() / (uint_64)(int_64)1000000)))
	CALL sha256(($8 + [156]), [4], ($8 + [160]))
	$7 = ((uint_64)CALL llabs(*(($1 + ($8 + [160])))) % (uint_64)(int_64)3)
	*($8 + [15]) = $7
	*($8 + [156]) = ((int_32)((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$43()) * (int_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$16() / (uint_64)(int_64)1000000)))
	CALL sha256(($8 + [156]), [4], ($8 + [160]))
	*($8 + [156]) = ((uint_64)CALL llabs(*((($8 + [160]) | (CASTING uint_32)(uint_64 $7)))) % (uint_64)(int_64)3)
	*($8 + [160]) = $3
	*($8 + [164]) = ($8 + [16])
	*($8 + [168]) = ($8 + [15])
	*($8 + [172]) = ($8 + [156])
	CALL $221(($0 + [296]), $2, ($8 + [160]))
	$1 = *($8 + [132])
	if ( ($1 == 0) ){ goto $label$3 }
	*(($8 + [136])) = $1
	CALL $274($1)
	
.LABEL $label$3
	if ( ((*(($8 + [24])) & [1]) == 0) ){ goto $label$4 }
	CALL $274(*(($8 + [32])))
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [192])
	return (unreachable)
	
.LABEL $label$1
	CALL $285(($8 + [132]))
}

void .FUNC _ZNSt3__19to_stringEx (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [12560], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $283(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $283(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $285 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [672])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [672])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [672])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $175(*($1), *($0 + [40]))
	CALL $176(*($1), *($0 + [44]))
	CALL $54(*($1), *($0 + [48]))
}

void .FUNC _ZN5eosio2bk8transferEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	CALL $7($12)
	$9 = *($0)
	$3 = *($12)
	if ( ((int_64)$3 == (int_64)$9) ){ goto $label$1 }
	if ( ((int_64)*($12 + [8]) != (int_64)$9) ){ goto $label$1 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$7 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$4 = ($4 + [165])
	goto $label$5 
	
.LABEL $label$7
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$3
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$2 }
	if ( ((int_64)$3 == (int_64)$10) ){ goto $label$1 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)8) ){ goto $label$13 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$4 = ($4 + [165])
	goto $label$11 
	
.LABEL $label$13
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	if ( ((int_64)$3 == (int_64)$10) ){ goto $label$1 }
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [48]
	$10 = (int_64)0
	
.LOOP $label$14:
	$8 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$15 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$4 = ($4 + [165])
	goto $label$16 
	
.LABEL $label$17
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$15
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$14 }
	if ( ((int_64)$3 == (int_64)$10) ){ goto $label$1 }
	$4 = [0]
	if ( ((uint_64)((int_64)*($12 + [16]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$18 }
	$9 = (uint_64)*(($12 + [24])) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$4 = [0]
	
.LABEL $label$18
	CALL eosio_assert($4, [64])
	$4 = ($12 + [16])
	CALL eosio_assert(((int_64)*($4) > (int_64)0), [96])
	$5 = ($12 + [24])
	CALL eosio_assert(((int_64)*($5) == (int_64)*($0 + [8])), [128])
	$6 = ($0 + [56])
	$7 = CALL $8($6, *($12), [144])
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)$6), [176])
	CALL eosio_assert(((int_64)*($0 + [56]) == (int_64)CALL $fimport$15()), [224])
	$9 = *($7)
	CALL eosio_assert(((int_64)*($5) == (int_64)*(($7 + [16]))), [288])
	$11 = ((int_64)*($7 + [8]) + (int_64)*($4))
	*($7 + [8]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [336])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [368])
	CALL eosio_assert(((int_64)$9 == (int_64)*($7)), [400])
	*($12 + [96]) = (($12 + [48]) + [40])
	*($12 + [92]) = ($12 + [48])
	*($12 + [88]) = ($12 + [48])
	*($12 + [104]) = ($12 + [88])
	*($12 + [116]) = ($7 + [8])
	*($12 + [112]) = $7
	*($12 + [120]) = ($7 + [24])
	*($12 + [124]) = ($7 + [32])
	CALL $9(($12 + [112]), ($12 + [104]))
	CALL db_update_i64(*($7 + [44]), (int_64)0, ($12 + [48]), [40])
	$7 = ($0 + [72])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$1 }
	*($7) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$23 }
	CALL $274(*(($12 + [40])))
	
.LABEL $label$23
	*([0] + [4]) = ($12 + [128])
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [688])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $177($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[24])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-24])
	
.LOOP $label$5:
	$5 = *(($4 + [12]))
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [16])) = $5
	CALL $274($5)
	
.LABEL $label$6
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [4])) = $5
	CALL $274($5)
	
.LABEL $label$7
	$4 = ($4 + [-24])
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL $54($0, $4)
	CALL $178($0, ($4 + [12]))
	$4 = ($4 + [24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$4 }
	$5 = *($0)
	$6 = ((int_32)($6 - $5) / (int_32)[24])
	$4 = ($6 + $1)
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$8 = ((int_32)($8 - $5) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$5 }
	$7 = ($8 << [1])
	$7 = ( $4 ? $7 : ($7 <= $4) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$8 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$4
	$7 = $6
	$8 = $1
	
.LOOP $label$6:
	*($7) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [16])) = (int_64)0
	$7 = ($7 + [24])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$6 }
	*(($0 + [4])) = ($6 + ((int_32)$1 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$2 = ($8 + ((int_32)$7 * (int_32)[24]))
	$8 = ($8 + ((int_32)$6 * (int_32)[24]))
	$7 = $8
	$6 = $1
	
.LOOP $label$7:
	*($7) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [16])) = (int_64)0
	$7 = ($7 + [24])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	$3 = ($8 + ((int_32)$1 * (int_32)[24]))
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$9 }
	$4 = ([0] - $7)
	$7 = ($6 + [-12])
	
.LOOP $label$10:
	*(($6 = ($8 + [-24]))) = (int_64)0
	*(($1 = ($8 + [-16]))) = [0]
	$5 = ($7 + [-12])
	*($6) = *($5)
	*(($8 + [-20])) = *(($7 + [-8]))
	$6 = ($7 + [-4])
	*($1) = *($6)
	*($6) = [0]
	*(($6 = ($8 + [-12]))) = (int_64)0
	*($5) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	*($6) = *($7)
	*(($8 + [-8])) = *(($7 + [4]))
	$6 = ($7 + [8])
	*($1) = *($6)
	*($6) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-24])
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $4) != (int_32)[-12]) ){ goto $label$10 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $7
	
.LABEL $label$8
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$11 }
	$6 = ([0] - $1)
	$7 = ($7 + [-24])
	
.LOOP $label$12:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$13 }
	*(($7 + [16])) = $8
	CALL $274($8)
	
.LABEL $label$13
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$14 }
	*(($7 + [4])) = $8
	CALL $274($8)
	
.LABEL $label$14
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $274($1)
	
.LABEL $label$15
}

int_32 .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [464])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$6 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $52($0, $5)
	CALL $171($0, ($5 + [12]))
	$5 = ($5 + [24])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [8]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [464])
	CALL memcpy(*($7), ($8 + [8]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$2 = ($8 + [20])
	
.LOOP $label$3:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [16])
	*($2) = ($7 + [17])
	*((($8 + [8]) + [16])) = ($7 + [18])
	*((($8 + [8]) + [20])) = ($7 + [20])
	*($8 + [12]) = ($7 + [8])
	CALL $172(($8 + [8]), $8)
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($0 + [4]), $2, [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $13($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

int_32 .FUNC $246 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [32])) = (int_64)1398362884
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [20]) = [0]
	*($5 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [640])
	*($5 + [40]) = [0]
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $259(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $260(($5 + [64]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $274(*(($5 + [8])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($2)), [688])
	$4 = *($3)
	$7 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$4 = *($1 + [4])
	$3 = ((int_32)($4 - $7) / (int_32)[24])
	$6 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$4 }
	CALL $179($1, ($6 - $3))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$5 }
	$4 = ($7 + ((int_32)$6 * (int_32)[24]))
	*(($1 + [4])) = $4
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($8 + [20])
	
.LOOP $label$6:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [16])
	*($6) = ($7 + [17])
	*((($8 + [8]) + [16])) = ($7 + [18])
	*((($8 + [8]) + [20])) = ($7 + [20])
	*($8 + [12]) = ($7 + [8])
	CALL $180(($8 + [8]), $8)
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC $276 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $277($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $221 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = *($1)
	*(($10 = $9) + [8]) = *(*($2))
	*($10 + [16]) = *(*($2 + [4]))
	*($10 + [24]) = *(*($2 + [8]))
	*($10 + [25]) = *(*($2 + [12]))
	*($10 + [26]) = [0]
	*($10 + [28]) = [0]
	$4 = ($1 + [24])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [28]))) ){ goto $label$2 }
	*($6) = *($10 + [8])
	*(($6 + [16])) = *((($10 + [8]) + [16]))
	*(($6 + [8])) = *((($10 + [8]) + [8]))
	*($4) = (*($4) + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $211(($1 + [20]), ($10 + [8]))
	
.LABEL $label$1
	$6 = *($2)
	$4 = ($1 + [12])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)*(($1 + [16]))) ){ goto $label$4 }
	*($4) = ($2 + [8])
	*($2) = *($6)
	goto $label$3 
	
.LABEL $label$4
	CALL $64(($1 + [8]), $6)
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [400])
	$5 = *($1 + [8])
	$4 = *(($1 + [12]))
	$7 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$2 = [8]
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	$6 = ($1 + [20])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	$2 = (($7 & [-8]) + $2)
	
.LABEL $label$6
	$5 = *($6)
	$4 = *(($1 + [24]))
	$7 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[24]))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$2 = ((((int_32)((uint_32)($7 + [-24]) / (uint_32)[24]) * (int_32)[22]) + $2) + [22])
	
.LABEL $label$8
	if ( ($2 <= [513]) ){ goto $label$10 }
	$9 = CALL malloc($2)
	goto $label$9 
	
.LABEL $label$10
	$9 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$9
	*($10 + [8]) = $9
	*($10 + [16]) = ($9 + $2)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [464])
	CALL memcpy($9, $1, [8])
	*($10 + [12]) = ($9 + [8])
	CALL $52(($10 + [8]), ($1 + [8]))
	CALL $171(($10 + [8]), $6)
	CALL db_update_i64(*($1 + [36]), (int_64)0, $9, $2)
	if ( ($2 <= [513]) ){ goto $label$11 }
	CALL free($9)
	
.LABEL $label$11
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($10 + [32])
}

int_64 .FUNC _Z4randyy (int_64 $0, int_64 $1)
{
	int_32 $2
	$2 = (*([0] + [4]) - [48])
	*([0] + [4]) = $2
	*($2 + [12]) = ((int_32)((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$43()) * (int_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$16() / (uint_64)(int_64)1000000)))
	CALL sha256(($2 + [12]), [4], ($2 + [16]))
	$1 = CALL llabs(*((($2 + [16]) + (CASTING uint_32)(uint_64 $1))))
	*([0] + [4]) = ($2 + [48])
	return ((uint_64)$1 % (uint_64)((int_64)$0 + (int_64)1))
}

int_32 .FUNC $127 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$0), [480])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-2184396096019628032, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $105($0, $5)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$0), [480])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC _ZN5eosio2bk6bleaveEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [96])
	*([0] + [4]) = $14
	$2 = ($0 + [96])
	$3 = CALL $127($2, $1, [144])
	CALL require_auth(*($3 + [32]))
	CALL eosio_assert(*($3 + [72]), [3392])
	$4 = ($0 + [56])
	$5 = CALL $8($4, *($3 + [32]), [704])
	$6 = ($0 + [256])
	$7 = CALL $183($6, *($3 + [73]), [144])
	CALL eosio_assert((*($7 + [44]) == 0), [3424])
	$8 = *($8 + [4])
	$8 = (*($7 + [56]) + ((int_32)*($3 + [74]) * (int_32)[12]))
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$1 }
	
.LOOP $label$2:
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$1 }
	$10 = ($10 + [8])
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$2 }
	$10 = $8
	
.LABEL $label$1
	*($14 + [8]) = $10
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$4), [176])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$15()), [224])
	$1 = *($5)
	CALL eosio_assert(((int_64)*(($7 + [32])) == (int_64)*(($5 + [16]))), [288])
	$13 = ((int_64)*($5 + [8]) + (int_64)*($7 + [24]))
	*($5 + [8]) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [336])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [368])
	CALL eosio_assert(((int_64)$1 == (int_64)*($5)), [400])
	*($14 + [64]) = (($14 + [16]) + [40])
	*($14 + [60]) = ($14 + [16])
	*($14 + [56]) = ($14 + [16])
	*($14 + [72]) = ($14 + [56])
	*($14 + [84]) = ($5 + [8])
	*($14 + [80]) = $5
	*($14 + [88]) = ($5 + [24])
	*($14 + [92]) = ($5 + [32])
	CALL $9(($14 + [80]), ($14 + [72]))
	CALL db_update_i64(*($5 + [44]), (int_64)0, ($14 + [16]), [40])
	$10 = ($0 + [72])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$3 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($14 + [16]) = $3
	*($14 + [20]) = ($14 + [8])
	CALL $190($6, $7, ($14 + [16]))
	CALL $191($2, $3)
	$10 = *(($7 + [56]))
	if ( ((int_32)*($10) != (int_32)*($10 + [4])) ){ goto $label$4 }
	if ( ((int_32)*($10 + [12]) != (int_32)*(($10 + [16]))) ){ goto $label$4 }
	$9 = *($0)
	$1 = (int_64)0
	$11 = (int_64)59
	$10 = [896]
	$12 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$10 }
	$5 = *($10)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$5 = ($5 + [165])
	goto $label$8 
	
.LABEL $label$10
	$13 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$6
	$10 = ($10 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$5 }
	$1 = *($7)
	*(($10 = CALL $273([16]))) = $9
	*($10 + [8]) = $12
	*($14 + [16]) = $10
	$10 = ($10 + [16])
	*($14 + [24]) = $10
	*($14 + [20]) = $10
	CALL $192($9, (int_64)4203420714981654528, ($14 + [16]), $1)
	$10 = *($14 + [16])
	if ( ($10 == 0) ){ goto $label$4 }
	*($14 + [20]) = $10
	CALL $274($10)
	
.LABEL $label$4
	*([0] + [4]) = ($14 + [96])
}

void .FUNC _ZN5eosio2bk24remove_from_free_battlesENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [8]) = $2
	$0 = ($0 + [336])
	$3 = CALL $184($0, (int_64)0, [144])
	*($4) = $1
	*($4 + [4]) = ($4 + [8])
	CALL $185($0, $3, $4)
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [24]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1296])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)6761208827670605824)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1232])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1232])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $48(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$3 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [544])
	if ( ($4 <= [513]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $4)
	*($8 + [36]) = $6
	*($8 + [32]) = $6
	$7 = ($6 + $4)
	*($8 + [40]) = $7
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($6)
	$7 = *(($8 + [40]))
	$6 = *($8 + [36])
	
.LABEL $label$7
	*(($3 = CALL $273([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $6) > (uint_32)[7]), [672])
	CALL memcpy($3, $6, [8])
	*($8 + [36]) = ($6 + [8])
	CALL $53(($8 + [32]), ($3 + [8]))
	*($3 + [24]) = $1
	*($8 + [24]) = $3
	$5 = *($3)
	*($8 + [16]) = $5
	$4 = *($3 + [24])
	*($8 + [12]) = $4
	$7 = ($0 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $4
	*($8 + [24]) = [0]
	*($6) = $3
	*($7) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $46(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *(($1 + [12]))
	if ( ($4 == 0) ){ goto $label$10 }
	$6 = *(($1 + [8]))
	
.LOOP $label$11:
	$7 = *(($6 + [12]))
	if ( ($7 == 0) ){ goto $label$12 }
	*(($6 + [16])) = $7
	CALL $274($7)
	
.LABEL $label$12
	$4 = ($4 + [-1])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL $274(*(($6 + [8])))
	
.LABEL $label$13
	$6 = ($6 + [24])
	if ( $4 ){ goto $label$11 }
	
.LABEL $label$10
	if ( (*(($1 + [16])) == 0) ){ goto $label$14 }
	CALL $274(*(($1 + [8])))
	
.LABEL $label$14
	CALL $274($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $3
}

void .FUNC $264 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($3 + [16]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($2 + [18]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($2 + [20]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($2 + [22]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	*($4 + [8]) = $2
	CALL $265(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $266 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL $15(*($1), *($0))
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy(($0 + [12]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [14]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [16]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	*($3 + [8]) = $0
	CALL $268(($3 + [8]), $1)
	*([0] + [4]) = ($3 + [16])
}

void .FUNC _ZN5eosio2bk9unpackboxEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [112])
	*([0] + [4]) = $12
	$2 = ($0 + [456])
	$3 = CALL $74($2, $1, [144])
	$10 = ($0 + [136])
	$7 = CALL $100($10, *($3 + [24]), [144])
	CALL require_auth(*($3 + [16]))
	CALL $237($10, $7)
	*($12 + [56]) = *($7)
	$1 = *($3 + [16])
	CALL $286((($12 + [56]) + [8]), ($7 + [8]))
	CALL memcpy((($12 + [56]) + [20]), ($7 + [20]), [36])
	CALL _ZN5eosio2bk28create_warrior_from_twarriorEyNS0_8twarriorE($0, $1, ($12 + [56]))
	if ( ((*($12 + [64]) & [1]) == 0) ){ goto $label$1 }
	CALL $274(*(($12 + [72])))
	
.LABEL $label$1
	$7 = *($3 + [32])
	if ( ((int_32)*(($3 + [36])) == (int_32)$7) ){ goto $label$2 }
	$4 = ($0 + [176])
	$6 = ($12 + [20])
	$5 = ($12 + [8])
	$10 = [0]
	$8 = ($3 + [16])
	$9 = ($3 + [32])
	$11 = [0]
	
.LOOP $label$3:
	$7 = CALL $116($4, *(($7 + $10)), [144])
	CALL $238($4, $7)
	*($12) = *($7)
	$1 = *($8)
	CALL $286($5, ($7 + [8]))
	CALL memcpy($6, ($7 + [20]), [36])
	CALL _ZN5eosio2bk33create_equipment_from_tequipmentsEyNS0_10tequipmentE($0, $1, $12)
	if ( ((*($5) & [1]) == 0) ){ goto $label$4 }
	CALL $274(*(($12 + [16])))
	
.LABEL $label$4
	$10 = ($10 + [8])
	$7 = *($9)
	$11 = ($11 + [1])
	if ( ($11 <= int_32((*(($3 + [36])) - $7) >> [3])) ){ goto $label$3 }
	
.LABEL $label$2
	CALL $76($2, $3)
	*([0] + [4]) = ($12 + [112])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [480])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $82($0, $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$0), [480])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [1616])
	CALL $83($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $84($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

void .FUNC _ZN5eosio2bk4initEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*($6 + [8]) = (int_64)1
	*($6 + [16]) = [1049610]
	*($6 + [20]) = [25]
	CALL $43(($0 + [16]), ($6 + [8]), *($0))
	$3 = *($0)
	CALL _ZN5eosio2bk9regplayerEyy($0, $3, $3)
	$3 = *($0)
	*($6) = $0
	*($6 + [40]) = $3
	CALL eosio_assert(((int_64)*($0 + [336]) == (int_64)CALL $fimport$15()), [1104])
	$2 = ($0 + [336])
	*($6 + [8]) = $2
	*($6 + [12]) = $6
	*($6 + [16]) = ($6 + [40])
	*(($5 = CALL $273([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $2
	CALL $45(($6 + [8]), $5)
	*($6 + [32]) = $5
	$3 = *($5)
	*($6 + [8]) = $3
	$1 = *($5 + [24])
	*($6 + [28]) = $1
	$4 = ($0 + [364])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [368]))) ){ goto $label$2 }
	*($2 + [8]) = $3
	*($2 + [16]) = $1
	*($6 + [32]) = [0]
	*($2) = $5
	*($4) = ($2 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $46(($0 + [360]), ($6 + [32]), ($6 + [8]), ($6 + [28]))
	
.LABEL $label$1
	$1 = *($6 + [32])
	*($6 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$5 = *(($1 + [12]))
	if ( ($5 == 0) ){ goto $label$4 }
	$0 = *(($1 + [8]))
	
.LOOP $label$5:
	$2 = *(($0 + [12]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($0 + [16])) = $2
	CALL $274($2)
	
.LABEL $label$6
	$5 = ($5 + [-1])
	if ( ((*($0) & [1]) == 0) ){ goto $label$7 }
	CALL $274(*(($0 + [8])))
	
.LABEL $label$7
	$0 = ($0 + [24])
	if ( $5 ){ goto $label$5 }
	
.LABEL $label$4
	if ( (*(($1 + [16])) == 0) ){ goto $label$8 }
	CALL $274(*(($1 + [8])))
	
.LABEL $label$8
	CALL $274($1)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $15(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($2, *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [32]) = (int_64)0
	$4 = [0]
	*(($0 + [16])) = [0]
	*(($5 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [640])
	*($0 + [52]) = $1
	*($6) = *($2 + [4])
	*($6 + [12]) = ($0 + [8])
	*($6 + [8]) = $0
	*($6 + [16]) = ($0 + [20])
	*($6 + [20]) = ($0 + [22])
	*($6 + [24]) = ($0 + [24])
	*($6 + [28]) = ($0 + [26])
	*($6 + [32]) = ($0 + [28])
	*($6 + [36]) = ($0 + [32])
	*($6 + [40]) = ($0 + [48])
	*($6 + [44]) = ($0 + [50])
	CALL $41(($6 + [8]), $6)
	*($0 + [56]) = *(*($2 + [8]))
	*([0] + [4]) = ($6 + [48])
	return $0
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$6 = ($6 + [-24])
	*($4) = $6
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = *(($2 + [12]))
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = *(($2 + [8]))
	
.LOOP $label$5:
	$3 = *(($6 + [12]))
	if ( ($3 == 0) ){ goto $label$6 }
	*(($6 + [16])) = $3
	CALL $274($3)
	
.LABEL $label$6
	$5 = ($5 + [-1])
	if ( ((*($6) & [1]) == 0) ){ goto $label$7 }
	CALL $274(*(($6 + [8])))
	
.LABEL $label$7
	$6 = ($6 + [24])
	if ( $5 ){ goto $label$5 }
	
.LABEL $label$4
	if ( (*(($2 + [16])) == 0) ){ goto $label$8 }
	CALL $274(*(($2 + [8])))
	
.LABEL $label$8
	CALL $274($2)
	
.LABEL $label$3
	$6 = *($4)
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = *($0)
	if ( ($6 == 0) ){ goto $label$9 }
	CALL $274($6)
	
.LABEL $label$9
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $273(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $47(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [32])
	$9 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$5 = *(*($0 + [4]))
	$7 = ($5 + [352])
	$6 = *($7)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$3 = ($5 + [336])
	$4 = CALL db_lowerbound_i64(*($3), *(($5 + [344])), (int_64)6761208827670605824, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $48($3, $4)
	*($9 + [4]) = [0]
	*($9) = $3
	$6 = *(*(CALL $49($9) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [352])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1168])
	*($1) = *($7)
	*($9 + [16]) = [0]
	*($9 + [24]) = ($9 + [16])
	$7 = ($1 + [8])
	*($9 + [4]) = $7
	*($9) = $1
	CALL $50($9, ($9 + [24]))
	$5 = *($9 + [16])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9) = $8
	*($9 + [8]) = ($8 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [464])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $51($9, $7)
	$6 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)6761208827670605824, *(*($0 + [8])), $6, $8, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [32])
}

void .FUNC _ZN5eosio2bk9regplayerEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [192])
	*([0] + [4]) = $9
	*($9 + [96]) = $1
	*($9 + [88]) = $2
	CALL require_auth($1)
	$4 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [56])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$3), [480])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$6 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030912129794572288, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $10($3, $6)
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$3), [480])
	
.LABEL $label$3
	CALL eosio_assert(($8 == 0), [1344])
	$4 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	$8 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$5 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$9 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$3), [480])
	if ( $8 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	$8 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030912129794572288, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $10($3, $8) + [40]) == (int_32)$3), [480])
	goto $label$7 
	
.LABEL $label$8
	*($9 + [88]) = $1
	
.LABEL $label$7
	$1 = *($0)
	*($9 + [180]) = $0
	*($9 + [176]) = ($9 + [96])
	*($9 + [184]) = ($9 + [88])
	*($9 + [152]) = $1
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$15()), [1104])
	*($9 + [112]) = $3
	*($9 + [116]) = ($9 + [176])
	*($9 + [120]) = ($9 + [152])
	*(($6 = CALL $273([56])) + [16]) = (int_64)1398362884
	*($6 + [8]) = (int_64)0
	CALL eosio_assert([1], [576])
	$1 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$7 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$7 = [0]
	
.LABEL $label$10
	CALL eosio_assert($7, [640])
	*($6 + [40]) = $3
	CALL $60(($9 + [112]), $6)
	*($9 + [168]) = $6
	$1 = *($6)
	*($9 + [112]) = $1
	$7 = *($6 + [44])
	*($9 + [108]) = $7
	$5 = ($0 + [84])
	$8 = *($5)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [88]))) ){ goto $label$16 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($9 + [168]) = [0]
	*($8) = $6
	*($5) = ($8 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $12(($0 + [80]), ($9 + [168]), ($9 + [112]), ($9 + [108]))
	
.LABEL $label$15
	$8 = *($9 + [168])
	*($9 + [168]) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	CALL $274($8)
	
.LABEL $label$17
	$1 = *($9 + [88])
	if ( ((int_64)*($9 + [96]) == (int_64)$1) ){ goto $label$18 }
	$8 = CALL $8($3, $1, [1376])
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$3), [176])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$15()), [224])
	*($8 + [32]) = ((int_64)*($8 + [32]) + (int_64)1)
	$1 = *($8)
	CALL eosio_assert([1], [400])
	*($9 + [160]) = (($9 + [112]) + [40])
	*($9 + [156]) = ($9 + [112])
	*($9 + [152]) = ($9 + [112])
	*($9 + [168]) = ($9 + [152])
	*($9 + [180]) = ($8 + [8])
	*($9 + [176]) = $8
	*($9 + [184]) = ($8 + [24])
	*($9 + [188]) = ($8 + [32])
	CALL $9(($9 + [176]), ($9 + [168]))
	CALL db_update_i64(*($8 + [44]), (int_64)0, ($9 + [112]), [40])
	$6 = ($0 + [72])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$19 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	CALL memcpy(($9 + [48]), $8, [40])
	CALL memcpy(($9 + [8]), ($9 + [48]), [40])
	CALL _ZN5eosio2bk10trygiftboxENS0_6playerE($0, ($9 + [8]))
	
.LABEL $label$18
	*([0] + [4]) = ($9 + [192])
}

void .FUNC _ZN5eosio2bk8fixlevelEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$27 = (*([0] + [4]) - [320])
	*([0] + [4]) = $27
	*($27 + [312]) = $1
	CALL require_auth(*($0))
	*($27 + [304]) = [0]
	*($27 + [296]) = (int_64)0
	*(($26 = CALL $273([2]))) = [0]
	*($27 + [280]) = $26
	$26 = ($26 + [2])
	*($27 + [288]) = $26
	*($27 + [284]) = $26
	$3 = ($0 + [256])
	$4 = CALL $183($3, $1, [144])
	$5 = ($0 + [296])
	$6 = CALL $208($5, $1, [144])
	if ( (*($4 + [8]) == 0) ){ goto $label$3 }
	$7 = ($0 + [96])
	$13 = (($27 + [16]) + [116])
	$12 = (($27 + [16]) + [20])
	$11 = (($27 + [16]) + [8])
	$10 = (($27 + [144]) + [116])
	$9 = (($27 + [144]) + [20])
	$8 = (($27 + [144]) + [8])
	$18 = ($4 + [56])
	$19 = (($27 + [144]) + [124])
	$20 = (($27 + [144]) + [54])
	$21 = (($27 + [144]) + [52])
	$22 = (($27 + [144]) + [50])
	$25 = (($27 + [144]) + [16])
	$24 = ($6 + [12])
	$14 = [0]
	
.LOOP $label$4:
	$17 = ($14 << [3])
	$26 = CALL $127($7, *((*(*($18)) + $17)), [144])
	*($27 + [144]) = *($26)
	CALL $286($8, ($26 + [8]))
	$2 = CALL memcpy($9, ($26 + [20]), [96])
	*($10) = (int_64)0
	*($19) = [0]
	$23 = ($26 + [120])
	$16 = (*($23) - *($26 + [116]))
	$15 = int_32($16 >> [4])
	if ( ($15 == 0) ){ goto $label$5 }
	if ( ((uint_32)$15 >= (uint_32)[268435456]) ){ goto $label$1 }
	$16 = CALL $273($16)
	*($10) = $16
	*($19) = ($16 + ($15 << [4]))
	*(($15 = (($27 + [144]) + [120]))) = $16
	$23 = *(($26 + [116]))
	$26 = (*($23) - $23)
	if ( ((int_32)$26 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($16, $23, $26)
	*($15) = (*($15) + $26)
	
.LABEL $label$5
	$16 = *($20)
	$15 = *($21)
	$2 = *($2)
	$23 = *($22)
	*(($26 = CALL $223(($27 + [296]), ($1 = *($27 + [144])))) + [8]) = $23
	*($26) = $1
	*($26 + [10]) = [0]
	*($26 + [12]) = $2
	*($26 + [14]) = $15
	*($26 + [16]) = $16
	*(($26 + [22])) = *((($27 + [16]) + [4]))
	*($26 + [18 align=2]) = *($27 + [16 align=2])
	if ( (*($22) == 0) ){ goto $label$7 }
	$16 = *($24)
	$26 = *(($6 + [8]))
	if ( ((int_32)$26 == (int_32)$16) ){ goto $label$9 }
	$1 = *($27 + [144])
	
.LOOP $label$10:
	if ( ((int_64)*($26) == (int_64)$1) ){ goto $label$9 }
	$26 = ($26 + [8])
	if ( ((int_32)$16 != (int_32)$26) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$26 != (int_32)$16) ){ goto $label$6 }
	
.LABEL $label$8
	CALL _ZN5eosio2bk17add_random_attackERKNS0_6battleERKNS0_12battle_levelERKNS0_7warriorE($0, $4, $6, ($27 + [144]))
	goto $label$6 
	
.LABEL $label$7
	*(($26 = *($27 + [280]))) = (*($26) + [1])
	
.LABEL $label$6
	$26 = CALL $127($7, *((*(*($18) + [12]) + $17)), [144])
	*($27 + [16]) = *($26)
	CALL $286($11, ($26 + [8]))
	$17 = CALL memcpy($12, ($26 + [20]), [96])
	*($13) = (int_64)0
	*(($2 = (($27 + [16]) + [124]))) = [0]
	$23 = ($26 + [120])
	$16 = (*($23) - *($26 + [116]))
	$15 = int_32($16 >> [4])
	if ( ($15 == 0) ){ goto $label$11 }
	if ( ((uint_32)$15 >= (uint_32)[268435456]) ){ goto $label$2 }
	$16 = CALL $273($16)
	*($13) = $16
	*($2) = ($16 + ($15 << [4]))
	*(($15 = (($27 + [16]) + [120]))) = $16
	$2 = *(($26 + [116]))
	$26 = (*($23) - $2)
	if ( ((int_32)$26 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($16, $2, $26)
	*($15) = (*($15) + $26)
	
.LABEL $label$11
	$16 = *((($27 + [16]) + [54]))
	$15 = *((($27 + [16]) + [52]))
	$17 = *($17)
	$2 = (($27 + [16]) + [50])
	$23 = *($2)
	*(($26 = CALL $223(($27 + [296]), ($1 = *($27 + [16])))) + [8]) = $23
	*($26) = $1
	*($26 + [10]) = [1]
	*($26 + [12]) = $17
	*($26 + [14]) = $15
	*($26 + [16]) = $16
	*(($26 + [22])) = *((($27 + [8]) + [4]))
	*($26 + [18 align=2]) = *($27 + [8 align=2])
	if ( (*($2) == 0) ){ goto $label$15 }
	$16 = *($24)
	$26 = *(($6 + [8]))
	if ( ((int_32)$26 == (int_32)$16) ){ goto $label$17 }
	$1 = *($27 + [16])
	
.LOOP $label$18:
	if ( ((int_64)*($26) == (int_64)$1) ){ goto $label$17 }
	$26 = ($26 + [8])
	if ( ((int_32)$16 != (int_32)$26) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$26 != (int_32)$16) ){ goto $label$14 }
	
.LABEL $label$16
	CALL _ZN5eosio2bk17add_random_attackERKNS0_6battleERKNS0_12battle_levelERKNS0_7warriorE($0, $4, $6, ($27 + [16]))
	$26 = *($13)
	if ( $26 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	*(($26 = *($27 + [280])) + [1]) = (*($26 + [1]) + [1])
	
.LABEL $label$14
	$26 = *($13)
	if ( ($26 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	*((($27 + [16]) + [120])) = $26
	CALL $274($26)
	
.LABEL $label$12
	if ( ((*($11) & [1]) == 0) ){ goto $label$19 }
	CALL $274(*((($27 + [16]) + [16])))
	
.LABEL $label$19
	$26 = *($10)
	if ( ($26 == 0) ){ goto $label$20 }
	*((($27 + [144]) + [120])) = $26
	CALL $274($26)
	
.LABEL $label$20
	if ( ((*($8) & [1]) == 0) ){ goto $label$21 }
	CALL $274(*($25))
	
.LABEL $label$21
	$14 = ($14 + [1])
	if ( ($14 <= *(($4 + [8]))) ){ goto $label$4 }
	
.LABEL $label$3
	*($27 + [4]) = [0]
	$11 = ($6 + [20])
	$10 = *($11)
	$22 = ($6 + [24])
	if ( ((int_32)*($22) == (int_32)$10) ){ goto $label$22 }
	$18 = ($0 + [96])
	$17 = ($6 + [12])
	$23 = ($0 + [120])
	$19 = ($0 + [124])
	$24 = ($0 + [104])
	$26 = [0]
	
.LOOP $label$23:
	$13 = ($10 + ((int_32)$26 * (int_32)[24]))
	$15 = ($13 + [8])
	$14 = *(($6 + [8]))
	$26 = $14
	$16 = *($17)
	if ( ((int_32)$14 == (int_32)$16) ){ goto $label$24 }
	$1 = *($15)
	$26 = $14
	
.LOOP $label$25:
	if ( ((int_64)*($26) == (int_64)$1) ){ goto $label$24 }
	$26 = ($26 + [8])
	if ( ((int_32)$16 != (int_32)$26) ){ goto $label$25 }
	$26 = $16
	
.LABEL $label$24
	$26 = int_32(($26 - $14) >> [3])
	*($27 + [16]) = (CASTING int_64)(int_32 $26)
	$7 = CALL $127($18, *($13), [144])
	$15 = CALL $223(($27 + [296]), *($15))
	$8 = *($15 + [8])
	if ( ($8 == 0) ){ goto $label$26 }
	if ( ((int_32)*($13 + [16]) == (int_32)*(($10 + ((int_32)$26 * (int_32)[24])) + [17])) ){ goto $label$26 }
	$26 = *($7 + [52])
	$1 = *($7 + [60])
	$16 = *($27 + [4])
	*($27 + [8]) = ((int_32)((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$43()) * (int_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$16() / (uint_64)(int_64)1000000)))
	CALL sha256(($27 + [8]), [4], ($27 + [144]))
	$26 = (CASTING uint_32)(float_64 CALL fmin((CASTING float_64)(uint_32 $8), CALL $287((CASTING float_64)(int_32 (((int_32)$26 * (int_32)( [2] ? [1] : ((uint_64)$1 >= (uint_64)((uint_64)CALL $316(*(($16 + ($27 + [144])))) % (uint_64)(int_64)100)) )) - *($15 + [16]))), (float_64)0)))
	*($27 + [8]) = $26
	*(($16 = ($15 + [8]))) = (*($16) - $26)
	*(($2 = (($27 + [144]) + [8]))) = ($27 + [16])
	*($27 + [148]) = ($27 + [8])
	*($27 + [144]) = ($27 + [4])
	CALL $225($5, $6, ($27 + [144]))
	if ( (*($27 + [8]) == 0) ){ goto $label$26 }
	$1 = *($15)
	$13 = *($23)
	$14 = *($19)
	if ( ((int_32)$14 == (int_32)$13) ){ goto $label$27 }
	$26 = ($14 + [-24])
	$10 = ([0] - $13)
	
.LOOP $label$28:
	if ( ((int_64)*(*($26)) == (int_64)$1) ){ goto $label$27 }
	$14 = $26
	$16 = ($26 + [-24])
	$26 = $16
	if ( ((int_32)($16 + $10) != (int_32)[-24]) ){ goto $label$28 }
	
.LABEL $label$27
	if ( ((int_32)$14 == (int_32)$13) ){ goto $label$30 }
	$26 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($26 + [128]) == (int_32)$18), [480])
	goto $label$29 
	
.LABEL $label$30
	$26 = [0]
	$16 = CALL db_find_i64(*($18), *($24), (int_64)-2184396096019628032, $1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$29 }
	$26 = CALL $105($18, $16)
	CALL eosio_assert(((int_32)*($26 + [128]) == (int_32)$18), [480])
	
.LABEL $label$29
	*($27 + [144]) = ($27 + [8])
	CALL eosio_assert(((int_32)$26 != (int_32)[0]), [1616])
	CALL $226($18, $26, ($27 + [144]))
	*($2) = $15
	*($27 + [148]) = $7
	*($27 + [144]) = ($27 + [8])
	CALL $227($18, $7, ($27 + [144]))
	if ( ((int_32)*($27 + [8]) != (int_32)$8) ){ goto $label$26 }
	*(($26 = (*($27 + [280]) + *($15 + [10])))) = (*($26) + [1])
	CALL $228($3, $4)
	
.LABEL $label$26
	$26 = (*($27 + [4]) + [1])
	*($27 + [4]) = $26
	$10 = *($11)
	if ( ($26 <= ((int_32)(*($22) - $10) / (int_32)[24])) ){ goto $label$23 }
	
.LABEL $label$22
	*($27 + [144]) = $6
	*($27 + [152]) = $4
	*($27 + [156]) = $0
	*($27 + [148]) = ($27 + [280])
	*($27 + [160]) = ($27 + [296])
	*($27 + [164]) = ($27 + [312])
	CALL $224($3, $4, ($27 + [144]))
	$26 = *($27 + [280])
	if ( ($26 == 0) ){ goto $label$31 }
	*($27 + [284]) = $26
	CALL $274($26)
	
.LABEL $label$31
	if ( (*(($27 + [304])) == 0) ){ goto $label$32 }
	CALL $274(*($27 + [296]))
	
.LABEL $label$32
	*([0] + [4]) = ($27 + [320])
	return (unreachable)
	
.LABEL $label$2
	CALL $285($13)
	
.LABEL $label$1
	CALL $285($10)
	(unreachable)
}

void .FUNC $267 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	CALL $286(($12 + [32]), $1)
	$8 = *($1 + [24])
	$7 = *($1 + [22])
	$6 = *($1 + [20])
	$5 = *($1 + [18])
	$4 = *($1 + [16])
	$3 = *($1 + [14])
	$2 = *($1 + [12])
	*(($10 = (($12 + [16]) + [8]))) = *(($1 + [40]))
	*($12 + [16]) = *($1 + [32])
	$9 = *($1 + [48])
	*((($12 + [48]) + [8])) = *($10)
	*($12 + [48]) = *($12 + [16])
	$1 = *($0 + [4])
	$10 = *($1 + [4])
	$0 = (*(*($0)) + int_32($10 >> [1]))
	$1 = *($1)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $286(($12 + [80]), ($12 + [32]))
	$11 = *((($12 + [48]) + [8]))
	*((($12 + [64]) + [8])) = $11
	*(($12 + [8])) = $11
	$11 = *($12 + [48])
	*($12 + [64]) = $11
	*($12) = $11
	CALL void $0((int_32 ($12 + [80])), (int_32 ($2 & [255])), (int_32 ($3 & [65535])), (int_32 ($4 & [65535])), (int_32 ($5 & [65535])), (int_32 ($6 & [65535])), (int_32 ($7 & [65535])), (int_32 ($8 & [65535])), (int_32 $12), (int_32 ($9 & [65535])), (int_32 $1))
	if ( ((*($12 + [80]) & [1]) == 0) ){ goto $label$2 }
	CALL $274(*($12 + [88]))
	
.LABEL $label$2
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $274(*($12 + [40]))
	
.LABEL $label$3
	*([0] + [4]) = ($12 + [96])
}

void .FUNC _ZN5eosio2bk9createboxEyNSt3__16vectorIyNS1_9allocatorIyEEEEht (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($6 + [32]) = $1
	*($6 + [31]) = $3
	*($6 + [28]) = $4
	CALL require_auth(*($0))
	$1 = *($0)
	*($6 + [8]) = $0
	*($6 + [16]) = $2
	*($6 + [12]) = ($6 + [32])
	*($6 + [20]) = ($6 + [31])
	*($6 + [24]) = ($6 + [28])
	*($6 + [72]) = $1
	CALL eosio_assert(((int_64)*($0 + [456]) == (int_64)CALL $fimport$15()), [1104])
	$4 = ($0 + [456])
	*($6 + [48]) = $4
	*($6 + [52]) = ($6 + [8])
	*($6 + [56]) = ($6 + [72])
	*(($2 = CALL $273([80])) + [40]) = [0]
	*($2 + [32 align=4]) = (int_64)0
	*($2 + [48]) = $4
	CALL $235(($6 + [48]), $2)
	*($6 + [64]) = $2
	$1 = *($2)
	*($6 + [48]) = $1
	$3 = *($2 + [52])
	*($6 + [44]) = $3
	$5 = ($0 + [484])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [488]))) ){ goto $label$2 }
	*($4 + [8]) = $1
	*($4 + [16]) = $3
	*($6 + [64]) = [0]
	*($4) = $2
	*($5) = ($4 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($0 + [480]), ($6 + [64]), ($6 + [48]), ($6 + [44]))
	
.LABEL $label$1
	$0 = *($6 + [64])
	*($6 + [64]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$2 = *($0 + [32])
	if ( ($2 == 0) ){ goto $label$4 }
	*(($0 + [36])) = $2
	CALL $274($2)
	
.LABEL $label$4
	CALL $274($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [80])
}

void .FUNC $233 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	*(($6 = ($1 + [12]))) = *($1 + [8])
	$4 = ($1 + [20])
	*(($1 + [24])) = *($4)
	$2 = *($1)
	CALL eosio_assert([1], [400])
	$9 = [8]
	$3 = ($1 + [8])
	$5 = *($1 + [8])
	$6 = *($6)
	$7 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$9 = (($7 & [-8]) + $9)
	
.LABEL $label$2
	$5 = *(($1 + [20]))
	$6 = *(($1 + [24]))
	$7 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[24]))
	
.LOOP $label$3:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	$9 = ((((int_32)((uint_32)($7 + [-24]) / (uint_32)[24]) * (int_32)[22]) + $9) + [22])
	
.LABEL $label$4
	if ( ($9 <= [513]) ){ goto $label$6 }
	$10 = CALL malloc($9)
	goto $label$5 
	
.LABEL $label$6
	$10 = ($10 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$5
	*($11) = $10
	*($11 + [8]) = ($10 + $9)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [464])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	CALL $52($11, $3)
	CALL $171($11, $4)
	CALL db_update_i64(*($1 + [36]), (int_64)0, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$7 }
	CALL free($10)
	
.LABEL $label$7
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $249 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [32])) = (int_64)1398362884
	*($9 + [24]) = (int_64)0
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [576])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$7 = [0]
	
.LABEL $label$4
	CALL eosio_assert($7, [640])
	*($9 + [40]) = [0]
	*($9 + [84]) = $5
	*($9 + [80]) = $5
	*($9 + [88]) = ($5 + $3)
	*($9 + [48]) = ($9 + [80])
	*($9 + [64]) = ($9 + [16])
	CALL $258(($9 + [64]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	*(($1 = (($9 + [48]) + [8]))) = *(($9 + [32]))
	$6 = *($9 + [16])
	*($9 + [48]) = *($9 + [24])
	$5 = *(($9 + [40]))
	*((($9 + [64]) + [8])) = *($1)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$8 = *((*($1) + $8))
	
.LABEL $label$10
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*(($9 + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9) = $4
	CALL void $1((int_32 $6), (int_64 $9), (int_32 ($5 & [255])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $226 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$29 = (*([0] + [4]) - [144])
	*([0] + [4]) = $29
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	*($1 + [50]) = (*($1 + [50]) - *(*($2)))
	$3 = ($1 + [32])
	*(($2 = $29) + [16]) = *($3)
	$4 = ($1 + [88])
	*($2 + [24]) = *($4)
	$5 = *($1)
	CALL eosio_assert([1], [400])
	*($2 + [32]) = [0]
	*($2) = ($2 + [32])
	$7 = ($1 + [8])
	*($2 + [44]) = $7
	*($2 + [40]) = $1
	$8 = ($1 + [20])
	*($2 + [48]) = $8
	$9 = ($1 + [22])
	*($2 + [52]) = $9
	$10 = ($1 + [24])
	*($2 + [56]) = $10
	*($2 + [60]) = $3
	$11 = ($1 + [40])
	*($2 + [64]) = $11
	$12 = ($1 + [48])
	*($2 + [68]) = $12
	$6 = ($1 + [50])
	*($2 + [72]) = $6
	$13 = ($1 + [52])
	*($2 + [76]) = $13
	$14 = ($1 + [54])
	*($2 + [80]) = $14
	$15 = ($1 + [56])
	*($2 + [84]) = $15
	$16 = ($1 + [58])
	*($2 + [88]) = $16
	$17 = ($1 + [60])
	*($2 + [92]) = $17
	$18 = ($1 + [64])
	*($2 + [96]) = $18
	$19 = ($1 + [68])
	*($2 + [100]) = $19
	$20 = ($1 + [72])
	*($2 + [104]) = $20
	$21 = ($1 + [73])
	*($2 + [108]) = $21
	$22 = ($1 + [74])
	*($2 + [112]) = $22
	$23 = ($1 + [75])
	*($2 + [116]) = $23
	$24 = ($1 + [80])
	*($2 + [120]) = $24
	*($2 + [124]) = $4
	$25 = ($1 + [96])
	*($2 + [128]) = $25
	$26 = ($1 + [112])
	*($2 + [132]) = $26
	$27 = ($1 + [116])
	*($2 + [136]) = $27
	CALL $108(($2 + [40]), $2)
	$28 = *($2 + [32])
	if ( ($28 <= [513]) ){ goto $label$2 }
	$29 = CALL malloc($28)
	goto $label$1 
	
.LABEL $label$2
	$29 = ($29 - (($28 + [15]) & [-16]))
	*([0] + [4]) = $29
	
.LABEL $label$1
	*($2 + [4]) = $29
	*($2) = $29
	*($2 + [8]) = ($29 + $28)
	*($2 + [32]) = $2
	*($2 + [44]) = $7
	*($2 + [48]) = $8
	*($2 + [52]) = $9
	*($2 + [56]) = $10
	*($2 + [60]) = $3
	*($2 + [64]) = $11
	*($2 + [40]) = $1
	*($2 + [68]) = $12
	*($2 + [72]) = $6
	*($2 + [76]) = $13
	*($2 + [80]) = $14
	*($2 + [84]) = $15
	*($2 + [88]) = $16
	*($2 + [92]) = $17
	*($2 + [96]) = $18
	*($2 + [100]) = $19
	*($2 + [104]) = $20
	*($2 + [108]) = $21
	*($2 + [112]) = $22
	*($2 + [116]) = $23
	*($2 + [120]) = $24
	*($2 + [124]) = $4
	*($2 + [128]) = $25
	*($2 + [132]) = $26
	*($2 + [136]) = $27
	CALL $109(($2 + [40]), ($2 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $29, $28)
	if ( ($28 <= [513]) ){ goto $label$3 }
	CALL free($29)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$29 = (($2 + [16]) + [8])
	*($2 + [40]) = *($3)
	if ( (CALL memcmp(($2 + [16]), ($2 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [136])
	$28 = *($3)
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$6 }
	$28 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($2 + [32]), $5)
	*($3) = $28
	
.LABEL $label$6
	CALL db_idx64_update($28, (int_64)0, ($2 + [40]))
	
.LABEL $label$5
	*($2 + [40]) = *($4)
	if ( (CALL memcmp($29, ($2 + [40]), [8]) == 0) ){ goto $label$7 }
	$29 = ($1 + [140])
	$1 = *($29)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($2 + [32]), $5)
	*($29) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, (int_64)0, ($2 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [144])
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $7) / (int_32)[12])
	$6 = ($4 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $7) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$7 = ($7 << [1])
	$5 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $273(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$4 * (int_32)[12])))) = *($1)
	$4 = *($1 + [8])
	*($1 + [8]) = [0]
	*($7 + [8]) = $4
	*($1 + [4]) = [0]
	*($1) = [0]
	$2 = ($6 + ((int_32)$5 * (int_32)[12]))
	$3 = ($7 + [12])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$6 }
	$4 = ([0] - $1)
	$1 = ($5 + [-12])
	
.LOOP $label$7:
	*(($5 = ($7 + [-12]))) = (int_64)0
	*(($6 = ($7 + [-4]))) = [0]
	*($5) = *($1)
	*(($7 + [-8])) = *(($1 + [4]))
	$5 = ($1 + [8])
	*($6) = *($5)
	*($5) = [0]
	*($1) = (int_64)0
	$7 = ($7 + [-12])
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $4) != (int_32)[-12]) ){ goto $label$7 }
	$1 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $1
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$8 }
	$5 = ([0] - $6)
	$1 = ($1 + [-12])
	
.LOOP $label$9:
	$7 = *($1)
	if ( ($7 == 0) ){ goto $label$10 }
	*(($1 + [4])) = $7
	CALL $274($7)
	
.LABEL $label$10
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $5) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $274($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $166 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [96]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1296])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4157834741199929344)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1232])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1232])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $158(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = (*($0) + ((int_32)*($0 + [4]) * (int_32)[24]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	$6 = ($7 & [1])
	$7 = *($2)
	$7 = ( *($2 + [4]) ? uint_32($7 >> [1]) : $6 )
	$11 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $11 )
	$8 = ( $5 ? $7 : ($5 <= $7) )
	if ( ($8 == 0) ){ goto $label$10 }
	$11 = CALL memcmp(( *($2 + [8]) ? ($2 + [1]) : $6 ), ( *($1 + [8]) ? ($1 + [1]) : $11 ), $8)
	if ( ($11 == 0) ){ goto $label$10 }
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((uint_32)$7 >= (uint_32)$5) ){ goto $label$8 }
	
.LABEL $label$9
	$5 = *($0)
	*($3) = $1
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$5 }
	$6 = [1]
	$9 = ($11 & [1])
	$7 = ($1 + [-24])
	$11 = *($7)
	$10 = ($1 + [-20])
	$11 = ( *($10) ? uint_32($11 >> [1]) : $9 )
	$8 = ($7 & [1])
	$7 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($7 >> [1]) : $8 )
	$12 = ( $4 ? $11 : ($4 <= $11) )
	if ( ($12 == 0) ){ goto $label$7 }
	$8 = CALL memcmp(( *(($1 + [-16])) ? ($7 + [1]) : $9 ), ( *($2 + [8]) ? ($2 + [1]) : $8 ), $12)
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((int_32)$8 >= (int_32)[0]) ){ goto $label$6 }
	return [1]
	
.LABEL $label$8
	return CALL $56($0, $1, $4, $2, $3)
	
.LABEL $label$7
	if ( ($11 <= $4) ){ goto $label$1 }
	
.LABEL $label$6
	$8 = ($11 & [1])
	$11 = *($2)
	$11 = ( *(($2 + [4])) ? uint_32($11 >> [1]) : $8 )
	$6 = ($4 & [1])
	$4 = *($7)
	$4 = ( *($10) ? uint_32($4 >> [1]) : $6 )
	$9 = ( $4 ? $11 : ($4 <= $11) )
	if ( ($9 == 0) ){ goto $label$4 }
	$1 = CALL memcmp(( *($2 + [8]) ? ($2 + [1]) : $8 ), ( *(($1 + [-16])) ? ($7 + [1]) : $6 ), $9)
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ((int_32)$1 >= (int_32)[0]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$5
	return [1]
	
.LABEL $label$4
	if ( ((uint_32)$11 >= (uint_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	return CALL $56($0, $5, $7, $2, $3)
	
.LABEL $label$2
	*($3) = $7
	$6 = [0]
	
.LABEL $label$1
	return $6
}

void .FUNC $164 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($7 + [8]) = [0]
	if ( (CALL $165($1, $2, $3, ($7 + [8])) == 0) ){ goto $label$6 }
	$4 = *($7 + [8])
	$2 = *($1 + [8])
	if ( ((int_32)$2 != (int_32)*($1 + [4])) ){ goto $label$5 }
	$5 = ((int_32)($4 - *($1)) / (int_32)[24])
	if ( ((int_32)$2 == (int_32)[178956970]) ){ goto $label$1 }
	if ( ((uint_32)$2 > (uint_32)[536870911]) ){ goto $label$4 }
	$6 = ((uint_32)($2 << [3]) / (uint_32)[5])
	goto $label$3 
	
.LABEL $label$6
	$1 = *($1)
	$1 = ($1 + ((int_32)((int_32)(*($7 + [8]) - $1) / (int_32)[24]) * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$2 = *($1)
	CALL $58($1, $4, [1], $3)
	$1 = (*($1) + ((int_32)((int_32)($4 - $2) / (int_32)[24]) * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$4
	$6 = ( [-1] ? ($2 << [3]) : ((uint_32)$2 > (uint_32)[-1610612737]) )
	
.LABEL $label$3
	$6 = ( $6 ? [178956970] : ($6 <= [178956970]) )
	$2 = ($2 + [1])
	$2 = ( $2 ? $6 : ((uint_32)$2 > (uint_32)$6) )
	if ( ((uint_32)$2 >= (uint_32)[178956971]) ){ goto $label$1 }
	CALL $57($1, CALL $273(((int_32)$2 * (int_32)[24])), $2, $4, [1], $3)
	$1 = (*($1) + ((int_32)$5 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $1
	*([0] + [4]) = ($7 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [32])
	*([0] + [4]) = $15
	$13 = *($0)
	$4 = *($0 + [4])
	$6 = ((int_32)$4 * (int_32)[24])
	if ( ($6 == 0) ){ goto $label$2 }
	$2 = ($1 + [1])
	$14 = ((int_32)$6 / (int_32)[24])
	$10 = ($1 + [4])
	$11 = ($1 + [8])
	
.LOOP $label$4:
	$7 = ($8 & [1])
	$8 = *($4)
	$3 = uint_32($14 >> [1])
	$4 = ($13 + ((int_32)$3 * (int_32)[24]))
	$8 = ( *($4 + [4]) ? uint_32($8 >> [1]) : $7 )
	$5 = ($4 & [1])
	$4 = *($1)
	$6 = ( *($10) ? uint_32($4 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$7 }
	$5 = CALL memcmp(( *($4 + [8]) ? ($4 + [1]) : $7 ), ( *($11) ? $2 : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$5 }
	
.LABEL $label$6
	$13 = ($4 + [24])
	$14 = (($14 + [-1]) - $3)
	if ( $14 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$14 = $3
	if ( $14 ){ goto $label$4 }
	
.LABEL $label$3
	$4 = *(($0 + [4]))
	$6 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$6 = $13
	
.LABEL $label$1
	if ( ((int_32)$13 == (int_32)($6 + ((int_32)$4 * (int_32)[24]))) ){ goto $label$11 }
	$4 = ($1 + [4])
	$3 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $3 )
	$14 = ($6 & [1])
	$6 = *($13)
	$6 = ( *($13 + [4]) ? uint_32($6 >> [1]) : $14 )
	$5 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($5 == 0) ){ goto $label$10 }
	$14 = CALL memcmp(( *($1 + [8]) ? ($1 + [1]) : $3 ), ( *($13 + [8]) ? ($13 + [1]) : $14 ), $5)
	if ( ($14 == 0) ){ goto $label$10 }
	if ( ((int_32)$14 > (int_32)[-1]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$11
	$4 = ($1 + [4])
	goto $label$9 
	
.LABEL $label$10
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$8 }
	
.LABEL $label$9
	$6 = *(($1 + [8]))
	$12 = *($1)
	*($1) = [0]
	*(($15 + [8])) = $6
	*($4) = [0]
	*($15) = $12
	*($1 + [8]) = [0]
	*($15 + [12]) = [0]
	*(($6 = ($15 + [16]))) = [0]
	*(($15 + [20])) = [0]
	CALL $164(($15 + [24]), $0, $13, $15)
	$13 = *($15 + [24])
	$4 = *($15 + [12])
	if ( ($4 == 0) ){ goto $label$12 }
	*($6) = $4
	CALL $274($4)
	
.LABEL $label$12
	if ( ((*($15) & [1]) == 0) ){ goto $label$8 }
	CALL $274(*($15 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($15 + [32])
	return ($13 + [12])
}

void .FUNC $162 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = *($1)
	$7 = $8
	CALL _ZNSt3__19to_stringEx(($7 + [16]), *(*($2)))
	CALL $280(($7 + [16]), [95])
	$6 = (($7 + [16]) + [8])
	*((($7 + [32]) + [8])) = *($6)
	*($6) = [0]
	*($7 + [32]) = *($7 + [16])
	*($7 + [20]) = [0]
	*($7 + [16]) = [0]
	CALL _ZNSt3__19to_stringEi($7, *(*($2 + [4])))
	$6 = *($7)
	$4 = ($6 & [1])
	$6 = CALL $279(($7 + [32]), ( *($7 + [8]) ? ($7 | [1]) : $4 ), ( *($7 + [4]) ? uint_32($6 >> [1]) : $4 ))
	$4 = ($6 + [8])
	*((($7 + [48]) + [8])) = *($4)
	*($7 + [48]) = *($6)
	*($6) = [0]
	*(($6 + [4])) = [0]
	*($4) = [0]
	$4 = ($1 + [8])
	$6 = CALL $163($4, ($7 + [48]))
	$5 = *(*($2 + [8]) + [4])
	$2 = *($6 + [4])
	if ( ((int_32)$2 == (int_32)*($6 + [8])) ){ goto $label$2 }
	*(($6 + [4])) = ($2 + [8])
	*($2) = *($5)
	goto $label$1 
	
.LABEL $label$2
	CALL $64($6, $5)
	
.LABEL $label$1
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $274(*($7 + [56]))
	
.LABEL $label$3
	if ( ((*($7) & [1]) == 0) ){ goto $label$4 }
	CALL $274(*(($7 + [8])))
	
.LABEL $label$4
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $274(*($7 + [40]))
	
.LABEL $label$5
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $274(*(($7 + [24])))
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [400])
	*($7 + [16]) = [0]
	*($7 + [32]) = ($7 + [16])
	*($7 + [52]) = $4
	*($7 + [48]) = $1
	CALL $50(($7 + [48]), ($7 + [32]))
	$6 = *($7 + [16])
	if ( ($6 <= [513]) ){ goto $label$8 }
	$2 = CALL malloc($6)
	goto $label$7 
	
.LABEL $label$8
	$2 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$7
	*($7 + [48]) = $2
	*($7 + [56]) = ($2 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [464])
	CALL memcpy($2, $1, [8])
	*($7 + [52]) = ($2 + [8])
	CALL $51(($7 + [48]), $4)
	CALL db_update_i64(*($1 + [24]), (int_64)0, $2, $6)
	if ( ($6 <= [513]) ){ goto $label$9 }
	CALL free($2)
	
.LABEL $label$9
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($7 + [64])
}

int_32 .FUNC $161 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *($0 + [80])
	if ( ($5 == 0) ){ goto $label$1 }
	*(($0 + [84])) = $5
	CALL $274($5)
	
.LABEL $label$1
	$1 = *($0 + [68])
	if ( ($1 == 0) ){ goto $label$2 }
	$4 = ($0 + [72])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$4 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$5:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [16])) = $3
	CALL $274($3)
	
.LABEL $label$6
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$7 }
	*(($5 + [4])) = $3
	CALL $274($3)
	
.LABEL $label$7
	$5 = ($5 + [-24])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$5 }
	$5 = *(($0 + [68]))
	goto $label$3 
	
.LABEL $label$4
	$5 = $1
	
.LABEL $label$3
	*($4) = $1
	CALL $274($5)
	
.LABEL $label$2
	$1 = *($0 + [56])
	if ( ($1 == 0) ){ goto $label$8 }
	$4 = ($0 + [60])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$10 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$11:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$12 }
	*(($5 + [4])) = $3
	CALL $274($3)
	
.LABEL $label$12
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$11 }
	$5 = *(($0 + [56]))
	goto $label$9 
	
.LABEL $label$10
	$5 = $1
	
.LABEL $label$9
	*($4) = $1
	CALL $274($5)
	
.LABEL $label$8
	return $0
}

void .FUNC $160 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $161($1)
	CALL $274($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $274($6)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [12592])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [12576]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [12608]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

void .FUNC _ZN5eosio2bk13finish_battleERNS0_6battleENSt3__16vectorIhNS3_9allocatorIhEEEE (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [160])
	*([0] + [4]) = $23
	$21 = *($2)
	$16 = *($21)
	if ( ((int_32)$16 != (int_32)*($1 + [8])) ){ goto $label$3 }
	if ( ((int_32)*($21 + [1]) != (int_32)$16) ){ goto $label$3 }
	if ( ((int_64)*($1 + [24]) < (int_64)1) ){ goto $label$2 }
	if ( ($16 == 0) ){ goto $label$2 }
	$13 = ($0 + [96])
	$21 = ($0 + [56])
	$5 = (($23 + [64]) + [40])
	$12 = [0]
	$11 = ($23 + [140])
	$22 = ($0 + [72])
	$15 = [0]
	
.LOOP $label$4:
	$14 = ($1 + [56])
	$16 = CALL $8($21, *(CALL $127($13, *((*(*($14)) + $12)), [144]) + [32]), [144])
	CALL eosio_assert(((int_32)*($16 + [40]) == (int_32)$21), [176])
	CALL eosio_assert(((int_64)*($21) == (int_64)CALL $fimport$15()), [224])
	$18 = *($16)
	$7 = ($1 + [32])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($16 + [16]))), [288])
	$8 = ($1 + [24])
	$20 = ((int_64)*($16 + [8]) + (int_64)*($8))
	*($16 + [8]) = $20
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [336])
	CALL eosio_assert(((int_64)*($16 + [8]) < (int_64)4611686018427387904), [368])
	CALL eosio_assert(((int_64)$18 == (int_64)*($16)), [400])
	*(($9 = (($23 + [144]) + [8]))) = $5
	*($23 + [148]) = ($23 + [64])
	*($23 + [144]) = ($23 + [64])
	*($23 + [56]) = ($23 + [144])
	*(($10 = (($23 + [128]) + [8]))) = ($16 + [24])
	*($11) = ($16 + [32])
	*($23 + [132]) = ($16 + [8])
	*($23 + [128]) = $16
	CALL $9(($23 + [128]), ($23 + [56]))
	CALL db_update_i64(*($16 + [44]), (int_64)0, ($23 + [64]), [40])
	if ( (uint_64)($18 <= *($22)) ){ goto $label$5 }
	*($22) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$16 = CALL $8($21, *(CALL $127($13, *((*(*($14) + [12]) + $12)), [144]) + [32]), [144])
	CALL eosio_assert(((int_32)*($16 + [40]) == (int_32)$21), [176])
	CALL eosio_assert(((int_64)*($21) == (int_64)CALL $fimport$15()), [224])
	$18 = *($16)
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($16 + [16]))), [288])
	$20 = ((int_64)*($16 + [8]) + (int_64)*($8))
	*($16 + [8]) = $20
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [336])
	CALL eosio_assert(((int_64)*($16 + [8]) < (int_64)4611686018427387904), [368])
	CALL eosio_assert(((int_64)$18 == (int_64)*($16)), [400])
	*($9) = $5
	*($23 + [148]) = ($23 + [64])
	*($23 + [144]) = ($23 + [64])
	*($23 + [56]) = ($23 + [144])
	*($10) = ($16 + [24])
	*($11) = ($16 + [32])
	*($23 + [132]) = ($16 + [8])
	*($23 + [128]) = $16
	CALL $9(($23 + [128]), ($23 + [56]))
	CALL db_update_i64(*($16 + [44]), (int_64)0, ($23 + [64]), [40])
	if ( (uint_64)($18 <= *($22)) ){ goto $label$6 }
	*($22) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$12 = ($12 + [8])
	$14 = *(($1 + [8]))
	$15 = ($15 + [1])
	if ( ($15 <= $14) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$20 = *(($1 + [32]))
	$17 = ((int_64)((int_64)$18 >> (int_64)63) << (int_64)1) | (int_64)(uint_64)$18 >> (uint_64)(int_64)63
	$18 = *($1 + [24])
	$19 = ((int_64)$18 << (int_64)1)
	CALL eosio_assert(( (uint_64)($19 <= (int_64)4611686018427387904) ? ((int_64)$17)) < (int_64)0) : (int_64)($17 == 0) ), [992])
	CALL eosio_assert(( ((uint_64)$19 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$17 > (int_64)-1) : ((int_64)$17 == (int_64)-1) ), [1024])
	$21 = ($0 + [16])
	$16 = *(($0 + [44]))
	if ( ((int_32)$16 == (int_32)*(($0 + [40]))) ){ goto $label$8 }
	$16 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)$21), [480])
	goto $label$7 
	
.LABEL $label$8
	$16 = [0]
	$14 = CALL db_find_i64(*($21), *(($0 + [24])), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$7 }
	$16 = CALL $82($21, $14)
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)$21), [480])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1664])
	$18 = ((int_64)$18 << (int_64)1)
	$17 = (int_64)
	CALL __multi3(($23 + [40]), $17((int_64)100 - *($16))), (int_64)$17 >> (int_64)63), $18, (int_64)$18 >> (int_64)63))
	$17 = *((($23 + [40]) + [8]))
	$18 = *($23 + [40])
	CALL eosio_assert(( (uint_64)($18 <= (int_64)4611686018427387904) ? ((int_64)$17 < (int_64)0) : (int_64)($17 == 0) ), [992])
	CALL eosio_assert(( ((uint_64)$18 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$17 > (int_64)-1) : ((int_64)$17 == (int_64)-1) ), [1024])
	CALL eosio_assert([1], [1056])
	CALL eosio_assert([1], [1072])
	$3 = *(($1 + [32]))
	$19 = ((int_64)((int_64)$19 >> (int_64)63) << (int_64)1) | (int_64)(uint_64)$19 >> (uint_64)(int_64)63
	$19 = *(($1 + [24]))
	$17 = ((int_64)$19 << (int_64)1)
	CALL eosio_assert(( (uint_64)($17 <= (int_64)4611686018427387904) ? ((int_64)$19)) < (int_64)0) : (int_64)($19 == 0) ), [992])
	CALL eosio_assert(( ((uint_64)$17 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$19 > (int_64)-1) : ((int_64)$19 == (int_64)-1) ), [1024])
	$16 = ($1 + [8])
	CALL __multi3(($23 + [24]), *($16), (int_64)0, $17, (int_64)$17 >> (int_64)63))
	$17 = *((($23 + [24]) + [8]))
	$4 = *($23 + [24])
	CALL eosio_assert(( (uint_64)($4 <= (int_64)4611686018427387904) ? ((int_64)$17 < (int_64)0) : (int_64)($17 == 0) ), [992])
	CALL eosio_assert(( ((uint_64)$4 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$17 > (int_64)-1) : ((int_64)$17 == (int_64)-1) ), [1024])
	$17 = ((int_64)$18 / (int_64)100)
	CALL __multi3(($23 + [8]), *($16), (int_64)0, $17, (int_64)$17 >> (int_64)63))
	$19 = *((($23 + [8]) + [8]))
	$6 = *($23 + [8])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$19 < (int_64)0) : (int_64)($19 == 0) ), [992])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$19 > (int_64)-1) : ((int_64)$19 == (int_64)-1) ), [1024])
	CALL eosio_assert(((int_64)$20 == (int_64)$3), [768])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($4 - $6)) > (int_64)-4611686018427387904), [816])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [848])
	if ( ((int_32)*(*($2)) != (int_32)*($16)) ){ goto $label$10 }
	*(($1 + [41])) = [1]
	if ( ((int_64)$18 < (int_64)100) ){ goto $label$9 }
	$16 = *($1 + [56])
	if ( ((int_32)*(($16 + [16])) == (int_32)*($16 + [12])) ){ goto $label$9 }
	$13 = ($0 + [96])
	$21 = ($0 + [56])
	$5 = (($23 + [64]) + [40])
	$14 = [0]
	$11 = ($23 + [140])
	$22 = ($0 + [72])
	$12 = [0]
	
.LOOP $label$11:
	$16 = CALL $8($21, *(CALL $127($13, *((*($16 + [12]) + $14)), [144]) + [32]), [144])
	CALL eosio_assert(((int_32)*($16 + [40]) == (int_32)$21), [176])
	CALL eosio_assert(((int_64)*($21) == (int_64)CALL $fimport$15()), [224])
	$18 = *($16)
	CALL eosio_assert(((int_64)$20 == (int_64)*(($16 + [16]))), [288])
	$19 = ((int_64)*($16 + [8]) + (int_64)$17)
	*($16 + [8]) = $19
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [336])
	CALL eosio_assert(((int_64)*($16 + [8]) < (int_64)4611686018427387904), [368])
	CALL eosio_assert(((int_64)$18 == (int_64)*($16)), [400])
	*((($23 + [144]) + [8])) = $5
	*($23 + [148]) = ($23 + [64])
	*($23 + [144]) = ($23 + [64])
	*($23 + [56]) = ($23 + [144])
	*((($23 + [128]) + [8])) = ($16 + [24])
	*($11) = ($16 + [32])
	*($23 + [132]) = ($16 + [8])
	*($23 + [128]) = $16
	CALL $9(($23 + [128]), ($23 + [56]))
	CALL db_update_i64(*($16 + [44]), (int_64)0, ($23 + [64]), [40])
	if ( (uint_64)($18 <= *($22)) ){ goto $label$12 }
	*($22) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$14 = ($14 + [8])
	$16 = *(($1 + [56]))
	$12 = ($12 + [1])
	if ( ($12 <= int_32((*(($16 + [16])) - *($16 + [12])) >> [3])) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	*(($1 + [41])) = [0]
	if ( ((int_64)$18 < (int_64)100) ){ goto $label$9 }
	$16 = *($1 + [56])
	if ( ((int_32)*($16 + [4]) == (int_32)*($16)) ){ goto $label$9 }
	$13 = ($0 + [96])
	$21 = ($0 + [56])
	$5 = (($23 + [64]) + [40])
	$14 = [0]
	$11 = ($23 + [140])
	$22 = ($0 + [72])
	$12 = [0]
	
.LOOP $label$13:
	$16 = CALL $8($21, *(CALL $127($13, *((*($16) + $14)), [144]) + [32]), [144])
	CALL eosio_assert(((int_32)*($16 + [40]) == (int_32)$21), [176])
	CALL eosio_assert(((int_64)*($21) == (int_64)CALL $fimport$15()), [224])
	$18 = *($16)
	CALL eosio_assert(((int_64)$20 == (int_64)*(($16 + [16]))), [288])
	$19 = ((int_64)*($16 + [8]) + (int_64)$17)
	*($16 + [8]) = $19
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [336])
	CALL eosio_assert(((int_64)*($16 + [8]) < (int_64)4611686018427387904), [368])
	CALL eosio_assert(((int_64)$18 == (int_64)*($16)), [400])
	*((($23 + [144]) + [8])) = $5
	*($23 + [148]) = ($23 + [64])
	*($23 + [144]) = ($23 + [64])
	*($23 + [56]) = ($23 + [144])
	*((($23 + [128]) + [8])) = ($16 + [24])
	*($11) = ($16 + [32])
	*($23 + [132]) = ($16 + [8])
	*($23 + [128]) = $16
	CALL $9(($23 + [128]), ($23 + [56]))
	CALL db_update_i64(*($16 + [44]), (int_64)0, ($23 + [64]), [40])
	if ( (uint_64)($18 <= *($22)) ){ goto $label$14 }
	*($22) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$14 = ($14 + [8])
	$16 = *(($1 + [56]))
	$12 = ($12 + [1])
	if ( ($12 <= int_32((*($16 + [4]) - *($16)) >> [3])) ){ goto $label$13 }
	
.LABEL $label$9
	if ( ((int_64)$4 <= (int_64)0) ){ goto $label$2 }
	$18 = *($0)
	$22 = *(($0 + [80]))
	$14 = *(($0 + [84]))
	if ( ((int_32)$14 == (int_32)$22) ){ goto $label$15 }
	$16 = ($14 + [-24])
	$12 = ([0] - $22)
	
.LOOP $label$16:
	if ( ((int_64)*(*($16)) == (int_64)$18) ){ goto $label$15 }
	$14 = $16
	$21 = ($16 + [-24])
	$16 = $21
	if ( ((int_32)($21 + $12) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	$21 = ($0 + [56])
	if ( ((int_32)$14 == (int_32)$22) ){ goto $label$18 }
	$16 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [40]) == (int_32)$21), [480])
	goto $label$17 
	
.LABEL $label$18
	$16 = [0]
	$14 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030912129794572288, $18)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$17 }
	$16 = CALL $10($21, $14)
	CALL eosio_assert(((int_32)*($16 + [40]) == (int_32)$21), [480])
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1616])
	CALL eosio_assert(((int_32)*($16 + [40]) == (int_32)$21), [176])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$15()), [224])
	$18 = *($16)
	CALL eosio_assert(((int_64)$3 == (int_64)*(($16 + [16]))), [288])
	$20 = ((int_64)*($16 + [8]) + (int_64)$4)
	*($16 + [8]) = $20
	CALL eosio_assert(((int_64)$20 > (int_64)-4611686018427387904), [336])
	CALL eosio_assert(((int_64)*($16 + [8]) < (int_64)4611686018427387904), [368])
	CALL eosio_assert(((int_64)$18 == (int_64)*($16)), [400])
	*($23 + [152]) = (($23 + [64]) + [40])
	*($23 + [148]) = ($23 + [64])
	*($23 + [144]) = ($23 + [64])
	*($23 + [56]) = ($23 + [144])
	*($23 + [132]) = ($16 + [8])
	*($23 + [128]) = $16
	*($23 + [136]) = ($16 + [24])
	*($23 + [140]) = ($16 + [32])
	CALL $9(($23 + [128]), ($23 + [56]))
	CALL db_update_i64(*($16 + [44]), (int_64)0, ($23 + [64]), [40])
	$16 = ($0 + [72])
	if ( (uint_64)($18 <= *($16)) ){ goto $label$2 }
	*($16) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$14 = *(($1 + [8]))
	
.LABEL $label$1
	if ( (($14 & [255]) == 0) ){ goto $label$19 }
	$16 = ($0 + [96])
	$21 = [0]
	$12 = ($1 + [56])
	$22 = [0]
	
.LOOP $label$20:
	$18 = *((*(*($12)) + $21))
	*($23 + [128]) = ((int_32)*(*($2)) != (int_32)($14 & [255]))
	CALL require_auth(*($0))
	$14 = CALL $127($16, $18, [144])
	*($23 + [68]) = $0
	*($23 + [64]) = ($23 + [128])
	CALL $149($16, $14, ($23 + [64]))
	$18 = *((*(*($12) + [12]) + $21))
	$14 = ($1 + [8])
	*($23 + [128]) = ((int_32)*(*($2) + [1]) != (int_32)*($14))
	CALL require_auth(*($0))
	$13 = CALL $127($16, $18, [144])
	*($23 + [68]) = $0
	*($23 + [64]) = ($23 + [128])
	CALL $149($16, $13, ($23 + [64]))
	$21 = ($21 + [8])
	$14 = *($14)
	$22 = ($22 + [1])
	if ( ($22 <= $14) ){ goto $label$20 }
	
.LABEL $label$19
	*($1 + [52]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$18 = CALL current_time()
	*(($23 + [92])) = [0]
	*(($23 + [96])) = [0]
	*($23 + [76]) = [0]
	*($23 + [80]) = [0]
	*($23 + [84]) = [0]
	*($23 + [88]) = [0]
	*($23 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$18 / (uint_64)(int_64)1000000)) + [60])
	*($23 + [100]) = [0]
	*(($23 + [104])) = [0]
	*(($23 + [108])) = [0]
	*($23 + [112]) = [0]
	*(($23 + [116])) = [0]
	*(($23 + [120])) = [0]
	$14 = ($23 + [100])
	$4 = *($0)
	$18 = (int_64)0
	$17 = (int_64)59
	$16 = [896]
	$19 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$18 > (uint_64)(int_64)5) ){ goto $label$26 }
	$21 = *($16)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$21 = ($21 + [165])
	goto $label$24 
	
.LABEL $label$26
	$20 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$22
	$16 = ($16 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$21 }
	*($23 + [136]) = $19
	*($23 + [128]) = $4
	$18 = (int_64)0
	$17 = (int_64)59
	$16 = [3936]
	$19 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$18 > (uint_64)(int_64)7) ){ goto $label$32 }
	$21 = *($16)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$21 = ($21 + [165])
	goto $label$30 
	
.LABEL $label$32
	$20 = (int_64)0
	if ( ((uint_64)$18 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$20 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$20 = ((int_64)((int_64)$20 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$28
	$16 = ($16 + [1])
	$18 = ((int_64)$18 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$27 }
	*($23 + [144]) = $19
	*($23 + [56]) = *($1)
	CALL $200($14, ($23 + [128]), $0, ($23 + [144]), ($23 + [56]))
	$21 = ($0 + [16])
	$16 = *(($0 + [44]))
	if ( ((int_32)$16 == (int_32)*(($0 + [40]))) ){ goto $label$34 }
	$16 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)$21), [480])
	goto $label$33 
	
.LABEL $label$34
	$16 = [0]
	$14 = CALL db_find_i64(*($21), *(($0 + [24])), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$33 }
	$16 = CALL $82($21, $14)
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)$21), [480])
	
.LABEL $label$33
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1664])
	*(($23 + [84])) = *($16 + [10])
	*($23 + [136]) = (int_64)0
	*($23 + [128]) = *($1)
	$18 = *($0)
	CALL $201(($23 + [144]), ($23 + [64]))
	$0 = *($23 + [144])
	CALL send_deferred(($23 + [128]), $18, $0, (*($23 + [148]) - $0), [0])
	$0 = *($23 + [144])
	if ( ($0 == 0) ){ goto $label$35 }
	*($23 + [148]) = $0
	CALL $274($0)
	
.LABEL $label$35
	CALL $202(($23 + [64]))
	*([0] + [4]) = ($23 + [160])
}

int_32 .FUNC $244 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [112])
	*([0] + [4]) = $4
	*(($5 = $4) + [76]) = $0
	*($5 + [64]) = *($1)
	*($5 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*($5 + [16]) = [0]
	*($5 + [8]) = (int_64)0
	*($5 + [20]) = [0]
	*($5 + [22 align=2]) = [0]
	*($5 + [26 align=2]) = [0]
	*($5 + [30]) = [0]
	*($5 + [32]) = [0]
	*($5 + [40]) = (int_64)0
	*(($5 + [48])) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [640])
	*($5 + [56]) = [0]
	*($5 + [84]) = $0
	*($5 + [80]) = $0
	*($5 + [88]) = ($0 + $2)
	*($5 + [96]) = ($5 + [80])
	*($5 + [104]) = ($5 + [8])
	CALL $266(($5 + [104]), ($5 + [96]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [84]) = ($5 + [64])
	*($5 + [80]) = ($5 + [76])
	CALL $267(($5 + [80]), ($5 + [8]))
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $274(*(($5 + [16])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [112])
	return [1]
}

void .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$3 = *($0)
	$5 = *($1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($5 + [4]), $3, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	$3 = *($0 + [4])
	$5 = *($1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($5 + [4]), $3, [1])
	*($5 + [4]) = (*($5 + [4]) + [1])
	$3 = *($0 + [8])
	$5 = *($1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($5 + [4]), $3, [1])
	*($5 + [4]) = (*($5 + [4]) + [1])
	$3 = *($0 + [12])
	$5 = *($1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($5 + [4]), $3, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	$3 = *($0 + [16])
	$5 = *($1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($5 + [4]), $3, [8])
	$6 = (*($5 + [4]) + [8])
	*($5 + [4]) = $6
	CALL eosio_assert(((int_32)(*($5 + [8]) - $6) > (int_32)[7]), [464])
	CALL memcpy(*($5 + [4]), ($3 + [8]), [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	$3 = *($0 + [20])
	$5 = *($1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($5 + [4]), $3, [1])
	*($5 + [4]) = (*($5 + [4]) + [1])
	$3 = *($0 + [24])
	$5 = *($1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($5 + [4]), $3, [1])
	*($5 + [4]) = (*($5 + [4]) + [1])
	$3 = *($0 + [28])
	$5 = *($1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[3]), [464])
	CALL memcpy(*($5 + [4]), $3, [4])
	*($5 + [4]) = (*($5 + [4]) + [4])
	$3 = *($0 + [32])
	$5 = *($1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[3]), [464])
	CALL memcpy(*($5 + [4]), $3, [4])
	*($5 + [4]) = (*($5 + [4]) + [4])
	$3 = *($0 + [36])
	$5 = *($1)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[3]), [464])
	CALL memcpy(*($5 + [4]), $3, [4])
	*($5 + [4]) = (*($5 + [4]) + [4])
	$2 = *($0 + [40])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($2 + [4]) - *($2)) / (int_32)[12]))
	$3 = *($1)
	$6 = *($3 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$4 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($4) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*(($3 + [8])) - $6) > (int_32)[0]), [464])
	$5 = ($3 + [4])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $4 ){ goto $label$1 }
	$6 = *(($2 + [4]))
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $52($3, $5)
	$5 = ($5 + [12])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	CALL $170(*($1), *($0 + [44]))
	CALL $52(*($1), *($0 + [48]))
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	*(($9 = *($1))) = (*($9) + [8])
	*(($9 = *($1))) = (*($9) + [1])
	*(($9 = *($1))) = (*($9) + [1])
	*(($9 = *($1))) = (*($9) + [8])
	*(($9 = *($1))) = (*($9) + [16])
	*(($9 = *($1))) = (*($9) + [1])
	*(($9 = *($1))) = (*($9) + [1])
	*(($9 = *($1))) = (*($9) + [4])
	*(($9 = *($1))) = (*($9) + [4])
	*(($9 = *($1))) = (*($9) + [4])
	$8 = *($9)
	$9 = *($0 + [40])
	$3 = *($9 + [4])
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $8) / (int_32)[12]))
	$2 = *($1)
	$9 = *($2)
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($2) = $9
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($8)
	$4 = *($8 + [4])
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$4:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$5 }
	$9 = (($6 & [-8]) + $9)
	
.LABEL $label$5
	$8 = ($8 + [12])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$3 }
	*($2) = $9
	
.LABEL $label$2
	$8 = *($9)
	$9 = *($0 + [44])
	$3 = *($9 + [4])
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $8) / (int_32)[24]))
	$2 = *($1)
	$9 = *($2)
	
.LOOP $label$6:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	*($2) = $9
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = *($8)
	$4 = *($8 + [4])
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$9:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	$9 = (($6 & [-8]) + $9)
	
.LABEL $label$10
	$5 = *(($8 + [12]))
	$4 = *(($8 + [16]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	
.LOOP $label$11:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$12 }
	$9 = ((((int_32)((uint_32)($6 + [-24]) / (uint_32)[24]) * (int_32)[22]) + $9) + [22])
	
.LABEL $label$12
	$8 = ($8 + [24])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$8 }
	*($2) = $9
	
.LABEL $label$7
	$4 = *($9)
	$9 = *($0 + [48])
	$8 = *($9 + [4])
	$6 = ($8 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	$5 = *($1)
	$9 = *($5)
	
.LOOP $label$13:
	$9 = ($9 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$14 }
	$9 = (($6 & [-8]) + $9)
	
.LABEL $label$14
	*($5) = $9
}

int_32 .FUNC $245 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [32])) = (int_64)1398362884
	*($5) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [640])
	*($5 + [40]) = [0]
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $262(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $263(($5 + [64]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $274(*(($5 + [8])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $279 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $277($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [688])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[12])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $181($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[12])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$5:
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [4])) = $5
	CALL $274($5)
	
.LABEL $label$6
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $7) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $54($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $242 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [672])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_64 .FUNC fmin (float_64 $0, float_64 $1)
{
	int_64 $2
	int_64 $3
	$2 = (CASTING int_64)(float_64 $0)
	if ( ((uint_64)((int_64)$2 & (int_64)9223372036854775807) > (uint_64)(int_64)9218868437227405312) ){ goto $label$2 }
	$3 = (CASTING int_64)(float_64 $1)
	if ( ((uint_64)((int_64)$3 & (int_64)9223372036854775807) <= (uint_64)(int_64)9218868437227405312) ){ goto $label$3 }
	return $0
	
.LABEL $label$3
	if ( ((int_32)(CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)63)) != (int_32)(CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63))) ){ goto $label$1 }
	$1 = ( $0 ? $1 : ((float_64)$0 < (float_64)$1) )
	
.LABEL $label$2
	return $1
	
.LABEL $label$1
	return ( $0 ? $1 : ((int_64)$2 < (int_64)0) )
}

int_32 .FUNC $243 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = *($0 + [4])
	$4 = *($0)
	$16 = ($4 + ((int_32)$5 * (int_32)[24]))
	$11 = ($16 - $1)
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((uint_32)((int_32)$11 / (int_32)[24]) >= (uint_32)$2) ){ goto $label$10 }
	if ( ((int_32)$16 == (int_32)$1) ){ goto $label$12 }
	$13 = (([0] - $4) - ((int_32)$5 * (int_32)[24]))
	$14 = ((int_32)$2 * (int_32)[24])
	$11 = ($1 + [20])
	
.LOOP $label$13:
	$15 = ($11 + [-12])
	*((($10 = ($11 + $14)) + [-12])) = *($15)
	$12 = ($11 + [-20])
	*(($10 + [-20])) = *($12)
	*($15) = [0]
	*($12) = (int_64)0
	*(($15 = ($10 + [-8]))) = (int_64)0
	*($10) = [0]
	$12 = ($11 + [-8])
	*($15) = *($12)
	$15 = ($11 + [-4])
	*(($10 + [-4])) = *($15)
	*($10) = *($11)
	*($15) = [0]
	*($11) = [0]
	*($12) = [0]
	$11 = ($11 + [24])
	if ( ((int_32)($11 + $13) != (int_32)[20]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( (*($1) & [1]) ){ goto $label$9 }
	*($1) = [0]
	goto $label$8 
	
.LABEL $label$11
	*($16) = *($3)
	$11 = ($3 + [8])
	*(($16 + [8])) = *($11)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($11) = [0]
	*($16 + [12]) = [0]
	*(($11 = ($16 + [16]))) = [0]
	*(($10 = ($16 + [20]))) = [0]
	*($16 + [12]) = *($3 + [12])
	*($11) = *(($3 + [16]))
	$11 = ($3 + [20])
	*($10) = *($11)
	*($11) = [0]
	*($3 + [12 align=4]) = (int_64)0
	*(($11 = ($0 + [4]))) = (*($11) + $2)
	return 
	
.LABEL $label$10
	$7 = ((int_32)$2 * (int_32)[-24])
	$11 = ((int_32)$5 * (int_32)[24])
	$8 = ($4 + ($11 + $7))
	$9 = ($4 + $11)
	$6 = ($16 + ((int_32)([0] - $2) * (int_32)[24]))
	$15 = [0]
	
.LOOP $label$14:
	$11 = ($8 + $15)
	*(($10 = ($9 + $15))) = *($11)
	$12 = ($11 + [8])
	*(($10 + [8])) = *($12)
	*($12) = [0]
	*(($11 + [4])) = [0]
	*($11) = [0]
	*(($12 = ($10 + [16]))) = [0]
	*(($13 = ($10 + [12]))) = [0]
	*(($10 = ($10 + [20]))) = [0]
	$14 = ($11 + [12])
	*($13) = *($14)
	$13 = ($11 + [16])
	*($12) = *($13)
	$11 = ($11 + [20])
	*($10) = *($11)
	*($13) = [0]
	*($11) = [0]
	*($14) = [0]
	$15 = ($15 + [24])
	if ( ($7 + $15) ){ goto $label$14 }
	*(($11 = ($0 + [4]))) = (*($11) + $2)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$15 }
	$14 = ((int_32)$2 * (int_32)[-24])
	$7 = ($14 - $1)
	$11 = (($4 + ((int_32)$5 * (int_32)[24])) + [-12])
	
.LOOP $label$16:
	$15 = ($11 + [-12])
	if ( (*($15) & [1]) ){ goto $label$18 }
	*($15) = [0]
	*(($11 + [-11])) = [0]
	goto $label$17 
	
.LABEL $label$18
	*(*(($11 + [-4]))) = [0]
	*(($11 + [-8])) = [0]
	
.LABEL $label$17
	CALL $278($15, [0])
	$10 = ($11 + $14)
	$12 = ($10 + [-4])
	*(($15 + [8])) = *($12)
	$13 = ($10 + [-12])
	*($15) = *($13)
	*($13) = [0]
	*(($10 + [-8])) = [0]
	*($12) = [0]
	$15 = *($11)
	if ( ($15 == 0) ){ goto $label$20 }
	*(($11 + [4])) = $15
	CALL $274($15)
	*(($11 + [8])) = [0]
	*($11) = (int_64)0
	$12 = ($16 + [-4])
	$15 = ($16 + [-8])
	goto $label$19 
	
.LABEL $label$20
	$12 = ($11 + [8])
	$15 = ($11 + [4])
	
.LABEL $label$19
	$16 = ($16 + [-24])
	*($11) = *($10)
	*($15) = *(($10 + [4]))
	$15 = ($10 + [8])
	*($12) = *($15)
	*($15) = [0]
	*($10) = (int_64)0
	$11 = ($11 + [-24])
	if ( ((int_32)($11 + $7) != (int_32)[-12]) ){ goto $label$16 }
	
.LABEL $label$15
	if ( (*($1) & [1]) ){ goto $label$7 }
	*($1) = [0]
	goto $label$6 
	
.LABEL $label$9
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$8
	CALL $278($1, [0])
	$11 = ($3 + [8])
	*(($1 + [8])) = *($11)
	*($1) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($11) = [0]
	$11 = *($1 + [12])
	if ( ($11 == 0) ){ goto $label$5 }
	*(($1 + [16])) = $11
	CALL $274($11)
	*(($15 = ($1 + [20]))) = [0]
	*(($1 + [12])) = (int_64)0
	goto $label$4 
	
.LABEL $label$7
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$6
	CALL $278($1, [0])
	$11 = ($3 + [8])
	*(($1 + [8])) = *($11)
	*($1) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($11) = [0]
	$11 = *($1 + [12])
	if ( ($11 == 0) ){ goto $label$2 }
	*(($1 + [16])) = $11
	CALL $274($11)
	*(($11 = ($1 + [20]))) = [0]
	*(($1 + [12])) = (int_64)0
	goto $label$1 
	
.LABEL $label$5
	$15 = ($1 + [20])
	
.LABEL $label$4
	$11 = ($3 + [12])
	*(($1 + [12])) = *($11)
	$12 = ($3 + [16])
	*(($1 + [16])) = *($12)
	$10 = ($3 + [20])
	*($15) = *($10)
	*($10) = [0]
	*($11) = (int_64)0
	$15 = ($3 + [8])
	*(($16 + [8])) = *($15)
	*($16) = *($3)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($15) = [0]
	*(($15 = ($4 + ((int_32)$5 * (int_32)[24]))) + [12]) = [0]
	*(($16 = ($15 + [16]))) = [0]
	*(($13 = ($15 + [20]))) = [0]
	*($15 + [12]) = *($11)
	*($16) = *($12)
	*($13) = *($10)
	*($10) = [0]
	*($11) = (int_64)0
	*(($11 = ($0 + [4]))) = (*($11) + $2)
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	$11 = ($1 + [20])
	
.LABEL $label$1
	$10 = ($3 + [12])
	*(($1 + [12])) = *($10)
	*(($1 + [16])) = *(($3 + [16]))
	$15 = ($3 + [20])
	*($11) = *($15)
	*($15) = [0]
	*($10) = (int_64)0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $273(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $285($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $274($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $271 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [12534]) == 0) ){ goto $label$2 }
	$7 = *([0] + [12536])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [12534]) = [1]
	$7 = ($7 << [16])
	*([0] + [12536]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [12536])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [12536]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [12534]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [12534]) = [1]
	$3 = ($3 << [16])
	*([0] + [12536]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [12536])
	
.LABEL $label$8
	*([0] + [12536]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $270 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $271($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [12448])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $277 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $273($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $274($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $240 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [640])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [672])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [672])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [672])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $275 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $274 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	*(($2 = *($1))) = (*($2) + [8])
	$2 = *($1)
	$1 = *($2)
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	if ( ($5 == 0) ){ goto $label$2 }
	$0 = *($0)
	$3 = ($0 + ((int_32)$5 * (int_32)[24]))
	
.LOOP $label$3:
	$5 = *($0)
	$7 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	*($2) = $1
	$5 = *($0)
	$5 = ( *(($0 + [4])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$5 }
	$1 = ($5 + $1)
	*($2) = $1
	
.LABEL $label$5
	$4 = *($0 + [12])
	$5 = *(($0 + [16]))
	$6 = ($5 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	$1 = (($6 & [-8]) + $1)
	
.LABEL $label$7
	*($2) = $1
	$0 = ($0 + [24])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = *($0 + [4])
	$7 = *($1 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [464])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$6 = *(($1 + [4]))
	if ( ($6 == 0) ){ goto $label$2 }
	$5 = *($1)
	$6 = ($5 + ((int_32)$6 * (int_32)[24]))
	
.LOOP $label$3:
	CALL $52(CALL $23($0, $5), ($5 + [12]))
	$5 = ($5 + [24])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [464])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [464])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	$10 = *($1 + [4])
	if ( ($10 == 0) ){ goto $label$1 }
	$7 = *($1)
	
.LOOP $label$2:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$3 }
	*(($7 + [16])) = $8
	CALL $274($8)
	
.LABEL $label$3
	$10 = ($10 + [-1])
	if ( ((*($7) & [1]) == 0) ){ goto $label$4 }
	CALL $274(*(($7 + [8])))
	
.LABEL $label$4
	$7 = ($7 + [24])
	if ( $10 ){ goto $label$2 }
	
.LABEL $label$1
	$10 = [0]
	*(($1 + [4])) = [0]
	$8 = *($0 + [4])
	$9 = (int_64)0
	$5 = ($0 + [8])
	
.LOOP $label$5:
	CALL eosio_assert(($8 <= *($5)), [688])
	$2 = ($0 + [4])
	$8 = *($2)
	$7 = *($8)
	$8 = ($8 + [1])
	*($2) = $8
	$10 = ($10 & [255])
	$9 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $10)) | (int_64)$9)
	$10 = ($10 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$5 }
	$8 = (CASTING uint_32)(uint_64 $9)
	if ( ($8 == 0) ){ goto $label$6 }
	$2 = ($11 + [52])
	$4 = ($11 + [56])
	$6 = ($11 + [60])
	
.LOOP $label$7:
	*(($7 = (($11 + [16]) + [8]))) = [0]
	*($11 + [16]) = (int_64)0
	*(($10 = ($11 + [8]))) = [0]
	*($11) = (int_64)0
	CALL $54(CALL $15($0, ($11 + [16])), $11)
	*(($3 = (($11 + [40]) + [8]))) = *($7)
	*($11 + [40]) = *($11 + [16])
	*($11 + [16]) = [0]
	*($11 + [20]) = [0]
	*($7) = [0]
	*($2) = *($11)
	*($4) = *($11 + [4])
	$5 = *($10)
	*($10) = [0]
	*($6) = $5
	*($11 + [4]) = [0]
	*($11) = [0]
	CALL $55(($11 + [32]), $1, ($11 + [40]))
	$10 = *($2)
	if ( ($10 == 0) ){ goto $label$8 }
	*($4) = $10
	CALL $274($10)
	
.LABEL $label$8
	if ( ((*($11 + [40]) & [1]) == 0) ){ goto $label$9 }
	CALL $274(*($3))
	
.LABEL $label$9
	$10 = *($11)
	if ( ($10 == 0) ){ goto $label$10 }
	*($11 + [4]) = $10
	CALL $274($10)
	
.LABEL $label$10
	if ( ((*($11 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $274(*($7))
	
.LABEL $label$11
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [64])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [688])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $59($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [672])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($0) = [0]
	*($7 + [8]) = [0]
	$5 = *($1)
	$5 = CALL $56($1, $5, ($5 + ((int_32)*($1 + [4]) * (int_32)[24])), $2, ($7 + [8]))
	*($0 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = *($1)
	$3 = *($7 + [8])
	$5 = *($1 + [8])
	if ( ((int_32)$5 != (int_32)*(($1 + [4]))) ){ goto $label$6 }
	if ( ((int_32)$5 == (int_32)[178956970]) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[536870911]) ){ goto $label$5 }
	$6 = ((uint_32)($5 << [3]) / (uint_32)[5])
	goto $label$4 
	
.LABEL $label$7
	$1 = *($1)
	$1 = ($1 + ((int_32)((int_32)(*($7 + [8]) - $1) / (int_32)[24]) * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$6
	CALL $58($1, $3, [1], $2)
	goto $label$3 
	
.LABEL $label$5
	$6 = ( [-1] ? ($5 << [3]) : ((uint_32)$5 > (uint_32)[-1610612737]) )
	
.LABEL $label$4
	$6 = ( $6 ? [178956970] : ($6 <= [178956970]) )
	$5 = ($5 + [1])
	$5 = ( $5 ? $6 : ((uint_32)$5 > (uint_32)$6) )
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$1 }
	CALL $57($1, CALL $273(((int_32)$5 * (int_32)[24])), $5, $3, [1], $2)
	
.LABEL $label$3
	$1 = (*($1) + ((int_32)((int_32)($3 - $4) / (int_32)[24]) * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $1
	*([0] + [4]) = ($7 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$7 = ($2 - $1)
	if ( ($7 == 0) ){ goto $label$1 }
	$5 = ($3 + [1])
	$15 = ((int_32)$7 / (int_32)[24])
	$13 = ($3 + [4])
	$14 = ($3 + [8])
	
.LOOP $label$2:
	$10 = ($11 & [1])
	$11 = *($7)
	$6 = uint_32($15 >> [1])
	$7 = ($1 + ((int_32)$6 * (int_32)[24]))
	$11 = ( *($7 + [4]) ? uint_32($11 >> [1]) : $10 )
	$8 = ($7 & [1])
	$7 = *($3)
	$9 = ( *($13) ? uint_32($7 >> [1]) : $8 )
	$12 = ( $9 ? $11 : ($9 <= $11) )
	if ( ($12 == 0) ){ goto $label$5 }
	$8 = CALL memcmp(( *($7 + [8]) ? ($7 + [1]) : $10 ), ( *($14) ? $5 : $8 ), $12)
	if ( ($8 == 0) ){ goto $label$5 }
	if ( ((int_32)$8 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ($11 <= $9) ){ goto $label$3 }
	
.LABEL $label$4
	$15 = $6
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = ($7 + [24])
	$15 = (($15 + [-1]) - $6)
	if ( $15 ){ goto $label$2 }
	
.LABEL $label$1
	*($4) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$15 = ($7 <= $6)
	$11 = ($6 & [1])
	$6 = *($3)
	$6 = ( *($3 + [4]) ? uint_32($6 >> [1]) : $11 )
	$9 = ($7 & [1])
	$7 = *($1)
	$7 = ( *($1 + [4]) ? uint_32($7 >> [1]) : $9 )
	$8 = ( $7 ? $6 : $15 )
	if ( ($8 == 0) ){ goto $label$8 }
	$9 = CALL memcmp(( *($3 + [8]) ? ($3 + [1]) : $11 ), ( *($1 + [8]) ? ($1 + [1]) : $9 ), $8)
	if ( $9 ){ goto $label$7 }
	
.LABEL $label$8
	$9 = ( [-1] ? $15 : ($6 <= $7) )
	
.LABEL $label$7
	return uint_32($9 >> [31])
	
.LABEL $label$6
	return [1]
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$11 = $1
	$12 = *($0)
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$1 }
	$11 = $1
	if ( ($12 == 0) ){ goto $label$1 }
	$10 = $12
	$11 = $1
	
.LOOP $label$2:
	*($11) = *($10)
	$6 = ($10 + [8])
	*(($11 + [8])) = *($6)
	*($10) = [0]
	*(($10 + [4])) = [0]
	*($6) = [0]
	*(($6 = ($11 + [12]))) = [0]
	*(($7 = ($11 + [16]))) = [0]
	*(($8 = ($11 + [20]))) = [0]
	$9 = ($10 + [12])
	*($6) = *($9)
	*($7) = *(($10 + [16]))
	$6 = ($10 + [20])
	*($8) = *($6)
	*($6) = [0]
	*($9) = (int_64)0
	$11 = ($11 + [24])
	$10 = ($10 + [24])
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$1
	*($11) = *($5)
	$10 = ($5 + [8])
	*(($11 + [8])) = *($10)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($10) = [0]
	*($11 + [12]) = [0]
	*(($10 = ($11 + [16]))) = [0]
	*(($6 = ($11 + [20]))) = [0]
	*($11 + [12]) = *($5 + [12])
	*($10) = *(($5 + [16]))
	$10 = ($5 + [20])
	*($6) = *($10)
	*($10) = [0]
	*($5 + [12 align=4]) = (int_64)0
	$10 = ($11 + ((int_32)$4 * (int_32)[24]))
	if ( ($12 == 0) ){ goto $label$3 }
	$11 = *(($0 + [4]))
	$9 = ($12 + ((int_32)$11 * (int_32)[24]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	*($10) = *($3)
	$11 = ($3 + [8])
	*(($10 + [8])) = *($11)
	*($3) = [0]
	*(($3 + [4])) = [0]
	*($11) = [0]
	*(($11 = ($10 + [12]))) = [0]
	*(($6 = ($10 + [16]))) = [0]
	*(($7 = ($10 + [20]))) = [0]
	$8 = ($3 + [12])
	*($11) = *($8)
	*($6) = *(($3 + [16]))
	$11 = ($3 + [20])
	*($7) = *($11)
	*($11) = [0]
	*($8) = (int_64)0
	$10 = ($10 + [24])
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$5 }
	$11 = *(($0 + [4]))
	
.LABEL $label$4
	if ( ($11 == 0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = *(($12 + [12]))
	if ( ($3 == 0) ){ goto $label$8 }
	*(($12 + [16])) = $3
	CALL $274($3)
	
.LABEL $label$8
	$11 = ($11 + [-1])
	if ( ((*($12) & [1]) == 0) ){ goto $label$9 }
	CALL $274(*(($12 + [8])))
	
.LABEL $label$9
	$12 = ($12 + [24])
	if ( $11 ){ goto $label$7 }
	
.LABEL $label$6
	CALL $274(*($0))
	
.LABEL $label$3
	*($0) = $1
	*($0 + [8]) = $2
	*(($0 + [4])) = ((int_32)($10 - $1) / (int_32)[24])
}

int_32 .FUNC $247 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$7 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($9 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [672])
	CALL memcpy(($8 + [8]), $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [672])
	$9 = (($8 + [8]) + [8])
	CALL memcpy($9, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [672])
	$5 = (($8 + [8]) + [16])
	CALL memcpy($5, ($6 + [16]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$6 = *($5)
	$4 = *($9)
	$3 = *($8 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$7 = *((*($1) + $7))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 $4), (int_64 ($6 & [255])), (int_32 $7))
	*([0] + [4]) = ($8 + [32])
	return [1]
}

int_32 .FUNC $173 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [640])
	*($0 + [41]) = [255]
	*($0 + [56 align=4]) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($0 + [72])) = (int_64)0
	*($0 + [80 align=4]) = (int_64)0
	*(($0 + [88])) = [0]
	*($0 + [92]) = $1
	*($6) = *($2 + [4])
	*($6 + [12]) = ($0 + [8])
	*($6 + [8]) = $0
	*($6 + [16]) = ($0 + [9])
	*($6 + [20]) = ($0 + [16])
	*($6 + [24]) = ($0 + [24])
	*($6 + [28]) = ($0 + [40])
	*($6 + [32]) = ($0 + [41])
	*($6 + [36]) = ($0 + [44])
	*($6 + [40]) = ($0 + [48])
	*($6 + [44]) = ($0 + [52])
	*($6 + [48]) = ($0 + [56])
	*($6 + [52]) = ($0 + [68])
	*($6 + [56]) = ($0 + [80])
	CALL $174(($6 + [8]), $6)
	*($0 + [96]) = *(*($2 + [8]))
	*([0] + [4]) = ($6 + [64])
	return $0
}

void .FUNC _ZN5eosio2bk10wusepotionEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$3 = ($0 + [96])
	$4 = CALL $127($3, $1, [144])
	CALL require_auth(*($4 + [32]))
	$5 = ($0 + [416])
	$6 = CALL $150($5, $2, [144])
	if ( (*($4 + [75]) == 0) ){ goto $label$2 }
	$9 = ((int_32)*($6 + [20]) > (int_32)[0])
	goto $label$1 
	
.LABEL $label$2
	$9 = [1]
	
.LABEL $label$1
	CALL eosio_assert($9, [3168])
	$9 = ($0 + [56])
	$7 = CALL $8($9, *(($4 + [32])), [144])
	$9 = CALL $8($9, *($0), [144])
	*(($8 = (($10 + [32]) + [8]))) = *(($6 + [40]))
	$2 = *($6 + [32])
	*((($10 + [8]) + [12])) = *((($10 + [32]) + [12]))
	*((($10 + [8]) + [8])) = *($8)
	*($10 + [32]) = $2
	*($10 + [12]) = *($10 + [36])
	*($10 + [8]) = *($10 + [32])
	CALL _ZN5eosio2bk16transfer_balanceERKNS0_6playerES3_NS_5assetE($0, $7, $9, ($10 + [8]))
	*($10 + [24]) = $6
	CALL $153($5, $6, ($10 + [24]))
	*($10 + [28]) = $4
	*($10 + [24]) = $6
	CALL $154($3, $4, ($10 + [24]))
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [64])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = *($1)
	$6 = $3
	$5 = [1]
	$2 = *($2)
	if ( ((int_32)*($2 + [48]) == (int_32)[65535]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($2 + [50]) != (int_32)[0]), [3280])
	$6 = *($1)
	$5 = [65535]
	
.LABEL $label$1
	*($1 + [50]) = (*($1 + [50]) + $5)
	CALL eosio_assert(((int_64)$3 == (int_64)$6), [400])
	$5 = *($1 + [8])
	$2 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($2 + [38])
	$6 = (CASTING uint_64)(uint_32 $2)
	$2 = ($1 + [8])
	$4 = ($1 + [50])
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	*($8 + [16]) = $8
	*($8 + [28]) = $2
	*($8 + [24]) = $1
	*($8 + [32]) = ($1 + [20])
	*($8 + [36]) = ($1 + [22])
	*($8 + [40]) = ($1 + [24])
	*($8 + [44]) = ($1 + [26])
	*($8 + [48]) = ($1 + [28])
	*($8 + [52]) = ($1 + [32])
	*($8 + [56]) = ($1 + [48])
	*($8 + [60]) = $4
	CALL $39(($8 + [24]), ($8 + [16]))
	CALL db_update_i64(*($1 + [56]), (int_64)0, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $150 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$0), [480])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3645216042923327488, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $37($0, $5)
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$0), [480])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC _ZN5eosio2bk11wchecklevelERNS0_7warriorE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	float_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (*($1 + [22]) <= (CASTING uint_32)(float_64 ((float_64)CALL pow((float_64)1.6, (CASTING float_64)(int_32 (*($1 + [20]) + [1]))) * (float_64)(float_64)100))) ){ goto $label$1 }
	$2 = ($0 + [16])
	$3 = ($1 + [20])
	$5 = ($1 + [22])
	$6 = ($0 + [40])
	$7 = ($0 + [44])
	$8 = ($0 + [24])
	$10 = ($1 + [48])
	
.LOOP $label$2:
	$4 = CALL pow((float_64)1.6, (CASTING float_64)(int_32 (*($3) + [1])))
	*($3) = (*($3) + [1])
	*($5) = (*($5) - (CASTING uint_32)(float_64 ((float_64)$4 * (float_64)(float_64)100)))
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)*($6)) ){ goto $label$4 }
	$0 = *(($0 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$2), [480])
	goto $label$3 
	
.LABEL $label$4
	$0 = [0]
	$9 = CALL db_find_i64(*($2), *($8), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $82($2, $9)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$2), [480])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [1664])
	*(($9 = ($1 + [24]))) = (*($9) + *($0 + [9]))
	*($10) = (CASTING uint_32)(float_64 ((float_64)(CASTING float_64)(uint_32 *($10)) * (float_64)(float_64)1.1))
	if ( ((uint_32)*($5) >= (uint_32)(CASTING uint_32)(float_64 ((float_64)CALL pow((float_64)1.6, (CASTING float_64)(int_32 (*($3) + [1]))) * (float_64)(float_64)100))) ){ goto $label$2 }
	
.LABEL $label$1
}

void .FUNC $156 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$28 = (*([0] + [4]) - [144])
	*([0] + [4]) = $28
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = ($1 + [32])
	*(($29 = $28) + [16]) = *($3)
	$4 = ($1 + [88])
	*($29 + [24]) = *($4)
	$5 = *($1)
	$6 = ($1 + [8])
	CALL $276($6, *($2))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [400])
	*($29 + [32]) = [0]
	*($29) = ($29 + [32])
	*($29 + [44]) = $6
	*($29 + [40]) = $1
	$7 = ($1 + [20])
	*($29 + [48]) = $7
	$8 = ($1 + [22])
	*($29 + [52]) = $8
	$9 = ($1 + [24])
	*($29 + [56]) = $9
	*($29 + [60]) = $3
	$10 = ($1 + [40])
	*($29 + [64]) = $10
	$11 = ($1 + [48])
	*($29 + [68]) = $11
	$12 = ($1 + [50])
	*($29 + [72]) = $12
	$13 = ($1 + [52])
	*($29 + [76]) = $13
	$14 = ($1 + [54])
	*($29 + [80]) = $14
	$15 = ($1 + [56])
	*($29 + [84]) = $15
	$16 = ($1 + [58])
	*($29 + [88]) = $16
	$17 = ($1 + [60])
	*($29 + [92]) = $17
	$18 = ($1 + [64])
	*($29 + [96]) = $18
	$19 = ($1 + [68])
	*($29 + [100]) = $19
	$20 = ($1 + [72])
	*($29 + [104]) = $20
	$21 = ($1 + [73])
	*($29 + [108]) = $21
	$22 = ($1 + [74])
	*($29 + [112]) = $22
	$23 = ($1 + [75])
	*($29 + [116]) = $23
	$24 = ($1 + [80])
	*($29 + [120]) = $24
	*($29 + [124]) = $4
	$25 = ($1 + [96])
	*($29 + [128]) = $25
	$26 = ($1 + [112])
	*($29 + [132]) = $26
	$27 = ($1 + [116])
	*($29 + [136]) = $27
	CALL $108(($29 + [40]), $29)
	$2 = *($29 + [32])
	if ( ($2 <= [513]) ){ goto $label$2 }
	$28 = CALL malloc($2)
	goto $label$1 
	
.LABEL $label$2
	$28 = ($28 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $28
	
.LABEL $label$1
	*($29 + [4]) = $28
	*($29) = $28
	*($29 + [8]) = ($28 + $2)
	*($29 + [32]) = $29
	*($29 + [44]) = $6
	*($29 + [48]) = $7
	*($29 + [52]) = $8
	*($29 + [56]) = $9
	*($29 + [60]) = $3
	*($29 + [64]) = $10
	*($29 + [40]) = $1
	*($29 + [68]) = $11
	*($29 + [72]) = $12
	*($29 + [76]) = $13
	*($29 + [80]) = $14
	*($29 + [84]) = $15
	*($29 + [88]) = $16
	*($29 + [92]) = $17
	*($29 + [96]) = $18
	*($29 + [100]) = $19
	*($29 + [104]) = $20
	*($29 + [108]) = $21
	*($29 + [112]) = $22
	*($29 + [116]) = $23
	*($29 + [120]) = $24
	*($29 + [124]) = $4
	*($29 + [128]) = $25
	*($29 + [132]) = $26
	*($29 + [136]) = $27
	CALL $109(($29 + [40]), ($29 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $28, $2)
	if ( ($2 <= [513]) ){ goto $label$3 }
	CALL free($28)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$28 = (($29 + [16]) + [8])
	*($29 + [40]) = *($3)
	if ( (CALL memcmp(($29 + [16]), ($29 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [136])
	$2 = *($3)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$6 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($29 + [32]), $5)
	*($3) = $2
	
.LABEL $label$6
	CALL db_idx64_update($2, (int_64)0, ($29 + [40]))
	
.LABEL $label$5
	*($29 + [40]) = *($4)
	if ( (CALL memcmp($28, ($29 + [40]), [8]) == 0) ){ goto $label$7 }
	$28 = ($1 + [140])
	$1 = *($28)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($29 + [32]), $5)
	*($28) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, (int_64)0, ($29 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($29 + [144])
}

int_64 .FUNC _ZN5eosio2bk7bcreateEyNS_5assetEh (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	*($8 + [48]) = $1
	*($8 + [47]) = $3
	CALL require_auth($1)
	$7 = ($0 + [256])
	$3 = [0]
	$1 = (int_64)0
	$6 = ($0 + [264])
	$5 = CALL db_lowerbound_i64(*($0 + [256]), *($6), (int_64)4157834741199929344, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	CALL $158($7, $5)
	$1 = ((int_64)*(CALL $158($7, CALL $fimport$27(*($7), *($6), (int_64)4157834741199929344, (int_64)0))) + (int_64)-1)
	
.LABEL $label$1
	*($8 + [32]) = $1
	$1 = *($0)
	*($8) = $0
	*($8 + [12]) = $2
	*($8 + [4]) = ($8 + [32])
	*($8 + [8]) = ($8 + [48])
	*($8 + [16]) = ($8 + [47])
	*($8 + [88]) = $1
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$15()), [1104])
	*($8 + [64]) = $7
	*($8 + [68]) = $8
	*($8 + [72]) = ($8 + [88])
	*(($6 = CALL $273([104])) + [32]) = (int_64)1398362884
	*($6 + [24]) = (int_64)0
	CALL eosio_assert([1], [576])
	$1 = (int_64)5462355
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	CALL eosio_assert($5, [640])
	*($6 + [41]) = [255]
	*($6 + [56 align=4]) = (int_64)0
	*($6 + [64 align=4]) = (int_64)0
	*($6 + [72 align=4]) = (int_64)0
	*($6 + [80 align=4]) = (int_64)0
	*($6 + [88]) = [0]
	*($6 + [92]) = $7
	CALL $159(($8 + [64]), $6)
	*($8 + [80]) = $6
	$1 = *($6)
	*($8 + [64]) = $1
	$5 = *($6 + [96])
	*($8 + [60]) = $5
	$4 = ($0 + [284])
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [288]))) ){ goto $label$8 }
	*($3 + [8]) = $1
	*($3 + [16]) = $5
	*($8 + [80]) = [0]
	*($3) = $6
	*($4) = ($3 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $160(($0 + [280]), ($8 + [80]), ($8 + [64]), ($8 + [60]))
	
.LABEL $label$7
	*($8 + [28]) = $6
	*($8 + [24]) = $7
	$3 = *($8 + [80])
	*($8 + [80]) = [0]
	if ( ($3 == 0) ){ goto $label$9 }
	CALL $161($3)
	CALL $274($3)
	
.LABEL $label$9
	$4 = *(($0 + [360]))
	$7 = *(($0 + [364]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$10 }
	$3 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$11:
	if ( (int_64)(*(*($3)) == 0) ){ goto $label$10 }
	$7 = $3
	$6 = ($3 + [-24])
	$3 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = ($0 + [336])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$13 }
	$3 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [20]) == (int_32)$6), [480])
	goto $label$12 
	
.LABEL $label$13
	$3 = [0]
	$7 = CALL db_find_i64(*(($0 + [336])), *(($0 + [344])), (int_64)6761208827670605824, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$12 }
	$3 = CALL $48($6, $7)
	CALL eosio_assert(((int_32)*($3 + [20]) == (int_32)$6), [480])
	
.LABEL $label$12
	*($8) = $2
	*($8 + [4]) = ($8 + [47])
	*($8 + [8]) = ($8 + [24])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1616])
	CALL $162($6, $3, $8)
	$1 = *(*($8 + [28]))
	*([0] + [4]) = ($8 + [96])
	return $1
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_64 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	$31 = (*([0] + [4]) - [144])
	*([0] + [4]) = $31
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = ($1 + [32])
	*(($30 = $31) + [16]) = *($3)
	$4 = ($1 + [88])
	*($30 + [24]) = *($4)
	$5 = *($1)
	if ( ((int_32)*(*($2) + [20]) < (int_32)[1]) ){ goto $label$2 }
	$26 = *($1 + [50])
	$27 = CALL current_time()
	CALL eosio_assert(((uint_32)*($1 + [48]) > (uint_32)($26 + ((uint_32)((int_32)((uint_32)((int_32)((CASTING uint_32)(uint_64 ((uint_64)$27 / (uint_64)(int_64)1000000)) - *($1 + [112])) * (int_32)[1000]) / (uint_32)[60]) * (int_32)*($1 + [56])) / (uint_32)[1000]))), [3200])
	*($1 + [50]) = (CASTING uint_32)(float_64 ((float_64)CALL fmin((CASTING float_64)(int_32 *(*($2) + [20])), (CASTING float_64)(int_32 (*($1 + [48]) - *($1 + [50])))) + (float_64)(CASTING float_64)(uint_32 *($1 + [50]))))
	$28 = ($1 + [80])
	$29 = ($1 + [75])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [75]) = [1]
	*($1 + [80]) = *(*($2))
	$26 = *($2)
	$28 = *($26 + [20])
	if ( ((int_32)$28 > (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)(*(*($2 + [4]) + [48]) + $28) > (int_32)[0]), [3248])
	*($1 + [48]) = (*($1 + [48]) + *(*($2) + [20]))
	$26 = *($2)
	
.LABEL $label$3
	$28 = *($26 + [22])
	if ( ($28 == 0) ){ goto $label$4 }
	CALL eosio_assert(((int_32)(*(*($2 + [4]) + [52]) + $28) > (int_32)[0]), [3248])
	*($1 + [52]) = (*($1 + [52]) + *(*($2) + [22]))
	$26 = *($2)
	
.LABEL $label$4
	$28 = *($26 + [24])
	if ( ($28 == 0) ){ goto $label$5 }
	CALL eosio_assert(((int_32)uint_32((*(*($2 + [4]) + [54]) + $28) >> [31]) ^ (int_32)[1]), [3248])
	*($1 + [54]) = (*($1 + [54]) + *(*($2) + [24]))
	$26 = *($2)
	
.LABEL $label$5
	$28 = *($26 + [26])
	if ( ($28 == 0) ){ goto $label$6 }
	CALL eosio_assert(((*(*($2 + [4]) + [58]) + $28) <= [51]), [3248])
	*($1 + [58]) = (*($1 + [58]) + *(*($2) + [26]))
	$26 = *($2)
	
.LABEL $label$6
	$28 = ($1 + [80])
	$29 = ($1 + [75])
	$26 = *($26 + [28])
	if ( ($26 == 0) ){ goto $label$1 }
	CALL eosio_assert(((*(*($2 + [4]) + [60]) + $26) <= [51]), [3248])
	*($1 + [60]) = (*($1 + [60]) + *(*($2) + [28]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [400])
	*($30 + [32]) = [0]
	*($30) = ($30 + [32])
	$6 = ($1 + [8])
	*($30 + [44]) = $6
	*($30 + [40]) = $1
	$7 = ($1 + [20])
	*($30 + [48]) = $7
	$8 = ($1 + [22])
	*($30 + [52]) = $8
	$9 = ($1 + [24])
	*($30 + [56]) = $9
	*($30 + [60]) = $3
	$10 = ($1 + [40])
	*($30 + [64]) = $10
	$11 = ($1 + [48])
	*($30 + [68]) = $11
	$12 = ($1 + [50])
	*($30 + [72]) = $12
	$13 = ($1 + [52])
	*($30 + [76]) = $13
	$14 = ($1 + [54])
	*($30 + [80]) = $14
	$15 = ($1 + [56])
	*($30 + [84]) = $15
	$16 = ($1 + [58])
	*($30 + [88]) = $16
	$17 = ($1 + [60])
	*($30 + [92]) = $17
	$18 = ($1 + [64])
	*($30 + [96]) = $18
	$19 = ($1 + [68])
	*($30 + [100]) = $19
	$20 = ($1 + [72])
	*($30 + [104]) = $20
	$21 = ($1 + [73])
	*($30 + [108]) = $21
	$22 = ($1 + [74])
	*($30 + [112]) = $22
	*($30 + [116]) = $29
	*($30 + [120]) = $28
	*($30 + [124]) = $4
	$23 = ($1 + [96])
	*($30 + [128]) = $23
	$24 = ($1 + [112])
	*($30 + [132]) = $24
	$25 = ($1 + [116])
	*($30 + [136]) = $25
	CALL $108(($30 + [40]), $30)
	$26 = *($30 + [32])
	if ( ($26 <= [513]) ){ goto $label$8 }
	$2 = CALL malloc($26)
	goto $label$7 
	
.LABEL $label$8
	$2 = ($31 - (($26 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$7
	*($30 + [4]) = $2
	*($30) = $2
	*($30 + [8]) = ($2 + $26)
	*($30 + [32]) = $30
	*($30 + [44]) = $6
	*($30 + [48]) = $7
	*($30 + [52]) = $8
	*($30 + [56]) = $9
	*($30 + [60]) = $3
	*($30 + [64]) = $10
	*($30 + [40]) = $1
	*($30 + [68]) = $11
	*($30 + [72]) = $12
	*($30 + [76]) = $13
	*($30 + [80]) = $14
	*($30 + [84]) = $15
	*($30 + [88]) = $16
	*($30 + [92]) = $17
	*($30 + [96]) = $18
	*($30 + [100]) = $19
	*($30 + [104]) = $20
	*($30 + [108]) = $21
	*($30 + [112]) = $22
	*($30 + [116]) = $29
	*($30 + [120]) = $28
	*($30 + [124]) = $4
	*($30 + [128]) = $23
	*($30 + [132]) = $24
	*($30 + [136]) = $25
	CALL $109(($30 + [40]), ($30 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $2, $26)
	if ( ($26 <= [513]) ){ goto $label$9 }
	CALL free($2)
	
.LABEL $label$9
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$2 = ($30 + [24])
	*($30 + [40]) = *($3)
	if ( (CALL memcmp(($30 + [16]), ($30 + [40]), [8]) == 0) ){ goto $label$11 }
	$3 = ($1 + [136])
	$26 = *($3)
	if ( ((int_32)$26 > (int_32)[-1]) ){ goto $label$12 }
	$26 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($30 + [32]), $5)
	*($3) = $26
	
.LABEL $label$12
	CALL db_idx64_update($26, (int_64)0, ($30 + [40]))
	
.LABEL $label$11
	*($30 + [40]) = *($4)
	if ( (CALL memcmp($2, ($30 + [40]), [8]) == 0) ){ goto $label$13 }
	$2 = ($1 + [140])
	$1 = *($2)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$14 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($30 + [32]), $5)
	*($2) = $1
	
.LABEL $label$14
	CALL db_idx64_update($1, (int_64)0, ($30 + [40]))
	
.LABEL $label$13
	*([0] + [4]) = ($30 + [144])
}

void .FUNC _ZN5eosio2bk7setnameEyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($2)
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = uint_32($3 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($3 <= [13]), [3312])
	$0 = ($0 + [96])
	$3 = CALL $127($0, $1, [144])
	CALL require_auth(*($3 + [32]))
	*($4 + [8]) = $2
	CALL $156($0, $3, ($4 + [8]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $273([104])
	$6 = CALL $173($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [96])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $160(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $161($4)
	CALL $274($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [80])
	$18 = $19
	*([0] + [4]) = $19
	$2 = *($0)
	$17 = *($0 + [4])
	$16 = *(*($17 + [4]))
	if ( ((int_64)$16 > (int_64)-1) ){ goto $label$1 }
	$15 = *($17)
	$7 = ($15 + [272])
	$16 = *($7)
	if ( ((int_64)$16 != (int_64)-1) ){ goto $label$2 }
	$16 = (int_64)0
	$6 = ($15 + [256])
	$5 = CALL db_lowerbound_i64(*($6), *(($15 + [264])), (int_64)4157834741199929344, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	CALL $158($6, $5)
	*($18 + [28]) = [0]
	*($18 + [24]) = $6
	$16 = *(*(CALL $166(($18 + [24])) + [4]))
	$16 = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*(($15 + [272])) = $16
	
.LABEL $label$2
	CALL eosio_assert((uint_64)($16 <= (int_64)-2), [1168])
	$16 = *($7)
	
.LABEL $label$1
	*($1) = $16
	*($1 + [16]) = *(*($17 + [8]))
	$15 = *($17 + [12])
	*($1 + [24]) = *($15)
	*(($1 + [32])) = *(($15 + [8]))
	*($1 + [8]) = *(*($17 + [16]))
	*($1 + [9]) = (*(*($17 + [16])) << [1])
	*($18 + [32]) = [0]
	*($18 + [24]) = (int_64)0
	$7 = ($1 + [56])
	$15 = ($1 + [60])
	$17 = *($15)
	if ( ((uint_32)$17 >= (uint_32)*(($1 + [64]))) ){ goto $label$5 }
	*($17) = (int_64)0
	*($17 + [8]) = [0]
	*($17) = *($18 + [24])
	*($17 + [4]) = *($18 + [28])
	$6 = (($18 + [24]) + [8])
	*($17 + [8]) = *($6)
	*($6) = [0]
	*($18 + [28]) = [0]
	*($18 + [24]) = [0]
	*($15) = (*($15) + [12])
	goto $label$4 
	
.LABEL $label$5
	CALL $167($7, ($18 + [24]))
	$17 = *($18 + [24])
	if ( ($17 == 0) ){ goto $label$4 }
	*($18 + [28]) = $17
	CALL $274($17)
	
.LABEL $label$4
	$6 = ($1 + [9])
	$5 = ($1 + [8])
	$4 = ($1 + [24])
	$3 = ($1 + [16])
	*($18 + [32]) = [0]
	*($18 + [24]) = (int_64)0
	$15 = ($1 + [60])
	$17 = *($15)
	if ( ((uint_32)$17 >= (uint_32)*(($1 + [64]))) ){ goto $label$7 }
	*($17) = (int_64)0
	*($17 + [8]) = [0]
	*($17) = *($18 + [24])
	*($17 + [4]) = *($18 + [28])
	$8 = ($18 + [32])
	*($17 + [8]) = *($8)
	*($8) = [0]
	*($18 + [28]) = [0]
	*($18 + [24]) = [0]
	*($15) = (*($15) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $167($7, ($18 + [24]))
	$17 = *($18 + [24])
	if ( ($17 == 0) ){ goto $label$6 }
	*($18 + [28]) = $17
	CALL $274($17)
	
.LABEL $label$6
	*($18 + [16]) = [0]
	*($18) = ($18 + [16])
	*($18 + [28]) = $5
	*($18 + [32]) = $6
	*($18 + [36]) = $3
	*($18 + [40]) = $4
	*($18 + [24]) = $1
	$8 = ($1 + [40])
	*($18 + [44]) = $8
	$9 = ($1 + [41])
	*($18 + [48]) = $9
	$10 = ($1 + [44])
	*($18 + [52]) = $10
	$11 = ($1 + [48])
	*($18 + [56]) = $11
	$12 = ($1 + [52])
	*($18 + [60]) = $12
	*($18 + [64]) = $7
	$13 = ($1 + [68])
	*($18 + [68]) = $13
	$14 = ($1 + [80])
	*($18 + [72]) = $14
	CALL $168(($18 + [24]), $18)
	$15 = *($18 + [16])
	if ( ($15 <= [513]) ){ goto $label$9 }
	$17 = CALL malloc($15)
	goto $label$8 
	
.LABEL $label$9
	$17 = ($19 - (($15 + [15]) & [-16]))
	*([0] + [4]) = $17
	
.LABEL $label$8
	*($18 + [4]) = $17
	*($18) = $17
	*($18 + [8]) = ($17 + $15)
	*($18 + [16]) = $18
	*($18 + [28]) = $5
	*($18 + [24]) = $1
	*($18 + [32]) = $6
	*($18 + [36]) = $3
	*($18 + [40]) = $4
	*($18 + [44]) = $8
	*($18 + [48]) = $9
	*($18 + [52]) = $10
	*($18 + [56]) = $11
	*($18 + [60]) = $12
	*($18 + [64]) = $7
	*($18 + [68]) = $13
	*($18 + [72]) = $14
	CALL $169(($18 + [24]), ($18 + [16]))
	$16 = *($1)
	*($1 + [96]) = CALL db_store_i64(*($2 + [8]), (int_64)4157834741199929344, *(*($0 + [8])), $16, $17, $15)
	if ( ($15 <= [513]) ){ goto $label$10 }
	CALL free($17)
	
.LABEL $label$10
	if ( (uint_64)($16 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($18 + [80])
}

int_32 .FUNC $273 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [12540])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [12432])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [12240]
	$1 = (((int_32)$2 * (int_32)[12]) + [12240])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ((int_32)($6 - $5) / (int_32)[24])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$2 = ((int_32)($2 - $5) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $273(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [24])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $285($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$6 * (int_32)[24]))
	$5 = ($2 + ((int_32)$3 * (int_32)[24]))
	$6 = $5
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $274($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $224 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [80])
	$17 = $18
	*([0] + [4]) = $18
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = *($1)
	*(($1 + [84])) = *($1 + [80])
	$4 = *($2 + [12])
	$13 = *($2)
	if ( ((int_32)*(($13 + [12])) == (int_32)*($13 + [8])) ){ goto $label$1 }
	$12 = ($13 + [8])
	$13 = ($1 + [72])
	$15 = *($13)
	if ( ((int_32)$15 == (int_32)*(($1 + [76]))) ){ goto $label$2 }
	CALL $216($15, $12)
	*($13) = (*($13) + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $229(($1 + [68]), $12)
	
.LABEL $label$1
	$15 = *(*($2 + [8]) + [8])
	$13 = *($2 + [4])
	$12 = *($13)
	if ( ((int_32)*($12) == (int_32)$15) ){ goto $label$7 }
	if ( ((int_32)*($12 + [1]) != (int_32)$15) ){ goto $label$6 }
	
.LABEL $label$7
	*($17 + [8]) = (int_64)0
	*($17 + [16]) = [0]
	$12 = (*($13 + [4]) - *($13))
	if ( ($12 == 0) ){ goto $label$8 }
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$5 }
	$15 = CALL $273($12)
	*(($17 + [16])) = ($15 + $12)
	*($17 + [12]) = $15
	*($17 + [8]) = $15
	$12 = *($13)
	$13 = (*(($13 + [4])) - $12)
	if ( ((int_32)$13 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($15, $12, $13)
	*($17 + [12]) = ($15 + $13)
	
.LABEL $label$8
	CALL _ZN5eosio2bk13finish_battleERNS0_6battleENSt3__16vectorIhNS3_9allocatorIhEEEE($4, $1, ($17 + [8]))
	$13 = *($17 + [8])
	if ( ($13 == 0) ){ goto $label$9 }
	*($17 + [12]) = $13
	CALL $274($13)
	
.LABEL $label$9
	CALL $231(($4 + [296]), *($2))
	$16 = ($1 + [44])
	goto $label$3 
	
.LABEL $label$6
	$16 = ($1 + [44])
	if ( (((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($1 + [44])) <= [601]) ){ goto $label$12 }
	$9 = ($2 + [4])
	CALL $232(*($9), [3920], [3922])
	$10 = ($2 + [8])
	$15 = *($10)
	$13 = *($15 + [56])
	if ( ((int_32)*($13 + [4]) == (int_32)*($13)) ){ goto $label$13 }
	$12 = [0]
	$11 = ($2 + [16])
	$14 = [0]
	
.LOOP $label$14:
	$13 = CALL $223(*($11), *((*($13) + $12)))
	*(($15 = *(*($9)))) = (*($15) + *($13 + [8]))
	$12 = ($12 + [8])
	$15 = *($10)
	$13 = *($15 + [56])
	$14 = ($14 + [1])
	if ( ($14 <= int_32((*($13 + [4]) - *($13)) >> [3])) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)*(($13 + [16])) == (int_32)*($13 + [12])) ){ goto $label$15 }
	$12 = [0]
	$9 = ($2 + [4])
	$14 = [0]
	
.LOOP $label$16:
	$13 = CALL $223(*(($2 + [16])), *((*($13 + [12]) + $12)))
	*(($15 = *(*($9))) + [1]) = (*($15 + [1]) + *($13 + [8]))
	$12 = ($12 + [8])
	$15 = *(($2 + [8]))
	$13 = *($15 + [56])
	$14 = ($14 + [1])
	if ( ($14 <= int_32((*(($13 + [16])) - *($13 + [12])) >> [3])) ){ goto $label$16 }
	
.LABEL $label$15
	$12 = *($12 + [1])
	$13 = *(($2 + [4]))
	$12 = *($13)
	$14 = *($12)
	if ( ((int_32)$14 != (int_32)$12) ){ goto $label$11 }
	$12 = *($15 + [8])
	*($17 + [8]) = $12
	*($17 + [9]) = $12
	CALL $232($13, ($17 + [8]), ($17 + [10]))
	goto $label$10 
	
.LABEL $label$12
	*($1 + [40]) = (*($1 + [40]) + [1])
	*($1 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL _ZN5eosio2bk20apply_round_check_txEy($4, *(*($2 + [20])))
	CALL $233(($4 + [296]), *($2))
	goto $label$3 
	
.LABEL $label$11
	$15 = *($15 + [8])
	if ( ((uint_32)$14 <= (uint_32)$12) ){ goto $label$17 }
	*($17 + [9]) = $15
	*($17 + [8]) = [0]
	CALL $232($13, ($17 + [8]), ($17 + [10]))
	goto $label$10 
	
.LABEL $label$17
	*($17 + [9]) = [0]
	*($17 + [8]) = $15
	CALL $232($13, ($17 + [8]), ($17 + [10]))
	
.LABEL $label$10
	*($17 + [64]) = [0]
	*($17 + [68 align=4]) = (int_64)0
	$13 = *(($2 + [4]))
	$12 = (*($13 + [4]) - *($13))
	if ( ($12 == 0) ){ goto $label$18 }
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$4 }
	$15 = CALL $273($12)
	*(($17 + [72])) = ($15 + $12)
	*($17 + [68]) = $15
	*($17 + [64]) = $15
	$12 = *($13)
	$13 = (*(($13 + [4])) - $12)
	if ( ((int_32)$13 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($15, $12, $13)
	*($17 + [68]) = (*($17 + [68]) + $13)
	
.LABEL $label$18
	CALL _ZN5eosio2bk13finish_battleERNS0_6battleENSt3__16vectorIhNS3_9allocatorIhEEEE($4, $1, ($17 + [64]))
	$13 = *($17 + [64])
	if ( ($13 == 0) ){ goto $label$19 }
	*($17 + [68]) = $13
	CALL $274($13)
	
.LABEL $label$19
	CALL $231(($4 + [296]), *($2))
	goto $label$3 
	
.LABEL $label$5
	CALL $285(($17 + [8]))
	
.LABEL $label$4
	CALL $285(($17 + [64]))
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [400])
	*($17) = [0]
	*($17 + [64]) = $17
	$12 = ($1 + [8])
	*($17 + [12]) = $12
	*($17 + [8]) = $1
	$15 = ($1 + [9])
	*($17 + [16]) = $15
	$14 = ($1 + [16])
	*($17 + [20]) = $14
	$4 = ($1 + [24])
	*($17 + [24]) = $4
	$9 = ($1 + [40])
	*($17 + [28]) = $9
	$10 = ($1 + [41])
	*($17 + [32]) = $10
	*($17 + [36]) = $16
	$11 = ($1 + [48])
	*($17 + [40]) = $11
	$6 = ($1 + [52])
	*($17 + [44]) = $6
	$7 = ($1 + [56])
	*($17 + [48]) = $7
	$8 = ($1 + [68])
	*($17 + [52]) = $8
	$5 = ($1 + [80])
	*($17 + [56]) = $5
	CALL $168(($17 + [8]), ($17 + [64]))
	$2 = *($17)
	if ( ($2 <= [513]) ){ goto $label$21 }
	$13 = CALL malloc($2)
	goto $label$20 
	
.LABEL $label$21
	$13 = ($18 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $13
	
.LABEL $label$20
	*($17 + [68]) = $13
	*($17 + [64]) = $13
	*($17 + [72]) = ($13 + $2)
	*($17) = ($17 + [64])
	*($17 + [12]) = $12
	*($17 + [16]) = $15
	*($17 + [20]) = $14
	*($17 + [24]) = $4
	*($17 + [28]) = $9
	*($17 + [32]) = $10
	*($17 + [8]) = $1
	*($17 + [36]) = $16
	*($17 + [40]) = $11
	*($17 + [44]) = $6
	*($17 + [48]) = $7
	*($17 + [52]) = $8
	*($17 + [56]) = $5
	CALL $169(($17 + [8]), $17)
	CALL db_update_i64(*($1 + [96]), (int_64)0, $13, $2)
	if ( ($2 <= [513]) ){ goto $label$22 }
	CALL free($13)
	
.LABEL $label$22
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$23 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*([0] + [4]) = ($17 + [80])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $183 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [92]) == (int_32)$0), [480])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4157834741199929344, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $158($0, $5)
	CALL eosio_assert(((int_32)*($6 + [92]) == (int_32)$0), [480])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7955357921610170365, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $71($4, CALL $fimport$18(*($4), *($4 + [8]), (int_64)-7955357921610170368, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	
.LABEL $label$4
	*(($2 + [68])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7955357921610170366, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $71($4, CALL $fimport$18(*($4), *($4 + [8]), (int_64)-7955357921610170368, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	
.LABEL $label$4
	*(($2 + [64])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $248 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$5 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	*($7 + [10]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [672])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [672])
	$8 = ($7 + [8])
	CALL memcpy($8, ($5 + [8]), [1])
	CALL eosio_assert(((uint_32)($1 + [-9]) > (uint_32)[1]), [672])
	$4 = ($7 + [10])
	CALL memcpy($4, ($5 + [9]), [2])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($5)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($4)
	$8 = *($8)
	$3 = *($7)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ($8 & [255])), (int_32 ($5 & [65535])), (int_32 $6))
	*([0] + [4]) = ($7 + [16])
	return [1]
}

void .FUNC $225 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	*((($6 = *(($1 + [20]))) + ((int_32)*(*($2)) * (int_32)[24])) + [20]) = *(*($2 + [4]))
	$3 = *($1)
	*(($6 + ((int_32)*(*($2 + [8])) * (int_32)[24])) + [18]) = *(*($2 + [4]))
	CALL eosio_assert([1], [400])
	$5 = *($1 + [8])
	$4 = *(($1 + [12]))
	$7 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$2 = [8]
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$6 = ($1 + [20])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$2 }
	$2 = (($7 & [-8]) + $2)
	
.LABEL $label$2
	$5 = *($6)
	$4 = *(($1 + [24]))
	$7 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[24]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	$2 = ((((int_32)((uint_32)($7 + [-24]) / (uint_32)[24]) * (int_32)[22]) + $2) + [22])
	
.LABEL $label$4
	if ( ($2 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($2)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10) = $9
	*($10 + [8]) = ($9 + $2)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [464])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $52($10, ($1 + [8]))
	CALL $171($10, $6)
	CALL db_update_i64(*($1 + [36]), (int_64)0, $9, $2)
	if ( ($2 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [1584])
	$8 = *($0 + [4])
	$6 = *(($8 + [76]))
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-7955357921610170363, ($9 + [8]), *($8))
	*((*(($0 + [4])) + [76])) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [480])
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	$6 = CALL db_find_i64(*($2), *($2 + [8]), (int_64)-7955357921610170368, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $71($2, $6)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [480])
	
.LABEL $label$5
	*(($7 + [76])) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $273(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $285($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $274($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7955357921610170367, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $71($4, CALL $fimport$18(*($4), *($4 + [8]), (int_64)-7955357921610170368, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	
.LABEL $label$4
	*(($2 + [60])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN5eosio2bk7giftboxEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	*($9 + [16]) = $1
	$3 = ($0 + [456])
	$4 = CALL $74($3, $2, [144])
	$2 = *($0)
	*($9) = $0
	*($9 + [8]) = $4
	*($9 + [4]) = ($9 + [16])
	*($9 + [56]) = $2
	CALL eosio_assert(((int_64)*($0 + [456]) == (int_64)CALL $fimport$15()), [1104])
	*($9 + [32]) = $3
	*($9 + [36]) = $9
	*($9 + [40]) = ($9 + [56])
	*(($5 = CALL $273([80])) + [40]) = [0]
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [48]) = $3
	CALL $75(($9 + [32]), $5)
	*($9 + [48]) = $5
	$2 = *($5)
	*($9 + [32]) = $2
	$6 = *($5 + [52])
	*($9 + [28]) = $6
	$8 = ($0 + [484])
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [488]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $6
	*($9 + [48]) = [0]
	*($7) = $5
	*($8) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $73(($0 + [480]), ($9 + [48]), ($9 + [32]), ($9 + [28]))
	
.LABEL $label$1
	$0 = *($9 + [48])
	*($9 + [48]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [32])
	if ( ($5 == 0) ){ goto $label$4 }
	*(($0 + [36])) = $5
	CALL $274($5)
	
.LABEL $label$4
	CALL $274($0)
	
.LABEL $label$3
	if ( ((int_32)*($4 + [44]) != (int_32)[1]) ){ goto $label$6 }
	CALL $76($3, $4)
	goto $label$5 
	
.LABEL $label$6
	CALL $77($3, $4)
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [64])
}

void .FUNC _ZN5eosio2bk10trygiftboxENS0_6playerE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	$3 = *($1 + [32])
	if ( ((int_64)$3 <= (int_64)19) ){ goto $label$34 }
	if ( ((int_64)$3 == (int_64)20) ){ goto $label$33 }
	if ( ((int_64)$3 == (int_64)50) ){ goto $label$32 }
	if ( ((int_64)$3 != (int_64)100) ){ goto $label$19 }
	*($7 + [32]) = ($0 + [456])
	*($7 + [8]) = (int_64)1
	CALL $70(($7 + [48]), ($7 + [32]), ($7 + [8]))
	$5 = *($7 + [52])
	if ( ($5 == 0) ){ goto $label$30 }
	$3 = *($7 + [8])
	$6 = [0]
	if ( ((int_64)*($5 + [16]) != (int_64)0) ){ goto $label$35 }
	$6 = [0]
	if ( ((int_32)*($5 + [8]) != (int_32)[3]) ){ goto $label$35 }
	$6 = ((int_32)*($5 + [44]) != (int_32)[0])
	
.LABEL $label$35
	$5 = ( $5 ? [0] : ((int_64)$3 == (int_64)(CASTING uint_64)(uint_32 $6)) )
	goto $label$29 
	
.LABEL $label$34
	if ( (int_64)($3 == 0) ){ goto $label$31 }
	if ( ((int_64)$3 != (int_64)5) ){ goto $label$18 }
	*($7 + [32]) = ($0 + [456])
	*($7 + [8]) = (int_64)1
	CALL $67(($7 + [48]), ($7 + [32]), ($7 + [8]))
	$5 = *($7 + [52])
	if ( ($5 == 0) ){ goto $label$28 }
	$3 = *($7 + [8])
	$6 = [0]
	if ( ((int_64)*($5 + [16]) != (int_64)0) ){ goto $label$36 }
	$6 = [0]
	if ( *($5 + [8]) ){ goto $label$36 }
	$6 = ((int_32)*($5 + [44]) != (int_32)[0])
	
.LABEL $label$36
	$5 = ( $5 ? [0] : ((int_64)$3 == (int_64)(CASTING uint_64)(uint_32 $6)) )
	goto $label$27 
	
.LABEL $label$33
	*($7 + [32]) = ($0 + [456])
	*($7 + [8]) = (int_64)1
	CALL $68(($7 + [48]), ($7 + [32]), ($7 + [8]))
	$5 = *($7 + [52])
	if ( ($5 == 0) ){ goto $label$26 }
	$3 = *($7 + [8])
	$6 = [0]
	if ( ((int_64)*($5 + [16]) != (int_64)0) ){ goto $label$37 }
	$6 = [0]
	if ( ((int_32)*($5 + [8]) != (int_32)[1]) ){ goto $label$37 }
	$6 = ((int_32)*($5 + [44]) != (int_32)[0])
	
.LABEL $label$37
	$5 = ( $5 ? [0] : ((int_64)$3 == (int_64)(CASTING uint_64)(uint_32 $6)) )
	goto $label$25 
	
.LABEL $label$32
	*($7 + [32]) = ($0 + [456])
	*($7 + [8]) = (int_64)1
	CALL $69(($7 + [48]), ($7 + [32]), ($7 + [8]))
	$5 = *($7 + [52])
	if ( ($5 == 0) ){ goto $label$24 }
	$3 = *($7 + [8])
	$6 = [0]
	if ( ((int_64)*($5 + [16]) != (int_64)0) ){ goto $label$38 }
	$6 = [0]
	if ( ((int_32)*($5 + [8]) != (int_32)[2]) ){ goto $label$38 }
	$6 = ((int_32)*($5 + [44]) != (int_32)[0])
	
.LABEL $label$38
	$5 = ( $5 ? [0] : ((int_64)$3 == (int_64)(CASTING uint_64)(uint_32 $6)) )
	goto $label$23 
	
.LABEL $label$31
	*($7 + [40]) = ($0 + [456])
	*($7 + [48]) = (int_64)1
	CALL $62(($7 + [32]), ($7 + [40]), ($7 + [48]))
	*($7 + [48]) = (int_64)1
	CALL $63(($7 + [24]), ($7 + [40]), ($7 + [48]))
	*($7 + [8]) = (int_64)0
	*($7 + [16]) = [0]
	$2 = *($7 + [28])
	$5 = *($7 + [32])
	$6 = *($7 + [36])
	*($7 + [52]) = $6
	*($7 + [48]) = $5
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$22 }
	$4 = (($7 + [8]) + [8])
	$5 = [0]
	if ( ((int_32)[0] != (int_32)[0]) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$30
	$5 = [0]
	
.LABEL $label$29
	if ( ((int_64)*($5 + [16]) != (int_64)0) ){ goto $label$17 }
	if ( ((int_32)*($5 + [8]) != (int_32)[3]) ){ goto $label$16 }
	if ( (*($5 + [44]) == 0) ){ goto $label$15 }
	CALL _ZN5eosio2bk7giftboxEyy($0, *($1), *($5))
	goto $label$14 
	
.LABEL $label$28
	$5 = [0]
	
.LABEL $label$27
	if ( ((int_64)*($5 + [16]) != (int_64)0) ){ goto $label$5 }
	if ( *($5 + [8]) ){ goto $label$4 }
	if ( (*($5 + [44]) == 0) ){ goto $label$3 }
	CALL _ZN5eosio2bk7giftboxEyy($0, *($1), *($5))
	goto $label$2 
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	if ( ((int_64)*($5 + [16]) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)*($5 + [8]) != (int_32)[1]) ){ goto $label$8 }
	if ( (*($5 + [44]) == 0) ){ goto $label$7 }
	CALL _ZN5eosio2bk7giftboxEyy($0, *($1), *($5))
	goto $label$6 
	
.LABEL $label$24
	$5 = [0]
	
.LABEL $label$23
	if ( ((int_64)*($5 + [16]) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)*($5 + [8]) != (int_32)[2]) ){ goto $label$12 }
	if ( (*($5 + [44]) == 0) ){ goto $label$11 }
	CALL _ZN5eosio2bk7giftboxEyy($0, *($1), *($5))
	goto $label$10 
	
.LABEL $label$22
	$5 = [0]
	$6 = [0]
	$8 = [5]
	goto $label$1 
	
.LABEL $label$21
	$8 = [3]
	goto $label$1 
	
.LABEL $label$20
	$8 = [0]
	goto $label$1 
	
.LABEL $label$19
	$8 = [9]
	goto $label$1 
	
.LABEL $label$18
	$8 = [9]
	goto $label$1 
	
.LABEL $label$17
	$8 = [9]
	goto $label$1 
	
.LABEL $label$16
	$8 = [9]
	goto $label$1 
	
.LABEL $label$15
	$8 = [9]
	goto $label$1 
	
.LABEL $label$14
	$8 = [9]
	goto $label$1 
	
.LABEL $label$13
	$8 = [9]
	goto $label$1 
	
.LABEL $label$12
	$8 = [9]
	goto $label$1 
	
.LABEL $label$11
	$8 = [9]
	goto $label$1 
	
.LABEL $label$10
	$8 = [9]
	goto $label$1 
	
.LABEL $label$9
	$8 = [9]
	goto $label$1 
	
.LABEL $label$8
	$8 = [9]
	goto $label$1 
	
.LABEL $label$7
	$8 = [9]
	goto $label$1 
	
.LABEL $label$6
	$8 = [9]
	goto $label$1 
	
.LABEL $label$5
	$8 = [9]
	goto $label$1 
	
.LABEL $label$4
	$8 = [9]
	goto $label$1 
	
.LABEL $label$3
	$8 = [9]
	goto $label$1 
	
.LABEL $label$2
	$8 = [9]
	
.LABEL $label$1
	
.LOOP $label$39:
	goto $label$54 
	
.LABEL $label$55
	$5 = *($7 + [12])
	if ( ((int_32)$5 == (int_32)*($4)) ){ goto $label$45 }
	$8 = [0]
	goto $label$39 
	
.LABEL $label$54
	*($5) = *($6)
	*($7 + [12]) = ($5 + [8])
	goto $label$44 
	
.LABEL $label$53
	CALL $64(($7 + [8]), $6)
	$8 = [1]
	goto $label$39 
	
.LABEL $label$52
	CALL $65(($7 + [48]))
	$6 = *($7 + [52])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$43 }
	$8 = [4]
	goto $label$39 
	
.LABEL $label$51
	$5 = *($7 + [8])
	$6 = *($7 + [12])
	goto $label$42 
	
.LABEL $label$50
	$6 = int_32(($6 - $5) >> [3])
	if ( ($6 == 0) ){ goto $label$41 }
	$8 = [6]
	goto $label$39 
	
.LABEL $label$49
	$3 = *($1)
	*($7 + [44]) = ((int_32)((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$43()) * (int_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$16() / (uint_64)(int_64)1000000)))
	CALL sha256(($7 + [44]), [4], ($7 + [48]))
	CALL _ZN5eosio2bk7giftboxEyy($0, $3, *((*($7 + [8]) + ((CASTING uint_32)(uint_64 ((uint_64)CALL $316(*($7 + [48])) % (uint_64)((int_64)(CASTING uint_64)(uint_32 ($6 + [-1])) + (int_64)1))) << [3]))))
	$5 = *($7 + [8])
	$8 = [7]
	goto $label$39 
	
.LABEL $label$48
	if ( ($5 == 0) ){ goto $label$40 }
	$8 = [8]
	goto $label$39 
	
.LABEL $label$47
	*($7 + [12]) = $5
	CALL $274($5)
	$8 = [9]
	goto $label$39 
	
.LABEL $label$46
	*([0] + [4]) = ($7 + [80])
	return 
	
.LABEL $label$45
	$8 = [3]
	goto $label$39 
	
.LABEL $label$44
	$8 = [1]
	goto $label$39 
	
.LABEL $label$43
	$8 = [2]
	goto $label$39 
	
.LABEL $label$42
	$8 = [5]
	goto $label$39 
	
.LABEL $label$41
	$8 = [7]
	goto $label$39 
	
.LABEL $label$40
	$8 = [9]
	goto $label$39 
	$8
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($3 + [4])
	$5 = *($4 + [8])
	CALL eosio_assert([1], [576])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [640])
	*(($1 + [16])) = $5
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = *(*($3 + [8]))
	CALL memcpy(($9 + [64]), $1, [40])
	CALL memcpy(($9 + [8]), ($9 + [64]), [40])
	CALL _ZN5eosio2bk10trygiftboxENS0_6playerE($4, ($9 + [8]))
	$8 = $10
	$7 = ($8 + [-48])
	*([0] + [4]) = $7
	*($9 + [52]) = $7
	*($9 + [48]) = $7
	*($9 + [56]) = ($8 + [-8])
	*($9 + [104]) = ($9 + [48])
	*($9 + [68]) = ($1 + [8])
	*($9 + [64]) = $1
	*($9 + [72]) = ($1 + [24])
	*($9 + [76]) = ($1 + [32])
	CALL $9(($9 + [64]), ($9 + [104]))
	$6 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $6, $7, [40])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_upperbound(*($8), *($8 + [8]), (int_64)-7955357921610170363, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $71($4, CALL $fimport$18(*($4), *($4 + [8]), (int_64)-7955357921610170368, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	
.LABEL $label$4
	*(($2 + [76])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7955357921610170363, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $71($4, CALL $fimport$18(*($4), *($4 + [8]), (int_64)-7955357921610170368, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	
.LABEL $label$4
	*(($2 + [76])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $227 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	$30 = (*([0] + [4]) - [144])
	*([0] + [4]) = $30
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = ($1 + [32])
	*(($29 = $30) + [16]) = *($3)
	$4 = ($1 + [88])
	*($29 + [24]) = *($4)
	$5 = *($1)
	$6 = *(*($2))
	$28 = [1]
	$2 = *((*(($2 + [4])) + [20]))
	$8 = *((*(($2 + [8])) + [12]))
	if ( ((uint_32)$8 <= (uint_32)$2) ){ goto $label$1 }
	$28 = (([1] - $2) + $8)
	
.LABEL $label$1
	*($1 + [22]) = (*($1 + [22]) + ((int_32)$28 * (int_32)$6))
	CALL eosio_assert([1], [400])
	*($29 + [32]) = [0]
	*($29) = ($29 + [32])
	$6 = ($1 + [8])
	*($29 + [44]) = $6
	*($29 + [40]) = $1
	$8 = ($1 + [20])
	*($29 + [48]) = $8
	$7 = ($1 + [22])
	*($29 + [52]) = $7
	$9 = ($1 + [24])
	*($29 + [56]) = $9
	*($29 + [60]) = $3
	$10 = ($1 + [40])
	*($29 + [64]) = $10
	$11 = ($1 + [48])
	*($29 + [68]) = $11
	$12 = ($1 + [50])
	*($29 + [72]) = $12
	$13 = ($1 + [52])
	*($29 + [76]) = $13
	$14 = ($1 + [54])
	*($29 + [80]) = $14
	$15 = ($1 + [56])
	*($29 + [84]) = $15
	$16 = ($1 + [58])
	*($29 + [88]) = $16
	$17 = ($1 + [60])
	*($29 + [92]) = $17
	$18 = ($1 + [64])
	*($29 + [96]) = $18
	$19 = ($1 + [68])
	*($29 + [100]) = $19
	$20 = ($1 + [72])
	*($29 + [104]) = $20
	$21 = ($1 + [73])
	*($29 + [108]) = $21
	$22 = ($1 + [74])
	*($29 + [112]) = $22
	$23 = ($1 + [75])
	*($29 + [116]) = $23
	$24 = ($1 + [80])
	*($29 + [120]) = $24
	*($29 + [124]) = $4
	$25 = ($1 + [96])
	*($29 + [128]) = $25
	$26 = ($1 + [112])
	*($29 + [132]) = $26
	$27 = ($1 + [116])
	*($29 + [136]) = $27
	CALL $108(($29 + [40]), $29)
	$28 = *($29 + [32])
	if ( ($28 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($28)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($30 - (($28 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	*($29 + [4]) = $2
	*($29) = $2
	*($29 + [8]) = ($2 + $28)
	*($29 + [32]) = $29
	*($29 + [44]) = $6
	*($29 + [48]) = $8
	*($29 + [52]) = $7
	*($29 + [56]) = $9
	*($29 + [60]) = $3
	*($29 + [64]) = $10
	*($29 + [40]) = $1
	*($29 + [68]) = $11
	*($29 + [72]) = $12
	*($29 + [76]) = $13
	*($29 + [80]) = $14
	*($29 + [84]) = $15
	*($29 + [88]) = $16
	*($29 + [92]) = $17
	*($29 + [96]) = $18
	*($29 + [100]) = $19
	*($29 + [104]) = $20
	*($29 + [108]) = $21
	*($29 + [112]) = $22
	*($29 + [116]) = $23
	*($29 + [120]) = $24
	*($29 + [124]) = $4
	*($29 + [128]) = $25
	*($29 + [132]) = $26
	*($29 + [136]) = $27
	CALL $109(($29 + [40]), ($29 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $2, $28)
	if ( ($28 <= [513]) ){ goto $label$4 }
	CALL free($2)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$2 = (($29 + [16]) + [8])
	*($29 + [40]) = *($3)
	if ( (CALL memcmp(($29 + [16]), ($29 + [40]), [8]) == 0) ){ goto $label$6 }
	$3 = ($1 + [136])
	$28 = *($3)
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$7 }
	$28 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($29 + [32]), $5)
	*($3) = $28
	
.LABEL $label$7
	CALL db_idx64_update($28, (int_64)0, ($29 + [40]))
	
.LABEL $label$6
	*($29 + [40]) = *($4)
	if ( (CALL memcmp($2, ($29 + [40]), [8]) == 0) ){ goto $label$8 }
	$2 = ($1 + [140])
	$1 = *($2)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$9 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($29 + [32]), $5)
	*($2) = $1
	
.LABEL $label$9
	CALL db_idx64_update($1, (int_64)0, ($29 + [40]))
	
.LABEL $label$8
	*([0] + [4]) = ($29 + [144])
}

void .FUNC $228 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	*($1 + [9]) = (*($1 + [9]) + [-1])
	$2 = *($1)
	CALL eosio_assert([1], [400])
	*(($17 = $16) + [16]) = [0]
	*($17) = ($17 + [16])
	$4 = ($1 + [8])
	*($17 + [28]) = $4
	*($17 + [24]) = $1
	$3 = ($1 + [9])
	*($17 + [32]) = $3
	$5 = ($1 + [16])
	*($17 + [36]) = $5
	$6 = ($1 + [24])
	*($17 + [40]) = $6
	$7 = ($1 + [40])
	*($17 + [44]) = $7
	$8 = ($1 + [41])
	*($17 + [48]) = $8
	$9 = ($1 + [44])
	*($17 + [52]) = $9
	$10 = ($1 + [48])
	*($17 + [56]) = $10
	$11 = ($1 + [52])
	*($17 + [60]) = $11
	$12 = ($1 + [56])
	*($17 + [64]) = $12
	$13 = ($1 + [68])
	*($17 + [68]) = $13
	$14 = ($1 + [80])
	*($17 + [72]) = $14
	CALL $168(($17 + [24]), $17)
	$15 = *($17 + [16])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$16 = CALL malloc($15)
	goto $label$1 
	
.LABEL $label$2
	$16 = ($16 - (($15 + [15]) & [-16]))
	*([0] + [4]) = $16
	
.LABEL $label$1
	*($17 + [4]) = $16
	*($17) = $16
	*($17 + [8]) = ($16 + $15)
	*($17 + [16]) = $17
	*($17 + [28]) = $4
	*($17 + [32]) = $3
	*($17 + [36]) = $5
	*($17 + [40]) = $6
	*($17 + [44]) = $7
	*($17 + [48]) = $8
	*($17 + [24]) = $1
	*($17 + [52]) = $9
	*($17 + [56]) = $10
	*($17 + [60]) = $11
	*($17 + [64]) = $12
	*($17 + [68]) = $13
	*($17 + [72]) = $14
	CALL $169(($17 + [24]), ($17 + [16]))
	CALL db_update_i64(*($1 + [96]), (int_64)0, $16, $15)
	if ( ($15 <= [513]) ){ goto $label$3 }
	CALL free($16)
	
.LABEL $label$3
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($17 + [80])
}

void .FUNC $229 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = *($0)
	$9 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$5 = ($9 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$2 = ($8 + ((int_32)$7 * (int_32)[24]))
	$9 = ($8 + ((int_32)$9 * (int_32)[24]))
	$8 = CALL $216($9, $1)
	$3 = ($8 + [24])
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	$4 = ([0] - $7)
	$7 = ($1 + [-12])
	
.LOOP $label$7:
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($5 = ($8 + [-16]))) = [0]
	$6 = ($7 + [-12])
	*($1) = *($6)
	*(($8 + [-20])) = *(($7 + [-8]))
	$1 = ($7 + [-4])
	*($5) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($8 + [-4]))) = [0]
	*($1) = *($7)
	*(($8 + [-8])) = *(($7 + [4]))
	$8 = ($7 + [8])
	*($5) = *($8)
	*($8) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-24])
	$8 = $9
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $4) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($0) = $9
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$9 = ([0] - $1)
	$7 = ($7 + [-24])
	
.LOOP $label$9:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($7 + [16])) = $8
	CALL $274($8)
	
.LABEL $label$10
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$11 }
	*(($7 + [4])) = $8
	CALL $274($8)
	
.LABEL $label$11
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $9) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $274($1)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZN5eosio2bk9addtequipENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEhhsssssNS_5assetEtt (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11)
{
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [112])
	*([0] + [4]) = $13
	*($13 + [75]) = $2
	*($13 + [74]) = $3
	*($13 + [72]) = $4
	*($13 + [70]) = $5
	*($13 + [68]) = $6
	*($13 + [66]) = $7
	*($13 + [64]) = $8
	*($13 + [62]) = $10
	*($13 + [60]) = $11
	CALL require_auth(*($0))
	$12 = *($0)
	*($13 + [8]) = $0
	*($13 + [16]) = $1
	*($13 + [12]) = ($13 + [75])
	*($13 + [20]) = ($13 + [60])
	*($13 + [24]) = ($13 + [74])
	*($13 + [28]) = ($13 + [72])
	*($13 + [32]) = ($13 + [70])
	*($13 + [36]) = ($13 + [68])
	*($13 + [40]) = ($13 + [66])
	*($13 + [44]) = ($13 + [64])
	*($13 + [48]) = $9
	*($13 + [52]) = ($13 + [62])
	*($13 + [104]) = $12
	CALL eosio_assert(((int_64)*($0 + [176]) == (int_64)CALL $fimport$15()), [1104])
	$10 = ($0 + [176])
	*($13 + [80]) = $10
	*($13 + [84]) = ($13 + [8])
	*($13 + [88]) = ($13 + [104])
	$9 = [0]
	*(($1 = CALL $273([72])) + [16]) = [0]
	*($1 + [8 align=4]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$12 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$11 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [640])
	*($1 + [56]) = $10
	CALL $90(($13 + [80]), $1)
	*($13 + [96]) = $1
	$12 = *($1)
	*($13 + [80]) = $12
	$11 = *($1 + [60])
	*($13 + [76]) = $11
	$10 = ($0 + [204])
	$9 = *($10)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [208]))) ){ goto $label$7 }
	*($9 + [8]) = $12
	*($9 + [16]) = $11
	*($13 + [96]) = [0]
	*($9) = $1
	*($10) = ($9 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $91(($0 + [200]), ($13 + [96]), ($13 + [80]), ($13 + [76]))
	
.LABEL $label$6
	$9 = *($13 + [96])
	*($13 + [96]) = [0]
	if ( ($9 == 0) ){ goto $label$8 }
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL $274(*(($9 + [16])))
	
.LABEL $label$9
	CALL $274($9)
	
.LABEL $label$8
	*([0] + [4]) = ($13 + [112])
}

void .FUNC _ZN5eosio2bk9updatesetEyhhtt (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$1 }
	$6 = ($0 + [16])
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)*(($0 + [40]))) ){ goto $label$3 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [480])
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	$7 = CALL db_find_i64(*($6), *(($0 + [24])), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $82($6, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$6), [480])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [1664])
	$1 = *($8)
	
.LABEL $label$1
	if ( $2 ){ goto $label$4 }
	$8 = ($0 + [16])
	$2 = *(($0 + [44]))
	if ( ((int_32)$2 == (int_32)*(($0 + [40]))) ){ goto $label$6 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$8), [480])
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$6 = CALL db_find_i64(*($8), *(($0 + [24])), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$2 = CALL $82($8, $6)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$8), [480])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1664])
	$2 = *($2 + [8])
	
.LABEL $label$4
	if ( $3 ){ goto $label$7 }
	$8 = ($0 + [16])
	$3 = *(($0 + [44]))
	if ( ((int_32)$3 == (int_32)*(($0 + [40]))) ){ goto $label$9 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$8), [480])
	goto $label$8 
	
.LABEL $label$9
	$3 = [0]
	$6 = CALL db_find_i64(*($8), *(($0 + [24])), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$3 = CALL $82($8, $6)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$8), [480])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1664])
	$3 = *($3 + [9])
	
.LABEL $label$7
	if ( $4 ){ goto $label$10 }
	$8 = ($0 + [16])
	$4 = *(($0 + [44]))
	if ( ((int_32)$4 == (int_32)*(($0 + [40]))) ){ goto $label$12 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$8), [480])
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	$6 = CALL db_find_i64(*($8), *(($0 + [24])), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	$4 = CALL $82($8, $6)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$8), [480])
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1664])
	$4 = *($4 + [10])
	
.LABEL $label$10
	$8 = ($0 + [16])
	if ( $5 ){ goto $label$13 }
	$5 = *(($0 + [44]))
	if ( ((int_32)$5 == (int_32)*(($0 + [40]))) ){ goto $label$15 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$8), [480])
	goto $label$14 
	
.LABEL $label$15
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$5 = CALL $82($8, $6)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$8), [480])
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1664])
	$5 = *($5 + [12])
	
.LABEL $label$13
	*($9 + [8]) = $2
	*($9) = $1
	*($9 + [9]) = $3
	*($9 + [10]) = $4
	*($9 + [12]) = $5
	CALL $43($8, $9, *($0))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($2, *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $274($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $274($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($0 + [4]), $2, [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [1104])
	*(($4 = CALL $273([32])) + [16]) = $1
	$3 = *($3)
	*($4) = *($3)
	*(($5 = ($4 + [12]))) = *(($3 + [12]))
	*(($6 = ($4 + [8]))) = *(($3 + [8]))
	*(($4 + [4])) = *(($3 + [4]))
	*($7 + [24]) = ($7 | [14])
	*($7 + [20]) = $7
	*($7 + [16]) = $7
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = $6
	*($7 + [40]) = $4
	*($7 + [48]) = ($4 + [9])
	*($7 + [52]) = ($4 + [10])
	*($7 + [56]) = $5
	CALL $85(($7 + [40]), ($7 + [32]))
	*($4 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)4982871467403247616, $2, (int_64)4982871467403247616, $7, [14])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871467403247616) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4982871467403247617
	
.LABEL $label$1
	*($7) = $4
	*($7 + [40]) = (int_64)4982871467403247616
	$5 = *($4 + [20])
	*($7 + [16]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4982871467403247616
	*($3 + [16]) = $5
	*($7) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $86(($1 + [24]), $7, ($7 + [40]), ($7 + [16]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $274($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [400])
	*($5 + [24]) = ($5 | [14])
	*($5 + [20]) = $5
	*($5 + [16]) = $5
	*($5 + [32]) = ($5 + [16])
	*($5 + [44]) = $4
	*($5 + [40]) = $1
	*($5 + [48]) = ($1 + [9])
	*($5 + [52]) = ($1 + [10])
	*($5 + [56]) = ($1 + [12])
	CALL $85(($5 + [40]), ($5 + [32]))
	CALL db_update_i64(*($1 + [20]), $2, $5, [14])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871467403247616) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4982871467403247617
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [544])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [20]) = $4
	*($7 + [16]) = $4
	*($7 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $273([32])) + [16]) = $0
	*($7 + [32]) = ($7 + [16])
	*($7 + [44]) = ($5 + [8])
	*($7 + [40]) = $5
	*($7 + [48]) = ($5 + [9])
	*($7 + [52]) = ($5 + [10])
	*($7 + [56]) = ($5 + [12])
	CALL $87(($7 + [40]), ($7 + [32]))
	*($5 + [20]) = $1
	*($7 + [32]) = $5
	*($7 + [40]) = (int_64)4982871467403247616
	$6 = *($5 + [20])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)4982871467403247616
	*($4 + [16]) = $6
	*($7 + [32]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $86(($0 + [24]), ($7 + [32]), ($7 + [40]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $274($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
	return $5
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $274($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($8 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL $273($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $285($0)
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1296])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-7955357921610170368)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1232])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1232])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $71(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZN5eosio2bk8bdestroyEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	$2 = ($0 + [256])
	$3 = CALL $183($2, $1, [144])
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	CALL require_auth(*($3 + [16]))
	
.LABEL $label$1
	$5 = [1]
	if ( *($3 + [52]) ){ goto $label$2 }
	$5 = [0]
	$4 = *($3 + [56])
	if ( ((int_32)*($4) != (int_32)*($4 + [4])) ){ goto $label$2 }
	$5 = ((int_32)*($4 + [12]) == (int_32)*(($4 + [16])))
	
.LABEL $label$2
	CALL eosio_assert($5, [3344])
	CALL _ZNSt3__19to_stringEx(($6 + [16]), *($3 + [24]))
	CALL $280(($6 + [16]), [95])
	$5 = (($6 + [16]) + [8])
	*((($6 + [32]) + [8])) = *($5)
	*($5) = [0]
	*($6 + [32]) = *($6 + [16])
	*($6 + [20]) = [0]
	*($6 + [16]) = [0]
	CALL _ZNSt3__19to_stringEi($6, *($3 + [8]))
	$5 = *($6)
	$4 = ($5 & [1])
	$5 = CALL $279(($6 + [32]), ( *($6 + [8]) ? ($6 | [1]) : $4 ), ( *($6 + [4]) ? uint_32($5 >> [1]) : $4 ))
	$4 = ($5 + [8])
	*((($6 + [48]) + [8])) = *($4)
	*($6 + [48]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	*($6 + [72]) = $1
	$0 = ($0 + [336])
	$5 = CALL $184($0, (int_64)0, [144])
	*($6 + [68]) = ($6 + [72])
	*($6 + [64]) = ($6 + [48])
	CALL $185($0, $5, ($6 + [64]))
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $274(*($6 + [56]))
	
.LABEL $label$3
	if ( ((*($6) & [1]) == 0) ){ goto $label$4 }
	CALL $274(*(($6 + [8])))
	
.LABEL $label$4
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $274(*($6 + [40]))
	
.LABEL $label$5
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $274(*(($6 + [24])))
	
.LABEL $label$6
	CALL $186($2, $3)
	*([0] + [4]) = ($6 + [80])
}

void .FUNC $149 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	$30 = (*([0] + [4]) - [144])
	*([0] + [4]) = $30
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = ($1 + [32])
	*(($29 = $30) + [16]) = *($3)
	$4 = ($1 + [88])
	*($29 + [24]) = *($4)
	$28 = *($2 + [4])
	$5 = *($1)
	*($1 + [72]) = [0]
	*($1 + [112]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [64]) = (*($1 + [64]) + [1])
	if ( (*(*($2)) == 0) ){ goto $label$1 }
	*($1 + [68]) = (*($1 + [68]) + [1])
	$9 = ($28 + [16])
	$2 = *(($28 + [44]))
	if ( ((int_32)$2 == (int_32)*(($28 + [40]))) ){ goto $label$3 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$9), [480])
	goto $label$2 
	
.LABEL $label$3
	$2 = [0]
	$8 = CALL db_find_i64(*($9), *(($28 + [24])), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$2 = CALL $82($9, $8)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$9), [480])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1664])
	*($1 + [22]) = (((int_32)(*($1 + [20]) + [1]) * (int_32)*($2 + [12])) + *($1 + [22]))
	
.LABEL $label$1
	$8 = ($1 + [64])
	$7 = ($1 + [112])
	$6 = ($1 + [72])
	$9 = ($1 + [75])
	if ( (*($1 + [75]) == 0) ){ goto $label$5 }
	$2 = CALL $150(($28 + [416]), *($1 + [80]), [144])
	*($9) = [0]
	*($1 + [80]) = *($2)
	$27 = *($2 + [20])
	if ( ((int_32)int_32(($27 << [16]) >> [16]) > (int_32)[-1]) ){ goto $label$6 }
	*($1 + [48]) = (*($1 + [48]) - $27)
	
.LABEL $label$6
	$27 = *($2 + [22])
	if ( ($27 == 0) ){ goto $label$7 }
	*($1 + [52]) = (*($1 + [52]) - $27)
	
.LABEL $label$7
	$27 = *($2 + [24])
	if ( ($27 == 0) ){ goto $label$8 }
	*($1 + [54]) = (*($1 + [54]) - $27)
	
.LABEL $label$8
	$27 = *($2 + [26])
	if ( ($27 == 0) ){ goto $label$9 }
	*($1 + [58]) = (*($1 + [58]) - $27)
	
.LABEL $label$9
	$27 = ($1 + [80])
	$2 = *($2 + [28])
	if ( ($2 == 0) ){ goto $label$4 }
	*($1 + [60]) = (*($1 + [60]) - $2)
	goto $label$4 
	
.LABEL $label$5
	$27 = ($1 + [80])
	
.LABEL $label$4
	CALL _ZN5eosio2bk11wchecklevelERNS0_7warriorE($28, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [400])
	*($29 + [32]) = [0]
	*($29) = ($29 + [32])
	$10 = ($1 + [8])
	*($29 + [44]) = $10
	*($29 + [40]) = $1
	$11 = ($1 + [20])
	*($29 + [48]) = $11
	$12 = ($1 + [22])
	*($29 + [52]) = $12
	$13 = ($1 + [24])
	*($29 + [56]) = $13
	*($29 + [60]) = $3
	$14 = ($1 + [40])
	*($29 + [64]) = $14
	$15 = ($1 + [48])
	*($29 + [68]) = $15
	$16 = ($1 + [50])
	*($29 + [72]) = $16
	$17 = ($1 + [52])
	*($29 + [76]) = $17
	$18 = ($1 + [54])
	*($29 + [80]) = $18
	$19 = ($1 + [56])
	*($29 + [84]) = $19
	$20 = ($1 + [58])
	*($29 + [88]) = $20
	$21 = ($1 + [60])
	*($29 + [92]) = $21
	*($29 + [96]) = $8
	$22 = ($1 + [68])
	*($29 + [100]) = $22
	*($29 + [104]) = $6
	$23 = ($1 + [73])
	*($29 + [108]) = $23
	$24 = ($1 + [74])
	*($29 + [112]) = $24
	*($29 + [116]) = $9
	*($29 + [120]) = $27
	*($29 + [124]) = $4
	$25 = ($1 + [96])
	*($29 + [128]) = $25
	*($29 + [132]) = $7
	$26 = ($1 + [116])
	*($29 + [136]) = $26
	CALL $108(($29 + [40]), $29)
	$2 = *($29 + [32])
	if ( ($2 <= [513]) ){ goto $label$11 }
	$28 = CALL malloc($2)
	goto $label$10 
	
.LABEL $label$11
	$28 = ($30 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $28
	
.LABEL $label$10
	*($29 + [4]) = $28
	*($29) = $28
	*($29 + [8]) = ($28 + $2)
	*($29 + [32]) = $29
	*($29 + [44]) = $10
	*($29 + [48]) = $11
	*($29 + [52]) = $12
	*($29 + [56]) = $13
	*($29 + [60]) = $3
	*($29 + [64]) = $14
	*($29 + [40]) = $1
	*($29 + [68]) = $15
	*($29 + [72]) = $16
	*($29 + [76]) = $17
	*($29 + [80]) = $18
	*($29 + [84]) = $19
	*($29 + [88]) = $20
	*($29 + [92]) = $21
	*($29 + [96]) = $8
	*($29 + [100]) = $22
	*($29 + [104]) = $6
	*($29 + [108]) = $23
	*($29 + [112]) = $24
	*($29 + [116]) = $9
	*($29 + [120]) = $27
	*($29 + [124]) = $4
	*($29 + [128]) = $25
	*($29 + [132]) = $7
	*($29 + [136]) = $26
	CALL $109(($29 + [40]), ($29 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $28, $2)
	if ( ($2 <= [513]) ){ goto $label$12 }
	CALL free($28)
	
.LABEL $label$12
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$28 = ($29 + [24])
	*($29 + [40]) = *($3)
	if ( (CALL memcmp(($29 + [16]), ($29 + [40]), [8]) == 0) ){ goto $label$14 }
	$3 = ($1 + [136])
	$2 = *($3)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$15 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($29 + [32]), $5)
	*($3) = $2
	
.LABEL $label$15
	CALL db_idx64_update($2, (int_64)0, ($29 + [40]))
	
.LABEL $label$14
	*($29 + [40]) = *($4)
	if ( (CALL memcmp($28, ($29 + [40]), [8]) == 0) ){ goto $label$16 }
	$28 = ($1 + [140])
	$1 = *($28)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$17 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($29 + [32]), $5)
	*($28) = $1
	
.LABEL $label$17
	CALL db_idx64_update($1, (int_64)0, ($29 + [40]))
	
.LABEL $label$16
	*([0] + [4]) = ($29 + [144])
}

void .FUNC _ZN5eosio2bk16exit_from_battleEyb (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [15]) = $2
	CALL require_auth(*($0))
	$2 = ($0 + [96])
	$3 = CALL $127($2, $1, [144])
	*($4 + [4]) = $0
	*($4) = ($4 + [15])
	CALL $149($2, $3, $4)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC _ZN5eosio2bk9etransferEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [128])
	*([0] + [4]) = $12
	$3 = ($0 + [216])
	$4 = CALL $135($3, $1, [144])
	$5 = ($4 + [8])
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	CALL require_auth(*($5))
	
.LABEL $label$1
	$6 = ($4 + [33])
	CALL eosio_assert(((int_32)*($6) ^ (int_32)[1]), [2912])
	CALL eosio_assert(((int_64)*($5) != (int_64)$2), [2752])
	$7 = *(($0 + [80]))
	$11 = *(($0 + [84]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$2 }
	$10 = ($11 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$3:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$2 }
	$11 = $10
	$9 = ($10 + [-24])
	$10 = $9
	if ( ((int_32)($9 + $8) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$9 = ($0 + [56])
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$5 }
	$10 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$9), [480])
	goto $label$4 
	
.LABEL $label$5
	$10 = [0]
	$11 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030912129794572288, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$4 }
	$10 = CALL $10($9, $11)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)$9), [480])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [2880])
	$10 = ($4 + [32])
	if ( (*($4 + [32]) == 0) ){ goto $label$7 }
	$9 = CALL $127(($0 + [96]), *($4 + [16]), [144])
	CALL eosio_assert(((int_64)*($9 + [32]) == (int_64)$2), [2960])
	CALL eosio_assert(((int_32)*($9 + [72]) ^ (int_32)[1]), [2784])
	CALL eosio_assert(((int_32)*($9 + [88]) ^ (int_32)[1]), [2832])
	$11 = ($4 + [16])
	goto $label$6 
	
.LABEL $label$7
	$11 = ($4 + [16])
	
.LABEL $label$6
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$3), [176])
	CALL eosio_assert(((int_64)*(($0 + [216])) == (int_64)CALL $fimport$15()), [224])
	$9 = ($4 + [8])
	$1 = *($9)
	*($9) = $2
	*($12 + [72]) = $1
	*($12 + [80]) = *(($4 + [33]))
	$2 = *($4)
	CALL eosio_assert([1], [400])
	*($12 + [64]) = ($12 + [50])
	*($12 + [60]) = $12
	*($12 + [56]) = $12
	*($12 + [88]) = ($12 + [56])
	*($12 + [100]) = $5
	*($12 + [96]) = $4
	*($12 + [104]) = $11
	*($12 + [108]) = ($4 + [24])
	*($12 + [112]) = $10
	*($12 + [116]) = $6
	*($12 + [120]) = ($4 + [40])
	CALL $123(($12 + [96]), ($12 + [88]))
	CALL db_update_i64(*($4 + [60]), (int_64)0, $12, [50])
	$10 = ($0 + [232])
	if ( (uint_64)($2 <= *($10)) ){ goto $label$8 }
	*($10) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$10 = (($12 + [72]) + [8])
	*($12 + [96]) = *($5)
	if ( (CALL memcmp(($12 + [72]), ($12 + [96]), [8]) == 0) ){ goto $label$9 }
	$11 = ($4 + [64])
	$9 = *($11)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$10 }
	$9 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128064, ($12 + [88]), $2)
	*($11) = $9
	
.LABEL $label$10
	CALL db_idx64_update($9, (int_64)0, ($12 + [96]))
	
.LABEL $label$9
	*($12 + [96]) = *($6)
	if ( (CALL memcmp($10, ($12 + [96]), [8]) == 0) ){ goto $label$11 }
	$9 = ($4 + [68])
	$10 = *($9)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$12 }
	$10 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128065, ($12 + [88]), $2)
	*($9) = $10
	
.LABEL $label$12
	CALL db_idx64_update($10, (int_64)0, ($12 + [96]))
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [128])
}

void .FUNC $144 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$28 = (*([0] + [4]) - [144])
	*([0] + [4]) = $28
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = ($1 + [32])
	*(($29 = $28) + [16]) = *($3)
	$4 = ($1 + [88])
	*($29 + [24]) = *($4)
	*($3) = *(*($2))
	$5 = *($1)
	CALL eosio_assert([1], [400])
	*($29 + [32]) = [0]
	*($29) = ($29 + [32])
	$6 = ($1 + [8])
	*($29 + [44]) = $6
	*($29 + [40]) = $1
	$7 = ($1 + [20])
	*($29 + [48]) = $7
	$8 = ($1 + [22])
	*($29 + [52]) = $8
	$9 = ($1 + [24])
	*($29 + [56]) = $9
	*($29 + [60]) = $3
	$10 = ($1 + [40])
	*($29 + [64]) = $10
	$11 = ($1 + [48])
	*($29 + [68]) = $11
	$12 = ($1 + [50])
	*($29 + [72]) = $12
	$13 = ($1 + [52])
	*($29 + [76]) = $13
	$14 = ($1 + [54])
	*($29 + [80]) = $14
	$15 = ($1 + [56])
	*($29 + [84]) = $15
	$16 = ($1 + [58])
	*($29 + [88]) = $16
	$17 = ($1 + [60])
	*($29 + [92]) = $17
	$18 = ($1 + [64])
	*($29 + [96]) = $18
	$19 = ($1 + [68])
	*($29 + [100]) = $19
	$20 = ($1 + [72])
	*($29 + [104]) = $20
	$21 = ($1 + [73])
	*($29 + [108]) = $21
	$22 = ($1 + [74])
	*($29 + [112]) = $22
	$23 = ($1 + [75])
	*($29 + [116]) = $23
	$24 = ($1 + [80])
	*($29 + [120]) = $24
	*($29 + [124]) = $4
	$25 = ($1 + [96])
	*($29 + [128]) = $25
	$26 = ($1 + [112])
	*($29 + [132]) = $26
	$27 = ($1 + [116])
	*($29 + [136]) = $27
	CALL $108(($29 + [40]), $29)
	$2 = *($29 + [32])
	if ( ($2 <= [513]) ){ goto $label$2 }
	$28 = CALL malloc($2)
	goto $label$1 
	
.LABEL $label$2
	$28 = ($28 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $28
	
.LABEL $label$1
	*($29 + [4]) = $28
	*($29) = $28
	*($29 + [8]) = ($28 + $2)
	*($29 + [32]) = $29
	*($29 + [44]) = $6
	*($29 + [48]) = $7
	*($29 + [52]) = $8
	*($29 + [56]) = $9
	*($29 + [60]) = $3
	*($29 + [64]) = $10
	*($29 + [40]) = $1
	*($29 + [68]) = $11
	*($29 + [72]) = $12
	*($29 + [76]) = $13
	*($29 + [80]) = $14
	*($29 + [84]) = $15
	*($29 + [88]) = $16
	*($29 + [92]) = $17
	*($29 + [96]) = $18
	*($29 + [100]) = $19
	*($29 + [104]) = $20
	*($29 + [108]) = $21
	*($29 + [112]) = $22
	*($29 + [116]) = $23
	*($29 + [120]) = $24
	*($29 + [124]) = $4
	*($29 + [128]) = $25
	*($29 + [132]) = $26
	*($29 + [136]) = $27
	CALL $109(($29 + [40]), ($29 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $28, $2)
	if ( ($2 <= [513]) ){ goto $label$3 }
	CALL free($28)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$28 = (($29 + [16]) + [8])
	*($29 + [40]) = *($3)
	if ( (CALL memcmp(($29 + [16]), ($29 + [40]), [8]) == 0) ){ goto $label$5 }
	$2 = ($1 + [136])
	$3 = *($2)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($29 + [32]), $5)
	*($2) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, (int_64)0, ($29 + [40]))
	
.LABEL $label$5
	*($29 + [40]) = *($4)
	if ( (CALL memcmp($28, ($29 + [40]), [8]) == 0) ){ goto $label$7 }
	$28 = ($1 + [140])
	$1 = *($28)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($29 + [32]), $5)
	*($28) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, (int_64)0, ($29 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($29 + [144])
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_32 $30
	int_32 $31
	$31 = (*([0] + [4]) - [144])
	*([0] + [4]) = $31
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	*($1 + [24]) = (*($1 + [24]) - *(*($2)))
	$3 = ($1 + [32])
	*(($30 = $31) + [16]) = *($3)
	$4 = ($1 + [88])
	*($30 + [24]) = *($4)
	$5 = *($1)
	$6 = ($1 + [24])
	$28 = (*(*($2 + [4])) + [-1])
	if ( ((uint_32)$28 > (uint_32)[4]) ){ goto $label$1 }
	goto $label$6 
	
.LABEL $label$6
	*($1 + [52]) = (*($1 + [52]) + *(*($2)))
	goto $label$1 
	
.LABEL $label$5
	*($1 + [54]) = (*($1 + [54]) + *(*($2)))
	goto $label$1 
	
.LABEL $label$4
	$28 = *($2 + [8])
	$7 = *($28 + [50])
	$29 = CALL current_time()
	$28 = ($7 + ((uint_32)((int_32)((uint_32)((int_32)((CASTING uint_32)(uint_64 ((uint_64)$29 / (uint_64)(int_64)1000000)) - *($28 + [112])) * (int_32)[1000]) / (uint_32)[60]) * (int_32)*($28 + [56])) / (uint_32)[1000]))
	$8 = *($28 + [48])
	*($1 + [50]) = ( $8 ? $28 : ((uint_32)$28 > (uint_32)$8) )
	*($1 + [112]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [56]) = (*($1 + [56]) + *(*($2)))
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert((*($1 + [60]) <= [50]), [3104])
	*($1 + [60]) = (*($1 + [60]) + *(*($2)))
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert((*($1 + [58]) <= [50]), [3136])
	*($1 + [58]) = (*($1 + [58]) + *(*($2)))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [400])
	*($30 + [32]) = [0]
	*($30) = ($30 + [32])
	$7 = ($1 + [8])
	*($30 + [44]) = $7
	*($30 + [40]) = $1
	$8 = ($1 + [20])
	*($30 + [48]) = $8
	$9 = ($1 + [22])
	*($30 + [52]) = $9
	*($30 + [56]) = $6
	*($30 + [60]) = $3
	$10 = ($1 + [40])
	*($30 + [64]) = $10
	$11 = ($1 + [48])
	*($30 + [68]) = $11
	$12 = ($1 + [50])
	*($30 + [72]) = $12
	$13 = ($1 + [52])
	*($30 + [76]) = $13
	$14 = ($1 + [54])
	*($30 + [80]) = $14
	$15 = ($1 + [56])
	*($30 + [84]) = $15
	$16 = ($1 + [58])
	*($30 + [88]) = $16
	$17 = ($1 + [60])
	*($30 + [92]) = $17
	$18 = ($1 + [64])
	*($30 + [96]) = $18
	$19 = ($1 + [68])
	*($30 + [100]) = $19
	$20 = ($1 + [72])
	*($30 + [104]) = $20
	$21 = ($1 + [73])
	*($30 + [108]) = $21
	$22 = ($1 + [74])
	*($30 + [112]) = $22
	$23 = ($1 + [75])
	*($30 + [116]) = $23
	$24 = ($1 + [80])
	*($30 + [120]) = $24
	*($30 + [124]) = $4
	$25 = ($1 + [96])
	*($30 + [128]) = $25
	$26 = ($1 + [112])
	*($30 + [132]) = $26
	$27 = ($1 + [116])
	*($30 + [136]) = $27
	CALL $108(($30 + [40]), $30)
	$28 = *($30 + [32])
	if ( ($28 <= [513]) ){ goto $label$8 }
	$2 = CALL malloc($28)
	goto $label$7 
	
.LABEL $label$8
	$2 = ($31 - (($28 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$7
	*($30 + [4]) = $2
	*($30) = $2
	*($30 + [8]) = ($2 + $28)
	*($30 + [32]) = $30
	*($30 + [44]) = $7
	*($30 + [48]) = $8
	*($30 + [52]) = $9
	*($30 + [56]) = $6
	*($30 + [60]) = $3
	*($30 + [64]) = $10
	*($30 + [40]) = $1
	*($30 + [68]) = $11
	*($30 + [72]) = $12
	*($30 + [76]) = $13
	*($30 + [80]) = $14
	*($30 + [84]) = $15
	*($30 + [88]) = $16
	*($30 + [92]) = $17
	*($30 + [96]) = $18
	*($30 + [100]) = $19
	*($30 + [104]) = $20
	*($30 + [108]) = $21
	*($30 + [112]) = $22
	*($30 + [116]) = $23
	*($30 + [120]) = $24
	*($30 + [124]) = $4
	*($30 + [128]) = $25
	*($30 + [132]) = $26
	*($30 + [136]) = $27
	CALL $109(($30 + [40]), ($30 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $2, $28)
	if ( ($28 <= [513]) ){ goto $label$9 }
	CALL free($2)
	
.LABEL $label$9
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$2 = (($30 + [16]) + [8])
	*($30 + [40]) = *($3)
	if ( (CALL memcmp(($30 + [16]), ($30 + [40]), [8]) == 0) ){ goto $label$11 }
	$3 = ($1 + [136])
	$28 = *($3)
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$12 }
	$28 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($30 + [32]), $5)
	*($3) = $28
	
.LABEL $label$12
	CALL db_idx64_update($28, (int_64)0, ($30 + [40]))
	
.LABEL $label$11
	*($30 + [40]) = *($4)
	if ( (CALL memcmp($2, ($30 + [40]), [8]) == 0) ){ goto $label$13 }
	$2 = ($1 + [140])
	$1 = *($2)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$14 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($30 + [32]), $5)
	*($2) = $1
	
.LABEL $label$14
	CALL db_idx64_update($1, (int_64)0, ($30 + [40]))
	
.LABEL $label$13
	*([0] + [4]) = ($30 + [144])
	$28
}

void .FUNC _ZN5eosio2bk10wusepointsEyht (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($5 + [15]) = $2
	*($5 + [12]) = $3
	$4 = ($0 + [96])
	$0 = CALL $127($4, $1, [144])
	CALL require_auth(*($0 + [32]))
	CALL eosio_assert(((int_32)*($0 + [72]) ^ (int_32)[1]), [3008])
	CALL eosio_assert(((uint_32)*($0 + [24]) >= (uint_32)$3), [3040])
	CALL eosio_assert(((($2 + [-1]) & [255]) <= [5]), [3072])
	*($5 + [8]) = $0
	*($5 + [4]) = ($5 + [15])
	*($5) = ($5 + [12])
	CALL $147($4, $0, $5)
	*([0] + [4]) = ($5 + [16])
}

void .FUNC _ZN5eosio2bk6detachEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	*($13 + [8]) = $1
	$2 = ($0 + [216])
	$3 = CALL $135($2, $1, [144])
	CALL eosio_assert(*($3 + [32]), [2544])
	$5 = ($0 + [96])
	$7 = CALL $127($5, *($3 + [16]), [144])
	CALL require_auth(*($7 + [32]))
	CALL eosio_assert(((int_32)*($7 + [72]) ^ (int_32)[1]), [2576])
	CALL eosio_assert(((int_32)*($7 + [88]) ^ (int_32)[1]), [2624])
	CALL eosio_assert(((int_32)*($7 + [75]) ^ (int_32)[1]), [2672])
	$9 = CALL $116(($0 + [176]), *($3 + [24]), [144])
	$8 = ($3 + [24])
	$6 = ($3 + [16])
	$4 = ($3 + [32])
	$12 = [0]
	if ( ((int_32)*($7 + [52]) <= (int_32)*($9 + [30])) ){ goto $label$1 }
	$12 = [0]
	if ( ((int_32)*($7 + [54]) < (int_32)*($9 + [32])) ){ goto $label$1 }
	$12 = [0]
	$11 = *($9 + [34])
	$10 = *($7 + [58])
	if ( ((int_32)$10 < (int_32)$11) ){ goto $label$1 }
	$12 = [0]
	if ( ((int_32)($11 + $10) > (int_32)[50]) ){ goto $label$1 }
	$12 = [0]
	if ( ((uint_32)(*($7 + [60]) - *($9 + [36])) > (uint_32)[50]) ){ goto $label$1 }
	$12 = ((int_32)*($7 + [56]) > (int_32)*($9 + [38]))
	
.LABEL $label$1
	CALL eosio_assert($12, [2720])
	*($13 + [20]) = $9
	*($13 + [16]) = ($13 + [8])
	CALL $142($5, $7, ($13 + [16]))
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$2), [176])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$15()), [224])
	*($4) = [0]
	$7 = ($3 + [8])
	*($13 + [88]) = *($7)
	$9 = ($3 + [33])
	*($13 + [96]) = *($9)
	$1 = *($3)
	CALL eosio_assert([1], [400])
	*($13 + [80]) = (($13 + [16]) + [50])
	*($13 + [76]) = ($13 + [16])
	*($13 + [72]) = ($13 + [16])
	*($13 + [104]) = ($13 + [72])
	*($13 + [116]) = $7
	*($13 + [112]) = $3
	*($13 + [120]) = $6
	*($13 + [124]) = $8
	*($13 + [128]) = $4
	*($13 + [132]) = $9
	*($13 + [136]) = ($3 + [40])
	CALL $123(($13 + [112]), ($13 + [104]))
	CALL db_update_i64(*($3 + [60]), (int_64)0, ($13 + [16]), [50])
	$2 = ($0 + [232])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$2 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$2 = (($13 + [88]) + [8])
	*($13 + [112]) = *($7)
	if ( (CALL memcmp(($13 + [88]), ($13 + [112]), [8]) == 0) ){ goto $label$3 }
	$4 = ($3 + [64])
	$7 = *($4)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128064, ($13 + [104]), $1)
	*($4) = $7
	
.LABEL $label$4
	CALL db_idx64_update($7, (int_64)0, ($13 + [112]))
	
.LABEL $label$3
	*($13 + [112]) = *($9)
	if ( (CALL memcmp($2, ($13 + [112]), [8]) == 0) ){ goto $label$5 }
	$7 = ($3 + [68])
	$3 = *($7)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128065, ($13 + [104]), $1)
	*($7) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, (int_64)0, ($13 + [112]))
	
.LABEL $label$5
	*([0] + [4]) = ($13 + [144])
}

void .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_32 $29
	int_32 $30
	int_32 $31
	$31 = (*([0] + [4]) - [144])
	*([0] + [4]) = $31
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = ($1 + [32])
	*(($30 = $31) + [16]) = *($3)
	$4 = ($1 + [88])
	*($30 + [24]) = *($4)
	$5 = *($1)
	$27 = *($1 + [50])
	$28 = CALL current_time()
	$27 = ($27 + ((uint_32)((int_32)((uint_32)((int_32)((CASTING uint_32)(uint_64 ((uint_64)$28 / (uint_64)(int_64)1000000)) - *($1 + [112])) * (int_32)[1000]) / (uint_32)[60]) * (int_32)*($1 + [56])) / (uint_32)[1000]))
	$29 = *($1 + [48])
	*($1 + [50]) = ( $29 ? $27 : ((uint_32)$27 > (uint_32)$29) )
	*($1 + [112]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [52]) = (*($1 + [52]) + *(*($2) + [30]))
	*($1 + [54]) = (*($1 + [54]) + *(*($2) + [32]))
	*($1 + [58]) = (*($1 + [58]) + *(*($2) + [34]))
	*($1 + [60]) = (*($1 + [60]) + *(*($2) + [36]))
	*($1 + [56]) = (*($1 + [56]) + *(*($2) + [38]))
	*((($27 = *($1 + [116])) + (*(*($2 + [4])) << [4]))) = [1]
	*(($27 + (*(*($2 + [4])) << [4])) + [8]) = *(*($2 + [8]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [400])
	*($30 + [32]) = [0]
	*($30) = ($30 + [32])
	$29 = ($1 + [8])
	*($30 + [44]) = $29
	*($30 + [40]) = $1
	$14 = ($1 + [20])
	*($30 + [48]) = $14
	$15 = ($1 + [22])
	*($30 + [52]) = $15
	$16 = ($1 + [24])
	*($30 + [56]) = $16
	*($30 + [60]) = $3
	$17 = ($1 + [40])
	*($30 + [64]) = $17
	$9 = ($1 + [48])
	*($30 + [68]) = $9
	$6 = ($1 + [50])
	*($30 + [72]) = $6
	$10 = ($1 + [52])
	*($30 + [76]) = $10
	$11 = ($1 + [54])
	*($30 + [80]) = $11
	$8 = ($1 + [56])
	*($30 + [84]) = $8
	$12 = ($1 + [58])
	*($30 + [88]) = $12
	$13 = ($1 + [60])
	*($30 + [92]) = $13
	$18 = ($1 + [64])
	*($30 + [96]) = $18
	$19 = ($1 + [68])
	*($30 + [100]) = $19
	$20 = ($1 + [72])
	*($30 + [104]) = $20
	$21 = ($1 + [73])
	*($30 + [108]) = $21
	$22 = ($1 + [74])
	*($30 + [112]) = $22
	$23 = ($1 + [75])
	*($30 + [116]) = $23
	$24 = ($1 + [80])
	*($30 + [120]) = $24
	*($30 + [124]) = $4
	$25 = ($1 + [96])
	*($30 + [128]) = $25
	$7 = ($1 + [112])
	*($30 + [132]) = $7
	$26 = ($1 + [116])
	*($30 + [136]) = $26
	CALL $108(($30 + [40]), $30)
	$27 = *($30 + [32])
	if ( ($27 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($27)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($31 - (($27 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	*($30 + [4]) = $2
	*($30) = $2
	*($30 + [8]) = ($2 + $27)
	*($30 + [32]) = $30
	*($30 + [44]) = $29
	*($30 + [48]) = $14
	*($30 + [52]) = $15
	*($30 + [56]) = $16
	*($30 + [60]) = $3
	*($30 + [64]) = $17
	*($30 + [40]) = $1
	*($30 + [68]) = $9
	*($30 + [72]) = $6
	*($30 + [76]) = $10
	*($30 + [80]) = $11
	*($30 + [84]) = $8
	*($30 + [88]) = $12
	*($30 + [92]) = $13
	*($30 + [96]) = $18
	*($30 + [100]) = $19
	*($30 + [104]) = $20
	*($30 + [108]) = $21
	*($30 + [112]) = $22
	*($30 + [116]) = $23
	*($30 + [120]) = $24
	*($30 + [124]) = $4
	*($30 + [128]) = $25
	*($30 + [132]) = $7
	*($30 + [136]) = $26
	CALL $109(($30 + [40]), ($30 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $2, $27)
	if ( ($27 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$2 = (($30 + [16]) + [8])
	*($30 + [40]) = *($3)
	if ( (CALL memcmp(($30 + [16]), ($30 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [136])
	$27 = *($3)
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$6 }
	$27 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($30 + [32]), $5)
	*($3) = $27
	
.LABEL $label$6
	CALL db_idx64_update($27, (int_64)0, ($30 + [40]))
	
.LABEL $label$5
	*($30 + [40]) = *($4)
	if ( (CALL memcmp($2, ($30 + [40]), [8]) == 0) ){ goto $label$7 }
	$2 = ($1 + [140])
	$1 = *($2)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($30 + [32]), $5)
	*($2) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, (int_64)0, ($30 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($30 + [144])
}

void .FUNC _ZN5eosio2bk9wtransferEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = $2
	$5 = ($0 + [96])
	$4 = CALL $127($5, $1, [144])
	if ( CALL has_auth(*($0)) ){ goto $label$1 }
	CALL require_auth(*(($4 + [32])))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*(($4 + [32])) != (int_64)$2), [2752])
	CALL eosio_assert(((int_32)*($4 + [72]) ^ (int_32)[1]), [2784])
	CALL eosio_assert(((int_32)*($4 + [88]) ^ (int_32)[1]), [2832])
	$3 = *(($0 + [80]))
	$7 = *(($0 + [84]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = ($7 + [-24])
	$9 = ([0] - $3)
	
.LOOP $label$3:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$2 }
	$7 = $6
	$8 = ($6 + [-24])
	$6 = $8
	if ( ((int_32)($8 + $9) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	$8 = ($0 + [56])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$8), [480])
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030912129794572288, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $10($8, $7)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$8), [480])
	
.LABEL $label$4
	$7 = [0]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [2880])
	*($10) = ($10 + [8])
	CALL $144($5, $4, $10)
	$8 = *($4 + [116])
	$3 = ($4 + [120])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$6 }
	$6 = [8]
	$5 = ($4 + [116])
	
.LOOP $label$7:
	$4 = ($8 + $6)
	if ( (*(($4 + [-8])) == 0) ){ goto $label$8 }
	CALL _ZN5eosio2bk9etransferEyy($0, *($4), *($10 + [8]))
	$8 = *($5)
	$9 = *($3)
	
.LABEL $label$8
	$6 = ($6 + [16])
	$7 = ($7 + [1])
	if ( ($7 <= int_32(($9 - $8) >> [4])) ){ goto $label$7 }
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_64 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	$31 = (*([0] + [4]) - [144])
	*([0] + [4]) = $31
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = ($1 + [32])
	*(($30 = $31) + [16]) = *($3)
	$4 = ($1 + [88])
	*($30 + [24]) = *($4)
	$6 = ($1 + [116])
	$5 = *($1)
	$28 = *($1 + [116])
	$29 = *(($1 + [120]))
	if ( ((int_32)$29 == (int_32)$28) ){ goto $label$1 }
	$7 = int_32(($29 - $28) >> [4])
	$8 = *($2)
	$29 = [0]
	
.LOOP $label$3:
	if ( (*($28) == 0) ){ goto $label$4 }
	if ( ((int_64)*(($28 + [8])) == (int_64)*($8)) ){ goto $label$2 }
	
.LABEL $label$4
	$28 = ($28 + [16])
	$29 = ($29 + [1])
	if ( ($29 <= $7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($28) = [0]
	
.LABEL $label$1
	$28 = *($1 + [50])
	$27 = CALL current_time()
	$28 = ($28 + ((uint_32)((int_32)((uint_32)((int_32)((CASTING uint_32)(uint_64 ((uint_64)$27 / (uint_64)(int_64)1000000)) - *($1 + [112])) * (int_32)[1000]) / (uint_32)[60]) * (int_32)*($1 + [56])) / (uint_32)[1000]))
	$29 = *($1 + [48])
	*($1 + [50]) = ( $29 ? $28 : ((uint_32)$28 > (uint_32)$29) )
	*($1 + [112]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [52]) = (*($1 + [52]) - *(*($2 + [4]) + [30]))
	*($1 + [54]) = (*($1 + [54]) - *(*($2 + [4]) + [32]))
	*($1 + [60]) = (*($1 + [60]) - *(*($2 + [4]) + [36]))
	*($1 + [58]) = (*($1 + [58]) - *(*($2 + [4]) + [34]))
	*($1 + [56]) = (*($1 + [56]) - *(*($2 + [4]) + [38]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [400])
	*($30 + [32]) = [0]
	*($30) = ($30 + [32])
	$7 = ($1 + [8])
	*($30 + [44]) = $7
	*($30 + [40]) = $1
	$8 = ($1 + [20])
	*($30 + [48]) = $8
	$2 = ($1 + [22])
	*($30 + [52]) = $2
	$17 = ($1 + [24])
	*($30 + [56]) = $17
	*($30 + [60]) = $3
	$18 = ($1 + [40])
	*($30 + [64]) = $18
	$12 = ($1 + [48])
	*($30 + [68]) = $12
	$9 = ($1 + [50])
	*($30 + [72]) = $9
	$13 = ($1 + [52])
	*($30 + [76]) = $13
	$14 = ($1 + [54])
	*($30 + [80]) = $14
	$11 = ($1 + [56])
	*($30 + [84]) = $11
	$16 = ($1 + [58])
	*($30 + [88]) = $16
	$15 = ($1 + [60])
	*($30 + [92]) = $15
	$19 = ($1 + [64])
	*($30 + [96]) = $19
	$20 = ($1 + [68])
	*($30 + [100]) = $20
	$21 = ($1 + [72])
	*($30 + [104]) = $21
	$22 = ($1 + [73])
	*($30 + [108]) = $22
	$23 = ($1 + [74])
	*($30 + [112]) = $23
	$24 = ($1 + [75])
	*($30 + [116]) = $24
	$25 = ($1 + [80])
	*($30 + [120]) = $25
	*($30 + [124]) = $4
	$26 = ($1 + [96])
	*($30 + [128]) = $26
	$10 = ($1 + [112])
	*($30 + [132]) = $10
	*($30 + [136]) = $6
	CALL $108(($30 + [40]), $30)
	$29 = *($30 + [32])
	if ( ($29 <= [513]) ){ goto $label$6 }
	$28 = CALL malloc($29)
	goto $label$5 
	
.LABEL $label$6
	$28 = ($31 - (($29 + [15]) & [-16]))
	*([0] + [4]) = $28
	
.LABEL $label$5
	*($30 + [4]) = $28
	*($30) = $28
	*($30 + [8]) = ($28 + $29)
	*($30 + [32]) = $30
	*($30 + [44]) = $7
	*($30 + [48]) = $8
	*($30 + [52]) = $2
	*($30 + [56]) = $17
	*($30 + [60]) = $3
	*($30 + [64]) = $18
	*($30 + [40]) = $1
	*($30 + [68]) = $12
	*($30 + [72]) = $9
	*($30 + [76]) = $13
	*($30 + [80]) = $14
	*($30 + [84]) = $11
	*($30 + [88]) = $16
	*($30 + [92]) = $15
	*($30 + [96]) = $19
	*($30 + [100]) = $20
	*($30 + [104]) = $21
	*($30 + [108]) = $22
	*($30 + [112]) = $23
	*($30 + [116]) = $24
	*($30 + [120]) = $25
	*($30 + [124]) = $4
	*($30 + [128]) = $26
	*($30 + [132]) = $10
	*($30 + [136]) = $6
	CALL $109(($30 + [40]), ($30 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $28, $29)
	if ( ($29 <= [513]) ){ goto $label$7 }
	CALL free($28)
	
.LABEL $label$7
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$28 = (($30 + [16]) + [8])
	*($30 + [40]) = *($3)
	if ( (CALL memcmp(($30 + [16]), ($30 + [40]), [8]) == 0) ){ goto $label$9 }
	$7 = ($1 + [136])
	$29 = *($7)
	if ( ((int_32)$29 > (int_32)[-1]) ){ goto $label$10 }
	$29 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($30 + [32]), $5)
	*($7) = $29
	
.LABEL $label$10
	CALL db_idx64_update($29, (int_64)0, ($30 + [40]))
	
.LABEL $label$9
	*($30 + [40]) = *($4)
	if ( (CALL memcmp($28, ($30 + [40]), [8]) == 0) ){ goto $label$11 }
	$28 = ($1 + [140])
	$1 = *($28)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$12 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($30 + [32]), $5)
	*($28) = $1
	
.LABEL $label$12
	CALL db_idx64_update($1, (int_64)0, ($30 + [40]))
	
.LABEL $label$11
	*([0] + [4]) = ($30 + [144])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $54(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($2, *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [32])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [36])) = $6
	CALL $274($6)
	
.LABEL $label$11
	CALL $274($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $274($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-7955357921610170364, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $71($4, CALL $fimport$18(*($4), *($4 + [8]), (int_64)-7955357921610170368, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [480])
	
.LABEL $label$4
	*(($2 + [72])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $273([80])) + [40]) = [0]
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [48]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [32])
	*($8 + [60]) = ($6 + [44])
	CALL $72(($8 + [40]), ($8 + [32]))
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($6 + [60]) = [-1]
	*($6 + [64]) = [-1]
	*($6 + [68]) = [-1]
	*($6 + [72]) = [-1]
	*($6 + [76]) = [-1]
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $73(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [36])) = $7
	CALL $274($7)
	
.LABEL $label$10
	CALL $274($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [1408])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1456])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1520])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [36])) = $6
	CALL $274($6)
	
.LABEL $label$7
	CALL $274($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [36])) = $6
	CALL $274($6)
	
.LABEL $label$10
	CALL $274($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [8]) = $9
	CALL $79(($9 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]), ($0 + [40]), ($0 + [41]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_32 $20
	$13 = (*([0] + [4]) - [96])
	$20 = $13
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$18 = [0]
	$2 = ($1 + [16])
	$19 = *($2)
	if ( ((int_64)$19 != (int_64)0) ){ goto $label$2 }
	$12 = *($1 + [8])
	if ( ((uint_32)$12 > (uint_32)[4]) ){ goto $label$2 }
	goto $label$10 
	
.LABEL $label$10
	$12 = [0]
	$15 = (CASTING uint_64)(uint_32 ((int_32)*($1 + [44]) != (int_32)[0]))
	goto $label$8 
	
.LABEL $label$9
	$12 = ((int_32)*($1 + [44]) != (int_32)[0])
	$15 = (int_64)0
	
.LABEL $label$8
	$16 = (CASTING uint_64)(uint_32 $12)
	$12 = [0]
	goto $label$6 
	
.LABEL $label$7
	$12 = ((int_32)*($1 + [44]) != (int_32)[0])
	$16 = (int_64)0
	$15 = (int_64)0
	
.LABEL $label$6
	$17 = (CASTING uint_64)(uint_32 $12)
	$12 = [0]
	goto $label$4 
	
.LABEL $label$5
	$12 = ((int_32)*($1 + [44]) != (int_32)[0])
	$17 = (int_64)0
	$15 = (int_64)0
	$16 = (int_64)0
	
.LABEL $label$4
	$8 = (CASTING uint_64)(uint_32 $12)
	goto $label$1 
	
.LABEL $label$3
	$18 = ((int_32)*($1 + [44]) != (int_32)[0])
	
.LABEL $label$2
	$8 = (int_64)0
	$16 = (int_64)0
	$15 = (int_64)0
	$17 = (int_64)0
	
.LABEL $label$1
	*($20 + [24]) = $15
	*($20 + [16]) = $19
	*($20 + [32]) = $16
	*($20 + [40]) = $17
	*($20 + [48]) = $8
	*($20 + [56]) = (CASTING uint_64)(uint_32 $18)
	$8 = *($1)
	*($1 + [44]) = (*($1 + [44]) + [-1])
	CALL eosio_assert([1], [400])
	$10 = ($1 + [32])
	$9 = ($1 + [44])
	$11 = *($1 + [32])
	$12 = *(($1 + [36]))
	$14 = ($12 - $11)
	$19 = (CASTING uint_64)(uint_32 int_32($14 >> [3]))
	$7 = ($20 + [56])
	$6 = (($20 + [16]) + [32])
	$5 = ($20 + [40])
	$4 = (($20 + [16]) + [16])
	$3 = ($20 + [24])
	$18 = [25]
	
.LOOP $label$11:
	$18 = ($18 + [1])
	$19 = (uint_64)$19 >> (uint_64)(int_64)7
	if ( ((int_64)$19) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$12 }
	$18 = (($14 & [-8]) + $18)
	
.LABEL $label$12
	$12 = ($18 + [2])
	if ( ($12 <= [513]) ){ goto $label$14 }
	$18 = CALL malloc($12)
	goto $label$13 
	
.LABEL $label$14
	$18 = ($13 - (($12 + [15]) & [-16]))
	*([0] + [4]) = $18
	
.LABEL $label$13
	*($20 + [4]) = $18
	*($20) = $18
	*($20 + [8]) = ($18 + $12)
	*($20 + [64]) = $20
	*($20 + [80]) = $2
	*($20 + [88]) = $10
	*($20 + [92]) = $9
	*($20 + [72]) = $1
	$13 = ($1 + [8])
	*($20 + [76]) = $13
	*($20 + [84]) = ($1 + [24])
	CALL $78(($20 + [72]), ($20 + [64]))
	CALL db_update_i64(*($1 + [52]), (int_64)0, $18, $12)
	if ( ($12 <= [513]) ){ goto $label$15 }
	CALL free($18)
	
.LABEL $label$15
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$16 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($20 + [72]) = *($2)
	if ( (CALL memcmp(($20 + [16]), ($20 + [72]), [8]) == 0) ){ goto $label$17 }
	$12 = ($1 + [56])
	$18 = *($12)
	if ( ((int_32)$18 > (int_32)[-1]) ){ goto $label$18 }
	$18 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7955357921610170368, ($20 + [64]), $8)
	*($12) = $18
	
.LABEL $label$18
	CALL db_idx64_update($18, (int_64)0, ($20 + [72]))
	
.LABEL $label$17
	$18 = [0]
	if ( ((int_64)*($2) != (int_64)0) ){ goto $label$19 }
	if ( *($13) ){ goto $label$19 }
	$18 = ((int_32)*($9) != (int_32)[0])
	
.LABEL $label$19
	*($20 + [72]) = (CASTING uint_64)(uint_32 $18)
	if ( (CALL memcmp($3, ($20 + [72]), [8]) == 0) ){ goto $label$20 }
	$12 = ($1 + [60])
	$18 = *($12)
	if ( ((int_32)$18 > (int_32)[-1]) ){ goto $label$21 }
	$18 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7955357921610170367, ($20 + [64]), $8)
	*($12) = $18
	
.LABEL $label$21
	CALL db_idx64_update($18, (int_64)0, ($20 + [72]))
	
.LABEL $label$20
	$18 = [0]
	if ( ((int_64)*($2) != (int_64)0) ){ goto $label$22 }
	if ( ((int_32)*($13) != (int_32)[1]) ){ goto $label$22 }
	$18 = ((int_32)*($9) != (int_32)[0])
	
.LABEL $label$22
	*($20 + [72]) = (CASTING uint_64)(uint_32 $18)
	if ( (CALL memcmp($4, ($20 + [72]), [8]) == 0) ){ goto $label$23 }
	$12 = ($1 + [64])
	$18 = *($12)
	if ( ((int_32)$18 > (int_32)[-1]) ){ goto $label$24 }
	$18 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7955357921610170366, ($20 + [64]), $8)
	*($12) = $18
	
.LABEL $label$24
	CALL db_idx64_update($18, (int_64)0, ($20 + [72]))
	
.LABEL $label$23
	$18 = [0]
	if ( ((int_64)*($2) != (int_64)0) ){ goto $label$25 }
	if ( ((int_32)*($13) != (int_32)[2]) ){ goto $label$25 }
	$18 = ((int_32)*($9) != (int_32)[0])
	
.LABEL $label$25
	*($20 + [72]) = (CASTING uint_64)(uint_32 $18)
	if ( (CALL memcmp($5, ($20 + [72]), [8]) == 0) ){ goto $label$26 }
	$12 = ($1 + [68])
	$18 = *($12)
	if ( ((int_32)$18 > (int_32)[-1]) ){ goto $label$27 }
	$18 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7955357921610170365, ($20 + [64]), $8)
	*($12) = $18
	
.LABEL $label$27
	CALL db_idx64_update($18, (int_64)0, ($20 + [72]))
	
.LABEL $label$26
	$18 = [0]
	if ( ((int_64)*($2) != (int_64)0) ){ goto $label$28 }
	if ( ((int_32)*($13) != (int_32)[3]) ){ goto $label$28 }
	$18 = ((int_32)*($9) != (int_32)[0])
	
.LABEL $label$28
	*($20 + [72]) = (CASTING uint_64)(uint_32 $18)
	if ( (CALL memcmp($6, ($20 + [72]), [8]) == 0) ){ goto $label$29 }
	$12 = ($1 + [72])
	$18 = *($12)
	if ( ((int_32)$18 > (int_32)[-1]) ){ goto $label$30 }
	$18 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7955357921610170364, ($20 + [64]), $8)
	*($12) = $18
	
.LABEL $label$30
	CALL db_idx64_update($18, (int_64)0, ($20 + [72]))
	
.LABEL $label$29
	$18 = [0]
	if ( ((int_64)*($2) != (int_64)0) ){ goto $label$31 }
	if ( ((int_32)*($13) != (int_32)[4]) ){ goto $label$31 }
	$18 = ((int_32)*($9) != (int_32)[0])
	
.LABEL $label$31
	*($20 + [72]) = (CASTING uint_64)(uint_32 $18)
	if ( (CALL memcmp($7, ($20 + [72]), [8]) == 0) ){ goto $label$32 }
	$1 = ($1 + [76])
	$18 = *($1)
	if ( ((int_32)$18 > (int_32)[-1]) ){ goto $label$33 }
	$18 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7955357921610170363, ($20 + [64]), $8)
	*($1) = $18
	
.LABEL $label$33
	CALL db_idx64_update($18, (int_64)0, ($20 + [72]))
	
.LABEL $label$32
	*([0] + [4]) = ($20 + [96])
	$12
}

int_32 .FUNC $74 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [480])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-7955357921610170368, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $71($0, $5)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [480])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [48])
	$14 = $15
	*([0] + [4]) = $15
	$2 = *($0)
	$12 = *($0 + [4])
	$8 = *($12)
	$6 = ($8 + [472])
	$13 = *($6)
	if ( ((int_64)$13 != (int_64)-1) ){ goto $label$1 }
	$13 = (int_64)0
	$5 = ($8 + [456])
	$4 = CALL db_lowerbound_i64(*($5), *(($8 + [464])), (int_64)-7955357921610170368, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $71($5, $4)
	*($14 + [28]) = [0]
	*($14 + [24]) = $5
	$13 = *(*(CALL $80(($14 + [24])) + [4]))
	$13 = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($8 + [472])) = $13
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($13 <= (int_64)-2), [1168])
	*($1) = *($6)
	*($1 + [16]) = *(*($12 + [4]))
	*($1 + [24]) = *(*($12 + [8]) + [24])
	$5 = ($1 + [32])
	$8 = *($12 + [8])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$4 }
	CALL $81($5, *($8 + [32]), *(($8 + [36])))
	$12 = *(($12 + [8]))
	goto $label$3 
	
.LABEL $label$4
	$12 = $1
	
.LABEL $label$3
	$4 = ($1 + [24])
	$3 = ($1 + [16])
	*($1 + [8]) = *($12 + [8])
	$7 = *($5)
	$8 = *(($1 + [36]))
	$9 = ($8 - $7)
	$13 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$6 = ($1 + [8])
	$12 = [25]
	
.LOOP $label$5:
	$12 = ($12 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	$12 = (($9 & [-8]) + $12)
	
.LABEL $label$6
	$8 = ($12 + [2])
	if ( ($8 <= [513]) ){ goto $label$8 }
	$12 = CALL malloc($8)
	goto $label$7 
	
.LABEL $label$8
	$12 = ($15 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $12
	
.LABEL $label$7
	*($14 + [4]) = $12
	*($14) = $12
	*($14 + [8]) = ($12 + $8)
	*($14 + [16]) = $14
	*($14 + [28]) = $6
	*($14 + [24]) = $1
	*($14 + [32]) = $3
	*($14 + [36]) = $4
	*($14 + [40]) = $5
	$4 = ($1 + [44])
	*($14 + [44]) = $4
	CALL $78(($14 + [24]), ($14 + [16]))
	$13 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-7955357921610170368, *(*($0 + [8])), $13, $12, $8)
	if ( ($8 <= [513]) ){ goto $label$9 }
	CALL free($12)
	
.LABEL $label$9
	if ( (uint_64)($13 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$8 = ($2 + [8])
	$13 = *($8)
	$12 = *(($0 + [8]))
	$10 = *($12)
	$11 = *($1)
	$0 = ($1 + [16])
	*($14 + [24]) = *($0)
	*($1 + [56]) = CALL db_idx64_store($13, (int_64)-7955357921610170368, $10, $11, ($14 + [24]))
	$13 = *($12)
	$10 = *($8)
	$11 = *($1)
	$15 = [0]
	$5 = [0]
	if ( ((int_64)*($0) != (int_64)0) ){ goto $label$11 }
	$5 = [0]
	if ( *($6) ){ goto $label$11 }
	$5 = ((int_32)*($4) != (int_32)[0])
	
.LABEL $label$11
	*($14 + [24]) = (CASTING uint_64)(uint_32 $5)
	*(($1 + [60])) = CALL db_idx64_store($10, (int_64)-7955357921610170367, $13, $11, ($14 + [24]))
	$13 = *($8)
	$10 = *($1)
	$11 = *($12)
	if ( ((int_64)*($0) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)*($6) != (int_32)[1]) ){ goto $label$12 }
	$15 = ((int_32)*($4) != (int_32)[0])
	
.LABEL $label$12
	*($14 + [24]) = (CASTING uint_64)(uint_32 $15)
	*(($1 + [64])) = CALL db_idx64_store($13, (int_64)-7955357921610170366, $11, $10, ($14 + [24]))
	$5 = ($2 + [8])
	$13 = *($5)
	$10 = *($1)
	$11 = *($12)
	$8 = [0]
	$0 = [0]
	$15 = ($1 + [16])
	if ( ((int_64)*($15) != (int_64)0) ){ goto $label$13 }
	$0 = [0]
	if ( ((int_32)*($6) != (int_32)[2]) ){ goto $label$13 }
	$0 = ((int_32)*($4) != (int_32)[0])
	
.LABEL $label$13
	*($14 + [24]) = (CASTING uint_64)(uint_32 $0)
	*(($1 + [68])) = CALL db_idx64_store($13, (int_64)-7955357921610170365, $11, $10, ($14 + [24]))
	$13 = *($5)
	$10 = *($1)
	$11 = *($12)
	if ( ((int_64)*($15) != (int_64)0) ){ goto $label$14 }
	if ( ((int_32)*($6) != (int_32)[3]) ){ goto $label$14 }
	$8 = ((int_32)*($4) != (int_32)[0])
	
.LABEL $label$14
	*($14 + [24]) = (CASTING uint_64)(uint_32 $8)
	*(($1 + [72])) = CALL db_idx64_store($13, (int_64)-7955357921610170364, $11, $10, ($14 + [24]))
	$13 = *(($2 + [8]))
	$10 = *($1)
	$11 = *($12)
	$12 = [0]
	if ( ((int_64)*(($1 + [16])) != (int_64)0) ){ goto $label$15 }
	if ( ((int_32)*($6) != (int_32)[4]) ){ goto $label$15 }
	$12 = ((int_32)*($4) != (int_32)[0])
	
.LABEL $label$15
	*($14 + [24]) = (CASTING uint_64)(uint_32 $12)
	*(($1 + [76])) = CALL db_idx64_store($13, (int_64)-7955357921610170363, $11, $10, ($14 + [24]))
	*([0] + [4]) = ($14 + [48])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $52(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($0 + [4]), $2, [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$8 = *($0)
	$7 = *($8 + [4])
	$9 = *($7 + [56])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$2 }
	$9 = *($8)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-7955357921610170368, ($10 + [8]), *($7))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($9)
	
.LABEL $label$1
	$8 = *($0)
	$7 = *($8 + [4])
	$9 = *(($7 + [60]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$4 }
	$9 = *($8)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-7955357921610170367, ($10 + [8]), *($7))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($9)
	
.LABEL $label$3
	$8 = *($0)
	$7 = *($8 + [4])
	$9 = *(($7 + [64]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$6 }
	$9 = *($8)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-7955357921610170366, ($10 + [8]), *($7))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($9)
	
.LABEL $label$5
	$8 = *($0)
	$7 = *($8 + [4])
	$9 = *(($7 + [68]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$8 }
	$9 = *($8)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-7955357921610170365, ($10 + [8]), *($7))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx64_remove($9)
	
.LABEL $label$7
	$8 = *($0)
	$7 = *($8 + [4])
	$9 = *(($7 + [72]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$10 }
	$9 = *($8)
	$9 = CALL db_idx64_find_primary(*($9), *($9 + [8]), (int_64)-7955357921610170364, ($10 + [8]), *($7))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($9)
	
.LABEL $label$9
	$9 = *($0)
	$8 = *($9 + [4])
	$0 = *(($8 + [76]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$12 }
	$0 = *($9)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7955357921610170363, ($10 + [8]), *($8))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL db_idx64_remove($0)
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $241 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [672])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [672])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $259 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL $15(*($1), *($0))
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [12]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [14]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [16]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	*($3 + [8]) = $0
	CALL $261(($3 + [8]), $1)
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $258 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [672])
	CALL memcpy(($0 + [24]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC $223 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [48])
	*([0] + [4]) = $13
	$3 = *(($0 + [4]))
	$12 = ($3 << [5])
	$2 = *($0)
	$4 = ($2 + $12)
	$6 = $2
	if ( (($3 & [134217727]) == 0) ){ goto $label$1 }
	$12 = int_32($12 >> [5])
	$6 = $2
	$11 = $2
	
.LOOP $label$2:
	$9 = (uint_64)(*($9) <= $1)
	$8 = uint_32($12 >> [1])
	$9 = ($11 + ($8 << [5]))
	$10 = ($9 + [32])
	$11 = ( $10 ? $11 : $9 )
	$6 = ( $10 ? $6 : $9 )
	$12 = ( (($12 + [-1]) - $8) ? $8 : $9 )
	if ( $12 ){ goto $label$2 }
	
.LABEL $label$1
	$12 = ((int_32)$6 == (int_32)$4)
	if ( $12 ){ goto $label$10 }
	if ( ((uint_64)*($6) <= (uint_64)$1) ){ goto $label$9 }
	
.LABEL $label$10
	*(($11 = (($13 + [24]) + [16]))) = (int_64)0
	*(($8 = (($13 + [24]) + [8]))) = (int_64)0
	*($13 + [24]) = (int_64)0
	*(($13 + [16])) = *($11)
	*(($13 + [8])) = *($8)
	*($13) = *($13 + [24])
	if ( $12 ){ goto $label$11 }
	if ( ((uint_64)*($6) <= (uint_64)$1) ){ goto $label$8 }
	
.LABEL $label$11
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$5 }
	$8 = ($6 + [-32])
	$5 = *($8)
	if ( (uint_64)($5 <= $1) ){ goto $label$5 }
	if ( ((uint_64)$5 <= (uint_64)$1) ){ goto $label$4 }
	$6 = $2
	$12 = int_32(($8 - $2) >> [5])
	if ( $12 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$8 = $6
	goto $label$4 
	
.LABEL $label$8
	$12 = int_32(($4 - $6) >> [5])
	if ( ($12 == 0) ){ goto $label$12 }
	
.LOOP $label$13:
	$11 = uint_32($12 >> [1])
	$8 = ($6 + ($11 << [5]))
	if ( ((uint_64)*($8) >= (uint_64)$1) ){ goto $label$14 }
	$6 = ($8 + [32])
	$11 = (($12 + [-1]) - $11)
	
.LABEL $label$14
	$12 = $11
	if ( $12 ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$5 }
	$8 = $6
	if ( ((uint_64)*($6) > (uint_64)$1) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	
.LOOP $label$15:
	$11 = uint_32($12 >> [1])
	$9 = ($6 + ($11 << [5]))
	if ( ((uint_64)*($9) >= (uint_64)$1) ){ goto $label$16 }
	$6 = ($9 + [32])
	$11 = (($12 + [-1]) - $11)
	
.LABEL $label$16
	$12 = $11
	if ( $12 ){ goto $label$15 }
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$5 }
	$8 = $6
	if ( ((uint_64)*($6) <= (uint_64)$1) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = int_32(($6 - $2) >> [5])
	if ( ((int_32)*(($0 + [8])) != (int_32)$3) ){ goto $label$21 }
	if ( ((int_32)$3 == (int_32)[134217727]) ){ goto $label$3 }
	$12 = ($3 + [1])
	if ( ((uint_32)$3 > (uint_32)[536870911]) ){ goto $label$20 }
	$11 = ((uint_32)($3 << [3]) / (uint_32)[5])
	goto $label$19 
	
.LABEL $label$21
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$18 }
	$12 = ($4 + [-32])
	*($4) = *($12)
	*((($11 = ($2 + ($3 << [5]))) + [24])) = *(($4 + [-8]))
	*(($11 + [16])) = *(($4 + [-16]))
	*($11 + [8]) = *(($4 + [-24]))
	*(($11 = ($0 + [4]))) = (*($11) + [1])
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$22 }
	
.LOOP $label$23:
	$11 = ($12 + [-32])
	*($12) = *($11)
	*(($12 + [28])) = *(($12 + [-4]))
	*(($12 + [24])) = *(($12 + [-8]))
	*(($12 + [20])) = *(($12 + [-12]))
	*(($12 + [16])) = *(($12 + [-16]))
	*(($12 + [12])) = *(($12 + [-20]))
	*(($12 + [8])) = *(($12 + [-24]))
	$12 = $11
	if ( ((int_32)$6 != (int_32)$11) ){ goto $label$23 }
	
.LABEL $label$22
	*($6) = $1
	*(($6 + [24])) = *(($13 + [16]))
	*(($6 + [16])) = *(($13 + [8]))
	*(($6 + [12])) = *($13 + [4])
	*($6 + [8]) = *($13)
	goto $label$17 
	
.LABEL $label$20
	$11 = ( [-1] ? ($3 << [3]) : ((uint_32)$3 > (uint_32)[-1610612737]) )
	
.LABEL $label$19
	$11 = ( $11 ? [134217727] : ($11 <= [134217727]) )
	$3 = ( $12 ? $11 : ((uint_32)$12 > (uint_32)$11) )
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$9 = CALL $273(($3 << [5]))
	$12 = $9
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$24 }
	$12 = $9
	if ( ($10 == 0) ){ goto $label$24 }
	$11 = [0]
	
.LOOP $label$25:
	$12 = ($10 + $11)
	*(($8 = ($9 + $11))) = *($12)
	*(($8 + [24])) = *(($12 + [24]))
	*(($8 + [16])) = *(($12 + [16]))
	*(($8 + [8])) = *(($12 + [8]))
	$11 = ($11 + [32])
	if ( ((int_32)($12 + [32]) != (int_32)$6) ){ goto $label$25 }
	$12 = (($9 + ((($6 + [-32]) - $10) & [-32])) + [32])
	
.LABEL $label$24
	*($12 + [8]) = *($13)
	*($12) = $1
	*(($12 + [12])) = *($13 + [4])
	*(($12 + [28])) = *(($13 + [20]))
	*(($12 + [24])) = *(($13 + [16]))
	*(($12 + [20])) = *(($13 + [12]))
	*(($12 + [16])) = *(($13 + [8]))
	$2 = ($12 + [32])
	if ( ($10 == 0) ){ goto $label$26 }
	$8 = ($10 + (*(($0 + [4])) << [5]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$27 }
	$12 = $6
	$11 = $2
	
.LOOP $label$28:
	*($11) = *($12)
	*(($11 + [24])) = *(($12 + [24]))
	*(($11 + [16])) = *(($12 + [16]))
	*(($11 + [8])) = *(($12 + [8]))
	$11 = ($11 + [32])
	$12 = ($12 + [32])
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$28 }
	$2 = (($2 + ((($8 + [-32]) - $6) & [-32])) + [32])
	
.LABEL $label$27
	CALL $274(*($0))
	
.LABEL $label$26
	*($0) = $9
	*(($0 + [8])) = $3
	*(($0 + [4])) = int_32(($2 - $9) >> [5])
	$8 = ($9 + ($7 << [5]))
	goto $label$4 
	
.LABEL $label$18
	*($4) = $1
	*(($6 = ($2 + ($3 << [5]))) + [8]) = *($13)
	*(($6 + [24])) = *(($13 + [16]))
	*(($6 + [16])) = *(($13 + [8]))
	*(($6 = ($0 + [4]))) = (*($6) + [1])
	
.LABEL $label$17
	$8 = (*($0) + ($7 << [5]))
	
.LABEL $label$4
	*([0] + [4]) = ($13 + [48])
	return ($8 + [8])
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_64 .FUNC llabs (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

void .FUNC $268 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($2 + [18]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [20]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [22]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [24]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [48]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
}

int_32 .FUNC $251 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [672])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $15(($2 + [48]), (($2 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $256(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $274(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

int_32 .FUNC $250 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($7) = (int_64)0
	*($7 + [8]) = [0]
	*($7 + [12]) = [0]
	*($7 + [20]) = $1
	*($7 + [16]) = $1
	*($7 + [24]) = ($1 + $3)
	*($7 + [32]) = ($7 + [16])
	*($7 + [40]) = $7
	CALL $257(($7 + [40]), ($7 + [32]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($7 + [12]))
	$8 = *(($7 + [10]))
	$0 = *(($7 + [9]))
	$5 = *(($7 + [8]))
	$4 = *($7)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 ($5 & [255])), (int_32 ($0 & [255])), (int_32 ($8 & [65535])), (int_32 ($3 & [65535])), (int_32 $6))
	*([0] + [4]) = ($7 + [48])
	return [1]
}

int_32 .FUNC $253 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [480]))
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [484])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($5 + [36])) = $2
	CALL $274($2)
	
.LABEL $label$6
	CALL $274($5)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [480]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $274($3)
	
.LABEL $label$1
	$2 = *(($0 + [440]))
	if ( ($2 == 0) ){ goto $label$7 }
	$1 = ($0 + [444])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $274(*(($5 + [16])))
	
.LABEL $label$12
	CALL $274($5)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($0 + [440]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $2
	
.LABEL $label$8
	*($1) = $2
	CALL $274($3)
	
.LABEL $label$7
	$2 = *(($0 + [400]))
	if ( ($2 == 0) ){ goto $label$13 }
	$1 = ($0 + [404])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$15 }
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	CALL $274($5)
	
.LABEL $label$17
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$16 }
	$3 = *(($0 + [400]))
	goto $label$14 
	
.LABEL $label$15
	$3 = $2
	
.LABEL $label$14
	*($1) = $2
	CALL $274($3)
	
.LABEL $label$13
	CALL $254(($0 + [360]))
	$1 = *(($0 + [320]))
	if ( ($1 == 0) ){ goto $label$18 }
	$4 = ($0 + [324])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$22 }
	$2 = *(($3 + [20]))
	if ( ($2 == 0) ){ goto $label$23 }
	*(($3 + [24])) = $2
	CALL $274($2)
	
.LABEL $label$23
	$2 = *($3 + [8])
	if ( ($2 == 0) ){ goto $label$24 }
	*(($3 + [12])) = $2
	CALL $274($2)
	
.LABEL $label$24
	CALL $274($3)
	
.LABEL $label$22
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$21 }
	$3 = *(($0 + [320]))
	goto $label$19 
	
.LABEL $label$20
	$3 = $1
	
.LABEL $label$19
	*($4) = $1
	CALL $274($3)
	
.LABEL $label$18
	$2 = *(($0 + [280]))
	if ( ($2 == 0) ){ goto $label$25 }
	$1 = ($0 + [284])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$27 }
	
.LOOP $label$28:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$29 }
	CALL $161($5)
	CALL $274($5)
	
.LABEL $label$29
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$28 }
	$3 = *(($0 + [280]))
	goto $label$26 
	
.LABEL $label$27
	$3 = $2
	
.LABEL $label$26
	*($1) = $2
	CALL $274($3)
	
.LABEL $label$25
	$2 = *(($0 + [240]))
	if ( ($2 == 0) ){ goto $label$30 }
	$1 = ($0 + [244])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$32 }
	
.LOOP $label$33:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$34 }
	CALL $274($5)
	
.LABEL $label$34
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$33 }
	$3 = *(($0 + [240]))
	goto $label$31 
	
.LABEL $label$32
	$3 = $2
	
.LABEL $label$31
	*($1) = $2
	CALL $274($3)
	
.LABEL $label$30
	$2 = *(($0 + [200]))
	if ( ($2 == 0) ){ goto $label$35 }
	$1 = ($0 + [204])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$37 }
	
.LOOP $label$38:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$39 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$40 }
	CALL $274(*(($5 + [16])))
	
.LABEL $label$40
	CALL $274($5)
	
.LABEL $label$39
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$38 }
	$3 = *(($0 + [200]))
	goto $label$36 
	
.LABEL $label$37
	$3 = $2
	
.LABEL $label$36
	*($1) = $2
	CALL $274($3)
	
.LABEL $label$35
	$2 = *(($0 + [160]))
	if ( ($2 == 0) ){ goto $label$41 }
	$1 = ($0 + [164])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$43 }
	
.LOOP $label$44:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$45 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$46 }
	CALL $274(*(($5 + [16])))
	
.LABEL $label$46
	CALL $274($5)
	
.LABEL $label$45
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$44 }
	$3 = *(($0 + [160]))
	goto $label$42 
	
.LABEL $label$43
	$3 = $2
	
.LABEL $label$42
	*($1) = $2
	CALL $274($3)
	
.LABEL $label$41
	$1 = *(($0 + [120]))
	if ( ($1 == 0) ){ goto $label$47 }
	$4 = ($0 + [124])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$49 }
	
.LOOP $label$50:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$51 }
	$2 = *($3 + [116])
	if ( ($2 == 0) ){ goto $label$52 }
	*(($3 + [120])) = $2
	CALL $274($2)
	
.LABEL $label$52
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$53 }
	CALL $274(*(($3 + [16])))
	
.LABEL $label$53
	CALL $274($3)
	
.LABEL $label$51
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$50 }
	$3 = *(($0 + [120]))
	goto $label$48 
	
.LABEL $label$49
	$3 = $1
	
.LABEL $label$48
	*($4) = $1
	CALL $274($3)
	
.LABEL $label$47
	$2 = *(($0 + [80]))
	if ( ($2 == 0) ){ goto $label$54 }
	$1 = ($0 + [84])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$56 }
	
.LOOP $label$57:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$58 }
	CALL $274($5)
	
.LABEL $label$58
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$57 }
	$3 = *(($0 + [80]))
	goto $label$55 
	
.LABEL $label$56
	$3 = $2
	
.LABEL $label$55
	*($1) = $2
	CALL $274($3)
	
.LABEL $label$54
	$2 = *(($0 + [40]))
	if ( ($2 == 0) ){ goto $label$59 }
	$1 = ($0 + [44])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$61 }
	
.LOOP $label$62:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$63 }
	CALL $274($5)
	
.LABEL $label$63
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$62 }
	$3 = *(($0 + [40]))
	goto $label$60 
	
.LABEL $label$61
	$3 = $2
	
.LABEL $label$60
	*($1) = $2
	CALL $274($3)
	
.LABEL $label$59
	return $0
}

int_32 .FUNC $252 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [28]) = [0]
	*($3 + [30]) = [0]
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [672])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	$4 = (($3 + [8]) + [8])
	CALL $54(($3 + [48]), $4)
	CALL eosio_assert(((int_32)*($3 + [56]) != (int_32)*($3 + [52])), [672])
	CALL memcpy(($3 + [28]), *($3 + [52]), [1])
	$2 = (*($3 + [52]) + [1])
	*($3 + [52]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [56]) - $2) > (uint_32)[1]), [672])
	CALL memcpy(($3 + [30]), *($3 + [52]), [2])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $255(($3 + [48]), ($3 + [8]))
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [20])) = $1
	CALL $274($1)
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC $255 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10) = (int_64)0
	$7 = [0]
	*($10 + [8]) = [0]
	$2 = *($1)
	$8 = (*(($1 + [12])) - *($1 + [8]))
	$5 = int_32($8 >> [3])
	if ( ($5 == 0) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$2 }
	$8 = CALL $273($8)
	*(($10 + [8])) = ($8 + ($5 << [3]))
	*($10) = $8
	*($10 + [4]) = $8
	$5 = *(($1 + [8]))
	$7 = (*(($1 + [12])) - $5)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $5, $7)
	$7 = ($8 + $7)
	*($10 + [4]) = $7
	goto $label$4 
	
.LABEL $label$6
	$8 = [0]
	$9 = [0]
	$6 = [0]
	goto $label$3 
	
.LABEL $label$5
	$7 = $8
	
.LABEL $label$4
	$9 = $8
	$6 = $8
	
.LABEL $label$3
	$4 = *($1 + [22])
	$3 = *($1 + [20])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$5 = (*(*($0)) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($5) + $1))
	
.LABEL $label$7
	*($10 + [24]) = [0]
	*($10 + [16]) = (int_64)0
	$0 = ($7 - $6)
	$6 = int_32($0 >> [3])
	if ( ($6 == 0) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$0 = CALL $273($0)
	*(($10 + [24])) = ($0 + ($6 << [3]))
	*($10 + [16]) = $0
	*($10 + [20]) = $0
	$7 = ($7 - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $8, $7)
	*($10 + [20]) = ($0 + $7)
	
.LABEL $label$8
	CALL void $5((int_32 $2), (int_64 ($10 + [16])), (int_32 ($3 & [255])), (int_32 ($4 & [65535])), (int_32 $1))
	$1 = *($10 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($10 + [20]) = $1
	CALL $274($1)
	
.LABEL $label$9
	$1 = *($10)
	if ( ($1 == 0) ){ goto $label$10 }
	*($10 + [4]) = $1
	CALL $274($1)
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $285($10)
	
.LABEL $label$1
	CALL $285(($10 + [16]))
	(unreachable)
}

int_32 .FUNC $254 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$5 = *(($2 + [12]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = *(($2 + [8]))
	
.LOOP $label$7:
	$3 = *(($6 + [12]))
	if ( ($3 == 0) ){ goto $label$8 }
	*(($6 + [16])) = $3
	CALL $274($3)
	
.LABEL $label$8
	$5 = ($5 + [-1])
	if ( ((*($6) & [1]) == 0) ){ goto $label$9 }
	CALL $274(*(($6 + [8])))
	
.LABEL $label$9
	$6 = ($6 + [24])
	if ( $5 ){ goto $label$7 }
	
.LABEL $label$6
	if ( (*(($2 + [16])) == 0) ){ goto $label$10 }
	CALL $274(*(($2 + [8])))
	
.LABEL $label$10
	CALL $274($2)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	$6 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$6 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $274($6)
	
.LABEL $label$1
	return $0
}

void .FUNC $257 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [672])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [672])
	CALL memcpy(($2 + [9]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($2 + [10]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($2 + [12]), *($1 + [4]), [2])
	*($1 + [4]) = (*($1 + [4]) + [2])
}

void .FUNC $256 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $286($4, ($1 + [8]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $286(($4 + [16]), $4)
	CALL void $1((int_32 $2), (int_64 ($4 + [16])), (int_32 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $274(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $274(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

void .FUNC _ZN5eosio2bk10droptablesEv (int_32 $0)
{
}

void .FUNC _ZN5eosio2bk10buywarriorEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL require_auth($1)
	$3 = ($0 + [56])
	$4 = CALL $8($3, $1, [144])
	$5 = ($0 + [136])
	$6 = CALL $100($5, $2, [144])
	CALL eosio_assert(((int_32)*($6 + [24]) != (int_32)[0]), [1696])
	$3 = CALL $8($3, *($0), [144])
	*(($7 = (($8 + [80]) + [8]))) = *(($6 + [48]))
	$2 = *($6 + [40])
	*((($8 + [8]) + [12])) = *((($8 + [80]) + [12]))
	*((($8 + [8]) + [8])) = *($7)
	*($8 + [80]) = $2
	*($8 + [12]) = *($8 + [84])
	*($8 + [8]) = *($8 + [80])
	CALL _ZN5eosio2bk16transfer_balanceERKNS0_6playerES3_NS_5assetE($0, $4, $3, ($8 + [8]))
	CALL $101($5, $6)
	*($8 + [24]) = *($6)
	CALL $286((($8 + [24]) + [8]), ($6 + [8]))
	CALL memcpy((($8 + [24]) + [20]), ($6 + [20]), [36])
	CALL _ZN5eosio2bk28create_warrior_from_twarriorEyNS0_8twarriorE($0, $1, ($8 + [24]))
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL $274(*(($8 + [40])))
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [96])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [1040])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [3952]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [3968]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [3984])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [912]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [928]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [928]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	*(($9 + [560])) = $0
	*(($9 + [568])) = (int_64)-1
	*(($9 + [576])) = (int_64)0
	*($9 + [544]) = (int_64)1397703940
	*($9 + [536]) = $0
	*($9 + [552]) = $0
	*(($9 + [584])) = [0]
	*($9 + [592]) = $0
	*(($9 + [600])) = $0
	*(($9 + [608])) = (int_64)-1
	*(($9 + [616])) = [0]
	*(($9 + [620])) = [0]
	*(($9 + [624])) = [0]
	*($9 + [632]) = $0
	*(($9 + [640])) = $0
	*(($9 + [648])) = (int_64)-1
	*(($9 + [656])) = [0]
	*(($9 + [660])) = [0]
	*(($9 + [664])) = [0]
	*(($9 + [668])) = [0]
	*($9 + [672]) = $0
	*(($9 + [680])) = $0
	*(($9 + [688])) = (int_64)-1
	*(($9 + [696])) = [0]
	*(($9 + [700])) = [0]
	*(($9 + [704])) = [0]
	*($9 + [712]) = $0
	*(($9 + [720])) = $0
	*(($9 + [728])) = (int_64)-1
	*(($9 + [736])) = [0]
	*(($9 + [740])) = [0]
	*(($9 + [744])) = [0]
	*($9 + [752]) = $0
	*(($9 + [760])) = $0
	*(($9 + [768])) = (int_64)-1
	*(($9 + [776])) = [0]
	*(($9 + [780])) = [0]
	*(($9 + [784])) = [0]
	*(($9 + [788])) = [0]
	*($9 + [792]) = $0
	*(($9 + [800])) = $0
	*(($9 + [808])) = (int_64)-1
	*(($9 + [816])) = [0]
	*(($9 + [820])) = [0]
	*(($9 + [824])) = [0]
	*($9 + [832]) = $0
	*(($9 + [840])) = $0
	*(($9 + [848])) = (int_64)-1
	*(($9 + [856])) = [0]
	*(($9 + [860])) = [0]
	*(($9 + [864])) = [0]
	$6 = *($9 + [536])
	*($9 + [872]) = $6
	*(($9 + [880])) = $6
	*(($9 + [888])) = (int_64)-1
	*(($9 + [896])) = [0]
	*(($9 + [900])) = [0]
	*(($9 + [904])) = [0]
	*($9 + [912]) = $6
	*(($9 + [920])) = $6
	*(($9 + [928])) = (int_64)-1
	*(($9 + [936])) = [0]
	*(($9 + [940])) = [0]
	*(($9 + [944])) = [0]
	*(($9 + [948])) = [0]
	*($9 + [952]) = $6
	*(($9 + [960])) = $6
	*(($9 + [968])) = (int_64)-1
	*(($9 + [976])) = [0]
	*(($9 + [980])) = [0]
	*(($9 + [984])) = [0]
	*($9 + [992]) = $6
	*(($9 + [1000])) = $6
	*(($9 + [1008])) = (int_64)-1
	*(($9 + [1016])) = [0]
	*(($9 + [1020])) = [0]
	*(($9 + [1024])) = [0]
	*(($9 + [1032])) = [0]
	*(($9 + [1028])) = [0]
	if ( ((int_64)$2 <= (int_64)3626415963621371391) ){ goto $label$67 }
	if ( ((int_64)$2 <= (int_64)5382474679162241023) ){ goto $label$66 }
	if ( ((int_64)$2 <= (int_64)6202891140790919679) ){ goto $label$64 }
	if ( ((int_64)$2 <= (int_64)6600267696225386495) ){ goto $label$60 }
	if ( ((int_64)$2 == (int_64)6600267696225386496) ){ goto $label$52 }
	if ( ((int_64)$2 == (int_64)6609900437350907904) ){ goto $label$51 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$35 }
	*($9 + [308]) = [0]
	*($9 + [304]) = [1]
	*($9 + [232 align=4]) = *($9 + [304])
	CALL $243(($9 + [536]), ($9 + [232]))
	goto $label$35 
	
.LABEL $label$67
	if ( ((int_64)$2 > (int_64)-2039333636196532225) ){ goto $label$65 }
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$63 }
	if ( ((int_64)$2 > (int_64)-4997490785353465857) ){ goto $label$59 }
	if ( ((int_64)$2 == (int_64)-5918507414128902144) ){ goto $label$50 }
	if ( ((int_64)$2 != (int_64)-5000868485073993728) ){ goto $label$35 }
	*($9 + [524]) = [0]
	*($9 + [520]) = [2]
	*($9 + [16 align=4]) = *($9 + [520])
	CALL $241(($9 + [536]), ($9 + [16]))
	goto $label$35 
	
.LABEL $label$66
	if ( ((int_64)$2 > (int_64)4347220108641304575) ){ goto $label$62 }
	if ( ((int_64)$2 > (int_64)4203420714981654527) ){ goto $label$58 }
	if ( ((int_64)$2 == (int_64)3626415963621371392) ){ goto $label$49 }
	if ( ((int_64)$2 != (int_64)3923308399894200320) ){ goto $label$35 }
	*($9 + [460]) = [0]
	*($9 + [456]) = [3]
	*($9 + [80 align=4]) = *($9 + [456])
	CALL $247(($9 + [536]), ($9 + [80]))
	goto $label$35 
	
.LABEL $label$65
	if ( ((int_64)$2 > (int_64)-1823770030906671105) ){ goto $label$61 }
	if ( ((int_64)$2 > (int_64)-1867559391457009153) ){ goto $label$57 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$48 }
	if ( ((int_64)$2 != (int_64)-1867559532440322048) ){ goto $label$35 }
	*($9 + [404]) = [0]
	*($9 + [400]) = [4]
	*($9 + [136 align=4]) = *($9 + [400])
	CALL $240(($9 + [536]), ($9 + [136]))
	goto $label$35 
	
.LABEL $label$64
	if ( ((int_64)$2 > (int_64)5905872776970895359) ){ goto $label$56 }
	if ( ((int_64)$2 == (int_64)5382474679162241024) ){ goto $label$47 }
	if ( ((int_64)$2 != (int_64)5614120222447763456) ){ goto $label$35 }
	*($9 + [492]) = [0]
	*($9 + [488]) = [5]
	*($9 + [48 align=4]) = *($9 + [488])
	CALL $243(($9 + [536]), ($9 + [48]))
	goto $label$35 
	
.LABEL $label$63
	if ( ((int_64)$2 > (int_64)-3075276113664540673) ){ goto $label$55 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$46 }
	if ( ((int_64)$2 != (int_64)-3104558762969006080) ){ goto $label$35 }
	*($9 + [276]) = [0]
	*($9 + [272]) = [6]
	*($9 + [264 align=4]) = *($9 + [272])
	CALL $242(($9 + [536]), ($9 + [264]))
	goto $label$35 
	
.LABEL $label$62
	if ( ((int_64)$2 > (int_64)4520984413448028159) ){ goto $label$54 }
	if ( ((int_64)$2 == (int_64)4347220108641304576) ){ goto $label$45 }
	if ( ((int_64)$2 != (int_64)4520676597016209296) ){ goto $label$35 }
	*($9 + [500]) = [0]
	*($9 + [496]) = [7]
	*($9 + [40 align=4]) = *($9 + [496])
	CALL $241(($9 + [536]), ($9 + [40]))
	goto $label$35 
	
.LABEL $label$61
	if ( ((int_64)$2 > (int_64)3626406344357576703) ){ goto $label$53 }
	if ( ((int_64)$2 == (int_64)-1823770030906671104) ){ goto $label$44 }
	if ( ((int_64)$2 != (int_64)-1823770025087680512) ){ goto $label$35 }
	*($9 + [340]) = [0]
	*($9 + [336]) = [8]
	*($9 + [200 align=4]) = *($9 + [336])
	CALL $241(($9 + [536]), ($9 + [200]))
	goto $label$35 
	
.LABEL $label$60
	if ( ((int_64)$2 == (int_64)6202891140790919680) ){ goto $label$43 }
	if ( ((int_64)$2 != (int_64)6228031751578976256) ){ goto $label$35 }
	*($9 + [380]) = [0]
	*($9 + [376]) = [9]
	*($9 + [160 align=4]) = *($9 + [376])
	CALL $241(($9 + [536]), ($9 + [160]))
	goto $label$35 
	
.LABEL $label$59
	if ( ((int_64)$2 == (int_64)-4997490785353465856) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)-4417130419820953600) ){ goto $label$35 }
	*($9 + [292]) = [0]
	*($9 + [288]) = [10]
	*($9 + [248 align=4]) = *($9 + [288])
	CALL $251(($9 + [536]), ($9 + [248]))
	goto $label$35 
	
.LABEL $label$58
	if ( ((int_64)$2 == (int_64)4203420714981654528) ){ goto $label$41 }
	if ( ((int_64)$2 != (int_64)4277733550746238976) ){ goto $label$35 }
	*($9 + [436]) = [0]
	*($9 + [432]) = [11]
	*($9 + [104 align=4]) = *($9 + [432])
	CALL $247(($9 + [536]), ($9 + [104]))
	goto $label$35 
	
.LABEL $label$57
	if ( ((int_64)$2 == (int_64)-1867559391457009152) ){ goto $label$40 }
	if ( ((int_64)$2 != (int_64)-1842418780668952576) ){ goto $label$35 }
	*($9 + [412]) = [0]
	*($9 + [408]) = [12]
	*($9 + [128 align=4]) = *($9 + [408])
	CALL $241(($9 + [536]), ($9 + [128]))
	goto $label$35 
	
.LABEL $label$56
	if ( ((int_64)$2 == (int_64)5905872776970895360) ){ goto $label$39 }
	if ( ((int_64)$2 != (int_64)6202890999807606784) ){ goto $label$35 }
	*($9 + [372]) = [0]
	*($9 + [368]) = [13]
	*($9 + [168 align=4]) = *($9 + [368])
	CALL $240(($9 + [536]), ($9 + [168]))
	goto $label$35 
	
.LABEL $label$55
	if ( ((int_64)$2 == (int_64)-3075276113664540672) ){ goto $label$38 }
	if ( ((int_64)$2 != (int_64)-2164577755277033472) ){ goto $label$35 }
	*($9 + [396]) = [0]
	*($9 + [392]) = [14]
	*($9 + [144 align=4]) = *($9 + [392])
	CALL $241(($9 + [536]), ($9 + [144]))
	goto $label$35 
	
.LABEL $label$54
	if ( ((int_64)$2 == (int_64)4520984413448028160) ){ goto $label$37 }
	if ( ((int_64)$2 != (int_64)5031766156598837248) ){ goto $label$35 }
	*($9 + [284]) = [0]
	*($9 + [280]) = [15]
	*($9 + [256 align=4]) = *($9 + [280])
	CALL $252(($9 + [536]), ($9 + [256]))
	goto $label$35 
	
.LABEL $label$53
	if ( ((int_64)$2 == (int_64)3626406344357576704) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)3626412356774707200) ){ goto $label$35 }
	*($9 + [468]) = [0]
	*($9 + [464]) = [16]
	*($9 + [72 align=4]) = *($9 + [464])
	CALL $246(($9 + [536]), ($9 + [72]))
	goto $label$35 
	
.LABEL $label$52
	*($9 + [332]) = [0]
	*($9 + [328]) = [17]
	*($9 + [208 align=4]) = *($9 + [328])
	CALL $249(($9 + [536]), ($9 + [208]))
	goto $label$35 
	
.LABEL $label$51
	*($9 + [444]) = [0]
	*($9 + [440]) = [18]
	*($9 + [96 align=4]) = *($9 + [440])
	CALL $242(($9 + [536]), ($9 + [96]))
	goto $label$35 
	
.LABEL $label$50
	*($9 + [420]) = [0]
	*($9 + [416]) = [19]
	*($9 + [120 align=4]) = *($9 + [416])
	CALL $242(($9 + [536]), ($9 + [120]))
	goto $label$35 
	
.LABEL $label$49
	*($9 + [484]) = [0]
	*($9 + [480]) = [20]
	*($9 + [56 align=4]) = *($9 + [480])
	CALL $244(($9 + [536]), ($9 + [56]))
	goto $label$35 
	
.LABEL $label$48
	*($9 + [532]) = [0]
	*($9 + [528]) = [21]
	*($9 + [8 align=4]) = *($9 + [528])
	CALL $240(($9 + [536]), ($9 + [8]))
	goto $label$35 
	
.LABEL $label$47
	*($9 + [452]) = [0]
	*($9 + [448]) = [22]
	*($9 + [88 align=4]) = *($9 + [448])
	CALL $242(($9 + [536]), ($9 + [88]))
	goto $label$35 
	
.LABEL $label$46
	*($9 + [428]) = [0]
	*($9 + [424]) = [23]
	*($9 + [112 align=4]) = *($9 + [424])
	CALL $241(($9 + [536]), ($9 + [112]))
	goto $label$35 
	
.LABEL $label$45
	*($9 + [324]) = [0]
	*($9 + [320]) = [24]
	*($9 + [216 align=4]) = *($9 + [320])
	CALL $242(($9 + [536]), ($9 + [216]))
	goto $label$35 
	
.LABEL $label$44
	*($9 + [348]) = [0]
	*($9 + [344]) = [25]
	*($9 + [192 align=4]) = *($9 + [344])
	CALL $248(($9 + [536]), ($9 + [192]))
	goto $label$35 
	
.LABEL $label$43
	*($9 + [356]) = [0]
	*($9 + [352]) = [26]
	*($9 + [184 align=4]) = *($9 + [352])
	CALL $242(($9 + [536]), ($9 + [184]))
	goto $label$35 
	
.LABEL $label$42
	*($9 + [516]) = [0]
	*($9 + [512]) = [27]
	*($9 + [24 align=4]) = *($9 + [512])
	CALL $242(($9 + [536]), ($9 + [24]))
	goto $label$35 
	
.LABEL $label$41
	*($9 + [316]) = [0]
	*($9 + [312]) = [28]
	*($9 + [224 align=4]) = *($9 + [312])
	CALL $242(($9 + [536]), ($9 + [224]))
	goto $label$35 
	
.LABEL $label$40
	*($9 + [388]) = [0]
	*($9 + [384]) = [29]
	*($9 + [152 align=4]) = *($9 + [384])
	CALL $242(($9 + [536]), ($9 + [152]))
	goto $label$35 
	
.LABEL $label$39
	*($9 + [364]) = [0]
	*($9 + [360]) = [30]
	*($9 + [176 align=4]) = *($9 + [360])
	CALL $241(($9 + [536]), ($9 + [176]))
	goto $label$35 
	
.LABEL $label$38
	*($9 + [300]) = [0]
	*($9 + [296]) = [31]
	*($9 + [240 align=4]) = *($9 + [296])
	CALL $250(($9 + [536]), ($9 + [240]))
	goto $label$35 
	
.LABEL $label$37
	*($9 + [508]) = [0]
	*($9 + [504]) = [32]
	*($9 + [32 align=4]) = *($9 + [504])
	CALL $241(($9 + [536]), ($9 + [32]))
	goto $label$35 
	
.LABEL $label$36
	*($9 + [476]) = [0]
	*($9 + [472]) = [33]
	*($9 + [64 align=4]) = *($9 + [472])
	CALL $245(($9 + [536]), ($9 + [64]))
	
.LABEL $label$35
	CALL $253(($9 + [536]))
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [1040])
}

void .FUNC $238 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	*($1 + [24]) = (*($1 + [24]) + [1])
	$2 = *($1)
	CALL eosio_assert([1], [400])
	*(($17 = $16) + [16]) = [0]
	*($17) = ($17 + [16])
	$4 = ($1 + [8])
	*($17 + [28]) = $4
	*($17 + [24]) = $1
	$5 = ($1 + [20])
	*($17 + [32]) = $5
	$6 = ($1 + [22])
	*($17 + [36]) = $6
	$3 = ($1 + [24])
	*($17 + [40]) = $3
	$7 = ($1 + [26])
	*($17 + [44]) = $7
	$8 = ($1 + [28])
	*($17 + [48]) = $8
	$9 = ($1 + [30])
	*($17 + [52]) = $9
	$10 = ($1 + [32])
	*($17 + [56]) = $10
	$11 = ($1 + [34])
	*($17 + [60]) = $11
	$12 = ($1 + [36])
	*($17 + [64]) = $12
	$13 = ($1 + [38])
	*($17 + [68]) = $13
	$14 = ($1 + [40])
	*($17 + [72]) = $14
	CALL $94(($17 + [24]), $17)
	$15 = *($17 + [16])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$16 = CALL malloc($15)
	goto $label$1 
	
.LABEL $label$2
	$16 = ($16 - (($15 + [15]) & [-16]))
	*([0] + [4]) = $16
	
.LABEL $label$1
	*($17 + [4]) = $16
	*($17) = $16
	*($17 + [8]) = ($16 + $15)
	*($17 + [16]) = $17
	*($17 + [28]) = $4
	*($17 + [32]) = $5
	*($17 + [36]) = $6
	*($17 + [40]) = $3
	*($17 + [44]) = $7
	*($17 + [48]) = $8
	*($17 + [24]) = $1
	*($17 + [52]) = $9
	*($17 + [56]) = $10
	*($17 + [60]) = $11
	*($17 + [64]) = $12
	*($17 + [68]) = $13
	*($17 + [72]) = $14
	CALL $95(($17 + [24]), ($17 + [16]))
	CALL db_update_i64(*($1 + [60]), (int_64)0, $16, $15)
	if ( ($15 <= [513]) ){ goto $label$3 }
	CALL free($16)
	
.LABEL $label$3
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($17 + [80])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*(($2 = *($1))) = (*($2) + [8])
	$0 = *($2)
	$2 = *($0 + [4])
	$4 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $0)
	
.LABEL $label$2
	*(($0 = *($1))) = (*($0) + [1])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [1])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	$4 = [0]
	*(($0 + [16])) = [0]
	*(($5 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [640])
	*($0 + [56]) = $1
	*($6) = *($2 + [4])
	*($6 + [12]) = ($0 + [8])
	*($6 + [8]) = $0
	*($6 + [16]) = ($0 + [20])
	*($6 + [20]) = ($0 + [22])
	*($6 + [24]) = ($0 + [24])
	*($6 + [28]) = ($0 + [26])
	*($6 + [32]) = ($0 + [28])
	*($6 + [36]) = ($0 + [30])
	*($6 + [40]) = ($0 + [32])
	*($6 + [44]) = ($0 + [34])
	*($6 + [48]) = ($0 + [36])
	*($6 + [52]) = ($0 + [38])
	*($6 + [56]) = ($0 + [40])
	CALL $97(($6 + [8]), $6)
	*($0 + [60]) = *(*($2 + [8]))
	*([0] + [4]) = ($6 + [64])
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $15(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [672])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [80])
	$18 = $19
	*([0] + [4]) = $19
	$2 = *($0)
	$3 = *($0 + [4])
	$16 = *($3)
	$5 = ($16 + [192])
	$17 = *($5)
	if ( ((int_64)$17 != (int_64)-1) ){ goto $label$1 }
	$17 = (int_64)0
	$4 = ($16 + [176])
	$6 = CALL db_lowerbound_i64(*($4), *(($16 + [184])), (int_64)-3842230918016241664, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $92($4, $6)
	*($18 + [28]) = [0]
	*($18 + [24]) = $4
	$17 = *(*(CALL $93(($18 + [24])) + [4]))
	$17 = ( (int_64)-2 ? ((int_64)$17 + (int_64)1) : ((uint_64)$17 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($16 + [192])) = $17
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($17 <= (int_64)-2), [1168])
	*($1) = *($5)
	*($1 + [20]) = *(*($3 + [4]))
	$5 = ($1 + [8])
	CALL $276($5, *($3 + [8]))
	*($1 + [22]) = *(*($3 + [12]))
	*($1 + [28]) = *(*($3 + [16]))
	*($1 + [30]) = *(*($3 + [20]))
	*($1 + [32]) = *(*($3 + [24]))
	*($1 + [34]) = *(*($3 + [28]))
	*($1 + [36]) = *(*($3 + [32]))
	*($1 + [38]) = *(*($3 + [36]))
	$16 = *($3 + [40])
	*($1 + [40]) = *($16)
	*(($1 + [48])) = *(($16 + [8]))
	*($1 + [24]) = *(*($3 + [44]))
	*($1 + [26]) = *(*($3 + [44]))
	*($18 + [16]) = [0]
	*($18) = ($18 + [16])
	*($18 + [28]) = $5
	*($18 + [24]) = $1
	$4 = ($1 + [20])
	*($18 + [32]) = $4
	$6 = ($1 + [22])
	*($18 + [36]) = $6
	$14 = ($1 + [24])
	*($18 + [40]) = $14
	$15 = ($1 + [26])
	*($18 + [44]) = $15
	$7 = ($1 + [28])
	*($18 + [48]) = $7
	$8 = ($1 + [30])
	*($18 + [52]) = $8
	$9 = ($1 + [32])
	*($18 + [56]) = $9
	$10 = ($1 + [34])
	*($18 + [60]) = $10
	$11 = ($1 + [36])
	*($18 + [64]) = $11
	$12 = ($1 + [38])
	*($18 + [68]) = $12
	$13 = ($1 + [40])
	*($18 + [72]) = $13
	CALL $94(($18 + [24]), $18)
	$16 = *($18 + [16])
	if ( ($16 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($16)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($19 - (($16 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($18 + [4]) = $3
	*($18) = $3
	*($18 + [8]) = ($3 + $16)
	*($18 + [16]) = $18
	*($18 + [28]) = $5
	*($18 + [24]) = $1
	*($18 + [32]) = $4
	*($18 + [36]) = $6
	*($18 + [40]) = $14
	*($18 + [44]) = $15
	*($18 + [48]) = $7
	*($18 + [52]) = $8
	*($18 + [56]) = $9
	*($18 + [60]) = $10
	*($18 + [64]) = $11
	*($18 + [68]) = $12
	*($18 + [72]) = $13
	CALL $95(($18 + [24]), ($18 + [16]))
	$17 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-3842230918016241664, *(*($0 + [8])), $17, $3, $16)
	if ( ($16 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($17 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$17 + (int_64)1) : ((uint_64)$17 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($18 + [80])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $274(*(($1 + [16])))
	
.LABEL $label$11
	CALL $274($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $274($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $273([72])
	$6 = CALL $96($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [60])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $91(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $274(*(($4 + [16])))
	
.LABEL $label$10
	CALL $274($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $93 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [60]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1296])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3842230918016241664)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1232])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1232])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $92(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _ZN5eosio2bk9remplayerEy (int_32 $0, int_64 $1)
{
}

void .FUNC _ZN5eosio2bk6attachEyyh (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	*($13 + [8]) = $1
	*($13 + [7]) = $3
	CALL eosio_assert(($3 <= [6]), [2128])
	$4 = ($0 + [216])
	$5 = CALL $135($4, $1, [144])
	$6 = ($0 + [96])
	$7 = CALL $127($6, $2, [144])
	$9 = CALL $116(($0 + [176]), *($5 + [24]), [144])
	$10 = ($5 + [8])
	CALL require_auth(*($10))
	CALL require_auth(*($7 + [32]))
	CALL eosio_assert(((int_32)*($7 + [75]) ^ (int_32)[1]), [2160])
	CALL eosio_assert(((int_32)*($7 + [72]) ^ (int_32)[1]), [2208])
	CALL eosio_assert(((int_32)*($7 + [88]) ^ (int_32)[1]), [2256])
	$11 = ($5 + [33])
	CALL eosio_assert(((int_32)*($11) ^ (int_32)[1]), [2304])
	CALL eosio_assert(((uint_32)*($9 + [22]) <= (uint_32)*($7 + [20])), [2352])
	CALL eosio_assert(((int_32)*($5 + [32]) ^ (int_32)[1]), [2400])
	$12 = *($9 + [28])
	CALL eosio_assert(((((($3 + [-3]) & [255]) <= [2]) & ((int_32)$12 == (int_32)[6])) | ((int_32)$12 == (int_32)$3)), [2432])
	CALL eosio_assert(((int_32)*((*($7 + [116]) + ($3 << [4]))) ^ (int_32)[1]), [2480])
	$3 = ($5 + [32])
	$8 = ($5 + [24])
	if ( ((int_32)(*($9 + [30]) + *($7 + [52])) < (int_32)[1]) ){ goto $label$2 }
	$12 = [0]
	if ( ((int_32)(*($9 + [32]) + *($7 + [54])) < (int_32)[0]) ){ goto $label$1 }
	if ( ((uint_32)(*($9 + [34]) + *($7 + [58])) > (uint_32)[50]) ){ goto $label$1 }
	$12 = ((*($9 + [36]) + *($7 + [60])) <= [51])
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	
.LABEL $label$1
	CALL eosio_assert($12, [2512])
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$4), [176])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$15()), [224])
	*($5 + [16]) = $2
	*($13 + [88]) = *($10)
	*($13 + [96]) = *($11)
	$2 = *($5)
	*($3) = [1]
	CALL eosio_assert([1], [400])
	*($13 + [80]) = (($13 + [16]) + [50])
	*($13 + [76]) = ($13 + [16])
	*($13 + [72]) = ($13 + [16])
	*($13 + [104]) = ($13 + [72])
	*($13 + [116]) = $10
	*($13 + [112]) = $5
	*($13 + [120]) = ($5 + [16])
	*($13 + [124]) = $8
	*($13 + [128]) = $3
	*($13 + [132]) = $11
	*($13 + [136]) = ($5 + [40])
	CALL $123(($13 + [112]), ($13 + [104]))
	CALL db_update_i64(*($5 + [60]), (int_64)0, ($13 + [16]), [50])
	$3 = ($0 + [232])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$3 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$3 = (($13 + [88]) + [8])
	*($13 + [112]) = *($10)
	if ( (CALL memcmp(($13 + [88]), ($13 + [112]), [8]) == 0) ){ goto $label$4 }
	$4 = ($5 + [64])
	$10 = *($4)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$5 }
	$10 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128064, ($13 + [104]), $2)
	*($4) = $10
	
.LABEL $label$5
	CALL db_idx64_update($10, (int_64)0, ($13 + [112]))
	
.LABEL $label$4
	*($13 + [112]) = *($11)
	if ( (CALL memcmp($3, ($13 + [112]), [8]) == 0) ){ goto $label$6 }
	$3 = ($5 + [68])
	$5 = *($3)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$7 }
	$5 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128065, ($13 + [104]), $2)
	*($3) = $5
	
.LABEL $label$7
	CALL db_idx64_update($5, (int_64)0, ($13 + [112]))
	
.LABEL $label$6
	*($13 + [16]) = $9
	*($13 + [20]) = ($13 + [7])
	*($13 + [24]) = ($13 + [8])
	CALL $140($6, $7, ($13 + [16]))
	*([0] + [4]) = ($13 + [144])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $270([4048], $0)
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$28 = (*([0] + [4]) - [144])
	*([0] + [4]) = $28
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = ($1 + [88])
	$4 = *($3)
	*($3) = [0]
	$2 = ($1 + [32])
	*(($29 = $28) + [16]) = *($2)
	*($29 + [24]) = $4
	$4 = *($1)
	CALL eosio_assert([1], [400])
	*($29 + [32]) = [0]
	*($29) = ($29 + [32])
	$5 = ($1 + [8])
	*($29 + [44]) = $5
	*($29 + [40]) = $1
	$6 = ($1 + [20])
	*($29 + [48]) = $6
	$7 = ($1 + [22])
	*($29 + [52]) = $7
	$8 = ($1 + [24])
	*($29 + [56]) = $8
	*($29 + [60]) = $2
	$9 = ($1 + [40])
	*($29 + [64]) = $9
	$10 = ($1 + [48])
	*($29 + [68]) = $10
	$11 = ($1 + [50])
	*($29 + [72]) = $11
	$12 = ($1 + [52])
	*($29 + [76]) = $12
	$13 = ($1 + [54])
	*($29 + [80]) = $13
	$14 = ($1 + [56])
	*($29 + [84]) = $14
	$15 = ($1 + [58])
	*($29 + [88]) = $15
	$16 = ($1 + [60])
	*($29 + [92]) = $16
	$17 = ($1 + [64])
	*($29 + [96]) = $17
	$18 = ($1 + [68])
	*($29 + [100]) = $18
	$19 = ($1 + [72])
	*($29 + [104]) = $19
	$20 = ($1 + [73])
	*($29 + [108]) = $20
	$21 = ($1 + [74])
	*($29 + [112]) = $21
	$22 = ($1 + [75])
	*($29 + [116]) = $22
	$23 = ($1 + [80])
	*($29 + [120]) = $23
	*($29 + [124]) = $3
	$24 = ($1 + [96])
	*($29 + [128]) = $24
	$25 = ($1 + [112])
	*($29 + [132]) = $25
	$26 = ($1 + [116])
	*($29 + [136]) = $26
	CALL $108(($29 + [40]), $29)
	$27 = *($29 + [32])
	if ( ($27 <= [513]) ){ goto $label$2 }
	$28 = CALL malloc($27)
	goto $label$1 
	
.LABEL $label$2
	$28 = ($28 - (($27 + [15]) & [-16]))
	*([0] + [4]) = $28
	
.LABEL $label$1
	*($29 + [4]) = $28
	*($29) = $28
	*($29 + [8]) = ($28 + $27)
	*($29 + [32]) = $29
	*($29 + [44]) = $5
	*($29 + [48]) = $6
	*($29 + [52]) = $7
	*($29 + [56]) = $8
	*($29 + [60]) = $2
	*($29 + [64]) = $9
	*($29 + [40]) = $1
	*($29 + [68]) = $10
	*($29 + [72]) = $11
	*($29 + [76]) = $12
	*($29 + [80]) = $13
	*($29 + [84]) = $14
	*($29 + [88]) = $15
	*($29 + [92]) = $16
	*($29 + [96]) = $17
	*($29 + [100]) = $18
	*($29 + [104]) = $19
	*($29 + [108]) = $20
	*($29 + [112]) = $21
	*($29 + [116]) = $22
	*($29 + [120]) = $23
	*($29 + [124]) = $3
	*($29 + [128]) = $24
	*($29 + [132]) = $25
	*($29 + [136]) = $26
	CALL $109(($29 + [40]), ($29 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $28, $27)
	if ( ($27 <= [513]) ){ goto $label$3 }
	CALL free($28)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$28 = (($29 + [16]) + [8])
	*($29 + [40]) = *($2)
	if ( (CALL memcmp(($29 + [16]), ($29 + [40]), [8]) == 0) ){ goto $label$5 }
	$2 = ($1 + [136])
	$27 = *($2)
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$6 }
	$27 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($29 + [32]), $4)
	*($2) = $27
	
.LABEL $label$6
	CALL db_idx64_update($27, (int_64)0, ($29 + [40]))
	
.LABEL $label$5
	*($29 + [40]) = *($3)
	if ( (CALL memcmp($28, ($29 + [40]), [8]) == 0) ){ goto $label$7 }
	$28 = ($1 + [140])
	$1 = *($28)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($29 + [32]), $4)
	*($28) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, (int_64)0, ($29 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($29 + [144])
}

void .FUNC $131 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $273($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*((($9 + [8]) + [8])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*(($8 = ($9 + [56]))) = [0]
	*(($9 + [60])) = [0]
	CALL $17(($9 + [52]), [16])
	$8 = *($9 + [52])
	$2 = (*($8) - $8)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [464])
	CALL memcpy($8, $3, [8])
	CALL eosio_assert(((int_32)($2 + [-8]) > (int_32)[7]), [464])
	CALL memcpy(($8 + [8]), ($3 + [8]), [8])
	CALL $20(($9 + [64]), ($9 + [24]))
	$8 = *($9 + [64])
	CALL send_inline($8, (*($9 + [68]) - $8))
	$8 = *($9 + [64])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [68]) = $8
	CALL $274($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $274($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $274($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $274($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $285(($9 + [8]))
}

void .FUNC _ZN5eosio2bk11wsellcancelEy (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($0 + [96])
	$0 = CALL $127($2, $1, [144])
	CALL require_auth(*($0 + [32]))
	CALL eosio_assert(*($0 + [88]), [1920])
	CALL $133($2, $0)
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$28 = (*([0] + [4]) - [144])
	*([0] + [4]) = $28
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = ($1 + [88])
	$4 = *($3)
	*($3) = [0]
	$2 = ($1 + [32])
	*(($29 = $28) + [16]) = *($2)
	*($29 + [24]) = $4
	$4 = *($1)
	CALL eosio_assert([1], [400])
	*($29 + [32]) = [0]
	*($29) = ($29 + [32])
	$5 = ($1 + [8])
	*($29 + [44]) = $5
	*($29 + [40]) = $1
	$6 = ($1 + [20])
	*($29 + [48]) = $6
	$7 = ($1 + [22])
	*($29 + [52]) = $7
	$8 = ($1 + [24])
	*($29 + [56]) = $8
	*($29 + [60]) = $2
	$9 = ($1 + [40])
	*($29 + [64]) = $9
	$10 = ($1 + [48])
	*($29 + [68]) = $10
	$11 = ($1 + [50])
	*($29 + [72]) = $11
	$12 = ($1 + [52])
	*($29 + [76]) = $12
	$13 = ($1 + [54])
	*($29 + [80]) = $13
	$14 = ($1 + [56])
	*($29 + [84]) = $14
	$15 = ($1 + [58])
	*($29 + [88]) = $15
	$16 = ($1 + [60])
	*($29 + [92]) = $16
	$17 = ($1 + [64])
	*($29 + [96]) = $17
	$18 = ($1 + [68])
	*($29 + [100]) = $18
	$19 = ($1 + [72])
	*($29 + [104]) = $19
	$20 = ($1 + [73])
	*($29 + [108]) = $20
	$21 = ($1 + [74])
	*($29 + [112]) = $21
	$22 = ($1 + [75])
	*($29 + [116]) = $22
	$23 = ($1 + [80])
	*($29 + [120]) = $23
	*($29 + [124]) = $3
	$24 = ($1 + [96])
	*($29 + [128]) = $24
	$25 = ($1 + [112])
	*($29 + [132]) = $25
	$26 = ($1 + [116])
	*($29 + [136]) = $26
	CALL $108(($29 + [40]), $29)
	$27 = *($29 + [32])
	if ( ($27 <= [513]) ){ goto $label$2 }
	$28 = CALL malloc($27)
	goto $label$1 
	
.LABEL $label$2
	$28 = ($28 - (($27 + [15]) & [-16]))
	*([0] + [4]) = $28
	
.LABEL $label$1
	*($29 + [4]) = $28
	*($29) = $28
	*($29 + [8]) = ($28 + $27)
	*($29 + [32]) = $29
	*($29 + [44]) = $5
	*($29 + [48]) = $6
	*($29 + [52]) = $7
	*($29 + [56]) = $8
	*($29 + [60]) = $2
	*($29 + [64]) = $9
	*($29 + [40]) = $1
	*($29 + [68]) = $10
	*($29 + [72]) = $11
	*($29 + [76]) = $12
	*($29 + [80]) = $13
	*($29 + [84]) = $14
	*($29 + [88]) = $15
	*($29 + [92]) = $16
	*($29 + [96]) = $17
	*($29 + [100]) = $18
	*($29 + [104]) = $19
	*($29 + [108]) = $20
	*($29 + [112]) = $21
	*($29 + [116]) = $22
	*($29 + [120]) = $23
	*($29 + [124]) = $3
	*($29 + [128]) = $24
	*($29 + [132]) = $25
	*($29 + [136]) = $26
	CALL $109(($29 + [40]), ($29 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $28, $27)
	if ( ($27 <= [513]) ){ goto $label$3 }
	CALL free($28)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$28 = (($29 + [16]) + [8])
	*($29 + [40]) = *($2)
	if ( (CALL memcmp(($29 + [16]), ($29 + [40]), [8]) == 0) ){ goto $label$5 }
	$2 = ($1 + [136])
	$27 = *($2)
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$6 }
	$27 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($29 + [32]), $4)
	*($2) = $27
	
.LABEL $label$6
	CALL db_idx64_update($27, (int_64)0, ($29 + [40]))
	
.LABEL $label$5
	*($29 + [40]) = *($3)
	if ( (CALL memcmp($28, ($29 + [40]), [8]) == 0) ){ goto $label$7 }
	$28 = ($1 + [140])
	$1 = *($28)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($29 + [32]), $4)
	*($28) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, (int_64)0, ($29 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($29 + [144])
}

void .FUNC _ZN5eosio2bk5esellEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	$6 = ($0 + [216])
	$3 = CALL $135($6, $1, [144])
	$4 = ($3 + [8])
	CALL require_auth(*($4))
	$5 = ($3 + [33])
	CALL eosio_assert(((int_32)*($5) ^ (int_32)[1]), [1968])
	CALL eosio_assert(((int_32)*($3 + [32]) ^ (int_32)[1]), [2000])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($0 + [8])), [1824])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1856])
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$6), [176])
	CALL eosio_assert(((int_64)*($0 + [216]) == (int_64)CALL $fimport$15()), [224])
	$1 = *($5)
	*($5) = [1]
	*($7 + [72]) = *($4)
	*($7 + [80]) = $1
	$1 = *($3)
	*(($3 + [48])) = *($2 + [8])
	*($3 + [40]) = *($2)
	CALL eosio_assert([1], [400])
	*($7 + [64]) = ($7 + [50])
	*($7 + [60]) = $7
	*($7 + [56]) = $7
	*($7 + [88]) = ($7 + [56])
	*($7 + [100]) = $4
	*($7 + [96]) = $3
	*($7 + [104]) = ($3 + [16])
	*($7 + [108]) = ($3 + [24])
	*($7 + [112]) = ($3 + [32])
	*($7 + [116]) = $5
	*($7 + [120]) = ($3 + [40])
	CALL $123(($7 + [96]), ($7 + [88]))
	CALL db_update_i64(*($3 + [60]), (int_64)0, $7, [50])
	$2 = ($0 + [232])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$1 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$2 = (($7 + [72]) + [8])
	*($7 + [96]) = *($4)
	if ( (CALL memcmp(($7 + [72]), ($7 + [96]), [8]) == 0) ){ goto $label$2 }
	$6 = ($3 + [64])
	$4 = *($6)
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128064, ($7 + [88]), $1)
	*($6) = $4
	
.LABEL $label$3
	CALL db_idx64_update($4, (int_64)0, ($7 + [96]))
	
.LABEL $label$2
	*($7 + [96]) = *($5)
	if ( (CALL memcmp($2, ($7 + [96]), [8]) == 0) ){ goto $label$4 }
	$2 = ($3 + [68])
	$3 = *($2)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128065, ($7 + [88]), $1)
	*($2) = $3
	
.LABEL $label$5
	CALL db_idx64_update($3, (int_64)0, ($7 + [96]))
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [128])
}

int_32 .FUNC $135 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [480])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6175819139447128064, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $121($0, $5)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [480])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC _ZN5eosio2bk4ebuyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [176])
	*([0] + [4]) = $15
	CALL require_auth($2)
	$6 = ($0 + [216])
	$10 = CALL $135($6, $1, [144])
	$3 = ($10 + [8])
	$4 = ($0 + [56])
	$7 = CALL $8($4, *($3), [144])
	$8 = CALL $8($4, $2, [144])
	$4 = ($10 + [33])
	CALL eosio_assert(*($4), [2032])
	CALL eosio_assert(((int_64)*($8 + [8]) >= (int_64)*($10 + [40])), [736])
	*(($9 = (($15 + [32]) + [8]))) = *(($10 + [48]))
	$12 = *($10 + [40])
	*((($15 + [16]) + [12])) = *((($15 + [32]) + [12]))
	*((($15 + [16]) + [8])) = *($9)
	*($15 + [32]) = $12
	*($15 + [20]) = *($15 + [36])
	*($15 + [16]) = *($15 + [32])
	CALL _ZN5eosio2bk16transfer_balanceERKNS0_6playerES3_NS_5assetE($0, $8, $7, ($15 + [16]))
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$6), [176])
	CALL eosio_assert(((int_64)*($0 + [216]) == (int_64)CALL $fimport$15()), [224])
	$12 = *($4)
	*($4) = [0]
	*($15 + [120]) = *($3)
	*($15 + [128]) = $12
	$12 = *($10)
	CALL eosio_assert([1], [400])
	*($15 + [112]) = (($15 + [48]) + [50])
	*($15 + [108]) = ($15 + [48])
	*($15 + [104]) = ($15 + [48])
	*($15 + [136]) = ($15 + [104])
	*($15 + [148]) = $3
	*($15 + [144]) = $10
	*($15 + [152]) = ($10 + [16])
	*($15 + [156]) = ($10 + [24])
	*($15 + [160]) = ($10 + [32])
	*($15 + [164]) = $4
	*($15 + [168]) = ($10 + [40])
	CALL $123(($15 + [144]), ($15 + [136]))
	CALL db_update_i64(*($10 + [60]), (int_64)0, ($15 + [48]), [50])
	$8 = ($0 + [232])
	if ( (uint_64)($12 <= *($8)) ){ goto $label$1 }
	*($8) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$8 = (($15 + [120]) + [8])
	*($15 + [144]) = *($3)
	if ( (CALL memcmp(($15 + [120]), ($15 + [144]), [8]) == 0) ){ goto $label$2 }
	$6 = ($10 + [64])
	$3 = *($6)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128064, ($15 + [136]), $12)
	*($6) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, (int_64)0, ($15 + [144]))
	
.LABEL $label$2
	*($15 + [144]) = *($4)
	if ( (CALL memcmp($8, ($15 + [144]), [8]) == 0) ){ goto $label$4 }
	$4 = ($10 + [68])
	$10 = *($4)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$5 }
	$10 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128065, ($15 + [136]), $12)
	*($4) = $10
	
.LABEL $label$5
	CALL db_idx64_update($10, (int_64)0, ($15 + [144]))
	
.LABEL $label$4
	$5 = *($0)
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [896]
	$13 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$11 }
	$0 = *($10)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$0 = ($0 + [165])
	goto $label$9 
	
.LABEL $label$11
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$7
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$6 }
	*(($10 = CALL $273([16]))) = $5
	*($10 + [8]) = $13
	$0 = ($10 + [16])
	*($15 + [152]) = $0
	*($15 + [56]) = $2
	*(($15 + [8])) = *($15 + [56])
	*($15 + [144]) = $10
	*($15 + [148]) = $0
	*($15 + [48]) = $1
	*($15) = *($15 + [48])
	CALL $131($5, (int_64)6228031751578976256, ($15 + [144]), $15)
	$10 = *($15 + [144])
	if ( ($10 == 0) ){ goto $label$12 }
	*($15 + [148]) = $10
	CALL $274($10)
	
.LABEL $label$12
	*([0] + [4]) = ($15 + [176])
}

void .FUNC _ZN5eosio2bk11esellcancelEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	$5 = ($0 + [216])
	$2 = CALL $135($5, $1, [144])
	$3 = ($2 + [8])
	CALL require_auth(*($3))
	$4 = ($2 + [33])
	CALL eosio_assert(*($4), [2080])
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$5), [176])
	CALL eosio_assert(((int_64)*($0 + [216]) == (int_64)CALL $fimport$15()), [224])
	$1 = *($4)
	*($4) = [0]
	*($7 + [72]) = *($3)
	*($7 + [80]) = $1
	$1 = *($2)
	CALL eosio_assert([1], [400])
	*($7 + [64]) = ($7 + [50])
	*($7 + [60]) = $7
	*($7 + [56]) = $7
	*($7 + [88]) = ($7 + [56])
	*($7 + [100]) = $3
	*($7 + [96]) = $2
	*($7 + [104]) = ($2 + [16])
	*($7 + [108]) = ($2 + [24])
	*($7 + [112]) = ($2 + [32])
	*($7 + [116]) = $4
	*($7 + [120]) = ($2 + [40])
	CALL $123(($7 + [96]), ($7 + [88]))
	CALL db_update_i64(*($2 + [60]), (int_64)0, $7, [50])
	$5 = ($0 + [232])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$1 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = (($7 + [72]) + [8])
	*($7 + [96]) = *($3)
	if ( (CALL memcmp(($7 + [72]), ($7 + [96]), [8]) == 0) ){ goto $label$2 }
	$6 = ($2 + [64])
	$3 = *($6)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128064, ($7 + [88]), $1)
	*($6) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, (int_64)0, ($7 + [96]))
	
.LABEL $label$2
	*($7 + [96]) = *($4)
	if ( (CALL memcmp($5, ($7 + [96]), [8]) == 0) ){ goto $label$4 }
	$4 = ($2 + [68])
	$2 = *($4)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$5 }
	$2 = CALL db_idx64_find_primary(*(($0 + [216])), *(($0 + [224])), (int_64)6175819139447128065, ($7 + [88]), $1)
	*($4) = $2
	
.LABEL $label$5
	CALL db_idx64_update($2, (int_64)0, ($7 + [96]))
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [128])
}

void .FUNC $260 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	CALL $286(($10 + [32]), $1)
	*(($10 + [28])) = *(($1 + [36]))
	*(($8 = (($10 + [16]) + [8]))) = *(($1 + [32]))
	*($10 + [16]) = *($1 + [24])
	*($10 + [20]) = *(($1 + [28]))
	$6 = *($1 + [20])
	$5 = *($1 + [18])
	$4 = *($1 + [16])
	$3 = *($1 + [14])
	$2 = *($1 + [12])
	$7 = *($1 + [40])
	*((($10 + [48]) + [8])) = *($8)
	*($10 + [48]) = *($10 + [16])
	$1 = *($0 + [4])
	$8 = *($1 + [4])
	$0 = (*(*($0)) + int_32($8 >> [1]))
	$1 = *($1)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $286(($10 + [80]), ($10 + [32]))
	$9 = *((($10 + [48]) + [8]))
	*((($10 + [64]) + [8])) = $9
	*(($10 + [8])) = $9
	$9 = *($10 + [48])
	*($10 + [64]) = $9
	*($10) = $9
	CALL void $0((int_32 ($10 + [80])), (int_32 int_32(($2 << [16]) >> [16])), (int_32 int_32(($3 << [16]) >> [16])), (int_32 int_32(($4 << [16]) >> [16])), (int_32 int_32(($5 << [16]) >> [16])), (int_32 int_32(($6 << [16]) >> [16])), (int_32 $10), (int_32 ($7 & [65535])), (int_32 $1))
	if ( ((*($10 + [80]) & [1]) == 0) ){ goto $label$2 }
	CALL $274(*($10 + [88]))
	
.LABEL $label$2
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $274(*($10 + [40]))
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [96])
}

void .FUNC $261 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($2 + [18]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [20]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [672])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [40]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
}

void .FUNC _ZN5eosio2bk5fightEyNS_5assetEh (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	CALL eosio_assert(((($3 + [-1]) & [255]) <= [3]), [3728])
	$7 = [1]
	$5 = *($2)
	if ( ((int_64)$5 <= (int_64)4999) ){ goto $label$3 }
	if ( ((int_64)$5 == (int_64)5000) ){ goto $label$1 }
	if ( ((int_64)$5 == (int_64)10000) ){ goto $label$1 }
	if ( ((int_64)$5 == (int_64)100000) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( (int_64)($5 == 0) ){ goto $label$1 }
	if ( ((int_64)$5 == (int_64)1000) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [1856])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($0 + [8])), [3760])
	$7 = CALL $127(($0 + [96]), $1, [144])
	CALL require_auth(*($7 + [32]))
	CALL eosio_assert(((int_32)*($7 + [72]) ^ (int_32)[1]), [3792])
	CALL eosio_assert(((int_32)*($7 + [88]) ^ (int_32)[1]), [3840])
	$4 = *($7 + [50])
	$5 = CALL current_time()
	CALL eosio_assert(((uint_32)*($7 + [48]) <= (uint_32)($4 + ((uint_32)((int_32)((uint_32)((int_32)((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) - *($7 + [112])) * (int_32)[1000]) / (uint_32)[60]) * (int_32)*($7 + [56])) / (uint_32)[1000]))), [3888])
	*(($4 = (($8 + [16]) + [8]))) = *($2 + [8])
	$5 = *($2)
	*(($8 + [12])) = *((($8 + [16]) + [12]))
	*(($8 + [8])) = *($4)
	*($8 + [16]) = $5
	*($8 + [4]) = *($8 + [20])
	*($8) = *($8 + [16])
	$7 = *($3 + [56])
	$3 = CALL $215(($8 + [32]), CALL $183(($0 + [256]), CALL $214($0, $7, $8, $3), [144]))
	CALL _ZN5eosio2bk5bjoinEyyh($0, *($3), $1, ((int_32)int_32((*($7 + [4]) - *($7)) >> [3]) == (int_32)*($3 + [8])))
	$7 = *($3 + [80])
	if ( ($7 == 0) ){ goto $label$4 }
	*(($3 + [84])) = $7
	CALL $274($7)
	
.LABEL $label$4
	$4 = *($3 + [68])
	if ( ($4 == 0) ){ goto $label$5 }
	$6 = ($3 + [72])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$7 }
	$2 = ([0] - $4)
	$7 = ($7 + [-24])
	
.LOOP $label$8:
	$0 = *(($7 + [12]))
	if ( ($0 == 0) ){ goto $label$9 }
	*(($7 + [16])) = $0
	CALL $274($0)
	
.LABEL $label$9
	$0 = *($7)
	if ( ($0 == 0) ){ goto $label$10 }
	*(($7 + [4])) = $0
	CALL $274($0)
	
.LABEL $label$10
	$7 = ($7 + [-24])
	if ( ((int_32)($7 + $2) != (int_32)[-24]) ){ goto $label$8 }
	$7 = *(($3 + [68]))
	goto $label$6 
	
.LABEL $label$7
	$7 = $4
	
.LABEL $label$6
	*($6) = $4
	CALL $274($7)
	
.LABEL $label$5
	$4 = *($3 + [56])
	if ( ($4 == 0) ){ goto $label$11 }
	$6 = ($3 + [60])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$13 }
	$2 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$14:
	$0 = *($7)
	if ( ($0 == 0) ){ goto $label$15 }
	*(($7 + [4])) = $0
	CALL $274($0)
	
.LABEL $label$15
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $2) != (int_32)[-12]) ){ goto $label$14 }
	$7 = *(($3 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$7 = $4
	
.LABEL $label$12
	*($6) = $4
	CALL $274($7)
	
.LABEL $label$11
	*([0] + [4]) = ($8 + [128])
}

void .FUNC $262 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL $15(*($1), *($0))
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy(($0 + [12]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy(($0 + [13]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [14]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	*($3 + [8]) = $0
	CALL $264(($3 + [8]), $1)
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $283 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $281($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [13248])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [13344]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [13344]
	return .LABEL $label$1
}

void .FUNC $302 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

void .FUNC $263 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	CALL $286(($13 + [32]), $1)
	$8 = *($1 + [22])
	$7 = *($1 + [20])
	$6 = *($1 + [18])
	$5 = *($1 + [16])
	$4 = *($1 + [14])
	$3 = *($1 + [13])
	$2 = *($1 + [12])
	*(($11 = (($13 + [16]) + [8]))) = *(($1 + [32]))
	*($13 + [16]) = *($1 + [24])
	$10 = *($1 + [42])
	$9 = *($1 + [40])
	*((($13 + [48]) + [8])) = *($11)
	*($13 + [48]) = *($13 + [16])
	$1 = *($0 + [4])
	$11 = *($1 + [4])
	$0 = (*(*($0)) + int_32($11 >> [1]))
	$1 = *($1)
	if ( (($11 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $286(($13 + [80]), ($13 + [32]))
	$12 = *((($13 + [48]) + [8]))
	*((($13 + [64]) + [8])) = $12
	*(($13 + [8])) = $12
	$12 = *($13 + [48])
	*($13 + [64]) = $12
	*($13) = $12
	CALL void $0((int_32 ($13 + [80])), (int_32 ($2 & [255])), (int_32 ($3 & [255])), (int_32 int_32(($4 << [16]) >> [16])), (int_32 int_32(($5 << [16]) >> [16])), (int_32 int_32(($6 << [16]) >> [16])), (int_32 int_32(($7 << [16]) >> [16])), (int_32 int_32(($8 << [16]) >> [16])), (int_32 $13), (int_32 ($9 & [65535])), (int_32 ($10 & [65535])), (int_32 $1))
	if ( ((*($13 + [80]) & [1]) == 0) ){ goto $label$2 }
	CALL $274(*($13 + [88]))
	
.LABEL $label$2
	if ( ((*($13 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $274(*($13 + [40]))
	
.LABEL $label$3
	*([0] + [4]) = ($13 + [96])
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC $265 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [24]), *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [32]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [40]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy(($0 + [42]), *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
}

int_32 .FUNC $208 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$0), [480])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4347580331843387392, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $212($0, $5)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$0), [480])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $209 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = *($1)
	*(($10 = $9)) = *(*($2))
	*($10 + [8]) = *(*($2 + [4]))
	*($10 + [16]) = *(*($2 + [8]))
	*($10 + [28]) = ((int_32)((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$43()) * (int_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$16() / (uint_64)(int_64)1000000)))
	CALL sha256(($10 + [28]), [4], ($10 + [32]))
	*($10 + [17]) = ((uint_64)CALL llabs(*($10 + [32])) % (uint_64)(int_64)3)
	*($10 + [18 align=2]) = [0]
	$4 = ($1 + [24])
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [28]))) ){ goto $label$2 }
	*($6) = *($10)
	*(($6 + [16])) = *(($10 + [16]))
	*(($6 + [8])) = *(($10 + [8]))
	*($4) = (*($4) + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $211(($1 + [20]), $10)
	
.LABEL $label$1
	$6 = *($2)
	$4 = ($1 + [12])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)*(($1 + [16]))) ){ goto $label$4 }
	*($4) = ($2 + [8])
	*($2) = *($6)
	goto $label$3 
	
.LABEL $label$4
	CALL $64(($1 + [8]), $6)
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [400])
	$5 = *($1 + [8])
	$4 = *(($1 + [12]))
	$7 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [3]))
	$2 = [8]
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	$6 = ($1 + [20])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	$2 = (($7 & [-8]) + $2)
	
.LABEL $label$6
	$5 = *($6)
	$4 = *(($1 + [24]))
	$7 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[24]))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$2 = ((((int_32)((uint_32)($7 + [-24]) / (uint_32)[24]) * (int_32)[22]) + $2) + [22])
	
.LABEL $label$8
	if ( ($2 <= [513]) ){ goto $label$10 }
	$9 = CALL malloc($2)
	goto $label$9 
	
.LABEL $label$10
	$9 = ($9 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$9
	*($10 + [32]) = $9
	*($10 + [40]) = ($9 + $2)
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [464])
	CALL memcpy($9, $1, [8])
	*($10 + [36]) = ($9 + [8])
	CALL $52(($10 + [32]), ($1 + [8]))
	CALL $171(($10 + [32]), $6)
	CALL db_update_i64(*($1 + [36]), (int_64)0, $9, $2)
	if ( ($2 <= [513]) ){ goto $label$11 }
	CALL free($9)
	
.LABEL $label$11
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($10 + [64])
}

int_32 .FUNC $202 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $274($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $274($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $274($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $274($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $274($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $274($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $274($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $274($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $203 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $200 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $273(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $273([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $17(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [464])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $274($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $274($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $274($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $203($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $17($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $204($4, $1)
	CALL $206(CALL $205(CALL $205($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $206 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [464])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [464])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $22($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC _ZN5eosio2bk4bhitEyyh (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [48])
	*([0] + [4]) = $13
	*($13 + [40]) = $1
	*($13 + [32]) = $2
	*($13 + [31]) = $3
	$9 = ($0 + [96])
	$3 = CALL $127($9, $1, [144])
	$9 = CALL $127($9, $2, [144])
	CALL require_auth(*($3 + [32]))
	CALL eosio_assert(*($3 + [72]), [3504])
	if ( (*($9 + [72]) == 0) ){ goto $label$2 }
	$5 = ((int_32)*($9 + [73]) == (int_32)*($3 + [73]))
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [3536])
	CALL eosio_assert(((int_32)*($3 + [50]) != (int_32)[0]), [3584])
	CALL eosio_assert(((int_32)*($9 + [50]) != (int_32)[0]), [3616])
	$3 = ($3 + [73])
	$4 = ($0 + [256])
	$5 = CALL $183($4, *($3), [144])
	CALL eosio_assert(((int_32)*($5 + [44]) != (int_32)[0]), [3648])
	CALL eosio_assert((*($5 + [52]) == 0), [3680])
	$6 = ($0 + [296])
	$7 = CALL $208($6, *($3), [144])
	$10 = ($5 + [84])
	$9 = *($10)
	$3 = *($5 + [80])
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((int_64)*($3) == (int_64)$1) ){ goto $label$3 }
	$3 = ($3 + [8])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$4 }
	$3 = $9
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$3 == (int_32)$9), [3696])
	*($13 + [4]) = ($13 + [32])
	*($13) = ($13 + [40])
	*($13 + [8]) = ($13 + [31])
	CALL $209($6, $7, $13)
	*($13) = ($13 + [40])
	CALL $210($4, $5, $13)
	if ( ((int_32)int_32((*($10) - *(($5 + [80]))) >> [3]) != (int_32)*($5 + [9])) ){ goto $label$5 }
	$1 = (int_64)0
	*($13 + [8]) = (int_64)0
	*($13) = *($5)
	CALL cancel_deferred($13)
	$8 = *($0)
	$11 = (int_64)59
	$3 = [896]
	$12 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$11 }
	$9 = *($3)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$9 = ($9 + [165])
	goto $label$9 
	
.LABEL $label$11
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$7
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$2 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$6 }
	$1 = *($5)
	*(($3 = CALL $273([16]))) = $8
	*($3 + [8]) = $12
	*($13) = $3
	$3 = ($3 + [16])
	*($13 + [8]) = $3
	*($13 + [4]) = $3
	CALL $192($8, (int_64)6609900437350907904, $13, $1)
	$3 = *($13)
	if ( ($3 == 0) ){ goto $label$5 }
	*($13 + [4]) = $3
	CALL $274($3)
	
.LABEL $label$5
	*([0] + [4]) = ($13 + [48])
}

int_32 .FUNC $204 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [464])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [464])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [464])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [464])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [464])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $205 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [464])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [464])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [464])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $22(CALL $21($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZNSt3__19to_stringEi (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [12544], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $283(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $283(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $181 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$6 = ((int_32)($6 - $4) / (int_32)[12])
	$2 = ($6 + $1)
	if ( ((uint_32)$2 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$7 = ((int_32)($7 - $4) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$5 }
	$5 = ($7 << [1])
	$5 = ( $2 ? $5 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$7 = CALL $273(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	$7 = $1
	
.LOOP $label$6:
	*($5) = (int_64)0
	*(($5 + [8])) = [0]
	$5 = ($5 + [12])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$6 }
	*(($0 + [4])) = ($6 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$5 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$2 = ($7 + ((int_32)$5 * (int_32)[12]))
	$7 = ($7 + ((int_32)$6 * (int_32)[12]))
	$5 = $7
	$6 = $1
	
.LOOP $label$7:
	*($5) = (int_64)0
	*(($5 + [8])) = [0]
	$5 = ($5 + [12])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	$3 = ($7 + ((int_32)$1 * (int_32)[12]))
	$5 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$9 }
	$4 = ([0] - $5)
	$5 = ($6 + [-12])
	
.LOOP $label$10:
	*(($6 = ($7 + [-12]))) = (int_64)0
	*(($1 = ($7 + [-4]))) = [0]
	*($6) = *($5)
	*(($7 + [-8])) = *(($5 + [4]))
	$6 = ($5 + [8])
	*($1) = *($6)
	*($6) = [0]
	*($5) = (int_64)0
	$7 = ($7 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $4) != (int_32)[-12]) ){ goto $label$10 }
	$5 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $5
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	$6 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$12:
	$7 = *($5)
	if ( ($7 == 0) ){ goto $label$13 }
	*(($5 + [4])) = $7
	CALL $274($7)
	
.LABEL $label$13
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL $274($1)
	
.LABEL $label$14
}

void .FUNC _ZN5eosio2bk4wbuyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [80])
	*([0] + [4]) = $13
	CALL require_auth($2)
	$4 = ($0 + [96])
	$8 = CALL $127($4, $1, [144])
	$6 = ($0 + [56])
	$5 = CALL $8($6, *($8 + [32]), [144])
	$6 = CALL $8($6, $2, [144])
	CALL eosio_assert(*($8 + [88]), [1872])
	CALL eosio_assert(((int_64)*($6 + [8]) >= (int_64)*($8 + [96])), [736])
	*(($7 = (($13 + [32]) + [8]))) = *(($8 + [104]))
	$10 = *($8 + [96])
	*((($13 + [16]) + [12])) = *((($13 + [32]) + [12]))
	*((($13 + [16]) + [8])) = *($7)
	*($13 + [32]) = $10
	*($13 + [20]) = *($13 + [36])
	*($13 + [16]) = *($13 + [32])
	CALL _ZN5eosio2bk16transfer_balanceERKNS0_6playerES3_NS_5assetE($0, $6, $5, ($13 + [16]))
	CALL $130($4, $8)
	$3 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [896]
	$11 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$6 }
	$0 = *($8)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$0 = ($0 + [165])
	goto $label$4 
	
.LABEL $label$6
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	*(($8 = CALL $273([16]))) = $3
	*($8 + [8]) = $11
	$0 = ($8 + [16])
	*($13 + [72]) = $0
	*($13 + [56]) = $2
	*(($13 + [8])) = *($13 + [56])
	*($13 + [64]) = $8
	*($13 + [68]) = $0
	*($13 + [48]) = $1
	*($13) = *($13 + [48])
	CALL $131($3, (int_64)-1842418780668952576, ($13 + [64]), $13)
	$8 = *($13 + [64])
	if ( ($8 == 0) ){ goto $label$7 }
	*($13 + [68]) = $8
	CALL $274($8)
	
.LABEL $label$7
	*([0] + [4]) = ($13 + [80])
}

void .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$28 = (*([0] + [4]) - [144])
	*([0] + [4]) = $28
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$4 = ($1 + [88])
	$5 = *($4)
	*($4) = [1]
	$3 = ($1 + [32])
	*(($29 = $28) + [16]) = *($3)
	*($29 + [24]) = $5
	$5 = *($1)
	$2 = *($2)
	*($1 + [96]) = *($2)
	*(($1 + [104])) = *(($2 + [8]))
	CALL eosio_assert([1], [400])
	*($29 + [32]) = [0]
	*($29) = ($29 + [32])
	$7 = ($1 + [8])
	*($29 + [44]) = $7
	*($29 + [40]) = $1
	$8 = ($1 + [20])
	*($29 + [48]) = $8
	$9 = ($1 + [22])
	*($29 + [52]) = $9
	$10 = ($1 + [24])
	*($29 + [56]) = $10
	*($29 + [60]) = $3
	$11 = ($1 + [40])
	*($29 + [64]) = $11
	$12 = ($1 + [48])
	*($29 + [68]) = $12
	$13 = ($1 + [50])
	*($29 + [72]) = $13
	$14 = ($1 + [52])
	*($29 + [76]) = $14
	$15 = ($1 + [54])
	*($29 + [80]) = $15
	$16 = ($1 + [56])
	*($29 + [84]) = $16
	$17 = ($1 + [58])
	*($29 + [88]) = $17
	$18 = ($1 + [60])
	*($29 + [92]) = $18
	$19 = ($1 + [64])
	*($29 + [96]) = $19
	$20 = ($1 + [68])
	*($29 + [100]) = $20
	$21 = ($1 + [72])
	*($29 + [104]) = $21
	$22 = ($1 + [73])
	*($29 + [108]) = $22
	$23 = ($1 + [74])
	*($29 + [112]) = $23
	$24 = ($1 + [75])
	*($29 + [116]) = $24
	$25 = ($1 + [80])
	*($29 + [120]) = $25
	*($29 + [124]) = $4
	$6 = ($1 + [96])
	*($29 + [128]) = $6
	$26 = ($1 + [112])
	*($29 + [132]) = $26
	$27 = ($1 + [116])
	*($29 + [136]) = $27
	CALL $108(($29 + [40]), $29)
	$2 = *($29 + [32])
	if ( ($2 <= [513]) ){ goto $label$2 }
	$28 = CALL malloc($2)
	goto $label$1 
	
.LABEL $label$2
	$28 = ($28 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $28
	
.LABEL $label$1
	*($29 + [4]) = $28
	*($29) = $28
	*($29 + [8]) = ($28 + $2)
	*($29 + [32]) = $29
	*($29 + [44]) = $7
	*($29 + [48]) = $8
	*($29 + [52]) = $9
	*($29 + [56]) = $10
	*($29 + [60]) = $3
	*($29 + [64]) = $11
	*($29 + [40]) = $1
	*($29 + [68]) = $12
	*($29 + [72]) = $13
	*($29 + [76]) = $14
	*($29 + [80]) = $15
	*($29 + [84]) = $16
	*($29 + [88]) = $17
	*($29 + [92]) = $18
	*($29 + [96]) = $19
	*($29 + [100]) = $20
	*($29 + [104]) = $21
	*($29 + [108]) = $22
	*($29 + [112]) = $23
	*($29 + [116]) = $24
	*($29 + [120]) = $25
	*($29 + [124]) = $4
	*($29 + [128]) = $6
	*($29 + [132]) = $26
	*($29 + [136]) = $27
	CALL $109(($29 + [40]), ($29 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $28, $2)
	if ( ($2 <= [513]) ){ goto $label$3 }
	CALL free($28)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$28 = (($29 + [16]) + [8])
	*($29 + [40]) = *($3)
	if ( (CALL memcmp(($29 + [16]), ($29 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [136])
	$2 = *($3)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$6 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($29 + [32]), $5)
	*($3) = $2
	
.LABEL $label$6
	CALL db_idx64_update($2, (int_64)0, ($29 + [40]))
	
.LABEL $label$5
	*($29 + [40]) = *($4)
	if ( (CALL memcmp($28, ($29 + [40]), [8]) == 0) ){ goto $label$7 }
	$28 = ($1 + [140])
	$1 = *($28)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($29 + [32]), $5)
	*($28) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, (int_64)0, ($29 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($29 + [144])
}

int_32 .FUNC $286 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $273($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_64 .FUNC fmax (float_64 $0, float_64 $1)
{
	int_64 $2
	int_64 $3
	$2 = (CASTING int_64)(float_64 $0)
	if ( ((uint_64)((int_64)$2 & (int_64)9223372036854775807) > (uint_64)(int_64)9218868437227405312) ){ goto $label$2 }
	$3 = (CASTING int_64)(float_64 $1)
	if ( ((uint_64)((int_64)$3 & (int_64)9223372036854775807) <= (uint_64)(int_64)9218868437227405312) ){ goto $label$3 }
	return $0
	
.LABEL $label$3
	if ( ((int_32)(CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)63)) != (int_32)(CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63))) ){ goto $label$1 }
	$1 = ( $1 ? $0 : ((float_64)$0 < (float_64)$1) )
	
.LABEL $label$2
	return $1
	
.LABEL $label$1
	return ( $1 ? $0 : ((int_64)$2 < (int_64)0) )
}

int_32 .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [480])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6030912129794572288, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $10($0, $5)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [480])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	*($4 + [15]) = *(*($0 + [16]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($3 + [4]), ($4 + [15]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	*($4 + [14]) = *(*($0 + [20]))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($3 + [4]), ($4 + [14]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), $3, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [60]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1296])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)6175819139447128064)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1232])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1232])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $121(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $273([72])
	$6 = CALL $124($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [60])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $120(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $274($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $274($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $274($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC _ZN5eosio2bk5wsellEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = ($0 + [96])
	$4 = CALL $127($3, $1, [144])
	CALL require_auth(*($4 + [32]))
	CALL eosio_assert(((int_32)*($4 + [88]) ^ (int_32)[1]), [1760])
	CALL eosio_assert(((int_32)*($4 + [72]) ^ (int_32)[1]), [1792])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($0 + [8])), [1824])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [1856])
	*($5 + [8]) = $2
	CALL $128($3, $4, ($5 + [8]))
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy(($4 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($4 + [15]) != (int_32)[0])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy(($4 + [14]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($4 + [14]) != (int_32)[0])
	$2 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [672])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $124 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($0 + [40]) = (int_64)0
	$5 = [0]
	*($0 + [32]) = [0]
	*(($6 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$3 = ($0 + [32])
	$4 = (uint_64)*($6) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [640])
	*($0 + [56]) = $1
	*($7 + [8]) = *($2 + [4])
	*($7 + [20]) = ($0 + [8])
	*($7 + [16]) = $0
	*($7 + [24]) = ($0 + [16])
	*($7 + [28]) = ($0 + [24])
	*($7 + [32]) = $3
	*($7 + [36]) = ($0 + [33])
	*($7 + [40]) = ($0 + [40])
	CALL $125(($7 + [16]), ($7 + [8]))
	$5 = *(*($2 + [8]))
	*($0 + [64]) = [-1]
	*($0 + [60]) = $5
	*(($0 + [68])) = [-1]
	*([0] + [4]) = ($7 + [48])
	return $0
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $15(*($1), *($0 + [12]))
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $16($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $278($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $273($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $278($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $274($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $275($7)
	return (unreachable)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [688])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $17($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [672])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $273($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $285($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $274($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [544])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $273([56])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [576])
	$3 = ($4 + [8])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [640])
	*($4 + [40]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $3
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + [24])
	*($8 + [44]) = ($4 + [32])
	CALL $11(($8 + [32]), ($8 + [24]))
	*($4 + [44]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [44])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $12($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $274($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $274($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $274($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [640])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $14(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $185 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = *($1)
	$5 = *(CALL $187($4, *($2)) + [4])
	$4 = ($1 + [8])
	$9 = *(CALL $187($4, *($2)))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$6 = *(*($2 + [4]))
	
.LOOP $label$2:
	if ( ((int_64)*($9) == (int_64)$6) ){ goto $label$1 }
	$9 = ($9 + [8])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$2 }
	$9 = $5
	
.LABEL $label$1
	if ( ((int_32)$9 == (int_32)*(CALL $187($4, *($2)) + [4])) ){ goto $label$3 }
	$7 = ($9 + [8])
	$5 = CALL $187($4, *($2))
	$8 = (*($5 + [4]) - $7)
	$2 = int_32($8 >> [3])
	if ( ($2 == 0) ){ goto $label$4 }
	CALL memmove($9, $7, $8)
	
.LABEL $label$4
	*(($5 + [4])) = ($9 + ($2 << [3]))
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [400])
	*($10 + [16]) = [0]
	*($10 + [24]) = ($10 + [16])
	*($10 + [4]) = $4
	*($10) = $1
	CALL $50($10, ($10 + [24]))
	$5 = *($10 + [16])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($11 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10) = $9
	*($10 + [8]) = ($9 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [464])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $51($10, $4)
	CALL db_update_i64(*($1 + [24]), (int_64)0, $9, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $281 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $273($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $274($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZN5eosio2bk8withdrawEyNS_5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	CALL require_auth($1)
	$10 = *($2)
	$4 = ($0 + [56])
	$6 = CALL $8($4, $1, [704])
	CALL eosio_assert(((int_64)*($6 + [8]) >= (int_64)$10), [736])
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$4), [176])
	CALL eosio_assert(((int_64)*($0 + [56]) == (int_64)CALL $fimport$15()), [224])
	$8 = *($6)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($6 + [16]))), [768])
	$10 = (int_64)
	*($6 + [8]) = $10(*($6 + [8]) - $10))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [816])
	CALL eosio_assert(((int_64)*($6 + [8]) < (int_64)4611686018427387904), [848])
	CALL eosio_assert(((int_64)$8 == (int_64)*($6)), [400])
	*($13 + [136]) = (($13 + [16]) + [40])
	*($13 + [132]) = ($13 + [16])
	*($13 + [128]) = ($13 + [16])
	*($13) = ($13 + [128])
	*($13 + [76]) = ($6 + [8])
	*($13 + [72]) = $6
	*($13 + [80]) = ($6 + [24])
	*($13 + [84]) = ($6 + [32])
	CALL $9(($13 + [72]), $13)
	CALL db_update_i64(*($6 + [44]), (int_64)0, ($13 + [16]), [40])
	$6 = ($0 + [72])
	if ( (uint_64)($8 <= *($6)) ){ goto $label$1 }
	*($6) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *($0)
	if ( ((int_64)$3 != (int_64)$1) ){ goto $label$2 }
	$8 = (int_64)0
	$10 = (int_64)59
	$6 = [880]
	$1 = (int_64)0
	
.LOOP $label$3:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$4 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$4 = ($4 + [165])
	goto $label$5 
	
.LABEL $label$6
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$7 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$4
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$1 = ((int_64)$7 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$3 }
	
.LABEL $label$2
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [896]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$12 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [912]
	$11 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$18 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$4 = ($4 + [165])
	goto $label$16 
	
.LABEL $label$18
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$11 = ((int_64)$10 | (int_64)$11)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$13 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [928]
	$12 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$24 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$4 = ($4 + [165])
	goto $label$22 
	
.LABEL $label$24
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$20
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$19 }
	*(($13 + [8])) = [0]
	*($13) = (int_64)0
	$6 = CALL strlen([944])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$28 }
	*($13) = ($6 << [1])
	$4 = ($13 | [1])
	if ( $6 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$5 = (($6 + [16]) & [-16])
	$4 = CALL $273($5)
	*($13) = ($5 | [1])
	*($13 + [8]) = $4
	*($13 + [4]) = $6
	
.LABEL $label$27
	CALL memcpy($4, [944], $6)
	
.LABEL $label$26
	*(($4 + $6)) = [0]
	*((($13 + [16]) + [28])) = *(($2 + [12]))
	*((($13 + [16]) + [24])) = *(($2 + [8]))
	*((($13 + [16]) + [20])) = *(($2 + [4]))
	*($13 + [24]) = $1
	*($13 + [16]) = *($0)
	*($13 + [32]) = *($2)
	$6 = ($13 + [8])
	*(($13 + [56])) = *($6)
	*($13 + [48]) = *($13)
	*($13) = [0]
	*($13 + [4]) = [0]
	*($6) = [0]
	*($13 + [72]) = $11
	*($13 + [80]) = $12
	*(($6 = CALL $273([16]))) = $3
	*($6 + [8]) = $9
	*((($13 + [72]) + [32])) = [0]
	$4 = ($6 + [16])
	*((($13 + [72]) + [24])) = $4
	*((($13 + [72]) + [20])) = $4
	*($13 + [88]) = $6
	*($13 + [100]) = [0]
	*((($13 + [72]) + [36])) = [0]
	$6 = *($13 + [48])
	$4 = ( *((($13 + [16]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($4 + [32])
	$8 = (CASTING uint_64)(uint_32 $4)
	$4 = (($13 + [72]) + [28])
	
.LOOP $label$29:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$29 }
	if ( ($6 == 0) ){ goto $label$31 }
	CALL $17($4, $6)
	$4 = *(($13 + [104]))
	$6 = *(($13 + [100]))
	goto $label$30 
	
.LABEL $label$31
	$4 = [0]
	$6 = [0]
	
.LABEL $label$30
	*($13 + [132]) = $6
	*($13 + [128]) = $6
	*($13 + [136]) = $4
	*($13 + [112]) = ($13 + [128])
	*($13 + [120]) = ($13 + [16])
	CALL $19(($13 + [120]), ($13 + [112]))
	CALL $20(($13 + [128]), ($13 + [72]))
	$6 = *($13 + [128])
	CALL send_inline($6, (*($13 + [132]) - $6))
	$6 = *($13 + [128])
	if ( ($6 == 0) ){ goto $label$32 }
	*($13 + [132]) = $6
	CALL $274($6)
	
.LABEL $label$32
	$6 = *($13 + [100])
	if ( ($6 == 0) ){ goto $label$33 }
	*(($13 + [104])) = $6
	CALL $274($6)
	
.LABEL $label$33
	$6 = *($13 + [88])
	if ( ($6 == 0) ){ goto $label$34 }
	*(($13 + [92])) = $6
	CALL $274($6)
	
.LABEL $label$34
	if ( ((*(($13 + [48])) & [1]) == 0) ){ goto $label$35 }
	CALL $274(*(($13 + [56])))
	
.LABEL $label$35
	if ( ((*($13) & [1]) == 0) ){ goto $label$36 }
	CALL $274(*(($13 + [8])))
	
.LABEL $label$36
	*([0] + [4]) = ($13 + [144])
	return (unreachable)
	
.LABEL $label$25
	CALL $275($13)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [464])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $23(*($1), ($0 + [32]))
}

int_32 .FUNC $184 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$0), [480])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6761208827670605824, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $48($0, $5)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$0), [480])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	$12 = *($0)
	$4 = *($0 + [4])
	$6 = ((int_32)$4 * (int_32)[24])
	if ( ($6 == 0) ){ goto $label$2 }
	$2 = ($1 + [1])
	$13 = ((int_32)$6 / (int_32)[24])
	$10 = ($1 + [4])
	$11 = ($1 + [8])
	
.LOOP $label$4:
	$7 = ($8 & [1])
	$8 = *($4)
	$3 = uint_32($13 >> [1])
	$4 = ($12 + ((int_32)$3 * (int_32)[24]))
	$8 = ( *($4 + [4]) ? uint_32($8 >> [1]) : $7 )
	$5 = ($4 & [1])
	$4 = *($1)
	$6 = ( *($10) ? uint_32($4 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$7 }
	$5 = CALL memcmp(( *($4 + [8]) ? ($4 + [1]) : $7 ), ( *($11) ? $2 : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$7 }
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$5 }
	
.LABEL $label$6
	$12 = ($4 + [24])
	$13 = (($13 + [-1]) - $3)
	if ( $13 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$13 = $3
	if ( $13 ){ goto $label$4 }
	
.LABEL $label$3
	$4 = *(($0 + [4]))
	$6 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$6 = $12
	
.LABEL $label$1
	if ( ((int_32)$12 == (int_32)($6 + ((int_32)$4 * (int_32)[24]))) ){ goto $label$9 }
	$13 = ($6 & [1])
	$6 = *($1)
	$6 = ( *($1 + [4]) ? uint_32($6 >> [1]) : $13 )
	$8 = ($4 & [1])
	$4 = *($12)
	$4 = ( *($12 + [4]) ? uint_32($4 >> [1]) : $8 )
	$3 = ( $4 ? $6 : ($4 <= $6) )
	if ( ($3 == 0) ){ goto $label$10 }
	$8 = CALL memcmp(( *($1 + [8]) ? ($1 + [1]) : $13 ), ( *($12 + [8]) ? ($12 + [1]) : $8 ), $3)
	if ( ($8 == 0) ){ goto $label$10 }
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((uint_32)$6 >= (uint_32)$4) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $286($14, $1)
	*(($14 + [20])) = [0]
	*($14 + [12 align=4]) = (int_64)0
	CALL $164(($14 + [24]), $0, $12, $14)
	$12 = *($14 + [24])
	$4 = *($14 + [12])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($14 + [16])) = $4
	CALL $274($4)
	
.LABEL $label$11
	if ( ((*($14) & [1]) == 0) ){ goto $label$8 }
	CALL $274(*($14 + [8]))
	
.LABEL $label$8
	*([0] + [4]) = ($14 + [32])
	return ($12 + [12])
}

int_32 .FUNC _ZN5eosio2bk23battle_level_acceptableEtNS0_6battleE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	$2 = *($2)
	$2 = *($2 + [56])
	if ( ((int_32)*($2 + [4]) == (int_32)$2) ){ goto $label$1 }
	$2 = *(CALL $127(($0 + [96]), *($2), [144]) + [20])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	if ( ((int_32)($2 + [-1]) == (int_32)$1) ){ goto $label$1 }
	$3 = ((int_32)($2 + [1]) == (int_32)$1)
	
.LABEL $label$1
	return $3
}

void .FUNC $186 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [1408])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1456])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1520])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $161($4)
	CALL $274($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $161($4)
	CALL $274($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [96]))
}

void .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($2, *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

int_32 .FUNC $116 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [480])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3842230918016241664, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $92($0, $5)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [480])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	*($1 + [26]) = (*($1 + [26]) + [-1])
	$2 = *($1)
	CALL eosio_assert([1], [400])
	*(($17 = $16) + [16]) = [0]
	*($17) = ($17 + [16])
	$4 = ($1 + [8])
	*($17 + [28]) = $4
	*($17 + [24]) = $1
	$5 = ($1 + [20])
	*($17 + [32]) = $5
	$6 = ($1 + [22])
	*($17 + [36]) = $6
	$7 = ($1 + [24])
	*($17 + [40]) = $7
	$3 = ($1 + [26])
	*($17 + [44]) = $3
	$8 = ($1 + [28])
	*($17 + [48]) = $8
	$9 = ($1 + [30])
	*($17 + [52]) = $9
	$10 = ($1 + [32])
	*($17 + [56]) = $10
	$11 = ($1 + [34])
	*($17 + [60]) = $11
	$12 = ($1 + [36])
	*($17 + [64]) = $12
	$13 = ($1 + [38])
	*($17 + [68]) = $13
	$14 = ($1 + [40])
	*($17 + [72]) = $14
	CALL $94(($17 + [24]), $17)
	$15 = *($17 + [16])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$16 = CALL malloc($15)
	goto $label$1 
	
.LABEL $label$2
	$16 = ($16 - (($15 + [15]) & [-16]))
	*([0] + [4]) = $16
	
.LABEL $label$1
	*($17 + [4]) = $16
	*($17) = $16
	*($17 + [8]) = ($16 + $15)
	*($17 + [16]) = $17
	*($17 + [28]) = $4
	*($17 + [32]) = $5
	*($17 + [36]) = $6
	*($17 + [40]) = $7
	*($17 + [44]) = $3
	*($17 + [48]) = $8
	*($17 + [24]) = $1
	*($17 + [52]) = $9
	*($17 + [56]) = $10
	*($17 + [60]) = $11
	*($17 + [64]) = $12
	*($17 + [68]) = $13
	*($17 + [72]) = $14
	CALL $95(($17 + [24]), ($17 + [16]))
	CALL db_update_i64(*($1 + [60]), (int_64)0, $16, $15)
	if ( ($15 <= [513]) ){ goto $label$3 }
	CALL free($16)
	
.LABEL $label$3
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($17 + [80])
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $273(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($6) = [0]
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $285($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($6) = [0]
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $274($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC _ZN5eosio2bk12buyequipmentEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [96])
	*([0] + [4]) = $8
	CALL require_auth($1)
	$3 = ($0 + [56])
	$4 = CALL $8($3, $1, [144])
	$5 = ($0 + [176])
	$6 = CALL $116($5, $2, [144])
	CALL eosio_assert(((int_32)*($6 + [26]) != (int_32)[0]), [1728])
	$3 = CALL $8($3, *($0), [144])
	*(($7 = (($8 + [80]) + [8]))) = *(($6 + [48]))
	$2 = *($6 + [40])
	*((($8 + [8]) + [12])) = *((($8 + [80]) + [12]))
	*((($8 + [8]) + [8])) = *($7)
	*($8 + [80]) = $2
	*($8 + [12]) = *($8 + [84])
	*($8 + [8]) = *($8 + [80])
	CALL _ZN5eosio2bk16transfer_balanceERKNS0_6playerES3_NS_5assetE($0, $4, $3, ($8 + [8]))
	CALL $117($5, $6)
	*($8 + [24]) = *($6)
	CALL $286((($8 + [24]) + [8]), ($6 + [8]))
	CALL memcpy((($8 + [24]) + [20]), ($6 + [20]), [36])
	CALL _ZN5eosio2bk33create_equipment_from_tequipmentsEyNS0_10tequipmentE($0, $1, ($8 + [24]))
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$1 }
	CALL $274(*(($8 + [40])))
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [96])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $15(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [672])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [672])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy(($5 + [15]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [15]) != (int_32)[0])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy(($5 + [14]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [14]) != (int_32)[0])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy(($5 + [13]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	*($3) = ((int_32)*($5 + [13]) != (int_32)[0])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [672])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [672])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $113(*($1), *($0 + [96]))
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [688])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $114($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)*($3) != (int_32)$6), [672])
	CALL memcpy(($8 + [15]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	*($7) = ((int_32)*($8 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [672])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [464])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	*($7 + [14]) = *($6)
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [464])
	CALL memcpy(*($3), ($7 + [14]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [464])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [96]) = (int_64)0
	$4 = [0]
	*(($0 + [16])) = [0]
	*(($5 = ($0 + [104]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [640])
	*(($0 + [124])) = [0]
	*($0 + [116 align=4]) = (int_64)0
	*($0 + [128]) = $1
	*($6) = *($2 + [4])
	*($6 + [12]) = ($0 + [8])
	*($6 + [8]) = $0
	*($6 + [16]) = ($0 + [20])
	*($6 + [20]) = ($0 + [22])
	*($6 + [24]) = ($0 + [24])
	*($6 + [28]) = ($0 + [32])
	*($6 + [32]) = ($0 + [40])
	*($6 + [36]) = ($0 + [48])
	*($6 + [40]) = ($0 + [50])
	*($6 + [44]) = ($0 + [52])
	*($6 + [48]) = ($0 + [54])
	*($6 + [52]) = ($0 + [56])
	*($6 + [56]) = ($0 + [58])
	*($6 + [60]) = ($0 + [60])
	*($6 + [64]) = ($0 + [64])
	*($6 + [68]) = ($0 + [68])
	*($6 + [72]) = ($0 + [72])
	*($6 + [76]) = ($0 + [73])
	*($6 + [80]) = ($0 + [74])
	*($6 + [84]) = ($0 + [75])
	*($6 + [88]) = ($0 + [80])
	*($6 + [92]) = ($0 + [88])
	*($6 + [96]) = ($0 + [96])
	*($6 + [100]) = ($0 + [112])
	*($6 + [104]) = ($0 + [116])
	CALL $112(($6 + [8]), $6)
	$4 = *(*($2 + [8]))
	*($0 + [136]) = [-1]
	*($0 + [132]) = $4
	*(($0 + [140])) = [-1]
	*([0] + [4]) = ($6 + [112])
	return $0
}

void .FUNC $237 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	*($1 + [22]) = (*($1 + [22]) + [1])
	$2 = *($1)
	CALL eosio_assert([1], [400])
	*(($16 = $15) + [24]) = [0]
	*($16 + [8]) = ($16 + [24])
	$4 = ($1 + [8])
	*($16 + [36]) = $4
	*($16 + [32]) = $1
	$5 = ($1 + [20])
	*($16 + [40]) = $5
	$3 = ($1 + [22])
	*($16 + [44]) = $3
	$6 = ($1 + [24])
	*($16 + [48]) = $6
	$7 = ($1 + [26])
	*($16 + [52]) = $7
	$8 = ($1 + [28])
	*($16 + [56]) = $8
	$9 = ($1 + [30])
	*($16 + [60]) = $9
	$10 = ($1 + [32])
	*($16 + [64]) = $10
	$11 = ($1 + [34])
	*($16 + [68]) = $11
	$12 = ($1 + [36])
	*($16 + [72]) = $12
	$13 = ($1 + [40])
	*($16 + [76]) = $13
	CALL $30(($16 + [32]), ($16 + [8]))
	$14 = *($16 + [24])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$15 = CALL malloc($14)
	goto $label$1 
	
.LABEL $label$2
	$15 = ($15 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$1
	*($16 + [12]) = $15
	*($16 + [8]) = $15
	*($16 + [16]) = ($15 + $14)
	*($16 + [24]) = ($16 + [8])
	*($16 + [36]) = $4
	*($16 + [40]) = $5
	*($16 + [44]) = $3
	*($16 + [48]) = $6
	*($16 + [52]) = $7
	*($16 + [56]) = $8
	*($16 + [32]) = $1
	*($16 + [60]) = $9
	*($16 + [64]) = $10
	*($16 + [68]) = $11
	*($16 + [72]) = $12
	*($16 + [76]) = $13
	CALL $31(($16 + [32]), ($16 + [24]))
	CALL db_update_i64(*($1 + [60]), (int_64)0, $15, $14)
	if ( ($14 <= [513]) ){ goto $label$3 }
	CALL free($15)
	
.LABEL $label$3
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($16 + [80])
}

void .FUNC _ZN5eosio2bk33create_equipment_from_tequipmentsEyNS0_10tequipmentE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($6 + [16]) = $1
	$1 = *($0)
	*($6) = $0
	*($6 + [8]) = $2
	*($6 + [4]) = ($6 + [16])
	*($6 + [56]) = $1
	CALL eosio_assert(((int_64)*($0 + [216]) == (int_64)CALL $fimport$15()), [1104])
	$3 = ($0 + [216])
	*($6 + [32]) = $3
	*($6 + [36]) = $6
	*($6 + [40]) = ($6 + [56])
	*(($4 = CALL $273([72])) + [40]) = (int_64)0
	$2 = [0]
	*($4 + [32]) = [0]
	*($4 + [48]) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$1 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [640])
	*($4 + [56]) = $3
	CALL $119(($6 + [32]), $4)
	*($6 + [48]) = $4
	$1 = *($4)
	*($6 + [32]) = $1
	$5 = *($4 + [60])
	*($6 + [28]) = $5
	$3 = ($0 + [244])
	$2 = *($3)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [248]))) ){ goto $label$7 }
	*($2 + [8]) = $1
	*($2 + [16]) = $5
	*($6 + [48]) = [0]
	*($2) = $4
	*($3) = ($2 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $120(($0 + [240]), ($6 + [48]), ($6 + [32]), ($6 + [28]))
	
.LABEL $label$6
	$2 = *($6 + [48])
	*($6 + [48]) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $274($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$9 = (*([0] + [4]) - [64])
	$12 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = ($4 + [232])
	$7 = *($8)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = ($4 + [216])
	$6 = CALL db_lowerbound_i64(*($5), *(($4 + [224])), (int_64)6175819139447128064, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $121($5, $6)
	*($12 + [36]) = [0]
	*($12 + [32]) = $5
	$7 = *(*(CALL $122(($12 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [232])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1168])
	*($1) = *($8)
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [24]) = *(*($3 + [8]))
	$3 = $9
	$9 = ($3 + [-64])
	*([0] + [4]) = $9
	*($12 + [12]) = $9
	*($12 + [8]) = $9
	*($12 + [16]) = ($3 + [-14])
	*($12 + [24]) = ($12 + [8])
	$3 = ($1 + [8])
	*($12 + [36]) = $3
	*($12 + [32]) = $1
	*($12 + [40]) = ($1 + [16])
	*($12 + [44]) = ($1 + [24])
	*($12 + [48]) = ($1 + [32])
	$4 = ($1 + [33])
	*($12 + [52]) = $4
	*($12 + [56]) = ($1 + [40])
	CALL $123(($12 + [32]), ($12 + [24]))
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)6175819139447128064, *(*($0 + [8])), $7, $9, [50])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$2 = ($2 + [8])
	$7 = *($2)
	$0 = *(($0 + [8]))
	$10 = *($0)
	$11 = *($1)
	*($12 + [32]) = *($3)
	*($1 + [64]) = CALL db_idx64_store($7, (int_64)6175819139447128064, $10, $11, ($12 + [32]))
	$7 = *($0)
	$10 = *($2)
	$11 = *($1)
	*($12 + [32]) = *($4)
	*(($1 + [68])) = CALL db_idx64_store($10, (int_64)6175819139447128065, $7, $11, ($12 + [32]))
	*([0] + [4]) = ($12 + [64])
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

int_32 .FUNC $298 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [12624]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $302(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [13104]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [13136]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [13142] ? [13137] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [13106] ? [13104] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [13139]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $296()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [13104]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [13104]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [13088])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [13104])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [13120] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [13104]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [13200] ? [13216] : $30 ) ? ( [13168] ? [13184] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [13104]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [13105]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [13104] ? [13109] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13088])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13088])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [13088])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([13232], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([13232], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([13232], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $302(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $302(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $302(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $302(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $302(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $302(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $302(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $302(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $302(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC $295 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [34]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $298([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $298($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $298($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC __errno_location ()
{
	return [15148]
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [60]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1296])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3527026891821154304)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1232])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1232])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $28(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $273([72])
	$6 = CALL $32($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [60])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $274(*(($4 + [16])))
	
.LABEL $label$10
	CALL $274($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $235 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [48])
	$14 = $15
	*([0] + [4]) = $15
	$2 = *($0)
	$12 = *($0 + [4])
	$8 = *($12)
	$5 = ($8 + [472])
	$13 = *($5)
	if ( ((int_64)$13 != (int_64)-1) ){ goto $label$1 }
	$13 = (int_64)0
	$4 = ($8 + [456])
	$6 = CALL db_lowerbound_i64(*($4), *(($8 + [464])), (int_64)-7955357921610170368, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $71($4, $6)
	*($14 + [28]) = [0]
	*($14 + [24]) = $4
	$13 = *(*(CALL $80(($14 + [24])) + [4]))
	$13 = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($8 + [472])) = $13
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($13 <= (int_64)-2), [1168])
	*($1) = *($5)
	*($1 + [24]) = *(*($12 + [4]))
	$8 = *($12 + [8])
	$4 = ($1 + [32])
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$3 }
	CALL $81($4, *($8), *($8 + [4]))
	
.LABEL $label$3
	$3 = ($1 + [24])
	*($1 + [8]) = *(*($12 + [12]))
	*($1 + [44]) = *(*($12 + [16]))
	$7 = *($4)
	$8 = *(($1 + [36]))
	$9 = ($8 - $7)
	$13 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$6 = ($1 + [44])
	$5 = ($1 + [8])
	$12 = [25]
	
.LOOP $label$4:
	$12 = ($12 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$5 }
	$12 = (($9 & [-8]) + $12)
	
.LABEL $label$5
	$8 = ($12 + [2])
	if ( ($8 <= [513]) ){ goto $label$7 }
	$12 = CALL malloc($8)
	goto $label$6 
	
.LABEL $label$7
	$12 = ($15 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $12
	
.LABEL $label$6
	*($14 + [4]) = $12
	*($14) = $12
	*($14 + [8]) = ($12 + $8)
	*($14 + [16]) = $14
	*($14 + [28]) = $5
	*($14 + [24]) = $1
	*($14 + [32]) = ($1 + [16])
	*($14 + [36]) = $3
	*($14 + [40]) = $4
	*($14 + [44]) = $6
	CALL $78(($14 + [24]), ($14 + [16]))
	$13 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-7955357921610170368, *(*($0 + [8])), $13, $12, $8)
	if ( ($8 <= [513]) ){ goto $label$8 }
	CALL free($12)
	
.LABEL $label$8
	if ( (uint_64)($13 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$8 = ($2 + [8])
	$13 = *($8)
	$12 = *(($0 + [8]))
	$10 = *($12)
	$11 = *($1)
	$0 = ($1 + [16])
	*($14 + [24]) = *($0)
	*($1 + [56]) = CALL db_idx64_store($13, (int_64)-7955357921610170368, $10, $11, ($14 + [24]))
	$13 = *($12)
	$10 = *($8)
	$11 = *($1)
	$15 = [0]
	$4 = [0]
	if ( ((int_64)*($0) != (int_64)0) ){ goto $label$10 }
	$4 = [0]
	if ( *($5) ){ goto $label$10 }
	$4 = ((int_32)*($6) != (int_32)[0])
	
.LABEL $label$10
	*($14 + [24]) = (CASTING uint_64)(uint_32 $4)
	*(($1 + [60])) = CALL db_idx64_store($10, (int_64)-7955357921610170367, $13, $11, ($14 + [24]))
	$13 = *($8)
	$10 = *($1)
	$11 = *($12)
	if ( ((int_64)*($0) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)*($5) != (int_32)[1]) ){ goto $label$11 }
	$15 = ((int_32)*($6) != (int_32)[0])
	
.LABEL $label$11
	*($14 + [24]) = (CASTING uint_64)(uint_32 $15)
	*(($1 + [64])) = CALL db_idx64_store($13, (int_64)-7955357921610170366, $11, $10, ($14 + [24]))
	$4 = ($2 + [8])
	$13 = *($4)
	$10 = *($1)
	$11 = *($12)
	$8 = [0]
	$0 = [0]
	$15 = ($1 + [16])
	if ( ((int_64)*($15) != (int_64)0) ){ goto $label$12 }
	$0 = [0]
	if ( ((int_32)*($5) != (int_32)[2]) ){ goto $label$12 }
	$0 = ((int_32)*($6) != (int_32)[0])
	
.LABEL $label$12
	*($14 + [24]) = (CASTING uint_64)(uint_32 $0)
	*(($1 + [68])) = CALL db_idx64_store($13, (int_64)-7955357921610170365, $11, $10, ($14 + [24]))
	$13 = *($4)
	$10 = *($1)
	$11 = *($12)
	if ( ((int_64)*($15) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)*($5) != (int_32)[3]) ){ goto $label$13 }
	$8 = ((int_32)*($6) != (int_32)[0])
	
.LABEL $label$13
	*($14 + [24]) = (CASTING uint_64)(uint_32 $8)
	*(($1 + [72])) = CALL db_idx64_store($13, (int_64)-7955357921610170364, $11, $10, ($14 + [24]))
	$13 = *(($2 + [8]))
	$10 = *($1)
	$11 = *($12)
	$12 = [0]
	if ( ((int_64)*(($1 + [16])) != (int_64)0) ){ goto $label$14 }
	if ( ((int_32)*($5) != (int_32)[4]) ){ goto $label$14 }
	$12 = ((int_32)*($6) != (int_32)[0])
	
.LABEL $label$14
	*($14 + [24]) = (CASTING uint_64)(uint_32 $12)
	*(($1 + [76])) = CALL db_idx64_store($13, (int_64)-7955357921610170363, $11, $10, ($14 + [24]))
	*([0] + [4]) = ($14 + [48])
}

void .FUNC $278 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $273(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $274($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [464])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [464])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [464])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $17($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [464])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [464])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $22(CALL $21($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [464])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [464])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [464])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [464])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN5eosio2bk11addtwarriorENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEhttttttNS_5assetEt (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	*($12 + [59]) = $2
	*($12 + [56]) = $3
	*($12 + [54]) = $4
	*($12 + [52]) = $5
	*($12 + [50]) = $6
	*($12 + [48]) = $7
	*($12 + [46]) = $8
	*($12 + [44]) = $10
	CALL require_auth(*($0))
	$11 = *($0)
	*($12 + [4]) = $1
	*($12) = $0
	*($12 + [8]) = ($12 + [59])
	*($12 + [12]) = ($12 + [56])
	*($12 + [16]) = ($12 + [54])
	*($12 + [20]) = ($12 + [52])
	*($12 + [24]) = ($12 + [50])
	*($12 + [28]) = $9
	*($12 + [32]) = ($12 + [48])
	*($12 + [36]) = ($12 + [46])
	*($12 + [40]) = ($12 + [44])
	*($12 + [88]) = $11
	CALL eosio_assert(((int_64)*($0 + [136]) == (int_64)CALL $fimport$15()), [1104])
	$8 = ($0 + [136])
	*($12 + [64]) = $8
	*($12 + [68]) = $12
	*($12 + [72]) = ($12 + [88])
	$9 = [0]
	*(($1 = CALL $273([72])) + [16]) = [0]
	*($1 + [8 align=4]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$11 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [640])
	*($1 + [56]) = $8
	CALL $26(($12 + [64]), $1)
	*($12 + [80]) = $1
	$11 = *($1)
	*($12 + [64]) = $11
	$10 = *($1 + [60])
	*($12 + [60]) = $10
	$8 = ($0 + [164])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [168]))) ){ goto $label$7 }
	*($9 + [8]) = $11
	*($9 + [16]) = $10
	*($12 + [80]) = [0]
	*($9) = $1
	*($8) = ($9 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $27(($0 + [160]), ($12 + [80]), ($12 + [64]), ($12 + [60]))
	
.LABEL $label$6
	$9 = *($12 + [80])
	*($12 + [80]) = [0]
	if ( ($9 == 0) ){ goto $label$8 }
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL $274(*(($9 + [16])))
	
.LABEL $label$9
	CALL $274($9)
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [96])
}

void .FUNC _ZN5eosio2bk16transfer_balanceERKNS0_6playerES3_NS_5assetE (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [144])
	*([0] + [4]) = $12
	$11 = *($3)
	CALL eosio_assert(((int_64)*($1 + [8]) >= (int_64)$11), [736])
	$4 = ($0 + [56])
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$4), [176])
	CALL eosio_assert(((int_64)*($0 + [56]) == (int_64)CALL $fimport$15()), [224])
	$5 = *($1)
	$6 = *($3 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [16]))), [768])
	$8 = (int_64)
	*($1 + [8]) = $8(*($1 + [8]) - $11))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [816])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [848])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [400])
	$3 = (($12 + [64]) + [40])
	*($12 + [112]) = $3
	*($12 + [108]) = ($12 + [64])
	*($12 + [104]) = ($12 + [64])
	*($12 + [120]) = ($12 + [104])
	*($12 + [132]) = ($1 + [8])
	*($12 + [128]) = $1
	$7 = ($1 + [24])
	*($12 + [136]) = $7
	*($12 + [140]) = ($1 + [32])
	CALL $9(($12 + [128]), ($12 + [120]))
	CALL db_update_i64(*($1 + [44]), (int_64)0, ($12 + [64]), [40])
	$9 = ($0 + [72])
	if ( (uint_64)($5 <= *($9)) ){ goto $label$1 }
	*($9) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	if ( ((int_64)*($2) != (int_64)*($0)) ){ goto $label$3 }
	if ( ((int_64)*($1) == (int_64)*(($1 + [24]))) ){ goto $label$2 }
	$5 = (int_64)$11 >> (int_64)63
	CALL __multi3(($12 + [16]), $11, $5), (int_64)95, (int_64)0)
	CALL __multi3($12, $11, $5, (int_64)5, (int_64)0)
	$11 = *((($12 + [16]) + [8]))
	$8 = *($12 + [16])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ), [992])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ), [1024])
	CALL eosio_assert([1], [1056])
	CALL eosio_assert([1], [1072])
	$1 = CALL $8($4, *($7), [144])
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$4), [176])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$15()), [224])
	$5 = *($1)
	$11 = *(($12 + [8]))
	$10 = *($12)
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ), [992])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ), [1024])
	CALL eosio_assert([1], [1056])
	CALL eosio_assert([1], [1072])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [16]))), [288])
	$11 = ((int_64)*($1 + [8]) + (int_64)((int_64)$10 / (int_64)100))
	*($1 + [8]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [336])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [368])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [400])
	*($12 + [112]) = $3
	*($12 + [108]) = ($12 + [64])
	*($12 + [104]) = ($12 + [64])
	*($12 + [120]) = ($12 + [104])
	*($12 + [132]) = ($1 + [8])
	*($12 + [128]) = $1
	*($12 + [136]) = ($1 + [24])
	*($12 + [140]) = ($1 + [32])
	CALL $9(($12 + [128]), ($12 + [120]))
	CALL db_update_i64(*($1 + [44]), (int_64)0, ($12 + [64]), [40])
	$11 = ((int_64)$8 / (int_64)100)
	$1 = ($0 + [72])
	if ( (uint_64)($5 <= *($1)) ){ goto $label$2 }
	*($1) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	goto $label$2 
	
.LABEL $label$3
	$5 = (int_64)$11 >> (int_64)63
	CALL __multi3(($12 + [48]), $11, $5), (int_64)95, (int_64)0)
	CALL __multi3(($12 + [32]), $11, $5, (int_64)5, (int_64)0)
	$11 = *((($12 + [48]) + [8]))
	$8 = *($12 + [48])
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ), [992])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ), [1024])
	CALL eosio_assert([1], [1056])
	CALL eosio_assert([1], [1072])
	$1 = CALL $8($4, *($0), [144])
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$4), [176])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$15()), [224])
	$5 = *($1)
	$11 = *((($12 + [32]) + [8]))
	$10 = *($12 + [32])
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ), [992])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ), [1024])
	CALL eosio_assert([1], [1056])
	CALL eosio_assert([1], [1072])
	CALL eosio_assert(((int_64)$6 == (int_64)*(($1 + [16]))), [288])
	$11 = ((int_64)*($1 + [8]) + (int_64)((int_64)$10 / (int_64)100))
	*($1 + [8]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [336])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [368])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [400])
	*($12 + [112]) = $3
	*($12 + [108]) = ($12 + [64])
	*($12 + [104]) = ($12 + [64])
	*($12 + [120]) = ($12 + [104])
	*($12 + [132]) = ($1 + [8])
	*($12 + [128]) = $1
	*($12 + [136]) = ($1 + [24])
	*($12 + [140]) = ($1 + [32])
	CALL $9(($12 + [128]), ($12 + [120]))
	CALL db_update_i64(*($1 + [44]), (int_64)0, ($12 + [64]), [40])
	$11 = ((int_64)$8 / (int_64)100)
	$1 = ($0 + [72])
	if ( (uint_64)($5 <= *($1)) ){ goto $label$2 }
	*($1) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	CALL eosio_assert(((int_32)*($2 + [40]) == (int_32)$4), [176])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$15()), [224])
	$5 = *($2)
	CALL eosio_assert(((int_64)$6 == (int_64)*(($2 + [16]))), [288])
	$11 = ((int_64)*($2 + [8]) + (int_64)$11)
	*($2 + [8]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [336])
	CALL eosio_assert(((int_64)*($2 + [8]) < (int_64)4611686018427387904), [368])
	CALL eosio_assert(((int_64)$5 == (int_64)*($2)), [400])
	*($12 + [112]) = $3
	*($12 + [108]) = ($12 + [64])
	*($12 + [104]) = ($12 + [64])
	*($12 + [120]) = ($12 + [104])
	*($12 + [132]) = ($2 + [8])
	*($12 + [128]) = $2
	*($12 + [136]) = ($2 + [24])
	*($12 + [140]) = ($2 + [32])
	CALL $9(($12 + [128]), ($12 + [120]))
	CALL db_update_i64(*($2 + [44]), (int_64)0, ($12 + [64]), [40])
	$1 = ($0 + [72])
	if ( (uint_64)($5 <= *($1)) ){ goto $label$4 }
	*($1) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($12 + [144])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $274(*(($1 + [16])))
	
.LABEL $label$11
	CALL $274($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $274($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [80])
	$17 = $18
	*([0] + [4]) = $18
	$2 = *($0)
	$3 = *($0 + [4])
	$15 = *($3)
	$4 = ($15 + [152])
	$16 = *($4)
	if ( ((int_64)$16 != (int_64)-1) ){ goto $label$1 }
	$16 = (int_64)0
	$5 = ($15 + [136])
	$13 = CALL db_lowerbound_i64(*($5), *(($15 + [144])), (int_64)-3527026891821154304, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$2 }
	CALL $28($5, $13)
	*($17 + [36]) = [0]
	*($17 + [32]) = $5
	$16 = *(*(CALL $29(($17 + [32])) + [4]))
	$16 = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($15 + [152])) = $16
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($16 <= (int_64)-2), [1168])
	*($1) = *($4)
	$4 = ($1 + [8])
	CALL $276($4, *($3 + [4]))
	*($1 + [20]) = *(*($3 + [8]))
	*($1 + [26]) = *(*($3 + [12]))
	*($1 + [28]) = *(*($3 + [16]))
	*($1 + [30]) = *(*($3 + [20]))
	*($1 + [32]) = *(*($3 + [24]))
	$15 = *($3 + [28])
	*($1 + [40]) = *($15)
	*(($1 + [48])) = *(($15 + [8]))
	*($1 + [34]) = *(*($3 + [32]))
	*($1 + [36]) = *(*($3 + [36]))
	*($1 + [22]) = *(*($3 + [40]))
	*($1 + [24]) = *(*($3 + [40]))
	*($17 + [24]) = [0]
	*($17 + [8]) = ($17 + [24])
	*($17 + [36]) = $4
	*($17 + [32]) = $1
	$5 = ($1 + [20])
	*($17 + [40]) = $5
	$13 = ($1 + [22])
	*($17 + [44]) = $13
	$14 = ($1 + [24])
	*($17 + [48]) = $14
	$6 = ($1 + [26])
	*($17 + [52]) = $6
	$7 = ($1 + [28])
	*($17 + [56]) = $7
	$8 = ($1 + [30])
	*($17 + [60]) = $8
	$9 = ($1 + [32])
	*($17 + [64]) = $9
	$11 = ($1 + [34])
	*($17 + [68]) = $11
	$12 = ($1 + [36])
	*($17 + [72]) = $12
	$10 = ($1 + [40])
	*($17 + [76]) = $10
	CALL $30(($17 + [32]), ($17 + [8]))
	$15 = *($17 + [24])
	if ( ($15 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($15)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($18 - (($15 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($17 + [12]) = $3
	*($17 + [8]) = $3
	*($17 + [16]) = ($3 + $15)
	*($17 + [24]) = ($17 + [8])
	*($17 + [36]) = $4
	*($17 + [32]) = $1
	*($17 + [40]) = $5
	*($17 + [44]) = $13
	*($17 + [48]) = $14
	*($17 + [52]) = $6
	*($17 + [56]) = $7
	*($17 + [60]) = $8
	*($17 + [64]) = $9
	*($17 + [68]) = $11
	*($17 + [72]) = $12
	*($17 + [76]) = $10
	CALL $31(($17 + [32]), ($17 + [24]))
	$16 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-3527026891821154304, *(*($0 + [8])), $16, $3, $15)
	if ( ($15 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($16 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$16 + (int_64)1) : ((uint_64)$16 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($17 + [80])
}

void .FUNC $232 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($8 - $4)) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL $274($4)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = [2147483647]
	if ( ((uint_32)$8 > (uint_32)[1073741822]) ){ goto $label$6 }
	$8 = ($8 << [1])
	$4 = ( $3 ? $8 : ($8 <= $3) )
	
.LABEL $label$6
	$8 = CALL $273($4)
	*($0) = $8
	*($0 + [4]) = $8
	*(($0 + [8])) = ($8 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$3 }
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($8) = *($1)
	$8 = (*($0) + [1])
	*($0) = $8
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$5 = (*($0 + [4]) - $4)
	$8 = ($1 + $5)
	$6 = ( $8 ? $2 : ((uint_32)$3 > (uint_32)$5) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$8 }
	CALL memmove($4, $1, $7)
	
.LABEL $label$8
	if ( ((uint_32)$3 <= (uint_32)$5) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$3 }
	$1 = ($0 + [4])
	$0 = *($1)
	
.LOOP $label$9:
	*($0) = *($8)
	$0 = (*($1) + [1])
	*($1) = $0
	$8 = ($8 + [1])
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($4 + $7)
	return (unreachable)
	
.LABEL $label$1
	CALL $285($0)
}

void .FUNC __unlockfile (int_32 $0)
{
}

void .FUNC $280 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $281($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	*($1 + [24]) = (*($1 + [24]) + [-1])
	$2 = *($1)
	CALL eosio_assert([1], [400])
	*(($16 = $15) + [24]) = [0]
	*($16 + [8]) = ($16 + [24])
	$4 = ($1 + [8])
	*($16 + [36]) = $4
	*($16 + [32]) = $1
	$5 = ($1 + [20])
	*($16 + [40]) = $5
	$6 = ($1 + [22])
	*($16 + [44]) = $6
	$3 = ($1 + [24])
	*($16 + [48]) = $3
	$7 = ($1 + [26])
	*($16 + [52]) = $7
	$8 = ($1 + [28])
	*($16 + [56]) = $8
	$9 = ($1 + [30])
	*($16 + [60]) = $9
	$10 = ($1 + [32])
	*($16 + [64]) = $10
	$11 = ($1 + [34])
	*($16 + [68]) = $11
	$12 = ($1 + [36])
	*($16 + [72]) = $12
	$13 = ($1 + [40])
	*($16 + [76]) = $13
	CALL $30(($16 + [32]), ($16 + [8]))
	$14 = *($16 + [24])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$15 = CALL malloc($14)
	goto $label$1 
	
.LABEL $label$2
	$15 = ($15 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$1
	*($16 + [12]) = $15
	*($16 + [8]) = $15
	*($16 + [16]) = ($15 + $14)
	*($16 + [24]) = ($16 + [8])
	*($16 + [36]) = $4
	*($16 + [40]) = $5
	*($16 + [44]) = $6
	*($16 + [48]) = $3
	*($16 + [52]) = $7
	*($16 + [56]) = $8
	*($16 + [32]) = $1
	*($16 + [60]) = $9
	*($16 + [64]) = $10
	*($16 + [68]) = $11
	*($16 + [72]) = $12
	*($16 + [76]) = $13
	CALL $31(($16 + [32]), ($16 + [24]))
	CALL db_update_i64(*($1 + [60]), (int_64)0, $15, $14)
	if ( ($14 <= [513]) ){ goto $label$3 }
	CALL free($15)
	
.LABEL $label$3
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($16 + [80])
}

int_32 .FUNC $100 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [480])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3527026891821154304, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $28($0, $5)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [480])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	int_32 $33
	$33 = (*([0] + [4]) - [128])
	$32 = $33
	*([0] + [4]) = $33
	$2 = *($0)
	$3 = *($0 + [4])
	$31 = *($3)
	$27 = ($31 + [112])
	$28 = *($27)
	if ( ((int_64)$28 != (int_64)-1) ){ goto $label$1 }
	$28 = (int_64)0
	$12 = ($31 + [96])
	$11 = CALL db_lowerbound_i64(*($12), *(($31 + [104])), (int_64)-2184396096019628032, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	CALL $105($12, $11)
	*($32 + [28]) = [0]
	*($32 + [24]) = $12
	$28 = *(*(CALL $106(($32 + [24])) + [4]))
	$28 = ( (int_64)-2 ? ((int_64)$28 + (int_64)1) : ((uint_64)$28 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($31 + [112])) = $28
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($28 <= (int_64)-2), [1168])
	*($1) = *($27)
	*($1 + [32]) = *(*($3 + [4]))
	*($1 + [40]) = *(*($3 + [8]))
	*($1 + [48]) = *(*($3 + [8]) + [26])
	*($1 + [50]) = *(*($3 + [8]) + [26])
	*($1 + [52]) = *(*($3 + [8]) + [28])
	*($1 + [54]) = *(*($3 + [8]) + [30])
	*($1 + [58]) = *(*($3 + [8]) + [34])
	*($1 + [60]) = *(*($3 + [8]) + [36])
	*($1 + [56]) = *(*($3 + [8]) + [32])
	*($32 + [32]) = (int_64)0
	*($32 + [24]) = [0]
	$3 = ($1 + [116])
	$27 = ($1 + [120])
	$31 = *($27)
	if ( ((uint_32)$31 >= (uint_32)*(($1 + [124]))) ){ goto $label$4 }
	*($31) = *($32 + [24])
	*(($31 + [8])) = *((($32 + [24]) + [8]))
	$31 = (*($27) + [16])
	*($27) = $31
	goto $label$3 
	
.LABEL $label$4
	CALL $107($3, ($32 + [24]))
	$31 = *($27)
	
.LABEL $label$3
	*($32 + [32]) = (int_64)0
	*($32 + [24]) = [0]
	if ( ((uint_32)$31 >= (uint_32)*(($1 + [124]))) ){ goto $label$6 }
	*($31) = *($32 + [24])
	*(($31 + [8])) = *((($32 + [24]) + [8]))
	$31 = (*($31) + [16])
	*(($31 = ($1 + [120]))) = $31
	goto $label$5 
	
.LABEL $label$6
	CALL $107($3, ($32 + [24]))
	$31 = *(($1 + [120]))
	
.LABEL $label$5
	*($32 + [32]) = (int_64)0
	*($32 + [24]) = [0]
	if ( ((uint_32)$31 >= (uint_32)*(($1 + [124]))) ){ goto $label$8 }
	*($31) = *($32 + [24])
	*(($31 + [8])) = *((($32 + [24]) + [8]))
	$31 = (*($31) + [16])
	*(($31 = ($1 + [120]))) = $31
	goto $label$7 
	
.LABEL $label$8
	CALL $107($3, ($32 + [24]))
	$31 = *(($1 + [120]))
	
.LABEL $label$7
	*($32 + [32]) = (int_64)0
	*($32 + [24]) = [0]
	if ( ((uint_32)$31 >= (uint_32)*(($1 + [124]))) ){ goto $label$10 }
	*($31) = *($32 + [24])
	*(($31 + [8])) = *((($32 + [24]) + [8]))
	$31 = (*($31) + [16])
	*(($31 = ($1 + [120]))) = $31
	goto $label$9 
	
.LABEL $label$10
	CALL $107($3, ($32 + [24]))
	$31 = *(($1 + [120]))
	
.LABEL $label$9
	*($32 + [32]) = (int_64)0
	*($32 + [24]) = [0]
	if ( ((uint_32)$31 >= (uint_32)*(($1 + [124]))) ){ goto $label$12 }
	*($31) = *($32 + [24])
	*(($31 + [8])) = *((($32 + [24]) + [8]))
	$31 = (*($31) + [16])
	*(($31 = ($1 + [120]))) = $31
	goto $label$11 
	
.LABEL $label$12
	CALL $107($3, ($32 + [24]))
	$31 = *(($1 + [120]))
	
.LABEL $label$11
	$12 = ($1 + [56])
	$11 = ($1 + [60])
	$10 = ($1 + [58])
	$9 = ($1 + [54])
	$8 = ($1 + [52])
	$7 = ($1 + [50])
	$6 = ($1 + [48])
	$5 = ($1 + [40])
	$4 = ($1 + [32])
	*($32 + [32]) = (int_64)0
	*($32 + [24]) = [0]
	if ( ((uint_32)$31 >= (uint_32)*(($1 + [124]))) ){ goto $label$14 }
	*($31) = *($32 + [24])
	*(($31 + [8])) = *((($32 + [24]) + [8]))
	*(($31 = ($1 + [120]))) = (*($31) + [16])
	goto $label$13 
	
.LABEL $label$14
	CALL $107($3, ($32 + [24]))
	
.LABEL $label$13
	*($32 + [16]) = [0]
	*($32) = ($32 + [16])
	*($32 + [44]) = $4
	*($32 + [48]) = $5
	*($32 + [24]) = $1
	$13 = ($1 + [8])
	*($32 + [28]) = $13
	$14 = ($1 + [20])
	*($32 + [32]) = $14
	$15 = ($1 + [22])
	*($32 + [36]) = $15
	$16 = ($1 + [24])
	*($32 + [40]) = $16
	*($32 + [52]) = $6
	*($32 + [56]) = $7
	*($32 + [60]) = $8
	*($32 + [64]) = $9
	*($32 + [68]) = $12
	*($32 + [72]) = $10
	*($32 + [76]) = $11
	$17 = ($1 + [64])
	*($32 + [80]) = $17
	$18 = ($1 + [68])
	*($32 + [84]) = $18
	$19 = ($1 + [72])
	*($32 + [88]) = $19
	$20 = ($1 + [73])
	*($32 + [92]) = $20
	$21 = ($1 + [74])
	*($32 + [96]) = $21
	$22 = ($1 + [75])
	*($32 + [100]) = $22
	$23 = ($1 + [80])
	*($32 + [104]) = $23
	$24 = ($1 + [88])
	*($32 + [108]) = $24
	$25 = ($1 + [96])
	*($32 + [112]) = $25
	$26 = ($1 + [112])
	*($32 + [116]) = $26
	*($32 + [120]) = $3
	CALL $108(($32 + [24]), $32)
	$27 = *($32 + [16])
	if ( ($27 <= [513]) ){ goto $label$16 }
	$31 = CALL malloc($27)
	goto $label$15 
	
.LABEL $label$16
	$31 = ($33 - (($27 + [15]) & [-16]))
	*([0] + [4]) = $31
	
.LABEL $label$15
	*($32 + [4]) = $31
	*($32) = $31
	*($32 + [8]) = ($31 + $27)
	*($32 + [16]) = $32
	*($32 + [28]) = $13
	*($32 + [24]) = $1
	*($32 + [32]) = $14
	*($32 + [36]) = $15
	*($32 + [40]) = $16
	*($32 + [44]) = $4
	*($32 + [48]) = $5
	*($32 + [52]) = $6
	*($32 + [56]) = $7
	*($32 + [60]) = $8
	*($32 + [64]) = $9
	*($32 + [68]) = $12
	*($32 + [72]) = $10
	*($32 + [76]) = $11
	*($32 + [80]) = $17
	*($32 + [84]) = $18
	*($32 + [88]) = $19
	*($32 + [92]) = $20
	*($32 + [96]) = $21
	*($32 + [100]) = $22
	*($32 + [104]) = $23
	*($32 + [108]) = $24
	*($32 + [112]) = $25
	*($32 + [116]) = $26
	*($32 + [120]) = $3
	CALL $109(($32 + [24]), ($32 + [16]))
	$28 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($2 + [8]), (int_64)-2184396096019628032, *(*($0 + [8])), $28, $31, $27)
	if ( ($27 <= [513]) ){ goto $label$17 }
	CALL free($31)
	
.LABEL $label$17
	if ( (uint_64)($28 <= *($2 + [16])) ){ goto $label$18 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$28 + (int_64)1) : ((uint_64)$28 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	$3 = ($2 + [8])
	$28 = *($3)
	$31 = *(($0 + [8]))
	$29 = *($31)
	$30 = *($1)
	*($32 + [24]) = *(($1 + [32]))
	*($1 + [136]) = CALL db_idx64_store($28, (int_64)-2184396096019628032, $29, $30, ($32 + [24]))
	$28 = *($31)
	$29 = *($3)
	$30 = *($1)
	*($32 + [24]) = *(($1 + [88]))
	*(($1 + [140])) = CALL db_idx64_store($29, (int_64)-2184396096019628031, $28, $30, ($32 + [24]))
	*([0] + [4]) = ($32 + [128])
}

void .FUNC _ZN5eosio2bk28create_warrior_from_twarriorEyNS0_8twarriorE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($6 + [16]) = $1
	$1 = *($0)
	*($6) = $0
	*($6 + [8]) = $2
	*($6 + [4]) = ($6 + [16])
	*($6 + [56]) = $1
	CALL eosio_assert(((int_64)*($0 + [96]) == (int_64)CALL $fimport$15()), [1104])
	$3 = ($0 + [96])
	*($6 + [32]) = $3
	*($6 + [36]) = $6
	*($6 + [40]) = ($6 + [56])
	$2 = [0]
	*(($4 = CALL $273([144])) + [16]) = [0]
	*($4 + [8 align=4]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$1 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [640])
	*($4 + [124]) = [0]
	*($4 + [116 align=4]) = (int_64)0
	*($4 + [128]) = $3
	CALL $103(($6 + [32]), $4)
	*($6 + [48]) = $4
	$1 = *($4)
	*($6 + [32]) = $1
	$5 = *($4 + [132])
	*($6 + [28]) = $5
	$3 = ($0 + [124])
	$2 = *($3)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [128]))) ){ goto $label$7 }
	*($2 + [8]) = $1
	*($2 + [16]) = $5
	*($6 + [48]) = [0]
	*($2) = $4
	*($3) = ($2 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $104(($0 + [120]), ($6 + [48]), ($6 + [32]), ($6 + [28]))
	
.LABEL $label$6
	$2 = *($6 + [48])
	*($6 + [48]) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = *($2 + [116])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($2 + [120])) = $4
	CALL $274($4)
	
.LABEL $label$9
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $274(*(($2 + [16])))
	
.LABEL $label$10
	CALL $274($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $273([144])
	$6 = CALL $111($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [132])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $104(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [116])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [120])) = $7
	CALL $274($7)
	
.LABEL $label$10
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $274(*(($4 + [16])))
	
.LABEL $label$11
	CALL $274($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [116])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [120])) = $6
	CALL $274($6)
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL $274(*(($1 + [16])))
	
.LABEL $label$12
	CALL $274($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $274($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $273(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $285($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $274($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $106 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [132]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1296])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-2184396096019628032)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1232])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1232])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $105(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [464])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [464])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	*($5 + [15]) = *(*($0 + [64]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), ($5 + [15]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	*($5 + [14]) = *(*($0 + [76]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), ($5 + [14]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	*($5 + [13]) = *(*($0 + [84]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), ($5 + [13]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [464])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	CALL $110(*($1), *($0 + [96]))
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	*(($5 = *($1))) = (*($5) + [8])
	$5 = *($2)
	$2 = *($0 + [4])
	$4 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$3 = *($1)
	$5 = *($3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($3) = $5
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $5)
	
.LABEL $label$2
	*(($5 = *($1))) = (*($5) + [2])
	*(($5 = *($1))) = (*($5) + [2])
	*(($5 = *($1))) = (*($5) + [2])
	*(($5 = *($1))) = (*($5) + [8])
	*(($5 = *($1))) = (*($5) + [8])
	*(($5 = *($1))) = (*($5) + [2])
	*(($5 = *($1))) = (*($5) + [2])
	*(($5 = *($1))) = (*($5) + [2])
	*(($5 = *($1))) = (*($5) + [2])
	*(($5 = *($1))) = (*($5) + [2])
	*(($5 = *($1))) = (*($5) + [2])
	*(($5 = *($1))) = (*($5) + [2])
	*(($5 = *($1))) = (*($5) + [4])
	*(($5 = *($1))) = (*($5) + [4])
	*(($5 = *($1))) = (*($5) + [1])
	*(($5 = *($1))) = (*($5) + [1])
	*(($5 = *($1))) = (*($5) + [1])
	*(($5 = *($1))) = (*($5) + [1])
	*(($5 = *($1))) = (*($5) + [8])
	*(($5 = *($1))) = (*($5) + [1])
	*(($5 = *($1))) = (*($5) + [16])
	*(($5 = *($1))) = (*($5) + [4])
	$0 = *($5)
	$5 = *($0 + [96])
	$2 = *($5 + [4])
	$3 = ($2 - $0)
	$4 = (CASTING uint_64)(uint_32 int_32($3 >> [4]))
	$1 = *($1)
	$5 = *($1)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$5 = ((((int_32)uint_32(($3 + [-16]) >> [4]) * (int_32)[9]) + $5) + [9])
	
.LABEL $label$4
	*($1) = $5
}

int_32 .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $273([48])) + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [672])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $54(($8 + [32]), ($6 + [8]))
	CALL $178(($8 + [32]), ($6 + [20]))
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $198(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *(($4 + [20]))
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [24])) = $7
	CALL $274($7)
	
.LABEL $label$10
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [12])) = $7
	CALL $274($7)
	
.LABEL $label$11
	CALL $274($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $231 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1408])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [1456])
	$3 = *($0 + [24])
	$4 = ($0 + [28])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$5 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$8 = ($6 + [-24])
	$6 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1520])
	$8 = ($7 + [-24])
	$6 = *($4)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = ([0] - $6)
	$6 = $8
	
.LOOP $label$5:
	$8 = ($6 + [24])
	$5 = *($8)
	*($8) = [0]
	$7 = *($6)
	*($6) = $5
	if ( ($7 == 0) ){ goto $label$6 }
	$5 = *(($7 + [20]))
	if ( ($5 == 0) ){ goto $label$7 }
	*(($7 + [24])) = $5
	CALL $274($5)
	
.LABEL $label$7
	$5 = *($7 + [8])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($7 + [12])) = $5
	CALL $274($5)
	
.LABEL $label$8
	CALL $274($7)
	
.LABEL $label$6
	*(($6 + [16])) = *(($6 + [40]))
	*(($6 + [8])) = *(($6 + [32]))
	$6 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	$5 = *(($6 + [20]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($6 + [24])) = $5
	CALL $274($5)
	
.LABEL $label$11
	$5 = *($6 + [8])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($6 + [12])) = $5
	CALL $274($5)
	
.LABEL $label$12
	CALL $274($6)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $319 ()
{
	(unreachable)
}

int_32 .FUNC _ZN5eosio2bk26battle_has_player_warriorsERKNS0_6battleEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($0 + [96])
	$0 = *($1 + [56])
	if ( ((int_32)*($0 + [4]) == (int_32)*($0)) ){ goto $label$2 }
	$5 = [0]
	$4 = ($1 + [56])
	$6 = [0]
	
.LOOP $label$3:
	$7 = [1]
	if ( ((int_64)*(CALL $127($3, *((*($0) + $5)), [144]) + [32]) == (int_64)$2) ){ goto $label$1 }
	$5 = ($5 + [8])
	$0 = *($4)
	$6 = ($6 + [1])
	if ( ($6 <= int_32((*($0 + [4]) - *($0)) >> [3])) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = [0]
	if ( ((int_32)*(($0 + [16])) == (int_32)*($0 + [12])) ){ goto $label$1 }
	$5 = [0]
	$4 = ($1 + [56])
	$6 = [0]
	
.LOOP $label$4:
	$7 = [1]
	if ( ((int_64)*(CALL $127($3, *((*($0 + [12]) + $5)), [144]) + [32]) == (int_64)$2) ){ goto $label$1 }
	$5 = ($5 + [8])
	$0 = *($4)
	$6 = ($6 + [1])
	if ( ($6 <= int_32((*(($0 + [16])) - *($0 + [12])) >> [3])) ){ goto $label$4 }
	$7 = [0]
	
.LABEL $label$1
	return $7
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [56]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1296])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3645216042923327488)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1232])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1232])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $37(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($0 + [4]), $2, [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $274(*(($1 + [16])))
	
.LABEL $label$11
	CALL $274($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $274($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $273([64])
	$6 = CALL $40($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [56])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $36(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $274(*(($4 + [16])))
	
.LABEL $label$10
	CALL $274($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN5eosio2bk10addtpotionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEsssssNS_5assetEt (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	*($10 + [58]) = $2
	*($10 + [56]) = $3
	*($10 + [54]) = $4
	*($10 + [52]) = $5
	*($10 + [50]) = $6
	*($10 + [48]) = $8
	CALL require_auth(*($0))
	$9 = *($0)
	*($10 + [12]) = $1
	*($10 + [8]) = $0
	*($10 + [16]) = ($10 + [58])
	*($10 + [20]) = ($10 + [56])
	*($10 + [24]) = ($10 + [54])
	*($10 + [28]) = ($10 + [52])
	*($10 + [32]) = ($10 + [50])
	*($10 + [36]) = $7
	*($10 + [40]) = ($10 + [48])
	*($10 + [88]) = $9
	CALL eosio_assert(((int_64)*($0 + [416]) == (int_64)CALL $fimport$15()), [1104])
	$6 = ($0 + [416])
	*($10 + [64]) = $6
	*($10 + [68]) = ($10 + [8])
	*($10 + [72]) = ($10 + [88])
	$7 = [0]
	*(($1 = CALL $273([64])) + [16]) = [0]
	*($1 + [8 align=4]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$9 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [640])
	*($1 + [52]) = $6
	CALL $35(($10 + [64]), $1)
	*($10 + [80]) = $1
	$9 = *($1)
	*($10 + [64]) = $9
	$8 = *($1 + [56])
	*($10 + [60]) = $8
	$6 = ($0 + [444])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [448]))) ){ goto $label$7 }
	*($7 + [8]) = $9
	*($7 + [16]) = $8
	*($10 + [80]) = [0]
	*($7) = $1
	*($6) = ($7 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $36(($0 + [440]), ($10 + [80]), ($10 + [64]), ($10 + [60]))
	
.LABEL $label$6
	$7 = *($10 + [80])
	*($10 + [80]) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL $274(*(($7 + [16])))
	
.LABEL $label$9
	CALL $274($7)
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [96])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$14 = (*([0] + [4]) - [64])
	$15 = $14
	*([0] + [4]) = $14
	$2 = *($0)
	$12 = *($0 + [4])
	$3 = *($12)
	$10 = ($3 + [432])
	$13 = *($10)
	if ( ((int_64)$13 != (int_64)-1) ){ goto $label$1 }
	$13 = (int_64)0
	$9 = ($3 + [416])
	$8 = CALL db_lowerbound_i64(*($9), *(($3 + [424])), (int_64)-3645216042923327488, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $37($9, $8)
	*($15 + [28]) = [0]
	*($15 + [24]) = $9
	$13 = *(*(CALL $38(($15 + [24])) + [4]))
	$13 = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [432])) = $13
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($13 <= (int_64)-2), [1168])
	*($1) = *($10)
	$3 = ($1 + [8])
	CALL $276($3, *($12 + [4]))
	*($1 + [20]) = *(*($12 + [8]))
	*($1 + [22]) = *(*($12 + [12]))
	*($1 + [24]) = *(*($12 + [16]))
	*($1 + [26]) = *(*($12 + [20]))
	*($1 + [28]) = *(*($12 + [24]))
	$10 = *($12 + [28])
	*($1 + [32]) = *($10)
	*(($1 + [40])) = *(($10 + [8]))
	*($1 + [48]) = *(*($12 + [32]))
	$12 = *(*($12 + [32]))
	if ( ($12 == 0) ){ goto $label$3 }
	*($1 + [50]) = $12
	
.LABEL $label$3
	$10 = ($1 + [48])
	$9 = ($1 + [32])
	$8 = ($1 + [28])
	$7 = ($1 + [26])
	$6 = ($1 + [24])
	$5 = ($1 + [22])
	$4 = ($1 + [20])
	$12 = *($3)
	$11 = ( *(($1 + [12])) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$12 = ($11 + [38])
	$13 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$4:
	$12 = ($12 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$4 }
	if ( ($12 <= [513]) ){ goto $label$6 }
	$14 = CALL malloc($12)
	goto $label$5 
	
.LABEL $label$6
	$14 = ($14 - (($12 + [15]) & [-16]))
	*([0] + [4]) = $14
	
.LABEL $label$5
	*($15 + [4]) = $14
	*($15) = $14
	*($15 + [8]) = ($14 + $12)
	*($15 + [16]) = $15
	*($15 + [28]) = $3
	*($15 + [24]) = $1
	*($15 + [32]) = $4
	*($15 + [36]) = $5
	*($15 + [40]) = $6
	*($15 + [44]) = $7
	*($15 + [48]) = $8
	*($15 + [52]) = $9
	*($15 + [56]) = $10
	*($15 + [60]) = ($1 + [50])
	CALL $39(($15 + [24]), ($15 + [16]))
	$13 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($2 + [8]), (int_64)-3645216042923327488, *(*($0 + [8])), $13, $14, $12)
	if ( ($12 <= [513]) ){ goto $label$7 }
	CALL free($14)
	
.LABEL $label$7
	if ( (uint_64)($13 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($15 + [64])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [40]) = (int_64)0
	$4 = [0]
	*(($0 + [16])) = [0]
	*(($5 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [576])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [640])
	*($0 + [56]) = $1
	*($6 + [8]) = *($2 + [4])
	*($6 + [20]) = ($0 + [8])
	*($6 + [16]) = $0
	*($6 + [24]) = ($0 + [20])
	*($6 + [28]) = ($0 + [22])
	*($6 + [32]) = ($0 + [24])
	*($6 + [36]) = ($0 + [26])
	*($6 + [40]) = ($0 + [28])
	*($6 + [44]) = ($0 + [30])
	*($6 + [48]) = ($0 + [32])
	*($6 + [52]) = ($0 + [34])
	*($6 + [56]) = ($0 + [36])
	*($6 + [60]) = ($0 + [40])
	CALL $33(($6 + [16]), ($6 + [8]))
	*($0 + [60]) = *(*($2 + [8]))
	*([0] + [4]) = ($6 + [64])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $15(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [672])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[1]), [672])
	CALL memcpy($3, *($2 + [4]), [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [672])
	CALL memcpy($2, *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [672])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*(($2 = *($1))) = (*($2) + [8])
	$0 = *($2)
	$2 = *($0 + [4])
	$4 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $0)
	
.LABEL $label$2
	*(($0 = *($1))) = (*($0) + [1])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [2])
	*(($0 = *($1))) = (*($0) + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $23(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [464])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[1]), [464])
	CALL memcpy(*($2 + [4]), $3, [2])
	*($2 + [4]) = (*($2 + [4]) + [2])
	$2 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), $2, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [464])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $215 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	*(($2 = CALL memcpy($0, $1, [56])) + [56 align=4]) = (int_64)0
	*(($2 + [64])) = [0]
	$0 = (*(($1 + [60])) - *($1 + [56]))
	$9 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$5 }
	if ( ((uint_32)$9 >= (uint_32)[357913942]) ){ goto $label$3 }
	$0 = CALL $273($0)
	*(($6 = ($2 + [60]))) = $0
	*(($2 + [64])) = ($0 + ((int_32)$9 * (int_32)[12]))
	*(($2 + [56])) = $0
	$3 = *(($1 + [60]))
	$9 = *(($1 + [56]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$7 = ($9 + [4])
	$5 = (*($7) - *($9))
	$4 = int_32($5 >> [3])
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$4 }
	$5 = CALL $273($5)
	*(($8 = ($0 + [4]))) = $5
	*(($0 + [8])) = ($5 + ($4 << [3]))
	*($0) = $5
	$4 = *($9)
	$0 = (*($7) - $4)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($5, $4, $0)
	*($8) = (*($8) + $0)
	
.LABEL $label$7
	$0 = (*($6) + [12])
	*($6) = $0
	$9 = ($9 + [12])
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$6 }
	
.LABEL $label$5
	*($2 + [68 align=4]) = (int_64)0
	*(($2 + [76])) = [0]
	$0 = (*(($1 + [72])) - *($1 + [68]))
	$4 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$9 = CALL $273($0)
	*(($5 = ($2 + [72]))) = $9
	*(($2 + [76])) = ($9 + ((int_32)$4 * (int_32)[24]))
	*(($2 + [68])) = $9
	$4 = *(($1 + [72]))
	$0 = *(($1 + [68]))
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL $216($9, $0)
	$9 = (*($5) + [24])
	*($5) = $9
	$0 = ($0 + [24])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$9 }
	
.LABEL $label$8
	*($2 + [80 align=4]) = (int_64)0
	*(($2 + [88])) = [0]
	$0 = (*(($1 + [84])) - *($1 + [80]))
	$9 = int_32($0 >> [3])
	if ( ($9 == 0) ){ goto $label$10 }
	if ( ((uint_32)$9 >= (uint_32)[536870912]) ){ goto $label$1 }
	$0 = CALL $273($0)
	*(($2 + [80])) = $0
	*(($2 + [88])) = ($0 + ($9 << [3]))
	*(($9 = ($2 + [84]))) = $0
	$4 = *(($1 + [80]))
	$5 = (*(($1 + [84])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($0, $4, $5)
	*($9) = (*($9) + $5)
	
.LABEL $label$10
	return $2
	
.LABEL $label$4
	CALL $285($0)
	
.LABEL $label$3
	CALL $285(($2 + [56]))
	
.LABEL $label$2
	CALL $285(($2 + [68]))
	
.LABEL $label$1
	CALL $285(($2 + [80]))
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_64 .FUNC _ZN5eosio2bk18get_free_battle_idERKNS0_7warriorENS_5assetEh (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL _ZNSt3__19to_stringEx(($7 + [64]), *($2))
	CALL $280(($7 + [64]), [95])
	$5 = (($7 + [64]) + [8])
	*((($7 + [32]) + [8])) = *($5)
	*($5) = [0]
	*($7 + [32]) = *($7 + [64])
	*($7 + [68]) = [0]
	*($7 + [64]) = [0]
	CALL _ZNSt3__19to_stringEi(($7 + [48]), $3)
	$5 = *($7 + [48])
	$4 = ($5 & [1])
	$5 = CALL $279(($7 + [32]), ( *($7 + [56]) ? (($7 + [48]) | [1]) : $4 ), ( *($7 + [52]) ? uint_32($5 >> [1]) : $4 ))
	$4 = ($5 + [8])
	*((($7 + [80]) + [8])) = *($4)
	*($7 + [80]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$1 }
	CALL $274(*((($7 + [48]) + [8])))
	
.LABEL $label$1
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $274(*($7 + [40]))
	
.LABEL $label$2
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$3 }
	CALL $274(*(($7 + [72])))
	
.LABEL $label$3
	*($7 + [64]) = (int_64)-1
	$5 = ($0 + [336])
	$4 = CALL $184($5, (int_64)0, [144])
	*($7 + [36]) = $0
	*($7 + [40]) = $1
	*($7 + [32]) = ($7 + [80])
	*($7 + [44]) = ($7 + [64])
	CALL $217($5, $4, ($7 + [32]))
	$6 = *($7 + [64])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$4 }
	*(($5 = (($7 + [16]) + [12]))) = *(($2 + [12]))
	*(($4 = (($7 + [16]) + [8]))) = *(($2 + [8]))
	*($7 + [16]) = *($2)
	*($7 + [20]) = *(($2 + [4]))
	$6 = *($1 + [32])
	*(($7 + [12])) = *($5)
	*(($7 + [8])) = *($4)
	*($7 + [4]) = *($7 + [20])
	*($7) = *($7 + [16])
	$6 = CALL _ZN5eosio2bk7bcreateEyNS_5assetEh($0, $6, $7, $3)
	*($7 + [64]) = $6
	
.LABEL $label$4
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$5 }
	CALL $274(*($7 + [88]))
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [96])
	return $6
}

void .FUNC $217 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [208])
	$22 = $23
	*([0] + [4]) = $23
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = *($1)
	$21 = *($2 + [4])
	$4 = ($1 + [8])
	$9 = CALL $187($4, *($2))
	if ( ((int_32)*($9 + [4]) == (int_32)*($9)) ){ goto $label$1 }
	$6 = ($21 + [96])
	$5 = ($21 + [256])
	$10 = (($22 + [104]) + [56])
	$11 = ($2 + [8])
	$12 = (($22 + [8]) + [80])
	$14 = (($22 + [8]) + [68])
	$16 = (($22 + [8]) + [60])
	$15 = (($22 + [8]) + [72])
	$13 = (($22 + [8]) + [84])
	$18 = [0]
	
.LOOP $label$3:
	$8 = CALL $215(($22 + [104]), CALL $183($5, *((*(CALL $187($4, *($2))) + ($18 << [3]))), [144]))
	$7 = *(*($11) + [32])
	$21 = *($10)
	if ( ((int_32)*($21 + [4]) == (int_32)*($21)) ){ goto $label$5 }
	$9 = [0]
	$19 = [0]
	
.LOOP $label$6:
	if ( ((int_64)*(CALL $127($6, *((*($21) + $9)), [144]) + [32]) == (int_64)$7) ){ goto $label$4 }
	$9 = ($9 + [8])
	$21 = *($10)
	$19 = ($19 + [1])
	if ( ($19 <= int_32((*($21 + [4]) - *($21)) >> [3])) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)*(($21 + [16])) == (int_32)*($21 + [12])) ){ goto $label$7 }
	$9 = [0]
	$19 = [0]
	
.LOOP $label$8:
	if ( ((int_64)*(CALL $127($6, *((*($21 + [12]) + $9)), [144]) + [32]) == (int_64)$7) ){ goto $label$4 }
	$9 = ($9 + [8])
	$21 = *($10)
	$19 = ($19 + [1])
	if ( ($19 <= int_32((*(($21 + [16])) - *($21 + [12])) >> [3])) ){ goto $label$8 }
	
.LABEL $label$7
	$21 = *(*($11) + [20])
	CALL $215(($22 + [8]), $8)
	$20 = [1]
	$9 = *($9)
	$17 = (($22 + [8]) + [56])
	$9 = *($17)
	if ( ((int_32)*($9 + [4]) == (int_32)$9) ){ goto $label$9 }
	$9 = *(CALL $127($6, *($9), [144]) + [20])
	if ( ((int_32)$9 == (int_32)$21) ){ goto $label$9 }
	if ( ((int_32)($9 + [-1]) == (int_32)$21) ){ goto $label$9 }
	$20 = ((int_32)($9 + [1]) == (int_32)$21)
	
.LABEL $label$9
	$21 = *($12)
	if ( ($21 == 0) ){ goto $label$10 }
	*($13) = $21
	CALL $274($21)
	
.LABEL $label$10
	$8 = *($14)
	if ( ($8 == 0) ){ goto $label$11 }
	$21 = *($15)
	if ( ((int_32)$21 == (int_32)$8) ){ goto $label$13 }
	$19 = ([0] - $8)
	$21 = ($21 + [-24])
	
.LOOP $label$14:
	$9 = *(($21 + [12]))
	if ( ($9 == 0) ){ goto $label$15 }
	*(($21 + [16])) = $9
	CALL $274($9)
	
.LABEL $label$15
	$9 = *($21)
	if ( ($9 == 0) ){ goto $label$16 }
	*(($21 + [4])) = $9
	CALL $274($9)
	
.LABEL $label$16
	$21 = ($21 + [-24])
	if ( ((int_32)($21 + $19) != (int_32)[-24]) ){ goto $label$14 }
	$21 = *($14)
	goto $label$12 
	
.LABEL $label$13
	$21 = $8
	
.LABEL $label$12
	*($15) = $8
	CALL $274($21)
	
.LABEL $label$11
	$8 = *($17)
	if ( ($8 == 0) ){ goto $label$17 }
	$21 = *($16)
	if ( ((int_32)$21 == (int_32)$8) ){ goto $label$19 }
	$19 = ([0] - $8)
	$21 = ($21 + [-12])
	
.LOOP $label$20:
	$9 = *($21)
	if ( ($9 == 0) ){ goto $label$21 }
	*(($21 + [4])) = $9
	CALL $274($9)
	
.LABEL $label$21
	$21 = ($21 + [-12])
	if ( ((int_32)($21 + $19) != (int_32)[-12]) ){ goto $label$20 }
	$21 = *($17)
	goto $label$18 
	
.LABEL $label$19
	$21 = $8
	
.LABEL $label$18
	*($16) = $8
	CALL $274($21)
	
.LABEL $label$17
	if ( $20 ){ goto $label$2 }
	
.LABEL $label$4
	$21 = *((($22 + [104]) + [80]))
	if ( ($21 == 0) ){ goto $label$22 }
	*((($22 + [104]) + [84])) = $21
	CALL $274($21)
	
.LABEL $label$22
	$17 = (($22 + [104]) + [68])
	$8 = *($17)
	if ( ($8 == 0) ){ goto $label$23 }
	$20 = (($22 + [104]) + [72])
	$21 = *($20)
	if ( ((int_32)$21 == (int_32)$8) ){ goto $label$25 }
	$19 = ([0] - $8)
	$21 = ($21 + [-24])
	
.LOOP $label$26:
	$9 = *(($21 + [12]))
	if ( ($9 == 0) ){ goto $label$27 }
	*(($21 + [16])) = $9
	CALL $274($9)
	
.LABEL $label$27
	$9 = *($21)
	if ( ($9 == 0) ){ goto $label$28 }
	*(($21 + [4])) = $9
	CALL $274($9)
	
.LABEL $label$28
	$21 = ($21 + [-24])
	if ( ((int_32)($21 + $19) != (int_32)[-24]) ){ goto $label$26 }
	$21 = *($17)
	goto $label$24 
	
.LABEL $label$25
	$21 = $8
	
.LABEL $label$24
	*($20) = $8
	CALL $274($21)
	
.LABEL $label$23
	$8 = *($10)
	if ( ($8 == 0) ){ goto $label$29 }
	$17 = (($22 + [104]) + [60])
	$21 = *($17)
	if ( ((int_32)$21 == (int_32)$8) ){ goto $label$31 }
	$19 = ([0] - $8)
	$21 = ($21 + [-12])
	
.LOOP $label$32:
	$9 = *($21)
	if ( ($9 == 0) ){ goto $label$33 }
	*(($21 + [4])) = $9
	CALL $274($9)
	
.LABEL $label$33
	$21 = ($21 + [-12])
	if ( ((int_32)($21 + $19) != (int_32)[-12]) ){ goto $label$32 }
	$21 = *($10)
	goto $label$30 
	
.LABEL $label$31
	$21 = $8
	
.LABEL $label$30
	*($17) = $8
	CALL $274($21)
	
.LABEL $label$29
	$21 = CALL $187($4, *($2))
	$18 = ($18 + [1])
	if ( ($18 <= int_32((*($21 + [4]) - *($21)) >> [3])) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$21 = CALL $187($4, *($2))
	*(*($2 + [12])) = *((*($21) + ($18 << [3])))
	$21 = *(($22 + [184]))
	if ( ($21 == 0) ){ goto $label$34 }
	*(($22 + [188])) = $21
	CALL $274($21)
	
.LABEL $label$34
	$10 = *(($22 + [172]))
	if ( ($10 == 0) ){ goto $label$35 }
	$6 = ($22 + [176])
	$21 = *($6)
	if ( ((int_32)$21 == (int_32)$10) ){ goto $label$37 }
	$19 = ([0] - $10)
	$21 = ($21 + [-24])
	
.LOOP $label$38:
	$9 = *(($21 + [12]))
	if ( ($9 == 0) ){ goto $label$39 }
	*(($21 + [16])) = $9
	CALL $274($9)
	
.LABEL $label$39
	$9 = *($21)
	if ( ($9 == 0) ){ goto $label$40 }
	*(($21 + [4])) = $9
	CALL $274($9)
	
.LABEL $label$40
	$21 = ($21 + [-24])
	if ( ((int_32)($21 + $19) != (int_32)[-24]) ){ goto $label$38 }
	$21 = *(($22 + [172]))
	goto $label$36 
	
.LABEL $label$37
	$21 = $10
	
.LABEL $label$36
	*($6) = $10
	CALL $274($21)
	
.LABEL $label$35
	$10 = *(($22 + [160]))
	if ( ($10 == 0) ){ goto $label$1 }
	$6 = ($22 + [164])
	$21 = *($6)
	if ( ((int_32)$21 == (int_32)$10) ){ goto $label$42 }
	$19 = ([0] - $10)
	$21 = ($21 + [-12])
	
.LOOP $label$43:
	$9 = *($21)
	if ( ($9 == 0) ){ goto $label$44 }
	*(($21 + [4])) = $9
	CALL $274($9)
	
.LABEL $label$44
	$21 = ($21 + [-12])
	if ( ((int_32)($21 + $19) != (int_32)[-12]) ){ goto $label$43 }
	$21 = *(($22 + [160]))
	goto $label$41 
	
.LABEL $label$42
	$21 = $10
	
.LABEL $label$41
	*($6) = $10
	CALL $274($21)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [400])
	*($22 + [200]) = [0]
	*($22 + [8]) = ($22 + [200])
	*($22 + [108]) = $4
	*($22 + [104]) = $1
	CALL $50(($22 + [104]), ($22 + [8]))
	$9 = *($22 + [200])
	if ( ($9 <= [513]) ){ goto $label$46 }
	$21 = CALL malloc($9)
	goto $label$45 
	
.LABEL $label$46
	$21 = ($23 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $21
	
.LABEL $label$45
	*($22 + [104]) = $21
	*($22 + [112]) = ($21 + $9)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [464])
	CALL memcpy($21, $1, [8])
	*($22 + [108]) = ($21 + [8])
	CALL $51(($22 + [104]), $4)
	CALL db_update_i64(*($1 + [24]), (int_64)0, $21, $9)
	if ( ($9 <= [513]) ){ goto $label$47 }
	CALL free($21)
	
.LABEL $label$47
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$48 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$48
	*([0] + [4]) = ($22 + [208])
}

int_32 .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$4 = (*($1 + [4]) - *($1))
	$2 = int_32($4 >> [3])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$2 }
	$4 = CALL $273($4)
	*(($5 = ($0 + [4]))) = $4
	*(($0 + [8])) = ($4 + ($2 << [3]))
	*($0) = $4
	$3 = *($1)
	$2 = (*(($1 + [4])) - $3)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($4, $3, $2)
	*($5) = (*($5) + $2)
	
.LABEL $label$3
	*($0 + [12 align=4]) = (int_64)0
	*(($0 + [20])) = [0]
	$4 = (*(($1 + [16])) - *($1 + [12]))
	$2 = ((int_32)$4 / (int_32)[24])
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $273($4)
	*(($0 + [12])) = $4
	*(($0 + [20])) = ($4 + ((int_32)$2 * (int_32)[24]))
	*(($2 = ($0 + [16]))) = $4
	$5 = *(($1 + [12]))
	$1 = (*(($1 + [16])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $5, $1)
	*($2) = (*($2) + ((int_32)((uint_32)$1 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	CALL $285(($0 + [12]))
	(unreachable)
	return (unreachable)
}

void .FUNC $211 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $273(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $274($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $210 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$16 = (*([0] + [4]) - [80])
	$17 = $16
	*([0] + [4]) = $16
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$4 = *($2)
	$3 = *($1)
	$15 = ($1 + [84])
	$2 = *($15)
	if ( ((int_32)$2 == (int_32)*(($1 + [88]))) ){ goto $label$2 }
	*($15) = ($2 + [8])
	*($2) = *($4)
	$15 = ($1 + [80])
	goto $label$1 
	
.LABEL $label$2
	$15 = ($1 + [80])
	CALL $64($15, $4)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [400])
	*($17 + [16]) = [0]
	*($17) = ($17 + [16])
	$4 = ($1 + [8])
	*($17 + [28]) = $4
	*($17 + [24]) = $1
	$5 = ($1 + [9])
	*($17 + [32]) = $5
	$6 = ($1 + [16])
	*($17 + [36]) = $6
	$7 = ($1 + [24])
	*($17 + [40]) = $7
	$8 = ($1 + [40])
	*($17 + [44]) = $8
	$9 = ($1 + [41])
	*($17 + [48]) = $9
	$10 = ($1 + [44])
	*($17 + [52]) = $10
	$11 = ($1 + [48])
	*($17 + [56]) = $11
	$12 = ($1 + [52])
	*($17 + [60]) = $12
	$13 = ($1 + [56])
	*($17 + [64]) = $13
	$14 = ($1 + [68])
	*($17 + [68]) = $14
	*($17 + [72]) = $15
	CALL $168(($17 + [24]), $17)
	$2 = *($17 + [16])
	if ( ($2 <= [513]) ){ goto $label$4 }
	$16 = CALL malloc($2)
	goto $label$3 
	
.LABEL $label$4
	$16 = ($16 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $16
	
.LABEL $label$3
	*($17 + [4]) = $16
	*($17) = $16
	*($17 + [8]) = ($16 + $2)
	*($17 + [16]) = $17
	*($17 + [28]) = $4
	*($17 + [32]) = $5
	*($17 + [36]) = $6
	*($17 + [40]) = $7
	*($17 + [44]) = $8
	*($17 + [48]) = $9
	*($17 + [24]) = $1
	*($17 + [52]) = $10
	*($17 + [56]) = $11
	*($17 + [60]) = $12
	*($17 + [64]) = $13
	*($17 + [68]) = $14
	*($17 + [72]) = $15
	CALL $169(($17 + [24]), ($17 + [16]))
	CALL db_update_i64(*($1 + [96]), (int_64)0, $16, $2)
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL free($16)
	
.LABEL $label$5
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($17 + [80])
}

void .FUNC $198 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $273(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $285($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *(($1 + [20]))
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [24])) = $6
	CALL $274($6)
	
.LABEL $label$11
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($1 + [12])) = $6
	CALL $274($6)
	
.LABEL $label$12
	CALL $274($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $274($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC _ZN5eosio2bk20apply_round_check_txEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	$7 = CALL current_time()
	*(($10 + [60])) = [0]
	*(($10 + [64])) = [0]
	*($10 + [44]) = [0]
	*($10 + [48]) = [0]
	*($10 + [52]) = [0]
	*($10 + [56]) = [0]
	*($10 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($10 + [68]) = [0]
	*(($10 + [72])) = [0]
	*(($10 + [76])) = [0]
	*($10 + [80]) = [0]
	*(($10 + [84])) = [0]
	*(($10 + [88])) = [0]
	$3 = ($10 + [68])
	$2 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [896]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($10 + [24]) = $8
	*($10 + [16]) = $2
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [3488]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$12 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	*($10 + [96]) = $8
	*($10 + [8]) = $1
	CALL $200($3, ($10 + [16]), $0, ($10 + [96]), ($10 + [8]))
	$4 = ($0 + [16])
	$5 = *(($0 + [44]))
	if ( ((int_32)$5 == (int_32)*(($0 + [40]))) ){ goto $label$14 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [480])
	goto $label$13 
	
.LABEL $label$14
	$5 = [0]
	$3 = CALL db_find_i64(*($4), *(($0 + [24])), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $82($4, $3)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [480])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1664])
	*(($10 + [52])) = *($5 + [8])
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = $1
	$7 = *($0)
	CALL $201(($10 + [96]), ($10 + [32]))
	$5 = *($10 + [96])
	CALL send_deferred(($10 + [16]), $7, $5, (*($10 + [100]) - $5), [0])
	$5 = *($10 + [96])
	if ( ($5 == 0) ){ goto $label$15 }
	*($10 + [100]) = $5
	CALL $274($5)
	
.LABEL $label$15
	CALL $202(($10 + [32]))
	*([0] + [4]) = ($10 + [112])
}

void .FUNC $196 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [128])
	$18 = $19
	*([0] + [4]) = $19
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = *($1)
	$5 = *($2 + [4])
	$4 = *($2 + [12])
	$16 = (*($1 + [56]) + ((int_32)*(*($2)) * (int_32)[12]))
	$6 = *($16 + [4])
	if ( ((int_32)$6 == (int_32)*($16 + [8])) ){ goto $label$2 }
	*(($16 + [4])) = ($6 + [8])
	*($6) = *($5)
	goto $label$1 
	
.LABEL $label$2
	CALL $64($16, $5)
	
.LABEL $label$1
	$6 = *($2 + [8])
	$16 = *($6 + [56])
	$5 = int_32((*($16 + [4]) - *($16)) >> [3])
	if ( ((int_32)$5 != (int_32)*($6 + [8])) ){ goto $label$3 }
	if ( ((int_32)int_32((*(($16 + [16])) - *($16 + [12])) >> [3]) != (int_32)$5) ){ goto $label$3 }
	CALL _ZNSt3__19to_stringEx(($18 + [80]), *($6 + [24]))
	CALL $280(($18 + [80]), [95])
	$16 = (($18 + [80]) + [8])
	*((($18 + [8]) + [8])) = *($16)
	*($16) = [0]
	*($18 + [8]) = *($18 + [80])
	*($18 + [84]) = [0]
	*($18 + [80]) = [0]
	CALL _ZNSt3__19to_stringEi(($18 + [64]), *(*(($2 + [8])) + [8]))
	$16 = *($18 + [64])
	$6 = ($16 & [1])
	$16 = CALL $279(($18 + [8]), ( *($18 + [72]) ? (($18 + [64]) | [1]) : $6 ), ( *($18 + [68]) ? uint_32($16 >> [1]) : $6 ))
	$6 = ($16 + [8])
	*((($18 + [96]) + [8])) = *($6)
	*($18 + [96]) = *($16)
	*($16) = [0]
	*(($16 + [4])) = [0]
	*($6) = [0]
	*($18 + [120]) = *(*($2 + [16]))
	$16 = ($4 + [336])
	$6 = CALL $184($16, (int_64)0, [144])
	*($18 + [116]) = ($18 + [120])
	*($18 + [112]) = ($18 + [96])
	CALL $185($16, $6, ($18 + [112]))
	if ( ((*($18 + [96]) & [1]) == 0) ){ goto $label$4 }
	CALL $274(*($18 + [104]))
	
.LABEL $label$4
	if ( ((*($18 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $274(*(($18 + [72])))
	
.LABEL $label$5
	if ( ((*($18 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $274(*($18 + [16]))
	
.LABEL $label$6
	if ( ((*($18 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL $274(*(($18 + [88])))
	
.LABEL $label$7
	*($1 + [44]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$17 = *($4)
	*($18 + [112]) = *(($2 + [16]))
	*($18 + [80]) = $17
	CALL eosio_assert(((int_64)*($4 + [296]) == (int_64)CALL $fimport$15()), [1104])
	$6 = ($4 + [296])
	*($18 + [8]) = $6
	*($18 + [12]) = ($18 + [112])
	*($18 + [16]) = ($18 + [80])
	*(($16 = CALL $273([48])) + [8 align=4]) = (int_64)0
	*($16 + [16 align=4]) = (int_64)0
	*($16 + [24 align=4]) = (int_64)0
	*($16 + [32]) = $6
	CALL $197(($18 + [8]), $16)
	*($18 + [64]) = $16
	$17 = *($16)
	*($18 + [8]) = $17
	$5 = *($16 + [36])
	*($18 + [120]) = $5
	$7 = ($4 + [324])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($4 + [328]))) ){ goto $label$9 }
	*($6 + [8]) = $17
	*($6 + [16]) = $5
	*($18 + [64]) = [0]
	*($6) = $16
	*($7) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $198(($4 + [320]), ($18 + [64]), ($18 + [8]), ($18 + [120]))
	
.LABEL $label$8
	$16 = *($18 + [64])
	*($18 + [64]) = [0]
	if ( ($16 == 0) ){ goto $label$10 }
	$6 = *(($16 + [20]))
	if ( ($6 == 0) ){ goto $label$11 }
	*(($16 + [24])) = $6
	CALL $274($6)
	
.LABEL $label$11
	$6 = *($16 + [8])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($16 + [12])) = $6
	CALL $274($6)
	
.LABEL $label$12
	CALL $274($16)
	
.LABEL $label$10
	CALL _ZN5eosio2bk20apply_round_check_txEy($4, *(*(($2 + [16]))))
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [400])
	*($18 + [80]) = [0]
	*($18 + [96]) = ($18 + [80])
	$4 = ($1 + [8])
	*($18 + [12]) = $4
	*($18 + [8]) = $1
	$6 = ($1 + [9])
	*($18 + [16]) = $6
	$5 = ($1 + [16])
	*($18 + [20]) = $5
	$7 = ($1 + [24])
	*($18 + [24]) = $7
	$8 = ($1 + [40])
	*($18 + [28]) = $8
	$9 = ($1 + [41])
	*($18 + [32]) = $9
	$10 = ($1 + [44])
	*($18 + [36]) = $10
	$11 = ($1 + [48])
	*($18 + [40]) = $11
	$12 = ($1 + [52])
	*($18 + [44]) = $12
	$13 = ($1 + [56])
	*($18 + [48]) = $13
	$14 = ($1 + [68])
	*($18 + [52]) = $14
	$15 = ($1 + [80])
	*($18 + [56]) = $15
	CALL $168(($18 + [8]), ($18 + [96]))
	$16 = *($18 + [80])
	if ( ($16 <= [513]) ){ goto $label$14 }
	$2 = CALL malloc($16)
	goto $label$13 
	
.LABEL $label$14
	$2 = ($19 - (($16 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$13
	*($18 + [100]) = $2
	*($18 + [96]) = $2
	*($18 + [104]) = ($2 + $16)
	*($18 + [80]) = ($18 + [96])
	*($18 + [12]) = $4
	*($18 + [16]) = $6
	*($18 + [20]) = $5
	*($18 + [24]) = $7
	*($18 + [28]) = $8
	*($18 + [32]) = $9
	*($18 + [8]) = $1
	*($18 + [36]) = $10
	*($18 + [40]) = $11
	*($18 + [44]) = $12
	*($18 + [48]) = $13
	*($18 + [52]) = $14
	*($18 + [56]) = $15
	CALL $169(($18 + [8]), ($18 + [80]))
	CALL db_update_i64(*($1 + [96]), (int_64)0, $2, $16)
	if ( ($16 <= [513]) ){ goto $label$15 }
	CALL free($2)
	
.LABEL $label$15
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$16 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*([0] + [4]) = ($18 + [128])
}

void .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	*($1) = *(*(*($0 + [4])))
	$4 = *($1 + [8])
	$3 = *(($1 + [12]))
	$6 = ($3 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	$2 = *($0)
	$8 = [8]
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$5 = ($1 + [20])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$8 = (($6 & [-8]) + $8)
	
.LABEL $label$2
	$4 = *($5)
	$3 = *(($1 + [24]))
	$6 = ($3 - $4)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$4 }
	$8 = ((((int_32)((uint_32)($6 + [-24]) / (uint_32)[24]) * (int_32)[22]) + $8) + [22])
	
.LABEL $label$4
	if ( ($8 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($8)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($9 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10) = $9
	*($10 + [8]) = ($9 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [464])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $52($10, ($1 + [8]))
	CALL $171($10, $5)
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)4347580331843387392, *(*($0 + [8])), $7, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN5eosio2bk5bjoinEyyh (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [112])
	*([0] + [4]) = $10
	*($10 + [24]) = $1
	*($10 + [16]) = $2
	*($10 + [15]) = $3
	$4 = ($0 + [96])
	$5 = CALL $127($4, $2, [144])
	CALL require_auth(*($5 + [32]))
	$6 = ($0 + [256])
	$7 = CALL $183($6, $1, [144])
	CALL eosio_assert((*($7 + [44]) == 0), [3424])
	$8 = ($0 + [56])
	$9 = CALL $8($8, *($5 + [32]), [704])
	CALL eosio_assert(((int_64)*($9 + [8]) >= (int_64)*($7 + [24])), [736])
	CALL eosio_assert(((int_32)($3 | [1]) == (int_32)[1]), [3456])
	$3 = (*($7 + [56]) + ((int_32)$3 * (int_32)[12]))
	CALL eosio_assert(((int_32)int_32((*($3 + [4]) - *($3)) >> [3]) != (int_32)*($7 + [8])), [3472])
	if ( ((int_64)*($7 + [24]) < (int_64)1) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)$8), [176])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$15()), [224])
	$2 = *($9)
	CALL eosio_assert(((int_64)*(($7 + [32])) == (int_64)*(($9 + [16]))), [768])
	$1 = (int_64)
	*(($3 = ($9 + [8]))) = $1(*($3) - *(($7 + [24]))))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [816])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [848])
	CALL eosio_assert(((int_64)$2 == (int_64)*($9)), [400])
	*($10 + [80]) = (($10 + [32]) + [40])
	*($10 + [76]) = ($10 + [32])
	*($10 + [72]) = ($10 + [32])
	*($10 + [88]) = ($10 + [72])
	*($10 + [100]) = $3
	*($10 + [96]) = $9
	*($10 + [104]) = ($9 + [24])
	*($10 + [108]) = ($9 + [32])
	CALL $9(($10 + [96]), ($10 + [88]))
	CALL db_update_i64(*($9 + [44]), (int_64)0, ($10 + [32]), [40])
	$9 = ($0 + [72])
	if ( (uint_64)($2 <= *($9)) ){ goto $label$1 }
	*($9) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($10 + [36]) = ($10 + [15])
	*($10 + [32]) = ($10 + [24])
	CALL $195($4, $5, ($10 + [32]))
	*($10 + [40]) = $7
	*($10 + [44]) = $0
	*($10 + [36]) = ($10 + [16])
	*($10 + [32]) = ($10 + [15])
	*($10 + [48]) = ($10 + [24])
	CALL $196($6, $7, ($10 + [32]))
	*([0] + [4]) = ($10 + [112])
}

void .FUNC $195 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_32 $29
	int_32 $30
	int_32 $31
	$31 = (*([0] + [4]) - [144])
	*([0] + [4]) = $31
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$3 = ($1 + [32])
	*(($30 = $31) + [16]) = *($3)
	$4 = ($1 + [88])
	*($30 + [24]) = *($4)
	$5 = *($1)
	$27 = *($1 + [50])
	$28 = CALL current_time()
	*($1 + [72]) = [1]
	$27 = ($27 + ((uint_32)((int_32)((uint_32)((int_32)((CASTING uint_32)(uint_64 ((uint_64)$28 / (uint_64)(int_64)1000000)) - *($1 + [112])) * (int_32)[1000]) / (uint_32)[60]) * (int_32)*($1 + [56])) / (uint_32)[1000]))
	$29 = *($1 + [48])
	*($1 + [50]) = ( $29 ? $27 : ((uint_32)$27 > (uint_32)$29) )
	*($1 + [73]) = *(*($2))
	*($1 + [74]) = *(*($2 + [4]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [400])
	*($30 + [32]) = [0]
	*($30) = ($30 + [32])
	$29 = ($1 + [8])
	*($30 + [44]) = $29
	*($30 + [40]) = $1
	$13 = ($1 + [20])
	*($30 + [48]) = $13
	$14 = ($1 + [22])
	*($30 + [52]) = $14
	$15 = ($1 + [24])
	*($30 + [56]) = $15
	*($30 + [60]) = $3
	$16 = ($1 + [40])
	*($30 + [64]) = $16
	$9 = ($1 + [48])
	*($30 + [68]) = $9
	$6 = ($1 + [50])
	*($30 + [72]) = $6
	$17 = ($1 + [52])
	*($30 + [76]) = $17
	$18 = ($1 + [54])
	*($30 + [80]) = $18
	$8 = ($1 + [56])
	*($30 + [84]) = $8
	$19 = ($1 + [58])
	*($30 + [88]) = $19
	$20 = ($1 + [60])
	*($30 + [92]) = $20
	$21 = ($1 + [64])
	*($30 + [96]) = $21
	$22 = ($1 + [68])
	*($30 + [100]) = $22
	$10 = ($1 + [72])
	*($30 + [104]) = $10
	$11 = ($1 + [73])
	*($30 + [108]) = $11
	$12 = ($1 + [74])
	*($30 + [112]) = $12
	$23 = ($1 + [75])
	*($30 + [116]) = $23
	$24 = ($1 + [80])
	*($30 + [120]) = $24
	*($30 + [124]) = $4
	$25 = ($1 + [96])
	*($30 + [128]) = $25
	$7 = ($1 + [112])
	*($30 + [132]) = $7
	$26 = ($1 + [116])
	*($30 + [136]) = $26
	CALL $108(($30 + [40]), $30)
	$27 = *($30 + [32])
	if ( ($27 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($27)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($31 - (($27 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	*($30 + [4]) = $2
	*($30) = $2
	*($30 + [8]) = ($2 + $27)
	*($30 + [32]) = $30
	*($30 + [44]) = $29
	*($30 + [48]) = $13
	*($30 + [52]) = $14
	*($30 + [56]) = $15
	*($30 + [60]) = $3
	*($30 + [64]) = $16
	*($30 + [40]) = $1
	*($30 + [68]) = $9
	*($30 + [72]) = $6
	*($30 + [76]) = $17
	*($30 + [80]) = $18
	*($30 + [84]) = $8
	*($30 + [88]) = $19
	*($30 + [92]) = $20
	*($30 + [96]) = $21
	*($30 + [100]) = $22
	*($30 + [104]) = $10
	*($30 + [108]) = $11
	*($30 + [112]) = $12
	*($30 + [116]) = $23
	*($30 + [120]) = $24
	*($30 + [124]) = $4
	*($30 + [128]) = $25
	*($30 + [132]) = $7
	*($30 + [136]) = $26
	CALL $109(($30 + [40]), ($30 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $2, $27)
	if ( ($27 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$2 = (($30 + [16]) + [8])
	*($30 + [40]) = *($3)
	if ( (CALL memcmp(($30 + [16]), ($30 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [136])
	$27 = *($3)
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$6 }
	$27 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($30 + [32]), $5)
	*($3) = $27
	
.LABEL $label$6
	CALL db_idx64_update($27, (int_64)0, ($30 + [40]))
	
.LABEL $label$5
	*($30 + [40]) = *($4)
	if ( (CALL memcmp($2, ($30 + [40]), [8]) == 0) ){ goto $label$7 }
	$2 = ($1 + [140])
	$1 = *($2)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($30 + [32]), $5)
	*($2) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, (int_64)0, ($30 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($30 + [144])
}

void .FUNC $192 (int_64 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	*($9 + [56]) = $3
	*($9 + [8]) = [0]
	*($9) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $273($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [8])) = $6
	*($9) = $8
	*($9 + [4]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [4]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [36])) = $7
	*($9 + [24]) = $1
	*(($9 + [8])) = [0]
	*(($9 + [40])) = $6
	*($9 + [16]) = $0
	*($9 + [32]) = $8
	*($9) = (int_64)0
	*($9 + [44]) = [0]
	*(($8 = ($9 + [48]))) = [0]
	*(($9 + [52])) = [0]
	CALL $17(($9 + [44]), [8])
	$8 = *($9 + [44])
	CALL eosio_assert(((int_32)(*($8) - $8) > (int_32)[7]), [464])
	CALL memcpy($8, ($9 + [56]), [8])
	CALL $20(($9 + [64]), ($9 + [16]))
	$8 = *($9 + [64])
	CALL send_inline($8, (*($9 + [68]) - $8))
	$8 = *($9 + [64])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [68]) = $8
	CALL $274($8)
	
.LABEL $label$4
	$8 = *($9 + [44])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [48])) = $8
	CALL $274($8)
	
.LABEL $label$5
	$8 = *($9 + [32])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [36])) = $8
	CALL $274($8)
	
.LABEL $label$6
	$8 = *($9)
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [4]) = $8
	CALL $274($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $285($9)
}

void .FUNC _ZN5eosio2bk10printregenEy (int_32 $0, int_64 $1)
{
}

void .FUNC $190 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [80])
	$18 = $19
	*([0] + [4]) = $19
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	$16 = (*($1 + [56]) + ((int_32)*((*($2) + [74])) * (int_32)[12]))
	$4 = ($16 + [4])
	$3 = *($1)
	$17 = $3
	$2 = *(*(($2 + [4])))
	$5 = ($2 + [8])
	$6 = (*($16 + [4]) - $5)
	$16 = int_32($6 >> [3])
	if ( ($16 == 0) ){ goto $label$1 }
	CALL memmove($2, $5, $6)
	$17 = *($1)
	
.LABEL $label$1
	*($4) = ($2 + ($16 << [3]))
	CALL eosio_assert(((int_64)$3 == (int_64)$17), [400])
	*($18 + [16]) = [0]
	*($18) = ($18 + [16])
	*($18 + [24]) = $1
	$4 = ($1 + [8])
	*($18 + [28]) = $4
	$5 = ($1 + [9])
	*($18 + [32]) = $5
	$6 = ($1 + [16])
	*($18 + [36]) = $6
	$7 = ($1 + [24])
	*($18 + [40]) = $7
	$8 = ($1 + [40])
	*($18 + [44]) = $8
	$9 = ($1 + [41])
	*($18 + [48]) = $9
	$10 = ($1 + [44])
	*($18 + [52]) = $10
	$11 = ($1 + [48])
	*($18 + [56]) = $11
	$12 = ($1 + [52])
	*($18 + [60]) = $12
	$13 = ($1 + [56])
	*($18 + [64]) = $13
	$14 = ($1 + [68])
	*($18 + [68]) = $14
	$15 = ($1 + [80])
	*($18 + [72]) = $15
	CALL $168(($18 + [24]), $18)
	$16 = *($18 + [16])
	if ( ($16 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($16)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($19 - (($16 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	*($18 + [4]) = $2
	*($18) = $2
	*($18 + [8]) = ($2 + $16)
	*($18 + [16]) = $18
	*($18 + [28]) = $4
	*($18 + [32]) = $5
	*($18 + [36]) = $6
	*($18 + [40]) = $7
	*($18 + [44]) = $8
	*($18 + [48]) = $9
	*($18 + [24]) = $1
	*($18 + [52]) = $10
	*($18 + [56]) = $11
	*($18 + [60]) = $12
	*($18 + [64]) = $13
	*($18 + [68]) = $14
	*($18 + [72]) = $15
	CALL $169(($18 + [24]), ($18 + [16]))
	CALL db_update_i64(*($1 + [96]), (int_64)0, $2, $16)
	if ( ($16 <= [513]) ){ goto $label$4 }
	CALL free($2)
	
.LABEL $label$4
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($18 + [80])
}

void .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$28 = (*([0] + [4]) - [144])
	*([0] + [4]) = $28
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [224])
	*($1 + [72]) = [0]
	$2 = ($1 + [32])
	*(($29 = $28) + [16]) = *($2)
	$3 = ($1 + [88])
	*($29 + [24]) = *($3)
	$4 = *($1)
	CALL eosio_assert([1], [400])
	*($29 + [32]) = [0]
	*($29) = ($29 + [32])
	$6 = ($1 + [8])
	*($29 + [44]) = $6
	*($29 + [40]) = $1
	$7 = ($1 + [20])
	*($29 + [48]) = $7
	$8 = ($1 + [22])
	*($29 + [52]) = $8
	$9 = ($1 + [24])
	*($29 + [56]) = $9
	*($29 + [60]) = $2
	$10 = ($1 + [40])
	*($29 + [64]) = $10
	$11 = ($1 + [48])
	*($29 + [68]) = $11
	$12 = ($1 + [50])
	*($29 + [72]) = $12
	$13 = ($1 + [52])
	*($29 + [76]) = $13
	$14 = ($1 + [54])
	*($29 + [80]) = $14
	$15 = ($1 + [56])
	*($29 + [84]) = $15
	$16 = ($1 + [58])
	*($29 + [88]) = $16
	$17 = ($1 + [60])
	*($29 + [92]) = $17
	$18 = ($1 + [64])
	*($29 + [96]) = $18
	$19 = ($1 + [68])
	*($29 + [100]) = $19
	$5 = ($1 + [72])
	*($29 + [104]) = $5
	$20 = ($1 + [73])
	*($29 + [108]) = $20
	$21 = ($1 + [74])
	*($29 + [112]) = $21
	$22 = ($1 + [75])
	*($29 + [116]) = $22
	$23 = ($1 + [80])
	*($29 + [120]) = $23
	*($29 + [124]) = $3
	$24 = ($1 + [96])
	*($29 + [128]) = $24
	$25 = ($1 + [112])
	*($29 + [132]) = $25
	$26 = ($1 + [116])
	*($29 + [136]) = $26
	CALL $108(($29 + [40]), $29)
	$27 = *($29 + [32])
	if ( ($27 <= [513]) ){ goto $label$2 }
	$28 = CALL malloc($27)
	goto $label$1 
	
.LABEL $label$2
	$28 = ($28 - (($27 + [15]) & [-16]))
	*([0] + [4]) = $28
	
.LABEL $label$1
	*($29 + [4]) = $28
	*($29) = $28
	*($29 + [8]) = ($28 + $27)
	*($29 + [32]) = $29
	*($29 + [44]) = $6
	*($29 + [48]) = $7
	*($29 + [52]) = $8
	*($29 + [56]) = $9
	*($29 + [60]) = $2
	*($29 + [64]) = $10
	*($29 + [40]) = $1
	*($29 + [68]) = $11
	*($29 + [72]) = $12
	*($29 + [76]) = $13
	*($29 + [80]) = $14
	*($29 + [84]) = $15
	*($29 + [88]) = $16
	*($29 + [92]) = $17
	*($29 + [96]) = $18
	*($29 + [100]) = $19
	*($29 + [104]) = $5
	*($29 + [108]) = $20
	*($29 + [112]) = $21
	*($29 + [116]) = $22
	*($29 + [120]) = $23
	*($29 + [124]) = $3
	*($29 + [128]) = $24
	*($29 + [132]) = $25
	*($29 + [136]) = $26
	CALL $109(($29 + [40]), ($29 + [32]))
	CALL db_update_i64(*($1 + [132]), (int_64)0, $28, $27)
	if ( ($27 <= [513]) ){ goto $label$3 }
	CALL free($28)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$28 = (($29 + [16]) + [8])
	*($29 + [40]) = *($2)
	if ( (CALL memcmp(($29 + [16]), ($29 + [40]), [8]) == 0) ){ goto $label$5 }
	$2 = ($1 + [136])
	$27 = *($2)
	if ( ((int_32)$27 > (int_32)[-1]) ){ goto $label$6 }
	$27 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628032, ($29 + [32]), $4)
	*($2) = $27
	
.LABEL $label$6
	CALL db_idx64_update($27, (int_64)0, ($29 + [40]))
	
.LABEL $label$5
	*($29 + [40]) = *($3)
	if ( (CALL memcmp($28, ($29 + [40]), [8]) == 0) ){ goto $label$7 }
	$28 = ($1 + [140])
	$1 = *($28)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-2184396096019628031, ($29 + [32]), $4)
	*($28) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, (int_64)0, ($29 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($29 + [144])
}