(data (i32.const 8192) "locked status\00")
(data (i32.const 8206) "KING\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8297) "insufficient balance\00")
(data (i32.const 8318) "stake locked\00")
(data (i32.const 8331) "no stake\00")
(data (i32.const 8340) "insufficient stake\00")
(data (i32.const 8359) "no unstake\00")
(data (i32.const 8370) "no KING to unstake\00")
(data (i32.const 8389) "need 24 hour can release\00")
(data (i32.const 8414) "EOS\00")
(data (i32.const 8418) "not EOS\00")
(data (i32.const 8426) "stake is unlock\00")
(data (i32.const 8442) "next divs after 1 minute\00")
(data (i32.const 8467) "dailydivs -- pokerking.one\00")
(data (i32.const 8494) "divs in 6 hour\00")
(data (i32.const 8509) "next divs after 22 hour\00")
(data (i32.const 8533) "user not stake\00")
(data (i32.const 8548) "please wait\00")
(data (i32.const 8560) "unable to find key\00")
(data (i32.const 8579) "no divs\00")
(data (i32.const 8587) "dividend -- pokerking.one\00")
(data (i32.const 8613) "not have the status\00")
(data (i32.const 8633) "frozen account\00")
(data (i32.const 8648) "account no need unfreeze\00")
(data (i32.const 8673) "stake\00")
(data (i32.const 8679) "unstake\00")
(data (i32.const 8687) "release\00")
(data (i32.const 8695) "dailydivs\00")
(data (i32.const 8705) "share\00")
(data (i32.const 8711) "dividend\00")
(data (i32.const 8720) "restake\00")
(data (i32.const 8728) "lock\00")
(data (i32.const 8733) "increase\00")
(data (i32.const 8742) "freeze\00")
(data (i32.const 8749) "unfreeze\00")
(data (i32.const 8758) "polishing\00")
(data (i32.const 8768) "only KING token allowed\00")
(data (i32.const 8792) "quantity invalid\00")
(data (i32.const 8809) "need more than zero\00")
(data (i32.const 8829) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8880) "error reading iterator\00")
(data (i32.const 8903) "read\00")
(data (i32.const 8908) "string is too long to be a valid symbol_code\00")
(data (i32.const 8953) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9006) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9055) "invalid symbol name\00")
(data (i32.const 9075) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9134) "attempt to subtract asset with different symbol\00")
(data (i32.const 9182) "subtraction underflow\00")
(data (i32.const 9204) "subtraction overflow\00")
(data (i32.const 9225) "attempt to add asset with different symbol\00")
(data (i32.const 9268) "addition underflow\00")
(data (i32.const 9287) "addition overflow\00")
(data (i32.const 9305) "write\00")
(data (i32.const 9311) "string is too long to be a valid name\00")
(data (i32.const 9349) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9416) "character is not in allowed character set for names\00")
(data (i32.const 9468) "cannot pass end iterator to modify\00")
(data (i32.const 9503) "object passed to modify is not in multi_index\00")
(data (i32.const 9549) "cannot modify objects in table of another contract\00")
(data (i32.const 9600) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9659) "cannot create objects in table of another contract\00")
(data (i32.const 9710) "cannot pass end iterator to erase\00")
(data (i32.const 9744) "cannot increment end iterator\00")
(data (i32.const 9774) "object passed to erase is not in multi_index\00")
(data (i32.const 9819) "cannot erase objects in table of another contract\00")
(data (i32.const 9869) "attempt to remove object that was not in multi_index\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$10 (result i32)))
(import "env" "read_action_data" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$13 (param i32)))
(import "env" "abort" (func $fimport$14))
(import "env" "memset" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$17 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$25 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$28 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$29 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$32 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$34 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$35 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$36 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $42))
(export "_ZdlPv" (func $62))
(export "_Znwj" (func $60))
(export "_Znaj" (func $61))
(export "_ZdaPv" (func $63))
(export "_ZnwjSt11align_val_t" (func $64))
(export "_ZnajSt11align_val_t" (func $65))
(export "_ZdlPvSt11align_val_t" (func $66))
(export "_ZdaPvSt11align_val_t" (func $67))
(table $0 13 13 anyfunc)
(elem (i32.const 1) $1 $12 $19 $21 $26 $34 $17 $37 $20 $38 $40 $33)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18340))
(global $global$2 i32 (i32.const 18340))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9774])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9819])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9869])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $78($0)
	
.LABEL $label$1
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $4(($2 + [8]), $0)
	CALL eosio_assert((int_64)(*($2 + [40]) == 0), [8318])
	$3 = ($0 + [72])
	$4 = *($1)
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8829])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-3102536759532703232, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $8($3, $1)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8829])
	
.LABEL $label$1
	$1 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($1, [8370])
	$4 = CALL current_time()
	CALL eosio_assert(((uint_64)((int_64)*($7 + [24]) + (int_64)86400) <= (uint_64)((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8389])
	CALL eosio_assert(((int_64)*(($7 + [16])) == (int_64)*(($2 + [32]))), [9134])
	$4 = (int_64)
	*($2 + [24]) = $4(*($2 + [24]) - *($7 + [8])))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9182])
	CALL eosio_assert(((int_64)*($2 + [24]) < (int_64)4611686018427387904), [9204])
	CALL $9(($0 + [112]), ($2 + [8]), *($0))
	CALL eosio_assert($1, [9710])
	CALL eosio_assert($1, [9744])
	$1 = CALL db_next_i64(*($7 + [36]), ($2 + [88]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	CALL $8($3, $1)
	
.LABEL $label$5
	CALL $18($3, $7)
	$global$0 = ($2 + [96])
}

int_32 .FUNC $77 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9936]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9940])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9936]) = [1]
	$2 = ($2 << [16])
	*([0] + [9940]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9940])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9940]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9936]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9936]) = [1]
	$3 = ($3 << [16])
	*([0] + [9940]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9940])
	
.LABEL $label$10
	*([0] + [9940]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $77($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8211])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $78($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $70())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $74($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($2 + [8])
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $31(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [8829])
	CALL eosio_assert([1], [9468])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [8])), [9503])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [9549])
	$1 = *($0 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$1), [9225])
	$6 = ((int_64)*($0) + (int_64)*($2))
	*($0) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [9287])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [9600])
	CALL eosio_assert([1], [9305])
	CALL memcpy(($4 + [48]), $0, [8])
	*($4 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [9305])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), (int_64)0, ($4 + [48]), [16])
	$0 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$3 }
	*($0) = ((int_64)$1 + (int_64)1)
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [9659])
	*(($0 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($0 + [8]) = *(($2 + [8]))
	*($0) = *($2)
	CALL eosio_assert([1], [9305])
	CALL memcpy(($4 + [48]), $0, [8])
	*($4 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [9305])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [48]), [16]
	*($0 + [20]) = $7)
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$5 }
	*($2) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$5
	*($4 + [72]) = $0
	$1 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $1)
	*($4 + [68]) = $7
	$8 = ($4 + [36])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($2 + [8]) = $1
	*($2 + [16]) = $7
	*($4 + [72]) = [0]
	*($2) = $0
	*($8) = ($2 + [24])
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $0 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $32(($4 + [32]), ($4 + [72]), ($4 + [48]), ($4 + [68]))
	$0 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [224])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = CALL $72([8414])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8908])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8413]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)$4), [8418])
	CALL $4(($2 + [112]), $0)
	CALL eosio_assert(((int_64)*($2 + [144]) == (int_64)1), [8426])
	CALL eosio_assert((uint_64)(((int_64)*($2 + [152]) + (int_64)36000) <= ((int_64)((uint_64)CALL $fimport$7() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8442])
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $72([8467])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$10 }
	*($2) = ($3 << [1])
	$5 = ($2 | [1])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $3
	
.LABEL $label$9
	CALL memcpy($5, [8467], $3)
	
.LABEL $label$8
	*(($5 + $3)) = [0]
	*((($2 + [16]) + [24])) = *(($1 + [8]))
	$3 = ($2 + [8])
	*(($2 + [56])) = *($3)
	*($3) = [0]
	*($2 + [24]) = (int_64)-5971584251463461872
	*($2 + [16]) = (int_64)-5971584259689938416
	*($2 + [72]) = (int_64)6138663591592764928
	*($2 + [80]) = (int_64)-3617168760277827584
	*($2 + [32]) = *($1)
	*($2 + [48]) = *($2)
	*($2) = (int_64)0
	*(($3 = CALL _Znwj([16]))) = (int_64)-5971584259689938416
	*($3 + [8]) = (int_64)3617214756542218240
	*((($2 + [72]) + [36])) = [0]
	$5 = ($3 + [16])
	*((($2 + [72]) + [24])) = $5
	*(($2 + [92])) = $5
	*($2 + [88]) = $3
	*($2 + [100 align=4]) = (int_64)0
	$3 = *($2 + [48])
	$5 = ( *((($2 + [16]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [32])
	$4 = (CASTING uint_64)(uint_32 $5)
	$5 = ($2 + [100])
	
.LOOP $label$11:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$11 }
	if ( ($3 == 0) ){ goto $label$13 }
	CALL $22($5, $3)
	$5 = *(($2 + [104]))
	$3 = *(($2 + [100]))
	goto $label$12 
	
.LABEL $label$13
	$5 = [0]
	$3 = [0]
	
.LABEL $label$12
	*($2 + [212]) = $3
	*($2 + [208]) = $3
	*($2 + [216]) = $5
	*($2 + [192]) = ($2 + [208])
	*($2 + [200]) = ($2 + [16])
	CALL $23(($2 + [200]), ($2 + [192]))
	CALL $24(($2 + [208]), ($2 + [72]))
	$3 = *($2 + [208])
	CALL send_inline($3, (*($2 + [212]) - $3))
	$3 = *($2 + [208])
	if ( ($3 == 0) ){ goto $label$14 }
	*($2 + [212]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$14
	$3 = *($2 + [100])
	if ( ($3 == 0) ){ goto $label$15 }
	*(($2 + [104])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$15
	$3 = *($2 + [88])
	if ( ($3 == 0) ){ goto $label$16 }
	*(($2 + [92])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$16
	if ( ((*(($2 + [48])) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$17
	if ( ((*($2) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$18
	$4 = CALL current_time()
	$5 = ($1 + [8])
	$7 = *($5)
	*(($2 + [168])) = $7
	*((($2 + [112]) + [40])) = ((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [160]) = *($1)
	CALL eosio_assert(((int_64)$7 == (int_64)*(($2 + [184]))), [9225])
	$4 = ((int_64)*($2 + [176]) + (int_64)*($1))
	*($2 + [176]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)*($2 + [176]) < (int_64)4611686018427387904), [9287])
	CALL $9(($0 + [112]), ($2 + [112]), *($0))
	$7 = *($0)
	CALL eosio_assert(((int_64)*($0 + [152]) == (int_64)CALL $fimport$3()), [9659])
	*(($3 = CALL _Znwj([40])) + [24]) = ($0 + [152])
	*($3 + [8]) = *($5)
	*($3) = *($1)
	*($3 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9305])
	CALL memcpy(($2 + [16]), $3, [8])
	*($2 + [72]) = *($3 + [8])
	CALL eosio_assert([1], [9305])
	CALL memcpy((($2 + [16]) | [8]), ($2 + [72]), [8])
	CALL eosio_assert([1], [9305])
	$5 = ($3 + [16])
	CALL memcpy((($2 + [16]) + [16]), $5, [8])
	$4 = *($3 + [16])
	$1 = CALL db_store_i64(*(($0 + [160])), (int_64)7760153368969871360, $7, $4, ($2 + [16]), [24])
	*($3 + [28]) = $1
	$6 = ($0 + [168])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$19 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($2 + [72]) = $3
	$4 = *($5)
	*($2 + [16]) = $4
	*($2 + [208]) = $1
	$6 = ($0 + [180])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [184]))) ){ goto $label$22 }
	*($5 + [8]) = $4
	*($5 + [16]) = $1
	*($2 + [72]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	$3 = *($2 + [72])
	*($2 + [72]) = [0]
	if ( $3 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL $25(($0 + [176]), ($2 + [72]), ($2 + [16]), ($2 + [208]))
	$3 = *($2 + [72])
	*($2 + [72]) = [0]
	if ( ($3 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv($3)
	
.LABEL $label$20
	$global$0 = ($2 + [224])
	return (unreachable)
	
.LABEL $label$7
	CALL $68($2)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $4($2, $0)
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($2 + [8])), [9225])
	$3 = ((int_64)*($2) + (int_64)*($1))
	*($2) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [9287])
	CALL $9(($0 + [112]), $2, *($0))
	$global$0 = ($2 + [80])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $58(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $69($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $22($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9305])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9305])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $55(CALL $54($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8880])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $75($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	CALL $59(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $30(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $78($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $26 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	float_64 $14
	int_64 $15
	$2 = ($global$0 - [192])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $4(($2 + [32]), $0)
	$3 = CALL current_time()
	CALL eosio_assert(((uint_64)((int_64)*($2 + [72]) + (int_64)21600) > (uint_64)((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8494])
	CALL eosio_assert(((int_64)*($2 + [64]) == (int_64)1), [8426])
	CALL eosio_assert(((int_64)*($2 + [32]) > (int_64)0), [8331])
	$4 = ($0 + [192])
	$6 = *(($0 + [220]))
	$5 = *(($0 + [216]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$5 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [8829])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [200])), (int_64)-3020379626561077248, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $27($4, $7)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [8829])
	
.LABEL $label$3
	CALL eosio_assert(((uint_64)((int_64)*($8 + [8]) + (int_64)36000) <= (uint_64)((int_64)((uint_64)CALL $fimport$7() / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8509])
	$9 = [0]
	goto $label$1 
	
.LABEL $label$2
	$9 = [1]
	
.LABEL $label$1
	$10 = ($0 + [32])
	$6 = *(($0 + [60]))
	$11 = *(($0 + [56]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$10:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$9 }
	$6 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$10), [8829])
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	$7 = CALL db_find_i64(*($10), *(($0 + [40])), (int_64)-4157661083445231616, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $6($10, $7)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$10), [8829])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8533])
	$3 = *($5 + [8])
	$12 = *($2 + [80])
	$13 = *($2 + [32])
	$7 = CALL $72([8414])
	$6 = ($7 <= [8])
	$14 = ((float_64)((float_64)(CASTING float_64)(int_64 $3) / (float_64)(CASTING float_64)(int_64 $13)) * (float_64)(CASTING float_64)(int_64 $12))
	if ( ((float_64)(float_64)|$14| < (float_64)(float_64)9223372036854775808) ){ goto $label$15 }
	$13 = (int_64)-9223372036854775808
	if ( ($6 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$13 = (Rounds 0)($14)
	if ( $6 ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert([0], [8908])
	goto $label$12 
	
.LABEL $label$13
	if ( $7 ){ goto $label$12 }
	$15 = (int_64)4
	goto $label$11 
	
.LABEL $label$12
	$3 = (int_64)0
	
.LOOP $label$16:
	$6 = *(($7 + [8413]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$17
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$16 }
	$15 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	
.LABEL $label$11
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9006])
	$3 = (uint_64)$15 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$12 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$3 = $12
	$6 = [1]
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$3 = $12
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$22 }
	$6 = [1]
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$6 = [0]
	
.LABEL $label$18
	CALL eosio_assert($6, [9055])
	$3 = *($0)
	*(($2 + [8])) = $15
	*($2 + [24]) = $15
	*($2 + [16]) = $13
	*($2) = $13
	CALL $28($0, $1, $2, $3)
	$3 = *($0)
	if ( ($9 == 0) ){ goto $label$26 }
	CALL eosio_assert(((int_64)*(($0 + [192])) == (int_64)CALL $fimport$3()), [9659])
	*(($7 = CALL _Znwj([48])) + [32]) = $4
	*($7) = $1
	$1 = CALL current_time()
	*($7 + [16]) = $13
	*($7 + [24]) = $15
	*($7 + [8]) = ((int_64)((uint_64)$1 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($2 + [160]) = (($2 + [112]) + [32])
	*($2 + [156]) = ($2 + [112])
	*($2 + [152]) = ($2 + [112])
	*($2 + [168]) = ($2 + [152])
	*($2 + [180]) = ($7 + [8])
	*($2 + [176]) = $7
	*($2 + [184]) = ($7 + [16])
	CALL $29(($2 + [176]), ($2 + [168]))
	$1 = *($7)
	$5 = CALL db_store_i64(*(($0 + [200])), (int_64)-3020379626561077248, $3, $1, ($2 + [112]), [32])
	*($7 + [36]) = $5
	$6 = ($0 + [208])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$27 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	*($2 + [176]) = $7
	$3 = *($7)
	*($2 + [112]) = $3
	*($2 + [152]) = $5
	$8 = ($0 + [220])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [224]))) ){ goto $label$25 }
	*($6 + [8]) = $3
	*($6 + [16]) = $5
	*($2 + [176]) = [0]
	*($6) = $7
	*($8) = ($6 + [24])
	$7 = *($2 + [176])
	*($2 + [176]) = [0]
	if ( $7 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	CALL eosio_assert([1], [9468])
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [9503])
	CALL eosio_assert(((int_64)*(($0 + [192])) == (int_64)CALL $fimport$3()), [9549])
	$1 = *($8)
	*($8 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$15 == (int_64)*(($8 + [24]))), [9225])
	$12 = ((int_64)*($8 + [16]) + (int_64)$13)
	*($8 + [16]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)*($8 + [16]) < (int_64)4611686018427387904), [9287])
	CALL eosio_assert(((int_64)$1 == (int_64)*($8)), [9600])
	*($2 + [160]) = (($2 + [112]) + [32])
	*($2 + [156]) = ($2 + [112])
	*($2 + [152]) = ($2 + [112])
	*($2 + [168]) = ($2 + [152])
	*($2 + [180]) = ($8 + [8])
	*($2 + [176]) = $8
	*($2 + [184]) = ($8 + [16])
	CALL $29(($2 + [176]), ($2 + [168]))
	CALL db_update_i64(*($8 + [36]), $3, ($2 + [112]), [32])
	$7 = ($0 + [208])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$23 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$25
	CALL $30(($0 + [216]), ($2 + [176]), ($2 + [112]), ($2 + [152]))
	$7 = *($2 + [176])
	*($2 + [176]) = [0]
	if ( ($7 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv($7)
	
.LABEL $label$23
	$global$0 = ($2 + [192])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $75($1)
	
.LABEL $label$2
	*(CALL $70()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $75(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $78($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [256]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [260])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [256]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [216]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [176]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [136]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [96]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [56]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	return $0
}

int_32 .FUNC $48 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $75($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8903])
	CALL memcpy(($4 + [280]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [272])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $78($2)
	
.LABEL $label$5
	CALL $49(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $69 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $68 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9311])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9416])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9349])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9416])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [416])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	*($3 + [400]) = [8673]
	*($3 + [404]) = CALL $72([8673])
	*($3 + [200]) = *($3 + [400])
	CALL $43(($3 + [408]), ($3 + [200]))
	if ( ((int_64)$2 != (int_64)-4157661383434960896) ){ goto $label$2 }
	*($3 + [396]) = [0]
	*($3 + [392]) = [1]
	*($3 + [8]) = *($3 + [392])
	CALL $44($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [384]) = [8679]
	*($3 + [388]) = CALL $72([8679])
	*($3 + [192]) = *($3 + [384])
	CALL $43(($3 + [408]), ($3 + [192]))
	if ( ((int_64)$2 != (int_64)-3102536759825661952) ){ goto $label$3 }
	*($3 + [380]) = [0]
	*($3 + [376]) = [2]
	*($3 + [16]) = *($3 + [376])
	CALL $44($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [368]) = [8687]
	*($3 + [372]) = CALL $72([8687])
	*($3 + [184]) = *($3 + [368])
	CALL $43(($3 + [408]), ($3 + [184]))
	if ( ((int_64)$2 != (int_64)-4998252998346932224) ){ goto $label$4 }
	*($3 + [364]) = [0]
	*($3 + [360]) = [3]
	*($3 + [24]) = *($3 + [360])
	CALL $45($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [352]) = [8673]
	*($3 + [356]) = CALL $72([8673])
	*($3 + [176]) = *($3 + [352])
	CALL $43(($3 + [408]), ($3 + [176]))
	*($3 + [344]) = [8695]
	*($3 + [348]) = CALL $72([8695])
	*($3 + [168]) = *($3 + [344])
	CALL $43(($3 + [408]), ($3 + [168]))
	if ( ((int_64)$2 != (int_64)5304430183573356544) ){ goto $label$5 }
	*($3 + [340]) = [0]
	*($3 + [336]) = [4]
	*($3 + [32]) = *($3 + [336])
	CALL $46($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [328]) = [8705]
	*($3 + [332]) = CALL $72([8705])
	*($3 + [160]) = *($3 + [328])
	CALL $43(($3 + [408]), ($3 + [160]))
	if ( ((int_64)$2 != (int_64)-4373711020246433792) ){ goto $label$6 }
	*($3 + [324]) = [0]
	*($3 + [320]) = [5]
	*($3 + [40]) = *($3 + [320])
	CALL $47($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [312]) = [8711]
	*($3 + [316]) = CALL $72([8711])
	*($3 + [152]) = *($3 + [312])
	CALL $43(($3 + [408]), ($3 + [152]))
	if ( ((int_64)$2 != (int_64)5455799419163115520) ){ goto $label$7 }
	*($3 + [308]) = [0]
	*($3 + [304]) = [6]
	*($3 + [48]) = *($3 + [304])
	CALL $47($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [296]) = [8720]
	*($3 + [300]) = CALL $72([8720])
	*($3 + [144]) = *($3 + [296])
	CALL $43(($3 + [408]), ($3 + [144]))
	if ( ((int_64)$2 != (int_64)-4994048603321270272) ){ goto $label$8 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [7]
	*($3 + [56]) = *($3 + [288])
	CALL $45($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [280]) = [8728]
	*($3 + [284]) = CALL $72([8728])
	*($3 + [136]) = *($3 + [280])
	CALL $43(($3 + [408]), ($3 + [136]))
	if ( ((int_64)$2 != (int_64)-8281838239757631488) ){ goto $label$9 }
	*($3 + [276]) = [0]
	*($3 + [272]) = [8]
	*($3 + [64]) = *($3 + [272])
	CALL $48($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [264]) = [8733]
	*($3 + [268]) = CALL $72([8733])
	*($3 + [128]) = *($3 + [264])
	CALL $43(($3 + [408]), ($3 + [128]))
	if ( ((int_64)$2 != (int_64)8417637937524506624) ){ goto $label$10 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [9]
	*($3 + [72]) = *($3 + [256])
	CALL $46($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [248]) = [8742]
	*($3 + [252]) = CALL $72([8742])
	*($3 + [120]) = *($3 + [248])
	CALL $43(($3 + [408]), ($3 + [120]))
	if ( ((int_64)$2 != (int_64)6761222076679323648) ){ goto $label$11 }
	*($3 + [244]) = [0]
	*($3 + [240]) = [10]
	*($3 + [80]) = *($3 + [240])
	CALL $47($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [232]) = [8749]
	*($3 + [236]) = CALL $72([8749])
	*($3 + [112]) = *($3 + [232])
	CALL $43(($3 + [408]), ($3 + [112]))
	if ( ((int_64)$2 != (int_64)-3109888186206126080) ){ goto $label$12 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [11]
	*($3 + [88]) = *($3 + [224])
	CALL $47($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [216]) = [8758]
	*($3 + [220]) = CALL $72([8758])
	*($3 + [104]) = *($3 + [216])
	CALL $43(($3 + [408]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)-5970950440016150528) ){ goto $label$1 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [12]
	*($3 + [96]) = *($3 + [208])
	CALL $47($1, $1, ($3 + [96]))
	
.LABEL $label$1
	CALL $71([0])
	$global$0 = ($3 + [416])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9774])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9819])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9869])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $40 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [232])
	$5 = *(($0 + [260]))
	$4 = *(($0 + [256]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [8829])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [240])), (int_64)6761222076679323648, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $10($3, $6)
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [8829])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [8648])
	CALL eosio_assert($6, [9710])
	CALL eosio_assert($6, [9744])
	$6 = CALL db_next_i64(*($7 + [12]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $10($3, $6)
	
.LABEL $label$5
	CALL $41($3, $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $47 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $75($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8903])
	CALL memcpy(($4 + [280]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [208])) = $0
	*(($4 + [216])) = (int_64)-1
	*(($4 + [224])) = (int_64)0
	*(($4 + [232])) = [0]
	*(($4 + [248])) = $0
	*(($4 + [256])) = (int_64)-1
	*(($4 + [264])) = (int_64)0
	*($4 + [160]) = $0
	*($4 + [200]) = $0
	*($4 + [240]) = $0
	*(($4 + [272])) = [0]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [280])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $78($2)
	
.LABEL $label$5
	CALL $49(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $75($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8903])
	CALL memcpy(($4 + [272]), $2, [8])
	*($4) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8903])
	CALL memcpy($4, ($2 + [8]), [8])
	*($4 + [280]) = *($4)
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	*(($3 = (($4 + [288]) + [8]))) = *($4 + [280])
	*($4 + [288]) = *($4 + [272])
	*((($4 + [304]) + [8])) = *($3)
	*($4 + [304]) = *($4 + [288])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [304])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $78($2)
	
.LABEL $label$5
	CALL $49($4)
	$global$0 = ($4 + [320])
	return [1]
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $75($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8903])
	CALL memcpy(($4 + [272]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	*($4 + [280]) = *($4 + [272])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [280])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $78($2)
	
.LABEL $label$5
	CALL $49($4)
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $75($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [272]) + [16]))) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8903])
	CALL memcpy(($4 + [272]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [8903])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [8]), [8])
	*($4) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [8903])
	CALL memcpy($4, ($2 + [16]), [8])
	*($3) = *($4)
	*(($4 + [20])) = ($2 + [24])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [240])) = $0
	*(($4 + [248])) = (int_64)-1
	*(($4 + [256])) = (int_64)0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $0
	*(($4 + [264])) = [0]
	*(($8 = (($4 + [296]) + [8]))) = *($3)
	*($4 + [296]) = *($4 + [280])
	$0 = *($4 + [272])
	*((($4 + [312]) + [8])) = *($8)
	*($4 + [328]) = $0
	*($4 + [312]) = *($4 + [296])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [328])), (int_32 ($4 + [312])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $78($2)
	
.LABEL $label$5
	CALL $49($4)
	$global$0 = ($4 + [336])
	return [1]
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18328])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18136]
	$3 = (((int_32)$1 * (int_32)[12]) + [18136])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $70 ()
{
	return [9928]
}

int_32 .FUNC $75 (int_32 $0)
{
	return CALL $76([9944], $0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $75($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9924])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $75($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $71 (int_32 $0)
{
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8880])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $75($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	CALL $57(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $14(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $78($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$0), [8829])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7180631165051600896, (int_64)7180631165051600896)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $11($0, $4)
	CALL eosio_assert(((int_32)*($4 + [80]) == (int_32)$0), [8829])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9468])
	CALL $15($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $16($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8880])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $75($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8903])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8903])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8903])
	CALL memcpy(($3 + [24]), ($2 + [16]), [8])
	*($5 + [16]) = *($3 + [24])
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = *($5)
	*($3 + [24]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $7(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $78($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = CALL $72([8206])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8908])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8205]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)$4 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	$6 = ($1 + [112])
	*($2) = (int_64)0
	*($2 + [8]) = ((int_64)$4 | (int_64)4)
	CALL eosio_assert([1], [9006])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $7
	$5 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [9055])
	$3 = CALL $72([8206])
	if ( ($3 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8908])
	goto $label$14 
	
.LABEL $label$15
	if ( ($3 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$4 = (int_64)0
	
.LOOP $label$16:
	$5 = *(($3 + [8205]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$17
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$16 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$4 = (int_64)4
	
.LABEL $label$12
	*(($2 + [24])) = $4
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [9006])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$4 = $7
	$5 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$4 = $7
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$22 }
	$5 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$5 = [0]
	
.LABEL $label$18
	CALL eosio_assert($5, [9055])
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = (int_64)0
	$3 = CALL $72([8414])
	if ( ($3 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [8908])
	goto $label$25 
	
.LABEL $label$26
	if ( ($3 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$4 = (int_64)0
	
.LOOP $label$27:
	$5 = *(($3 + [8413]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$28
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$27 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$4 = (int_64)4
	
.LABEL $label$23
	*(($2 + [56])) = $4
	*($2 + [48]) = (int_64)0
	CALL eosio_assert([1], [9006])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$4 = $7
	$5 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$4 = $7
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$33 }
	$5 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$5 = [0]
	
.LABEL $label$29
	CALL eosio_assert($5, [9055])
	$3 = CALL $72([8414])
	if ( ($3 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [8908])
	goto $label$36 
	
.LABEL $label$37
	if ( ($3 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$4 = (int_64)0
	
.LOOP $label$38:
	$5 = *(($3 + [8413]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$39
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$38 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$34 
	
.LABEL $label$35
	$4 = (int_64)4
	
.LABEL $label$34
	*(($2 + [72])) = $4
	*($2 + [64]) = (int_64)0
	CALL eosio_assert([1], [9006])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$4 = $7
	$5 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$4 = $7
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $5 ){ goto $label$44 }
	$5 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$5 = [0]
	
.LABEL $label$40
	CALL eosio_assert($5, [9055])
	$3 = *(($1 + [140]))
	if ( ((int_32)$3 == (int_32)*(($1 + [136]))) ){ goto $label$47 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$6), [8829])
	if ( $3 ){ goto $label$45 }
	goto $label$46 
	
.LABEL $label$47
	$3 = CALL db_find_i64(*(($1 + [112])), *(($1 + [120])), (int_64)7180631165051600896, (int_64)7180631165051600896)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$46 }
	$3 = CALL $11($6, $3)
	CALL eosio_assert(((int_32)*($3 + [80]) == (int_32)$6), [8829])
	goto $label$45 
	
.LABEL $label$46
	$3 = $2
	
.LABEL $label$45
	CALL memcpy($0, $3, [80])
	$global$0 = ($2 + [80])
}

int_32 .FUNC $5 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8829])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $52($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8829])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $2 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [232])
	$4 = *(($0 + [260]))
	$3 = *(($0 + [256]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [8]) == (int_32)$2), [8829])
	CALL eosio_assert(($6 == 0), [8633])
	return 
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($2), *(($0 + [240])), (int_64)6761222076679323648, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $10($2, $4)
	CALL eosio_assert(((int_32)*($5 + [8]) == (int_32)$2), [8829])
	
.LABEL $label$4
	CALL eosio_assert(($5 == 0), [8633])
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = CALL $72([8206])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8908])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8205]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)$3), [8768])
	$4 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $5
	$4 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$3 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [8792])
	CALL eosio_assert(((int_64)*($1) > (int_64)0), [8809])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL require_auth(*($1))
	CALL $2($0, *($1))
	CALL $3($0, $2)
	CALL $4($3, $0)
	CALL eosio_assert((int_64)(*($3 + [32]) == 0), [8192])
	$4 = *($2 + [8])
	$5 = *($1)
	*(($3 + [112])) = [0]
	*($3 + [88]) = $5
	*($3 + [80]) = (int_64)-5971584251005327856
	*($3 + [96]) = (int_64)-1
	*($3 + [104]) = (int_64)0
	$6 = CALL $5(($3 + [80]), (uint_64)$4 >> (uint_64)(int_64)8), [8560]
	$7 = *($6) + [8])
	$8 = *($6)
	$9 = *($3 + [104])
	if ( ($9 == 0) ){ goto $label$1 }
	$10 = ($3 + [108])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [-24])
	$11 = *($6)
	*($6) = [0]
	if ( ($11 == 0) ){ goto $label$5 }
	CALL _ZdlPv($11)
	
.LABEL $label$5
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$4 }
	$6 = *(($3 + [104]))
	goto $label$2 
	
.LABEL $label$3
	$6 = $9
	
.LABEL $label$2
	*($10) = $9
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$6 = CALL $72([8206])
	if ( ($6 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8908])
	goto $label$8 
	
.LABEL $label$9
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$4 = (int_64)0
	
.LOOP $label$10:
	$11 = *(($6 + [8205]))
	if ( ((($11 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$11
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$10 }
	$5 = ((int_64)$4 << (int_64)8)
	goto $label$6 
	
.LABEL $label$7
	$5 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert([1], [9006])
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	$12 = ((int_64)$5 | (int_64)4)
	$6 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$4 = $5
	$11 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$4 = $5
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $11 ){ goto $label$16 }
	$11 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$11 = [0]
	
.LABEL $label$12
	CALL eosio_assert($11, [9055])
	$13 = ($0 + [32])
	$4 = *($1)
	$11 = *(($0 + [60]))
	$10 = *(($0 + [56]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$20 }
	
.LOOP $label$22:
	$6 = ($11 + [-24])
	$9 = *($6)
	if ( ((int_64)*($9) == (int_64)$4) ){ goto $label$21 }
	$11 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$20 }
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$13), [8829])
	goto $label$19 
	
.LABEL $label$20
	$11 = ($0 + [40])
	$6 = CALL db_find_i64(*($13), *($11), (int_64)-4157661083445231616, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	$9 = CALL $6($13, $6)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$13), [8829])
	
.LABEL $label$19
	$6 = ($9 + [16])
	$12 = *($6)
	$14 = *($9 + [8])
	$5 = *($0)
	CALL eosio_assert([1], [9468])
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$13), [9503])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [9549])
	$4 = *($9)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*($6)), [9225])
	$15 = ((int_64)*($9 + [8]) + (int_64)*($2))
	*($9 + [8]) = $15
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)*($9 + [8]) < (int_64)4611686018427387904), [9287])
	CALL eosio_assert(((int_64)$4 == (int_64)*($9)), [9600])
	CALL eosio_assert([1], [9305])
	CALL memcpy(($3 + [80]), $9, [8])
	CALL eosio_assert([1], [9305])
	CALL memcpy((($3 + [80]) | [8]), ($9 + [8]), [8])
	*($3 + [168]) = *($6)
	CALL eosio_assert([1], [9305])
	CALL memcpy((($3 + [80]) + [16]), ($3 + [168]), [8])
	CALL db_update_i64(*($9 + [28]), $5, ($3 + [80]), [24])
	$6 = ($0 + [48])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$17 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	goto $label$17 
	
.LABEL $label$18
	$5 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [9659])
	*(($6 = CALL _Znwj([40])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = $13
	*($6) = *($1)
	*($6 + [8]) = *($2)
	*($6 + [16]) = *(($2 + [8]))
	CALL eosio_assert([1], [9305])
	CALL memcpy(($3 + [80]), $6, [8])
	CALL eosio_assert([1], [9305])
	CALL memcpy((($3 + [80]) | [8]), ($6 + [8]), [8])
	*($3 + [168]) = *($6 + [16])
	CALL eosio_assert([1], [9305])
	CALL memcpy(($3 + [96]), ($3 + [168]), [8])
	$4 = *($6)
	$9 = CALL db_store_i64(*($11), (int_64)-4157661083445231616, $5, $4, ($3 + [80]), [24])
	*($6 + [28]) = $9
	$11 = ($0 + [48])
	if ( (uint_64)($4 <= *($11)) ){ goto $label$23 }
	*($11) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$23
	*($3 + [168]) = $6
	$4 = *($6)
	*($3 + [80]) = $4
	*($3 + [164]) = $9
	$10 = ($0 + [60])
	$11 = *($10)
	if ( ((uint_32)$11 >= (uint_32)*(($0 + [64]))) ){ goto $label$26 }
	*($11 + [8]) = $4
	*($11 + [16]) = $9
	*($3 + [168]) = [0]
	*($11) = $6
	*($10) = ($11 + [24])
	$6 = *($3 + [168])
	*($3 + [168]) = [0]
	if ( $6 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	CALL $7(($0 + [56]), ($3 + [168]), ($3 + [80]), ($3 + [164]))
	$6 = *($3 + [168])
	*($3 + [168]) = [0]
	if ( ($6 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL _ZdlPv($6)
	
.LABEL $label$24
	$14 = (int_64)0
	
.LABEL $label$17
	$6 = CALL $72([8206])
	if ( ($6 <= [8]) ){ goto $label$30 }
	CALL eosio_assert([0], [8908])
	goto $label$29 
	
.LABEL $label$30
	if ( ($6 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$4 = (int_64)0
	
.LOOP $label$31:
	$11 = *(($6 + [8205]))
	if ( ((($11 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$32
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$31 }
	$15 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$27 
	
.LABEL $label$28
	$15 = (int_64)4
	
.LABEL $label$27
	CALL eosio_assert([1], [9006])
	$4 = (uint_64)$15 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$4 = $5
	$11 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	$4 = $5
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $11 ){ goto $label$37 }
	$11 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$11 = [0]
	
.LABEL $label$33
	CALL eosio_assert($11, [9055])
	$13 = ($0 + [72])
	$4 = *($1)
	$11 = *(($0 + [100]))
	$10 = *(($0 + [96]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$41 }
	
.LOOP $label$43:
	$6 = ($11 + [-24])
	$9 = *($6)
	if ( ((int_64)*($9) == (int_64)$4) ){ goto $label$42 }
	$11 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$41 }
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$13), [8829])
	if ( $9 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$6 = CALL db_find_i64(*($13), *(($0 + [80])), (int_64)-3102536759532703232, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$39 }
	$9 = CALL $8($13, $6)
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$13), [8829])
	
.LABEL $label$40
	$15 = *(($9 + [16]))
	$16 = *($9 + [8])
	goto $label$38 
	
.LABEL $label$39
	$16 = (int_64)0
	
.LABEL $label$38
	$5 = *($2)
	$6 = ($2 + [8])
	$4 = *($6)
	CALL eosio_assert(((int_64)$12 == (int_64)$4), [9225])
	$5 = ((int_64)$5 + (int_64)$14)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9287])
	CALL eosio_assert(((int_64)$15 == (int_64)$4), [9225])
	$5 = ((int_64)$5 + (int_64)$16)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9287])
	CALL eosio_assert(((int_64)$7 == (int_64)$4), [9075])
	CALL eosio_assert(((int_64)$8 >= (int_64)$5), [8297])
	$4 = *($6)
	$5 = *($2)
	CALL $4(($3 + [80]), $0)
	CALL eosio_assert(((int_64)$4 == (int_64)*($3 + [88])), [9225])
	$4 = ((int_64)$5 + (int_64)*($3 + [80]))
	*($3 + [80]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)*($3 + [80]) < (int_64)4611686018427387904), [9287])
	CALL $9(($0 + [112]), ($3 + [80]), *($0))
	$global$0 = ($3 + [176])
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [9503])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9549])
	$1 = CALL memcpy($1, *($3), [80])
	CALL eosio_assert([1], [9600])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($1 + [16])
	*($4 + [104]) = $1
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [64])
	CALL $56(($4 + [104]), ($4 + [96]))
	CALL db_update_i64(*($1 + [84]), $2, $4, [80])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7180631165051600896) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7180631165051600897
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [9659])
	*(($5 = CALL _Znwj([96])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = $1
	$5 = CALL memcpy($5, *($3), [80])
	*($4 + [88]) = ($4 + [80])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($5 + [16])
	*($4 + [104]) = $5
	*($4 + [112]) = ($5 + [32])
	*($4 + [116]) = ($5 + [40])
	*($4 + [120]) = ($5 + [48])
	*($4 + [124]) = ($5 + [64])
	CALL $56(($4 + [104]), ($4 + [96]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7180631165051600896, $2, (int_64)7180631165051600896, $4, [80])
	*($5 + [84]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7180631165051600896) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7180631165051600897
	
.LABEL $label$1
	*($4 + [104]) = $5
	*($4) = (int_64)7180631165051600896
	*($4 + [80]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7180631165051600896
	*($3 + [16]) = $6
	*($4 + [104]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $51(($1 + [24]), ($4 + [104]), $4, ($4 + [80]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [104])
	*($4 + [104]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL require_auth(*($1))
	CALL $2($0, *($1))
	CALL $4(($2 + [8]), $0)
	CALL eosio_assert((int_64)(*($2 + [40]) == 0), [8318])
	$3 = ($0 + [72])
	$4 = *($1)
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$3), [8829])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-3102536759532703232, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $8($3, $7)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$3), [8829])
	
.LABEL $label$1
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [8359])
	$10 = ($0 + [32])
	$4 = *($1)
	$6 = *(($0 + [60]))
	$11 = *(($0 + [56]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$10:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$4) ){ goto $label$9 }
	$6 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$10), [8829])
	goto $label$7 
	
.LABEL $label$8
	$6 = ($0 + [40])
	$7 = CALL db_find_i64(*($10), *($6), (int_64)-4157661083445231616, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $6($10, $7)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$10), [8829])
	
.LABEL $label$7
	$12 = *($0)
	CALL eosio_assert([1], [9468])
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$10), [9503])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [9549])
	$4 = *($5)
	$7 = ($5 + [16])
	CALL eosio_assert(((int_64)*(($8 + [16])) == (int_64)*($7)), [9225])
	$13 = ((int_64)*($5 + [8]) + (int_64)*($8 + [8]))
	*($5 + [8]) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [9287])
	CALL eosio_assert(((int_64)$4 == (int_64)*($5)), [9600])
	CALL eosio_assert([1], [9305])
	CALL memcpy(($2 + [96]), $5, [8])
	CALL eosio_assert([1], [9305])
	CALL memcpy((($2 + [96]) | [8]), ($5 + [8]), [8])
	*($2 + [120]) = *($7)
	CALL eosio_assert([1], [9305])
	CALL memcpy((($2 + [96]) + [16]), ($2 + [120]), [8])
	CALL db_update_i64(*($5 + [28]), $12, ($2 + [96]), [24])
	$7 = ($0 + [48])
	if ( (uint_64)($4 <= *($7)) ){ goto $label$5 }
	*($7) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	goto $label$5 
	
.LABEL $label$6
	$12 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [9659])
	*(($7 = CALL _Znwj([40])) + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [24]) = $10
	*($7) = *($1)
	*($7 + [8]) = *($8 + [8])
	*($7 + [16]) = *(($8 + [16]))
	CALL eosio_assert([1], [9305])
	CALL memcpy(($2 + [96]), $7, [8])
	CALL eosio_assert([1], [9305])
	CALL memcpy((($2 + [96]) | [8]), ($7 + [8]), [8])
	*($2 + [120]) = *($7 + [16])
	CALL eosio_assert([1], [9305])
	CALL memcpy((($2 + [96]) + [16]), ($2 + [120]), [8])
	$4 = *($7)
	$5 = CALL db_store_i64(*($6), (int_64)-4157661083445231616, $12, $4, ($2 + [96]), [24])
	*($7 + [28]) = $5
	$6 = ($0 + [48])
	if ( (uint_64)($4 <= *($6)) ){ goto $label$11 }
	*($6) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($2 + [120]) = $7
	$4 = *($7)
	*($2 + [96]) = $4
	*($2 + [92]) = $5
	$11 = ($0 + [60])
	$6 = *($11)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [64]))) ){ goto $label$13 }
	*($6 + [8]) = $4
	*($6 + [16]) = $5
	*($2 + [120]) = [0]
	*($6) = $7
	*($11) = ($6 + [24])
	$7 = *($2 + [120])
	*($2 + [120]) = [0]
	if ( $7 ){ goto $label$12 }
	goto $label$5 
	
.LABEL $label$13
	CALL $7(($0 + [56]), ($2 + [120]), ($2 + [96]), ($2 + [92]))
	$7 = *($2 + [120])
	*($2 + [120]) = [0]
	if ( ($7 == 0) ){ goto $label$5 }
	
.LABEL $label$12
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = ($8 + [16])
	CALL eosio_assert(((int_64)*($7) == (int_64)*($2 + [16])), [9225])
	$6 = ($8 + [8])
	$4 = ((int_64)*($2 + [8]) + (int_64)*($6))
	*($2 + [8]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)*($2 + [8]) < (int_64)4611686018427387904), [9287])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($2 + [32]))), [9134])
	$4 = (int_64)
	*($2 + [24]) = $4(*($2 + [24]) - *($6)))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9182])
	CALL eosio_assert(((int_64)*($2 + [24]) < (int_64)4611686018427387904), [9204])
	CALL $9(($0 + [112]), ($2 + [8]), *($0))
	CALL eosio_assert($9, [9710])
	CALL eosio_assert($9, [9744])
	$7 = CALL db_next_i64(*($8 + [36]), ($2 + [96]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	CALL $8($3, $7)
	
.LABEL $label$14
	CALL $18($3, $8)
	$global$0 = ($2 + [128])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8880])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $75($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8903])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $78($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8880])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $75($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [64])
	CALL $50(($3 + [40]), ($3 + [32]))
	*($5 + [84]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)7180631165051600896
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7180631165051600896
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $51(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $78($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth(*($1))
	CALL $2($0, *($1))
	CALL $3($0, $2)
	CALL $4($3, $0)
	CALL eosio_assert((int_64)(*($3 + [32]) == 0), [8318])
	$4 = ($0 + [32])
	$5 = *($1)
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$4), [8829])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)-4157661083445231616, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $6($4, $8)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$4), [8829])
	
.LABEL $label$1
	$7 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($7, [8331])
	$8 = ($9 + [16])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($2 + [8])), [9075])
	CALL eosio_assert(((int_64)*($9 + [8]) >= (int_64)*($2)), [8340])
	$10 = *($0)
	CALL eosio_assert($7, [9468])
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$4), [9503])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [9549])
	$5 = *($9)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($8)), [9134])
	$11 = (int_64)
	*($9 + [8]) = $11(*($9 + [8]) - *($2)))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [9182])
	CALL eosio_assert(((int_64)*($9 + [8]) < (int_64)4611686018427387904), [9204])
	CALL eosio_assert(((int_64)$5 == (int_64)*($9)), [9600])
	CALL eosio_assert([1], [9305])
	CALL memcpy(($3 + [80]), $9, [8])
	CALL eosio_assert([1], [9305])
	CALL memcpy((($3 + [80]) | [8]), ($9 + [8]), [8])
	*($3 + [144]) = *($8)
	CALL eosio_assert([1], [9305])
	CALL memcpy((($3 + [80]) + [16]), ($3 + [144]), [8])
	CALL db_update_i64(*($9 + [28]), $10, ($3 + [80]), [24])
	$8 = ($0 + [48])
	if ( (uint_64)($5 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$4 = ($0 + [72])
	$5 = *($1)
	$9 = *(($0 + [100]))
	$6 = *(($0 + [96]))
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$9 }
	
.LOOP $label$11:
	$8 = ($9 + [-24])
	$7 = *($8)
	if ( ((int_64)*($7) == (int_64)$5) ){ goto $label$10 }
	$9 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [8829])
	goto $label$8 
	
.LABEL $label$9
	$9 = ($0 + [80])
	$8 = CALL db_find_i64(*($4), *($9), (int_64)-3102536759532703232, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $8($4, $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [8829])
	
.LABEL $label$8
	$10 = *($0)
	CALL eosio_assert([1], [9468])
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$4), [9503])
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$3()), [9549])
	$5 = *($7)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($7 + [16]))), [9225])
	$11 = ((int_64)*($7 + [8]) + (int_64)*($2))
	*($7 + [8]) = $11
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)*($7 + [8]) < (int_64)4611686018427387904), [9287])
	*($7 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($7)), [9600])
	*($3 + [128]) = (($3 + [80]) + [32])
	*($3 + [124]) = ($3 + [80])
	*($3 + [120]) = ($3 + [80])
	*($3 + [136]) = ($3 + [120])
	*($3 + [148]) = ($7 + [8])
	*($3 + [144]) = $7
	*($3 + [152]) = ($7 + [24])
	CALL $13(($3 + [144]), ($3 + [136]))
	CALL db_update_i64(*($7 + [36]), $10, ($3 + [80]), [32])
	$8 = ($0 + [88])
	if ( (uint_64)($5 <= *($8)) ){ goto $label$6 }
	*($8) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	goto $label$6 
	
.LABEL $label$7
	$10 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$3()), [9659])
	*(($8 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [32]) = $4
	*($8) = *($1)
	*($8 + [8]) = *($2)
	*($8 + [16]) = *(($2 + [8]))
	*($8 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [128]) = (($3 + [80]) + [32])
	*($3 + [124]) = ($3 + [80])
	*($3 + [120]) = ($3 + [80])
	*($3 + [136]) = ($3 + [120])
	*($3 + [148]) = ($8 + [8])
	*($3 + [144]) = $8
	*($3 + [152]) = ($8 + [24])
	CALL $13(($3 + [144]), ($3 + [136]))
	$5 = *($8)
	$7 = CALL db_store_i64(*($9), (int_64)-3102536759532703232, $10, $5, ($3 + [80]), [32])
	*($8 + [36]) = $7
	$9 = ($0 + [88])
	if ( (uint_64)($5 <= *($9)) ){ goto $label$12 }
	*($9) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($3 + [144]) = $8
	$5 = *($8)
	*($3 + [80]) = $5
	*($3 + [120]) = $7
	$6 = ($0 + [100])
	$9 = *($6)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [104]))) ){ goto $label$14 }
	*($9 + [8]) = $5
	*($9 + [16]) = $7
	*($3 + [144]) = [0]
	*($9) = $8
	*($6) = ($9 + [24])
	$8 = *($3 + [144])
	*($3 + [144]) = [0]
	if ( $8 ){ goto $label$13 }
	goto $label$6 
	
.LABEL $label$14
	CALL $14(($0 + [96]), ($3 + [144]), ($3 + [80]), ($3 + [120]))
	$8 = *($3 + [144])
	*($3 + [144]) = [0]
	if ( ($8 == 0) ){ goto $label$6 }
	
.LABEL $label$13
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$8 = ($2 + [8])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($3 + [8])), [9134])
	$5 = (int_64)
	*($3) = $5(*($3) - *($2)))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9182])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [9204])
	CALL eosio_assert(((int_64)*($8) == (int_64)*(($3 + [24]))), [9225])
	$5 = ((int_64)*($3 + [16]) + (int_64)*($2))
	*($3 + [16]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)*($3 + [16]) < (int_64)4611686018427387904), [9287])
	CALL $9(($0 + [112]), $3, *($0))
	$global$0 = ($3 + [160])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9503])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9549])
	$5 = *($1 + [8])
	CALL eosio_assert([1], [9006])
	$6 = [0]
	$7 = (uint_64)$5 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [9055])
	*(($10 = ($1 + [8]))) = $5
	*($1) = (int_64)0
	CALL eosio_assert([1], [9600])
	$11 = $3
	$6 = ($11 + [-16])
	$global$0 = $6
	CALL eosio_assert([1], [9305])
	CALL memcpy($6, $1, [8])
	*($4 + [8]) = *($10)
	CALL eosio_assert([1], [9305])
	CALL memcpy(($11 + [-8]), ($4 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $6, [16])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($4 + [16])
}

void .FUNC $37 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL eosio_assert((uint_64)($1 <= (int_64)2), [8613])
	CALL $4($2, $0)
	*($2 + [32]) = $1
	CALL $9(($0 + [112]), $2, *($0))
	$global$0 = ($2 + [80])
}

void .FUNC $34 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [256])
	$global$0 = $2
	CALL require_auth($1)
	CALL $2($0, $1)
	CALL $4(($2 + [144]), $0)
	CALL eosio_assert((int_64)(*($2 + [176]) == 0), [8318])
	$3 = CALL current_time()
	CALL eosio_assert(((uint_64)((int_64)*($2 + [184]) + (int_64)300) <= (uint_64)((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)), [8548])
	*(($2 + [136])) = [0]
	*($2 + [112]) = $1
	*($2 + [104]) = (int_64)-5971584251463461872
	*($2 + [120]) = (int_64)-1
	$3 = (int_64)0
	*($2 + [128]) = (int_64)0
	$4 = CALL $72([8414])
	if ( ($4 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [8908])
	goto $label$2 
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = (int_64)0
	
.LOOP $label$4:
	$5 = *(($4 + [8413]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$5
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$4 }
	$3 = ((int_64)$3 & (int_64)72057594037927935)
	
.LABEL $label$1
	$5 = CALL $35(($2 + [104]), $3, [8560])
	CALL eosio_assert(((int_64)*($5) > (int_64)0), [8579])
	if ( ((int_64)*($5) < (int_64)1) ){ goto $label$7 }
	$3 = *($0)
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$4 = CALL $72([8587])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$10 }
	*($2) = ($4 << [1])
	$0 = ($2 | [1])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = (($4 + [16]) & [-16])
	$0 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $0
	*($2 + [4]) = $4
	
.LABEL $label$9
	CALL memcpy($0, [8587], $4)
	
.LABEL $label$8
	*(($0 + $4)) = [0]
	*($2 + [24]) = $1
	*($2 + [16]) = $3
	*((($2 + [16]) + [24])) = *(($5 + [8]))
	$7 = *($5)
	$4 = ($2 + [8])
	*(($2 + [56])) = *($4)
	*($4) = [0]
	*($2 + [32]) = $7
	*($2 + [48]) = *($2)
	*($2) = (int_64)0
	*($2 + [64]) = (int_64)6138663591592764928
	*($2 + [72]) = (int_64)-3617168760277827584
	*(($4 = CALL _Znwj([16]))) = $3
	*($4 + [8]) = (int_64)3617214756542218240
	*((($2 + [64]) + [36])) = [0]
	$0 = ($4 + [16])
	*((($2 + [64]) + [24])) = $0
	*(($2 + [84])) = $0
	*($2 + [80]) = $4
	*($2 + [92 align=4]) = (int_64)0
	$4 = *($2 + [48])
	$0 = ( *((($2 + [16]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($0 + [32])
	$3 = (CASTING uint_64)(uint_32 $0)
	$0 = ($2 + [92])
	
.LOOP $label$11:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$11 }
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $22($0, $4)
	$0 = *(($2 + [96]))
	$4 = *(($2 + [92]))
	goto $label$12 
	
.LABEL $label$13
	$0 = [0]
	$4 = [0]
	
.LABEL $label$12
	*($2 + [228]) = $4
	*($2 + [224]) = $4
	*($2 + [232]) = $0
	*($2 + [240]) = ($2 + [224])
	*($2 + [248]) = ($2 + [16])
	CALL $23(($2 + [248]), ($2 + [240]))
	CALL $24(($2 + [224]), ($2 + [64]))
	$4 = *($2 + [224])
	CALL send_inline($4, (*($2 + [228]) - $4))
	$4 = *($2 + [224])
	if ( ($4 == 0) ){ goto $label$14 }
	*($2 + [228]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$4 = *($2 + [92])
	if ( ($4 == 0) ){ goto $label$15 }
	*(($2 + [96])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$4 = *($2 + [80])
	if ( ($4 == 0) ){ goto $label$16 }
	*(($2 + [84])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((*(($2 + [48])) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$17
	if ( ((*($2) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$18
	CALL $36(($2 + [104]), $5, $1)
	
.LABEL $label$7
	$0 = *($2 + [128])
	if ( ($0 == 0) ){ goto $label$19 }
	$6 = ($2 + [132])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$23 }
	CALL _ZdlPv($5)
	
.LABEL $label$23
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($2 + [128]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $0
	
.LABEL $label$20
	*($6) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$global$0 = ($2 + [256])
	return (unreachable)
	
.LABEL $label$6
	CALL $68($2)
}

int_32 .FUNC $35 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8829])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $31($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8829])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $33 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	float_64 $14
	int_64 $15
	$2 = ($global$0 - [192])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $4(($2 + [32]), $0)
	CALL eosio_assert(((int_64)*($2 + [64]) == (int_64)1), [8426])
	CALL eosio_assert(((int_64)*($2 + [32]) > (int_64)0), [8331])
	$3 = ($0 + [192])
	$5 = *(($0 + [220]))
	$4 = *(($0 + [216]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8829])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [200])), (int_64)-3020379626561077248, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $27($3, $6)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8829])
	
.LABEL $label$3
	$8 = ($7 == 0)
	goto $label$1 
	
.LABEL $label$2
	$8 = [1]
	
.LABEL $label$1
	$9 = ($0 + [32])
	$5 = *(($0 + [60]))
	$10 = *(($0 + [56]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$10:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$9 }
	$5 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$9), [8829])
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	$6 = CALL db_find_i64(*($9), *(($0 + [40])), (int_64)-4157661083445231616, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $6($9, $6)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$9), [8829])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8533])
	$11 = *($4 + [8])
	$12 = *($2 + [80])
	$13 = *($2 + [32])
	$6 = CALL $72([8414])
	$5 = ($6 <= [8])
	$14 = ((float_64)((float_64)(CASTING float_64)(int_64 $11) / (float_64)(CASTING float_64)(int_64 $13)) * (float_64)(CASTING float_64)(int_64 $12))
	if ( ((float_64)(float_64)|$14| < (float_64)(float_64)9223372036854775808) ){ goto $label$15 }
	$13 = (int_64)-9223372036854775808
	if ( ($5 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$13 = (Rounds 0)($14)
	if ( $5 ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert([0], [8908])
	goto $label$12 
	
.LABEL $label$13
	if ( $6 ){ goto $label$12 }
	$15 = (int_64)4
	goto $label$11 
	
.LABEL $label$12
	$11 = (int_64)0
	
.LOOP $label$16:
	$5 = *(($6 + [8413]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$17
	$11 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$16 }
	$15 = ((int_64)((int_64)$11 << (int_64)8) | (int_64)4)
	
.LABEL $label$11
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9006])
	$11 = (uint_64)$15 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$11 = $12
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$11 = $12
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$22 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$5 = [0]
	
.LABEL $label$18
	CALL eosio_assert($5, [9055])
	$11 = *($0)
	*(($2 + [8])) = $15
	*($2 + [24]) = $15
	*($2 + [16]) = $13
	*($2) = $13
	CALL $28($0, $1, $2, $11)
	if ( ($8 == 0) ){ goto $label$26 }
	$12 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [192])) == (int_64)CALL $fimport$3()), [9659])
	*(($6 = CALL _Znwj([48])) + [32]) = $3
	*($6) = $1
	$11 = CALL current_time()
	*($6 + [16]) = $13
	*($6 + [24]) = $15
	*($6 + [8]) = ((int_64)((int_64)((uint_64)$11 / (uint_64)(int_64)1000000) + (int_64)4294945696) & (int_64)4294967295)
	*($2 + [160]) = (($2 + [112]) + [32])
	*($2 + [156]) = ($2 + [112])
	*($2 + [152]) = ($2 + [112])
	*($2 + [168]) = ($2 + [152])
	*($2 + [180]) = ($6 + [8])
	*($2 + [176]) = $6
	*($2 + [184]) = ($6 + [16])
	CALL $29(($2 + [176]), ($2 + [168]))
	$11 = *($6)
	$4 = CALL db_store_i64(*(($0 + [200])), (int_64)-3020379626561077248, $12, $11, ($2 + [112]), [32])
	*($6 + [36]) = $4
	$5 = ($0 + [208])
	if ( (uint_64)($11 <= *($5)) ){ goto $label$27 }
	*($5) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$27
	*($2 + [176]) = $6
	$11 = *($6)
	*($2 + [112]) = $11
	*($2 + [152]) = $4
	$7 = ($0 + [220])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [224]))) ){ goto $label$25 }
	*($5 + [8]) = $11
	*($5 + [16]) = $4
	*($2 + [176]) = [0]
	*($5) = $6
	*($7) = ($5 + [24])
	$6 = *($2 + [176])
	*($2 + [176]) = [0]
	if ( $6 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$11 = CALL current_time()
	$1 = *($0)
	CALL eosio_assert([1], [9468])
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [9503])
	CALL eosio_assert(((int_64)*(($0 + [192])) == (int_64)CALL $fimport$3()), [9549])
	*($7 + [8]) = ((int_64)((int_64)((uint_64)$11 / (uint_64)(int_64)1000000) + (int_64)4294945696) & (int_64)4294967295)
	$11 = *($7)
	CALL eosio_assert(((int_64)$15 == (int_64)*(($7 + [24]))), [9225])
	$12 = ((int_64)*($7 + [16]) + (int_64)$13)
	*($7 + [16]) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9268])
	CALL eosio_assert(((int_64)*($7 + [16]) < (int_64)4611686018427387904), [9287])
	CALL eosio_assert(((int_64)$11 == (int_64)*($7)), [9600])
	*($2 + [160]) = (($2 + [112]) + [32])
	*($2 + [156]) = ($2 + [112])
	*($2 + [152]) = ($2 + [112])
	*($2 + [168]) = ($2 + [152])
	*($2 + [180]) = ($7 + [8])
	*($2 + [176]) = $7
	*($2 + [184]) = ($7 + [16])
	CALL $29(($2 + [176]), ($2 + [168]))
	CALL db_update_i64(*($7 + [36]), $1, ($2 + [112]), [32])
	$6 = ($0 + [208])
	if ( (uint_64)($11 <= *($6)) ){ goto $label$23 }
	*($6) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$25
	CALL $30(($0 + [216]), ($2 + [176]), ($2 + [112]), ($2 + [152]))
	$6 = *($2 + [176])
	*($2 + [176]) = [0]
	if ( ($6 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv($6)
	
.LABEL $label$23
	$global$0 = ($2 + [192])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8880])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $75($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8903])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8903])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $32(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $78($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9305])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9305])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [8903])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $73(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9924])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $73(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8903])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8903])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8903])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [8903])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $38 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [232])
	$5 = *(($0 + [260]))
	$4 = *(($0 + [256]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [8829])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [240])), (int_64)6761222076679323648, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $10($3, $6)
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$3), [8829])
	
.LABEL $label$1
	CALL eosio_assert(($7 == 0), [8633])
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [232])) == (int_64)CALL $fimport$3()), [9659])
	*(($6 = CALL _Znwj([24])) + [8]) = $3
	*($6) = $1
	CALL eosio_assert([1], [9305])
	CALL memcpy(($2 + [16]), $6, [8])
	$1 = *($6)
	$7 = CALL db_store_i64(*(($0 + [240])), (int_64)6761222076679323648, $8, $1, ($2 + [16]), [8])
	*($6 + [12]) = $7
	$5 = ($0 + [248])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [8]) = $6
	$1 = *($6)
	*($2 + [16]) = $1
	*($2 + [4]) = $7
	$4 = ($0 + [260])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [264]))) ){ goto $label$8 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [8]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $39(($0 + [256]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($2 + [32])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8880])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $75($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8903])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8903])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $53(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $78($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9305])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9305])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9305])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9305])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9305])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9305])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8903])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8903])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}