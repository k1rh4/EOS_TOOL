(data (i32.const 8192) "already have this hash_val!\00")
(data (i32.const 8220) "write\00")
(data (i32.const 8226) "error reading iterator\00")
(data (i32.const 8249) "read\00")
(data (i32.const 8254) "get\00")
(data (i32.const 8258) "cannot increment end iterator\00")
(data (i32.const 8288) "next primary key in table is at autoincrement limit\00")
(data (i32.const 8340) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 8394) "cannot decrement iterator at beginning of table\00")
(data (i32.const 8442) "cannot create objects in table of another contract\00")
(data (i32.const 8493) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8544) "cannot pass end iterator to erase\00")
(data (i32.const 8578) "object passed to erase is not in multi_index\00")
(data (i32.const 8623) "cannot erase objects in table of another contract\00")
(data (i32.const 8673) "attempt to remove object that was not in multi_index\00")
(data (i32.const 17144) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "require_recipient" (func $fimport$1 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "db_next_i64" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$8 (result i32)))
(import "env" "read_action_data" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$13 (param i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "memset" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$30 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$31 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$34 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$36 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$37 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$38 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $11))
(export "_Znwj" (func $19))
(export "_ZdlPv" (func $21))
(export "_Znaj" (func $20))
(export "_ZdaPv" (func $22))
(export "_ZnwjSt11align_val_t" (func $23))
(export "_ZnajSt11align_val_t" (func $24))
(export "_ZdlPvSt11align_val_t" (func $25))
(export "_ZdaPvSt11align_val_t" (func $26))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $7 $2 $1 $10)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17230))
(global $global$2 i32 (i32.const 17230))


int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $30($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $41($0)
	
.LABEL $label$1
}

int_32 .FUNC $33 ()
{
	return [8732]
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $32 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $32($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [8578])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [8623])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8673])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $32($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [48])) = [0]
	*($1 + [32]) = (int_64)-1
	*($1 + [40]) = (int_64)0
	$2 = *($0)
	*($1 + [16]) = $2
	$3 = *($0 + [8])
	*($1 + [24]) = $3
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $3, (int_64)-5003134530400288768, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $3(($1 + [16]), $0)
	$5 = ($1 + [8])
	$4 = *($1 + [4])
	if ( ((int_32)$4 != (int_32)*($5)) ){ goto $label$3 }
	$6 = [3]
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	$6 = [4]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$56 
	
.LABEL $label$57
	$0 = CALL $3(($1 + [16]), $0)
	$4 = *($1 + [4])
	if ( ((int_32)$4 == (int_32)*($5)) ){ goto $label$25 }
	$6 = [0]
	goto $label$4 
	
.LABEL $label$56
	*($4) = *($0)
	*($1 + [4]) = ($4 + [8])
	goto $label$24 
	
.LABEL $label$55
	CALL $8($1, $0)
	$6 = [1]
	goto $label$4 
	
.LABEL $label$54
	CALL eosio_assert([1], [8258])
	$0 = CALL db_next_i64(*($0 + [24]), ($1 + [56]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$23 }
	$6 = [4]
	goto $label$4 
	
.LABEL $label$53
	$8 = *($1 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$22 }
	$6 = [5]
	goto $label$4 
	
.LABEL $label$52
	$9 = ($1 + [44])
	$10 = ($1 + [40])
	$11 = (($1 + [16]) + [8])
	$6 = [6]
	goto $label$4 
	
.LABEL $label$51
	$2 = *($7)
	$4 = *($9)
	$12 = *($10)
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$18 }
	$6 = [7]
	goto $label$4 
	
.LABEL $label$50
	$0 = ($4 + [-24])
	$5 = *($0)
	if ( ((int_64)*($5) == (int_64)$2) ){ goto $label$17 }
	$6 = [8]
	goto $label$4 
	
.LABEL $label$49
	$4 = $0
	if ( ((int_32)$12 != (int_32)$0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$48
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$16 }
	$6 = [31]
	goto $label$4 
	
.LABEL $label$47
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($1 + [16])), [8493])
	if ( $5 ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$46
	$0 = CALL db_find_i64(*($1 + [16]), *($11), (int_64)-5003134530400288768, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$15 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$45
	$5 = CALL $3(($1 + [16]), $0)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($1 + [16])), [8493])
	$6 = [11]
	goto $label$4 
	
.LABEL $label$44
	CALL eosio_assert([1], [8544])
	CALL eosio_assert([1], [8258])
	$0 = CALL db_next_i64(*($5 + [24]), ($1 + [56]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$12 }
	$6 = [12]
	goto $label$4 
	
.LABEL $label$43
	CALL $3(($1 + [16]), $0)
	$6 = [13]
	goto $label$4 
	
.LABEL $label$42
	CALL $9(($1 + [16]), $5)
	$6 = [14]
	goto $label$4 
	
.LABEL $label$41
	$7 = ($7 + [8])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$21 }
	$6 = [15]
	goto $label$4 
	
.LABEL $label$40
	$7 = *($1)
	$6 = [16]
	goto $label$4 
	
.LABEL $label$39
	if ( ($7 == 0) ){ goto $label$11 }
	$6 = [17]
	goto $label$4 
	
.LABEL $label$38
	*($1 + [4]) = $7
	CALL _ZdlPv($7)
	$6 = [18]
	goto $label$4 
	
.LABEL $label$37
	$5 = *($1 + [40])
	if ( ($5 == 0) ){ goto $label$10 }
	$6 = [19]
	goto $label$4 
	
.LABEL $label$36
	$12 = ($1 + [44])
	$0 = *($12)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$9 }
	$6 = [20]
	goto $label$4 
	
.LABEL $label$35
	$6 = [21]
	goto $label$4 
	
.LABEL $label$34
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	$6 = [22]
	goto $label$4 
	
.LABEL $label$33
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$6 }
	$6 = [23]
	goto $label$4 
	
.LABEL $label$32
	CALL _ZdlPv(*(($4 + [16])))
	$6 = [24]
	goto $label$4 
	
.LABEL $label$31
	CALL _ZdlPv($4)
	$6 = [25]
	goto $label$4 
	
.LABEL $label$30
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$8 }
	$6 = [26]
	goto $label$4 
	
.LABEL $label$29
	$0 = *(($1 + [40]))
	goto $label$5 
	
.LABEL $label$28
	$0 = $5
	$6 = [27]
	goto $label$4 
	
.LABEL $label$27
	*($12) = $5
	CALL _ZdlPv($0)
	$6 = [28]
	goto $label$4 
	
.LABEL $label$26
	$global$0 = ($1 + [64])
	return 
	
.LABEL $label$25
	$6 = [3]
	goto $label$4 
	
.LABEL $label$24
	$6 = [1]
	goto $label$4 
	
.LABEL $label$23
	$6 = [2]
	goto $label$4 
	
.LABEL $label$22
	$6 = [16]
	goto $label$4 
	
.LABEL $label$21
	$6 = [6]
	goto $label$4 
	
.LABEL $label$20
	$6 = [9]
	goto $label$4 
	
.LABEL $label$19
	$6 = [7]
	goto $label$4 
	
.LABEL $label$18
	$6 = [9]
	goto $label$4 
	
.LABEL $label$17
	$6 = [30]
	goto $label$4 
	
.LABEL $label$16
	$6 = [9]
	goto $label$4 
	
.LABEL $label$15
	$6 = [14]
	goto $label$4 
	
.LABEL $label$14
	$6 = [14]
	goto $label$4 
	
.LABEL $label$13
	$6 = [11]
	goto $label$4 
	
.LABEL $label$12
	$6 = [13]
	goto $label$4 
	
.LABEL $label$11
	$6 = [18]
	goto $label$4 
	
.LABEL $label$10
	$6 = [28]
	goto $label$4 
	
.LABEL $label$9
	$6 = [29]
	goto $label$4 
	
.LABEL $label$8
	$6 = [21]
	goto $label$4 
	
.LABEL $label$7
	$6 = [25]
	goto $label$4 
	
.LABEL $label$6
	$6 = [24]
	goto $label$4 
	
.LABEL $label$5
	$6 = [27]
	goto $label$4 
	$6
}

int_32 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [24]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8394])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5003134530400288768)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8340])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8340])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $3(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $29($6, *(($4 + [4])))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $38($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [8220])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $18($3, $6)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)-5003134530400288768, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $41($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	$3 = *($0)
	*($2 + [16]) = $3
	$4 = *($0 + [8])
	*($2 + [24]) = $4
	*($2 + [40]) = (int_64)0
	$5 = CALL db_lowerbound_i64($3, $4, (int_64)-5003134530400288768, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$6 = ($1 + [1])
	$7 = CALL $3(($2 + [16]), $5)
	$8 = ($1 + [4])
	
.LOOP $label$8:
	$12 = ($5 & [1])
	$5 = *($1)
	$10 = ($5 & [1])
	$5 = *($7 + [8])
	$9 = uint_32($5 >> [1])
	$11 = ( *(($7 + [12])) ? $9 : $10 )
	if ( ((int_32)$11 != (int_32)( *($8) ? uint_32($5 >> [1]) : $12 )) ){ goto $label$9 }
	$5 = (($7 + [8]) + [1])
	$12 = ( *(($1 + [8])) ? $6 : $12 )
	if ( $10 ){ goto $label$10 }
	if ( ($11 == 0) ){ goto $label$6 }
	$10 = ([0] - $9)
	
.LOOP $label$11:
	if ( ((int_32)*($5) != (int_32)*($12)) ){ goto $label$9 }
	$12 = ($12 + [1])
	$5 = ($5 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$10
	if ( ($11 == 0) ){ goto $label$6 }
	if ( (CALL $35(( *(($7 + [16])) ? $5 : $10 ), $12, $11) == 0) ){ goto $label$6 }
	
.LABEL $label$9
	CALL eosio_assert([1], [8258])
	$5 = CALL db_next_i64(*($7 + [24]), ($2 + [64]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $3(($2 + [16]), $5)
	goto $label$8 
	
.LABEL $label$7
	$5 = ($2 + [32])
	$3 = *($5)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$12 }
	$3 = (int_64)0
	$12 = CALL db_lowerbound_i64(*($2 + [16]), *(($2 + [24])), (int_64)-5003134530400288768, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$13 }
	CALL $3(($2 + [16]), $12)
	*($2 + [68]) = [0]
	*($2 + [64]) = ($2 + [16])
	$3 = *(*(CALL $4(($2 + [64])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*(($2 + [32])) = $3
	
.LABEL $label$12
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [8288])
	*($2 + [8]) = *($5)
	$3 = *($0)
	*($2 + [4]) = $1
	*($2) = ($2 + [8])
	*($2 + [88]) = $3
	CALL eosio_assert(((int_64)*($2 + [16]) == (int_64)CALL $fimport$5()), [8442])
	*($2 + [68]) = $2
	*($2 + [64]) = ($2 + [16])
	*($2 + [72]) = ($2 + [88])
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = ($2 + [16])
	CALL $5(($2 + [64]), $5)
	*($2 + [80]) = $5
	$3 = *($5)
	*($2 + [64]) = $3
	$10 = *($5 + [24])
	*($2 + [60]) = $10
	$7 = ($2 + [44])
	$12 = *($7)
	if ( ((uint_32)$12 >= (uint_32)*((($2 + [16]) + [32]))) ){ goto $label$5 }
	*($12 + [8]) = $3
	*($12 + [16]) = $10
	*($2 + [80]) = [0]
	*($12) = $5
	*($7) = ($12 + [24])
	$5 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL eosio_assert([0], [8192])
	goto $label$4 
	
.LABEL $label$5
	CALL $6(($2 + [40]), ($2 + [80]), ($2 + [64]), ($2 + [60]))
	$5 = *($2 + [80])
	*($2 + [80]) = [0]
	if ( $5 ){ goto $label$3 }
	
.LABEL $label$4
	$10 = *($2 + [40])
	if ( ($10 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$14
	CALL _ZdlPv($5)
	$10 = *($2 + [40])
	if ( ($10 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 + [44])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = ($5 + [-24])
	$12 = *($5)
	*($5) = [0]
	if ( ($12 == 0) ){ goto $label$18 }
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($12 + [16])))
	
.LABEL $label$19
	CALL _ZdlPv($12)
	
.LABEL $label$18
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$17 }
	$5 = *(($2 + [40]))
	goto $label$15 
	
.LABEL $label$16
	$5 = $10
	
.LABEL $label$15
	*($7) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($2 + [96])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8226])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $38($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8249])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $15(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $41($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($0))
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $38($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8249])
	CALL memcpy(($4 + [72]), $2, [8])
	*($4 + [60]) = ($2 + [8])
	$8 = (($4 + [72]) + [8])
	CALL $15(($4 + [56]), $8)
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [96]) + [8])) = $3
	*(($9 = (($4 + [112]) + [8]))) = $3
	$10 = *($4 + [8])
	*($4 + [112]) = $10
	*($4 + [96]) = $10
	$3 = *($9)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	$0 = *($4 + [72])
	$8 = CALL $28(($4 + [128]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( (*($4 + [128]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $41($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $17($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $31($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $31($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $27($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $32($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8254])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $16($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8249])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	$4 = *($0 + [8])
	*($2 + [24]) = $4
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$0 = CALL db_lowerbound_i64($3, $4, (int_64)-5003134530400288768, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$5 = ($1 + [1])
	$6 = CALL $3(($2 + [16]), $0)
	$7 = ($1 + [4])
	
.LOOP $label$2:
	$11 = ($0 & [1])
	$0 = *($1)
	$9 = ($0 & [1])
	$0 = *($6 + [8])
	$8 = uint_32($0 >> [1])
	$10 = ( *(($6 + [12])) ? $8 : $9 )
	if ( ((int_32)$10 != (int_32)( *($7) ? uint_32($0 >> [1]) : $11 )) ){ goto $label$3 }
	$0 = (($6 + [8]) + [1])
	$11 = ( *(($1 + [8])) ? $5 : $11 )
	if ( $9 ){ goto $label$5 }
	if ( ($10 == 0) ){ goto $label$4 }
	$9 = ([0] - $8)
	
.LOOP $label$6:
	if ( ((int_32)*($0) != (int_32)*($11)) ){ goto $label$3 }
	$11 = ($11 + [1])
	$0 = ($0 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ($10 == 0) ){ goto $label$4 }
	if ( CALL $35(( *(($6 + [16])) ? $0 : $9 ), $11, $10) ){ goto $label$3 }
	
.LABEL $label$4
	$0 = *($2 + [4])
	if ( ((int_32)$0 == (int_32)*(($2 + [8]))) ){ goto $label$7 }
	*($0) = *($6)
	*($2 + [4]) = ($0 + [8])
	goto $label$3 
	
.LABEL $label$7
	CALL $8($2, $6)
	
.LABEL $label$3
	CALL eosio_assert([1], [8258])
	$0 = CALL db_next_i64(*($6 + [24]), ($2 + [56]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL $3(($2 + [16]), $0)
	goto $label$2 
	
.LABEL $label$1
	$1 = *($2 + [4])
	$10 = *($2)
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$8 }
	$8 = ($2 + [44])
	$7 = ($2 + [40])
	$5 = (($2 + [16]) + [8])
	
.LOOP $label$9:
	$3 = *($10)
	$11 = *($8)
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$12 }
	
.LOOP $label$14:
	$0 = ($11 + [-24])
	$9 = *($0)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$13 }
	$11 = $0
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($9 + [20]) == (int_32)($2 + [16])), [8493])
	if ( $9 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$0 = CALL db_find_i64(*($2 + [16]), *($5), (int_64)-5003134530400288768, $3)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$10 }
	$9 = CALL $3(($2 + [16]), $0)
	CALL eosio_assert(((int_32)*($9 + [20]) == (int_32)($2 + [16])), [8493])
	
.LABEL $label$11
	CALL eosio_assert([1], [8544])
	CALL eosio_assert([1], [8258])
	$0 = CALL db_next_i64(*($9 + [24]), ($2 + [56]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$15 }
	CALL $3(($2 + [16]), $0)
	
.LABEL $label$15
	CALL $9(($2 + [16]), $9)
	
.LABEL $label$10
	$10 = ($10 + [8])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$9 }
	$10 = *($2)
	
.LABEL $label$8
	if ( ($10 == 0) ){ goto $label$16 }
	*($2 + [4]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$16
	$9 = *($2 + [40])
	if ( ($9 == 0) ){ goto $label$17 }
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$19 }
	
.LOOP $label$20:
	$0 = ($0 + [-24])
	$11 = *($0)
	*($0) = [0]
	if ( ($11 == 0) ){ goto $label$21 }
	if ( ((*($11 + [8]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($11 + [16])))
	
.LABEL $label$22
	CALL _ZdlPv($11)
	
.LABEL $label$21
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$20 }
	$0 = *(($2 + [40]))
	goto $label$18 
	
.LABEL $label$19
	$0 = $9
	
.LABEL $label$18
	*($6) = $9
	CALL _ZdlPv($0)
	
.LABEL $label$17
	$global$0 = ($2 + [64])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)6182744235082914303) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-7119375207604682752) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)6182744210987286528) ){ goto $label$1 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [1]
	*($3 + [8]) = *($3 + [48])
	CALL $12($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$2 == (int_64)6182744235082914304) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8426423898551091200) ){ goto $label$1 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [2]
	*($3) = *($3 + [56])
	CALL $13($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [36]) = [0]
	*($3 + [32]) = [3]
	*($3 + [24]) = *($3 + [32])
	CALL $14($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [44]) = [0]
	*($3 + [40]) = [4]
	*($3 + [16]) = *($3 + [40])
	CALL $13($1, $1, ($3 + [16]))
	
.LABEL $label$1
	CALL $34([0])
	$global$0 = ($3 + [64])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $38($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $41($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $38($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	CALL $15(($4 + [48]), ($4 + [64]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [80]) + [8])) = $3
	*(($8 = (($4 + [96]) + [8]))) = $3
	$9 = *($4)
	*($4 + [96]) = $9
	*($4 + [80]) = $9
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [96])
	*($4 + [32]) = $0
	*($4 + [112]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = CALL $28(($4 + [112]), ($4 + [64]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $41($2)
	$2 = [1]
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [64]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [72])))
	$global$0 = ($4 + [128])
	return $2
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $41($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $36(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8728])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $36(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8220])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8220])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $38($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8728])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $38($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $27 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $33())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $37($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $38($1)
	
.LABEL $label$2
	*(CALL $33()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $38(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $41($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $38 (int_32 $0)
{
	return CALL $39([8748], $0)
}

void .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17132])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16940]
	$3 = (((int_32)$1 * (int_32)[12]) + [16940])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8740]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8744])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8740]) = [1]
	$2 = ($2 << [16])
	*([0] + [8744]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8744])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8744]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8740]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8740]) = [1]
	$3 = ($3 << [16])
	*([0] + [8744]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8744])
	
.LABEL $label$10
	*([0] + [8744]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $34 (int_32 $0)
{
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $40($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [17144])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}