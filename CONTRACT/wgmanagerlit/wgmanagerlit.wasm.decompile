(data (i32.const 4) "Pd\00\00")
(data (i32.const 16) "eosio.token\00")
(data (i32.const 32) "transfer\00")
(data (i32.const 48) "Must transfer EOS\00")
(data (i32.const 80) "cannot pass end iterator to erase\00")
(data (i32.const 128) "cannot increment end iterator\00")
(data (i32.const 160) "object passed to erase is not in multi_index\00")
(data (i32.const 208) "cannot erase objects in table of another contract\00")
(data (i32.const 272) "attempt to remove object that was not in multi_index\00")
(data (i32.const 336) "error reading iterator\00")
(data (i32.const 368) "read\00")
(data (i32.const 384) "Contract is init\00")
(data (i32.const 416) "cannot create objects in table of another contract\00")
(data (i32.const 480) "write\00")
(data (i32.const 496) "Contract is not init\00")
(data (i32.const 528) "ico is not start!\00")
(data (i32.const 560) "receiver must be welfareadmin\00")
(data (i32.const 592) "Invalid asset\00")
(data (i32.const 608) "referral account is wrong!\00")
(data (i32.const 640) "active\00")
(data (i32.const 656) "welfareadmin\00")
(data (i32.const 672) "invalid symbol name\00")
(data (i32.const 704) "ico referral\00")
(data (i32.const 720) "ico\00")
(data (i32.const 736) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 800) "get\00")
(data (i32.const 9200) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_get_i64" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$9 (param i32 i32)))
(import "env" "is_account" (func $fimport$10 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$13 (param i64)))
(import "env" "require_auth2" (func $fimport$14 (param i64 i64)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $28))
(export "free" (func $31))
(export "memcmp" (func $37))
(export "strlen" (func $38))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $39 $6 $8 $10)



int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $30($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9200])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $32(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $33($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $29([804], $0)
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [368])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [368])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [368])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [368])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $26(*($1), *($0 + [12]))
}

void .FUNC $33 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [736])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [672])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $25(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9292])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9286]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9288])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9286]) = [1]
	$7 = ($7 << [16])
	*([0] + [9288]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9288])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9288]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9286]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9286]) = [1]
	$3 = ($3 << [16])
	*([0] + [9288]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9288])
	
.LABEL $label$8
	*([0] + [9288]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5 + [28]) = $1
	*($5 + [24]) = $2
	CALL require_auth(*($0))
	$2 = ($0 + [8])
	$1 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-4157493845350678528, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $12($2, $3)
	goto $label$1 
	
.LABEL $label$2
	$1 = [1]
	
.LABEL $label$1
	CALL eosio_assert($1, [384])
	$4 = *($0)
	*($5 + [20]) = ($5 + [24])
	*($5 + [16]) = ($5 + [28])
	CALL $15(($5 + [8]), $2, $4, ($5 + [16]))
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = (*([0] + [4]) - [16])
	$5 = $3
	*([0] + [4]) = $3
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [368])
	CALL memcpy(($5 + [8]), $3, [4])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[4]), [368])
	CALL memcpy((($5 + [8]) | [4]), ($3 + [4]), [4])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *($5 + [12])
	$0 = *($5 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$4 = *((*($1) + $4))
	
.LABEL $label$6
	CALL void $1((int_32 $0), (int_32 $3), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [192])
	*([0] + [4]) = $17
	CALL $17(($17 + [112]))
	if ( ((int_64)*($17 + [112]) == (int_64)*($0)) ){ goto $label$3 }
	$7 = [0]
	$10 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-4157493845350678528, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$10 = CALL $12(($0 + [8]), $5)
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [496])
	$5 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	if ( ($5 <= *($10 + [8])) ){ goto $label$5 }
	$7 = ((uint_32)$5 <= (uint_32)*($10 + [12]))
	
.LABEL $label$5
	CALL eosio_assert($7, [528])
	CALL eosio_assert(((int_64)*($17 + [120]) == (int_64)*($0)), [560])
	$7 = [0]
	if ( ((uint_64)((int_64)*($17 + [128]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$12 = (uint_64)*((($17 + [112]) + [24])) >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$7 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [592])
	$15 = *($0)
	$10 = ($10 & [1])
	$10 = *($17 + [144])
	if ( (( *(($17 + [148])) ? uint_32($10 >> [1]) : $10 ) == 0) ){ goto $label$12 }
	$10 = ( *(($17 + [152])) ? (($17 + [144]) + [1]) : $10 )
	$7 = [-1]
	
.LOOP $label$13:
	$5 = ($10 + $7)
	$3 = ($7 + [1])
	$7 = $3
	if ( *(($5 + [1])) ){ goto $label$13 }
	$13 = (CASTING uint_64)(uint_32 $3)
	$12 = (int_64)0
	$14 = (int_64)59
	$8 = (int_64)0
	
.LOOP $label$14:
	$11 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$13) ){ goto $label$15 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$7 = ($7 + [165])
	goto $label$16 
	
.LABEL $label$17
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$19 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	goto $label$18 
	
.LABEL $label$19
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$18
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$8 = ((int_64)$11 | (int_64)$8)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$14 }
	$10 = [0]
	if ( ((int_64)$8 == (int_64)$15) ){ goto $label$20 }
	if ( ((int_64)$8 == (int_64)*($17 + [112])) ){ goto $label$20 }
	$10 = CALL is_account($8)
	
.LABEL $label$20
	CALL eosio_assert($10, [608])
	goto $label$11 
	
.LABEL $label$12
	$8 = $15
	
.LABEL $label$11
	$12 = *(($17 + [128]))
	if ( ((int_64)$12 > (int_64)1999999) ){ goto $label$22 }
	$9 = ((int_64)*($0 + [48]) * (int_64)$12)
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_64)$12 > (int_64)4999999) ){ goto $label$23 }
	$9 = ((int_64)((int_64)((int_64)$12 * (int_64)*($0 + [48])) * (int_64)110) / (int_64)100)
	goto $label$21 
	
.LABEL $label$23
	if ( ((int_64)$12 > (int_64)19999999) ){ goto $label$24 }
	$9 = ((int_64)((int_64)((int_64)$12 * (int_64)*($0 + [48])) * (int_64)120) / (int_64)100)
	goto $label$21 
	
.LABEL $label$24
	$14 = ((int_64)*($0 + [48]) * (int_64)$12)
	if ( ((int_64)$12 > (int_64)49999999) ){ goto $label$25 }
	$9 = ((int_64)((int_64)$14 * (int_64)130) / (int_64)100)
	goto $label$21 
	
.LABEL $label$25
	$9 = ((int_64)((int_64)$14 * (int_64)140) / (int_64)100)
	
.LABEL $label$21
	$4 = *($0)
	if ( ((int_64)$8 == (int_64)$4) ){ goto $label$26 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [640]
	$13 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$32 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$7 = ($7 + [165])
	goto $label$30 
	
.LABEL $label$32
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$28
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$27 }
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [656]
	$15 = (int_64)0
	
.LOOP $label$33:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$34 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$7 = ($7 + [165])
	goto $label$35 
	
.LABEL $label$36
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$34
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$11 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$33 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [32]
	$16 = (int_64)0
	
.LOOP $label$37:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$42 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$7 = ($7 + [165])
	goto $label$40 
	
.LABEL $label$42
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$41
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$39
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$38
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$37 }
	$14 = ((int_64)$9 / (int_64)10)
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [736])
	$12 = (int_64)22343
	$10 = [0]
	
.LOOP $label$45:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$44 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$46 }
	
.LOOP $label$47:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$47 }
	
.LABEL $label$46
	$7 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	$7 = [0]
	
.LABEL $label$43
	CALL eosio_assert($7, [672])
	*(($17 + [16])) = [0]
	*($17 + [8]) = (int_64)0
	$10 = CALL strlen([704])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$50 }
	*($17 + [8]) = ($10 << [1])
	$7 = (($17 + [8]) | [1])
	if ( $10 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$5 = (($10 + [16]) & [-16])
	$7 = CALL $32($5)
	*($17 + [8]) = ($5 | [1])
	*($17 + [16]) = $7
	*($17 + [12]) = $10
	
.LABEL $label$49
	CALL memcpy($7, [704], $10)
	
.LABEL $label$48
	*(($7 + $10)) = [0]
	*((($17 + [24]) + [24])) = (int_64)5719812
	*(($7 = (($17 + [24]) + [36]))) = *($17 + [12])
	*($17 + [32]) = $8
	$10 = ($17 + [16])
	*(($17 + [64])) = *($10)
	*($17 + [24]) = *($0)
	*($17 + [40]) = $14
	*($17 + [56]) = *($17 + [8])
	*($17 + [8]) = [0]
	*($17 + [12]) = [0]
	*($10) = [0]
	*($17 + [72]) = $15
	*($17 + [80]) = $16
	*($17 + [88]) = [0]
	*(($5 = ($17 + [92]))) = [0]
	*(($3 = (($17 + [72]) + [24]))) = [0]
	*(($10 = CALL $32([16]))) = $4
	*($10 + [8]) = $13
	*((($17 + [72]) + [32])) = [0]
	$6 = ($10 + [16])
	*($3) = $6
	*($5) = $6
	*($17 + [88]) = $10
	*($17 + [100]) = [0]
	*((($17 + [72]) + [36])) = [0]
	$10 = *($17 + [56])
	$7 = ( *($7) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($7 + [32])
	$12 = (CASTING uint_64)(uint_32 $7)
	$7 = ($17 + [100])
	
.LOOP $label$51:
	$10 = ($10 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$51 }
	if ( ($10 == 0) ){ goto $label$53 }
	CALL $18($7, $10)
	$7 = *(($17 + [104]))
	$10 = *(($17 + [100]))
	goto $label$52 
	
.LABEL $label$53
	$7 = [0]
	$10 = [0]
	
.LABEL $label$52
	*($17 + [180]) = $10
	*($17 + [176]) = $10
	*($17 + [184]) = $7
	*($17 + [160]) = ($17 + [176])
	*($17 + [168]) = ($17 + [24])
	CALL $19(($17 + [168]), ($17 + [160]))
	CALL $20(($17 + [176]), ($17 + [72]))
	$10 = *($17 + [176])
	CALL send_inline($10, (*($17 + [180]) - $10))
	$10 = *($17 + [176])
	if ( ($10 == 0) ){ goto $label$54 }
	*($17 + [180]) = $10
	CALL $33($10)
	
.LABEL $label$54
	$10 = *($17 + [100])
	if ( ($10 == 0) ){ goto $label$55 }
	*(($17 + [104])) = $10
	CALL $33($10)
	
.LABEL $label$55
	$10 = *($17 + [88])
	if ( ($10 == 0) ){ goto $label$56 }
	*(($17 + [92])) = $10
	CALL $33($10)
	
.LABEL $label$56
	if ( ((*(($17 + [56])) & [1]) == 0) ){ goto $label$57 }
	CALL $33(*(($17 + [64])))
	
.LABEL $label$57
	if ( ((*($17 + [8]) & [1]) == 0) ){ goto $label$58 }
	CALL $33(*(($17 + [16])))
	
.LABEL $label$58
	$9 = ((int_64)((int_64)$9 * (int_64)102) / (int_64)100)
	$8 = *($0)
	
.LABEL $label$26
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [640]
	$13 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$64 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$7 = ($7 + [165])
	goto $label$62 
	
.LABEL $label$64
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$60
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$59 }
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [656]
	$15 = (int_64)0
	
.LOOP $label$65:
	$11 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$66 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$68 }
	$7 = ($7 + [165])
	goto $label$67 
	
.LABEL $label$68
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$67
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$66
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$15 = ((int_64)$11 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$65 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [32]
	$16 = (int_64)0
	
.LOOP $label$69:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$74 }
	$7 = *($10)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$73 }
	$7 = ($7 + [165])
	goto $label$72 
	
.LABEL $label$74
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$73
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$72
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$71
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$70
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$69 }
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [736])
	$12 = (int_64)22343
	$10 = [0]
	
.LOOP $label$77:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$76 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$78 }
	
.LOOP $label$79:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$76 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$79 }
	
.LABEL $label$78
	$7 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$77 }
	goto $label$75 
	
.LABEL $label$76
	$7 = [0]
	
.LABEL $label$75
	CALL eosio_assert($7, [672])
	*(($17 + [16])) = [0]
	*($17 + [8]) = (int_64)0
	$10 = CALL strlen([720])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$82 }
	*($17 + [8]) = ($10 << [1])
	$7 = (($17 + [8]) | [1])
	if ( $10 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	$5 = (($10 + [16]) & [-16])
	$7 = CALL $32($5)
	*($17 + [8]) = ($5 | [1])
	*($17 + [16]) = $7
	*($17 + [12]) = $10
	
.LABEL $label$81
	CALL memcpy($7, [720], $10)
	
.LABEL $label$80
	*(($7 + $10)) = [0]
	*((($17 + [24]) + [24])) = (int_64)5719812
	*($17 + [24]) = *($0)
	*($17 + [32]) = *($17 + [112])
	$10 = ($17 + [16])
	*(($17 + [64])) = *($10)
	*($17 + [40]) = $9
	*($17 + [56]) = *($17 + [8])
	*($17 + [8]) = [0]
	*($17 + [12]) = [0]
	*($10) = [0]
	*($17 + [72]) = $15
	*($17 + [80]) = $16
	*(($10 = CALL $32([16]))) = $8
	*($10 + [8]) = $13
	*((($17 + [72]) + [32])) = [0]
	$7 = ($10 + [16])
	*((($17 + [72]) + [24])) = $7
	*(($17 + [92])) = $7
	*($17 + [88]) = $10
	*($17 + [100]) = [0]
	*((($17 + [72]) + [36])) = [0]
	$10 = *($17 + [56])
	$7 = ( *((($17 + [24]) + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($7 + [32])
	$12 = (CASTING uint_64)(uint_32 $7)
	$7 = ($17 + [100])
	
.LOOP $label$83:
	$10 = ($10 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$83 }
	if ( ($10 == 0) ){ goto $label$85 }
	CALL $18($7, $10)
	$7 = *(($17 + [104]))
	$10 = *(($17 + [100]))
	goto $label$84 
	
.LABEL $label$85
	$7 = [0]
	$10 = [0]
	
.LABEL $label$84
	*($17 + [180]) = $10
	*($17 + [176]) = $10
	*($17 + [184]) = $7
	*($17 + [160]) = ($17 + [176])
	*($17 + [168]) = ($17 + [24])
	CALL $19(($17 + [168]), ($17 + [160]))
	CALL $20(($17 + [176]), ($17 + [72]))
	$10 = *($17 + [176])
	CALL send_inline($10, (*($17 + [180]) - $10))
	$10 = *($17 + [176])
	if ( ($10 == 0) ){ goto $label$86 }
	*($17 + [180]) = $10
	CALL $33($10)
	
.LABEL $label$86
	$10 = *($17 + [100])
	if ( ($10 == 0) ){ goto $label$87 }
	*(($17 + [104])) = $10
	CALL $33($10)
	
.LABEL $label$87
	$10 = *($17 + [88])
	if ( ($10 == 0) ){ goto $label$88 }
	*(($17 + [92])) = $10
	CALL $33($10)
	
.LABEL $label$88
	if ( ((*(($17 + [56])) & [1]) == 0) ){ goto $label$89 }
	CALL $33(*(($17 + [64])))
	
.LABEL $label$89
	if ( ((*($17 + [8]) & [1]) == 0) ){ goto $label$3 }
	CALL $33(*(($17 + [16])))
	
.LABEL $label$3
	if ( ((*(($17 + [144])) & [1]) == 0) ){ goto $label$90 }
	CALL $33(*(($17 + [152])))
	
.LABEL $label$90
	*([0] + [4]) = ($17 + [192])
	return (unreachable)
	
.LABEL $label$2
	CALL $34(($17 + [8]))
	
.LABEL $label$1
	CALL $34(($17 + [8]))
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [368])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [368])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [112])
	*([0] + [4]) = $11
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$8 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$3 = ($3 + [165])
	goto $label$6 
	
.LABEL $label$8
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$3 }
	if ( ((int_64)$9 != (int_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$14 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$16 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [48])
	
.LABEL $label$15
	*(($11 + [72])) = $0
	*(($11 + [80])) = (int_64)-1
	*(($11 + [88])) = (int_64)0
	*(($11 + [96])) = [0]
	*($11 + [64]) = $0
	*($11 + [56]) = $0
	*($11 + [104]) = (int_64)20000
	if ( ((int_64)$2 == (int_64)8421045207927095296) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)-3108267265179516928) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$22 }
	*($11 + [52]) = [0]
	*($11 + [48]) = [1]
	*($11 + [8 align=4]) = *($11 + [48])
	CALL $7(($11 + [56]), ($11 + [8]))
	goto $label$22 
	
.LABEL $label$24
	*($11 + [44]) = [0]
	*($11 + [40]) = [2]
	*($11 + [16 align=4]) = *($11 + [40])
	CALL $9(($11 + [56]), ($11 + [16]))
	goto $label$22 
	
.LABEL $label$23
	*($11 + [36]) = [0]
	*($11 + [32]) = [3]
	*($11 + [24 align=4]) = *($11 + [32])
	CALL $11(($11 + [56]), ($11 + [24]))
	
.LABEL $label$22
	$4 = *(($11 + [88]))
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($11 + [92])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$26 }
	
.LOOP $label$27:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$28 }
	CALL $33($3)
	
.LABEL $label$28
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$27 }
	$6 = *(($11 + [88]))
	goto $label$25 
	
.LABEL $label$26
	$6 = $4
	
.LABEL $label$25
	*($5) = $4
	CALL $33($6)
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [112])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $32(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $36($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $33($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $33($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [416])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $32([32])) + [16]) = $1
	CALL $16(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $14(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $33($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = *($0 + [4])
	*($1) = (int_64)0
	*($1 + [8]) = *(*($4))
	$2 = *($0)
	*($1 + [12]) = *(*($4 + [4]))
	CALL eosio_assert([1], [480])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [480])
	CALL memcpy(($5 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [480])
	CALL memcpy(($5 | [12]), ($1 + [12]), [4])
	$3 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)-4157493845350678528, *(*($0 + [8])), $3, $5, [16])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $24($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

void .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL require_auth(*($0))
	$1 = ($0 + [8])
	$2 = [0]
	$0 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-4157493845350678528, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $12($1, $0)
	
.LABEL $label$1
	$0 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($0, [80])
	CALL eosio_assert($0, [128])
	$0 = CALL db_next_i64(*($2 + [20]), ($3 + [8]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	CALL $12($1, $0)
	
.LABEL $label$2
	CALL $13($1, $2)
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [336])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $32([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [368])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-4])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [368])
	CALL memcpy(($6 + [8]), ($7 + [8]), [4])
	CALL eosio_assert(((int_32)$4 != (int_32)[12]), [368])
	CALL memcpy(($6 + [12]), ($7 + [12]), [4])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $14(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $33($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [160])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [208])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [272])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $33($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $33($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [480])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [480])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [480])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $18($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [480])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [480])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $22(CALL $21($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [480])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [480])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [480])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [480])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $32($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $36($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $33($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [480])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $23(*($1), ($0 + [32]))
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [800])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $18($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [368])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $27($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $35($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $32($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $35($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $33($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $34($7)
	return (unreachable)
}

void .FUNC $36 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9188])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [8996]
	$1 = (((int_32)$2 * (int_32)[12]) + [8996])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $34 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $39 ()
{
	(unreachable)
}