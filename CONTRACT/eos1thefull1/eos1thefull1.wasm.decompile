(data (i32.const 4) "\10g\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "deposit\00")
(data (i32.const 128) "eosio.token\00")
(data (i32.const 144) "transfer\00")
(data (i32.const 160) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 224) "invalid symbol name\00")
(data (i32.const 256) "read\00")
(data (i32.const 272) "get\00")
(data (i32.const 288) "Invalid token transfer\00")
(data (i32.const 320) "Quantity must be positive\00")
(data (i32.const 352) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 416) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 480) "Not enough eos\00")
(data (i32.const 496) "Overdrawn balance\00")
(data (i32.const 528) "Account not found! please make new account\00")
(data (i32.const 576) "cannot pass end iterator to modify\00")
(data (i32.const 624) "Service-Account not found! please make new account\00")
(data (i32.const 688) "active\00")
(data (i32.const 704) "only accepts COF for fee\00")
(data (i32.const 736) "only accepts EOS for deposits\00")
(data (i32.const 768) "write\00")
(data (i32.const 784) "object passed to modify is not in multi_index\00")
(data (i32.const 832) "cannot modify objects in table of another contract\00")
(data (i32.const 896) "updater cannot change primary key when modifying an object\00")
(data (i32.const 960) "attempt to subtract asset with different symbol\00")
(data (i32.const 1008) "subtraction underflow\00")
(data (i32.const 1040) "subtraction overflow\00")
(data (i32.const 1072) "error reading iterator\00")
(data (i32.const 1104) "Key already exists\00")
(data (i32.const 1136) "cannot create objects in table of another contract\00")
(data (i32.const 1200) "Receiver-Account not found! please make new account\00")
(data (i32.const 1264) "complete!\00")
(data (i32.const 1280) "memo has more than 256 bytes\00")
(data (i32.const 1312) "only accepts COF\00")
(data (i32.const 1344) "invalid quantity\00")
(data (i32.const 1376) "must transfer positive quantity\00")
(data (i32.const 1408) "attempt to add asset with different symbol\00")
(data (i32.const 1456) "addition underflow\00")
(data (i32.const 1488) "addition overflow\00")
(data (i32.const 9904) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "assert_recover_key" (func $fimport$2 (param i32 i32 i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$9 (param i32 i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$13 (param i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth2" (func $fimport$15 (param i64 i64)))
(import "env" "send_inline" (func $fimport$16 (param i32 i32)))
(import "env" "sha256" (func $fimport$17 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $59))
(export "free" (func $62))
(export "memcmp" (func $71))
(export "strncpy" (func $72))
(export "__stpncpy" (func $73))
(table $0 6 6 anyfunc)
(elem (i32.const 0) $74 $12 $8 $14 $10 $6)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[33]), [256])
	CALL memcpy($2, *($3 + [4]), [34])
	*($3 + [4]) = (*($3 + [4]) + [34])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $19(*($1), ($0 + [64]))
	*($4 + [8]) = $0
	CALL $20(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9892])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9700]
	$1 = (((int_32)$2 * (int_32)[12]) + [9700])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $22($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $68($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $63($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $68($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $64($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $65($7)
	return (unreachable)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $67($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $65 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [256])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $19(*($1), *($0 + [12]))
}

int_32 .FUNC __stpncpy (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((((int_32)$1 ^ (int_32)$0) & [3]) == 0) ){ goto $label$4 }
	$4 = $2
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$9 }
	if ( (($1 & [3]) == 0) ){ goto $label$8 }
	
.LOOP $label$10:
	$4 = *($1)
	*($0) = $4
	if ( ($4 == 0) ){ goto $label$6 }
	$3 = ((int_32)$2 != (int_32)[1])
	$0 = ($0 + [1])
	$4 = ($2 + [-1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $4
	if ( ($1 & [3]) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	$4 = $2
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$8
	$4 = $2
	
.LABEL $label$7
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	if ( (*($1) == 0) ){ goto $label$2 }
	if ( ($4 <= [4]) ){ goto $label$3 }
	
.LOOP $label$11:
	$2 = *($1)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$3 }
	*($0) = $2
	$0 = ($0 + [4])
	$1 = ($1 + [4])
	$4 = ($4 + [-4])
	if ( ((uint_32)$4 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$3
	$5 = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	
.LOOP $label$12:
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$2 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$2
	$5 = $4
	
.LABEL $label$1
	CALL memset($0, [0], $5)
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $63($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $64($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [768])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [768])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [768])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [768])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [768])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $30(CALL $29($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [256])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [256])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [272])
	*([0] + [4]) = $5
	$2 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [80]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [88]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	*($5) = *($1)
	*($5 + [12]) = ($4 + [97])
	*($5 + [8]) = ($4 + [96])
	*($5 + [16]) = ($4 + [98])
	*($5 + [20]) = ($4 + [99])
	*($5 + [24]) = ($4 + [100])
	*($5 + [28]) = ($4 + [101])
	*($5 + [32]) = ($4 + [102])
	*($5 + [36]) = ($4 + [103])
	*($5 + [40]) = ($4 + [104])
	*($5 + [44]) = ($4 + [105])
	*($5 + [48]) = ($4 + [106])
	*($5 + [52]) = ($4 + [107])
	*($5 + [56]) = ($4 + [108])
	*($5 + [60]) = ($4 + [109])
	*($5 + [64]) = ($4 + [110])
	*($5 + [68]) = ($4 + [111])
	*($5 + [72]) = ($4 + [112])
	*($5 + [76]) = ($4 + [113])
	*($5 + [80]) = ($4 + [114])
	*($5 + [84]) = ($4 + [115])
	*($5 + [88]) = ($4 + [116])
	*($5 + [92]) = ($4 + [117])
	*($5 + [96]) = ($4 + [118])
	*($5 + [100]) = ($4 + [119])
	*($5 + [104]) = ($4 + [120])
	*($5 + [108]) = ($4 + [121])
	*($5 + [112]) = ($4 + [122])
	*($5 + [116]) = ($4 + [123])
	*($5 + [120]) = ($4 + [124])
	*($5 + [124]) = ($4 + [125])
	*($5 + [128]) = ($4 + [126])
	*($5 + [132]) = ($4 + [127])
	*($5 + [136]) = ($4 + [128])
	*($5 + [140]) = ($4 + [129])
	*($5 + [144]) = ($4 + [130])
	*($5 + [148]) = ($4 + [131])
	*($5 + [152]) = ($4 + [132])
	*($5 + [156]) = ($4 + [133])
	*($5 + [160]) = ($4 + [134])
	*($5 + [164]) = ($4 + [135])
	*($5 + [168]) = ($4 + [136])
	*($5 + [172]) = ($4 + [137])
	*($5 + [176]) = ($4 + [138])
	*($5 + [180]) = ($4 + [139])
	*($5 + [184]) = ($4 + [140])
	*($5 + [188]) = ($4 + [141])
	*($5 + [192]) = ($4 + [142])
	*($5 + [196]) = ($4 + [143])
	*($5 + [200]) = ($4 + [144])
	*($5 + [204]) = ($4 + [145])
	*($5 + [208]) = ($4 + [146])
	*($5 + [212]) = ($4 + [147])
	*($5 + [216]) = ($4 + [148])
	*($5 + [220]) = ($4 + [149])
	*($5 + [224]) = ($4 + [150])
	*($5 + [228]) = ($4 + [151])
	*($5 + [232]) = ($4 + [152])
	*($5 + [236]) = ($4 + [153])
	*($5 + [240]) = ($4 + [154])
	*($5 + [244]) = ($4 + [155])
	*($5 + [248]) = ($4 + [156])
	*($5 + [252]) = ($4 + [157])
	*($5 + [256]) = ($4 + [158])
	*($5 + [260]) = ($4 + [159])
	*($5 + [264]) = ($4 + [160])
	*($5 + [268]) = ($4 + [161])
	CALL $21(($5 + [8]), $5)
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[33]), [256])
	CALL memcpy(($4 + [162]), *($1 + [4]), [34])
	*($1 + [4]) = (*($1 + [4]) + [34])
	*([0] + [4]) = ($5 + [272])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $63($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $69($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $64($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [272])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $23($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [256])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [80]))), [960])
	$6 = (int_64)
	*($1 + [72]) = $6(*($1 + [72]) - *($5)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1008])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [1040])
	$3 = *($3 + [4])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	*($1 + [56]) = (int_64))(*($1 + [56]) - *($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [896])
	*($7 + [104]) = ($7 + [82])
	*($7 + [100]) = $7
	*($7 + [96]) = $7
	CALL $32(($7 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $7, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [112])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1072])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $63([104])
	$4 = CALL $33($6)
	*($6 + [88]) = $0
	CALL $34(($8 + [32]), $4)
	*($6 + [92]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [92])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $35(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $64($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $31(*($1), ($0 + [32]))
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [896])
	*($5 + [104]) = ($5 + [82])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $32(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $74 ()
{
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [272])
	*([0] + [4]) = $5
	$2 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [104]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [112]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	*($5) = *($1)
	*($5 + [12]) = ($4 + [121])
	*($5 + [8]) = ($4 + [120])
	*($5 + [16]) = ($4 + [122])
	*($5 + [20]) = ($4 + [123])
	*($5 + [24]) = ($4 + [124])
	*($5 + [28]) = ($4 + [125])
	*($5 + [32]) = ($4 + [126])
	*($5 + [36]) = ($4 + [127])
	*($5 + [40]) = ($4 + [128])
	*($5 + [44]) = ($4 + [129])
	*($5 + [48]) = ($4 + [130])
	*($5 + [52]) = ($4 + [131])
	*($5 + [56]) = ($4 + [132])
	*($5 + [60]) = ($4 + [133])
	*($5 + [64]) = ($4 + [134])
	*($5 + [68]) = ($4 + [135])
	*($5 + [72]) = ($4 + [136])
	*($5 + [76]) = ($4 + [137])
	*($5 + [80]) = ($4 + [138])
	*($5 + [84]) = ($4 + [139])
	*($5 + [88]) = ($4 + [140])
	*($5 + [92]) = ($4 + [141])
	*($5 + [96]) = ($4 + [142])
	*($5 + [100]) = ($4 + [143])
	*($5 + [104]) = ($4 + [144])
	*($5 + [108]) = ($4 + [145])
	*($5 + [112]) = ($4 + [146])
	*($5 + [116]) = ($4 + [147])
	*($5 + [120]) = ($4 + [148])
	*($5 + [124]) = ($4 + [149])
	*($5 + [128]) = ($4 + [150])
	*($5 + [132]) = ($4 + [151])
	*($5 + [136]) = ($4 + [152])
	*($5 + [140]) = ($4 + [153])
	*($5 + [144]) = ($4 + [154])
	*($5 + [148]) = ($4 + [155])
	*($5 + [152]) = ($4 + [156])
	*($5 + [156]) = ($4 + [157])
	*($5 + [160]) = ($4 + [158])
	*($5 + [164]) = ($4 + [159])
	*($5 + [168]) = ($4 + [160])
	*($5 + [172]) = ($4 + [161])
	*($5 + [176]) = ($4 + [162])
	*($5 + [180]) = ($4 + [163])
	*($5 + [184]) = ($4 + [164])
	*($5 + [188]) = ($4 + [165])
	*($5 + [192]) = ($4 + [166])
	*($5 + [196]) = ($4 + [167])
	*($5 + [200]) = ($4 + [168])
	*($5 + [204]) = ($4 + [169])
	*($5 + [208]) = ($4 + [170])
	*($5 + [212]) = ($4 + [171])
	*($5 + [216]) = ($4 + [172])
	*($5 + [220]) = ($4 + [173])
	*($5 + [224]) = ($4 + [174])
	*($5 + [228]) = ($4 + [175])
	*($5 + [232]) = ($4 + [176])
	*($5 + [236]) = ($4 + [177])
	*($5 + [240]) = ($4 + [178])
	*($5 + [244]) = ($4 + [179])
	*($5 + [248]) = ($4 + [180])
	*($5 + [252]) = ($4 + [181])
	*($5 + [256]) = ($4 + [182])
	*($5 + [260]) = ($4 + [183])
	*($5 + [264]) = ($4 + [184])
	*($5 + [268]) = ($4 + [185])
	CALL $21(($5 + [8]), $5)
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[33]), [256])
	CALL memcpy(($4 + [186]), *($1 + [4]), [34])
	*($1 + [4]) = (*($1 + [4]) + [34])
	*([0] + [4]) = ($5 + [272])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[33]), [256])
	CALL memcpy($2, *($3 + [4]), [34])
	*($3 + [4]) = (*($3 + [4]) + [34])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[33]), [256])
	CALL memcpy(($0 + [34]), *($3 + [4]), [34])
	*($3 + [4]) = (*($3 + [4]) + [34])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [72]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [80]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $19(*($1), ($0 + [88]))
	*($4 + [8]) = $0
	CALL $49(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $69 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $63(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $64($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [1136])
	$4 = CALL $63([104])
	$6 = CALL $33($4)
	*($4 + [88]) = $1
	CALL $45($3, $6)
	*($8 + [120]) = (($8 + [16]) + [82])
	*($8 + [116]) = ($8 + [16])
	*($8 + [112]) = ($8 + [16])
	CALL $32(($8 + [112]), $6)
	$5 = *($4)
	*($4 + [92]) = CALL db_store_i64(*($1 + [8]), (int_64)-9026212813717995520, $2, $5, ($8 + [16]), [82])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [112]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [92])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [112]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $35(($1 + [24]), ($8 + [112]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [112])
	*($8 + [112]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $64($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [128])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*($1 + [56]) = ((int_64))((int_64)-10000 - *(*($3))) + (int_64)*($1 + [56]))
	$4 = *($1)
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	CALL eosio_assert([1], [896])
	*($5 + [104]) = ($5 + [82])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $32(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [816])
	*([0] + [4]) = $3
	CALL memcpy(($3 + [350]), $1, [34])
	CALL memcpy(($3 + [316]), ($1 + [34]), [34])
	CALL $70(($3 + [304]), ($1 + [68]))
	*(($2 = (($3 + [288]) + [8]))) = *(($1 + [88]))
	*($3 + [288]) = *($1 + [80])
	CALL memcpy(($3 + [222]), ($1 + [96]), [66])
	CALL memcpy(($3 + [188]), ($1 + [162]), [34])
	CALL memcpy(($3 + [552]), ($3 + [188]), [34])
	CALL memcpy(($3 + [480]), ($3 + [222]), [66])
	*((($3 + [464]) + [8])) = *($2)
	*($3 + [464]) = *($3 + [288])
	CALL memcpy(($3 + [424]), ($3 + [316]), [34])
	CALL memcpy(($3 + [384]), ($3 + [350]), [34])
	$1 = *($0 + [4])
	$2 = *($1 + [4])
	$0 = (*(*($0)) + int_32($2 >> [1]))
	$1 = *($1)
	if ( (($2 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL memcpy(($3 + [776]), ($3 + [384]), [34])
	CALL memcpy(($3 + [736]), ($3 + [424]), [34])
	CALL $70(($3 + [720]), ($3 + [304]))
	*(($2 = (($3 + [704]) + [8]))) = *((($3 + [464]) + [8]))
	*($3 + [704]) = *($3 + [464])
	CALL memcpy(($3 + [632]), ($3 + [480]), [66])
	CALL memcpy(($3 + [592]), ($3 + [552]), [34])
	CALL memcpy(($3 + [154]), ($3 + [776]), [34])
	CALL memcpy(($3 + [120]), ($3 + [736]), [34])
	*((($3 + [104]) + [8])) = *($2)
	*($3 + [104]) = *($3 + [704])
	CALL memcpy(($3 + [38]), ($3 + [632]), [66])
	CALL memcpy(($3 + [4]), ($3 + [592]), [34])
	CALL void $0((int_32 ($3 + [154])), (int_32 ($3 + [120])), (int_32 ($3 + [720])), (int_32 ($3 + [104])), (int_32 ($3 + [38])), (int_32 ($3 + [4])), (int_32 $1))
	if ( ((*($3 + [720]) & [1]) == 0) ){ goto $label$2 }
	CALL $64(*($3 + [728]))
	
.LABEL $label$2
	if ( ((*($3 + [304]) & [1]) == 0) ){ goto $label$3 }
	CALL $64(*($3 + [312]))
	
.LABEL $label$3
	*([0] + [4]) = ($3 + [816])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[33]), [256])
	CALL memcpy($2, *($3 + [4]), [34])
	*($3 + [4]) = (*($3 + [4]) + [34])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[33]), [256])
	CALL memcpy(($3 + [34]), *($0 + [4]), [34])
	*($0 + [4]) = (*($0 + [4]) + [34])
	CALL $19(*($1), ($3 + [68]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($3 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($3 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [97])
	*($4 + [8]) = ($3 + [96])
	*($4 + [16]) = ($3 + [98])
	*($4 + [20]) = ($3 + [99])
	*($4 + [24]) = ($3 + [100])
	*($4 + [28]) = ($3 + [101])
	*($4 + [32]) = ($3 + [102])
	*($4 + [36]) = ($3 + [103])
	*($4 + [40]) = ($3 + [104])
	*($4 + [44]) = ($3 + [105])
	*($4 + [48]) = ($3 + [106])
	*($4 + [52]) = ($3 + [107])
	*($4 + [56]) = ($3 + [108])
	*($4 + [60]) = ($3 + [109])
	*($4 + [64]) = ($3 + [110])
	*($4 + [68]) = ($3 + [111])
	*($4 + [72]) = ($3 + [112])
	*($4 + [76]) = ($3 + [113])
	*($4 + [80]) = ($3 + [114])
	*($4 + [84]) = ($3 + [115])
	*($4 + [88]) = ($3 + [116])
	*($4 + [92]) = ($3 + [117])
	*($4 + [96]) = ($3 + [118])
	*($4 + [100]) = ($3 + [119])
	*($4 + [104]) = ($3 + [120])
	*($4 + [108]) = ($3 + [121])
	*($4 + [112]) = ($3 + [122])
	*($4 + [116]) = ($3 + [123])
	*($4 + [120]) = ($3 + [124])
	*($4 + [124]) = ($3 + [125])
	*($4 + [128]) = ($3 + [126])
	*($4 + [132]) = ($3 + [127])
	*($4 + [136]) = ($3 + [128])
	*($4 + [140]) = ($3 + [129])
	*($4 + [144]) = ($3 + [130])
	*($4 + [148]) = ($3 + [131])
	*($4 + [152]) = ($3 + [132])
	*($4 + [156]) = ($3 + [133])
	*($4 + [160]) = ($3 + [134])
	*($4 + [164]) = ($3 + [135])
	*($4 + [168]) = ($3 + [136])
	*($4 + [172]) = ($3 + [137])
	*($4 + [176]) = ($3 + [138])
	*($4 + [180]) = ($3 + [139])
	*($4 + [184]) = ($3 + [140])
	*($4 + [188]) = ($3 + [141])
	*($4 + [192]) = ($3 + [142])
	*($4 + [196]) = ($3 + [143])
	*($4 + [200]) = ($3 + [144])
	*($4 + [204]) = ($3 + [145])
	*($4 + [208]) = ($3 + [146])
	*($4 + [212]) = ($3 + [147])
	*($4 + [216]) = ($3 + [148])
	*($4 + [220]) = ($3 + [149])
	*($4 + [224]) = ($3 + [150])
	*($4 + [228]) = ($3 + [151])
	*($4 + [232]) = ($3 + [152])
	*($4 + [236]) = ($3 + [153])
	*($4 + [240]) = ($3 + [154])
	*($4 + [244]) = ($3 + [155])
	*($4 + [248]) = ($3 + [156])
	*($4 + [252]) = ($3 + [157])
	*($4 + [256]) = ($3 + [158])
	*($4 + [260]) = ($3 + [159])
	*($4 + [264]) = ($3 + [160])
	*($4 + [268]) = ($3 + [161])
	CALL $21(($4 + [8]), $4)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[33]), [256])
	CALL memcpy(($3 + [162]), *($0 + [4]), [34])
	*($0 + [4]) = (*($0 + [4]) + [34])
	*([0] + [4]) = ($4 + [272])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [896])
	*([0] + [4]) = $4
	CALL memcpy(($4 + [398]), $1, [34])
	CALL memcpy(($4 + [364]), ($1 + [34]), [34])
	*(($2 = (($4 + [344]) + [8]))) = *(($1 + [80]))
	*($4 + [344]) = *($1 + [72])
	CALL $70(($4 + [328]), ($1 + [88]))
	*(($3 = (($4 + [312]) + [8]))) = *(($1 + [112]))
	*($4 + [312]) = *($1 + [104])
	CALL memcpy(($4 + [246]), ($1 + [120]), [66])
	CALL memcpy(($4 + [212]), ($1 + [186]), [34])
	CALL memcpy(($4 + [616]), ($4 + [212]), [34])
	CALL memcpy(($4 + [544]), ($4 + [246]), [66])
	*((($4 + [528]) + [8])) = *($3)
	*((($4 + [512]) + [8])) = *($2)
	*($4 + [528]) = *($4 + [312])
	*($4 + [512]) = *($4 + [344])
	CALL memcpy(($4 + [472]), ($4 + [364]), [34])
	CALL memcpy(($4 + [432]), ($4 + [398]), [34])
	$1 = *($0 + [4])
	$2 = *($1 + [4])
	$0 = (*(*($0)) + int_32($2 >> [1]))
	$1 = *($1)
	if ( (($2 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL memcpy(($4 + [856]), ($4 + [432]), [34])
	CALL memcpy(($4 + [816]), ($4 + [472]), [34])
	*(($2 = (($4 + [800]) + [8]))) = *((($4 + [512]) + [8]))
	*($4 + [800]) = *($4 + [512])
	CALL $70(($4 + [784]), ($4 + [328]))
	*(($3 = (($4 + [768]) + [8]))) = *((($4 + [528]) + [8]))
	*($4 + [768]) = *($4 + [528])
	CALL memcpy(($4 + [696]), ($4 + [544]), [66])
	CALL memcpy(($4 + [656]), ($4 + [616]), [34])
	CALL memcpy(($4 + [178]), ($4 + [856]), [34])
	CALL memcpy(($4 + [144]), ($4 + [816]), [34])
	*((($4 + [128]) + [8])) = *($2)
	*((($4 + [112]) + [8])) = *($3)
	*($4 + [128]) = *($4 + [800])
	*($4 + [112]) = *($4 + [768])
	CALL memcpy(($4 + [46]), ($4 + [696]), [66])
	CALL memcpy(($4 + [12]), ($4 + [656]), [34])
	CALL void $0((int_32 ($4 + [178])), (int_32 ($4 + [144])), (int_32 ($4 + [128])), (int_32 ($4 + [784])), (int_32 ($4 + [112])), (int_32 ($4 + [46])), (int_32 ($4 + [12])), (int_32 $1))
	if ( ((*($4 + [784]) & [1]) == 0) ){ goto $label$2 }
	CALL $64(*($4 + [792]))
	
.LABEL $label$2
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$3 }
	CALL $64(*($4 + [336]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [896])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = [0]
	$0 = CALL memset($0, [0], [34])
	CALL memset(($0 + [34]), [0], [34])
	*($0 + [80]) = (int_64)1398362884
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	*($0 + [96]) = [0]
	*($0 + [88 align=4]) = (int_64)0
	*($0 + [104]) = (int_64)0
	*($0 + [112]) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [224])
	CALL memset(($0 + [120]), [0], [66])
	CALL memset(($0 + [186]), [0], [34])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $48(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	$2 = *($2 + [6])
	$3 = *($2 + [4])
	$3 = *($2 + [3])
	$3 = *($2 + [1])
	$3 = *($2 + [2])
	$2 = *($0 + [4])
	$3 = *($2 + [5])
	*($1) = ((int_64)((int_64)(CASTING int_64)(int_32 (( ($3 + [256]) ? $3 : ((int_32)$3 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($3 + [256]) ? $3 : ((int_32)$3 < (int_32)[0]) ) << [4]) + ( ($3 + [256]) ? $3 : ((int_32)$3 < (int_32)[0]) )) + (( ($3 + [256]) ? $3 : ((int_32)$3 < (int_32)[0]) ) << [8])) + (( ($3 + [256]) ? $3 : ((int_32)$3 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($2 + [256]) ? $2 : ((int_32)$2 < (int_32)[0]) ) << [20])))
	CALL memcpy(($1 + [8]), *($0 + [4]), [34])
	*($1 + [48]) = (int_64)0
	$2 = *($0 + [8])
	$4 = *($2 + [8])
	$5 = *($2)
	CALL eosio_assert([1], [960])
	$5 = (int_64)
	CALL eosio_assert(((int_64)$5($5 - *($2))) > (int_64)-4611686018427387904), [1008])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [1040])
	*(($1 + [64])) = $4
	*($1 + [56]) = $5
	$2 = *($0 + [8])
	$4 = *($2 + [8])
	$5 = *($2)
	CALL eosio_assert([1], [960])
	$5 = (int_64)
	CALL eosio_assert(((int_64)$5($5 - *($2))) > (int_64)-4611686018427387904), [1008])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [1040])
	*(($2 = ($1 + [80]))) = $4
	*($1 + [72]) = $5
	*($2) = (int_64)1397703940
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [896])
	*($5 + [104]) = ($5 + [82])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $32(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

int_32 .FUNC strncpy (int_32 $0, int_32 $1, int_32 $2)
{
	CALL __stpncpy($0, $1, $2)
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [640])
	*([0] + [4]) = $5
	if ( (*($1 + [88]) & [1]) ){ goto $label$2 }
	$4 = (($1 + [88]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *(($1 + [96]))
	
.LABEL $label$1
	$4 = CALL strncpy(($5 + [384]), $4, [256])
	*($5 + [639]) = [0]
	CALL memcpy($5, $1, [34])
	CALL memcpy(($5 + [34]), ($1 + [34]), [34])
	CALL memcpy(($5 + [68]), ($1 + [72]), [8])
	CALL memcpy(($5 + [76]), $4, [256])
	CALL memcpy(($5 + [332]), $2, [8])
	CALL memcpy(($5 + [340]), ($1 + [104]), [8])
	CALL sha256($5, [348], ($5 + [352]))
	CALL assert_recover_key(($5 + [352]), $3, [66], $1, [34])
	*([0] + [4]) = ($5 + [640])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $63($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $61($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9904])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [528])
	*([0] + [4]) = $15
	*(($15 + [520])) = [0]
	*($15 + [504]) = (int_64)-1
	*($15 + [512]) = (int_64)0
	$13 = *($0)
	*($15 + [488]) = $13
	*($15 + [496]) = $13
	$14 = *($1 + [6])
	$14 = *($1 + [4])
	$14 = *($1 + [3])
	$14 = *($1 + [1])
	$14 = *($1 + [2])
	$14 = *($1 + [5])
	$14 = CALL db_find_i64($13, $13, (int_64)-9026212813717995520, ((int_64)((int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [4]) + ( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) )) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [8])) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [20]))))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$2 }
	$12 = CALL $24(($15 + [488]), $14)
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)($15 + [488])), [352])
	$11 = *(($15 + [512]))
	$9 = *(($15 + [516]))
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	$9 = [0]
	$12 = [0]
	
.LABEL $label$1
	$14 = *($2 + [6])
	$14 = *($2 + [4])
	$14 = *($2 + [3])
	$14 = *($2 + [1])
	$14 = *($2 + [2])
	$14 = *($2 + [5])
	$13 = ((int_64)((int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [4]) + ( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) )) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [8])) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [20])))
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$3 }
	$14 = ($9 + [-24])
	$8 = ([0] - $11)
	
.LOOP $label$4:
	if ( ((int_64)*(*($14)) == (int_64)$13) ){ goto $label$3 }
	$9 = $14
	$10 = ($14 + [-24])
	$14 = $10
	if ( ((int_32)($10 + $8) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$6 }
	$11 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [88]) == (int_32)($15 + [488])), [352])
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	$14 = CALL db_find_i64(*($15 + [488]), *(($15 + [496])), (int_64)-9026212813717995520, $13)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$5 }
	$11 = CALL $24(($15 + [488]), $14)
	CALL eosio_assert(((int_32)*($11 + [88]) == (int_32)($15 + [488])), [352])
	
.LABEL $label$5
	$14 = *($7 + [6])
	$14 = *($7 + [4])
	$14 = *($7 + [3])
	$14 = *($7 + [1])
	$14 = *($7 + [2])
	$14 = *($7 + [5])
	$13 = ((int_64)((int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [4]) + ( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) )) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [8])) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [20])))
	$7 = *(($15 + [512]))
	$9 = *(($15 + [516]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$7 }
	$14 = ($9 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$8:
	if ( ((int_64)*(*($14)) == (int_64)$13) ){ goto $label$7 }
	$9 = $14
	$10 = ($14 + [-24])
	$14 = $10
	if ( ((int_32)($10 + $8) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$10 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [88]) == (int_32)($15 + [488])), [352])
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	$14 = CALL db_find_i64(*($15 + [488]), *(($15 + [496])), (int_64)-9026212813717995520, $13)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$9 }
	$9 = CALL $24(($15 + [488]), $14)
	CALL eosio_assert(((int_32)*($9 + [88]) == (int_32)($15 + [488])), [352])
	
.LABEL $label$9
	*(($14 = (($15 + [472]) + [8]))) = *(($3 + [8]))
	*($15 + [472]) = *($3)
	CALL $70(($15 + [456]), $4)
	*(($10 = (($15 + [440]) + [8]))) = *(($5 + [8]))
	$13 = *($5)
	*((($15 + [104]) + [12])) = *((($15 + [472]) + [12]))
	*((($15 + [104]) + [8])) = *($14)
	*($15 + [440]) = $13
	*($15 + [108]) = *($15 + [476])
	*($15 + [104]) = *($15 + [472])
	*((($15 + [88]) + [8])) = *($10)
	*($15 + [88]) = *($15 + [440])
	CALL $50($0, ($15 + [104]), ($15 + [456]), ($15 + [88]))
	if ( ((*($15 + [456]) & [1]) == 0) ){ goto $label$11 }
	CALL $64(*($15 + [464]))
	
.LABEL $label$11
	CALL eosio_assert(((int_64)*($12 + [56]) >= (int_64)((int_64)*($5) + (int_64)*($3))), [496])
	*(($15 + [408])) = (int_64)1398362884
	*($15 + [400]) = (int_64)0
	CALL eosio_assert([1], [160])
	$13 = (int_64)5462355
	$14 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$10 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$10 = [0]
	
.LABEL $label$12
	CALL eosio_assert($10, [224])
	*((($15 + [328]) + [96])) = [0]
	*($15 + [416]) = (int_64)0
	CALL memcpy(($15 + [328]), $1, [34])
	CALL memcpy((($15 + [328]) + [34]), $2, [34])
	*(($15 + [408])) = *(($3 + [8]))
	*($15 + [400]) = *($3)
	$14 = (($15 + [328]) + [88])
	CALL $66($14, $4)
	*($15 + [432]) = *(($12 + [48]))
	CALL memcpy(($15 + [216]), ($15 + [328]), [88])
	CALL $70((($15 + [216]) + [88]), $14)
	*((($15 + [200]) + [12])) = *(($5 + [12]))
	*(($10 = (($15 + [200]) + [8]))) = *(($5 + [8]))
	*($15 + [204]) = *(($5 + [4]))
	*($15 + [200]) = *($5)
	*($15 + [320]) = *($15 + [432])
	CALL memcpy(($15 + [128]), $6, [66])
	*((($15 + [72]) + [8])) = *($10)
	*($15 + [72]) = *($15 + [200])
	CALL memcpy(($15 + [6]), ($15 + [128]), [66])
	CALL $51($0, ($15 + [216]), ($15 + [72]), ($15 + [6]))
	if ( ((*($15 + [304]) & [1]) == 0) ){ goto $label$17 }
	CALL $64(*((($15 + [216]) + [96])))
	
.LABEL $label$17
	$10 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($10, [528])
	$13 = *($0)
	*($15 + [124]) = $5
	*($15 + [120]) = $3
	CALL eosio_assert($10, [576])
	CALL $52(($15 + [488]), $12, $13, ($15 + [120]))
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [624])
	$13 = *($0)
	*($15 + [120]) = $5
	CALL eosio_assert($10, [576])
	CALL $53(($15 + [488]), $9, $13, ($15 + [120]))
	$10 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($10, [1200])
	$13 = *($0)
	*($15 + [120]) = $3
	CALL eosio_assert($10, [576])
	CALL $54(($15 + [488]), $11, $13, ($15 + [120]))
	CALL prints([1264])
	if ( ((*($14) & [1]) == 0) ){ goto $label$18 }
	CALL $64(*(($15 + [424])))
	
.LABEL $label$18
	$9 = *($15 + [512])
	if ( ($9 == 0) ){ goto $label$19 }
	$8 = ($15 + [516])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$21 }
	
.LOOP $label$22:
	$14 = ($14 + [-24])
	$10 = *($14)
	*($14) = [0]
	if ( ($10 == 0) ){ goto $label$23 }
	CALL $64($10)
	
.LABEL $label$23
	if ( ((int_32)$9 != (int_32)$14) ){ goto $label$22 }
	$14 = *(($15 + [512]))
	goto $label$20 
	
.LABEL $label$21
	$14 = $9
	
.LABEL $label$20
	*($8) = $9
	CALL $64($14)
	
.LABEL $label$19
	*([0] + [4]) = ($15 + [528])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [256])
	*([0] + [4]) = $2
	*(($3 = $2) + [252]) = $0
	*($3 + [240]) = *($1)
	*($3 + [244]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $46(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [240])
	*($3 + [8]) = ($3 + [252])
	CALL $47(($3 + [8]), ($3 + [16]))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$6 }
	CALL $64(*($3 + [112]))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [256])
	return [1]
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [144])
	*([0] + [4]) = $11
	$4 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [688]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($4, $9)
	$8 = *($2 + [8])
	CALL eosio_assert([1], [960])
	CALL eosio_assert([1], [1008])
	CALL eosio_assert([1], [1040])
	*(($6 = (($11 + [128]) + [8]))) = *($2 + [8])
	*($11 + [128]) = *($2)
	CALL $70(($11 + [112]), $3)
	*($11 + [104]) = $8
	*((($11 + [16]) + [8])) = *($6)
	*(($11 + [8])) = *($11 + [104])
	*($11 + [96]) = (int_64)0
	*($11 + [16]) = *($11 + [128])
	*($11) = *($11 + [96])
	CALL $50($0, ($11 + [16]), ($11 + [112]), $11)
	if ( ((*($11 + [112]) & [1]) == 0) ){ goto $label$7 }
	CALL $64(*($11 + [120]))
	
.LABEL $label$7
	*(($11 + [88])) = [0]
	*($11 + [72]) = (int_64)-1
	*($11 + [80]) = (int_64)0
	$8 = *($0)
	*($11 + [56]) = $8
	*($11 + [64]) = $8
	$6 = *($1 + [6])
	$6 = *($1 + [4])
	$6 = *($1 + [3])
	$6 = *($1 + [1])
	$6 = *($1 + [2])
	$6 = *($1 + [5])
	$6 = CALL db_find_i64($8, $8, (int_64)-9026212813717995520, ((int_64)((int_64)(CASTING int_64)(int_32 (( ($6 + [256]) ? $6 : ((int_32)$6 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($6 + [256]) ? $6 : ((int_32)$6 < (int_32)[0]) ) << [4]) + ( ($6 + [256]) ? $6 : ((int_32)$6 < (int_32)[0]) )) + (( ($6 + [256]) ? $6 : ((int_32)$6 < (int_32)[0]) ) << [8])) + (( ($6 + [256]) ? $6 : ((int_32)$6 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($6 + [256]) ? $6 : ((int_32)$6 < (int_32)[0]) ) << [20]))))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$10 }
	$6 = CALL $24(($11 + [56]), $6)
	CALL eosio_assert(((int_32)*($6 + [88]) == (int_32)($11 + [56])), [352])
	$8 = *($0)
	*($11 + [40]) = $2
	CALL eosio_assert([1], [576])
	CALL $57(($11 + [56]), $6, $8, ($11 + [40]))
	$1 = *($11 + [80])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$8 = *($0)
	*($11 + [44]) = $1
	*($11 + [40]) = $0
	*($11 + [48]) = $2
	CALL $56(($11 + [32]), ($11 + [56]), $8, ($11 + [40]))
	$1 = *($11 + [80])
	if ( ($1 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$0 = ($11 + [84])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$12 }
	
.LOOP $label$13:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $64($5)
	
.LABEL $label$14
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$13 }
	$6 = *(($11 + [80]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $1
	
.LABEL $label$11
	*($0) = $1
	CALL $64($6)
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [144])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	*(($7 = $6) + [92]) = $0
	*($7 + [80]) = *($1)
	*($7 + [84]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($6 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	CALL memset(($7 + [8]), [0], [34])
	*($7 + [56]) = (int_64)1398362884
	*($7 + [48]) = (int_64)0
	CALL eosio_assert([1], [160])
	$4 = ($7 + [56])
	$3 = ($7 + [48])
	$5 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$4
	CALL eosio_assert($6, [224])
	*($7 + [72]) = [0]
	*($7 + [64]) = (int_64)0
	*($7 + [96]) = $0
	$1 = ($0 + $2)
	*($7 + [104]) = $1
	CALL eosio_assert(((uint_32)$2 > (uint_32)[33]), [256])
	CALL memcpy(($7 + [8]), $0, [34])
	$6 = ($0 + [34])
	CALL eosio_assert(((uint_32)($1 - $6) > (uint_32)[7]), [256])
	CALL memcpy($3, $6, [8])
	$6 = ($0 + [42])
	CALL eosio_assert(((uint_32)($1 - $6) > (uint_32)[7]), [256])
	CALL memcpy($4, $6, [8])
	*($7 + [100]) = ($0 + [50])
	$1 = ($7 + [64])
	CALL $19(($7 + [96]), $1)
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($7 + [100]) = ($7 + [80])
	*($7 + [96]) = ($7 + [92])
	CALL $55(($7 + [96]), ($7 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$10 }
	CALL $64(*(($7 + [72])))
	
.LABEL $label$10
	*([0] + [4]) = ($7 + [112])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	*($9 + [104]) = [0]
	*($9 + [96]) = $0
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$19 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$25 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$3 = ($3 + [165])
	goto $label$23 
	
.LABEL $label$25
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$21
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$20 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$14 }
	if ( ((int_64)$2 <= (int_64)-2039333636196532225) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)5031766161263427584) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)5380477996647841792) ){ goto $label$14 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [1]
	*($9 + [24 align=4]) = *($9 + [64])
	CALL $13(($9 + [96]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$19
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$31 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$3 = ($3 + [165])
	goto $label$29 
	
.LABEL $label$31
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$27
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$26 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$37 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$3 = ($3 + [165])
	goto $label$35 
	
.LABEL $label$37
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$33
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$32 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [1]
	*($9 + [40 align=4]) = *($9 + [48])
	CALL $13(($9 + [96]), ($9 + [40]))
	goto $label$14 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-7807113099349065728) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$14 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [2]
	*($9 + [8 align=4]) = *($9 + [80])
	CALL $9(($9 + [96]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$17
	*($9 + [60]) = [0]
	*($9 + [56]) = [3]
	*($9 + [32 align=4]) = *($9 + [56])
	CALL $15(($9 + [96]), ($9 + [32]))
	goto $label$14 
	
.LABEL $label$16
	*($9 + [76]) = [0]
	*($9 + [72]) = [4]
	*($9 + [16 align=4]) = *($9 + [72])
	CALL $11(($9 + [96]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$15
	*($9 + [92]) = [0]
	*($9 + [88]) = [5]
	*($9) = *($9 + [88])
	CALL $7(($9 + [96]), $9)
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	$20 = (*([0] + [4]) - [976])
	*([0] + [4]) = $20
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [736])
	$10 = [0]
	$8 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$15 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [288])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [320])
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)1179599620), [704])
	if ( ((uint_64)((int_64)*($5) + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$6 }
	$15 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$10 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [288])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($5) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [320])
	*(($20 + [200])) = [0]
	*($20 + [184]) = (int_64)-1
	*($20 + [192]) = (int_64)0
	$15 = *($0)
	*($20 + [168]) = $15
	*($20 + [176]) = $15
	$13 = *($1 + [6])
	$13 = *($1 + [4])
	$13 = *($1 + [3])
	$13 = *($1 + [1])
	$13 = *($1 + [2])
	$13 = *($1 + [5])
	$13 = CALL db_find_i64($15, $15, (int_64)-9026212813717995520, ((int_64)((int_64)(CASTING int_64)(int_32 (( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) ) << [4]) + ( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) )) + (( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) ) << [8])) + (( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) ) << [20]))))
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	$12 = CALL $24(($20 + [168]), $13)
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)($20 + [168])), [352])
	$11 = *(($20 + [192]))
	$10 = *(($20 + [196]))
	goto $label$11 
	
.LABEL $label$12
	$11 = [0]
	$10 = [0]
	$12 = [0]
	
.LABEL $label$11
	$13 = *($7 + [6])
	$13 = *($7 + [4])
	$13 = *($7 + [3])
	$13 = *($7 + [1])
	$13 = *($7 + [2])
	$13 = *($7 + [5])
	$15 = ((int_64)((int_64)(CASTING int_64)(int_32 (( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) ) << [4]) + ( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) )) + (( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) ) << [8])) + (( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($13 + [256]) ? $13 : ((int_32)$13 < (int_32)[0]) ) << [20])))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$13 }
	$13 = ($10 + [-24])
	$8 = ([0] - $11)
	
.LOOP $label$14:
	if ( ((int_64)*(*($13)) == (int_64)$15) ){ goto $label$13 }
	$10 = $13
	$7 = ($13 + [-24])
	$13 = $7
	if ( ((int_32)($7 + $8) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$16 }
	$13 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [88]) == (int_32)($20 + [168])), [352])
	goto $label$15 
	
.LABEL $label$16
	$13 = [0]
	$7 = CALL db_find_i64(*($20 + [168]), *(($20 + [176])), (int_64)-9026212813717995520, $15)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$15 }
	$13 = CALL $24(($20 + [168]), $7)
	CALL eosio_assert(((int_32)*($13 + [88]) == (int_32)($20 + [168])), [352])
	
.LABEL $label$15
	$15 = *($12 + [48])
	CALL memcpy(($20 + [134]), $1, [34])
	$10 = ($3 + [8])
	*(($7 = (($20 + [112]) + [8]))) = *($10)
	*($20 + [112]) = *($3)
	CALL $70(($20 + [96]), $4)
	*(($8 = (($20 + [80]) + [8]))) = *(($5 + [8]))
	*($20 + [80]) = *($5)
	CALL memcpy(($20 + [14]), $6, [66])
	CALL memcpy(($20 + [280]), ($20 + [14]), [66])
	*((($20 + [264]) + [8])) = *($8)
	*((($20 + [248]) + [8])) = *($7)
	*($20 + [264]) = *($20 + [80])
	*($20 + [248]) = *($20 + [112])
	CALL memcpy(($20 + [208]), ($20 + [134]), [34])
	*($20 + [968]) = $2
	*($20 + [960]) = $15
	$7 = CALL strncpy(($20 + [704]), ( *($20 + [104]) ? (($20 + [96]) | [1]) : (*($20 + [96]) & [1]) ), [256])
	*($20 + [959]) = [0]
	CALL memcpy(($20 + [352]), ($20 + [208]), [34])
	CALL memcpy((($20 + [352]) + [34]), ($20 + [968]), [8])
	CALL memcpy(($20 + [394]), ($20 + [248]), [8])
	CALL memcpy(($20 + [402]), $7, [256])
	CALL memcpy(($20 + [658]), ($20 + [264]), [8])
	CALL memcpy((($20 + [352]) + [314]), ($20 + [960]), [8])
	CALL sha256(($20 + [352]), [314], ($20 + [672]))
	CALL assert_recover_key(($20 + [672]), ($20 + [280]), [66], ($20 + [208]), [34])
	if ( ((*($20 + [96]) & [1]) == 0) ){ goto $label$17 }
	CALL $64(*((($20 + [96]) + [8])))
	
.LABEL $label$17
	CALL eosio_assert(((int_64)*(($12 + [80])) == (int_64)*($10)), [416])
	CALL eosio_assert(((int_64)*($12 + [72]) >= (int_64)*($3)), [480])
	CALL eosio_assert(((int_64)*($12 + [56]) >= (int_64)*($5)), [496])
	$7 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($7, [528])
	$15 = *($0)
	*($20 + [356]) = $5
	*($20 + [352]) = $3
	CALL eosio_assert($7, [576])
	CALL $25(($20 + [168]), $12, $15, ($20 + [352]))
	$7 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($7, [624])
	$15 = *($0)
	*($20 + [352]) = $5
	CALL eosio_assert($7, [576])
	CALL $26(($20 + [168]), $13, $15, ($20 + [352]))
	$9 = *($0)
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [688]
	$16 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$23 }
	$7 = *($13)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$7 = ($7 + [165])
	goto $label$21 
	
.LABEL $label$23
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$19
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$18 }
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [128]
	$18 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$15 > (uint_64)(int_64)10) ){ goto $label$29 }
	$7 = *($13)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$7 = ($7 + [165])
	goto $label$27 
	
.LABEL $label$29
	$17 = (int_64)0
	if ( ((int_64)$15 == (int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$25
	$13 = ($13 + [1])
	$14 = ((int_64)$14 + (int_64)-5)
	$18 = ((int_64)$17 | (int_64)$18)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$24 }
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [144]
	$19 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$15 > (uint_64)(int_64)7) ){ goto $label$35 }
	$7 = *($13)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$7 = ($7 + [165])
	goto $label$33 
	
.LABEL $label$35
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$31
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$19 = ((int_64)$17 | (int_64)$19)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$30 }
	*((($20 + [352]) + [28])) = *(($3 + [12]))
	*((($20 + [352]) + [24])) = *(($3 + [8]))
	*((($20 + [352]) + [20])) = *(($3 + [4]))
	*($20 + [360]) = $2
	*($20 + [352]) = $9
	*($20 + [368]) = *($3)
	CALL $70((($20 + [352]) + [32]), $4)
	*($20 + [712]) = $19
	*($20 + [704]) = $18
	*(($13 = CALL $63([16]))) = $9
	*($13 + [8]) = $16
	*((($20 + [704]) + [32])) = [0]
	$7 = ($13 + [16])
	*((($20 + [704]) + [24])) = $7
	*((($20 + [704]) + [20])) = $7
	*($20 + [720]) = $13
	*($20 + [732]) = [0]
	*((($20 + [704]) + [36])) = [0]
	$13 = *($20 + [384])
	$7 = ( *((($20 + [352]) + [36])) ? uint_32($13 >> [1]) : ($13 & [1]) )
	$13 = ($7 + [32])
	$15 = (CASTING uint_64)(uint_32 $7)
	$7 = (($20 + [704]) + [28])
	
.LOOP $label$36:
	$13 = ($13 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$36 }
	if ( ($13 == 0) ){ goto $label$38 }
	CALL $23($7, $13)
	$7 = *(($20 + [736]))
	$13 = *(($20 + [732]))
	goto $label$37 
	
.LABEL $label$38
	$7 = [0]
	$13 = [0]
	
.LABEL $label$37
	*($20 + [284]) = $13
	*($20 + [280]) = $13
	*($20 + [288]) = $7
	*($20 + [672]) = ($20 + [280])
	*($20 + [208]) = ($20 + [352])
	CALL $27(($20 + [208]), ($20 + [672]))
	CALL $28(($20 + [280]), ($20 + [704]))
	$13 = *($20 + [280])
	CALL send_inline($13, (*($20 + [284]) - $13))
	$13 = *($20 + [280])
	if ( ($13 == 0) ){ goto $label$39 }
	*($20 + [284]) = $13
	CALL $64($13)
	
.LABEL $label$39
	$13 = *($20 + [732])
	if ( ($13 == 0) ){ goto $label$40 }
	*(($20 + [736])) = $13
	CALL $64($13)
	
.LABEL $label$40
	$13 = *($20 + [720])
	if ( ($13 == 0) ){ goto $label$41 }
	*(($20 + [724])) = $13
	CALL $64($13)
	
.LABEL $label$41
	if ( ((*($20 + [384]) & [1]) == 0) ){ goto $label$42 }
	CALL $64(*(($20 + [392])))
	
.LABEL $label$42
	$10 = *($20 + [192])
	if ( ($10 == 0) ){ goto $label$43 }
	$3 = ($20 + [196])
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)$10) ){ goto $label$45 }
	
.LOOP $label$46:
	$13 = ($13 + [-24])
	$7 = *($13)
	*($13) = [0]
	if ( ($7 == 0) ){ goto $label$47 }
	CALL $64($7)
	
.LABEL $label$47
	if ( ((int_32)$10 != (int_32)$13) ){ goto $label$46 }
	$13 = *(($20 + [192]))
	goto $label$44 
	
.LABEL $label$45
	$13 = $10
	
.LABEL $label$44
	*($3) = $10
	CALL $64($13)
	
.LABEL $label$43
	*([0] + [4]) = ($20 + [976])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [224])
	*([0] + [4]) = $2
	*(($3 = $2) + [220]) = $0
	*($3 + [208]) = *($1)
	*($3 + [212]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $16(($3 + [8]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [4]) = ($3 + [208])
	*($3) = ($3 + [220])
	CALL $17($3, ($3 + [8]))
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$6 }
	CALL $64(*($3 + [80]))
	
.LABEL $label$6
	*([0] + [4]) = ($3 + [224])
	return [1]
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = [0]
	*(($0 = CALL memset($0, [0], [34])) + [48]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	*($0 + [72]) = [0]
	*($0 + [64 align=4]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [88]) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [224])
	CALL memset(($0 + [96]), [0], [66])
	CALL memset(($0 + [162]), [0], [34])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $18(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [752])
	*([0] + [4]) = $5
	CALL memcpy(($5 + [334]), $1, [34])
	*(($5 + [324])) = *(($1 + [60]))
	*(($3 = (($5 + [312]) + [8]))) = *(($1 + [56]))
	*($5 + [316]) = *(($1 + [52]))
	*($5 + [312]) = *($1 + [48])
	$2 = *($1 + [40])
	CALL $70(($5 + [296]), ($1 + [64]))
	*(($4 = (($5 + [280]) + [8]))) = *(($1 + [88]))
	*($5 + [280]) = *($1 + [80])
	CALL memcpy(($5 + [214]), ($1 + [96]), [66])
	CALL memcpy(($5 + [180]), ($1 + [162]), [34])
	CALL memcpy(($5 + [512]), ($5 + [180]), [34])
	CALL memcpy(($5 + [440]), ($5 + [214]), [66])
	*((($5 + [424]) + [8])) = *($4)
	*((($5 + [408]) + [8])) = *($3)
	*($5 + [424]) = *($5 + [280])
	*($5 + [408]) = *($5 + [312])
	CALL memcpy(($5 + [368]), ($5 + [334]), [34])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL memcpy(($5 + [712]), ($5 + [368]), [34])
	*(($3 = (($5 + [696]) + [8]))) = *((($5 + [408]) + [8]))
	*($5 + [696]) = *($5 + [408])
	CALL $70(($5 + [680]), ($5 + [296]))
	*(($4 = (($5 + [664]) + [8]))) = *((($5 + [424]) + [8]))
	*($5 + [664]) = *($5 + [424])
	CALL memcpy(($5 + [592]), ($5 + [440]), [66])
	CALL memcpy(($5 + [552]), ($5 + [512]), [34])
	CALL memcpy(($5 + [146]), ($5 + [712]), [34])
	*((($5 + [128]) + [8])) = *($3)
	*((($5 + [112]) + [8])) = *($4)
	*($5 + [128]) = *($5 + [696])
	*($5 + [112]) = *($5 + [664])
	CALL memcpy(($5 + [46]), ($5 + [592]), [66])
	CALL memcpy(($5 + [12]), ($5 + [552]), [34])
	CALL void $0((int_32 ($5 + [146])), (int_32 $2), (int_64 ($5 + [128])), (int_32 ($5 + [680])), (int_32 ($5 + [112])), (int_32 ($5 + [46])), (int_32 ($5 + [12])), (int_32 $1))
	if ( ((*($5 + [680]) & [1]) == 0) ){ goto $label$2 }
	CALL $64(*($5 + [688]))
	
.LABEL $label$2
	if ( ((*($5 + [296]) & [1]) == 0) ){ goto $label$3 }
	CALL $64(*($5 + [304]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [752])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [1040])
	*([0] + [4]) = $15
	$11 = *($4 + [8])
	CALL eosio_assert(((int_64)$11 == (int_64)1179599620), [704])
	$12 = [0]
	$10 = [0]
	$7 = *($4)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [288])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [320])
	*(($15 + [208])) = [0]
	*($15 + [192]) = (int_64)-1
	*($15 + [200]) = (int_64)0
	$11 = *($0)
	*($15 + [176]) = $11
	*($15 + [184]) = $11
	$14 = *($1 + [6])
	$14 = *($1 + [4])
	$14 = *($1 + [3])
	$14 = *($1 + [1])
	$14 = *($1 + [2])
	$14 = *($1 + [5])
	$14 = CALL db_find_i64($11, $11, (int_64)-9026212813717995520, ((int_64)((int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [4]) + ( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) )) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [8])) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [20]))))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$7 }
	$13 = CALL $24(($15 + [176]), $14)
	CALL eosio_assert(((int_32)*($13 + [88]) == (int_32)($15 + [176])), [352])
	$12 = *(($15 + [200]))
	$9 = *(($15 + [204]))
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	$13 = [0]
	
.LABEL $label$6
	$14 = *($2 + [6])
	$14 = *($2 + [4])
	$14 = *($2 + [3])
	$14 = *($2 + [1])
	$14 = *($2 + [2])
	$14 = *($2 + [5])
	$11 = ((int_64)((int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [4]) + ( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) )) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [8])) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [20])))
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$8 }
	$14 = ($9 + [-24])
	$8 = ([0] - $12)
	
.LOOP $label$9:
	if ( ((int_64)*(*($14)) == (int_64)$11) ){ goto $label$8 }
	$9 = $14
	$10 = ($14 + [-24])
	$14 = $10
	if ( ((int_32)($10 + $8) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$11 }
	$12 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)($15 + [176])), [352])
	goto $label$10 
	
.LABEL $label$11
	$12 = [0]
	$14 = CALL db_find_i64(*($15 + [176]), *(($15 + [184])), (int_64)-9026212813717995520, $11)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$10 }
	$12 = CALL $24(($15 + [176]), $14)
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)($15 + [176])), [352])
	
.LABEL $label$10
	$14 = *($6 + [6])
	$14 = *($6 + [4])
	$14 = *($6 + [3])
	$14 = *($6 + [1])
	$14 = *($6 + [2])
	$14 = *($6 + [5])
	$11 = ((int_64)((int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [4]) + ( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) )) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [8])) + (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($14 + [256]) ? $14 : ((int_32)$14 < (int_32)[0]) ) << [20])))
	$6 = *(($15 + [200]))
	$9 = *(($15 + [204]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$12 }
	$14 = ($9 + [-24])
	$8 = ([0] - $6)
	
.LOOP $label$13:
	if ( ((int_64)*(*($14)) == (int_64)$11) ){ goto $label$12 }
	$9 = $14
	$10 = ($14 + [-24])
	$14 = $10
	if ( ((int_32)($10 + $8) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$15 }
	$14 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [88]) == (int_32)($15 + [176])), [352])
	goto $label$14 
	
.LABEL $label$15
	$14 = [0]
	$10 = CALL db_find_i64(*($15 + [176]), *(($15 + [184])), (int_64)-9026212813717995520, $11)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$14 }
	$14 = CALL $24(($15 + [176]), $10)
	CALL eosio_assert(((int_32)*($14 + [88]) == (int_32)($15 + [176])), [352])
	
.LABEL $label$14
	$11 = *($13 + [48])
	CALL memcpy(($15 + [142]), $1, [34])
	CALL memcpy(($15 + [108]), $2, [34])
	CALL $70(($15 + [96]), $3)
	*(($10 = (($15 + [80]) + [8]))) = *(($4 + [8]))
	*($15 + [80]) = *($4)
	CALL memcpy(($15 + [14]), $5, [66])
	CALL memcpy(($15 + [312]), ($15 + [14]), [66])
	*((($15 + [296]) + [8])) = *($10)
	*($15 + [296]) = *($15 + [80])
	CALL memcpy(($15 + [256]), ($15 + [108]), [34])
	CALL memcpy(($15 + [216]), ($15 + [142]), [34])
	*($15 + [1032]) = $11
	$10 = CALL strncpy(($15 + [768]), ( *($15 + [104]) ? (($15 + [96]) | [1]) : (*($15 + [96]) & [1]) ), [256])
	*($15 + [1023]) = [0]
	CALL memcpy(($15 + [384]), ($15 + [216]), [34])
	CALL memcpy((($15 + [384]) + [34]), ($15 + [256]), [34])
	CALL memcpy(($15 + [452]), $10, [256])
	CALL memcpy(($15 + [708]), ($15 + [296]), [8])
	CALL memcpy(($15 + [716]), ($15 + [1032]), [8])
	CALL sha256(($15 + [384]), [340], ($15 + [736]))
	CALL assert_recover_key(($15 + [736]), ($15 + [312]), [66], ($15 + [216]), [34])
	if ( ((*($15 + [96]) & [1]) == 0) ){ goto $label$16 }
	CALL $64(*((($15 + [96]) + [8])))
	
.LABEL $label$16
	CALL eosio_assert(((int_64)*($13 + [56]) >= (int_64)((int_64)*($4) + (int_64)10000)), [496])
	$10 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($10, [528])
	$11 = *($0)
	*($15 + [384]) = $4
	CALL eosio_assert($10, [576])
	CALL $42(($15 + [176]), $13, $11, ($15 + [384]))
	CALL eosio_assert(($12 == 0), [1104])
	$11 = *($0)
	*($15 + [388]) = $2
	*($15 + [384]) = $0
	*($15 + [392]) = $4
	CALL $43(($15 + [768]), ($15 + [176]), $11, ($15 + [384]))
	$10 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($10, [624])
	$11 = *($0)
	*($15 + [384]) = $4
	CALL eosio_assert($10, [576])
	CALL $44(($15 + [176]), $14, $11, ($15 + [384]))
	$9 = *($15 + [200])
	if ( ($9 == 0) ){ goto $label$17 }
	$8 = ($15 + [204])
	$14 = *($8)
	if ( ((int_32)$14 == (int_32)$9) ){ goto $label$19 }
	
.LOOP $label$20:
	$14 = ($14 + [-24])
	$10 = *($14)
	*($14) = [0]
	if ( ($10 == 0) ){ goto $label$21 }
	CALL $64($10)
	
.LABEL $label$21
	if ( ((int_32)$9 != (int_32)$14) ){ goto $label$20 }
	$14 = *(($15 + [200]))
	goto $label$18 
	
.LABEL $label$19
	$14 = $9
	
.LABEL $label$18
	*($8) = $9
	CALL $64($14)
	
.LABEL $label$17
	*([0] + [4]) = ($15 + [1040])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [256])
	*([0] + [4]) = $4
	*(($5 = $4) + [220]) = $0
	*($5 + [208]) = *($1)
	*($5 + [212]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	CALL memset(($5 + [8]), [0], [34])
	CALL memset((($5 + [8]) + [34]), [0], [34])
	*($5 + [84]) = [0]
	*($5 + [76 align=4]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [224])
	CALL memset(($5 + [104]), [0], [66])
	CALL memset(($5 + [170]), [0], [34])
	*($5 + [228]) = $0
	*($5 + [224]) = $0
	*($5 + [232]) = ($0 + $2)
	*($5 + [240]) = ($5 + [224])
	*($5 + [248]) = ($5 + [8])
	CALL $40(($5 + [248]), ($5 + [240]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [228]) = ($5 + [208])
	*($5 + [224]) = ($5 + [220])
	CALL $41(($5 + [224]), ($5 + [8]))
	if ( ((*(($5 + [76])) & [1]) == 0) ){ goto $label$10 }
	CALL $64(*(($5 + [84])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [256])
	return [1]
}

void .FUNC $12 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL $36(($6 + [48]))
	$1 = *($0)
	if ( ((int_64)*($6 + [48]) == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)*($6 + [56]) != (int_64)$1) ){ goto $label$1 }
	$3 = (($6 + [48]) + [24])
	CALL eosio_assert(((int_64)*($3) == (int_64)1397703940), [736])
	$2 = [0]
	if ( ((uint_64)((int_64)*($6 + [64]) + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$2 }
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = [0]
	
.LABEL $label$2
	CALL eosio_assert($2, [288])
	$5 = (int_64)0
	CALL eosio_assert(((int_64)*(($6 + [64])) > (int_64)0), [320])
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$1 = *($0)
	*($6 + [8]) = $1
	*($6 + [16]) = $1
	$2 = ( *(($6 + [88])) ? ($6 + [81]) : (*($6 + [80]) & [1]) )
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$7 }
	$2 = ($2 + [1])
	$4 = [0]
	
.LOOP $label$8:
	$4 = ((int_32(($3 << [24]) >> [24]) + ((int_32)$4 * (int_32)[10])) + [-48])
	$3 = *($2)
	$2 = ($2 + [1])
	if ( $3 ){ goto $label$8 }
	$5 = (CASTING int_64)(int_32 $4)
	
.LABEL $label$7
	$3 = CALL db_find_i64($1, $1, (int_64)-9026212813717995520, $5)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $24(($6 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [88]) == (int_32)($6 + [8])), [352])
	$1 = *($0)
	*($6) = ($6 + [48])
	CALL eosio_assert([1], [576])
	CALL $37(($6 + [8]), $3, $1, $6)
	
.LABEL $label$9
	$4 = *($6 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$0 = ($6 + [36])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$11 }
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $64($2)
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$12 }
	$3 = *(($6 + [32]))
	goto $label$10 
	
.LABEL $label$11
	$3 = $4
	
.LABEL $label$10
	*($0) = $4
	CALL $64($3)
	
.LABEL $label$1
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$14 }
	CALL $64(*(($6 + [88])))
	
.LABEL $label$14
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $38($0, $2, $1)
	*([0] + [4]) = $3
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*(($1 + [80])) = *((*($3) + [24]))
	$4 = *($1)
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)*(*($3) + [16]))
	CALL eosio_assert([1], [896])
	*($5 + [104]) = ($5 + [82])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $32(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[33]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [34])
	$2 = (*($0 + [4]) + [34])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $63(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $64($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $64($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL memcpy(($3 + [6]), ($1 + [8]), [34])
	CALL memcpy(($3 + [40]), ($3 + [6]), [34])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[33]), [768])
	CALL memcpy(*($0 + [4]), ($3 + [40]), [34])
	$2 = (*($0 + [4]) + [34])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [80])
	return $0
}

int_32 .FUNC $33 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [56]) = (int_64)0
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [224])
	*(($2 = ($0 + [80]))) = (int_64)1398362884
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [224])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [768])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [768])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [768])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [768])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	$2 = *($2 + [6])
	$3 = *($2 + [4])
	$3 = *($2 + [3])
	$3 = *($2 + [1])
	$3 = *($2 + [2])
	$2 = *($0 + [4])
	$3 = *($2 + [5])
	*($1) = ((int_64)((int_64)(CASTING int_64)(int_32 (( ($3 + [256]) ? $3 : ((int_32)$3 < (int_32)[0]) ) << [16])) + (int_64)(CASTING int_64)(int_32 ((((( ($3 + [256]) ? $3 : ((int_32)$3 < (int_32)[0]) ) << [4]) + ( ($3 + [256]) ? $3 : ((int_32)$3 < (int_32)[0]) )) + (( ($3 + [256]) ? $3 : ((int_32)$3 < (int_32)[0]) ) << [8])) + (( ($3 + [256]) ? $3 : ((int_32)$3 < (int_32)[0]) ) << [12])))) + (int_64)(CASTING int_64)(int_32 (( ($2 + [256]) ? $2 : ((int_32)$2 < (int_32)[0]) ) << [20])))
	CALL memcpy(($1 + [8]), *($0 + [4]), [34])
	*($1 + [48]) = (int_64)0
	$2 = *($0 + [8])
	*($1 + [56]) = *($2)
	*(($1 + [64])) = *(($2 + [8]))
	$2 = *($0 + [8])
	$4 = *($2 + [8])
	$5 = *($2)
	CALL eosio_assert([1], [960])
	$5 = (int_64)
	CALL eosio_assert(((int_64)$5($5 - *($2))) > (int_64)-4611686018427387904), [1008])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [1040])
	*(($2 = ($1 + [80]))) = $4
	*($1 + [72]) = $5
	*($2) = (int_64)1397703940
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $60([1508], $0)
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9990]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9992])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9990]) = [1]
	$7 = ($7 << [16])
	*([0] + [9992]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9992])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9992]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9990]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9990]) = [1]
	$3 = ($3 << [16])
	*([0] + [9992]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9992])
	
.LABEL $label$8
	*([0] + [9992]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9996])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $64 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	$5 = *($2)
	if ( ($5 & [1]) ){ goto $label$2 }
	$2 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($2 <= [257]), [1280])
	$2 = [0]
	$5 = [0]
	$6 = *($1 + [8])
	if ( ((int_64)$6 != (int_64)1179599620) ){ goto $label$3 }
	$5 = ((int_64)*($3 + [8]) == (int_64)1179599620)
	
.LABEL $label$3
	CALL eosio_assert($5, [1312])
	$4 = *($1)
	if ( ((uint_64)((int_64)$4 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$2 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$9 }
	goto $label$4 
	
.LABEL $label$8
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [1344])
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$13 }
	$1 = ((int_64)*($3) > (int_64)-1)
	goto $label$12 
	
.LABEL $label$13
	$1 = [0]
	
.LABEL $label$12
	CALL eosio_assert($1, [1376])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $39(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*($1 + [56]) = (int_64))(*($1 + [56]) - ((int_64)*(*($3 + [4])) + (int_64)*(*($3))))
	$4 = *($1)
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)1)
	CALL eosio_assert([1], [896])
	*($5 + [104]) = ($5 + [82])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $32(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [896])
	*($5 + [104]) = ($5 + [82])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $32(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [896])
	*($5 + [104]) = ($5 + [82])
	*($5 + [100]) = $5
	*($5 + [96]) = $5
	CALL $32(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $5, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [256])
	*([0] + [4]) = $3
	CALL memcpy(($3 + [94]), $1, [34])
	*(($2 = (($3 + [72]) + [8]))) = *(($1 + [48]))
	*($3 + [72]) = *($1 + [40])
	CALL $70(($3 + [56]), ($1 + [56]))
	*((($3 + [168]) + [8])) = *($2)
	*($3 + [168]) = *($3 + [72])
	CALL memcpy(($3 + [128]), ($3 + [94]), [34])
	$1 = *($0 + [4])
	$2 = *($1 + [4])
	$0 = (*(*($0)) + int_32($2 >> [1]))
	$1 = *($1)
	if ( (($2 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL memcpy(($3 + [216]), ($3 + [128]), [34])
	*(($2 = (($3 + [200]) + [8]))) = *((($3 + [168]) + [8]))
	*($3 + [200]) = *($3 + [168])
	CALL $70(($3 + [184]), ($3 + [56]))
	CALL memcpy(($3 + [22]), ($3 + [216]), [34])
	*(($3 + [8])) = *($2)
	*($3) = *($3 + [200])
	CALL void $0((int_32 ($3 + [22])), (int_32 $3), (int_32 ($3 + [184])), (int_32 $1))
	if ( ((*($3 + [184]) & [1]) == 0) ){ goto $label$2 }
	CALL $64(*($3 + [192]))
	
.LABEL $label$2
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$3 }
	CALL $64(*($3 + [64]))
	
.LABEL $label$3
	*([0] + [4]) = ($3 + [256])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [128])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [1136])
	$4 = CALL $63([104])
	$6 = CALL $33($4)
	*($4 + [88]) = $1
	CALL $58($3, $6)
	*($8 + [120]) = (($8 + [16]) + [82])
	*($8 + [116]) = ($8 + [16])
	*($8 + [112]) = ($8 + [16])
	CALL $32(($8 + [112]), $6)
	$5 = *($4)
	*($4 + [92]) = CALL db_store_i64(*($1 + [8]), (int_64)-9026212813717995520, $2, $5, ($8 + [16]), [82])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [112]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [92])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [112]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $35(($1 + [24]), ($8 + [112]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [112])
	*($8 + [112]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $64($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [128])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [64]))), [1408])
	$5 = ((int_64)*($1 + [56]) + (int_64)*($3))
	*($1 + [56]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1456])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [1488])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [896])
	*($6 + [104]) = ($6 + [82])
	*($6 + [100]) = $6
	*($6 + [96]) = $6
	CALL $32(($6 + [96]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $6, [82])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [112])
}