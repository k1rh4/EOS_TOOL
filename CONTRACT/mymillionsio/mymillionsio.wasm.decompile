(data (i32.const 8192) "admin.set\00")
(data (i32.const 8202) "wallets.set\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8300) "woodf.buy\00")
(data (i32.const 8310) "metalf.buy\00")
(data (i32.const 8321) "oilf.buy\00")
(data (i32.const 8330) "jewelf.buy\00")
(data (i32.const 8341) "factory.buy\00")
(data (i32.const 8353) "level.up\00")
(data (i32.const 8362) "account.reg\00")
(data (i32.const 8374) "account.regr\00%d\00")
(data (i32.const 8390) "collect.one\00")
(data (i32.const 8402) "collect.all\00")
(data (i32.const 8414) "sell\00%lu\00")
(data (i32.const 8423) "sell.all\00")
(data (i32.const 8432) "withdraw\00")
(data (i32.const 8441) "withdraw.set\00")
(data (i32.const 8454) "eosio.token\00")
(data (i32.const 8466) "transfer\00")
(data (i32.const 8475) "You cannot change admin.\00")
(data (i32.const 8500) "Unregistered \'admin\' account.\00")
(data (i32.const 8530) "You cannot set developers wallet.\00")
(data (i32.const 8564) "Unregistered \'main\' account.\00")
(data (i32.const 8593) "Unregistered \'dev\' account.\00")
(data (i32.const 8621) "You cannot enable/disable withdraw.\00")
(data (i32.const 8657) "Withdraw operation temporarily disabled.\00")
(data (i32.const 8698) "invalid quantity\00")
(data (i32.const 8715) "must transfer positive quantity\00")
(data (i32.const 8747) "symbol precision mismatch\00")
(data (i32.const 8773) "Logic error: profile not found.\00")
(data (i32.const 8805) "Not enough \'withdraw\' balance.\00")
(data (i32.const 8836) "MyMillions: withdraw.\00")
(data (i32.const 8858) "Parameters error: count < 1.\00")
(data (i32.const 8887) "Logic error: Config for factory not found.\00")
(data (i32.const 8930) "Logic error: Profile not found.\00")
(data (i32.const 8962) "Logic error: Invalid main asset.\00")
(data (i32.const 8995) "User error: Not enough \'payment\' balance.\00")
(data (i32.const 9037) "From \'payment\' balance of user \00")
(data (i32.const 9069) " to main wallet for \00")
(data (i32.const 9090) " factory(ies) of \00")
(data (i32.const 9108) " level.\00")
(data (i32.const 9116) " to dev wallet for \00")
(data (i32.const 9136) "Config for factory not found.\00")
(data (i32.const 9166) "User is not registered.\00")
(data (i32.const 9190) "Wrong resource type.\00")
(data (i32.const 9211) "Wrong factory type.\00")
(data (i32.const 9231) "Wrong factory level.\00")
(data (i32.const 9252) "Account don\'t have factories of this level\00")
(data (i32.const 9295) "Not enough factories of this type\00")
(data (i32.const 9329) "Wrong level.\00")
(data (i32.const 9342) "Impossible to do levelup for this level.\00")
(data (i32.const 9383) "account does not exist. \00")
(data (i32.const 9408) "Account already registered. \00")
(data (i32.const 9437) "Referral id not registered.\00")
(data (i32.const 9465) "Stupid check failed.\00")
(data (i32.const 9486) "string is too long to be a valid name\00")
(data (i32.const 9524) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9591) "character is not in allowed character set for names\00")
(data (i32.const 9648) "\01\01\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\01\02\00\00\00\00\00\00\0c\00\00\00\00\00\00\00333333\f3?\05\00\00\00\00\00\00\00\01\03\00\00\00\00\00\00$\00\00\00\00\00\00\00\9a\99\99\99\99\99\15@\0c\00\00\00\00\00\00\00\01\04\00\00\00\00\00\00`\00\00\00\00\00\00\00\00\00\00\00\00\008@\1e\00\00\00\00\00\00\00\01\05\00\00\00\00\00\00\14\01\00\00\00\00\00\00fffff&X@Z\00\00\00\00\00\00\00\01\06\00\00\00\00\00\00|\02\00\00\00\00\00\00\cd\cc\cc\cc\cc\cco@\b4\00\00\00\00\00\00\00\01\07\00\00\00\00\00\00\b4\06\00\00\00\00\00\00\00\00\00\00\00\d0\8a@\1c\02\00\00\00\00\00\00\02\01\00\00\00\00\00\00\04\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\02\02\00\00\00\00\00\00\10\00\00\00\00\00\00\00\14\aeG\e1z\14\f6?\t\00\00\00\00\00\00\00\02\03\00\00\00\00\00\004\00\00\00\00\00\00\00R\b8\1e\85\ebQ!@\1b\00\00\00\00\00\00\00\02\04\00\00\00\00\00\00\98\00\00\00\00\00\00\00fffff\e6C@K\00\00\00\00\00\00\00\02\05\00\00\00\00\00\00\b4\01\00\00\00\00\00\00\f6(\\\8f\c2uc@\d5\00\00\00\00\00\00\00\02\06\00\00\00\00\00\00x\04\00\00\00\00\00\00\ecQ\b8\1e\85\a3~@\13\02\00\00\00\00\00\00\02\07\00\00\00\00\00\00\a8\0b\00\00\00\00\00\00\cd\cc\cc\cc\cc\b4\98@m\05\00\00\00\00\00\00\03\01\00\00\00\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\03\02\00\00\00\00\00\00\18\00\00\00\00\00\00\00=\n\d7\a3p=\fa?\0f\00\00\00\00\00\00\00\03\03\00\00\00\00\00\00B\00\00\00\00\00\00\00\00\00\00\00\00\00%@#\00\00\00\00\00\00\00\03\04\00\00\00\00\00\00\cc\00\00\00\00\00\00\00\1f\85\ebQ\b8~I@s\00\00\00\00\00\00\00\03\05\00\00\00\00\00\004\02\00\00\00\00\00\00\f6(\\\8f\c2mf@,\01\00\00\00\00\00\00\03\06\00\00\00\00\00\00\a0\05\00\00\00\00\00\00\b8\1e\85\ebQb\81@\da\02\00\00\00\00\00\00\03\07\00\00\00\00\00\00\16\11\00\00\00\00\00\00\14\aeG\e1z\15\a1@\8d\t\00\00\00\00\00\00\04\01\00\00\00\00\00\00\08\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\00\00\00\00\04\02\00\00\00\00\00\000\00\00\00\00\00\00\00\b8\1e\85\ebQ\b8\10@2\00\00\00\00\00\00\00\04\03\00\00\00\00\00\00\80\00\00\00\00\00\00\0033333\b30@d\00\00\00\00\00\00\00\04\04\00\00\00\00\00\00\98\01\00\00\00\00\00\00\a4p=\n\d7\d3\\@^\01\00\00\00\00\00\00\04\05\00\00\00\00\00\00\c8\03\00\00\00\00\00\00\1f\85\ebQ\b8\bas@\bc\02\00\00\00\00\00\00\04\06\00\00\00\00\00\00 \t\00\00\00\00\00\00\8f\c2\f5(\\\'\8e@\ae\06\00\00\00\00\00\00\04\07\00\00\00\00\00\00x\1a\00\00\00\00\00\00ffff\e6\9e\ab@\ae\15\00\00\00\00\00\00")
(data (i32.const 10544) "cannot create objects in table of another contract\00")
(data (i32.const 10595) "write\00")
(data (i32.const 10601) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10660) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10709) "invalid symbol name\00")
(data (i32.const 10732) "\f0)\00\00")
(data (i32.const 10736) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10769) "cannot pass end iterator to modify\00")
(data (i32.const 10804) "object passed to modify is not in multi_index\00")
(data (i32.const 10850) "cannot modify objects in table of another contract\00")
(data (i32.const 10901) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10960) "attempt to subtract asset with different symbol\00")
(data (i32.const 11008) "subtraction underflow\00")
(data (i32.const 11030) "subtraction overflow\00")
(data (i32.const 11051) "Logic error: Invalid asset.\00")
(data (i32.const 11079) "attempt to add asset with different symbol\00")
(data (i32.const 11122) "addition underflow\00")
(data (i32.const 11141) "addition overflow\00")
(data (i32.const 11159) "read\00")
(data (i32.const 11164) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 11215) "error reading iterator\00")
(data (i32.const 11238) "singleton does not exist\00")
(data (i32.const 11263) "cannot increment end iterator\00")
(data (i32.const 11293) "cannot pass end iterator to erase\00")
(data (i32.const 11327) "object passed to erase is not in multi_index\00")
(data (i32.const 11372) "cannot erase objects in table of another contract\00")
(data (i32.const 11422) "attempt to remove object that was not in multi_index\00")
(data (i32.const 11475) "get\00")
(data (i32.const 19904) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "is_account" (func $fimport$5 (param i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$9 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$10 (param i32 i64 i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$13 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$15 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$16 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(import "env" "db_idx64_next" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_Znwj" (func $87))
(export "_ZdlPv" (func $89))
(export "_Znaj" (func $88))
(export "_ZdaPv" (func $90))
(export "_ZnwjSt11align_val_t" (func $91))
(export "_ZnajSt11align_val_t" (func $92))
(export "_ZdlPvSt11align_val_t" (func $93))
(export "_ZdaPvSt11align_val_t" (func $94))
(table $0 20 20 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $10 $11 $12 $14 $16 $17 $19 $21 $22 $23 $24 $26 $28 $111 $113)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19984))
(global $global$2 i32 (i32.const 19984))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $100($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $95 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $117(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [11480])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $117(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $122($0)
	
.LABEL $label$1
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19884])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19692]
	$3 = (((int_32)$1 * (int_32)[12]) + [19692])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $121 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11492]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11496])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11492]) = [1]
	$2 = ($2 << [16])
	*([0] + [11496]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11496])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11496]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11492]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11492]) = [1]
	$3 = ($3 << [16])
	*([0] + [11496]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11496])
	
.LABEL $label$10
	*([0] + [11496]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $121($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8214])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [11159])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11159])
	CALL memcpy(($0 + [8]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [11159])
	CALL memcpy(($0 + [9]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [11159])
	CALL memcpy(($0 + [12]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	float_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [10804])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10850])
	$6 = *($1)
	*(($5 = $4) + [72]) = $6
	$7 = (*(*($3)) + [-1])
	if ( ((uint_32)$7 > (uint_32)[3]) ){ goto $label$1 }
	$8 = *($3 + [4])
	goto $label$14 
	
.LABEL $label$14
	$9 = ((float_64)((float_64)*(($8 + [80])) * (float_64)(CASTING float_64)(uint_64 ((int_64)*($1 + [32]) * (int_64)10000))) / (float_64)(float_64)1e3)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$10 }
	$10 = (int_64)-9223372036854775808
	goto $label$9 
	
.LABEL $label$13
	$9 = ((float_64)((float_64)*(($8 + [88])) * (float_64)(CASTING float_64)(uint_64 ((int_64)*($1 + [40]) * (int_64)10000))) / (float_64)(float_64)1e3)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$8 }
	$10 = (int_64)-9223372036854775808
	goto $label$7 
	
.LABEL $label$12
	$9 = ((float_64)((float_64)*(($8 + [96])) * (float_64)(CASTING float_64)(uint_64 ((int_64)*($1 + [48]) * (int_64)10000))) / (float_64)(float_64)1e3)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$6 }
	$10 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$11
	$9 = ((float_64)((float_64)*(($8 + [104])) * (float_64)(CASTING float_64)(uint_64 ((int_64)*($1 + [56]) * (int_64)10000))) / (float_64)(float_64)1e3)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$4 }
	$10 = (int_64)-9223372036854775808
	goto $label$3 
	
.LABEL $label$10
	$10 = (Rounds 0)($9)
	
.LABEL $label$9
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10660])
	$11 = ($1 + [32])
	$12 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$12 = $13
	$14 = [1]
	$15 = $7
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$12 = $13
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$14 = ((int_32)$7 < (int_32)[6])
	$15 = ($7 + [1])
	$7 = $15
	if ( $14 ){ goto $label$19 }
	$14 = [1]
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$14 = [0]
	
.LABEL $label$15
	CALL eosio_assert($14, [10709])
	$12 = *(*($3 + [8]))
	*($5 + [104]) = (int_64)1397703940
	*(($5 + [16])) = *($5 + [104])
	*($5 + [96]) = $10
	*($5 + [8]) = *($5 + [96])
	CALL $83($8, $12, ($5 + [8]))
	goto $label$2 
	
.LABEL $label$8
	$10 = (Rounds 0)($9)
	
.LABEL $label$7
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10660])
	$11 = ($1 + [40])
	$12 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$12 = $13
	$14 = [1]
	$15 = $7
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$12 = $13
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$14 = ((int_32)$7 < (int_32)[6])
	$15 = ($7 + [1])
	$7 = $15
	if ( $14 ){ goto $label$24 }
	$14 = [1]
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$14 = [0]
	
.LABEL $label$20
	CALL eosio_assert($14, [10709])
	$12 = *(*($3 + [8]))
	*($5 + [104]) = (int_64)1397703940
	*(($5 + [32])) = *($5 + [104])
	*($5 + [96]) = $10
	*($5 + [24]) = *($5 + [96])
	CALL $83($8, $12, ($5 + [24]))
	goto $label$2 
	
.LABEL $label$6
	$10 = (Rounds 0)($9)
	
.LABEL $label$5
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10660])
	$11 = ($1 + [48])
	$12 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$12 = $13
	$14 = [1]
	$15 = $7
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$12 = $13
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$14 = ((int_32)$7 < (int_32)[6])
	$15 = ($7 + [1])
	$7 = $15
	if ( $14 ){ goto $label$29 }
	$14 = [1]
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$14 = [0]
	
.LABEL $label$25
	CALL eosio_assert($14, [10709])
	$12 = *(*($3 + [8]))
	*($5 + [104]) = (int_64)1397703940
	*(($5 + [48])) = *($5 + [104])
	*($5 + [96]) = $10
	*($5 + [40]) = *($5 + [96])
	CALL $83($8, $12, ($5 + [40]))
	goto $label$2 
	
.LABEL $label$4
	$10 = (Rounds 0)($9)
	
.LABEL $label$3
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10660])
	$11 = ($1 + [56])
	$12 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$12 = $13
	$14 = [1]
	$15 = $7
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$12 = $13
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$14 = ((int_32)$7 < (int_32)[6])
	$15 = ($7 + [1])
	$7 = $15
	if ( $14 ){ goto $label$34 }
	$14 = [1]
	$7 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$14 = [0]
	
.LABEL $label$30
	CALL eosio_assert($14, [10709])
	$12 = *(*($3 + [8]))
	*($5 + [104]) = (int_64)1397703940
	*(($5 + [64])) = *($5 + [104])
	*($5 + [96]) = $10
	*($5 + [56]) = *($5 + [96])
	CALL $83($8, $12, ($5 + [56]))
	
.LABEL $label$2
	*($11) = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [10901])
	$14 = $4
	$7 = ($14 + [-128])
	$global$0 = $7
	*($5 + [100]) = $7
	*($5 + [96]) = $7
	*($5 + [104]) = ($14 + [-6])
	CALL $42(($5 + [96]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $7, [122])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$35 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$35
	*($5 + [88]) = *($1)
	if ( (CALL $115(($5 + [72]), ($5 + [88]), [8]) == 0) ){ goto $label$36 }
	$14 = ($1 + [136])
	$7 = *($14)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$37 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749779137757184, ($5 + [80]), $6)
	*($14) = $7
	
.LABEL $label$37
	CALL db_idx64_update($7, $2, ($5 + [88]))
	
.LABEL $label$36
	$global$0 = ($5 + [112])
	$7
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [11263])
	$2 = *($0 + [4])
	$3 = *(($2 + [36]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)6454109468622848001, ($1 + [8]), ((int_64)((int_64)((int_64)*($2 + [8]) * (int_64)100) + (int_64)((int_64)*($2) * (int_64)1000)) + (int_64)*($2 + [9])))
	*((*(($0 + [4])) + [36])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$3 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $34($1, *(*($0)), *($1 + [8]))
	$2 = *($1 + [4])
	*(($0 + [4])) = $2
	*(($2 + [36])) = $3
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$2
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	*($1 + [8]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000000)
	$6 = [0]
	*($1 + [24]) = [0]
	*($1 + [16]) = *(*($4 + [4]))
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [48]) = (int_64)0
	CALL eosio_assert([1], [10660])
	$7 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$4 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [10709])
	*(($1 + [72])) = (int_64)1397703940
	*($1 + [64]) = (int_64)0
	CALL eosio_assert([1], [10660])
	$7 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$4 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [10709])
	*(($1 + [88])) = (int_64)1397703940
	*($1 + [80]) = (int_64)0
	CALL eosio_assert([1], [10660])
	$7 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$7 = $8
	$4 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$7 = $8
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [10709])
	*(($1 + [104])) = (int_64)1397703940
	*($1 + [96]) = (int_64)0
	CALL eosio_assert([1], [10660])
	$7 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$7 = $8
	$4 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$7 = $8
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [10709])
	*(($1 + [120])) = (int_64)1397703940
	*($1 + [112]) = (int_64)0
	$4 = $2
	$6 = ($4 + [-128])
	$global$0 = $6
	*($3 + [12]) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = ($4 + [-6])
	CALL $42(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [132]) = CALL db_store_i64(*($5 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $7, $6, [122])
	if ( (uint_64)($7 <= *($5 + [16])) ){ goto $label$21 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	$7 = *(($5 + [8]))
	$8 = *(*(($0 + [8])))
	$10 = *($1)
	*($3 + [24]) = $10
	*($1 + [136]) = CALL db_idx64_store($7, (int_64)3607749779137757184, $8, $10, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [104]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [120]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)3607749779137757184, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [128]) == (int_32)$7), [11164])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $32($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)3607749779137757184, $6))
	CALL eosio_assert(((int_32)*($4 + [128]) == (int_32)$7), [11164])
	
.LABEL $label$2
	*(($4 + [136])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $40 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = ($0 + [240])
	$8 = *(($0 + [268]))
	$7 = *(($0 + [264]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [128]) == (int_32)$6), [11164])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $32($6, $9)
	CALL eosio_assert(((int_32)*($10 + [128]) == (int_32)$6), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9166])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9211])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9231])
	$8 = ($0 + [280])
	CALL $34(($5 + [8]), $8, ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $2) * (int_64)100) + (int_64)((int_64)$1 * (int_64)1000)) + (int_64)(CASTING uint_64)(uint_32 $3)))
	$9 = *($5 + [12])
	if ( ($9 == 0) ){ goto $label$6 }
	$1 = *($0)
	CALL eosio_assert([1], [10769])
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$8), [10804])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$7()), [10850])
	*($9 + [12]) = (*($9 + [12]) + $4)
	$11 = *($9)
	*($5 + [64]) = $11
	$11 = ((int_64)((int_64)*(($9 + [8])) * (int_64)100) + (int_64)((int_64)$11 * (int_64)1000))
	*($5 + [72]) = $11
	$12 = *($9 + [9])
	CALL eosio_assert([1], [10901])
	*($5 + [56]) = (($5 + [16]) + [22])
	*($5 + [52]) = ($5 + [16])
	*($5 + [48]) = ($5 + [16])
	CALL $35(($5 + [48]), $9)
	CALL db_update_i64(*($9 + [28]), $1, ($5 + [16]), [22])
	$8 = ($0 + [296])
	$11 = ((int_64)$11 + (int_64)$12)
	if ( (uint_64)($11 <= *($8)) ){ goto $label$7 }
	*($8) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$8 = (($5 + [64]) + [8])
	*($5 + [88]) = *($9)
	if ( (CALL $115(($5 + [64]), ($5 + [88]), [8]) == 0) ){ goto $label$8 }
	$7 = ($9 + [32])
	$10 = *($7)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$9 }
	$10 = CALL db_idx64_find_primary(*(($0 + [280])), *(($0 + [288])), (int_64)6454109468622848000, ($5 + [80]), $11)
	*($7) = $10
	
.LABEL $label$9
	CALL db_idx64_update($10, $1, ($5 + [88]))
	
.LABEL $label$8
	*($5 + [88]) = ((int_64)((int_64)*(($9 + [8])) * (int_64)100) + (int_64)((int_64)*($9) * (int_64)1000))
	if ( (CALL $115($8, ($5 + [88]), [8]) == 0) ){ goto $label$5 }
	$8 = ($9 + [36])
	$9 = *($8)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$10 }
	$9 = CALL db_idx64_find_primary(*(($0 + [280])), *(($0 + [288])), (int_64)6454109468622848001, ($5 + [80]), $11)
	*($8) = $9
	
.LABEL $label$10
	CALL db_idx64_update($9, $1, ($5 + [88]))
	$global$0 = ($5 + [96])
	return 
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$7()), [10544])
	*(($9 = CALL _Znwj([40])) + [24]) = $8
	*($9 + [8]) = $2
	*($9) = $1
	*($9 + [9]) = $3
	*($9 + [12]) = $4
	*($9 + [16]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000000)
	*($5 + [72]) = (($5 + [16]) + [22])
	*($5 + [68]) = ($5 + [16])
	*($5 + [64]) = ($5 + [16])
	CALL $35(($5 + [64]), $9)
	$11 = ((int_64)((int_64)((int_64)*($9 + [8]) * (int_64)100) + (int_64)((int_64)*($9) * (int_64)1000)) + (int_64)*($9 + [9]))
	$8 = ($0 + [288])
	*($9 + [28]) = CALL db_store_i64(*($8), (int_64)6454109468622848000, $1, $11, ($5 + [16]), [22])
	$10 = ($0 + [296])
	if ( (uint_64)($11 <= *($10)) ){ goto $label$11 }
	*($10) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$11 = *($8)
	$10 = ($9 + [9])
	$12 = *($10)
	$7 = ($9 + [8])
	$13 = *($7)
	$14 = *($9)
	*($5 + [48]) = $14
	*($9 + [32]) = CALL db_idx64_store($11, (int_64)6454109468622848000, $1, ((int_64)$12 + (int_64)((int_64)((int_64)$13 * (int_64)100) + (int_64)((int_64)$14 * (int_64)1000))), ($5 + [48]))
	$11 = *($8)
	$12 = *($10)
	$13 = ((int_64)((int_64)*($7) * (int_64)100) + (int_64)((int_64)*($9) * (int_64)1000))
	*($5 + [48]) = $13
	*($9 + [36]) = CALL db_idx64_store($11, (int_64)6454109468622848001, $1, ((int_64)$13 + (int_64)$12), ($5 + [48]))
	*($5 + [64]) = $9
	$1 = ((int_64)((int_64)((int_64)*($7) * (int_64)100) + (int_64)((int_64)*($9) * (int_64)1000)) + (int_64)*($10))
	*($5 + [16]) = $1
	$10 = *(($9 + [28]))
	*($5 + [48]) = $10
	$7 = ($0 + [308])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [312]))) ){ goto $label$13 }
	*($8 + [8]) = $1
	*($8 + [16]) = $10
	*($5 + [64]) = [0]
	*($8) = $9
	*($7) = ($8 + [24])
	$9 = *($5 + [64])
	*($5 + [64]) = [0]
	if ( $9 ){ goto $label$12 }
	goto $label$5 
	
.LABEL $label$13
	CALL $36(($0 + [304]), ($5 + [64]), ($5 + [16]), ($5 + [48]))
	$9 = *($5 + [64])
	*($5 + [64]) = [0]
	if ( ($9 == 0) ){ goto $label$5 }
	
.LABEL $label$12
	CALL _ZdlPv($9)
	
.LABEL $label$5
	$global$0 = ($5 + [96])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [10804])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10850])
	$6 = *($1)
	*(($5 = $4) + [24]) = $6
	$7 = (*(*($3)) + [-1])
	if ( ((uint_32)$7 > (uint_32)[3]) ){ goto $label$1 }
	goto $label$6 
	
.LABEL $label$6
	$7 = ($1 + [32])
	goto $label$2 
	
.LABEL $label$5
	$7 = ($1 + [40])
	goto $label$2 
	
.LABEL $label$4
	$7 = ($1 + [48])
	goto $label$2 
	
.LABEL $label$3
	$7 = ($1 + [56])
	
.LABEL $label$2
	*($7) = ((int_64)*($7) + (int_64)*(*($3 + [4])))
	
.LABEL $label$1
	CALL eosio_assert([1], [10901])
	$3 = $4
	$4 = ($3 + [-128])
	$global$0 = $4
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($3 + [-6])
	CALL $42(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $4, [122])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($5 + [40]) = *($1)
	if ( (CALL $115(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$8 }
	$4 = ($1 + [136])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$9 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749779137757184, ($5 + [32]), $6)
	*($4) = $1
	
.LABEL $label$9
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$8
	$global$0 = ($5 + [48])
	$7
}

int_64 .FUNC $46 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	$3 = ($0 + [200])
	$4 = ((int_64)((int_64)*($1 + [8]) * (int_64)100) + (int_64)*($1 + [9]))
	$6 = *(($0 + [228]))
	$5 = *(($0 + [224]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)((int_64)((int_64)*($8) * (int_64)100) + (int_64)*($8 + [1])) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$3), [11164])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [208])), (int_64)6454109477036808192, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $62($3, $7)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$3), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9136])
	$9 = ((float_64)((float_64)((float_64)((float_64)*($8 + [16]) + (float_64)(CASTING float_64)(uint_64 *($8 + [8]))) * (float_64)(CASTING float_64)(uint_32 *($1 + [12]))) * (float_64)(CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 ((int_64))($2 - *($1 + [16])) / (int_64)1000000)))) / (float_64)(float_64)60
	if ( (((float_64)$9) < (float_64)(float_64)18446744073709551615) & ((float_64)$9 >= (float_64)(float_64)0)) ){ goto $label$5 }
	return (int_64)0
	
.LABEL $label$5
	return (Rounds 0)($9)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11215])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $119($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([40])) + [12]) = [1]
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL $80(($3 + [32]), $5)
	*($5 + [28]) = $1
	*($5 + [32 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = ((int_64)((int_64)((int_64)*($5 + [8]) * (int_64)100) + (int_64)((int_64)*($5) * (int_64)1000)) + (int_64)*($5 + [9]))
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $122($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $119($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [360]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [11159])
	CALL memcpy(($4 + [360]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $30(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [360])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $122($2)
	
.LABEL $label$6
	CALL $31($8)
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [240])
	$4 = *(($0 + [268]))
	$3 = *(($0 + [264]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$2), [11164])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $32($2, $5)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$2), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9166])
	CALL $12($0, $1, [2])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $119($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [368]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [376]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [11159])
	CALL memcpy(($4 + [360]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [11159])
	CALL memcpy((($4 + [360]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [11159])
	CALL memcpy((($4 + [360]) + [16]), ($2 + [16]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [24])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$8 = CALL $30(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [376])
	$1 = *($4 + [368])
	$9 = *($4 + [360])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $122($2)
	
.LABEL $label$6
	CALL $31($8)
	$global$0 = ($4 + [384])
	return [1]
}

void .FUNC $7 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [240])
	$4 = *(($0 + [268]))
	$3 = *(($0 + [264]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$2), [11164])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $32($2, $5)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$2), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9166])
	CALL $12($0, $1, [1])
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $119($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [360]) = (int_64)0
	*($4 + [352]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [11159])
	CALL memcpy(($4 + [352]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [11159])
	CALL memcpy((($4 + [352]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $30(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [360])
	$1 = *($4 + [352])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $122($2)
	
.LABEL $label$6
	CALL $31($8)
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	CALL require_auth($1)
	$4 = [1]
	if ( ((int_64)*(($0 + [48])) == (int_64)$1) ){ goto $label$1 }
	$4 = ((int_64)*(($0 + [40])) == (int_64)$1)
	
.LABEL $label$1
	CALL eosio_assert($4, [8530])
	CALL eosio_assert(CALL $fimport$5($2), [8564])
	CALL eosio_assert(CALL $fimport$5($3), [8593])
	*(($0 + [56])) = $3
	*(($0 + [64])) = $2
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9486])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9591])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9524])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9591])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	CALL require_auth($1)
	$3 = [1]
	$4 = ($0 + [48])
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$1 }
	$3 = ((int_64)*(($0 + [40])) == (int_64)$1)
	
.LABEL $label$1
	CALL eosio_assert($3, [8475])
	CALL eosio_assert(CALL $fimport$5($2), [8500])
	*($4) = $2
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [576])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	*($3 + [560]) = [8192]
	*($3 + [564]) = CALL $116([8192])
	*($3 + [272]) = *($3 + [560])
	CALL $2(($3 + [568]), ($3 + [272]))
	if ( ((int_64)$2 != (int_64)3631283948598329344) ){ goto $label$3 }
	*($3 + [556]) = [0]
	*($3 + [552]) = [1]
	*($3) = *($3 + [552])
	CALL $4($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [544]) = [8202]
	*($3 + [548]) = CALL $116([8202])
	*($3 + [264]) = *($3 + [544])
	CALL $2(($3 + [568]), ($3 + [264]))
	if ( ((int_64)$2 != (int_64)-2187881461833354752) ){ goto $label$4 }
	*($3 + [540]) = [0]
	*($3 + [536]) = [2]
	*($3 + [8]) = *($3 + [536])
	CALL $6($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [528]) = [8300]
	*($3 + [532]) = CALL $116([8300])
	*($3 + [256]) = *($3 + [528])
	CALL $2(($3 + [568]), ($3 + [256]))
	if ( ((int_64)$2 != (int_64)-1934131658757242880) ){ goto $label$5 }
	*($3 + [524]) = [0]
	*($3 + [520]) = [3]
	*($3 + [16]) = *($3 + [520])
	CALL $8($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [512]) = [8310]
	*($3 + [516]) = CALL $116([8310])
	*($3 + [248]) = *($3 + [512])
	CALL $2(($3 + [568]), ($3 + [248]))
	if ( ((int_64)$2 != (int_64)-7876117710242349056) ){ goto $label$6 }
	*($3 + [508]) = [0]
	*($3 + [504]) = [4]
	*($3 + [24]) = *($3 + [504])
	CALL $8($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [496]) = [8321]
	*($3 + [500]) = CALL $116([8321])
	*($3 + [240]) = *($3 + [496])
	CALL $2(($3 + [568]), ($3 + [240]))
	if ( ((int_64)$2 != (int_64)-6655563650532638720) ){ goto $label$7 }
	*($3 + [492]) = [0]
	*($3 + [488]) = [5]
	*($3 + [32]) = *($3 + [488])
	CALL $8($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [480]) = [8330]
	*($3 + [484]) = CALL $116([8330])
	*($3 + [232]) = *($3 + [480])
	CALL $2(($3 + [568]), ($3 + [232]))
	if ( ((int_64)$2 != (int_64)8843003325161373696) ){ goto $label$8 }
	*($3 + [476]) = [0]
	*($3 + [472]) = [6]
	*($3 + [40]) = *($3 + [472])
	CALL $8($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [464]) = [8341]
	*($3 + [468]) = CALL $116([8341])
	*($3 + [224]) = *($3 + [464])
	CALL $2(($3 + [568]), ($3 + [224]))
	if ( ((int_64)$2 != (int_64)6454109477036538880) ){ goto $label$9 }
	*($3 + [460]) = [0]
	*($3 + [456]) = [7]
	*($3 + [48]) = *($3 + [456])
	CALL $13($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [448]) = [8353]
	*($3 + [452]) = CALL $116([8353])
	*($3 + [216]) = *($3 + [448])
	CALL $2(($3 + [568]), ($3 + [216]))
	if ( ((int_64)$2 != (int_64)-8451382368693911552) ){ goto $label$10 }
	*($3 + [444]) = [0]
	*($3 + [440]) = [8]
	*($3 + [56]) = *($3 + [440])
	CALL $15($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [432]) = [8362]
	*($3 + [436]) = CALL $116([8362])
	*($3 + [208]) = *($3 + [432])
	CALL $2(($3 + [568]), ($3 + [208]))
	if ( ((int_64)$2 != (int_64)3607749778747332608) ){ goto $label$11 }
	*($3 + [428]) = [0]
	*($3 + [424]) = [9]
	*($3 + [64]) = *($3 + [424])
	CALL $8($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [416]) = [8374]
	*($3 + [420]) = CALL $116([8374])
	*($3 + [200]) = *($3 + [416])
	CALL $2(($3 + [568]), ($3 + [200]))
	if ( ((int_64)$2 != (int_64)3607749778747332976) ){ goto $label$12 }
	*($3 + [412]) = [0]
	*($3 + [408]) = [10]
	*($3 + [72]) = *($3 + [408])
	CALL $18($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [400]) = [8390]
	*($3 + [404]) = CALL $116([8390])
	*($3 + [192]) = *($3 + [400])
	CALL $2(($3 + [568]), ($3 + [192]))
	if ( ((int_64)$2 != (int_64)4981848853417612288) ){ goto $label$13 }
	*($3 + [396]) = [0]
	*($3 + [392]) = [11]
	*($3 + [80]) = *($3 + [392])
	CALL $20($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$13
	*($3 + [384]) = [8402]
	*($3 + [388]) = CALL $116([8402])
	*($3 + [184]) = *($3 + [384])
	CALL $2(($3 + [568]), ($3 + [184]))
	if ( ((int_64)$2 != (int_64)4981848853410243072) ){ goto $label$14 }
	*($3 + [380]) = [0]
	*($3 + [376]) = [12]
	*($3 + [88]) = *($3 + [376])
	CALL $8($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$14
	*($3 + [368]) = [8414]
	*($3 + [372]) = CALL $116([8414])
	*($3 + [176]) = *($3 + [368])
	CALL $2(($3 + [568]), ($3 + [176]))
	if ( ((int_64)$2 != (int_64)-4421672816961650688) ){ goto $label$15 }
	*($3 + [364]) = [0]
	*($3 + [360]) = [13]
	*($3 + [96]) = *($3 + [360])
	CALL $13($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$15
	*($3 + [352]) = [8423]
	*($3 + [356]) = CALL $116([8423])
	*($3 + [168]) = *($3 + [352])
	CALL $2(($3 + [568]), ($3 + [168]))
	if ( ((int_64)$2 != (int_64)-4421672704470417408) ){ goto $label$16 }
	*($3 + [348]) = [0]
	*($3 + [344]) = [14]
	*($3 + [104]) = *($3 + [344])
	CALL $8($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$16
	*($3 + [336]) = [8432]
	*($3 + [340]) = CALL $116([8432])
	*($3 + [160]) = *($3 + [336])
	CALL $2(($3 + [568]), ($3 + [160]))
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$17 }
	*($3 + [332]) = [0]
	*($3 + [328]) = [15]
	*($3 + [112]) = *($3 + [328])
	CALL $25($1, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$17
	*($3 + [320]) = [8441]
	*($3 + [324]) = CALL $116([8441])
	*($3 + [152]) = *($3 + [320])
	CALL $2(($3 + [568]), ($3 + [152]))
	if ( ((int_64)$2 != (int_64)-2039333636196133488) ){ goto $label$2 }
	*($3 + [316]) = [0]
	*($3 + [312]) = [16]
	*($3 + [120]) = *($3 + [312])
	CALL $27($1, $1, ($3 + [120]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [304]) = [8454]
	*($3 + [308]) = CALL $116([8454])
	*($3 + [144]) = *($3 + [304])
	CALL $2(($3 + [568]), ($3 + [144]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [288]) = [8466]
	*($3 + [292]) = CALL $116([8466])
	*($3 + [136]) = *($3 + [288])
	CALL $2(($3 + [296]), ($3 + [136]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [17]
	*($3 + [128]) = *($3 + [280])
	CALL $29($0, (int_64)6138663591592764928, ($3 + [128]))
	
.LABEL $label$1
	CALL $109([0])
	$global$0 = ($3 + [576])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ( $2 ? [0] : ((($2 + [-1]) & [255]) <= [4]) )
	$6 = [1]
	$7 = [0]
	$8 = ($3 + [-1])
	$2 = ($8 & [255])
	if ( ((uint_32)$2 > (uint_32)[6]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 (uint_64)(int_64)7722435347202 >> (uint_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)255) << (int_64)3)))
	$7 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9190])
	CALL eosio_assert(($2 <= [7]), [9329])
	CALL eosio_assert(((int_32)$7 != (int_32)[7]), [9342])
	$9 = ($0 + [240])
	$3 = *(($0 + [268]))
	$10 = *(($0 + [264]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$3 = $2
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$9), [11164])
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	$2 = CALL db_find_i64(*($9), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $32($9, $2)
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$9), [11164])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9166])
	$2 = ($6 & [255])
	CALL $33($0, $1, $5, $2, $4)
	CALL $19($0, $1, $5, $7)
	CALL $19($0, $1, $5, $2)
	CALL $39($0, $1, $5, $7, $4)
	CALL $40($0, $1, $5, $2, $4)
	CALL $37($0, $1)
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [400])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $119($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [376]) = (int_64)0
	*($4 + [384]) = [0]
	*($4 + [388]) = [0]
	*($4 + [364]) = $2
	*($4 + [360]) = $2
	*($4 + [368]) = ($2 + $7)
	*($4 + [392]) = ($4 + [360])
	*($4 + [40]) = ($4 + [376])
	CALL $38(($4 + [40]), ($4 + [392]))
	$3 = *($4 + [368])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$8 = *($4 + [360])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	$9 = CALL $30(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$10 = *($4 + [388])
	$11 = *($4 + [385])
	$12 = *($4 + [384])
	$0 = *($4 + [376])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($12 & [255])), (int_32 ($11 & [255])), (int_32 $10), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $122($2)
	
.LABEL $label$5
	CALL $31($9)
	$global$0 = ($4 + [400])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	CALL $17($0, $1, (int_64)0)
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [16]) = $2
	*($3 + [24]) = $1
	CALL eosio_assert(CALL $fimport$5($1), [9383])
	CALL require_auth($1)
	$4 = ($0 + [240])
	$6 = *(($0 + [268]))
	$5 = *(($0 + [264]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$4), [11164])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $32($4, $7)
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$4), [11164])
	
.LABEL $label$1
	CALL eosio_assert(($8 == 0), [9408])
	if ( (int_64)($2 == 0) ){ goto $label$5 }
	*($3 + [8]) = $4
	CALL $41(($3 + [32]), ($3 + [8]), ($3 + [16]))
	$7 = [0]
	$6 = *($3 + [36])
	if ( ($6 == 0) ){ goto $label$6 }
	$7 = ( $6 ? [0] : ((int_64)*($3 + [16]) == (int_64)*($6)) )
	
.LABEL $label$6
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9437])
	$2 = *($0)
	CALL eosio_assert($6, [10769])
	$6 = *($3 + [8])
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)$6), [10804])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL $fimport$7()), [10850])
	*($7 + [24]) = (*($7 + [24]) + [1])
	$1 = *($7)
	*($3 + [184]) = $1
	CALL eosio_assert([1], [10901])
	*($3 + [176]) = (($3 + [32]) + [122])
	*($3 + [172]) = ($3 + [32])
	*($3 + [168]) = ($3 + [32])
	CALL $42(($3 + [168]), $7)
	CALL db_update_i64(*($7 + [132]), $2, ($3 + [32]), [122])
	if ( (uint_64)($1 <= *($6 + [16])) ){ goto $label$7 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($3 + [200]) = *($7)
	if ( (CALL $115(($3 + [184]), ($3 + [200]), [8]) == 0) ){ goto $label$8 }
	$8 = ($7 + [136])
	$7 = *($8)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$9 }
	$7 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)3607749779137757184, ($3 + [192]), $1)
	*($8) = $7
	
.LABEL $label$9
	CALL db_idx64_update($7, $2, ($3 + [200]))
	
.LABEL $label$8
	$1 = *($3 + [24])
	
.LABEL $label$5
	*($3 + [204]) = ($3 + [16])
	*($3 + [200]) = ($3 + [24])
	*($3 + [168]) = $1
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL $fimport$7()), [10544])
	*($3 + [32]) = $4
	*($3 + [36]) = ($3 + [200])
	*($3 + [40]) = ($3 + [168])
	*(($7 = CALL _Znwj([144])) + [8]) = (int_64)0
	*($7) = (int_64)0
	*($7 + [64]) = (int_64)0
	*($7 + [72]) = (int_64)0
	*($7 + [80]) = (int_64)0
	*($7 + [88]) = (int_64)0
	*($7 + [96]) = (int_64)0
	*($7 + [104]) = (int_64)0
	*($7 + [112]) = (int_64)0
	*($7 + [120]) = (int_64)0
	*($7 + [128]) = $4
	CALL $43(($3 + [32]), $7)
	*($3 + [192]) = $7
	$1 = *($7)
	*($3 + [32]) = $1
	$8 = *($7 + [132])
	*($3 + [184]) = $8
	$5 = ($0 + [268])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [272]))) ){ goto $label$12 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [192]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( $7 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $44(($0 + [264]), ($3 + [192]), ($3 + [32]), ($3 + [184]))
	$7 = *($3 + [192])
	*($3 + [192]) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($3 + [208])
}

void .FUNC $10 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [240])
	$4 = *(($0 + [268]))
	$3 = *(($0 + [264]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$2), [11164])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $32($2, $5)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$2), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9166])
	CALL $12($0, $1, [3])
}

void .FUNC $11 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [240])
	$4 = *(($0 + [268]))
	$3 = *(($0 + [264]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$2), [11164])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $32($2, $5)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$2), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9166])
	CALL $12($0, $1, [4])
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [96])
	$global$0 = $3
	$4 = ((($2 + [-1]) & [255]) <= [4])
	CALL eosio_assert($4, [9190])
	$5 = [0]
	$6 = ( $2 ? [0] : $4 )
	$7 = ($0 + [240])
	$4 = *(($0 + [268]))
	$8 = *(($0 + [264]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($4 + [-24])
	$9 = *($2)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$4 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$7), [11164])
	$5 = $9
	goto $label$1 
	
.LABEL $label$2
	$2 = CALL db_find_i64(*($7), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $32($7, $2)
	CALL eosio_assert(((int_32)*($5 + [128]) == (int_32)$7), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9166])
	CALL $33($0, $1, $6, [1], [1])
	$4 = ($0 + [280])
	CALL $34(($3 + [8]), $4, ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $6) * (int_64)100) + (int_64)((int_64)$1 * (int_64)1000)) | (int_64)1))
	$2 = *($3 + [12])
	if ( ($2 == 0) ){ goto $label$6 }
	$10 = *($0)
	CALL eosio_assert([1], [10769])
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$4), [10804])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$7()), [10850])
	*($2 + [12]) = (*($2 + [12]) + [1])
	$11 = *($2)
	*($3 + [64]) = $11
	$11 = ((int_64)((int_64)*(($2 + [8])) * (int_64)100) + (int_64)((int_64)$11 * (int_64)1000))
	*($3 + [72]) = $11
	$12 = *($2 + [9])
	CALL eosio_assert([1], [10901])
	*($3 + [56]) = (($3 + [16]) + [22])
	*($3 + [52]) = ($3 + [16])
	*($3 + [48]) = ($3 + [16])
	CALL $35(($3 + [48]), $2)
	CALL db_update_i64(*($2 + [28]), $10, ($3 + [16]), [22])
	$4 = ($0 + [296])
	$11 = ((int_64)$11 + (int_64)$12)
	if ( (uint_64)($11 <= *($4)) ){ goto $label$7 }
	*($4) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$4 = (($3 + [64]) + [8])
	*($3 + [88]) = *($2)
	if ( (CALL $115(($3 + [64]), ($3 + [88]), [8]) == 0) ){ goto $label$8 }
	$9 = ($2 + [32])
	$8 = *($9)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$9 }
	$8 = CALL db_idx64_find_primary(*(($0 + [280])), *(($0 + [288])), (int_64)6454109468622848000, ($3 + [80]), $11)
	*($9) = $8
	
.LABEL $label$9
	CALL db_idx64_update($8, $10, ($3 + [88]))
	
.LABEL $label$8
	*($3 + [88]) = ((int_64)((int_64)*(($2 + [8])) * (int_64)100) + (int_64)((int_64)*($2) * (int_64)1000))
	if ( (CALL $115($4, ($3 + [88]), [8]) == 0) ){ goto $label$5 }
	$4 = ($2 + [36])
	$2 = *($4)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$10 }
	$2 = CALL db_idx64_find_primary(*(($0 + [280])), *(($0 + [288])), (int_64)6454109468622848001, ($3 + [80]), $11)
	*($4) = $2
	
.LABEL $label$10
	CALL db_idx64_update($2, $10, ($3 + [88]))
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$7()), [10544])
	*(($2 = CALL _Znwj([40])) + [24]) = $4
	*($2 + [8]) = $6
	*($2) = $1
	*($2 + [9]) = [1]
	*($2 + [12]) = [1]
	*($2 + [16]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000000)
	*($3 + [72]) = (($3 + [16]) + [22])
	*($3 + [68]) = ($3 + [16])
	*($3 + [64]) = ($3 + [16])
	CALL $35(($3 + [64]), $2)
	$10 = ((int_64)((int_64)((int_64)*($2 + [8]) * (int_64)100) + (int_64)((int_64)*($2) * (int_64)1000)) + (int_64)*($2 + [9]))
	$4 = ($0 + [288])
	*($2 + [28]) = CALL db_store_i64(*($4), (int_64)6454109468622848000, $1, $10, ($3 + [16]), [22])
	$8 = ($0 + [296])
	if ( (uint_64)($10 <= *($8)) ){ goto $label$11 }
	*($8) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$10 = *($4)
	$8 = ($2 + [9])
	$11 = *($8)
	$9 = ($2 + [8])
	$12 = *($9)
	$13 = *($2)
	*($3 + [48]) = $13
	*($2 + [32]) = CALL db_idx64_store($10, (int_64)6454109468622848000, $1, ((int_64)$11 + (int_64)((int_64)((int_64)$12 * (int_64)100) + (int_64)((int_64)$13 * (int_64)1000))), ($3 + [48]))
	$10 = *($4)
	$11 = *($8)
	$12 = ((int_64)((int_64)*($9) * (int_64)100) + (int_64)((int_64)*($2) * (int_64)1000))
	*($3 + [48]) = $12
	*($2 + [36]) = CALL db_idx64_store($10, (int_64)6454109468622848001, $1, ((int_64)$12 + (int_64)$11), ($3 + [48]))
	*($3 + [64]) = $2
	$10 = ((int_64)((int_64)((int_64)*($9) * (int_64)100) + (int_64)((int_64)*($2) * (int_64)1000)) + (int_64)*($8))
	*($3 + [16]) = $10
	$8 = *(($2 + [28]))
	*($3 + [48]) = $8
	$9 = ($0 + [308])
	$4 = *($9)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [312]))) ){ goto $label$13 }
	*($4 + [8]) = $10
	*($4 + [16]) = $8
	*($3 + [64]) = [0]
	*($4) = $2
	*($9) = ($4 + [24])
	$2 = *($3 + [64])
	*($3 + [64]) = [0]
	if ( $2 ){ goto $label$12 }
	goto $label$5 
	
.LABEL $label$13
	CALL $36(($0 + [304]), ($3 + [64]), ($3 + [16]), ($3 + [48]))
	$2 = *($3 + [64])
	*($3 + [64]) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	
.LABEL $label$12
	CALL _ZdlPv($2)
	
.LABEL $label$5
	CALL $37($0, $1)
	$global$0 = ($3 + [96])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $119($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [360]) = [0]
	*($4 + [352]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [11159])
	CALL memcpy(($4 + [352]), $2, [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [11159])
	CALL memcpy((($4 + [352]) + [8]), ($2 + [8]), [1])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [9])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $30(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$9 = *($4 + [360])
	$0 = *($4 + [352])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($9 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $122($2)
	
.LABEL $label$5
	CALL $31($8)
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $119($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [360]) = (int_64)0
	*($4 + [352]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [11159])
	CALL memcpy(($4 + [352]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [11159])
	CALL memcpy((($4 + [352]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $30(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [360])
	$1 = *($4 + [352])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $122($2)
	
.LABEL $label$6
	CALL $31($8)
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_32 $17
	$4 = ($global$0 - [96])
	$global$0 = $4
	$5 = ($0 + [240])
	$7 = *(($0 + [268]))
	$6 = *(($0 + [264]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$5), [11164])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $32($5, $8)
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$5), [11164])
	
.LABEL $label$1
	$10 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9166])
	$8 = ((($2 + [-1]) & [255]) <= [4])
	CALL eosio_assert($8, [9190])
	$11 = ( $2 ? [0] : $8 )
	$12 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) * (int_64)100) + (int_64)((int_64)$1 * (int_64)1000))
	$13 = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000000)
	if ( ($3 == 0) ){ goto $label$12 }
	$2 = ($0 + [280])
	$8 = CALL db_lowerbound_i64(*($0 + [280]), *(($0 + [288])), (int_64)6454109468622848000, ((int_64)$12 + (int_64)(CASTING uint_64)(uint_32 $3)))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $45($2, $8)
	
.LABEL $label$13
	$7 = *(($0 + [268]))
	$6 = *(($0 + [264]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$14:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$11 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$14 }
	goto $label$10 
	
.LABEL $label$12
	$6 = ($0 + [280])
	*($4 + [8]) = $6
	$7 = *(($0 + [268]))
	$9 = *(($0 + [264]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$15:
	$8 = ($7 + [-24])
	$2 = *($8)
	if ( ((int_64)*($2) == (int_64)$1) ){ goto $label$8 }
	$7 = $8
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$15 }
	goto $label$7 
	
.LABEL $label$11
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$5), [11164])
	if ( $10 ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$10
	$9 = [0]
	$8 = CALL db_find_i64(*(($0 + [240])), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$16 }
	$9 = CALL $32($5, $8)
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$5), [11164])
	
.LABEL $label$16
	if ( ($10 == 0) ){ goto $label$5 }
	
.LABEL $label$9
	*($4 + [64]) = CALL $46($0, $10, $13)
	*($4 + [48]) = $11
	$1 = *($0)
	*($4 + [20]) = ($4 + [64])
	*($4 + [16]) = ($4 + [48])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [10769])
	CALL $47($5, $9, $1, ($4 + [16]))
	$1 = *($0)
	CALL eosio_assert([1], [10769])
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$2), [10804])
	CALL eosio_assert(((int_64)*(($0 + [280])) == (int_64)CALL $fimport$7()), [10850])
	*($10 + [16]) = $13
	$14 = *($10)
	*($4 + [64]) = $14
	$14 = ((int_64)((int_64)*(($10 + [8])) * (int_64)100) + (int_64)((int_64)$14 * (int_64)1000))
	*($4 + [72]) = $14
	$13 = *($10 + [9])
	CALL eosio_assert([1], [10901])
	*($4 + [56]) = (($4 + [16]) + [22])
	*($4 + [52]) = ($4 + [16])
	*($4 + [48]) = ($4 + [16])
	CALL $35(($4 + [48]), $10)
	CALL db_update_i64(*($10 + [28]), $1, ($4 + [16]), [22])
	$8 = ($0 + [296])
	$14 = ((int_64)$14 + (int_64)$13)
	if ( (uint_64)($14 <= *($8)) ){ goto $label$17 }
	*($8) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$17
	$8 = (($4 + [64]) + [8])
	*($4 + [88]) = *($10)
	if ( (CALL $115(($4 + [64]), ($4 + [88]), [8]) == 0) ){ goto $label$18 }
	$9 = ($10 + [32])
	$7 = *($9)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$19 }
	$7 = CALL db_idx64_find_primary(*(($0 + [280])), *(($0 + [288])), (int_64)6454109468622848000, ($4 + [80]), $14)
	*($9) = $7
	
.LABEL $label$19
	CALL db_idx64_update($7, $1, ($4 + [88]))
	
.LABEL $label$18
	*($4 + [88]) = ((int_64)((int_64)*(($10 + [8])) * (int_64)100) + (int_64)((int_64)*($10) * (int_64)1000))
	if ( (CALL $115($8, ($4 + [88]), [8]) == 0) ){ goto $label$5 }
	$7 = ($10 + [36])
	$8 = *($7)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$20 }
	$8 = CALL db_idx64_find_primary(*(($0 + [280])), *(($0 + [288])), (int_64)6454109468622848001, ($4 + [80]), $14)
	*($7) = $8
	
.LABEL $label$20
	CALL db_idx64_update($8, $1, ($4 + [88]))
	goto $label$5 
	
.LABEL $label$8
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$5), [11164])
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	$8 = CALL db_find_i64(*(($0 + [240])), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $32($5, $8)
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$5), [11164])
	
.LABEL $label$6
	*($4 + [16]) = (int_64)0
	*($4 + [64]) = $12
	$8 = CALL db_idx64_lowerbound(*(($0 + [280])), *(($0 + [288])), (int_64)6454109468622848001, ($4 + [64]), ($4 + [16]))
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$22 }
	CALL $34(($4 + [48]), $6, *($4 + [16]))
	*((($7 = *($4 + [52])) + [36])) = $8
	*($4 + [4]) = $7
	goto $label$21 
	
.LABEL $label$22
	*($4 + [4]) = [0]
	
.LABEL $label$21
	$3 = ((int_32)$2 != (int_32)[0])
	*($4) = ($4 + [8])
	$15 = (($4 + [16]) + [22])
	$9 = (($4 + [64]) + [8])
	
.LOOP $label$23:
	*($4 + [16]) = (int_64)0
	*($4 + [64]) = $12
	$7 = [0]
	$8 = *($4 + [8])
	$8 = CALL db_idx64_upperbound(*($8), *($8 + [8]), (int_64)6454109468622848001, ($4 + [64]), ($4 + [16]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$24 }
	CALL $34(($4 + [48]), *($4 + [8]), *($4 + [16]))
	*((($7 = *($4 + [52])) + [36])) = $8
	
.LABEL $label$24
	$8 = *($4 + [4])
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$5 }
	if ( ($8 == 0) ){ goto $label$5 }
	*($4 + [64]) = CALL $46($0, $8, $13)
	*($4 + [48]) = $11
	$1 = *($0)
	*($4 + [20]) = ($4 + [64])
	*($4 + [16]) = ($4 + [48])
	CALL eosio_assert($3, [10769])
	CALL $47($5, $2, $1, ($4 + [16]))
	$1 = *($0)
	$8 = *($4 + [4])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10769])
	$7 = *($4 + [8])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$7), [10804])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$7()), [10850])
	*($8 + [16]) = $13
	$14 = *($8)
	$6 = ($8 + [8])
	$16 = ((int_64)((int_64)*($6) * (int_64)100) + (int_64)((int_64)$14 * (int_64)1000))
	*($9) = $16
	*($4 + [64]) = $14
	$14 = *($8 + [9])
	CALL eosio_assert([1], [10901])
	*((($4 + [48]) + [8])) = $15
	*($4 + [52]) = ($4 + [16])
	*($4 + [48]) = ($4 + [16])
	CALL $35(($4 + [48]), $8)
	CALL db_update_i64(*($8 + [28]), $1, ($4 + [16]), [22])
	$14 = ((int_64)$16 + (int_64)$14)
	if ( (uint_64)($14 <= *($7 + [16])) ){ goto $label$25 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$25
	*($4 + [88]) = *($8)
	if ( (CALL $115(($4 + [64]), ($4 + [88]), [8]) == 0) ){ goto $label$26 }
	$17 = ($8 + [32])
	$10 = *($17)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$27 }
	$10 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)6454109468622848000, ($4 + [80]), $14)
	*($17) = $10
	
.LABEL $label$27
	CALL db_idx64_update($10, $1, ($4 + [88]))
	
.LABEL $label$26
	*($4 + [88]) = ((int_64)((int_64)*($6) * (int_64)100) + (int_64)((int_64)*($8) * (int_64)1000))
	if ( (CALL $115($9, ($4 + [88]), [8]) == 0) ){ goto $label$28 }
	$6 = ($8 + [36])
	$8 = *($6)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$29 }
	$8 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)6454109468622848001, ($4 + [80]), $14)
	*($6) = $8
	
.LABEL $label$29
	CALL db_idx64_update($8, $1, ($4 + [88]))
	
.LABEL $label$28
	CALL $48($4)
	goto $label$23 
	
.LABEL $label$5
	$global$0 = ($4 + [96])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$0), [11164])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-7954148446762434560, (int_64)-7954148446762434560)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $54($0, $4)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$0), [11164])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [10769])
	CALL $60($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $61($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $107($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10595])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10595])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [10595])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $77(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $50($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [10595])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [10595])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $73(CALL $72($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $119($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $71(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11215])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $119($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [88]) = $0
	CALL $74(($3 + [32]), $5)
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-7954148446762434560
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-7954148446762434560
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $75(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $122($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $34 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($1 + [28]))
	$3 = *($1 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)((int_64)((int_64)((int_64)*($6 + [8]) * (int_64)100) + (int_64)((int_64)*($6) * (int_64)1000)) + (int_64)*($6 + [9])) == (int_64)$2) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	$6 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$1), [11164])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6454109468622848000, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $45($1, $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$1), [11164])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [10595])
	CALL memcpy(*($0 + [4]), $1, [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $116 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $108())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $118($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $110([19], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [9]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [18] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $112($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $112($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $112($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $112($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19904]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $112($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $112($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $112($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $119($1)
	
.LABEL $label$2
	*(CALL $108()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $119(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $122($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $119 (int_32 $0)
{
	return CALL $120([11500], $0)
}

int_32 .FUNC $29 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [352])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $119($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $30(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $122($2)
	
.LABEL $label$6
	CALL $31($8)
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$1 = ($global$0 - [224])
	$global$0 = $1
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)6138663591592764928), [9465])
	CALL $53($1)
	$2 = *($1)
	if ( ((int_64)$2 == (int_64)*($0)) ){ goto $label$1 }
	$3 = *(($0 + [40]))
	if ( ((int_64)$2 == (int_64)$3) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)*(($0 + [48]))) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)*(($0 + [64]))) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)*(($0 + [56]))) ){ goto $label$1 }
	if ( ((int_64)*($1 + [8]) != (int_64)$3) ){ goto $label$1 }
	$4 = *($1 + [16])
	if ( ((uint_64)((int_64)$4 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$5 = *(($1 + [24]))
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$1 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $7
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$1 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$5 }
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( (int_64)($4 == 0) ){ goto $label$1 }
	if ( ((int_64)$5 != (int_64)1397703940) ){ goto $label$1 }
	$10 = ($0 + [240])
	$8 = *(($0 + [268]))
	$9 = *(($0 + [264]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$9:
	$6 = ($8 + [-24])
	$11 = *($6)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$8 }
	$8 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($11 + [128]) == (int_32)$10), [11164])
	goto $label$6 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*($10), *(($0 + [248])), (int_64)3607749779137757184, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $32($10, $6) + [128]) == (int_32)$10), [11164])
	
.LABEL $label$6
	if ( ((int_64)*(($1 + [8])) != (int_64)*(($0 + [40]))) ){ goto $label$1 }
	$2 = *($1)
	$9 = *(($0 + [268]))
	$11 = *(($0 + [264]))
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$11 }
	
.LOOP $label$13:
	$6 = ($9 + [-24])
	$8 = *($6)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$12 }
	$9 = $6
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$10), [11164])
	goto $label$10 
	
.LABEL $label$11
	$8 = [0]
	$6 = CALL db_find_i64(*(($0 + [240])), *(($0 + [248])), (int_64)3607749779137757184, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$10 }
	$8 = CALL $32($10, $6)
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$10), [11164])
	
.LABEL $label$10
	$3 = *($0)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10769])
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$10), [10804])
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL $fimport$7()), [10850])
	$2 = *($8)
	*($1 + [200]) = $2
	$6 = ($1 + [24])
	CALL eosio_assert(((int_64)*($6) == (int_64)*(($8 + [72]))), [11079])
	$9 = ($1 + [16])
	$7 = ((int_64)*($8 + [64]) + (int_64)*($9))
	*($8 + [64]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [11122])
	CALL eosio_assert(((int_64)*($8 + [64]) < (int_64)4611686018427387904), [11141])
	CALL eosio_assert(((int_64)*($6) == (int_64)*(($8 + [104]))), [11079])
	$7 = ((int_64)*($8 + [96]) + (int_64)*($9))
	*($8 + [96]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [11122])
	CALL eosio_assert(((int_64)*($8 + [96]) < (int_64)4611686018427387904), [11141])
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [10901])
	*($1 + [192]) = (($1 + [48]) + [122])
	*($1 + [188]) = ($1 + [48])
	*($1 + [184]) = ($1 + [48])
	CALL $42(($1 + [184]), $8)
	CALL db_update_i64(*($8 + [132]), $3, ($1 + [48]), [122])
	$6 = ($0 + [256])
	if ( (uint_64)($2 <= *($6)) ){ goto $label$14 }
	*($6) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($1 + [216]) = *($8)
	if ( (CALL $115(($1 + [200]), ($1 + [216]), [8]) == 0) ){ goto $label$1 }
	$8 = ($8 + [136])
	$6 = *($8)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*(($0 + [240])), *(($0 + [248])), (int_64)3607749779137757184, ($1 + [208]), $2)
	*($8) = $6
	
.LABEL $label$15
	CALL db_idx64_update($6, $3, ($1 + [216]))
	
.LABEL $label$1
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$16
	$global$0 = ($1 + [224])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [10595])
	CALL memcpy(*($0 + [4]), $1, [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [1]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $107 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $99(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $114(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8419], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $99(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $99(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $21 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($0 + [240])
	$4 = *(($0 + [268]))
	$3 = *(($0 + [264]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$2), [11164])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $32($2, $5)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)$2), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9166])
	CALL $19($0, $1, [1], [0])
	CALL $19($0, $1, [2], [0])
	CALL $19($0, $1, [3], [0])
	CALL $19($0, $1, [4], [0])
}

int_32 .FUNC $20 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $119($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [352]) = (int_64)0
	*($4 + [360]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [11159])
	CALL memcpy(($4 + [352]), $2, [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [11159])
	CALL memcpy((($4 + [352]) + [8]), ($2 + [8]), [1])
	CALL eosio_assert(((int_32)$7 != (int_32)[9]), [11159])
	CALL memcpy((($4 + [352]) + [9]), ($2 + [9]), [1])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [10])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $30(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$9 = *($4 + [361])
	$10 = *($4 + [360])
	$0 = *($4 + [352])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($10 & [255])), (int_32 ($9 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $122($2)
	
.LABEL $label$5
	CALL $31($8)
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1)
{
	CALL $22($0, $1, [1])
	CALL $22($0, $1, [2])
	CALL $22($0, $1, [3])
	CALL $22($0, $1, [4])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	CALL require_auth($1)
	$4 = ($0 + [240])
	$6 = *(($0 + [268]))
	$5 = *(($0 + [264]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$4), [11164])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $32($4, $7)
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$4), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9166])
	$7 = ((($2 + [-1]) & [255]) <= [4])
	*($3 + [23]) = ( $2 ? [0] : $7 )
	CALL eosio_assert($7, [9190])
	$6 = *(($0 + [268]))
	$5 = *(($0 + [264]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$9:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$8 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$4), [11164])
	if ( $8 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*(($0 + [240])), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $32($4, $7)
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)$4), [11164])
	
.LABEL $label$6
	$1 = *($0)
	*($3 + [12]) = $0
	*($3 + [8]) = ($3 + [23])
	*($3 + [16]) = ($3 + [24])
	CALL eosio_assert([1], [10769])
	CALL $49($4, $8, $1, ($3 + [8]))
	
.LABEL $label$5
	$global$0 = ($3 + [32])
}

int_32 .FUNC $25 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [448])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $119($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [376]) + [16]))) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [376]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [11159])
	CALL memcpy(($4 + [376]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [11159])
	CALL memcpy((($4 + [376]) + [8]), ($2 + [8]), [8])
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [11159])
	CALL memcpy(($4 + [56]), ($2 + [16]), [8])
	*($3) = *($4 + [56])
	$8 = ($2 + $7)
	*((($4 + [24]) + [8])) = $8
	*($4 + [44]) = ($2 + [24])
	*($4 + [40]) = $2
	*($4 + [48]) = $8
	*($4 + [24]) = *($4 + [40])
	$8 = CALL $30(($4 + [56]), $0, $1, ($4 + [24]))
	*(($9 = (($4 + [400]) + [8]))) = *($3)
	*($4 + [400]) = *($4 + [384])
	$0 = *($4 + [376])
	*((($4 + [416]) + [8])) = *($9)
	*($4 + [416]) = *($4 + [400])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [416]) + [8]))
	*((($4 + [432]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [416])
	*($4 + [8]) = $1
	*($4 + [432]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $122($2)
	
.LABEL $label$6
	CALL $31($8)
	$global$0 = ($4 + [448])
	return [1]
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL eosio_assert(*(($0 + [112])), [8657])
	$4 = *($2 + [8])
	$5 = [0]
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$5 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8698])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [8715])
	CALL eosio_assert(((int_64)$4 == (int_64)1397703940), [8747])
	CALL require_auth($1)
	$11 = ($0 + [240])
	$10 = *(($0 + [268]))
	$12 = *(($0 + [264]))
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$7 }
	
.LOOP $label$9:
	$8 = ($10 + [-24])
	$5 = *($8)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$8 }
	$10 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($5 + [128]) == (int_32)$11), [11164])
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	$8 = CALL db_find_i64(*($11), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $32($11, $8)
	CALL eosio_assert(((int_32)*($5 + [128]) == (int_32)$11), [11164])
	
.LABEL $label$6
	$12 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($12, [8773])
	CALL eosio_assert(((int_64)*(($5 + [88])) == (int_64)$4), [10601])
	CALL eosio_assert(((int_64)*($5 + [80]) >= (int_64)$6), [8805])
	$7 = *($0)
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$8 = CALL $116([8836])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$13 }
	*($3 + [8]) = ($8 << [1])
	$10 = (($3 + [8]) | [1])
	if ( $8 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$13 = (($8 + [16]) & [-16])
	$10 = CALL _Znwj($13)
	*($3 + [8]) = ($13 | [1])
	*($3 + [16]) = $10
	*($3 + [12]) = $8
	
.LABEL $label$12
	CALL memcpy($10, [8836], $8)
	
.LABEL $label$11
	*(($10 + $8)) = [0]
	*((($3 + [64]) + [24])) = *(($2 + [8]))
	$8 = (($3 + [8]) + [8])
	*((($3 + [64]) + [40])) = *($8)
	*($8) = [0]
	*($3 + [72]) = $1
	*($3 + [24]) = (int_64)6138663591592764928
	*($3 + [32]) = (int_64)-3617168760277827584
	*($3 + [64]) = *(($0 + [40]))
	*($3 + [80]) = *($2)
	*($3 + [96]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = $7
	*($8 + [8]) = (int_64)3617214756542218240
	*((($3 + [24]) + [36])) = [0]
	$10 = ($8 + [16])
	*((($3 + [24]) + [24])) = $10
	*(($3 + [44])) = $10
	*($3 + [40]) = $8
	*($3 + [52 align=4]) = (int_64)0
	$8 = *($3 + [96])
	$10 = ( *((($3 + [64]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($10 + [32])
	$7 = (CASTING uint_64)(uint_32 $10)
	$10 = ($3 + [52])
	
.LOOP $label$14:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$14 }
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $50($10, $8)
	$10 = *(($3 + [56]))
	$8 = *(($3 + [52]))
	goto $label$15 
	
.LABEL $label$16
	$10 = [0]
	$8 = [0]
	
.LABEL $label$15
	*($3 + [212]) = $8
	*($3 + [208]) = $8
	*($3 + [216]) = $10
	*($3 + [200]) = ($3 + [208])
	*($3 + [192]) = ($3 + [64])
	CALL $51(($3 + [192]), ($3 + [200]))
	CALL $52(($3 + [208]), ($3 + [24]))
	$8 = *($3 + [208])
	CALL send_inline($8, (*($3 + [212]) - $8))
	$8 = *($3 + [208])
	if ( ($8 == 0) ){ goto $label$17 }
	*($3 + [212]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$17
	$8 = *($3 + [52])
	if ( ($8 == 0) ){ goto $label$18 }
	*(($3 + [56])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$18
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$19 }
	*(($3 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$19
	if ( ((*(($3 + [96])) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$20
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$21
	$1 = *($0)
	CALL eosio_assert($12, [10769])
	CALL eosio_assert(((int_32)*($5 + [128]) == (int_32)$11), [10804])
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL $fimport$7()), [10850])
	$7 = *($5)
	*($3 + [192]) = $7
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($5 + [88]))), [10960])
	$9 = (int_64)
	*($5 + [80]) = $9(*($5 + [80]) - *($2)))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [11008])
	CALL eosio_assert(((int_64)*($5 + [80]) < (int_64)4611686018427387904), [11030])
	CALL eosio_assert(((int_64)$7 == (int_64)*($5)), [10901])
	*($3 + [32]) = (($3 + [64]) + [122])
	*($3 + [28]) = ($3 + [64])
	*($3 + [24]) = ($3 + [64])
	CALL $42(($3 + [24]), $5)
	CALL db_update_i64(*($5 + [132]), $1, ($3 + [64]), [122])
	$8 = ($0 + [256])
	if ( (uint_64)($7 <= *($8)) ){ goto $label$22 }
	*($8) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	*($3 + [208]) = *($5)
	if ( (CALL $115(($3 + [192]), ($3 + [208]), [8]) == 0) ){ goto $label$23 }
	$5 = ($5 + [136])
	$8 = *($5)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$24 }
	$8 = CALL db_idx64_find_primary(*(($0 + [240])), *(($0 + [248])), (int_64)3607749779137757184, ($3 + [8]), $7)
	*($5) = $8
	
.LABEL $label$24
	CALL db_idx64_update($8, $1, ($3 + [208]))
	
.LABEL $label$23
	$global$0 = ($3 + [224])
	return (unreachable)
	
.LABEL $label$10
	CALL $95(($3 + [8]))
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $119($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [352]) = (int_64)0
	*($4 + [360]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [11159])
	CALL memcpy(($4 + [352]), $2, [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [11159])
	CALL memcpy(($4 + [32]), ($2 + [8]), [1])
	*($4 + [360]) = ((int_32)*($4 + [32]) != (int_32)[0])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [9])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $30(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$9 = *($4 + [360])
	$0 = *($4 + [352])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ((int_32)($9 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $122($2)
	
.LABEL $label$5
	CALL $31($8)
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $26 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	CALL require_auth($1)
	$3 = [1]
	if ( ((int_64)*(($0 + [48])) == (int_64)$1) ){ goto $label$1 }
	$3 = ((int_64)*(($0 + [40])) == (int_64)$1)
	
.LABEL $label$1
	CALL eosio_assert($3, [8621])
	*(($0 + [112])) = $2
}

void .FUNC $109 (int_32 $0)
{
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [11327])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [11372])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = ((int_64)((int_64)((int_64)*($1 + [8]) * (int_64)100) + (int_64)((int_64)*($1) * (int_64)1000)) + (int_64)*($1 + [9]))
	$4 = *(($6 + [-24]))
	if ( ((int_64)((int_64)((int_64)((int_64)*($4 + [8]) * (int_64)100) + (int_64)((int_64)*($4) * (int_64)1000)) + (int_64)*($4 + [9])) == (int_64)$7) ){ goto $label$3 }
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$2 }
	$4 = ($6 + [-48])
	$6 = ($6 + [-24])
	$4 = *($4)
	if ( ((int_64)((int_64)((int_64)((int_64)*($4 + [8]) * (int_64)100) + (int_64)((int_64)*($4) * (int_64)1000)) + (int_64)*($4 + [9])) != (int_64)$7) ){ goto $label$4 }
	
.LABEL $label$3
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [11422])
	$5 = *($5)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$8 = *($6)
	*($6) = [0]
	$3 = ($6 + [-24])
	$4 = *($3)
	*($3) = $8
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$8 }
	$8 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $81(($2 + [8]), ($0 + [36]), ($0 + [37]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [11263])
	$2 = *($0 + [4])
	$3 = *($2 + [32])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)6454109468622848000, ($1 + [8]), ((int_64)((int_64)((int_64)*($2 + [8]) * (int_64)100) + (int_64)((int_64)*($2) * (int_64)1000)) + (int_64)*($2 + [9])))
	*(*(($0 + [4])) + [32]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$3 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $34($1, *(*($0)), *($1 + [8]))
	$2 = *($1 + [4])
	*(($0 + [4])) = $2
	*(($2 + [32])) = $3
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$2
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $108 ()
{
	return [11484]
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [10804])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10850])
	$5 = *($1)
	*($4 + [152]) = $5
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [72]))), [10960])
	$6 = (int_64)
	*($1 + [64]) = $6(*($1 + [64]) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [11008])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [11030])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10901])
	*($4 + [144]) = ($4 + [122])
	*($4 + [140]) = $4
	*($4 + [136]) = $4
	CALL $42(($4 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $4, [122])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [168]) = *($1)
	if ( (CALL $115(($4 + [152]), ($4 + [168]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749779137757184, ($4 + [160]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [168]))
	
.LABEL $label$2
	$global$0 = ($4 + [176])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	float_64 $13
	int_64 $14
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [48]) = $2
	*($4 + [40]) = ($0 + [240])
	CALL $41(($4 + [56]), ($4 + [40]), ($4 + [48]))
	$5 = *($4 + [60])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((int_64)*($4 + [48]) != (int_64)*($5)) ){ goto $label$1 }
	$2 = (int_64)1
	$6 = *($5 + [96])
	if ( (uint_64)(((int_64)$6 + (int_64)-10000) <= (int_64)9980001) ){ goto $label$2 }
	$2 = (int_64)2
	if ( (uint_64)(((int_64)$6 + (int_64)-10000000) <= (int_64)39990001) ){ goto $label$2 }
	$2 = ( (int_64)3 ? (int_64)0 : ((int_64)$6 > (int_64)49999999) )
	
.LABEL $label$2
	$7 = ($0 + [160])
	$9 = *(($0 + [188]))
	$8 = *(($0 + [184]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	
.LOOP $label$6:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)$2 == (int_64)*($11)) ){ goto $label$5 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)$7), [11164])
	if ( $11 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$10 = CALL db_find_i64(*($7), *(($0 + [168])), (int_64)-5001621371260627264, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $66($7, $10)
	CALL eosio_assert(((int_32)*($11 + [48]) == (int_32)$7), [11164])
	
.LABEL $label$3
	$12 = (CASTING float_64)(int_64 *($1))
	$10 = ($3 + [-1])
	if ( ((uint_32)$10 > (uint_32)[4]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$14
	$10 = ($11 + [8])
	goto $label$8 
	
.LABEL $label$13
	$13 = (float_64)0
	goto $label$7 
	
.LABEL $label$12
	$10 = ($11 + [16])
	goto $label$8 
	
.LABEL $label$11
	$10 = ($11 + [24])
	goto $label$8 
	
.LABEL $label$10
	$10 = ($11 + [32])
	goto $label$8 
	
.LABEL $label$9
	$10 = ($11 + [40])
	
.LABEL $label$8
	$13 = *($10)
	
.LABEL $label$7
	$12 = ((float_64)$13 * (float_64)$12)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$16 }
	$14 = (int_64)-9223372036854775808
	goto $label$15 
	
.LABEL $label$16
	$14 = (Rounds 0)($12)
	
.LABEL $label$15
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10660])
	$2 = (int_64)5459781
	$10 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$2 = $6
	$9 = [1]
	$11 = $10
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$2 = $6
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$9 = ((int_32)$10 < (int_32)[6])
	$11 = ($10 + [1])
	$10 = $11
	if ( $9 ){ goto $label$21 }
	$9 = [1]
	$10 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$9 = [0]
	
.LABEL $label$17
	CALL eosio_assert($9, [10709])
	$2 = *($5)
	*($4 + [32]) = (int_64)1397703940
	*(($4 + [16])) = *($4 + [32])
	*($4 + [24]) = $14
	*($4 + [8]) = *($4 + [24])
	CALL $67($0, $2, ($4 + [8]))
	if ( ((uint_32)$3 > (uint_32)[4]) ){ goto $label$1 }
	$2 = *($5 + [16])
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	CALL $64($0, $1, $2, ($3 + [1]))
	
.LABEL $label$1
	$global$0 = ($4 + [64])
	$10
}

void .FUNC $67 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$5 = *($2)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$4 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [11051])
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$6 }
	$10 = ($0 + [240])
	$4 = *(($0 + [268]))
	$11 = *(($0 + [264]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$10:
	$7 = ($4 + [-24])
	$9 = *($7)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$9 }
	$4 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$10), [11164])
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	$7 = CALL db_find_i64(*($10), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $32($10, $7)
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$10), [11164])
	
.LABEL $label$7
	$6 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [10769])
	CALL $70($10, $9, $6, ($3 + [8]))
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11215])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $119($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	CALL $82(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $58(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $122($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [10544])
	*(($5 = CALL _Znwj([104])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [88]) = $1
	$5 = CALL memcpy($5, *($3), [81])
	*($4 + [104]) = (($4 + [16]) + [77])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $76(($4 + [96]), $5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-7954148446762434560, $2, (int_64)-7954148446762434560, ($4 + [16]), [77])
	*($5 + [92]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-7954148446762434560) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-7954148446762434559
	
.LABEL $label$1
	*($4 + [96]) = $5
	*($4 + [16]) = (int_64)-7954148446762434560
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-7954148446762434560
	*($3 + [16]) = $6
	*($4 + [96]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $75(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [10804])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10850])
	$1 = CALL memcpy($1, *($3), [81])
	CALL eosio_assert([1], [10901])
	*($4 + [88]) = ($4 + [77])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $76(($4 + [80]), $1)
	CALL db_update_i64(*(($1 + [92])), $2, $4, [77])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-7954148446762434560) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-7954148446762434559
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *(($0 + [40]))
	if ( ((int_64)$6 == (int_64)$2) ){ goto $label$1 }
	$7 = *($0)
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $6
	*($5 + [24]) = *($3)
	$8 = CALL $96((($5 + [8]) + [32]), $4)
	*($5 + [64]) = (int_64)-3617168760277827584
	*($5 + [56]) = (int_64)6138663591592764928
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$9 = ($4 + [16])
	*((($5 + [56]) + [24])) = $9
	*(($5 + [76])) = $9
	*($5 + [72]) = $4
	*($5 + [84 align=4]) = (int_64)0
	$4 = *($8)
	$8 = ( *((($5 + [8]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($8 + [32])
	$2 = (CASTING uint_64)(uint_32 $8)
	$8 = ($5 + [84])
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$2 }
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $50($8, $4)
	$8 = *(($5 + [88]))
	$4 = *(($5 + [84]))
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$4 = [0]
	
.LABEL $label$3
	*($5 + [116]) = $4
	*($5 + [112]) = $4
	*($5 + [120]) = $8
	*($5 + [96]) = ($5 + [112])
	*($5 + [104]) = ($5 + [8])
	CALL $51(($5 + [104]), ($5 + [96]))
	CALL $52(($5 + [112]), ($5 + [56]))
	$4 = *($5 + [112])
	CALL send_inline($4, (*($5 + [116]) - $4))
	$4 = *($5 + [112])
	if ( ($4 == 0) ){ goto $label$5 }
	*($5 + [116]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($5 + [84])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($5 + [88])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($5 + [72])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($5 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$1
	$2 = *($0)
	$4 = *($1 + [4])
	*($5 + [8]) = $3
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [10769])
	CALL $65(($0 + [240]), $4, $2, ($5 + [8]))
	$global$0 = ($5 + [128])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11215])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $119($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	CALL $79(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = ((int_64)((int_64)*($5) * (int_64)100) + (int_64)*($5 + [1]))
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $56(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $122($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $116($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $97($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $97($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $97($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $99(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $114(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8387], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $99(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $99(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $103($0, $1, $2, CALL $116($2))
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $122($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $119($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11480])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $119($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [11475])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $50($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [11159])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $86($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $98($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $98($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $95($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [10804])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10850])
	$5 = *($1)
	*($4 + [152]) = $5
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [88]))), [11079])
	$6 = ((int_64)*($1 + [80]) + (int_64)*($3))
	*($1 + [80]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [11122])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [11141])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10901])
	*($4 + [144]) = ($4 + [122])
	*($4 + [140]) = $4
	*($4 + [136]) = $4
	CALL $42(($4 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $4, [122])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [168]) = *($1)
	if ( (CALL $115(($4 + [152]), ($4 + [168]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749779137757184, ($4 + [160]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [168]))
	
.LABEL $label$2
	$global$0 = ($4 + [176])
}

void .FUNC $83 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	$5 = *($2)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$4 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [11051])
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$6 }
	$10 = ($0 + [240])
	$4 = *(($0 + [268]))
	$11 = *(($0 + [264]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$10:
	$7 = ($4 + [-24])
	$9 = *($7)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$9 }
	$4 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$10), [11164])
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	$7 = CALL db_find_i64(*($10), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $32($10, $7)
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$10), [11164])
	
.LABEL $label$7
	$6 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [10769])
	CALL $84($10, $9, $6, ($3 + [8]))
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [11159])
	CALL memcpy($1, *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4 + [4])
	$6 = *($5 + [32])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($4)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)6454109468622848000, ($3 + [8]), ((int_64)((int_64)((int_64)*($5 + [8]) * (int_64)100) + (int_64)((int_64)*($5) * (int_64)1000)) + (int_64)*($5 + [9])))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($6)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$0 = *(($6 + [36]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = *($5)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6454109468622848001, ($3 + [8]), ((int_64)((int_64)((int_64)*($6 + [8]) * (int_64)100) + (int_64)((int_64)*($6) * (int_64)1000)) + (int_64)*($6 + [9])))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($0)
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11159])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [11159])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [11159])
	CALL memcpy(($1 + [9]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [11159])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10595])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10595])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [10595])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [10595])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [10595])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [10804])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [10850])
	$5 = *($1)
	*($4 + [152]) = $5
	$6 = *($3)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [72]))), [11079])
	$7 = ((int_64)*($1 + [64]) + (int_64)*($6))
	*($1 + [64]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [11122])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [11141])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [120]))), [11079])
	$7 = ((int_64)*($1 + [112]) + (int_64)*($3))
	*($1 + [112]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [11122])
	CALL eosio_assert(((int_64)*($1 + [112]) < (int_64)4611686018427387904), [11141])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10901])
	*($4 + [144]) = ($4 + [122])
	*($4 + [140]) = $4
	*($4 + [136]) = $4
	CALL $42(($4 + [136]), $1)
	CALL db_update_i64(*($1 + [132]), $2, $4, [122])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [168]) = *($1)
	if ( (CALL $115(($4 + [152]), ($4 + [168]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [136])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)3607749779137757184, ($4 + [160]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [168]))
	
.LABEL $label$2
	$global$0 = ($4 + [176])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [11159])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [11159])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [11159])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [11159])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $85(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [10595])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [10595])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [80])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [10595])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [10595])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [10595])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [11159])
	CALL memcpy($1, *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [11159])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [80]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = ($0 + [240])
	$8 = *(($0 + [268]))
	$7 = *(($0 + [264]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$4:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$3 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($10 + [128]) == (int_32)$6), [11164])
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $32($6, $9)
	CALL eosio_assert(((int_32)*($10 + [128]) == (int_32)$6), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9166])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9211])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [9231])
	$8 = ($0 + [280])
	CALL $34(($5 + [8]), $8, ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $2) * (int_64)100) + (int_64)((int_64)$1 * (int_64)1000)) + (int_64)(CASTING uint_64)(uint_32 $3)))
	CALL eosio_assert(((int_32)*($5 + [12]) != (int_32)[0]), [9252])
	CALL eosio_assert(((uint_32)*(*($5 + [12]) + [12]) >= (uint_32)$4), [9295])
	$9 = *($5 + [12])
	if ( ((int_32)*($9 + [12]) != (int_32)$4) ){ goto $label$5 }
	$1 = *($5 + [8])
	$9 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$10 = ((int_32)$9) != (int_32)[0]
	CALL eosio_assert($10), [11293])
	CALL eosio_assert($10, [11263])
	$10 = CALL db_next_i64(*($9 + [28]), ($5 + [16]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$6 }
	CALL $45((CASTING uint_32)(uint_64 $1), $10)
	
.LABEL $label$6
	CALL $69($8, $9)
	$global$0 = ($5 + [96])
	return 
	
.LABEL $label$5
	$1 = *($0)
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [10769])
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$8), [10804])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL $fimport$7()), [10850])
	*($9 + [12]) = (*($9 + [12]) - $4)
	$11 = *($9)
	*($5 + [64]) = $11
	$11 = ((int_64)((int_64)*(($9 + [8])) * (int_64)100) + (int_64)((int_64)$11 * (int_64)1000))
	*($5 + [72]) = $11
	$12 = *($9 + [9])
	CALL eosio_assert([1], [10901])
	*($5 + [56]) = (($5 + [16]) + [22])
	*($5 + [52]) = ($5 + [16])
	*($5 + [48]) = ($5 + [16])
	CALL $35(($5 + [48]), $9)
	CALL db_update_i64(*($9 + [28]), $1, ($5 + [16]), [22])
	$8 = ($0 + [296])
	$11 = ((int_64)$11 + (int_64)$12)
	if ( (uint_64)($11 <= *($8)) ){ goto $label$7 }
	*($8) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$8 = (($5 + [64]) + [8])
	*($5 + [88]) = *($9)
	if ( (CALL $115(($5 + [64]), ($5 + [88]), [8]) == 0) ){ goto $label$8 }
	$7 = ($9 + [32])
	$10 = *($7)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$9 }
	$10 = CALL db_idx64_find_primary(*(($0 + [280])), *(($0 + [288])), (int_64)6454109468622848000, ($5 + [80]), $11)
	*($7) = $10
	
.LABEL $label$9
	CALL db_idx64_update($10, $1, ($5 + [88]))
	
.LABEL $label$8
	*($5 + [88]) = ((int_64)((int_64)*(($9 + [8])) * (int_64)100) + (int_64)((int_64)*($9) * (int_64)1000))
	if ( (CALL $115($8, ($5 + [88]), [8]) == 0) ){ goto $label$10 }
	$8 = ($9 + [36])
	$9 = *($8)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$11 }
	$9 = CALL db_idx64_find_primary(*(($0 + [280])), *(($0 + [288])), (int_64)6454109468622848001, ($5 + [80]), $11)
	*($8) = $9
	
.LABEL $label$11
	CALL db_idx64_update($9, $1, ($5 + [88]))
	
.LABEL $label$10
	$global$0 = ($5 + [96])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $107($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ($0 + [240])
	$5 = *(($0 + [268]))
	$4 = *(($0 + [264]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)$3), [11164])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $32($3, $6)
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)$3), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9166])
	$6 = ($0 + [280])
	*($2 + [16]) = $6
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = $1
	$5 = CALL db_idx64_lowerbound(*($0 + [280]), *(($0 + [288])), (int_64)6454109468622848000, ($2 + [32]), ($2 + [40]))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$7 }
	CALL $34(($2 + [24]), $6, *($2 + [40]))
	*((($6 = *($2 + [28])) + [32])) = $5
	*($2 + [12]) = $6
	*($2 + [8]) = ($2 + [16])
	if ( ($6 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	*($2 + [12]) = [0]
	*($2 + [8]) = ($2 + [16])
	if ( [1] ){ goto $label$5 }
	
.LABEL $label$6
	
.LOOP $label$8:
	CALL $68(($2 + [8]))
	if ( *($2 + [12]) ){ goto $label$8 }
	
.LABEL $label$5
	$global$0 = ($2 + [48])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [11159])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[1]), [11159])
	CALL memcpy(($1 + [24]), *($0 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [72])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [88])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [104])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [11159])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [120])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [11159])
	CALL memcpy($1, *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [11159])
	CALL memcpy(($1 + [1]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [11159])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [11159])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [11215])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $119($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([144])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = $0
	CALL $78(($3 + [32]), $5)
	*($5 + [136]) = [-1]
	*($5 + [132]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $122($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	float_64 $15
	$5 = ($global$0 - [240])
	$global$0 = $5
	CALL require_auth($1)
	$6 = [0]
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [8858])
	$7 = ($0 + [200])
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) * (int_64)100) + (int_64)(CASTING uint_64)(uint_32 $3))
	$10 = *(($0 + [228]))
	$9 = *(($0 + [224]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($10 + [-24])
	$11 = *($2)
	if ( ((int_64)((int_64)((int_64)*($11) * (int_64)100) + (int_64)*($11 + [1])) == (int_64)$8) ){ goto $label$3 }
	$10 = $2
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)$7), [11164])
	$6 = $11
	goto $label$1 
	
.LABEL $label$2
	$2 = CALL db_find_i64(*($7), *(($0 + [208])), (int_64)6454109477036808192, $8)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $62($7, $2)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$7), [11164])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8887])
	$7 = ($0 + [240])
	$10 = *(($0 + [268]))
	$11 = *(($0 + [264]))
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$6 }
	
.LOOP $label$8:
	$2 = ($10 + [-24])
	$9 = *($2)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$7 }
	$10 = $2
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$7), [11164])
	*($5 + [220]) = $9
	*($5 + [216]) = $7
	$12 = (($5 + [216]) | [4])
	goto $label$5 
	
.LABEL $label$6
	$2 = CALL db_find_i64(*($7), *(($0 + [248])), (int_64)3607749779137757184, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$9 }
	$9 = CALL $32($7, $2)
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)$7), [11164])
	*($5 + [220]) = $9
	*($5 + [216]) = $7
	$12 = (($5 + [216]) | [4])
	goto $label$5 
	
.LABEL $label$9
	$9 = [0]
	*($5 + [220]) = [0]
	*($5 + [216]) = $7
	$12 = (($5 + [216]) | [4])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8930])
	*($5 + [208]) = (int_64)1397703940
	$7 = ((int_32)((int_32)$4 * (int_32)*($6 + [24])) * (int_32)[10000])
	$13 = (CASTING uint_64)(uint_32 $7)
	*($5 + [200]) = $13
	CALL eosio_assert([1], [10660])
	$8 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$14 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$8 = $14
	$10 = [1]
	$11 = $2
	$2 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$8 = $14
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$2 < (int_32)[6])
	$11 = ($2 + [1])
	$2 = $11
	if ( $10 ){ goto $label$14 }
	$10 = [1]
	$2 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$10 = [0]
	
.LABEL $label$10
	CALL eosio_assert($10, [10709])
	$8 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$14 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$8 = $14
	$10 = [1]
	$11 = $2
	$2 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$8 = $14
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$2 < (int_32)[6])
	$11 = ($2 + [1])
	$2 = $11
	if ( $10 ){ goto $label$19 }
	$10 = [1]
	$2 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$10 = [0]
	
.LABEL $label$15
	CALL eosio_assert($10, [8962])
	CALL eosio_assert(((int_64)*(($9 + [72])) == (int_64)1397703940), [10601])
	CALL eosio_assert(((int_64)*($9 + [64]) >= (int_64)$13), [8995])
	$15 = ((float_64)(float_64))((float_64)1 - *(($0 + [72]))) * (float_64)(CASTING float_64)(uint_32 $7)
	if ( ((float_64)(float_64)|$15)| < (float_64)(float_64)9223372036854775808) ){ goto $label$21 }
	$13 = (int_64)-9223372036854775808
	goto $label$20 
	
.LABEL $label$21
	$13 = (Rounds 0)($15)
	
.LABEL $label$20
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10660])
	$8 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$14 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$8 = $14
	$10 = [1]
	$11 = $2
	$2 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$25
	$8 = $14
	
.LOOP $label$26:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$23 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$2 < (int_32)[6])
	$11 = ($2 + [1])
	$2 = $11
	if ( $10 ){ goto $label$26 }
	$10 = [1]
	$2 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$10 = [0]
	
.LABEL $label$22
	CALL eosio_assert($10, [10709])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$30 }
	$10 = [0]
	$11 = *([0] + [10732])
	$8 = $1
	
.LOOP $label$32:
	*((($5 + [224]) + ($2 = $10))) = *(($11 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$8 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$10 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$31 }
	$8 = ((int_64)$8 << (int_64)5)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$32 }
	
.LABEL $label$31
	*(($5 + [112])) = [0]
	*($5 + [104]) = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$29 }
	*($5 + [104]) = ($10 << [1])
	$11 = (($5 + [104]) | [1])
	goto $label$28 
	
.LABEL $label$30
	*(($5 + [112])) = [0]
	*($5 + [104]) = (int_64)0
	*($5 + [104]) = [0]
	$2 = (($5 + [104]) | [1])
	goto $label$27 
	
.LABEL $label$29
	$9 = (($10 + [16]) & [-16])
	$11 = CALL _Znwj($9)
	*($5 + [104]) = ($9 | [1])
	*($5 + [112]) = $11
	*($5 + [108]) = $10
	
.LABEL $label$28
	$9 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$33:
	*(($11 + $2)) = *((($5 + [224]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$33 }
	$2 = ($11 + $10)
	
.LABEL $label$27
	*($2) = [0]
	$2 = CALL $104(($5 + [104]), [0], [9037])
	$10 = ($2 + [8])
	*((($5 + [120]) + [8])) = *($10)
	*($5 + [120]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	$2 = CALL $101(($5 + [120]), [9069])
	$10 = ($2 + [8])
	*((($5 + [136]) + [8])) = *($10)
	*($5 + [136]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	CALL $106(($5 + [88]), $4)
	$2 = *($5 + [88])
	$10 = ($2 & [1])
	$2 = CALL $102(($5 + [136]), ( *($5 + [96]) ? (($5 + [88]) | [1]) : $10 ), ( *($5 + [92]) ? uint_32($2 >> [1]) : $10 ))
	$10 = ($2 + [8])
	*((($5 + [152]) + [8])) = *($10)
	*($5 + [152]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	$2 = CALL $101(($5 + [152]), [9090])
	$10 = ($2 + [8])
	*((($5 + [168]) + [8])) = *($10)
	*($5 + [168]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	CALL $105(($5 + [72]), $3)
	$2 = *($5 + [72])
	$10 = ($2 & [1])
	$2 = CALL $102(($5 + [168]), ( *($5 + [80]) ? (($5 + [72]) | [1]) : $10 ), ( *($5 + [76]) ? uint_32($2 >> [1]) : $10 ))
	$10 = ($2 + [8])
	*((($5 + [224]) + [8])) = *($10)
	*($5 + [224]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	$2 = CALL $101(($5 + [224]), [9108])
	$10 = ($2 + [8])
	*((($5 + [184]) + [8])) = *($10)
	*($5 + [184]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	if ( (*($5 + [224]) & [1]) ){ goto $label$48 }
	if ( (*($5 + [72]) & [1]) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	CALL _ZdlPv(*($5 + [232]))
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL _ZdlPv(*(($5 + [80])))
	$2 = [1]
	if ( ((*($5 + [168]) & [1]) == 0) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	$2 = [1]
	if ( (*($5 + [168]) & [1]) ){ goto $label$44 }
	
.LABEL $label$45
	if ( (*($5 + [152]) & $2) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	CALL _ZdlPv(*($5 + [176]))
	if ( ((*($5 + [152]) & $2) == 0) ){ goto $label$42 }
	
.LABEL $label$43
	CALL _ZdlPv(*($5 + [160]))
	$2 = [1]
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$2 = [1]
	if ( (*($5 + [88]) & [1]) ){ goto $label$40 }
	
.LABEL $label$41
	if ( (*($5 + [136]) & $2) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	CALL _ZdlPv(*(($5 + [96])))
	if ( ((*($5 + [136]) & $2) == 0) ){ goto $label$38 }
	
.LABEL $label$39
	CALL _ZdlPv(*($5 + [144]))
	$2 = [1]
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	$2 = [1]
	if ( (*($5 + [120]) & [1]) ){ goto $label$36 }
	
.LABEL $label$37
	if ( ((*($5 + [104]) & $2) == 0) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$36
	CALL _ZdlPv(*($5 + [128]))
	if ( ((*($5 + [104]) & $2) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL _ZdlPv(*($5 + [112]))
	
.LABEL $label$34
	$8 = *(($0 + [64]))
	*(($5 + [32])) = (int_64)1397703940
	*($5 + [56]) = $13
	*($5 + [64]) = (int_64)1397703940
	*($5 + [24]) = $13
	CALL $63($0, ($5 + [216]), $8, ($5 + [24]), ($5 + [184]))
	$15 = ((float_64)*(($0 + [72])) * (float_64)(CASTING float_64)(int_64 *($5 + [200])))
	if ( ((float_64)(float_64)|$15| < (float_64)(float_64)9223372036854775808) ){ goto $label$50 }
	$13 = (int_64)-9223372036854775808
	goto $label$49 
	
.LABEL $label$50
	$13 = (Rounds 0)($15)
	
.LABEL $label$49
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [10660])
	$8 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$14 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$54 }
	$8 = $14
	$10 = [1]
	$11 = $2
	$2 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$54
	$8 = $14
	
.LOOP $label$55:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$52 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$2 < (int_32)[6])
	$11 = ($2 + [1])
	$2 = $11
	if ( $10 ){ goto $label$55 }
	$10 = [1]
	$2 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$10 = [0]
	
.LABEL $label$51
	CALL eosio_assert($10, [10709])
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$59 }
	$10 = [0]
	$11 = *([0] + [10732])
	
.LOOP $label$61:
	*((($5 + [224]) + ($2 = $10))) = *(($11 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$10 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$60 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$61 }
	
.LABEL $label$60
	*(($5 + [112])) = [0]
	*($5 + [104]) = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$58 }
	*($5 + [104]) = ($10 << [1])
	$11 = (($5 + [104]) | [1])
	goto $label$57 
	
.LABEL $label$59
	*(($5 + [112])) = [0]
	*($5 + [104]) = (int_64)0
	*($5 + [104]) = [0]
	$2 = (($5 + [104]) | [1])
	goto $label$56 
	
.LABEL $label$58
	$9 = (($10 + [16]) & [-16])
	$11 = CALL _Znwj($9)
	*($5 + [104]) = ($9 | [1])
	*($5 + [112]) = $11
	*($5 + [108]) = $10
	
.LABEL $label$57
	$9 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$62:
	*(($11 + $2)) = *((($5 + [224]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$62 }
	$2 = ($11 + $10)
	
.LABEL $label$56
	*($2) = [0]
	$2 = CALL $104(($5 + [104]), [0], [9037])
	$10 = ($2 + [8])
	*((($5 + [120]) + [8])) = *($10)
	*($5 + [120]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	$2 = CALL $101(($5 + [120]), [9116])
	$10 = ($2 + [8])
	*((($5 + [136]) + [8])) = *($10)
	*($5 + [136]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	CALL $106(($5 + [88]), $4)
	$2 = *($5 + [88])
	$10 = ($2 & [1])
	$2 = CALL $102(($5 + [136]), ( *($5 + [96]) ? (($5 + [88]) | [1]) : $10 ), ( *($5 + [92]) ? uint_32($2 >> [1]) : $10 ))
	$10 = ($2 + [8])
	*((($5 + [152]) + [8])) = *($10)
	*($5 + [152]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	$2 = CALL $101(($5 + [152]), [9090])
	$10 = ($2 + [8])
	*((($5 + [168]) + [8])) = *($10)
	*($5 + [168]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	CALL $105(($5 + [72]), $3)
	$2 = *($5 + [72])
	$10 = ($2 & [1])
	$2 = CALL $102(($5 + [168]), ( *($5 + [80]) ? (($5 + [72]) | [1]) : $10 ), ( *($5 + [76]) ? uint_32($2 >> [1]) : $10 ))
	$10 = ($2 + [8])
	*((($5 + [224]) + [8])) = *($10)
	*($5 + [224]) = *($2)
	*($2) = (int_64)0
	*($10) = [0]
	$2 = CALL $101(($5 + [224]), [9108])
	$10 = *($2 + [4])
	$11 = *($2)
	*($2) = (int_64)0
	$9 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( (*($5 + [184]) & [1]) ){ goto $label$64 }
	*($5 + [184]) = [0]
	$2 = (($5 + [184]) + [8])
	goto $label$63 
	
.LABEL $label$64
	*(*($5 + [192])) = [0]
	*($5 + [188]) = [0]
	$2 = (($5 + [184]) + [8])
	
.LABEL $label$63
	CALL $98(($5 + [184]), [0])
	*($2) = $9
	*($5 + [188]) = $10
	*($5 + [184]) = $11
	if ( (*($5 + [224]) & [1]) ){ goto $label$79 }
	if ( (*($5 + [72]) & [1]) ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$79
	CALL _ZdlPv(*($5 + [232]))
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$77 }
	
.LABEL $label$78
	CALL _ZdlPv(*(($5 + [80])))
	$2 = [1]
	if ( ((*($5 + [168]) & [1]) == 0) ){ goto $label$76 }
	goto $label$75 
	
.LABEL $label$77
	$2 = [1]
	if ( (*($5 + [168]) & [1]) ){ goto $label$75 }
	
.LABEL $label$76
	if ( (*($5 + [152]) & $2) ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$75
	CALL _ZdlPv(*($5 + [176]))
	if ( ((*($5 + [152]) & $2) == 0) ){ goto $label$73 }
	
.LABEL $label$74
	CALL _ZdlPv(*($5 + [160]))
	$2 = [1]
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	$2 = [1]
	if ( (*($5 + [88]) & [1]) ){ goto $label$71 }
	
.LABEL $label$72
	if ( (*($5 + [136]) & $2) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	CALL _ZdlPv(*(($5 + [96])))
	if ( ((*($5 + [136]) & $2) == 0) ){ goto $label$69 }
	
.LABEL $label$70
	CALL _ZdlPv(*($5 + [144]))
	$2 = [1]
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	$2 = [1]
	if ( (*($5 + [120]) & [1]) ){ goto $label$67 }
	
.LABEL $label$68
	if ( ((*($5 + [104]) & $2) == 0) ){ goto $label$65 }
	goto $label$66 
	
.LABEL $label$67
	CALL _ZdlPv(*($5 + [128]))
	if ( ((*($5 + [104]) & $2) == 0) ){ goto $label$65 }
	
.LABEL $label$66
	CALL _ZdlPv(*($5 + [112]))
	
.LABEL $label$65
	$8 = *(($0 + [56]))
	*((($5 + [8]) + [8])) = (int_64)1397703940
	*($5 + [40]) = $13
	*($5 + [48]) = (int_64)1397703940
	*($5 + [8]) = $13
	CALL $63($0, ($5 + [216]), $8, ($5 + [8]), ($5 + [184]))
	CALL $64($0, ($5 + [200]), *(*($12) + [16]), [1])
	if ( ((*($5 + [184]) & [1]) == 0) ){ goto $label$80 }
	CALL _ZdlPv(*((($5 + [184]) + [8])))
	
.LABEL $label$80
	$global$0 = ($5 + [240])
}

int_32 .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [128])
	$global$0 = $4
	*(($5 = (($4 + [88]) + [8]))) = *(($3 + [8]))
	*($4 + [88]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*(($4 + [8])) = $3
	$2 = *($4 + [88])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4) = $2
	*(($5 = ($0 + [48]))) = (int_64)0
	*(($6 = ($0 + [40]))) = (int_64)0
	*(($7 = ($0 + [56]))) = (int_64)0
	*(($8 = ($0 + [64]))) = (int_64)0
	*($0 + [120]) = $1
	*(($0 + [128])) = $1
	*(($0 + [136])) = (int_64)-1
	*(($3 = ($0 + [144]))) = (int_64)0
	*(($0 + [152])) = [0]
	*($0 + [160]) = $1
	*(($0 + [168])) = $1
	*(($0 + [176])) = (int_64)-1
	*(($0 + [184])) = (int_64)0
	*(($0 + [192])) = [0]
	*($0 + [200]) = $1
	*(($9 = ($0 + [208]))) = $1
	*(($10 = ($0 + [216]))) = (int_64)-1
	*(($11 = ($0 + [232]))) = [0]
	*(($12 = ($0 + [224]))) = (int_64)0
	*($0 + [240]) = $1
	*(($0 + [248])) = $1
	*(($0 + [256])) = (int_64)-1
	*(($0 + [264])) = (int_64)0
	*(($0 + [272])) = [0]
	*(($0 + [276])) = [0]
	*($0 + [280]) = $1
	*(($0 + [288])) = $1
	*(($0 + [296])) = (int_64)-1
	*(($0 + [304])) = (int_64)0
	*(($0 + [312])) = [0]
	*(($0 + [316])) = [0]
	$13 = CALL db_find_i64($1, $1, (int_64)-7954148446762434560, (int_64)-7954148446762434560)
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$6 }
	$6 = ($0 + [32])
	$5 = ($0 + [120])
	CALL eosio_assert(((int_32)*(CALL $54($5, $13) + [88]) == (int_32)$5), [11164])
	$13 = *(($0 + [148]))
	if ( ((int_32)$13 == (int_32)*($3)) ){ goto $label$5 }
	$3 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [88]) == (int_32)$5), [11164])
	goto $label$4 
	
.LABEL $label$6
	$14 = ($0 + [200])
	$15 = ($0 + [160])
	*($0 + [32]) = [1]
	$2 = *($0)
	*($6) = $2
	*($5) = $2
	*($7) = $2
	*($8) = $2
	*(($0 + [72])) = (int_64)4594572339843380019
	*(($0 + [80])) = (int_64)4567484449092642149
	*(($0 + [88])) = (int_64)4570553526137905576
	*(($0 + [96])) = (int_64)4571543021019234403
	*(($0 + [104])) = (int_64)4574322714766841511
	*(($0 + [112])) = [1]
	$8 = ($4 + [22])
	$5 = [9648]
	$7 = ($0 + [228])
	
.LOOP $label$7:
	CALL eosio_assert(((int_64)*($14) == (int_64)CALL $fimport$7()), [10544])
	*(($3 = CALL _Znwj([48])) + [32]) = $14
	*($3) = *($5)
	*($3 + [24]) = *(($5 + [24]))
	*($3 + [16]) = *(($5 + [16]))
	*($3 + [8]) = *(($5 + [8]))
	*((($4 + [112]) + [8])) = $8
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $55(($4 + [112]), $3)
	$1 = ((int_64)((int_64)*($3) * (int_64)100) + (int_64)*($3 + [1]))
	$6 = CALL db_store_i64(*($9), (int_64)6454109477036808192, $2, $1, $4, [22])
	*($3 + [36]) = $6
	if ( (uint_64)($1 <= *($10)) ){ goto $label$8 }
	*($10) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$8
	*($4 + [112]) = $3
	$1 = ((int_64)((int_64)*($3) * (int_64)100) + (int_64)*(($3 + [1])))
	*($4) = $1
	*($4 + [104]) = $6
	$13 = *($7)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$11 }
	*($13 + [8]) = $1
	*($13 + [16]) = $6
	*($4 + [112]) = [0]
	*($13) = $3
	*($7) = ($13 + [24])
	$3 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( $3 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $56($12, ($4 + [112]), $4, ($4 + [104]))
	$3 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( ($3 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$5 = ($5 + [32])
	if ( ((int_32)$5 != (int_32)[10544]) ){ goto $label$7 }
	$1 = *($0)
	CALL eosio_assert(((int_64)*($0 + [160]) == (int_64)CALL $fimport$7()), [10544])
	*(($3 = CALL _Znwj([64])) + [48]) = $15
	*($3 + [8]) = (int_64)4584304132692975288
	*($3) = [1]
	*($3 + [16]) = (int_64)4575296933438234296
	*($3 + [24]) = (int_64)4573567551181324026
	*($3 + [32]) = (int_64)4571261708172110332
	*($3 + [40]) = (int_64)4567911030049346683
	$5 = ($4 + [41])
	*($4 + [120]) = $5
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $57(($4 + [112]), $3)
	$2 = *($3)
	$6 = CALL db_store_i64(*(($0 + [168])), (int_64)-5001621371260627264, $1, $2, $4, [41])
	*($3 + [52]) = $6
	$13 = ($0 + [176])
	if ( ((uint_64)*($13) > (uint_64)$2) ){ goto $label$12 }
	*($13) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$12
	$14 = ($0 + [184])
	*($4 + [104]) = $3
	$2 = *($3)
	*($4) = $2
	*($4 + [112]) = $6
	$10 = ($0 + [188])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [192]))) ){ goto $label$3 }
	*($13 + [8]) = $2
	*($13 + [16]) = $6
	*($4 + [104]) = [0]
	*($13) = $3
	*($10) = ($13 + [24])
	$3 = *($4 + [104])
	*($4 + [104]) = [0]
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$13 = CALL db_find_i64(*(($0 + [120])), *(($0 + [128])), (int_64)-7954148446762434560, (int_64)-7954148446762434560)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $54($5, $13)
	CALL eosio_assert(((int_32)*($3 + [88]) == (int_32)$5), [11164])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [11238])
	$4 = CALL memcpy($4, $3, [88])
	CALL memcpy($6, $4, [81])
	$global$0 = ($4 + [128])
	return $0
	
.LABEL $label$3
	CALL $58($14, ($4 + [104]), $4, ($4 + [112]))
	$3 = *($4 + [104])
	*($4 + [104]) = [0]
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv($3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*(($0 + [160])) == (int_64)CALL $fimport$7()), [10544])
	*(($3 = CALL _Znwj([64])) + [48]) = $15
	*($3 + [8]) = (int_64)4587366580439587226
	*($3) = [2]
	*($3 + [16]) = (int_64)4581421828931458171
	*($3 + [24]) = (int_64)4579800533065604792
	*($3 + [32]) = (int_64)4576918229304087675
	*($3 + [40]) = (int_64)4572414629676717179
	*(($4 + [120])) = $5
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $57(($4 + [112]), $3)
	$2 = *($3)
	$6 = CALL db_store_i64(*(($0 + [168])), (int_64)-5001621371260627264, $1, $2, $4, [41])
	*($3 + [52]) = $6
	$13 = ($0 + [176])
	if ( ((uint_64)*($13) > (uint_64)$2) ){ goto $label$13 }
	*($13) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$13
	*($4 + [104]) = $3
	$2 = *($3)
	*($4) = $2
	*($4 + [112]) = $6
	$10 = ($0 + [188])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [192]))) ){ goto $label$16 }
	*($13 + [8]) = $2
	*($13 + [16]) = $6
	*($4 + [104]) = [0]
	*($13) = $3
	*($10) = ($13 + [24])
	$3 = *($4 + [104])
	*($4 + [104]) = [0]
	if ( $3 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $58($14, ($4 + [104]), $4, ($4 + [112]))
	$3 = *($4 + [104])
	*($4 + [104]) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($3)
	
.LABEL $label$14
	CALL eosio_assert(((int_64)*(($0 + [160])) == (int_64)CALL $fimport$7()), [10544])
	*(($3 = CALL _Znwj([64])) + [48]) = $15
	*($3 + [8]) = (int_64)4589708452245819884
	*($3) = [3]
	*($3 + [16]) = (int_64)4584304132692975288
	*($3 + [24]) = (int_64)4582862980812216730
	*($3 + [32]) = (int_64)4579800533065604792
	*($3 + [40]) = (int_64)4576918229304087675
	*(($4 + [120])) = $5
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	CALL $57(($4 + [112]), $3)
	$2 = *($3)
	$13 = CALL db_store_i64(*(($0 + [168])), (int_64)-5001621371260627264, $1, $2, $4, [41])
	*($3 + [52]) = $13
	$5 = ($0 + [176])
	if ( ((uint_64)*($5) > (uint_64)$2) ){ goto $label$17 }
	*($5) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$17
	*($4 + [104]) = $3
	$1 = *($3)
	*($4) = $1
	*($4 + [112]) = $13
	$6 = ($0 + [188])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [192]))) ){ goto $label$20 }
	*($5 + [8]) = $1
	*($5 + [16]) = $13
	*($4 + [104]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	$3 = *($4 + [104])
	*($4 + [104]) = [0]
	if ( $3 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL $58($14, ($4 + [104]), $4, ($4 + [112]))
	$3 = *($4 + [104])
	*($4 + [104]) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv($3)
	
.LABEL $label$18
	$global$0 = ($4 + [128])
	return $0
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $59(($0 + [120]), ($0 + [32]), *($0))
	$1 = *(($0 + [304]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [308])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [304]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [264]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [268])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [264]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [224]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [228])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [224]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [184]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [188])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [184]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [144]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [148])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [144]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	return $0
}