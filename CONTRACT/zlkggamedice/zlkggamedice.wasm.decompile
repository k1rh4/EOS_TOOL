(data (i32.const 8192) "invalid quantity\00")
(data (i32.const 8209) "can not below 0.1 EOS\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8317) "out of range\00")
(data (i32.const 8330) "EOS\00")
(data (i32.const 8334) "token is not EOS\00")
(data (i32.const 8351) "usernum\00")
(data (i32.const 8359) "user number is not digit\00")
(data (i32.const 8384) "user number equal 0\00")
(data (i32.const 8404) "user number out of range\00")
(data (i32.const 8429) "sys number out of range\00")
(data (i32.const 8454) "timestamp\00")
(data (i32.const 8464) "iden is not digit\00")
(data (i32.const 8482) "exist same iden\00")
(data (i32.const 8498) "exist same time record\00")
(data (i32.const 8521) "ROB\00")
(data (i32.const 8525) "can not below 1 ROB\00")
(data (i32.const 8545) "token is not ROB\00")
(data (i32.const 8562) "can not find the key\00")
(data (i32.const 8583) ":[\00")
(data (i32.const 8586) "can not find the :[\00")
(data (i32.const 8606) "can not find the ]\00")
(data (i32.const 8625) "value is empty\00")
(data (i32.const 8640) "string is too long to be a valid symbol_code\00")
(data (i32.const 8685) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8738) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8787) "invalid symbol name\00")
(data (i32.const 8807) "unable to find key\00")
(data (i32.const 8826) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8877) "error reading iterator\00")
(data (i32.const 8900) "read\00")
(data (i32.const 8905) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 8964) "write\00")
(data (i32.const 8970) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9022) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9076) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9124) "cannot create objects in table of another contract\00")
(data (i32.const 9175) "get\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memcpy" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$3 (result i32)))
(import "env" "tapos_block_num" (func $fimport$4 (result i32)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "sha256" (func $fimport$6 (param i32 i32 i32)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$12 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$13 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$14 (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$18 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$19))
(import "env" "memset" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$22 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$33 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$34 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$37 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$39 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$40 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$41 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $19))
(export "_Znwj" (func $32))
(export "_ZdlPv" (func $34))
(export "_Znaj" (func $33))
(export "_ZdaPv" (func $35))
(export "_ZnwjSt11align_val_t" (func $36))
(export "_ZnajSt11align_val_t" (func $37))
(export "_ZdlPvSt11align_val_t" (func $38))
(export "_ZdaPvSt11align_val_t" (func $39))
(table $0 2 2 anyfunc)
(elem (i32.const 1) $1)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17596))
(global $global$2 i32 (i32.const 17596))


void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_32 $17
	int_64 $18
	int_64 $19
	float_64 $20
	$4 = ($global$0 - [368])
	$global$0 = $4
	$5 = [0]
	$6 = *($2)
	$7 = ((int_64)$6 + (int_64)4611686018427387903)
	if ( ((uint_64)$7 > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$5 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8192])
	CALL eosio_assert(((int_64)$6 > (int_64)9999), [8525])
	CALL eosio_assert((uint_64)($7 <= (int_64)9223372036854775807), [8317])
	$9 = CALL $54([8521])
	if ( ($9 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8640])
	goto $label$8 
	
.LABEL $label$9
	if ( ($9 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$8 = (int_64)0
	
.LOOP $label$10:
	$5 = *(($9 + [8520]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$7
	$8 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)), [8545])
	*(($4 + [264])) = [0]
	*($4 + [256]) = (int_64)0
	$5 = CALL $54([8351])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$32 }
	*($4 + [256]) = ($5 << [1])
	$11 = (($4 + [256]) | [1])
	if ( $5 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$9 = (($5 + [16]) & [-16])
	$11 = CALL _Znwj($9)
	*($4 + [256]) = ($9 | [1])
	*($4 + [264]) = $11
	*($4 + [260]) = $5
	
.LABEL $label$31
	CALL memcpy($11, [8351], $5)
	
.LABEL $label$30
	$9 = [0]
	*(($11 + $5)) = [0]
	*($4 + [248]) = [0]
	*($4 + [240]) = (int_64)0
	CALL $3($4, $3, ($4 + [256]), ($4 + [240]))
	$5 = CALL $41(($4 + [224]), ($4 + [240]))
	$12 = ($5 + [4])
	
.LOOP $label$35:
	$11 = *($5)
	if ( ((uint_32)$9 >= (uint_32)( *($12) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$34 }
	$13 = [0]
	if ( ((int_32)*(CALL $44($5, $9)) > (int_32)[57]) ){ goto $label$33 }
	$11 = CALL $44($5, $9)
	$9 = ($9 + [1])
	if ( ((int_32)*($11) > (int_32)[47]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$13 = [1]
	
.LABEL $label$33
	CALL eosio_assert($13, [8359])
	if ( ((*($5) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$36
	$14 = CALL $50(( *((($4 + [240]) + [8])) ? (($4 + [240]) | [1]) : (*($4 + [240]) & [1]) ))
	$12 = ($14 & [255])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [8384])
	CALL eosio_assert(((($14 + [-2]) & [255]) <= [95]), [8404])
	$9 = CALL tapos_block_prefix()
	$5 = CALL tapos_block_num()
	*($4 + [184]) = ((int_64))($1 - CALL current_time()) + (int_64)(CASTING int_64)(int_32 ((int_32)$5 * (int_32)$9)))
	CALL sha256(($4 + [184]), [4], ($4 + [272]))
	$8 = ((int_64)((int_64)((int_64)*($4 + [280]) + (int_64)*($4 + [272])) + (int_64)*($4 + [288])) + (int_64)*($4 + [296]))
	$9 = (CASTING uint_32)(uint_64 ((uint_64)((int_64))(((int_64)$8 + (int_64)397) - (uint_64)$8 >> (uint_64)(int_64)12)) + (int_64)(uint_64)$8 >> (uint_64)(int_64)10)
	CALL eosio_assert(($9 % (uint_64)(int_64)100))) <= [100]), [8429])
	$6 = *(($2 + [8]))
	CALL eosio_assert([1], [8738])
	$15 = ($9 + [1])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$8 = $10
	$5 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$40
	$8 = $10
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $5 ){ goto $label$41 }
	$5 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$5 = [0]
	
.LABEL $label$37
	CALL eosio_assert($5, [8787])
	$16 = [0]
	$10 = (int_64)0
	if ( ((uint_32)$15 >= (uint_32)($14 & [255])) ){ goto $label$27 }
	$17 = ((float_32)(DEMOTE float_32)(float_64 ((float_64)(float_64)98.5 / (float_64)(CASTING float_64)(int_32 ($12 + [-1])))) * (float_32)(CASTING float_32)(int_64 *($2)))
	if ( ((float_32)(float_32)|$17| < (float_32)(float_32)9223372036854775808) ){ goto $label$43 }
	$10 = (int_64)-9223372036854775808
	goto $label$42 
	
.LABEL $label$43
	$10 = (Rounds 0)($17)
	
.LABEL $label$42
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8738])
	$9 = CALL $54([8521])
	if ( ($9 <= [8]) ){ goto $label$46 }
	CALL eosio_assert([0], [8640])
	goto $label$45 
	
.LABEL $label$46
	if ( ($9 == 0) ){ goto $label$44 }
	
.LABEL $label$45
	$8 = (int_64)0
	
.LOOP $label$47:
	$5 = *(($9 + [8520]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$48 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$48
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$47 }
	goto $label$28 
	
.LABEL $label$44
	$8 = (int_64)0
	goto $label$28 
	
.LABEL $label$29
	CALL $40(($4 + [256]))
	
.LABEL $label$28
	$7 = *($0)
	*(($4 + [304])) = [0]
	*($4 + [280]) = $7
	*($4 + [272]) = (int_64)-260984679985572560
	*($4 + [288]) = (int_64)-1
	*($4 + [296]) = (int_64)0
	$9 = CALL $4(($4 + [272]), $8, [8807])
	$8 = *($9 + [8])
	$7 = *($9)
	$11 = *($4 + [296])
	if ( ($11 == 0) ){ goto $label$49 }
	$12 = ($4 + [300])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$51 }
	
.LOOP $label$52:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$53 }
	CALL _ZdlPv($5)
	
.LABEL $label$53
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$52 }
	$9 = *(($4 + [296]))
	goto $label$50 
	
.LABEL $label$51
	$9 = $11
	
.LABEL $label$50
	*($12) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$49
	CALL eosio_assert(((int_64)$8 == (int_64)$6), [8905])
	$16 = [2]
	if ( ((int_64)$7 < (int_64)$10) ){ goto $label$27 }
	*($4 + [96]) = (int_64)3617214756542218240
	*($4 + [88]) = *($0)
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$9 = CALL $54([8453])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$56 }
	*($4 + [16]) = ($9 << [1])
	$5 = (($4 + [16]) | [1])
	if ( $9 ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$11 = (($9 + [16]) & [-16])
	$5 = CALL _Znwj($11)
	*($4 + [16]) = ($11 | [1])
	*($4 + [24]) = $5
	*($4 + [20]) = $9
	
.LABEL $label$55
	CALL memcpy($5, [8453], $9)
	
.LABEL $label$54
	*(($5 + $9)) = [0]
	*(($4 + [296])) = $6
	$9 = ($4 + [24])
	*(($4 + [312])) = *($9)
	*($9) = [0]
	*($4 + [280]) = $1
	*($4 + [288]) = $10
	*($4 + [272]) = *($0)
	*($4 + [304]) = *($4 + [16])
	*($4 + [16]) = (int_64)0
	$9 = CALL $5(($4 + [184]), ($4 + [88]), (int_64)-260984679985572560, (int_64)-3617168760277827584, ($4 + [272]))
	CALL $6(($4 + [32]), $9)
	$5 = *($4 + [32])
	CALL send_inline($5, (*($4 + [36]) - $5))
	$5 = *($4 + [32])
	if ( ($5 == 0) ){ goto $label$57 }
	*($4 + [36]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$57
	$5 = *($9 + [28])
	if ( ($5 == 0) ){ goto $label$58 }
	*(($9 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$58
	$5 = *($9 + [16])
	if ( ($5 == 0) ){ goto $label$59 }
	*(($9 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$59
	if ( ((*(($4 + [304])) & [1]) == 0) ){ goto $label$60 }
	CALL _ZdlPv(*(($4 + [312])))
	
.LABEL $label$60
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$61
	$16 = [1]
	
.LABEL $label$27
	*(($4 + [176])) = [0]
	*($4 + [168]) = (int_64)0
	$5 = CALL $54([8454])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$63 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$66 }
	*($4 + [168]) = ($5 << [1])
	$11 = (($4 + [168]) | [1])
	if ( $5 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$9 = (($5 + [16]) & [-16])
	$11 = CALL _Znwj($9)
	*($4 + [168]) = ($9 | [1])
	*($4 + [176]) = $11
	*($4 + [172]) = $5
	
.LABEL $label$65
	CALL memcpy($11, [8454], $5)
	
.LABEL $label$64
	$9 = [0]
	*(($11 + $5)) = [0]
	*($4 + [160]) = [0]
	*($4 + [152]) = (int_64)0
	CALL $3($4, $3, ($4 + [168]), ($4 + [152]))
	$5 = CALL $41(($4 + [136]), ($4 + [152]))
	$12 = ($5 + [4])
	
.LOOP $label$69:
	$11 = *($5)
	if ( ((uint_32)$9 >= (uint_32)( *($12) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$68 }
	$13 = [0]
	if ( ((int_32)*(CALL $44($5, $9)) > (int_32)[57]) ){ goto $label$67 }
	$11 = CALL $44($5, $9)
	$9 = ($9 + [1])
	if ( ((int_32)*($11) > (int_32)[47]) ){ goto $label$69 }
	goto $label$67 
	
.LABEL $label$68
	$13 = [1]
	
.LABEL $label$67
	CALL eosio_assert($13, [8464])
	if ( ((*($5) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$70
	*($4 + [128]) = CALL $51(( *(($4 + [160])) ? (($4 + [152]) | [1]) : (*($4 + [152]) & [1]) ))
	*((($4 + [184]) + [32])) = [0]
	*($4 + [200]) = (int_64)-1
	*($4 + [208]) = (int_64)0
	*($4 + [220]) = [0]
	$8 = *($0)
	*($4 + [184]) = $8
	*($4 + [192]) = $8
	*((($4 + [88]) + [32])) = [0]
	*($4 + [96]) = $8
	*($4 + [88]) = $8
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	*($4 + [124]) = [0]
	*($4 + [80]) = ($4 + [184])
	CALL $7(($4 + [72]), ($4 + [80]), ($4 + [128]))
	$9 = *($4 + [76])
	if ( ($9 == 0) ){ goto $label$71 }
	CALL eosio_assert(((int_64)*($9 + [8]) != (int_64)*($4 + [128])), [8482])
	
.LABEL $label$71
	$8 = CALL current_time()
	$5 = *(($4 + [212]))
	$12 = *(($4 + [208]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$73 }
	
.LOOP $label$75:
	$9 = ($5 + [-24])
	$11 = *($9)
	if ( ((int_64)*($11) == (int_64)$8) ){ goto $label$74 }
	$5 = $9
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$75 }
	goto $label$73 
	
.LABEL $label$74
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$73 }
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)($4 + [184])), [8826])
	goto $label$72 
	
.LABEL $label$73
	$11 = [0]
	$9 = CALL db_find_i64(*($4 + [184]), *(($4 + [192])), (int_64)5445034869061058560, $8)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$72 }
	$11 = CALL $8(($4 + [184]), $9)
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)($4 + [184])), [8826])
	
.LABEL $label$72
	CALL eosio_assert(($11 == 0), [8498])
	$9 = ($4 + [200])
	$7 = *($9)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$76 }
	$7 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4 + [184]), *(($4 + [192])), (int_64)5445034869061058560, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$77 }
	CALL $8(($4 + [184]), $5)
	*($4 + [276]) = [0]
	*($4 + [272]) = ($4 + [184])
	$7 = *(*(CALL $9(($4 + [272])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$77
	*(($4 + [200])) = $7
	
.LABEL $label$76
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [8970])
	$18 = *($9)
	if ( ((int_64)$18 != (int_64)0) ){ goto $label$78 }
	CALL eosio_assert([1], [8970])
	$18 = *(($4 + [200]))
	
.LABEL $label$78
	$7 = *($0)
	CALL eosio_assert(((int_64)*($4 + [184]) == (int_64)CALL eosio_assert0()), [9124])
	*(($9 = CALL _Znwj([88])) + [72]) = ($4 + [184])
	*($9) = $18
	*($9 + [16]) = $8
	*($9 + [24]) = $1
	*($9 + [48]) = $14
	*($9 + [49]) = $15
	*($9 + [56]) = $10
	*($9 + [64]) = $6
	*($9 + [8]) = *($4 + [128])
	*($9 + [32]) = *($2)
	*(($9 + [40])) = *(($2 + [8]))
	*($4 + [40]) = (($4 + [272]) + [66])
	*($4 + [36]) = ($4 + [272])
	*($4 + [32]) = ($4 + [272])
	CALL $10(($4 + [32]), $9)
	$18 = *($9)
	$5 = (($4 + [184]) + [8])
	*($9 + [76]) = CALL db_store_i64(*($5), (int_64)5445034869061058560, $7, $18, ($4 + [272]), [66])
	$11 = ($4 + [200])
	if ( (uint_64)($18 <= *($11)) ){ goto $label$79 }
	*($11) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$79
	$18 = *($9)
	$19 = *($5)
	*($4 + [16]) = *(($9 + [24]))
	*($9 + [80]) = CALL db_idx64_store($19, (int_64)5445034869061058560, $7, $18, ($4 + [16]))
	$18 = *($9)
	$19 = *($5)
	*($4 + [16]) = *(($9 + [8]))
	*($9 + [84]) = CALL db_idx64_store($19, (int_64)5445034869061058561, $7, $18, ($4 + [16]))
	*($4 + [32]) = $9
	$7 = *($9)
	*($4 + [272]) = $7
	$11 = *(($9 + [76]))
	*($4 + [16]) = $11
	$12 = ($4 + [212])
	$5 = *($12)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [216]))) ){ goto $label$82 }
	*($5 + [8]) = $7
	*($5 + [16]) = $11
	*($4 + [32]) = [0]
	*($5) = $9
	*($12) = ($5 + [24])
	$9 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( $9 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	CALL $11((($4 + [184]) + [24]), ($4 + [32]), ($4 + [272]), ($4 + [16]))
	$9 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($9 == 0) ){ goto $label$80 }
	
.LABEL $label$81
	CALL _ZdlPv($9)
	
.LABEL $label$80
	$9 = ($4 + [104])
	$7 = *($9)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$83 }
	$7 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4 + [88]), *(($4 + [96])), (int_64)-3617169328673128448, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$84 }
	CALL $12(($4 + [88]), $5)
	*($4 + [276]) = [0]
	*($4 + [272]) = ($4 + [88])
	$7 = *(*(CALL $13(($4 + [272])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$84
	*(($4 + [104])) = $7
	
.LABEL $label$83
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [8970])
	$18 = *($9)
	if ( ((int_64)$18 != (int_64)0) ){ goto $label$85 }
	CALL eosio_assert([1], [8970])
	$18 = *(($4 + [104]))
	
.LABEL $label$85
	$7 = *($0)
	CALL eosio_assert(((int_64)*($4 + [88]) == (int_64)CALL eosio_assert0()), [9124])
	*(($9 = CALL _Znwj([88])) + [68]) = ($4 + [88])
	*($9) = $18
	*($9 + [16]) = $8
	*($9 + [24]) = $1
	*($9 + [48]) = $10
	*($9 + [56]) = $6
	*($9 + [64]) = $16
	*($9 + [8]) = *($4 + [128])
	*($9 + [32]) = *($2)
	*(($9 + [40])) = *(($2 + [8]))
	*($4 + [40]) = (($4 + [272]) + [65])
	*($4 + [36]) = ($4 + [272])
	*($4 + [32]) = ($4 + [272])
	CALL $14(($4 + [32]), $9)
	$8 = *($9)
	$5 = (($4 + [88]) + [8])
	*($9 + [72]) = CALL db_store_i64(*($5), (int_64)-3617169328673128448, $7, $8, ($4 + [272]), [65])
	$11 = ($4 + [104])
	if ( (uint_64)($8 <= *($11)) ){ goto $label$86 }
	*($11) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$86
	$8 = *($9)
	$10 = *($5)
	*($4 + [16]) = *(($9 + [24]))
	*($9 + [76]) = CALL db_idx64_store($10, (int_64)-3617169328673128448, $7, $8, ($4 + [16]))
	$8 = *($9)
	$10 = *($5)
	*($4 + [16]) = *(($9 + [8]))
	*($9 + [80]) = CALL db_idx64_store($10, (int_64)-3617169328673128447, $7, $8, ($4 + [16]))
	*($4 + [32]) = $9
	$8 = *($9)
	*($4 + [272]) = $8
	$11 = *(($9 + [72]))
	*($4 + [16]) = $11
	$12 = ($4 + [116])
	$5 = *($12)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [120]))) ){ goto $label$89 }
	*($5 + [8]) = $8
	*($5 + [16]) = $11
	*($4 + [32]) = [0]
	*($5) = $9
	*($12) = ($5 + [24])
	$9 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( $9 ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$89
	CALL $15((($4 + [88]) + [24]), ($4 + [32]), ($4 + [272]), ($4 + [16]))
	$9 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($9 == 0) ){ goto $label$87 }
	
.LABEL $label$88
	CALL _ZdlPv($9)
	
.LABEL $label$87
	$6 = *(($2 + [8]))
	$20 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.015)
	if ( ((float_64)(float_64)|$20| < (float_64)(float_64)9223372036854775808) ){ goto $label$91 }
	$1 = (int_64)-9223372036854775808
	goto $label$90 
	
.LABEL $label$91
	$1 = (Rounds 0)($20)
	
.LABEL $label$90
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8738])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$94:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$93 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$95 }
	$8 = $10
	$5 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$94 }
	goto $label$92 
	
.LABEL $label$95
	$8 = $10
	
.LOOP $label$96:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$93 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $5 ){ goto $label$96 }
	$5 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$94 }
	goto $label$92 
	
.LABEL $label$93
	$5 = [0]
	
.LABEL $label$92
	CALL eosio_assert($5, [8787])
	*($4 + [24]) = (int_64)3617214756542218240
	*($4 + [16]) = *($0)
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$9 = CALL $54([8453])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$62 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$99 }
	*($4) = ($9 << [1])
	$5 = ($4 | [1])
	if ( $9 ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$99
	$11 = (($9 + [16]) & [-16])
	$5 = CALL _Znwj($11)
	*($4) = ($11 | [1])
	*($4 + [8]) = $5
	*($4 + [4]) = $9
	
.LABEL $label$98
	CALL memcpy($5, [8453], $9)
	
.LABEL $label$97
	*(($5 + $9)) = [0]
	*(($4 + [296])) = $6
	$9 = ($4 + [8])
	*(($4 + [312])) = *($9)
	*($9) = [0]
	*($4 + [280]) = (int_64)-260984680305891200
	*($4 + [288]) = $1
	*($4 + [272]) = *($0)
	*($4 + [304]) = *($4)
	*($4) = (int_64)0
	$9 = CALL $5(($4 + [32]), ($4 + [16]), (int_64)-260984679985572560, (int_64)-3617168760277827584, ($4 + [272]))
	CALL $6(($4 + [352]), $9)
	$5 = *($4 + [352])
	CALL send_inline($5, (*($4 + [356]) - $5))
	$5 = *($4 + [352])
	if ( ($5 == 0) ){ goto $label$100 }
	*($4 + [356]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$100
	$5 = *($9 + [28])
	if ( ($5 == 0) ){ goto $label$101 }
	*(($9 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$101
	$5 = *($9 + [16])
	if ( ($5 == 0) ){ goto $label$102 }
	*(($9 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$102
	if ( (*(($4 + [304])) & [1]) ){ goto $label$104 }
	if ( (*($4) & [1]) ){ goto $label$103 }
	goto $label$25 
	
.LABEL $label$104
	CALL _ZdlPv(*(($4 + [312])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$25 }
	
.LABEL $label$103
	CALL _ZdlPv(*(($4 + [8])))
	$11 = *($4 + [112])
	if ( $11 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$63
	CALL $40(($4 + [168]))
	
.LABEL $label$62
	CALL $40($4)
	
.LABEL $label$26
	CALL $40(($4 + [16]))
	
.LABEL $label$25
	$11 = *($4 + [112])
	if ( ($11 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$12 = ($4 + [116])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$22 }
	
.LOOP $label$105:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$106 }
	CALL _ZdlPv($5)
	
.LABEL $label$106
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$105 }
	$9 = *(($4 + [112]))
	*($12) = $11
	CALL _ZdlPv($9)
	$11 = *($4 + [208])
	if ( $11 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$11 = *($4 + [208])
	if ( ($11 == 0) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$22
	*($12) = $11
	CALL _ZdlPv($11)
	$11 = *($4 + [208])
	if ( ($11 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$12 = ($4 + [212])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$108 }
	
.LOOP $label$109:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$110 }
	CALL _ZdlPv($5)
	
.LABEL $label$110
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$109 }
	$9 = *(($4 + [208]))
	goto $label$107 
	
.LABEL $label$108
	$9 = $11
	
.LABEL $label$107
	*($12) = $11
	CALL _ZdlPv($9)
	$9 = [1]
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$9 = [1]
	if ( (*($4 + [152]) & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( (*($4 + [168]) & $9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*(($4 + [160])))
	if ( ((*($4 + [168]) & $9) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*($4 + [176]))
	$9 = [1]
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$9 = [1]
	if ( (*($4 + [240]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($4 + [256]) & $9) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($4 + [248])))
	if ( ((*($4 + [256]) & $9) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($4 + [264]))
	$global$0 = ($4 + [368])
	return 
	
.LABEL $label$12
	$global$0 = ($4 + [368])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 == (int_64)-260984679985572560) ){ goto $label$9 }
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$8 }
	CALL $20(($3 + [144]))
	if ( ((int_64)*($3 + [152]) != (int_64)$0) ){ goto $label$7 }
	*((($3 + [112]) + [24])) = [0]
	*(($4 = (($3 + [96]) + [8]))) = *((($3 + [144]) + [24]))
	*($3 + [120]) = (int_64)6138663591592764928
	*($3 + [112]) = $0
	*($3 + [128]) = (int_64)0
	*($3 + [96]) = *($3 + [160])
	$1 = *($3 + [144])
	$5 = ($3 + [176])
	$6 = CALL $41(($3 + [80]), $5)
	*((($3 + [8]) + [8])) = *($4)
	*($3 + [8]) = *($3 + [96])
	CALL $2(($3 + [112]), $1, ($3 + [8]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($6 + [8]))
	if ( (*($5) & [1]) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$8 }
	CALL $20(($3 + [144]))
	if ( ((int_64)*($3 + [152]) != (int_64)$0) ){ goto $label$4 }
	*((($3 + [112]) + [24])) = [0]
	*(($4 = (($3 + [64]) + [8]))) = *((($3 + [144]) + [24]))
	*($3 + [120]) = (int_64)-260984679985572560
	*($3 + [112]) = $0
	*($3 + [128]) = (int_64)0
	*($3 + [64]) = *($3 + [160])
	$1 = *($3 + [144])
	$5 = ($3 + [176])
	$6 = CALL $41(($3 + [48]), $5)
	*((($3 + [24]) + [8])) = *($4)
	*($3 + [24]) = *($3 + [64])
	CALL $18(($3 + [112]), $1, ($3 + [24]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($6 + [8]))
	if ( (*($5) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-7122829838779416576) ){ goto $label$1 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3) = *($3 + [40])
	CALL $21($1, $1, $3)
	goto $label$1 
	
.LABEL $label$7
	$5 = ($3 + [176])
	
.LABEL $label$6
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [184])))
	goto $label$1 
	
.LABEL $label$4
	$5 = ($3 + [176])
	
.LABEL $label$3
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($3 + [184])))
	
.LABEL $label$1
	CALL $49([0])
	$global$0 = ($3 + [192])
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8900])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [8900])
	CALL memcpy(($1 + [64]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8900])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [8900])
	CALL memcpy(($1 + [48]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [8900])
	CALL memcpy(($1 + [49]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8900])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $57($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $60($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $57($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $22(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8877])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $57($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8900])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8900])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $60($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8900])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8900])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8900])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8900])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $30(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8964])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8964])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8964])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8964])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8964])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8964])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8964])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $49 (int_32 $0)
{
}

int_32 .FUNC $48 ()
{
	return [9184]
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $40 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $47 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $53(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $52(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = ($2 & [1])
	if ( $3 ){ goto $label$3 }
	if ( ((uint_32)uint_32($2 >> [1]) > (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)*($0 + [4]) <= (uint_32)$1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $3 ){ goto $label$4 }
	return (($0 + [1]) + $1)
	
.LABEL $label$4
	return (*($0 + [8]) + $1)
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_64 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$4 = (int_64)0
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$4 = (int_64)0
	
.LOOP $label$7:
	$4 = (int_64))(((int_64)$4 * (int_64)10) - (CASTING int_64)(int_32 $1))
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $4 ? (int_64))((int_64)0 - $4) : $2 )
}

void .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17584])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17392]
	$3 = (((int_32)$1 * (int_32)[12]) + [17392])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8877])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $57($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [32]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = $0
	CALL $28(($3 + [32]), $5)
	*($5 + [76]) = $1
	*($5 + [80 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $11(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $60($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [76]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9076])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)5445034869061058560)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9022])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9022])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $8(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $16($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8964])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8964])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $26(CALL $25($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)5445034869061058561, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [8826])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $8($7, CALL $fimport$8(*($7), *($7 + [8]), (int_64)5445034869061058560, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [8826])
	
.LABEL $label$2
	*(($4 + [84])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $4 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8826])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $23($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8826])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $5 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $16($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $17(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $2 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_32 $17
	int_64 $18
	int_64 $19
	float_64 $20
	$4 = ($global$0 - [368])
	$global$0 = $4
	$5 = [0]
	$6 = *($2)
	$7 = ((int_64)$6 + (int_64)4611686018427387903)
	if ( ((uint_64)$7 > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$5 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [8192])
	CALL eosio_assert(((int_64)$6 > (int_64)999), [8209])
	CALL eosio_assert((uint_64)($7 <= (int_64)9223372036854775807), [8317])
	$9 = CALL $54([8330])
	if ( ($9 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [8640])
	goto $label$8 
	
.LABEL $label$9
	if ( ($9 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$8 = (int_64)0
	
.LOOP $label$10:
	$5 = *(($9 + [8329]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$7
	$8 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)), [8334])
	*(($4 + [264])) = [0]
	*($4 + [256]) = (int_64)0
	$5 = CALL $54([8351])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$36 }
	*($4 + [256]) = ($5 << [1])
	$11 = (($4 + [256]) | [1])
	if ( $5 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$9 = (($5 + [16]) & [-16])
	$11 = CALL _Znwj($9)
	*($4 + [256]) = ($9 | [1])
	*($4 + [264]) = $11
	*($4 + [260]) = $5
	
.LABEL $label$35
	CALL memcpy($11, [8351], $5)
	
.LABEL $label$34
	$9 = [0]
	*(($11 + $5)) = [0]
	*($4 + [248]) = [0]
	*($4 + [240]) = (int_64)0
	CALL $3($4, $3, ($4 + [256]), ($4 + [240]))
	$5 = CALL $41(($4 + [224]), ($4 + [240]))
	$12 = ($5 + [4])
	
.LOOP $label$39:
	$11 = *($5)
	if ( ((uint_32)$9 >= (uint_32)( *($12) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$38 }
	$13 = [0]
	if ( ((int_32)*(CALL $44($5, $9)) > (int_32)[57]) ){ goto $label$37 }
	$11 = CALL $44($5, $9)
	$9 = ($9 + [1])
	if ( ((int_32)*($11) > (int_32)[47]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$13 = [1]
	
.LABEL $label$37
	CALL eosio_assert($13, [8359])
	if ( ((*($5) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$40
	$14 = CALL $50(( *((($4 + [240]) + [8])) ? (($4 + [240]) | [1]) : (*($4 + [240]) & [1]) ))
	$12 = ($14 & [255])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [8384])
	CALL eosio_assert(((($14 + [-2]) & [255]) <= [95]), [8404])
	$9 = CALL tapos_block_prefix()
	$5 = CALL tapos_block_num()
	*($4 + [184]) = ((int_64))($1 - CALL current_time()) + (int_64)(CASTING int_64)(int_32 ((int_32)$5 * (int_32)$9)))
	CALL sha256(($4 + [184]), [4], ($4 + [272]))
	$8 = ((int_64)((int_64)((int_64)*($4 + [280]) + (int_64)*($4 + [272])) + (int_64)*($4 + [288])) + (int_64)*($4 + [296]))
	$9 = (CASTING uint_32)(uint_64 ((uint_64)((int_64))(((int_64)$8 + (int_64)397) - (uint_64)$8 >> (uint_64)(int_64)12)) + (int_64)(uint_64)$8 >> (uint_64)(int_64)10)
	CALL eosio_assert(($9 % (uint_64)(int_64)100))) <= [100]), [8429])
	$6 = *(($2 + [8]))
	CALL eosio_assert([1], [8738])
	$15 = ($9 + [1])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$8 = $10
	$5 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$8 = $10
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $5 ){ goto $label$45 }
	$5 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$5 = [0]
	
.LABEL $label$41
	CALL eosio_assert($5, [8787])
	$16 = [0]
	$10 = (int_64)0
	if ( ((uint_32)$15 >= (uint_32)($14 & [255])) ){ goto $label$31 }
	$17 = ((float_32)(DEMOTE float_32)(float_64 ((float_64)(float_64)98.5 / (float_64)(CASTING float_64)(int_32 ($12 + [-1])))) * (float_32)(CASTING float_32)(int_64 *($2)))
	if ( ((float_32)(float_32)|$17| < (float_32)(float_32)9223372036854775808) ){ goto $label$47 }
	$10 = (int_64)-9223372036854775808
	goto $label$46 
	
.LABEL $label$47
	$10 = (Rounds 0)($17)
	
.LABEL $label$46
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8738])
	$9 = CALL $54([8330])
	if ( ($9 <= [8]) ){ goto $label$50 }
	CALL eosio_assert([0], [8640])
	goto $label$49 
	
.LABEL $label$50
	if ( ($9 == 0) ){ goto $label$48 }
	
.LABEL $label$49
	$8 = (int_64)0
	
.LOOP $label$51:
	$5 = *(($9 + [8329]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$52 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$52
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$51 }
	goto $label$32 
	
.LABEL $label$48
	$8 = (int_64)0
	goto $label$32 
	
.LABEL $label$33
	CALL $40(($4 + [256]))
	
.LABEL $label$32
	$7 = *($0)
	*(($4 + [304])) = [0]
	*($4 + [280]) = $7
	*($4 + [272]) = (int_64)6138663591592764928
	*($4 + [288]) = (int_64)-1
	*($4 + [296]) = (int_64)0
	$9 = CALL $4(($4 + [272]), $8, [8807])
	$8 = *($9 + [8])
	$7 = *($9)
	$11 = *($4 + [296])
	if ( ($11 == 0) ){ goto $label$53 }
	$12 = ($4 + [300])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$55 }
	
.LOOP $label$56:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$57 }
	CALL _ZdlPv($5)
	
.LABEL $label$57
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$56 }
	$9 = *(($4 + [296]))
	goto $label$54 
	
.LABEL $label$55
	$9 = $11
	
.LABEL $label$54
	*($12) = $11
	CALL _ZdlPv($9)
	
.LABEL $label$53
	CALL eosio_assert(((int_64)$8 == (int_64)$6), [8905])
	$16 = [2]
	if ( ((int_64)$7 < (int_64)$10) ){ goto $label$31 }
	*($4 + [96]) = (int_64)3617214756542218240
	*($4 + [88]) = *($0)
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$9 = CALL $54([8453])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$60 }
	*($4 + [16]) = ($9 << [1])
	$5 = (($4 + [16]) | [1])
	if ( $9 ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$11 = (($9 + [16]) & [-16])
	$5 = CALL _Znwj($11)
	*($4 + [16]) = ($11 | [1])
	*($4 + [24]) = $5
	*($4 + [20]) = $9
	
.LABEL $label$59
	CALL memcpy($5, [8453], $9)
	
.LABEL $label$58
	*(($5 + $9)) = [0]
	*(($4 + [296])) = $6
	$9 = ($4 + [24])
	*(($4 + [312])) = *($9)
	*($9) = [0]
	*($4 + [280]) = $1
	*($4 + [288]) = $10
	*($4 + [272]) = *($0)
	*($4 + [304]) = *($4 + [16])
	*($4 + [16]) = (int_64)0
	$9 = CALL $5(($4 + [184]), ($4 + [88]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($4 + [272]))
	CALL $6(($4 + [32]), $9)
	$5 = *($4 + [32])
	CALL send_inline($5, (*($4 + [36]) - $5))
	$5 = *($4 + [32])
	if ( ($5 == 0) ){ goto $label$61 }
	*($4 + [36]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$61
	$5 = *($9 + [28])
	if ( ($5 == 0) ){ goto $label$62 }
	*(($9 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$62
	$5 = *($9 + [16])
	if ( ($5 == 0) ){ goto $label$63 }
	*(($9 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$63
	if ( ((*(($4 + [304])) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*(($4 + [312])))
	
.LABEL $label$64
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$65
	$16 = [1]
	
.LABEL $label$31
	*(($4 + [176])) = [0]
	*($4 + [168]) = (int_64)0
	$5 = CALL $54([8454])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$66 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$69 }
	*($4 + [168]) = ($5 << [1])
	$11 = (($4 + [168]) | [1])
	if ( $5 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	$9 = (($5 + [16]) & [-16])
	$11 = CALL _Znwj($9)
	*($4 + [168]) = ($9 | [1])
	*($4 + [176]) = $11
	*($4 + [172]) = $5
	
.LABEL $label$68
	CALL memcpy($11, [8454], $5)
	
.LABEL $label$67
	$9 = [0]
	*(($11 + $5)) = [0]
	*($4 + [160]) = [0]
	*($4 + [152]) = (int_64)0
	CALL $3($4, $3, ($4 + [168]), ($4 + [152]))
	$5 = CALL $41(($4 + [136]), ($4 + [152]))
	$12 = ($5 + [4])
	
.LOOP $label$72:
	$11 = *($5)
	if ( ((uint_32)$9 >= (uint_32)( *($12) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$71 }
	$13 = [0]
	if ( ((int_32)*(CALL $44($5, $9)) > (int_32)[57]) ){ goto $label$70 }
	$11 = CALL $44($5, $9)
	$9 = ($9 + [1])
	if ( ((int_32)*($11) > (int_32)[47]) ){ goto $label$72 }
	goto $label$70 
	
.LABEL $label$71
	$13 = [1]
	
.LABEL $label$70
	CALL eosio_assert($13, [8464])
	if ( ((*($5) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$73
	*($4 + [128]) = CALL $51(( *(($4 + [160])) ? (($4 + [152]) | [1]) : (*($4 + [152]) & [1]) ))
	*((($4 + [184]) + [32])) = [0]
	*($4 + [200]) = (int_64)-1
	*($4 + [208]) = (int_64)0
	*($4 + [220]) = [0]
	$8 = *($0)
	*($4 + [184]) = $8
	*($4 + [192]) = $8
	*((($4 + [88]) + [32])) = [0]
	*($4 + [96]) = $8
	*($4 + [88]) = $8
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	*($4 + [124]) = [0]
	*($4 + [80]) = ($4 + [184])
	CALL $7(($4 + [72]), ($4 + [80]), ($4 + [128]))
	$9 = *($4 + [76])
	if ( ($9 == 0) ){ goto $label$74 }
	CALL eosio_assert(((int_64)*($9 + [8]) != (int_64)*($4 + [128])), [8482])
	
.LABEL $label$74
	$8 = CALL current_time()
	$5 = *(($4 + [212]))
	$12 = *(($4 + [208]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$76 }
	
.LOOP $label$78:
	$9 = ($5 + [-24])
	$11 = *($9)
	if ( ((int_64)*($11) == (int_64)$8) ){ goto $label$77 }
	$5 = $9
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$78 }
	goto $label$76 
	
.LABEL $label$77
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$76 }
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)($4 + [184])), [8826])
	goto $label$75 
	
.LABEL $label$76
	$11 = [0]
	$9 = CALL db_find_i64(*($4 + [184]), *(($4 + [192])), (int_64)5445034869061058560, $8)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$75 }
	$11 = CALL $8(($4 + [184]), $9)
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)($4 + [184])), [8826])
	
.LABEL $label$75
	CALL eosio_assert(($11 == 0), [8498])
	$9 = ($4 + [200])
	$7 = *($9)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$79 }
	$7 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4 + [184]), *(($4 + [192])), (int_64)5445034869061058560, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$80 }
	CALL $8(($4 + [184]), $5)
	*($4 + [276]) = [0]
	*($4 + [272]) = ($4 + [184])
	$7 = *(*(CALL $9(($4 + [272])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$80
	*(($4 + [200])) = $7
	
.LABEL $label$79
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [8970])
	$18 = *($9)
	if ( ((int_64)$18 != (int_64)0) ){ goto $label$81 }
	CALL eosio_assert([1], [8970])
	$18 = *(($4 + [200]))
	
.LABEL $label$81
	$7 = *($0)
	CALL eosio_assert(((int_64)*($4 + [184]) == (int_64)CALL eosio_assert0()), [9124])
	*(($9 = CALL _Znwj([88])) + [72]) = ($4 + [184])
	*($9) = $18
	*($9 + [16]) = $8
	*($9 + [24]) = $1
	*($9 + [48]) = $14
	*($9 + [49]) = $15
	*($9 + [56]) = $10
	*($9 + [64]) = $6
	*($9 + [8]) = *($4 + [128])
	*($9 + [32]) = *($2)
	*(($9 + [40])) = *(($2 + [8]))
	*($4 + [40]) = (($4 + [272]) + [66])
	*($4 + [36]) = ($4 + [272])
	*($4 + [32]) = ($4 + [272])
	CALL $10(($4 + [32]), $9)
	$18 = *($9)
	$5 = (($4 + [184]) + [8])
	*($9 + [76]) = CALL db_store_i64(*($5), (int_64)5445034869061058560, $7, $18, ($4 + [272]), [66])
	$11 = ($4 + [200])
	if ( (uint_64)($18 <= *($11)) ){ goto $label$82 }
	*($11) = ( (int_64)-2 ? ((int_64)$18 + (int_64)1) : ((uint_64)$18 > (uint_64)(int_64)-3) )
	
.LABEL $label$82
	$18 = *($9)
	$19 = *($5)
	*($4 + [16]) = *(($9 + [24]))
	*($9 + [80]) = CALL db_idx64_store($19, (int_64)5445034869061058560, $7, $18, ($4 + [16]))
	$18 = *($9)
	$19 = *($5)
	*($4 + [16]) = *(($9 + [8]))
	*($9 + [84]) = CALL db_idx64_store($19, (int_64)5445034869061058561, $7, $18, ($4 + [16]))
	*($4 + [32]) = $9
	$7 = *($9)
	*($4 + [272]) = $7
	$11 = *(($9 + [76]))
	*($4 + [16]) = $11
	$12 = ($4 + [212])
	$5 = *($12)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [216]))) ){ goto $label$85 }
	*($5 + [8]) = $7
	*($5 + [16]) = $11
	*($4 + [32]) = [0]
	*($5) = $9
	*($12) = ($5 + [24])
	$9 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( $9 ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$85
	CALL $11((($4 + [184]) + [24]), ($4 + [32]), ($4 + [272]), ($4 + [16]))
	$9 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($9 == 0) ){ goto $label$83 }
	
.LABEL $label$84
	CALL _ZdlPv($9)
	
.LABEL $label$83
	$9 = ($4 + [104])
	$7 = *($9)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$86 }
	$7 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4 + [88]), *(($4 + [96])), (int_64)-3617169328673128448, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$87 }
	CALL $12(($4 + [88]), $5)
	*($4 + [276]) = [0]
	*($4 + [272]) = ($4 + [88])
	$7 = *(*(CALL $13(($4 + [272])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$87
	*(($4 + [104])) = $7
	
.LABEL $label$86
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [8970])
	$18 = *($9)
	if ( ((int_64)$18 != (int_64)0) ){ goto $label$88 }
	CALL eosio_assert([1], [8970])
	$18 = *(($4 + [104]))
	
.LABEL $label$88
	$7 = *($0)
	CALL eosio_assert(((int_64)*($4 + [88]) == (int_64)CALL eosio_assert0()), [9124])
	*(($9 = CALL _Znwj([88])) + [68]) = ($4 + [88])
	*($9) = $18
	*($9 + [16]) = $8
	*($9 + [24]) = $1
	*($9 + [48]) = $10
	*($9 + [56]) = $6
	*($9 + [64]) = $16
	*($9 + [8]) = *($4 + [128])
	*($9 + [32]) = *($2)
	*(($9 + [40])) = *(($2 + [8]))
	*($4 + [40]) = (($4 + [272]) + [65])
	*($4 + [36]) = ($4 + [272])
	*($4 + [32]) = ($4 + [272])
	CALL $14(($4 + [32]), $9)
	$8 = *($9)
	$5 = (($4 + [88]) + [8])
	*($9 + [72]) = CALL db_store_i64(*($5), (int_64)-3617169328673128448, $7, $8, ($4 + [272]), [65])
	$11 = ($4 + [104])
	if ( (uint_64)($8 <= *($11)) ){ goto $label$89 }
	*($11) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$89
	$8 = *($9)
	$10 = *($5)
	*($4 + [16]) = *(($9 + [24]))
	*($9 + [76]) = CALL db_idx64_store($10, (int_64)-3617169328673128448, $7, $8, ($4 + [16]))
	$8 = *($9)
	$10 = *($5)
	*($4 + [16]) = *(($9 + [8]))
	*($9 + [80]) = CALL db_idx64_store($10, (int_64)-3617169328673128447, $7, $8, ($4 + [16]))
	*($4 + [32]) = $9
	$8 = *($9)
	*($4 + [272]) = $8
	$11 = *(($9 + [72]))
	*($4 + [16]) = $11
	$12 = ($4 + [116])
	$5 = *($12)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [120]))) ){ goto $label$92 }
	*($5 + [8]) = $8
	*($5 + [16]) = $11
	*($4 + [32]) = [0]
	*($5) = $9
	*($12) = ($5 + [24])
	$9 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( $9 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	CALL $15((($4 + [88]) + [24]), ($4 + [32]), ($4 + [272]), ($4 + [16]))
	$9 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($9 == 0) ){ goto $label$90 }
	
.LABEL $label$91
	CALL _ZdlPv($9)
	
.LABEL $label$90
	$6 = *(($2 + [8]))
	$20 = ((float_64)(CASTING float_64)(int_64 *($2)) * (float_64)(float_64)0.015)
	if ( ((float_64)(float_64)|$20| < (float_64)(float_64)9223372036854775808) ){ goto $label$94 }
	$7 = (int_64)-9223372036854775808
	goto $label$93 
	
.LABEL $label$94
	$7 = (Rounds 0)($20)
	
.LABEL $label$93
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8738])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$97:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$96 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$98 }
	$8 = $10
	$5 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$97 }
	goto $label$95 
	
.LABEL $label$98
	$8 = $10
	
.LOOP $label$99:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$96 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $5 ){ goto $label$99 }
	$5 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$97 }
	goto $label$95 
	
.LABEL $label$96
	$5 = [0]
	
.LABEL $label$95
	CALL eosio_assert($5, [8787])
	*($4 + [24]) = (int_64)3617214756542218240
	*($4 + [16]) = *($0)
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$9 = CALL $54([8453])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$102 }
	*($4) = ($9 << [1])
	$5 = ($4 | [1])
	if ( $9 ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$102
	$11 = (($9 + [16]) & [-16])
	$5 = CALL _Znwj($11)
	*($4) = ($11 | [1])
	*($4 + [8]) = $5
	*($4 + [4]) = $9
	
.LABEL $label$101
	CALL memcpy($5, [8453], $9)
	
.LABEL $label$100
	*(($5 + $9)) = [0]
	*(($4 + [296])) = $6
	$9 = ($4 + [8])
	*(($4 + [312])) = *($9)
	*($9) = [0]
	*($4 + [280]) = (int_64)-260984680305891200
	*($4 + [288]) = $7
	*($4 + [272]) = *($0)
	*($4 + [304]) = *($4)
	*($4) = (int_64)0
	$9 = CALL $5(($4 + [32]), ($4 + [16]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($4 + [272]))
	CALL $6(($4 + [352]), $9)
	$5 = *($4 + [352])
	CALL send_inline($5, (*($4 + [356]) - $5))
	$5 = *($4 + [352])
	if ( ($5 == 0) ){ goto $label$103 }
	*($4 + [356]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$103
	$5 = *($9 + [28])
	if ( ($5 == 0) ){ goto $label$104 }
	*(($9 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$104
	$5 = *($9 + [16])
	if ( ($5 == 0) ){ goto $label$105 }
	*(($9 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$105
	if ( ((*(($4 + [304])) & [1]) == 0) ){ goto $label$106 }
	CALL _ZdlPv(*(($4 + [312])))
	
.LABEL $label$106
	if ( ((*($4) & [1]) == 0) ){ goto $label$107 }
	CALL _ZdlPv(*(($4 + [8])))
	
.LABEL $label$107
	$8 = *($2)
	$9 = CALL $54([8521])
	$5 = ($9 <= [8])
	$20 = ((float_64)(CASTING float_64)(int_64 $8) * (float_64)(float_64)0.2)
	if ( ((float_64)(float_64)|$20| < (float_64)(float_64)9223372036854775808) ){ goto $label$109 }
	$6 = (int_64)-9223372036854775808
	if ( ($5 == 0) ){ goto $label$108 }
	goto $label$29 
	
.LABEL $label$109
	$6 = (Rounds 0)($20)
	if ( $5 ){ goto $label$29 }
	
.LABEL $label$108
	CALL eosio_assert([0], [8640])
	goto $label$28 
	
.LABEL $label$66
	CALL $40(($4 + [168]))
	
.LABEL $label$30
	CALL $40(($4 + [16]))
	
.LABEL $label$29
	if ( $9 ){ goto $label$28 }
	$10 = (int_64)0
	goto $label$27 
	
.LABEL $label$28
	$8 = (int_64)0
	
.LOOP $label$110:
	$5 = *(($9 + [8520]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$111 }
	CALL eosio_assert([0], [8685])
	
.LABEL $label$111
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$110 }
	$10 = ((int_64)$8 << (int_64)8)
	
.LABEL $label$27
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8738])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = ((int_64)$10 | (int_64)4)
	$9 = [0]
	
.LOOP $label$114:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$113 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$115 }
	$8 = $10
	$5 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$114 }
	goto $label$112 
	
.LABEL $label$115
	$8 = $10
	
.LOOP $label$116:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$113 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $5 ){ goto $label$116 }
	$5 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$114 }
	goto $label$112 
	
.LABEL $label$113
	$5 = [0]
	
.LABEL $label$112
	CALL eosio_assert($5, [8787])
	*($4 + [24]) = (int_64)3617214756542218240
	*($4 + [16]) = (int_64)-260984679989122624
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$9 = CALL $54([8453])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$119 }
	*($4) = ($9 << [1])
	$5 = ($4 | [1])
	if ( $9 ){ goto $label$118 }
	goto $label$117 
	
.LABEL $label$119
	$11 = (($9 + [16]) & [-16])
	$5 = CALL _Znwj($11)
	*($4) = ($11 | [1])
	*($4 + [8]) = $5
	*($4 + [4]) = $9
	
.LABEL $label$118
	CALL memcpy($5, [8453], $9)
	
.LABEL $label$117
	*(($5 + $9)) = [0]
	*(($4 + [296])) = $7
	$9 = ($4 + [8])
	*(($4 + [312])) = *($9)
	*($9) = [0]
	*($4 + [280]) = $1
	*($4 + [272]) = (int_64)-260984679989122624
	*($4 + [288]) = $6
	*($4 + [304]) = *($4)
	*($4) = (int_64)0
	$9 = CALL $5(($4 + [32]), ($4 + [16]), (int_64)-260984679985572560, (int_64)-3617168760277827584, ($4 + [272]))
	CALL $6(($4 + [352]), $9)
	$5 = *($4 + [352])
	CALL send_inline($5, (*($4 + [356]) - $5))
	$5 = *($4 + [352])
	if ( ($5 == 0) ){ goto $label$120 }
	*($4 + [356]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$120
	$5 = *($9 + [28])
	if ( ($5 == 0) ){ goto $label$121 }
	*(($9 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$121
	$5 = *($9 + [16])
	if ( ($5 == 0) ){ goto $label$122 }
	*(($9 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$122
	if ( (*(($4 + [304])) & [1]) ){ goto $label$124 }
	if ( (*($4) & [1]) ){ goto $label$123 }
	goto $label$25 
	
.LABEL $label$124
	CALL _ZdlPv(*(($4 + [312])))
	if ( ((*($4) & [1]) == 0) ){ goto $label$25 }
	
.LABEL $label$123
	CALL _ZdlPv(*(($4 + [8])))
	$11 = *($4 + [112])
	if ( $11 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	CALL $40($4)
	
.LABEL $label$25
	$11 = *($4 + [112])
	if ( ($11 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$12 = ($4 + [116])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$22 }
	
.LOOP $label$125:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$126 }
	CALL _ZdlPv($5)
	
.LABEL $label$126
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$125 }
	$9 = *(($4 + [112]))
	*($12) = $11
	CALL _ZdlPv($9)
	$11 = *($4 + [208])
	if ( $11 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$11 = *($4 + [208])
	if ( ($11 == 0) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$22
	*($12) = $11
	CALL _ZdlPv($11)
	$11 = *($4 + [208])
	if ( ($11 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$12 = ($4 + [212])
	$9 = *($12)
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$128 }
	
.LOOP $label$129:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$130 }
	CALL _ZdlPv($5)
	
.LABEL $label$130
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$129 }
	$9 = *(($4 + [208]))
	goto $label$127 
	
.LABEL $label$128
	$9 = $11
	
.LABEL $label$127
	*($12) = $11
	CALL _ZdlPv($9)
	$9 = [1]
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$9 = [1]
	if ( (*($4 + [152]) & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( (*($4 + [168]) & $9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*(($4 + [160])))
	if ( ((*($4 + [168]) & $9) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*($4 + [176]))
	$9 = [1]
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$9 = [1]
	if ( (*($4 + [240]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($4 + [256]) & $9) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($4 + [248])))
	if ( ((*($4 + [256]) & $9) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($4 + [264]))
	$global$0 = ($4 + [368])
	return 
	
.LABEL $label$12
	$global$0 = ($4 + [368])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	$6 = [0]
	$8 = ($7 & [1])
	$7 = *($2)
	$7 = ( *($2 + [4]) ? uint_32($7 >> [1]) : $8 )
	if ( ($7 == 0) ){ goto $label$1 }
	$6 = ( *($1 + [4]) ? uint_32($6 >> [1]) : $9 )
	$6 = *($1)
	$9 = ($6 & [1])
	$10 = ( *($1 + [8]) ? ($1 + [1]) : $9 )
	$9 = ($10 + $6)
	if ( ((int_32)$6 < (int_32)$7) ){ goto $label$3 }
	$11 = ( *($2 + [8]) ? ($2 + [1]) : $8 )
	$12 = *($11)
	$8 = $10
	
.LOOP $label$4:
	$6 = (($6 - $7) + [1])
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = CALL $52($8, $12, $6)
	if ( ($6 == 0) ){ goto $label$3 }
	if ( (CALL $53($6, $11, $7) == 0) ){ goto $label$2 }
	$8 = ($6 + [1])
	$6 = ($9 - $8)
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$4 }
	
.LABEL $label$3
	$6 = $9
	
.LABEL $label$2
	$6 = ( [-1] ? ($6 - $10) : ((int_32)$6 == (int_32)$9) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[-1]), [8562])
	$7 = *($2)
	$8 = ($2 + [4])
	$7 = CALL $42(($4 + [16]), $1, (( *($8) ? uint_32($7 >> [1]) : ($7 & [1]) ) + $6), [2], $1)
	$9 = *($4 + [16])
	$12 = CALL $54([8583])
	if ( ((int_32)$12 != (int_32)( *($7 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$5 }
	$5 = (CALL $46($7, [0], [-1], [8583], $12) == 0)
	
.LABEL $label$5
	CALL eosio_assert($5, [8586])
	$2 = *($2)
	$6 = (($6 + ( *($8) ? uint_32($2 >> [1]) : ($2 & [1]) )) + [2])
	$2 = CALL $45($1, [93], $6)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8606])
	CALL $42($4, $1, $6, ($2 - $6), $1)
	if ( (*($3) & [1]) ){ goto $label$7 }
	*($3) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*($3 + [8])) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$6
	CALL $43($3, [0])
	*($3) = *($4)
	*(($3 + [8])) = *(($4 + [8]))
	$6 = *($3)
	CALL eosio_assert(((int_32)( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) != (int_32)[0]), [8625])
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$8
	$global$0 = ($4 + [32])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $47($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8964])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8964])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8964])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $27(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [49]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8964])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8877])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $57($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [32]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [68]) = $0
	CALL $29(($3 + [32]), $5)
	*($5 + [72]) = $1
	*($5 + [76 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $60($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [72]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9076])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3617169328673128448)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9022])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9022])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $12(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $55(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9180])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $55(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $60($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $57($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9180])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $57($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $31($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $43($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $43($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $40($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9175])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $16($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8900])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $59($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8231])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9192]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9196])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9192]) = [1]
	$2 = ($2 << [16])
	*([0] + [9196]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9196])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9196]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9192]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9192]) = [1]
	$3 = ($3 << [16])
	*([0] + [9196]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9196])
	
.LABEL $label$10
	*([0] + [9196]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $60($0)
	
.LABEL $label$1
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $48())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $56($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $57($1)
	
.LABEL $label$2
	*(CALL $48()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $57(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $60($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $57 (int_32 $0)
{
	return CALL $58([9200], $0)
}