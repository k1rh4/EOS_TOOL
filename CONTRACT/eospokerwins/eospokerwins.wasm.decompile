(data (i32.const 8192) "Invalid hex character\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8223) "Action does not exist\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8336) "Contract has already been initialized\00")
(data (i32.const 8374) "Initialize the contract first\00")
(data (i32.const 8404) "Setting is not changed\00")
(data (i32.const 8427) "Ping record already exists\00")
(data (i32.const 8454) "Ping record does not exist\00")
(data (i32.const 8481) "Blackjack config has already been initialized\00")
(data (i32.const 8527) "Blackjack config has not been initialized\00")
(data (i32.const 8569) "Invalid bet amount range\00")
(data (i32.const 8594) "Token already exists\00")
(data (i32.const 8615) "Token does not exist\00")
(data (i32.const 8636) "Bet range is not being changed\00%lu\00")
(data (i32.const 8671) "Game not found\00")
(data (i32.const 8686) "Game id mismatch\00")
(data (i32.const 8703) "The game has already ended\00")
(data (i32.const 8730) "The hand requested does not exist\00")
(data (i32.const 8764) "Hand already ended\00")
(data (i32.const 8783) "Please end the previous hand first\00")
(data (i32.const 8818) "No hit after doubling bet\00")
(data (i32.const 8844) "Please wait for the initial cards\00")
(data (i32.const 8878) "Card already requested. Please wait patiently\00")
(data (i32.const 8924) "Player already chose to stand\00")
(data (i32.const 8954) "Wrong slot requested\00")
(data (i32.const 8975) "Player already has a hand of 21\00")
(data (i32.const 9007) "No stand after doubling bet\00: no conversion\00")
(data (i32.const 9051) "Card requested. Cannot stand now\00: out of range\00")
(data (i32.const 9099) "Stand request already received. Please wait patiently\00")
(data (i32.const 9153) "Cannot surrender after split\00")
(data (i32.const 9182) "Surrender only with two cards\00")
(data (i32.const 9212) "Cannot surrender after hit\00")
(data (i32.const 9239) "Cannot surrender after stand\00")
(data (i32.const 9268) "Cannot surrender after buying insurance\00")
(data (i32.const 9308) "Cannot surrender after doubling down\00")
(data (i32.const 9345) "Already surrendered\00")
(data (i32.const 9365) "Player has more than one hand\00")
(data (i32.const 9395) "Cards have been dealt\00")
(data (i32.const 9417) "Hand not found\00")
(data (i32.const 9432) "Split deal only on hands with one card\00")
(data (i32.const 9471) "Split deal only on hands with same value cards\00")
(data (i32.const 9518) "Spliting aces. Use endgame instead\00")
(data (i32.const 9553) "Player didn\'t hit or double down\00")
(data (i32.const 9586) "Invalid dealing slot\00")
(data (i32.const 9607) "Game already ended\00")
(data (i32.const 9626) "Player seed mismatch\00")
(data (i32.const 9647) "Dealer seed hash mismatch\00")
(data (i32.const 9673) "Dealer seed hash verification failed\00")
(data (i32.const 9710) "Player card mismatch\00")
(data (i32.const 9731) "Dealer card mismatch\00")
(data (i32.const 9752) "no balance object found\00")
(data (i32.const 9776) "Hand bet amount mismatch\00")
(data (i32.const 9801) "Payout amount mismatch\00")
(data (i32.const 9824) "Bet amount mismatch\00")
(data (i32.const 9844) "Thanks for playing EOS Poker at https://eospoker.win, The FIRST EVER provably fair blackjack game on EOS\00")
(data (i32.const 9949) "This is your referral reward! Play the FIRST EVER provably fair blackjack game on EOS: https://eospoker.win\00")
(data (i32.const 10057) "Game has already ended\00")
(data (i32.const 10080) "Token is not accepted\00")
(data (i32.const 10102) "Token symbol mismatch\00")
(data (i32.const 10124) "Initialize the game first\00")
(data (i32.const 10150) "newgame\00")
(data (i32.const 10158) "Invalid memo format\00")
(data (i32.const 10178) "Bet amount out of range\00")
(data (i32.const 10202) "Invalid action\00")
(data (i32.const 10217) "Referrer account does not exist\00")
(data (i32.const 10249) "Player seed must be of length 20\00")
(data (i32.const 10282) "Player seed must be an alphanumeric string\00")
(data (i32.const 10325) "Dealer seed must be of length 64\00")
(data (i32.const 10358) "The player has an unfinished game\00")
(data (i32.const 10392) "split\00")
(data (i32.const 10398) "An identical bet is required for splitting\00")
(data (i32.const 10441) "Split is only available when you have two cards\00")
(data (i32.const 10489) "Card requested. Cannot split now\00")
(data (i32.const 10522) "Split chance missed\00")
(data (i32.const 10542) "Split only on same value cards\00")
(data (i32.const 10573) "doubledown\00")
(data (i32.const 10584) "The game already ended\00")
(data (i32.const 10607) "Cannot double down after split\00")
(data (i32.const 10638) "The hand has already ended\00")
(data (i32.const 10665) "Double bet missed\00")
(data (i32.const 10683) "Player can only double with hand value of 9, 10, or 11\00")
(data (i32.const 10738) "Bet amount doubled already\00")
(data (i32.const 10765) "Additional amount must be the same as bet amount\00")
(data (i32.const 10814) "insurance\00")
(data (i32.const 10824) "Insurance offer missed\00")
(data (i32.const 10847) "No insurance offer available\00")
(data (i32.const 10876) "Insurance offer already taken\00")
(data (i32.const 10906) "Insurance amount must be half of bet amount\00")
(data (i32.const 10950) "Three card poker config has already been initialized\00")
(data (i32.const 11003) "The contract must be initialized first\00")
(data (i32.const 11042) "Game suspended\00")
(data (i32.const 11057) "The game is not initialized yet\00")
(data (i32.const 11089) "The last game has not yet ended\00")
(data (i32.const 11121) "Deal deadline missed. Refund the player instead.\00")
(data (i32.const 11170) "Cards have already been dealt\00")
(data (i32.const 11200) "Invalid card number\00")
(data (i32.const 11220) "Shuffled card mismatch\00")
(data (i32.const 11243) "Cards have been dealt. Cannot refund hand\00")
(data (i32.const 11285) "Incorrect game status\00")
(data (i32.const 11307) "Block prefix mismatch\00")
(data (i32.const 11329) "Cards size mismatch\00")
(data (i32.const 11349) "Game result already recorded\00")
(data (i32.const 11378) "Play deadline not reached\00")
(data (i32.const 11404) "not_implemented_exception\00")
(data (i32.const 11430) "Invalid jump id\00")
(data (i32.const 11446) "Game result not found\00")
(data (i32.const 11468) "Thanks for playing EOS Poker at https://eospoker.win, The FIRST EVER provably fair Three Card Poker game on EOS\00")
(data (i32.const 11580) "This is your referral reward! Play the FIRST EVER provably fair Three Card Poker game on EOS: https://eospoker.win\00")
(data (i32.const 11695) "Game not open\00")
(data (i32.const 11709) "bet\00")
(data (i32.const 11713) "Bet deadline missed. Wait for the next round\00")
(data (i32.const 11758) "Incorrect bet amount step\00")
(data (i32.const 11784) "Bet amount overflow\00")
(data (i32.const 11804) "Player already has an active hand\00")
(data (i32.const 11838) "play\00")
(data (i32.const 11843) "Play deadline missed. Automatically folded\00")
(data (i32.const 11886) "Player didn\'t place ante\00")
(data (i32.const 11911) "Play must match ante\00")
(data (i32.const 11932) "Play bet already placed\00")
(data (i32.const 11956) "Please wait for the cards\00")
(data (i32.const 11982) "Table bet limit exceeded\00")
(data (i32.const 12007) "Three card poker single player config has already been initialized\00")
(data (i32.const 12074) "Please wait for the player cards\00")
(data (i32.const 12107) "Played already. Cannot fold now\00")
(data (i32.const 12139) "Fold request already received\00")
(data (i32.const 12169) "Invalid card count\00")
(data (i32.const 12188) "Player cards already dealt\00")
(data (i32.const 12215) "Player didn\'t bet ante. Use tspsettle instead\00")
(data (i32.const 12261) "Player must either played or folded\00")
(data (i32.const 12297) "Insufficient cards shuffled\00")
(data (i32.const 12325) "Player cards mismatch\00")
(data (i32.const 12347) "Game has not been initialized\00")
(data (i32.const 12377) "Player has an unfinished game\00")
(data (i32.const 12407) "Play request already received\00")
(data (i32.const 12437) "Folded already. Cannot play now\00")
(data (i32.const 12469) "Unknown game name\00")
(data (i32.const 12487) "bj\00")
(data (i32.const 12490) "tcp\00")
(data (i32.const 12494) "tcpsp\00")
(data (i32.const 12500) "EOS\00")
(data (i32.const 12504) "POKER\00")
(data (i32.const 12510) "string is too long to be a valid symbol_code\00")
(data (i32.const 12555) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 12608) "The token contract does not exist\00")
(data (i32.const 12642) "The token does not exist\00")
(data (i32.const 12667) "error reading iterator\00")
(data (i32.const 12690) "read\00")
(data (i32.const 12695) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 12744) "invalid symbol name\00")
(data (i32.const 12764) "divide by zero\00")
(data (i32.const 12779) "signed division overflow\00")
(data (i32.const 12804) "multiplication overflow\00")
(data (i32.const 12828) "multiplication underflow\00")
(data (i32.const 12853) "attempt to add asset with different symbol\00")
(data (i32.const 12896) "addition underflow\00")
(data (i32.const 12915) "addition overflow\00")
(data (i32.const 12933) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 12992) "write\00")
(data (i32.const 12998) "attempt to subtract asset with different symbol\00")
(data (i32.const 13046) "subtraction underflow\00")
(data (i32.const 13068) "subtraction overflow\00")
(data (i32.const 13089) "type mismatch\00")
(data (i32.const 13103) "string is too long to be a valid name\00")
(data (i32.const 13141) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 13208) "character is not in allowed character set for names\00")
(data (i32.const 13260) "Heart A\00")
(data (i32.const 13268) "Heart 2\00")
(data (i32.const 13276) "Heart 3\00")
(data (i32.const 13284) "Heart 4\00")
(data (i32.const 13292) "Heart 5\00")
(data (i32.const 13300) "Heart 6\00")
(data (i32.const 13308) "Heart 7\00")
(data (i32.const 13316) "Heart 8\00")
(data (i32.const 13324) "Heart 9\00")
(data (i32.const 13332) "Heart 10\00")
(data (i32.const 13341) "Heart J\00")
(data (i32.const 13349) "Heart Q\00")
(data (i32.const 13357) "Heart K\00")
(data (i32.const 13365) "Diamond A\00")
(data (i32.const 13375) "Diamond 2\00")
(data (i32.const 13385) "Diamond 3\00")
(data (i32.const 13395) "Diamond 4\00")
(data (i32.const 13405) "Diamond 5\00")
(data (i32.const 13415) "Diamond 6\00")
(data (i32.const 13425) "Diamond 7\00")
(data (i32.const 13435) "Diamond 8\00")
(data (i32.const 13445) "Diamond 9\00")
(data (i32.const 13455) "Diamond 10\00")
(data (i32.const 13466) "Diamond J\00")
(data (i32.const 13476) "Diamond Q\00")
(data (i32.const 13486) "Diamond K\00")
(data (i32.const 13496) "Club A\00")
(data (i32.const 13503) "Club 2\00")
(data (i32.const 13510) "Club 3\00")
(data (i32.const 13517) "Club 4\00")
(data (i32.const 13524) "Club 5\00")
(data (i32.const 13531) "Club 6\00")
(data (i32.const 13538) "Club 7\00")
(data (i32.const 13545) "Club 8\00")
(data (i32.const 13552) "Club 9\00")
(data (i32.const 13559) "Club 10\00")
(data (i32.const 13567) "Club J\00")
(data (i32.const 13574) "Club Q\00")
(data (i32.const 13581) "Club K\00")
(data (i32.const 13588) "Spade A\00")
(data (i32.const 13596) "Spade 2\00")
(data (i32.const 13604) "Spade 3\00")
(data (i32.const 13612) "Spade 4\00")
(data (i32.const 13620) "Spade 5\00")
(data (i32.const 13628) "Spade 6\00")
(data (i32.const 13636) "Spade 7\00")
(data (i32.const 13644) "Spade 8\00")
(data (i32.const 13652) "Spade 9\00")
(data (i32.const 13660) "Spade 10\00")
(data (i32.const 13669) "Spade J\00")
(data (i32.const 13677) "Spade Q\00")
(data (i32.const 13685) "Spade K\00")
(data (i32.const 13693) "Unknown\00")
(data (i32.const 13701) "Straight Flush\00")
(data (i32.const 13716) "Three of a Kind\00")
(data (i32.const 13732) "Straight\00")
(data (i32.const 13741) "Flush\00")
(data (i32.const 13747) "Pair\00")
(data (i32.const 13752) "High Card\00")
(data (i32.const 13762) "get\00")
(data (i32.const 13766) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 13817) "cannot pass end iterator to modify\00")
(data (i32.const 13852) "object passed to modify is not in multi_index\00")
(data (i32.const 13898) "cannot modify objects in table of another contract\00")
(data (i32.const 13949) "updater cannot change primary key when modifying an object\00")
(data (i32.const 14008) "cannot create objects in table of another contract\00")
(data (i32.const 14059) "singleton does not exist\00")
(data (i32.const 14084) "cannot pass end iterator to erase\00")
(data (i32.const 14118) "cannot increment end iterator\00")
(data (i32.const 14148) "object passed to erase is not in multi_index\00")
(data (i32.const 14193) "cannot erase objects in table of another contract\00")
(data (i32.const 14243) "attempt to remove object that was not in multi_index\00")
(data (i32.const 14296) "The player has a blackjack. Use endgame action instead\00")
(data (i32.const 14351) "Game ended. Use endgame instead\00")
(data (i32.const 22800) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 22880) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$6 (result i64)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$9 (param i64)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "sha256" (func $fimport$12 (param i32 i32 i32)))
(import "env" "__multi3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "current_time" (func $fimport$14 (result i64)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(import "env" "tapos_block_prefix" (func $fimport$16 (result i32)))
(import "env" "send_deferred" (func $fimport$17 (param i32 i64 i32 i32 i32)))
(import "env" "is_account" (func $fimport$18 (param i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $2))
(export "_ZdlPv" (func $253))
(export "_Znwj" (func $251))
(export "_Znaj" (func $252))
(export "_ZdaPv" (func $254))
(export "_ZnwjSt11align_val_t" (func $255))
(export "_ZnajSt11align_val_t" (func $256))
(export "_ZdlPvSt11align_val_t" (func $257))
(export "_ZdaPvSt11align_val_t" (func $258))
(table $0 37 37 anyfunc)
(elem (i32.const 1) $3 $8 $10 $12 $14 $16 $18 $20 $22 $24 $25 $27 $28 $30 $32 $34 $36 $38 $39 $41 $42 $43 $45 $47 $48 $50 $51 $52 $53 $55 $57 $58 $59 $60 $281 $283)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 23137))
(global $global$2 i32 (i32.const 23137))


void .FUNC $220 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $91(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [12690])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	CALL $91(*($1), *($0 + [24]))
	CALL $221(*($1), *($0 + [28]))
	CALL $153(*($1), *($0 + [32]))
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [12690])
	CALL memcpy(($2 + [7]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [7]) != (int_32)[0])
	$0 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $284 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $280([36], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $285 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $226(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $295($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $163(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [13103])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [13208])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [13141])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [13208])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = ((int_64)*(*($3)) + (int_64)1)
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$4 = *($0)
	$5 = *($3 + [12])
	*(($1 + [40])) = *(($5 + [16]))
	*(($1 + [32])) = *(($5 + [8]))
	*($1 + [24]) = *($5)
	$6 = ($1 + [48])
	CALL $262($6, *($3 + [16]))
	$3 = *($3 + [20])
	*($1 + [64]) = *($3)
	*(($1 + [88])) = *(($3 + [24]))
	*(($1 + [80])) = *(($3 + [16]))
	*(($1 + [72])) = *(($3 + [8]))
	*(((($3 = $2) + [32]) + [16])) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [56]) = [0]
	*($3 + [64]) = (int_64)0
	*($3 + [32]) = (int_64)1
	$5 = *(($1 + [112]))
	if ( ((int_32)$5 == (int_32)*(($1 + [116]))) ){ goto $label$4 }
	*(($5 + [12])) = (int_64)0
	*($5 + [8]) = [0]
	*($5) = (int_64)1
	$7 = *($3 + [40])
	$8 = (*((($3 + [32]) + [12])) - $7)
	if ( ($8 == 0) ){ goto $label$5 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$3 }
	$9 = CALL _Znwj($8)
	*(($5 + [8])) = $9
	*(($5 + [16])) = ($9 + $8)
	*(($8 = ($5 + [12]))) = $9
	$7 = *((($3 + [32]) + [8]))
	$10 = (*((($3 + [32]) + [12])) - $7)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($9, $7, $10)
	*($8) = (*($8) + $10)
	
.LABEL $label$5
	$8 = ($3 + [52])
	*($5 + [20 align=4]) = *($8)
	*(($5 + [36])) = *(($8 + [16]))
	*(($5 + [28])) = *(($8 + [8]))
	*(($5 = ($1 + [112]))) = (*($5) + [40])
	$8 = ($1 + [64])
	$9 = ($1 + [24])
	if ( ($7 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL $232(($1 + [108]), ($3 + [32]))
	$8 = ($1 + [64])
	$9 = ($1 + [24])
	$7 = *((($3 + [32]) + [8]))
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $276(($5 + [8]))
	
.LABEL $label$2
	*(($3 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$1
	*($3 + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	*($3 + [44]) = $9
	*($3 + [48]) = $6
	*($3 + [52]) = $8
	*($3 + [32]) = $1
	$10 = ($1 + [8])
	*($3 + [36]) = $10
	$11 = ($1 + [16])
	*($3 + [40]) = $11
	$12 = ($1 + [96])
	*($3 + [56]) = $12
	$13 = ($1 + [108])
	*($3 + [60]) = $13
	$14 = ($1 + [120])
	*($3 + [64]) = $14
	$15 = ($1 + [132])
	*($3 + [68]) = $15
	$16 = ($1 + [136])
	*($3 + [72]) = $16
	CALL $224(($3 + [32]), ($3 + [8]))
	$7 = *($3 + [24])
	if ( ($7 <= [513]) ){ goto $label$7 }
	$5 = CALL $295($7)
	goto $label$6 
	
.LABEL $label$7
	$5 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$6
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $7)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $10
	*($3 + [32]) = $1
	*($3 + [40]) = $11
	*($3 + [44]) = $9
	*($3 + [48]) = $6
	*($3 + [52]) = $8
	*($3 + [56]) = $12
	*($3 + [60]) = $13
	*($3 + [64]) = $14
	*($3 + [68]) = $15
	*($3 + [72]) = $16
	CALL $225(($3 + [32]), ($3 + [24]))
	$17 = *($1)
	*($1 + [148]) = CALL db_store_i64(*($4 + [8]), (int_64)4312312276611760128, *(*($0 + [8])), $17, $5, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$17 >= (uint_64)*($4 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $298($5)
	if ( (uint_64)($17 <= *($4 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$17 + (int_64)1) : ((uint_64)$17 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [80])
	(unreachable)
}

void .FUNC $170 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [14008])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	CALL eosio_assert([1], [12992])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4310307329183580160, $2, (int_64)4310307329183580160, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4310307329183580160) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4310307329183580161
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)4310307329183580160
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4310307329183580160
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $218(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

int_32 .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $195(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $196(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [12690])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [12690])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $230(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [272])
	$global$0 = $5
	if ( ((int_64)*($0 + [200]) == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$2 }
	*(($5 + [264])) = [0]
	*($5 + [240]) = $2
	*($5 + [232]) = $2
	*($5 + [248]) = (int_64)-1
	*($5 + [256]) = (int_64)0
	$6 = [0]
	$7 = CALL db_find_i64($2, $2, (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $62(($5 + [232]), $7)
	CALL eosio_assert(((int_32)*($6 + [4]) == (int_32)($5 + [232])), [13766])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8374])
	CALL eosio_assert(((CALL $64(($5 + [232])) | ((int_64)*($0 + [216]) == (int_64)$1)) & [1]), [11042])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$7 }
	$8 = [-1]
	$7 = uint_32($6 >> [1])
	if ( ($7 == 0) ){ goto $label$4 }
	$9 = ($4 + [1])
	$6 = [0]
	$10 = (*(($0 + [128])) & [255])
	
.LOOP $label$8:
	if ( ((int_32)*(($9 + $6)) == (int_32)$10) ){ goto $label$6 }
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$7
	$8 = [-1]
	$7 = *($4 + [4])
	if ( ($7 == 0) ){ goto $label$4 }
	$9 = *(($4 + [8]))
	$6 = [0]
	$10 = (*(($0 + [128])) & [255])
	
.LOOP $label$9:
	if ( ((int_32)*(($9 + $6)) == (int_32)$10) ){ goto $label$5 }
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$9 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $6
	goto $label$4 
	
.LABEL $label$5
	$8 = $6
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$8 != (int_32)[-1]), [10158])
	$10 = CALL $261(($5 + [216]), $4, [0], $8, $4)
	$11 = CALL $261(($5 + [200]), $4, ($8 + [1]), [-1], $4)
	$6 = ($6 & [1])
	$6 = *($0 + [28])
	$9 = ($8 & [1])
	$8 = *($5 + [216])
	$7 = uint_32($8 >> [1])
	$12 = *($10 + [4])
	$13 = ( $12 ? $7 : $9 )
	if ( ((int_32)$13 != (int_32)( *(($0 + [32])) ? uint_32($6 >> [1]) : $6 )) ){ goto $label$22 }
	$6 = ( *(($0 + [36])) ? (($0 + [28]) + [1]) : $6 )
	$4 = ($10 + [1])
	if ( $9 ){ goto $label$23 }
	if ( ($13 == 0) ){ goto $label$21 }
	$9 = ([0] - $7)
	
.LOOP $label$24:
	if ( ((int_32)*($4) != (int_32)*($6)) ){ goto $label$22 }
	$6 = ($6 + [1])
	$4 = ($4 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$24 }
	goto $label$21 
	
.LABEL $label$23
	if ( ($13 == 0) ){ goto $label$21 }
	if ( (CALL $291(( *($10 + [8]) ? $4 : $9 ), $6, $13) == 0) ){ goto $label$21 }
	$8 = *($5 + [216])
	$7 = uint_32($8 >> [1])
	$12 = *(($10 + [4]))
	
.LABEL $label$22
	$6 = ($6 & [1])
	$6 = *($0 + [40])
	$9 = ($8 & [1])
	$13 = ( $12 ? $7 : $9 )
	if ( ((int_32)$13 != (int_32)( *(($0 + [44])) ? uint_32($6 >> [1]) : $6 )) ){ goto $label$19 }
	$4 = ( *(($0 + [48])) ? (($0 + [40]) + [1]) : $6 )
	if ( $9 ){ goto $label$20 }
	if ( ($13 == 0) ){ goto $label$18 }
	$9 = (($5 + [216]) | [1])
	$6 = [0]
	
.LOOP $label$25:
	if ( ((int_32)*(($9 + $6)) != (int_32)*(($4 + $6))) ){ goto $label$19 }
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$25 }
	goto $label$18 
	
.LABEL $label$21
	*(($4 = (($5 + [176]) + [16]))) = *(($3 + [16]))
	*(($7 = (($5 + [176]) + [8]))) = *(($3 + [8]))
	*($5 + [176]) = *($3)
	$6 = CALL $260(($5 + [160]), $11)
	*((($5 + [8]) + [16])) = *($4)
	*((($5 + [8]) + [8])) = *($7)
	*($5 + [8]) = *($5 + [176])
	CALL $164($0, $1, $2, ($5 + [8]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($5 + [200]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$20
	if ( ($13 == 0) ){ goto $label$18 }
	if ( (CALL $291(( *($10 + [8]) ? ($10 + [1]) : $9 ), $4, $13) == 0) ){ goto $label$18 }
	$8 = *($5 + [216])
	$7 = uint_32($8 >> [1])
	$12 = *(($10 + [4]))
	
.LABEL $label$19
	$6 = ($6 & [1])
	$6 = *($0 + [52])
	$9 = ($8 & [1])
	$8 = ( $12 ? $7 : $9 )
	if ( ((int_32)$8 != (int_32)( *(($0 + [56])) ? uint_32($6 >> [1]) : $6 )) ){ goto $label$16 }
	$6 = ( *(($0 + [60])) ? (($0 + [52]) + [1]) : $6 )
	$4 = ($10 + [1])
	if ( $9 ){ goto $label$17 }
	if ( ($8 == 0) ){ goto $label$15 }
	
.LOOP $label$26:
	if ( ((int_32)*($4) != (int_32)*($6)) ){ goto $label$16 }
	$6 = ($6 + [1])
	$4 = ($4 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$26 }
	goto $label$15 
	
.LABEL $label$18
	*(($4 = (($5 + [136]) + [16]))) = *(($3 + [16]))
	*(($7 = (($5 + [136]) + [8]))) = *(($3 + [8]))
	*($5 + [136]) = *($3)
	$6 = CALL $260(($5 + [120]), $11)
	*((($5 + [32]) + [16])) = *($4)
	*((($5 + [32]) + [8])) = *($7)
	*($5 + [32]) = *($5 + [136])
	CALL $165($0, $1, $2, ($5 + [32]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($5 + [200]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$17
	if ( ($8 == 0) ){ goto $label$15 }
	if ( (CALL $291(( *($10 + [8]) ? $4 : $9 ), $6, $8) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL eosio_assert([0], [12469])
	goto $label$14 
	
.LABEL $label$15
	*(($4 = (($5 + [96]) + [16]))) = *(($3 + [16]))
	*(($7 = (($5 + [96]) + [8]))) = *(($3 + [8]))
	*($5 + [96]) = *($3)
	$6 = CALL $260(($5 + [80]), $11)
	*((($5 + [56]) + [16])) = *($4)
	*((($5 + [56]) + [8])) = *($7)
	*($5 + [56]) = *($5 + [96])
	CALL $166($0, $1, $2, ($5 + [56]), $6)
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($5 + [200]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$0 = [1]
	if ( (*($5 + [200]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($5 + [216]) & $0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($5 + [216]) & $0) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($10 + [8]))
	$4 = *($5 + [256])
	if ( ($4 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$10
	$4 = *($5 + [256])
	if ( $4 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($5 + [272])
	return 
	
.LABEL $label$1
	$7 = ($5 + [260])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$28 }
	
.LOOP $label$29:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$30 }
	CALL _ZdlPv($6)
	
.LABEL $label$30
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$29 }
	$0 = *(($5 + [256]))
	goto $label$27 
	
.LABEL $label$28
	$0 = $4
	
.LABEL $label$27
	*($7) = $4
	CALL _ZdlPv($0)
	$global$0 = ($5 + [272])
}

void .FUNC $246 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $178 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = ($1 + [108])
	$9 = (*(*($3)) + [-1])
	$8 = *($1 + [108])
	$7 = *(($1 + [112]))
	if ( ((uint_32)((int_32)($7 - $8) / (int_32)[40]) <= (uint_32)$9) ){ goto $label$3 }
	$3 = *(($3 + [4]))
	$10 = *($1)
	*(($8 = (($8 + ((int_32)$9 * (int_32)[40])) + [12]))) = (*($8) + [-1])
	if ( ((int_32)*(($1 + [116])) == (int_32)$7) ){ goto $label$5 }
	*(($7 + [12])) = (int_64)0
	*($7 + [8]) = [0]
	*($7) = *($3)
	$8 = (*(($3 + [12])) - *($3 + [8]))
	if ( ($8 == 0) ){ goto $label$6 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$9 = CALL _Znwj($8)
	*(($7 + [8])) = $9
	*(($7 + [16])) = ($9 + $8)
	*(($8 = ($7 + [12]))) = $9
	$11 = *(($3 + [8]))
	$12 = (*(($3 + [12])) - $11)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($9, $11, $12)
	*($8) = (*($8) + $12)
	
.LABEL $label$6
	*($7 + [20 align=4]) = *($3 + [20 align=4])
	*(($7 + [36])) = *(($3 + [36]))
	*(($7 + [28])) = *(($3 + [28]))
	*(($7 = ($1 + [112]))) = (*($7) + [40])
	goto $label$4 
	
.LABEL $label$5
	CALL $232($6, $3)
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$10 == (int_64)*($1)), [13949])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$8 = ($1 + [8])
	*($5 + [36]) = $8
	*($5 + [32]) = $1
	$9 = ($1 + [16])
	*($5 + [40]) = $9
	$12 = ($1 + [24])
	*($5 + [44]) = $12
	$11 = ($1 + [48])
	*($5 + [48]) = $11
	$13 = ($1 + [64])
	*($5 + [52]) = $13
	$14 = ($1 + [96])
	*($5 + [56]) = $14
	*($5 + [60]) = $6
	$15 = ($1 + [120])
	*($5 + [64]) = $15
	$16 = ($1 + [132])
	*($5 + [68]) = $16
	$17 = ($1 + [136])
	*($5 + [72]) = $17
	CALL $224(($5 + [32]), ($5 + [8]))
	$3 = *($5 + [24])
	if ( ($3 <= [513]) ){ goto $label$8 }
	$7 = CALL $295($3)
	goto $label$7 
	
.LABEL $label$8
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$7
	*($5 + [12]) = $7
	*($5 + [8]) = $7
	*($5 + [16]) = ($7 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $8
	*($5 + [40]) = $9
	*($5 + [44]) = $12
	*($5 + [48]) = $11
	*($5 + [52]) = $13
	*($5 + [56]) = $14
	*($5 + [60]) = $6
	*($5 + [64]) = $15
	*($5 + [68]) = $16
	*($5 + [72]) = $17
	*($5 + [32]) = $1
	CALL $225(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [148]), $2, $7, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$10 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$10
	CALL $298($7)
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return (unreachable)
	
.LABEL $label$3
	CALL $277($6)
	
.LABEL $label$2
	CALL $276(($7 + [8]))
	
.LABEL $label$1
	$global$0 = ($5 + [80])
	(unreachable)
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [264]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [264]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$3 = CALL $5(($4 + [40]), $0, $1, ($4 + [8]))
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [264])
	if ( ($5 & [1]) ){ goto $label$13 }
	CALL void $8((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL void $8((int_32 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [40]) & $2) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [272])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [36])))
	$global$0 = ($4 + [272])
	return $2
}

void .FUNC $276 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $221 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [13762])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$7 = *($1)
	$3 = *($1 + [4])
	$4 = ((int_32)($3 - $7) / (int_32)[40])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $222($1, ($8 - $4))
	$3 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$7 = ($7 + ((int_32)$8 * (int_32)[40]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = ($3 + [-40])
	$4 = *(($3 + [-32]))
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [-28])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$3 = $8
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $7
	$3 = $7
	
.LABEL $label$5
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($2 + [20])
	$7 = ($2 + [24])
	$6 = ($2 + [36])
	
.LOOP $label$9:
	*($2) = $0
	*($2 + [8]) = $8
	*((($2 + [8]) + [8])) = ($8 + [20])
	*($4) = ($8 + [21])
	*($7) = ($8 + [22])
	*((($2 + [8]) + [20])) = ($8 + [23])
	*((($2 + [8]) + [24])) = ($8 + [24])
	*($6) = ($8 + [25])
	*((($2 + [8]) + [32])) = ($8 + [32])
	*($2 + [12]) = ($8 + [8])
	CALL $223(($2 + [8]), $2)
	$8 = ($8 + [40])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return $0
}

int_32 .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($0) = $1
	*($0 + [8]) = $2
	$2 = *($3)
	*($0 + [16]) = $2
	$3 = *(($3 + [8]))
	*(($4 + [8])) = $3
	*(($0 + [24])) = $3
	*($4) = $2
	*(($0 + [36])) = [0]
	*($0 + [28 align=4]) = (int_64)0
	$5 = ($0 + [28])
	$3 = CALL $292([12487])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$7 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0 + [28]) = ($6 | [1])
	*(($0 + [36])) = $5
	*(($0 + [32])) = $3
	
.LABEL $label$6
	CALL memcpy($5, [12487], $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	*(($0 + [48])) = [0]
	*($0 + [40 align=4]) = (int_64)0
	$5 = ($0 + [40])
	$3 = CALL $292([12490])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$10 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0 + [40]) = ($6 | [1])
	*(($0 + [48])) = $5
	*(($0 + [44])) = $3
	
.LABEL $label$9
	CALL memcpy($5, [12490], $3)
	
.LABEL $label$8
	*(($5 + $3)) = [0]
	*(($0 + [60])) = [0]
	*($0 + [52 align=4]) = (int_64)0
	$5 = ($0 + [52])
	$3 = CALL $292([12494])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$13 }
	*($5) = ($3 << [1])
	$5 = ($5 + [1])
	if ( $3 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$6 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0 + [52]) = ($6 | [1])
	*(($0 + [60])) = $5
	*(($0 + [56])) = $3
	
.LABEL $label$12
	CALL memcpy($5, [12494], $3)
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	*($0 + [72]) = (int_64)1
	*($0 + [64]) = (int_64)2
	*($0 + [80]) = (int_64)5
	*($0 + [88]) = (int_64)2
	*($0 + [96]) = (int_64)2
	*($0 + [104]) = (int_64)1
	*($0 + [112]) = (int_64)2
	*($0 + [120]) = (int_64)1
	*($0 + [128]) = [45]
	*($0 + [132 align=4]) = (int_64)137438953482
	*($0 + [144]) = (int_64)2
	*($0 + [152]) = (int_64)1000
	*($0 + [160]) = (int_64)6138663591592764928
	$3 = CALL $292([12500])
	if ( ($3 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [12510])
	goto $label$15 
	
.LABEL $label$16
	if ( ($3 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$2 = (int_64)0
	
.LOOP $label$17:
	$5 = *(($3 + [12499]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [12555])
	
.LABEL $label$18
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$17 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$14
	$2 = (int_64)4
	goto $label$1 
	
.LABEL $label$4
	CALL $259($5)
	
.LABEL $label$3
	CALL $259($5)
	
.LABEL $label$2
	CALL $259($5)
	
.LABEL $label$1
	*($0 + [176]) = (int_64)6138787003766218032
	*($0 + [168]) = $2
	$3 = CALL $292([12504])
	if ( ($3 <= [8]) ){ goto $label$22 }
	CALL eosio_assert([0], [12510])
	goto $label$21 
	
.LABEL $label$22
	if ( ($3 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	$2 = (int_64)0
	
.LOOP $label$23:
	$5 = *(($3 + [12503]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$24 }
	CALL eosio_assert([0], [12555])
	
.LABEL $label$24
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$23 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$19 
	
.LABEL $label$20
	$2 = (int_64)4
	
.LABEL $label$19
	*($0 + [192]) = (int_64)6138787003771365024
	*($0 + [184]) = $2
	*($0 + [200]) = (int_64)6138787003765466880
	*($0 + [208]) = (int_64)6138787003765608176
	*($0 + [216]) = (int_64)6138600471510978384
	$global$0 = ($4 + [16])
	(unreachable)
	(unreachable)
	(unreachable)
	return $0
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = CALL _Znaj([3])
	$4 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$4) ){ goto $label$7 }
	$4 = *($4)
	$5 = ((uint_32)$4 % (uint_32)[13])
	$6 = ($5 + [1])
	*($2) = $6
	$7 = ((uint_32)$4 / (uint_32)[13])
	*($3) = $7
	$4 = *($1)
	$8 = ($1 + [4])
	if ( ((uint_32)(*($8) - $4) <= (uint_32)[1]) ){ goto $label$7 }
	$9 = *($4 + [1])
	$10 = ((uint_32)$9 % (uint_32)[13])
	$4 = ($10 + [1])
	*($2 + [1]) = $4
	$9 = ((uint_32)$9 / (uint_32)[13])
	*($3 + [1]) = $9
	$8 = *($1)
	if ( ((*($8) - $8) <= [3]) ){ goto $label$7 }
	$1 = *($8 + [2])
	$11 = ((uint_32)$1 / (uint_32)[13])
	*($3 + [2]) = $11
	$3 = ((uint_32)$1 % (uint_32)[13])
	$8 = ($3 + [1])
	*($2 + [2]) = $8
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$8 }
	$1 = $6
	$4 = $6
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ($10 == 0) ){ goto $label$9 }
	if ( ((uint_32)($10 & [255]) >= (uint_32)($5 & [255])) ){ goto $label$9 }
	
.LABEL $label$10
	*($2) = $4
	*(($2 + [1])) = $6
	$1 = $6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $4
	$4 = $6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL $277($1)
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$12 }
	if ( ($3 == 0) ){ goto $label$11 }
	if ( ((uint_32)($8 & [255]) >= (uint_32)($4 & [255])) ){ goto $label$11 }
	
.LABEL $label$12
	*($2) = $8
	*(($2 + [2])) = $4
	$3 = $8
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$11
	$3 = $4
	$4 = $8
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = $8
	$4 = $8
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = $1
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$14 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$13 }
	if ( ((uint_32)($4 & [255]) >= (uint_32)($1 & [255])) ){ goto $label$13 }
	
.LABEL $label$14
	*(($2 + [1])) = $4
	*(($2 + [2])) = $1
	$2 = $1
	goto $label$1 
	
.LABEL $label$13
	$2 = $4
	
.LABEL $label$2
	$4 = $1
	
.LABEL $label$1
	$6 = (((int_32)$7 == (int_32)$9) & ((int_32)$7 == (int_32)$11))
	$1 = [0]
	$7 = ($4 & [255])
	if ( ((int_32)(($3 & [255]) + [1]) != (int_32)$7) ){ goto $label$18 }
	$8 = $2
	if ( ((int_32)($7 + [1]) != (int_32)($2 & [255])) ){ goto $label$19 }
	$1 = [1]
	if ( ($6 == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$18 }
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$17 }
	if ( ((int_32)($3 & [255]) != (int_32)[12]) ){ goto $label$16 }
	$8 = [1]
	$1 = [1]
	if ( $6 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$18
	goto $label$16 
	
.LABEL $label$17
	$8 = [3]
	$1 = [1]
	if ( $6 ){ goto $label$15 }
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$20 }
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$20 }
	*($0) = [5]
	*($0 + [1]) = $3
	return 
	
.LABEL $label$20
	if ( ($1 == 0) ){ goto $label$21 }
	*($0) = [4]
	*($0 + [1]) = $8
	return 
	
.LABEL $label$21
	if ( ($6 == 0) ){ goto $label$22 }
	*($0) = [3]
	*($0 + [1]) = $2
	return 
	
.LABEL $label$22
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$23 }
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$23 }
	*($0) = [1]
	*($0 + [1]) = $2
	return 
	
.LABEL $label$23
	*($0) = [2]
	*($0 + [1]) = $4
	return 
	
.LABEL $label$15
	*($0) = [6]
	*($0 + [1]) = $8
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-3590905687705255936, (int_64)-3590905687705255936)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $146(($2 + [8]), $5) + [8]) == (int_32)($2 + [8])), [13766])
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [12007])
	*($2) = $1
	CALL $147(($2 + [8]), $2, *($0))
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $189 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	*($1) = *(*($3))
	CALL eosio_assert([1], [13949])
	CALL eosio_assert([1], [12992])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-3590905687705255936) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-3590905687705255935
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [112])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [116])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $49 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [416])
	$global$0 = $3
	*(($4 = $3) + [408]) = *($2)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($5)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*(($4 + [360])) = (int_64)0
	*(($4 + [352])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [376])) = (int_64)0
	*(($4 + [384])) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [276]) = $2
	*($4 + [272]) = $2
	*($4 + [280]) = ($2 + $5)
	*($4 + [24]) = ($4 + [272])
	*($4 + [48]) = ($4 + [288])
	CALL $116(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [280])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [272])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $5(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [408])
	CALL $117(($4 + [24]), ($4 + [288]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$15 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( (*($3 + [40]) & $2) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($3 + [28]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [36])))
	$5 = *($4 + [380])
	if ( ($5 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = *($4 + [380])
	if ( $5 ){ goto $label$7 }
	
.LABEL $label$8
	$3 = *(($4 + [368]))
	if ( ($3 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$7 = ($4 + [384])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$3 = ($2 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$19
	$2 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$18 }
	$3 = *(($4 + [380]))
	goto $label$16 
	
.LABEL $label$17
	$3 = $5
	
.LABEL $label$16
	*($7) = $5
	CALL _ZdlPv($3)
	$3 = *(($4 + [368]))
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [372])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((*($4 + [316]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($4 + [324])))
	
.LABEL $label$20
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($4 + [312])))
	
.LABEL $label$21
	$global$0 = ($4 + [416])
	return [1]
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$8 = ($global$0 - [256])
	$global$0 = $8
	CALL require_auth(*($0))
	$9 = [0]
	*((($8 + [168]) + [32])) = [0]
	*($8 + [184]) = (int_64)-1
	$10 = *($0)
	*($8 + [168]) = $10
	*($8 + [176]) = $10
	*($8 + [192]) = (int_64)0
	$11 = [0]
	$12 = CALL db_lowerbound_i64($10, $10, (int_64)-3612798081281556480, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $112(($8 + [168]), $12)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8671])
	CALL eosio_assert(((int_64)*($11) == (int_64)$1), [8686])
	CALL eosio_assert(((uint_64)CALL $fimport$14() <= (uint_64)*($11 + [24])), [11121])
	*((($8 + [128]) + [32])) = [0]
	*($8 + [136]) = $1
	*($8 + [144]) = (int_64)-1
	*($8 + [152]) = (int_64)0
	$10 = *($0)
	*($8 + [128]) = $10
	$11 = CALL db_find_i64($10, $1, (int_64)-3612780472452513792, $2)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	$9 = CALL $118(($8 + [128]), $11)
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)($8 + [128])), [13766])
	
.LABEL $label$2
	$13 = [0]
	$14 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($14, [9417])
	CALL eosio_assert(((int_32)*(($9 + [116])) == (int_32)*($9 + [112])), [11170])
	$15 = [0]
	$12 = ($11 & [1])
	$11 = *($3)
	$17 = ($11 & [1])
	$11 = *($9 + [64])
	$16 = uint_32($11 >> [1])
	$18 = ( *(($9 + [68])) ? $16 : $17 )
	if ( ((int_32)$18 != (int_32)( *($3 + [4]) ? uint_32($11 >> [1]) : $12 )) ){ goto $label$3 }
	$11 = (($9 + [64]) + [1])
	$12 = ( *($3 + [8]) ? ($3 + [1]) : $12 )
	if ( $17 ){ goto $label$6 }
	if ( ($18 == 0) ){ goto $label$5 }
	$17 = ([0] - $16)
	
.LOOP $label$7:
	if ( ((int_32)*($11) != (int_32)*($12)) ){ goto $label$4 }
	$15 = [1]
	$12 = ($12 + [1])
	$11 = ($11 + [1])
	$17 = ($17 + [1])
	if ( $17 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$6
	if ( ($18 == 0) ){ goto $label$5 }
	$15 = (CALL $291(( *(($9 + [72])) ? $11 : $17 ), $12, $18) == 0)
	goto $label$3 
	
.LABEL $label$5
	$15 = [1]
	goto $label$3 
	
.LABEL $label$4
	$15 = [0]
	
.LABEL $label$3
	CALL eosio_assert($15, [9626])
	if ( ((int_32)*($9 + [80]) != (int_32)*($5)) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [81])) & [255]) != (int_32)(*($5 + [1]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [82])) & [255]) != (int_32)(*($5 + [2]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [83])) & [255]) != (int_32)(*($5 + [3]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [84])) & [255]) != (int_32)(*($5 + [4]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [85])) & [255]) != (int_32)(*($5 + [5]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [86])) & [255]) != (int_32)(*($5 + [6]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [87])) & [255]) != (int_32)(*($5 + [7]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [88])) & [255]) != (int_32)(*($5 + [8]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [89])) & [255]) != (int_32)(*($5 + [9]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [90])) & [255]) != (int_32)(*($5 + [10]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [91])) & [255]) != (int_32)(*($5 + [11]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [92])) & [255]) != (int_32)(*($5 + [12]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [93])) & [255]) != (int_32)(*($5 + [13]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [94])) & [255]) != (int_32)(*($5 + [14]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [95])) & [255]) != (int_32)(*($5 + [15]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [96])) & [255]) != (int_32)(*($5 + [16]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [97])) & [255]) != (int_32)(*($5 + [17]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [98])) & [255]) != (int_32)(*($5 + [18]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [99])) & [255]) != (int_32)(*($5 + [19]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [100])) & [255]) != (int_32)(*($5 + [20]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [101])) & [255]) != (int_32)(*($5 + [21]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [102])) & [255]) != (int_32)(*($5 + [22]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [103])) & [255]) != (int_32)(*($5 + [23]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [104])) & [255]) != (int_32)(*($5 + [24]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [105])) & [255]) != (int_32)(*($5 + [25]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [106])) & [255]) != (int_32)(*($5 + [26]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [107])) & [255]) != (int_32)(*($5 + [27]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [108])) & [255]) != (int_32)(*($5 + [28]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [109])) & [255]) != (int_32)(*($5 + [29]) & [255])) ){ goto $label$8 }
	if ( ((int_32)(*(($9 + [110])) & [255]) != (int_32)(*($5 + [30]) & [255])) ){ goto $label$8 }
	$13 = ((int_32)*(($9 + [111])) == (int_32)*(($5 + [31])))
	
.LABEL $label$8
	CALL eosio_assert($13, [9647])
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$10 }
	$11 = uint_32($11 >> [1])
	$12 = ($4 + [1])
	goto $label$9 
	
.LABEL $label$10
	$11 = *($4 + [4])
	$12 = *($4 + [8])
	
.LABEL $label$9
	CALL sha256($12, $11, ($8 + [96]))
	$12 = [0]
	$11 = [0]
	if ( ((int_32)*($8 + [96]) != (int_32)*($5)) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [97]) & [255]) != (int_32)(*(($5 + [1])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [98]) & [255]) != (int_32)(*(($5 + [2])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [99]) & [255]) != (int_32)(*(($5 + [3])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [100]) & [255]) != (int_32)(*(($5 + [4])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [101]) & [255]) != (int_32)(*(($5 + [5])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [102]) & [255]) != (int_32)(*(($5 + [6])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [103]) & [255]) != (int_32)(*(($5 + [7])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [104]) & [255]) != (int_32)(*(($5 + [8])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [105]) & [255]) != (int_32)(*(($5 + [9])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [106]) & [255]) != (int_32)(*(($5 + [10])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [107]) & [255]) != (int_32)(*(($5 + [11])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [108]) & [255]) != (int_32)(*(($5 + [12])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [109]) & [255]) != (int_32)(*(($5 + [13])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [110]) & [255]) != (int_32)(*(($5 + [14])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [111]) & [255]) != (int_32)(*(($5 + [15])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [112]) & [255]) != (int_32)(*(($5 + [16])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [113]) & [255]) != (int_32)(*(($5 + [17])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [114]) & [255]) != (int_32)(*(($5 + [18])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [115]) & [255]) != (int_32)(*(($5 + [19])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [116]) & [255]) != (int_32)(*(($5 + [20])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [117]) & [255]) != (int_32)(*(($5 + [21])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [118]) & [255]) != (int_32)(*(($5 + [22])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [119]) & [255]) != (int_32)(*(($5 + [23])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [120]) & [255]) != (int_32)(*(($5 + [24])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [121]) & [255]) != (int_32)(*(($5 + [25])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [122]) & [255]) != (int_32)(*(($5 + [26])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [123]) & [255]) != (int_32)(*(($5 + [27])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [124]) & [255]) != (int_32)(*(($5 + [28])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [125]) & [255]) != (int_32)(*(($5 + [29])) & [255])) ){ goto $label$11 }
	$11 = [0]
	if ( ((int_32)(*($8 + [126]) & [255]) != (int_32)(*(($5 + [30])) & [255])) ){ goto $label$11 }
	$11 = ((int_32)*($8 + [127]) == (int_32)*(($5 + [31])))
	
.LABEL $label$11
	CALL eosio_assert($11, [9673])
	CALL $97(($8 + [80]), $3, $4)
	$5 = *($8 + [80])
	$11 = ($5 & [1])
	CALL sha256(( *($8 + [88]) ? (($8 + [80]) | [1]) : $11 ), ( *($8 + [84]) ? uint_32($5 >> [1]) : $11 ), ($8 + [48]))
	*(($5 = ($8 + [16]))) = *((($8 + [48]) + [16]))
	*(($11 = ($8 + [24]))) = *((($8 + [48]) + [24]))
	*($8 + [40]) = [0]
	*($8 + [32]) = (int_64)0
	*($8) = *($8 + [48])
	*($8 + [8]) = *($8 + [56])
	*((($8 + [208]) + [24])) = *($11)
	*((($8 + [208]) + [16])) = *($5)
	*($8 + [216]) = *($8 + [8])
	*($8 + [208]) = *($8)
	$3 = (($8 + [32]) + [8])
	$11 = [0]
	$5 = [0]
	
.LOOP $label$13:
	$17 = [3]
	if ( ((int_32)($11 - $12) == (int_32)[3]) ){ goto $label$12 }
	$12 = *((($8 + [208]) + $5))
	if ( ((uint_32)$12 > (uint_32)[207]) ){ goto $label$14 }
	$12 = ((uint_32)$12 % (uint_32)[52])
	*($8 + [255]) = $12
	if ( ((uint_32)*($3) <= (uint_32)$11) ){ goto $label$15 }
	*($11) = $12
	*($8 + [36]) = (*($8 + [36]) + [1])
	goto $label$14 
	
.LABEL $label$15
	CALL $96(($8 + [32]), ($8 + [255]))
	
.LABEL $label$14
	$12 = *($8 + [32])
	$11 = *($8 + [36])
	$5 = ($5 + [1])
	if ( ($5 <= [32]) ){ goto $label$13 }
	$17 = ($11 - $12)
	
.LABEL $label$12
	CALL eosio_assert(((int_32)(*($6 + [4]) - *($6)) == (int_32)$17), [11200])
	$11 = *($6)
	if ( ((int_32)*($6 + [4]) == (int_32)$11) ){ goto $label$17 }
	$5 = [0]
	$17 = ($6 + [4])
	
.LOOP $label$18:
	$12 = *($8 + [32])
	if ( ((uint_32)(*($8 + [36]) - $12) <= (uint_32)$5) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*(($11 + $5)) == (int_32)*(($12 + $5))), [11220])
	$11 = *($6)
	$5 = ($5 + [1])
	if ( ($5 <= (*($17) - $11)) ){ goto $label$18 }
	
.LABEL $label$17
	$1 = *($0)
	*($8 + [208]) = $6
	CALL eosio_assert($14, [13817])
	CALL $119(($8 + [128]), $9, $1, ($8 + [208]))
	$5 = *($8 + [32])
	if ( ($5 == 0) ){ goto $label$19 }
	*($8 + [36]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((*($8 + [80]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($8 + [88])))
	
.LABEL $label$20
	$12 = *($8 + [152])
	if ( ($12 == 0) ){ goto $label$21 }
	$6 = ($8 + [156])
	$11 = *($6)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$23 }
	
.LOOP $label$24:
	$11 = ($11 + [-24])
	$5 = *($11)
	*($11) = [0]
	if ( ($5 == 0) ){ goto $label$25 }
	$9 = *($5 + [112])
	if ( ($9 == 0) ){ goto $label$26 }
	*(($5 + [116])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$26
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$27
	CALL _ZdlPv($5)
	
.LABEL $label$25
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$24 }
	$5 = *(($8 + [152]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $12
	
.LABEL $label$22
	*($6) = $12
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$12 = *($8 + [192])
	if ( ($12 == 0) ){ goto $label$28 }
	$6 = ($8 + [196])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$30 }
	
.LOOP $label$31:
	$5 = ($5 + [-24])
	$11 = *($5)
	*($5) = [0]
	if ( ($11 == 0) ){ goto $label$32 }
	$9 = *($11 + [40])
	if ( ($9 == 0) ){ goto $label$33 }
	*(($11 + [44])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$33
	CALL _ZdlPv($11)
	
.LABEL $label$32
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$31 }
	$5 = *(($8 + [192]))
	goto $label$29 
	
.LABEL $label$30
	$5 = $12
	
.LABEL $label$29
	*($6) = $12
	CALL _ZdlPv($5)
	
.LABEL $label$28
	$global$0 = ($8 + [256])
	return (unreachable)
	
.LABEL $label$16
	CALL $277(($8 + [32]))
}

void .FUNC $264 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC memory ()
{
}

void .FUNC $266 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $236 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $237(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $43 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13)
{
	CALL require_auth(*($0))
	CALL require_recipient($2)
}

void .FUNC $42 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth($1)
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	$4 = [1]
	$5 = CALL db_find_i64($3, $3, (int_64)-6077946346717839360, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $65(($2 + [8]), $5) + [8]) == (int_32)($2 + [8])), [13766])
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8427])
	$3 = *($0)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$6()), [14008])
	*(($0 = CALL _Znwj([24])) + [8]) = ($2 + [8])
	*($0) = $1
	CALL eosio_assert([1], [12992])
	CALL memcpy(($2 + [64]), $0, [8])
	$1 = *($0)
	$5 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)-6077946346717839360, $3, $1, ($2 + [64]), [8])
	*($0 + [12]) = $5
	$4 = ($2 + [24])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*($2 + [56]) = $0
	$1 = *($0)
	*($2 + [64]) = $1
	*($2 + [52]) = $5
	$6 = ($2 + [36])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($2 + [40]))) ){ goto $label$5 }
	*($4 + [8]) = $1
	*($4 + [16]) = $5
	*($2 + [56]) = [0]
	*($4) = $0
	*($6) = ($4 + [24])
	$0 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $0 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $66(($2 + [32]), ($2 + [56]), ($2 + [64]), ($2 + [52]))
	$0 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($2 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($2 + [80])
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [88]) = $3
	CALL require_auth($1)
	*(($4 + [80])) = [0]
	*($4 + [56]) = $1
	*($4 + [64]) = (int_64)-1
	$5 = *($0)
	*($4 + [48]) = $5
	*($4 + [72]) = (int_64)0
	$6 = [0]
	$7 = CALL db_lowerbound_i64($5, $1, (int_64)4312312276611760128, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $77(($4 + [48]), $7)
	$3 = *($4 + [88])
	
.LABEL $label$1
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [8671])
	CALL eosio_assert(((int_64)*($6) == (int_64)$2), [8686])
	CALL eosio_assert(((int_32)*($6 + [132]) ^ (int_32)[1]), [8703])
	$7 = ($6 + [112])
	CALL eosio_assert(((int_32)(*($7) - *($6 + [108])) == (int_32)[40]), [9153])
	CALL eosio_assert(((uint_64)$3 <= (uint_64)(CASTING uint_64)(uint_32 ((int_32)(*($7) - *($6 + [108])) / (int_32)[40]))), [8730])
	$9 = ($6 + [108])
	$11 = ((CASTING uint_32)(uint_64 $3) + [-1])
	$10 = *($6 + [108])
	if ( ((uint_32)((int_32)(*($7) - $10) / (int_32)[40]) <= (uint_32)$11) ){ goto $label$3 }
	*((($4 + [8]) + [12])) = (int_64)0
	*($4 + [16]) = [0]
	$7 = ($10 + ((int_32)$11 * (int_32)[40]))
	*($4 + [8]) = *($7)
	$12 = ($7 + [12])
	$13 = (*($12) - *($7 + [8]))
	if ( ($13 == 0) ){ goto $label$4 }
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$2 }
	$14 = CALL _Znwj($13)
	*(($4 + [16])) = $14
	*(($4 + [24])) = ($14 + $13)
	*(($13 = ($4 + [20]))) = $14
	$12 = *(($7 + [8]))
	$7 = (*($12) - $12)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($14, $12, $7)
	*($13) = (*($13) + $7)
	
.LABEL $label$4
	$7 = ($10 + ((int_32)$11 * (int_32)[40]))
	*((($4 + [8]) + [36])) = *(($7 + [36]))
	*((($4 + [8]) + [28])) = *(($7 + [28]))
	*($4 + [28 align=4]) = *($7 + [20 align=4])
	CALL eosio_assert(((int_32)*($4 + [33]) ^ (int_32)[1]), [8764])
	$7 = [1]
	$3 = *($4 + [88])
	if ( ((int_64)$3 == (int_64)1) ){ goto $label$5 }
	$10 = ((CASTING uint_32)(uint_64 $3) + [-2])
	$7 = *(($6 + [108]))
	if ( ((uint_32)((int_32)(*(($6 + [112])) - $7) / (int_32)[40]) <= (uint_32)$10) ){ goto $label$3 }
	$7 = *(($7 + ((int_32)$10 * (int_32)[40])) + [25])
	
.LABEL $label$5
	CALL eosio_assert($7, [8783])
	$7 = ($4 + [16])
	$10 = ($4 + [20])
	CALL eosio_assert(((int_32)(*($10) - *($7)) == (int_32)[2]), [9182])
	CALL eosio_assert(((int_32)*(($4 + [28])) ^ (int_32)[1]), [9212])
	CALL eosio_assert(((int_32)*($4 + [29]) ^ (int_32)[1]), [9239])
	CALL eosio_assert(((int_32)*($4 + [30]) ^ (int_32)[1]), [9268])
	CALL eosio_assert(((int_32)*($4 + [31]) ^ (int_32)[1]), [9308])
	CALL eosio_assert(((int_32)*($4 + [32]) ^ (int_32)[1]), [9345])
	$3 = *($0)
	*($4) = ($4 + [88])
	CALL eosio_assert($8, [13817])
	CALL $81(($4 + [48]), $6, $3, $4)
	$6 = *($7)
	if ( ($6 == 0) ){ goto $label$6 }
	*($10) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$7 }
	$10 = ($4 + [76])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$9 }
	$6 = ($6 + [-24])
	
.LOOP $label$10:
	$7 = CALL $79($6)
	$6 = ($6 + [-24])
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$10 }
	$6 = *(($4 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $0
	
.LABEL $label$8
	*($10) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$3
	CALL $277($9)
	
.LABEL $label$2
	CALL $276((($4 + [8]) + [8]))
	(unreachable)
}

int_32 .FUNC $40 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [272]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [264]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [12690])
	CALL memcpy((($4 + [264]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [12690])
	CALL memcpy((($4 + [264]) + [16]), ($2 + [16]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [24])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$3 = CALL $5(($4 + [40]), $0, $1, ($4 + [8]))
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [280])
	$1 = *($4 + [272])
	$9 = *($4 + [264])
	if ( ($5 & [1]) ){ goto $label$13 }
	CALL void $8((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL void $8((int_32 $9), (int_64 $1), (int_64 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [40]) & $2) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [288])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [36])))
	$global$0 = ($4 + [288])
	return $2
}

void .FUNC $47 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_64 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_64 $25
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = [0]
	*((($4 + [104]) + [32])) = [0]
	*($4 + [112]) = $2
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	$6 = *($0)
	*($4 + [104]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $2, (int_64)4312312276611760128, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $77(($4 + [104]), $8)
	CALL eosio_assert(((int_32)*($7 + [144]) == (int_32)($4 + [104])), [13766])
	
.LABEL $label$1
	$9 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($9, [8671])
	CALL eosio_assert(((int_32)*($7 + [132]) ^ (int_32)[1]), [10057])
	$10 = *(($7 + [32]))
	CALL eosio_assert([1], [12695])
	$1 = (uint_64)$10 >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $6
	$11 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$1 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $8 ){ goto $label$5 }
	$11 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($11, [12744])
	$13 = ($7 + [40])
	$14 = (int_64)0
	$15 = ($7 + [112])
	$11 = *($7 + [108])
	if ( ((uint_32)$11 >= (uint_32)*($15)) ){ goto $label$8 }
	$16 = *($13)
	$17 = $16
	$14 = (int_64)0
	$18 = ($7 + [32])
	$19 = *($18)
	$20 = ($7 + [24])
	$21 = *($20)
	if ( (*($11 + [23]) == 0) ){ goto $label$7 }
	$22 = [21]
	goto $label$6 
	
.LABEL $label$8
	$22 = [2]
	goto $label$6 
	
.LABEL $label$7
	$22 = [31]
	
.LABEL $label$6
	
.LOOP $label$9:
	goto $label$51 
	
.LABEL $label$63
	CALL eosio_assert([1], [13089])
	CALL eosio_assert(((int_64)*($18) == (int_64)$19), [12853])
	$21 = ((int_64)*($20) + (int_64)$21)
	CALL eosio_assert(((int_64)$21 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$21 < (int_64)4611686018427387904), [12915])
	if ( *($11 + [22]) ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$62
	$17 = *($13)
	$19 = *($18)
	$21 = *($20)
	if ( *($11 + [23]) ){ goto $label$31 }
	$22 = [31]
	goto $label$9 
	
.LABEL $label$61
	if ( (*($11 + [22]) == 0) ){ goto $label$24 }
	$22 = [22]
	goto $label$9 
	
.LABEL $label$60
	$23 = *($13)
	$24 = *($18)
	$25 = ((int_64)*($20) / (int_64)2)
	CALL eosio_assert((uint_64)(((int_64)$25 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$1 = (uint_64)$24 >> (uint_64)(int_64)8)
	$5 = [0]
	$22 = [23]
	goto $label$9 
	
.LABEL $label$59
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$22 = [25]
	goto $label$9 
	
.LABEL $label$58
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$22 = [26]
	goto $label$9 
	
.LABEL $label$57
	$1 = $6
	$8 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$56
	$1 = $6
	$22 = [28]
	goto $label$9 
	
.LABEL $label$55
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$22 = [29]
	goto $label$9 
	
.LABEL $label$54
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $8 ){ goto $label$10 }
	$22 = [30]
	goto $label$9 
	
.LABEL $label$53
	$8 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$52
	$8 = [0]
	$22 = [0]
	goto $label$9 
	
.LABEL $label$51
	CALL eosio_assert($8, [12744])
	CALL eosio_assert(((int_64)$17 == (int_64)$23), [13089])
	CALL eosio_assert(((int_64)$24 == (int_64)$19), [12853])
	$21 = ((int_64)$25 + (int_64)$21)
	CALL eosio_assert(((int_64)$21 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$21 < (int_64)4611686018427387904), [12915])
	$22 = [1]
	goto $label$9 
	
.LABEL $label$50
	CALL eosio_assert(((int_64)$16 == (int_64)$17), [13089])
	CALL eosio_assert(((int_64)$19 == (int_64)$10), [12853])
	$14 = ((int_64)$21 + (int_64)$14)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [12915])
	$11 = ($11 + [40])
	if ( ($11 <= *($15)) ){ goto $label$23 }
	$22 = [2]
	goto $label$9 
	
.LABEL $label$49
	*(($4 + [80])) = $10
	*($4 + [64]) = $2
	*($4 + [72]) = $14
	*($4 + [56]) = *($0)
	$12 = CALL $260(($4 + [88]), $3)
	*($4 + [8]) = (int_64)3617214756542218240
	*($4) = *($0)
	$5 = CALL $100(($4 + [16]), $4, *($13), (int_64)-3617168760277827584, ($4 + [56]))
	CALL $101(($4 + [144]), $5)
	$8 = *($4 + [144])
	CALL send_inline($8, (*($4 + [148]) - $8))
	$8 = *($4 + [144])
	if ( ($8 == 0) ){ goto $label$22 }
	$22 = [3]
	goto $label$9 
	
.LABEL $label$48
	*($4 + [148]) = $8
	CALL _ZdlPv($8)
	$22 = [4]
	goto $label$9 
	
.LABEL $label$47
	$8 = *($5 + [28])
	if ( ($8 == 0) ){ goto $label$21 }
	$22 = [5]
	goto $label$9 
	
.LABEL $label$46
	*(($5 + [32])) = $8
	CALL _ZdlPv($8)
	$22 = [6]
	goto $label$9 
	
.LABEL $label$45
	$8 = *($5 + [16])
	if ( ($8 == 0) ){ goto $label$20 }
	$22 = [7]
	goto $label$9 
	
.LABEL $label$44
	*(($5 + [20])) = $8
	CALL _ZdlPv($8)
	$22 = [8]
	goto $label$9 
	
.LABEL $label$43
	CALL eosio_assert($9, [14084])
	CALL eosio_assert($9, [14118])
	$5 = CALL db_next_i64(*($7 + [148]), ($4 + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$19 }
	$22 = [9]
	goto $label$9 
	
.LABEL $label$42
	CALL $77(($4 + [104]), $5)
	$22 = [10]
	goto $label$9 
	
.LABEL $label$41
	CALL $104(($4 + [104]), $7)
	if ( ((*($12) & [1]) == 0) ){ goto $label$18 }
	$22 = [11]
	goto $label$9 
	
.LABEL $label$40
	CALL _ZdlPv(*(($4 + [96])))
	$22 = [12]
	goto $label$9 
	
.LABEL $label$39
	$12 = *($4 + [128])
	if ( ($12 == 0) ){ goto $label$17 }
	$22 = [13]
	goto $label$9 
	
.LABEL $label$38
	$11 = ($4 + [132])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$16 }
	$22 = [14]
	goto $label$9 
	
.LABEL $label$37
	$5 = ($5 + [-24])
	$22 = [15]
	goto $label$9 
	
.LABEL $label$36
	$8 = CALL $79($5)
	$5 = ($5 + [-24])
	if ( ((int_32)$8 != (int_32)$12) ){ goto $label$15 }
	$22 = [16]
	goto $label$9 
	
.LABEL $label$35
	$5 = *(($4 + [128]))
	goto $label$14 
	
.LABEL $label$34
	$5 = $12
	$22 = [17]
	goto $label$9 
	
.LABEL $label$33
	*($11) = $12
	CALL _ZdlPv($5)
	$22 = [18]
	goto $label$9 
	
.LABEL $label$32
	$global$0 = ($4 + [160])
	return 
	
.LABEL $label$31
	$22 = [21]
	goto $label$9 
	
.LABEL $label$30
	$22 = [1]
	goto $label$9 
	
.LABEL $label$29
	$22 = [22]
	goto $label$9 
	
.LABEL $label$28
	$22 = [23]
	goto $label$9 
	
.LABEL $label$27
	$22 = [0]
	goto $label$9 
	
.LABEL $label$26
	$22 = [23]
	goto $label$9 
	
.LABEL $label$25
	$22 = [0]
	goto $label$9 
	
.LABEL $label$24
	$22 = [1]
	goto $label$9 
	
.LABEL $label$23
	$22 = [20]
	goto $label$9 
	
.LABEL $label$22
	$22 = [4]
	goto $label$9 
	
.LABEL $label$21
	$22 = [6]
	goto $label$9 
	
.LABEL $label$20
	$22 = [8]
	goto $label$9 
	
.LABEL $label$19
	$22 = [10]
	goto $label$9 
	
.LABEL $label$18
	$22 = [12]
	goto $label$9 
	
.LABEL $label$17
	$22 = [18]
	goto $label$9 
	
.LABEL $label$16
	$22 = [19]
	goto $label$9 
	
.LABEL $label$15
	$22 = [15]
	goto $label$9 
	
.LABEL $label$14
	$22 = [17]
	goto $label$9 
	
.LABEL $label$13
	$22 = [24]
	goto $label$9 
	
.LABEL $label$12
	$22 = [24]
	goto $label$9 
	
.LABEL $label$11
	$22 = [27]
	goto $label$9 
	
.LABEL $label$10
	$22 = [28]
	goto $label$9 
	$22
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [264]) = (int_64)0
	*($4 + [256]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [256]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [12690])
	CALL memcpy((($4 + [256]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$3 = CALL $5(($4 + [32]), $0, $1, $4)
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [264])
	$1 = *($4 + [256])
	if ( ($5 & [1]) ){ goto $label$13 }
	CALL void $8((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL void $8((int_32 $1), (int_64 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [40]) & $2) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [272])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [36])))
	$global$0 = ($4 + [272])
	return $2
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [200]) = $2
	CALL require_auth(*($0))
	*(($3 + [192])) = [0]
	*($3 + [176]) = (int_64)-1
	$4 = *($0)
	*($3 + [160]) = $4
	*($3 + [168]) = $4
	*($3 + [184]) = (int_64)0
	$5 = [0]
	$6 = CALL db_lowerbound_i64($4, $4, (int_64)-3612798081281556480, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $112(($3 + [160]), $6)
	$2 = *($3 + [200])
	
.LABEL $label$1
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [8671])
	CALL eosio_assert(((int_64)*($5) == (int_64)$1), [8686])
	CALL eosio_assert(((uint_64)CALL $fimport$14() >= (uint_64)*($5 + [32])), [11378])
	if ( ((uint_64)$2 > (uint_64)(int_64)1) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)1) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)[1]), [11285])
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_64)$2 != (int_64)2) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)[3]), [11285])
	$7 = CALL tapos_block_prefix()
	*($3 + [72]) = [0]
	*($3 + [64]) = (int_64)0
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)0
	CALL $126($7, ($3 + [64]), [3])
	$6 = *($3 + [64])
	if ( ((int_32)*($3 + [68]) == (int_32)$6) ){ goto $label$11 }
	$8 = (($3 + [48]) + [8])
	$5 = [0]
	
.LOOP $label$12:
	CALL $131(($3 + [96]), *(($6 + $5)))
	$6 = *($3 + [52])
	if ( ((uint_32)$6 >= (uint_32)*($8)) ){ goto $label$14 }
	*($6) = *($3 + [96])
	$6 = (($3 + [96]) + [8])
	*(($6 + [8])) = *($6)
	*($6) = [0]
	*($3 + [96]) = (int_64)0
	*($3 + [52]) = (*($3 + [52]) + [12])
	goto $label$13 
	
.LABEL $label$14
	CALL $132(($3 + [48]), ($3 + [96]))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*((($3 + [96]) + [8])))
	
.LABEL $label$13
	$6 = *($3 + [64])
	$5 = ($5 + [1])
	if ( ($5 <= (*($3 + [68]) - $6)) ){ goto $label$12 }
	
.LABEL $label$11
	CALL $127(($3 + [40]), ($3 + [64]), CALL $252([3]))
	*(($3 + [116])) = (int_64)0
	*(($3 + [124])) = (int_64)0
	*(($6 = ($3 + [140]))) = [0]
	*($3 + [108 align=4]) = (int_64)0
	*($3 + [132 align=4]) = (int_64)0
	*($3 + [96]) = $1
	*($3 + [104]) = $7
	CALL $133(($3 + [108]), *($3 + [64]), *($3 + [68]))
	CALL $134(($3 + [120]), *($3 + [48]), *($3 + [52]))
	CALL $135($3, *($3 + [40]))
	$5 = ($3 + [132])
	if ( (*($3 + [132]) & [1]) ){ goto $label$5 }
	*($5) = [0]
	goto $label$4 
	
.LABEL $label$10
	CALL eosio_assert([0], [11430])
	$8 = *($3 + [184])
	if ( $8 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$8
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)[2]), [11285])
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [11404])
	
.LABEL $label$6
	$2 = *($0)
	*($3 + [96]) = ($3 + [200])
	CALL eosio_assert($6, [13817])
	CALL $136(($3 + [160]), $5, $2, ($3 + [96]))
	$2 = CALL current_time()
	*(($3 + [124])) = (int_64)0
	*(($3 + [140])) = (int_64)0
	*(($3 + [148])) = (int_64)0
	*($3 + [108]) = [0]
	*($3 + [112]) = [0]
	*($3 + [116 align=4]) = (int_64)0
	*($3 + [132 align=4]) = (int_64)0
	*($3 + [96]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($3 + [8]) = (int_64)3617214756542218240
	*($3) = *($0)
	*($3 + [64]) = (int_64)-3612604550649741312
	*($3 + [88]) = ((int_64)*($3 + [200]) + (int_64)1)
	*($3 + [80]) = $1
	CALL $137(($3 + [132]), $3, $0, ($3 + [64]), ($3 + [80]))
	$2 = *($0)
	$4 = *($3 + [200])
	*($3 + [116]) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = ((int_64)$4 + (int_64)((int_64)$1 << (int_64)8))
	CALL $138(($3 + [80]), ($3 + [96]))
	$5 = *($3 + [80])
	CALL send_deferred($3, $2, $5, (*($3 + [84]) - $5), [0])
	$5 = *($3 + [80])
	if ( ($5 == 0) ){ goto $label$15 }
	*($3 + [84]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$15
	CALL $139(($3 + [96]))
	$8 = *($3 + [184])
	if ( $8 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*(*($6)) = [0]
	*(($3 + [136])) = [0]
	
.LABEL $label$4
	CALL $264($5, [0])
	*(($5 + [8])) = *(($3 + [8]))
	*($5) = *($3)
	$5 = [1]
	if ( ((uint_32)*($3 + [40]) > (uint_32)[1]) ){ goto $label$16 }
	$6 = *($3 + [41])
	if ( ((int_32)$6 == (int_32)[12]) ){ goto $label$16 }
	$5 = (((uint_32)$6 > (uint_32)[11]) | ((int_32)$6 == (int_32)[1]))
	
.LABEL $label$16
	*($3 + [144]) = $5
	*(($6 = ($3 + [24]))) = [0]
	*($3 + [8]) = (int_64)-3612826272665534464
	*($3 + [16]) = (int_64)0
	$2 = *($0)
	*($3) = $2
	*(($5 = CALL _Znwj([16]))) = $2
	*($5 + [8]) = (int_64)3617214756542218240
	$0 = ($5 + [16])
	*($6) = $0
	*(($3 + [20])) = $0
	*($3 + [16]) = $5
	CALL $140(($3 + [28]), ($3 + [96]))
	CALL $101(($3 + [80]), $3)
	$5 = *($3 + [80])
	CALL send_inline($5, (*($3 + [84]) - $5))
	$5 = *($3 + [80])
	if ( ($5 == 0) ){ goto $label$17 }
	*($3 + [84]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$5 = *($3 + [28])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($3 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$5 = *($3 + [16])
	if ( ($5 == 0) ){ goto $label$19 }
	*(($3 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((*(($3 + [132])) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($3 + [140])))
	
.LABEL $label$20
	$0 = *($3 + [120])
	if ( ($0 == 0) ){ goto $label$21 }
	$8 = ($3 + [124])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$25
	$6 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($3 + [120]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $0
	
.LABEL $label$22
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$5 = *(($3 + [108]))
	if ( ($5 == 0) ){ goto $label$26 }
	*(($3 + [112])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$26
	$0 = *($3 + [48])
	if ( ($0 == 0) ){ goto $label$27 }
	$6 = *($3 + [52])
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$29 }
	
.LOOP $label$30:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$31
	$6 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$30 }
	$5 = *($3 + [48])
	goto $label$28 
	
.LABEL $label$29
	$5 = $0
	
.LABEL $label$28
	*($3 + [52]) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$27
	$5 = *($3 + [64])
	if ( ($5 == 0) ){ goto $label$32 }
	*($3 + [68]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$32
	$8 = *($3 + [184])
	if ( ($8 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($3 + [188])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$34 }
	
.LOOP $label$35:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$36 }
	$0 = *($6 + [40])
	if ( ($0 == 0) ){ goto $label$37 }
	*(($6 + [44])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$37
	CALL _ZdlPv($6)
	
.LABEL $label$36
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$35 }
	$5 = *(($3 + [184]))
	goto $label$33 
	
.LABEL $label$34
	$5 = $8
	
.LABEL $label$33
	*($7) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$global$0 = ($3 + [208])
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [448])
	$global$0 = $3
	*(($4 = $3) + [440]) = *($2)
	$5 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$5 = CALL $295($2)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	CALL read_action_data($5, $2)
	
.LABEL $label$1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*(($4 + [336])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [368])) = (int_64)0
	*(($4 + [384])) = (int_64)0
	*(($4 + [400])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [352]) = [0]
	*($4 + [360]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [392]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*(($4 + [432])) = (int_64)0
	*($4 + [276]) = $5
	*($4 + [272]) = $5
	*($4 + [280]) = ($5 + $2)
	*($4 + [24]) = ($4 + [272])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [288]), *($4 + [276]), [8])
	$3 = (*($4 + [276]) + [8])
	*($4 + [276]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [280]) - $3) > (uint_32)[7]), [12690])
	CALL memcpy((($4 + [288]) + [8]), *($4 + [276]), [8])
	*($4 + [276]) = (*($4 + [276]) + [8])
	CALL $143(($4 + [272]), ($4 + [304]))
	CALL $143(($4 + [272]), ($4 + [316]))
	*($4 + [48]) = ($4 + [288])
	CALL $161(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [280])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [272])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $5(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [440])
	CALL $162(($4 + [24]), ($4 + [288]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$18 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $298($5)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	if ( (*($3 + [40]) & $2) ){ goto $label$14 }
	
.LABEL $label$15
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [36])))
	if ( ((*($4 + [340]) & $2) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($4 + [340]) & $2) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($4 + [328]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [348])))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [336])))
	$3 = *($4 + [316])
	if ( ($3 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$3 = *($4 + [316])
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$7
	$3 = *($4 + [304])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = ($4 + [320])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$21
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($4 + [316]))
	*($7) = $3
	CALL _ZdlPv($2)
	$3 = *($4 + [304])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$19
	*($7) = $3
	CALL _ZdlPv($3)
	$3 = *($4 + [304])
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = ($4 + [308])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$23 }
	
.LOOP $label$24:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$25
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$24 }
	$2 = *(($4 + [304]))
	goto $label$22 
	
.LABEL $label$23
	$2 = $3
	
.LABEL $label$22
	*($7) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [448])
	return [1]
}

void .FUNC $222 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$3 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$4 = CALL _Znwj(((int_32)$3 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($3 + [24]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($4) = [0]
	$3 = (*($2) + [40])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $276($0)
	
.LABEL $label$2
	$7 = ($4 + ((int_32)$3 * (int_32)[40]))
	$8 = ($4 + ((int_32)$5 * (int_32)[40]))
	$3 = $8
	
.LOOP $label$8:
	*(($2 = ($3 + [24]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$9 = ($4 + ((int_32)$6 * (int_32)[40]))
	$3 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$10 }
	$11 = ($3 - $10)
	$2 = [0]
	
.LOOP $label$11:
	*(($4 = (($3 = ($8 + $2)) + [-32]))) = (int_64)0
	*(($6 = ($3 + [-24]))) = [0]
	$1 = ($10 + $2)
	$5 = ($1 + [-32])
	*($4) = *($5)
	$4 = ($1 + [-24])
	*($6) = *($4)
	*(($3 + [-40])) = *(($1 + [-40]))
	*($4) = [0]
	*($5) = (int_64)0
	*(($3 + [-4])) = *(($1 + [-4]))
	*(($3 + [-12])) = *(($1 + [-12]))
	*(($3 + [-20])) = *(($1 + [-20]))
	$2 = ($2 + [-40])
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$11 }
	$8 = ($8 + $2)
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$4 = $3
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($3 + [-40])
	$2 = *(($3 + [-32]))
	if ( ($2 == 0) ){ goto $label$14 }
	*(($3 + [-28])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$14
	$3 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$1 }
	CALL _ZdlPv($4)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $267 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $263($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $234 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($0, *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $233 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $249 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = (*($2) + [16])
	*(($2 = *($1))) = $1
	$3 = *($3)
	$3 = *($0 + [8])
	$4 = *($3 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)($4 - $3) / (int_32)[12]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = *($3)
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$4 }
	*($2) = $1
	$6 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$5 }
	$1 = ($6 + $1)
	*($2) = $1
	
.LABEL $label$5
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = *($3)
	$3 = *($0 + [12])
	$4 = *($3 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)($4 - $3) / (int_32)[12]))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$6 }
	*($2) = $1
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = *($3)
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$9:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($2) = $1
	$6 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$10 }
	$1 = ($6 + $1)
	*($2) = $1
	
.LABEL $label$10
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$11:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$11 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$12 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$12
	$6 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$13:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$13 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$14 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$14
	*($2) = ($1 + [82])
}

int_32 .FUNC $226 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [12992])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [12992])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $167 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [4]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	*($1) = *(*($3))
	CALL eosio_assert([1], [13949])
	*($4 + [15]) = *($1)
	CALL eosio_assert([1], [12992])
	CALL memcpy($4, ($4 + [15]), [1])
	CALL db_update_i64(*($1 + [8]), $2, $4, [1])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871467403247616) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4982871467403247617
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $166 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	$5 = ($global$0 - [432])
	$global$0 = $5
	*($5 + [384]) = $1
	*(($5 + [376])) = [0]
	*($5 + [360]) = (int_64)-1
	*($5 + [368]) = (int_64)0
	$1 = *($0)
	*($5 + [344]) = $1
	$6 = *($3 + [16])
	*($5 + [352]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($1, $6, (int_64)-3590606672529195008, (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$8) < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $148(($5 + [344]), $8)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($5 + [344])), [13766])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [10080])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($3 + [8]))), [10102])
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$7 }
	$9 = uint_32($8 >> [1])
	if ( ($9 == 0) ){ goto $label$6 }
	$10 = ($4 + [1])
	$11 = [0]
	$12 = (*(($0 + [128])) & [255])
	$13 = [-1]
	$14 = [-1]
	$15 = [-1]
	$16 = [-1]
	$8 = [0]
	
.LOOP $label$8:
	$17 = $16
	if ( ((int_32)*(($10 + $8)) != (int_32)$12) ){ goto $label$12 }
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$11 }
	if ( ((int_32)$14 == (int_32)[-1]) ){ goto $label$10 }
	if ( ((int_32)$15 == (int_32)[-1]) ){ goto $label$9 }
	$11 = ($11 + [1])
	$16 = $8
	if ( ((int_32)$17 != (int_32)[-1]) ){ goto $label$4 }
	$8 = ($8 + [1])
	if ( ($8 <= $9) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$12
	$16 = $17
	$8 = ($8 + [1])
	if ( ($8 <= $9) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$11
	$11 = ($11 + [1])
	$16 = $17
	$13 = $8
	$8 = ($8 + [1])
	if ( ($8 <= $9) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$10
	$11 = ($11 + [1])
	$16 = $17
	$14 = $8
	$8 = ($8 + [1])
	if ( ($8 <= $9) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$9
	$11 = ($11 + [1])
	$16 = $17
	$15 = $8
	$8 = ($8 + [1])
	if ( ($8 <= $9) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$7
	$17 = *($4 + [4])
	if ( ($17 == 0) ){ goto $label$6 }
	$9 = *(($4 + [8]))
	$11 = [0]
	$10 = (*(($0 + [128])) & [255])
	$13 = [-1]
	$14 = [-1]
	$15 = [-1]
	$16 = [-1]
	$8 = [0]
	
.LOOP $label$13:
	if ( ((int_32)*(($9 + $8)) != (int_32)$10) ){ goto $label$17 }
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$16 }
	if ( ((int_32)$14 == (int_32)[-1]) ){ goto $label$15 }
	if ( ((int_32)$15 == (int_32)[-1]) ){ goto $label$14 }
	$11 = ($11 + [1])
	if ( ((int_32)$16 != (int_32)[-1]) ){ goto $label$3 }
	$16 = $8
	
.LABEL $label$17
	$8 = ($8 + [1])
	if ( ($8 <= $17) ){ goto $label$13 }
	goto $label$5 
	
.LABEL $label$16
	$11 = ($11 + [1])
	$13 = $8
	$8 = ($8 + [1])
	if ( ($8 <= $17) ){ goto $label$13 }
	goto $label$5 
	
.LABEL $label$15
	$11 = ($11 + [1])
	$14 = $8
	$8 = ($8 + [1])
	if ( ($8 <= $17) ){ goto $label$13 }
	goto $label$5 
	
.LABEL $label$14
	$11 = ($11 + [1])
	$15 = $8
	$8 = ($8 + [1])
	if ( ($8 <= $17) ){ goto $label$13 }
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	$16 = [-1]
	$15 = [-1]
	$14 = [-1]
	$13 = [-1]
	
.LABEL $label$5
	CALL $261(($5 + [328]), $4, [0], $13, $4)
	$8 = [-1]
	goto $label$2 
	
.LABEL $label$4
	$16 = $17
	
.LABEL $label$3
	CALL $261(($5 + [328]), $4, [0], $13, $4)
	
.LABEL $label$2
	$17 = *($5 + [328])
	$9 = CALL $292([11709])
	if ( ((int_32)$9 != (int_32)( *($5 + [332]) ? uint_32($17 >> [1]) : ($17 & [1]) )) ){ goto $label$38 }
	$17 = [0]
	if ( (CALL $268(($5 + [328]), [0], [-1], [11709], $9) == 0) ){ goto $label$37 }
	
.LABEL $label$38
	$8 = *($5 + [328])
	$16 = CALL $292([11838])
	if ( ((int_32)$16 != (int_32)( *($5 + [332]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$39 }
	$17 = [0]
	if ( (CALL $268(($5 + [328]), [0], [-1], [11838], $16) == 0) ){ goto $label$36 }
	
.LABEL $label$39
	CALL eosio_assert([0], [10158])
	goto $label$20 
	
.LABEL $label$37
	CALL eosio_assert(((int_32)$11 == (int_32)[5]), [10158])
	$1 = *($3)
	if ( (uint_64)($1 <= *($7 + [16])) ){ goto $label$40 }
	$17 = ((uint_64)$1 <= (uint_64)*($7 + [24]))
	
.LABEL $label$40
	CALL eosio_assert($17, [10178])
	$7 = CALL $261(($5 + [312]), $4, ($13 + [1]), (($14 + [-1]) - $13), $4)
	$14 = CALL $261(($5 + [296]), $4, ($14 + [1]), (($15 + [-1]) - $14), $4)
	$15 = CALL $261(($5 + [280]), $4, ($15 + [1]), (($16 + [-1]) - $15), $4)
	$18 = CALL $261(($5 + [264]), $4, ($16 + [1]), ($8 + ((int_32)$16 ^ (int_32)[-1])), $4)
	$4 = CALL $261(($5 + [248]), $4, ($8 + [1]), [-1], $4)
	*($5 + [240]) = (int_64)0
	$8 = ($8 & [1])
	$8 = *($5 + [312])
	if ( (( *($7 + [4]) ? uint_32($8 >> [1]) : $8 ) == 0) ){ goto $label$34 }
	$8 = ( *($7 + [8]) ? ($7 + [1]) : $8 )
	*($5 + [232]) = $8
	*($5 + [236]) = CALL $292($8)
	*($5 + [8]) = *($5 + [232])
	$1 = *(CALL $176(($5 + [104]), ($5 + [8])))
	*($5 + [240]) = $1
	if ( (CALL is_account($1) == 0) ){ goto $label$35 }
	if ( ((int_64)*($5 + [240]) == (int_64)*($5 + [384])) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	CALL eosio_assert(($11 == 0), [10158])
	*(($5 + [136])) = [0]
	*($5 + [120]) = (int_64)-1
	*($5 + [128]) = (int_64)0
	$1 = *($0)
	*($5 + [104]) = $1
	*($5 + [112]) = $1
	$8 = CALL db_find_i64($1, $1, (int_64)-3590843033098125312, *($5 + [384]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$41 }
	$17 = CALL $151(($5 + [104]), $8)
	CALL eosio_assert(((int_32)*($17 + [128]) == (int_32)($5 + [104])), [13766])
	
.LABEL $label$41
	$13 = ((int_32)$17 != (int_32)[0])
	CALL eosio_assert($13, [8671])
	$19 = *(($3 + [8]))
	$20 = *($3)
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$1 = (uint_64)$19 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$45 }
	$1 = $6
	$16 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$1 = $6
	
.LOOP $label$46:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$43 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$16 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $16 ){ goto $label$46 }
	$16 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	$16 = [0]
	
.LABEL $label$42
	CALL eosio_assert($16, [12744])
	CALL eosio_assert(((int_64)$19 == (int_64)*(($17 + [32]))), [12933])
	CALL eosio_assert(((int_64)$20 == (int_64)*($17 + [24])), [11911])
	CALL eosio_assert(((int_32)*(($17 + [116])) != (int_32)*($17 + [112])), [12074])
	CALL eosio_assert(((int_32)*($17 + [124]) ^ (int_32)[1]), [12407])
	CALL eosio_assert(((int_32)*($17 + [125]) ^ (int_32)[1]), [12437])
	$1 = *($0)
	CALL eosio_assert($13, [13817])
	CALL $191(($5 + [104]), $17, $1)
	$17 = *($5 + [128])
	if ( ($17 == 0) ){ goto $label$20 }
	$13 = ($5 + [132])
	$16 = *($13)
	if ( ((int_32)$16 == (int_32)$17) ){ goto $label$32 }
	
.LOOP $label$47:
	$16 = ($16 + [-24])
	$8 = *($16)
	*($16) = [0]
	if ( ($8 == 0) ){ goto $label$48 }
	$11 = *($8 + [112])
	if ( ($11 == 0) ){ goto $label$49 }
	*(($8 + [116])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$49
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($8 + [72])))
	
.LABEL $label$50
	CALL _ZdlPv($8)
	
.LABEL $label$48
	if ( ((int_32)$17 != (int_32)$16) ){ goto $label$47 }
	$8 = *(($5 + [128]))
	goto $label$31 
	
.LABEL $label$35
	*($5 + [240]) = (int_64)0
	if ( ((int_64)0 != (int_64)*($5 + [384])) ){ goto $label$33 }
	
.LABEL $label$34
	*($5 + [240]) = (int_64)0
	
.LABEL $label$33
	$8 = [0]
	*($5 + [224]) = (CASTING int_64)(int_32 CALL $269($14, [0], [10]))
	$16 = CALL $269($15, [0], [10])
	$1 = (CASTING int_64)(int_32 $16)
	*($5 + [216]) = $1
	$6 = *($5 + [224])
	$1 = ((int_64)$6 + (int_64)$1)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$51 }
	$8 = ((int_32)(CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)63)) ^ (int_32)[1])
	
.LABEL $label$51
	CALL eosio_assert($8, [11784])
	CALL eosio_assert(((int_64)*($3) == (int_64)$1), [9824])
	$8 = *($5 + [200])
	$12 = CALL $260(($5 + [200]), $18)
	CALL eosio_assert(((int_32)( *($12 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) == (int_32)[20]), [10249])
	$8 = ($8 & [1])
	$8 = *($5 + [200])
	if ( (( *($12 + [4]) ? uint_32($8 >> [1]) : $8 ) == 0) ){ goto $label$52 }
	$11 = ($8 == 0)
	$13 = ($12 + [1])
	$8 = [0]
	$9 = ($12 + [8])
	$10 = ($12 + [4])
	
.LOOP $label$53:
	$16 = [0]
	$11 = *((( $13 ? *($9) : ($11 & [1]) ) + $8))
	if ( ((int_32)$11 < (int_32)[48]) ){ goto $label$54 }
	$16 = [1]
	if ( ((int_32)$11 < (int_32)[58]) ){ goto $label$54 }
	$16 = [0]
	if ( ((int_32)$11 < (int_32)[65]) ){ goto $label$54 }
	$16 = [1]
	if ( ((int_32)$11 < (int_32)[91]) ){ goto $label$54 }
	$16 = ((($11 + [-97]) & [255]) <= [26])
	
.LABEL $label$54
	CALL eosio_assert($16, [10282])
	$16 = *($5 + [200])
	$17 = ($16 & [1])
	$11 = ($17 == 0)
	$8 = ($8 + [1])
	if ( ($8 <= ( *($10) ? uint_32($16 >> [1]) : $17 )) ){ goto $label$53 }
	
.LABEL $label$52
	$8 = *($5 + [184])
	$13 = CALL $260(($5 + [184]), $4)
	CALL eosio_assert(((int_32)( *($13 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) == (int_32)[64]), [10325])
	CALL $1($13, ($5 + [144]), [32])
	$8 = [0]
	*((($5 + [104]) + [32])) = [0]
	*($5 + [120]) = (int_64)-1
	*($5 + [128]) = (int_64)0
	$1 = *($0)
	*($5 + [104]) = $1
	*($5 + [112]) = $1
	$16 = [0]
	$11 = CALL db_find_i64($1, $1, (int_64)-3590905687705255936, (int_64)-3590905687705255936)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$55 }
	$16 = CALL $146(($5 + [104]), $11)
	CALL eosio_assert(((int_32)*($16 + [8]) == (int_32)($5 + [104])), [13766])
	
.LABEL $label$55
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [12347])
	$1 = ((int_64)CALL $192(($5 + [104])) + (int_64)1)
	*($5 + [88]) = $1
	*($5 + [96]) = $1
	*((($5 + [48]) + [32])) = [0]
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	$1 = *($0)
	*($5 + [48]) = $1
	*($5 + [56]) = $1
	$16 = CALL db_find_i64($1, $1, (int_64)-3590843033098125312, *($5 + [384]))
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$56 }
	$8 = CALL $151(($5 + [48]), $16)
	CALL eosio_assert(((int_32)*($8 + [128]) == (int_32)($5 + [48])), [13766])
	
.LABEL $label$56
	CALL eosio_assert(($8 == 0), [12377])
	$1 = *($0)
	*($5 + [32]) = $3
	*($5 + [40]) = $12
	*($5 + [20]) = ($5 + [384])
	*($5 + [16]) = ($5 + [88])
	*($5 + [24]) = ($5 + [240])
	*($5 + [28]) = ($5 + [224])
	*($5 + [36]) = ($5 + [216])
	*($5 + [44]) = ($5 + [144])
	*($5 + [424]) = $1
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)CALL $fimport$6()), [14008])
	*($5 + [404]) = ($5 + [16])
	*($5 + [400]) = ($5 + [48])
	*($5 + [408]) = ($5 + [424])
	*(($8 = CALL _Znwj([144])) + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = (int_64)0
	*($8 + [64 align=4]) = (int_64)0
	*($8 + [72]) = [0]
	*($8 + [112 align=4]) = (int_64)0
	*($8 + [120]) = [0]
	*($8 + [124]) = [0]
	*($8 + [128]) = ($5 + [48])
	CALL $193(($5 + [400]), $8)
	*($5 + [416]) = $8
	$1 = *($8 + [8])
	*($5 + [400]) = $1
	$11 = *($8 + [132])
	*($5 + [396]) = $11
	$17 = ($5 + [76])
	$16 = *($17)
	if ( ((uint_32)$16 >= (uint_32)*(($5 + [80]))) ){ goto $label$59 }
	*($16 + [8]) = $1
	*($16 + [16]) = $11
	*($5 + [416]) = [0]
	*($16) = $8
	*($17) = ($16 + [24])
	$8 = *($5 + [416])
	*($5 + [416]) = [0]
	if ( $8 ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	CALL $194(($5 + [72]), ($5 + [416]), ($5 + [400]), ($5 + [396]))
	$8 = *($5 + [416])
	*($5 + [416]) = [0]
	if ( ($8 == 0) ){ goto $label$57 }
	
.LABEL $label$58
	$16 = *($8 + [112])
	if ( ($16 == 0) ){ goto $label$60 }
	*(($8 + [116])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$60
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$61 }
	CALL _ZdlPv(*(($8 + [72])))
	
.LABEL $label$61
	CALL _ZdlPv($8)
	
.LABEL $label$57
	CALL $147(($5 + [104]), ($5 + [96]), *($0))
	$17 = *($5 + [72])
	if ( ($17 == 0) ){ goto $label$62 }
	$9 = ($5 + [76])
	$16 = *($9)
	if ( ((int_32)$16 == (int_32)$17) ){ goto $label$64 }
	
.LOOP $label$65:
	$16 = ($16 + [-24])
	$8 = *($16)
	*($16) = [0]
	if ( ($8 == 0) ){ goto $label$66 }
	$11 = *($8 + [112])
	if ( ($11 == 0) ){ goto $label$67 }
	*(($8 + [116])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$67
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($8 + [72])))
	
.LABEL $label$68
	CALL _ZdlPv($8)
	
.LABEL $label$66
	if ( ((int_32)$17 != (int_32)$16) ){ goto $label$65 }
	$8 = *(($5 + [72]))
	goto $label$63 
	
.LABEL $label$64
	$8 = $17
	
.LABEL $label$63
	*($9) = $17
	CALL _ZdlPv($8)
	
.LABEL $label$62
	$11 = *($5 + [128])
	if ( ($11 == 0) ){ goto $label$69 }
	$17 = ($5 + [132])
	$8 = *($17)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$71 }
	
.LOOP $label$72:
	$8 = ($8 + [-24])
	$16 = *($8)
	*($8) = [0]
	if ( ($16 == 0) ){ goto $label$73 }
	CALL _ZdlPv($16)
	
.LABEL $label$73
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$72 }
	$8 = *(($5 + [128]))
	goto $label$70 
	
.LABEL $label$71
	$8 = $11
	
.LABEL $label$70
	*($17) = $11
	CALL _ZdlPv($8)
	
.LABEL $label$69
	if ( (*($5 + [184]) & [1]) ){ goto $label$75 }
	if ( (*($5 + [200]) & [1]) ){ goto $label$74 }
	goto $label$30 
	
.LABEL $label$75
	CALL _ZdlPv(*($13 + [8]))
	if ( ((*($5 + [200]) & [1]) == 0) ){ goto $label$30 }
	
.LABEL $label$74
	CALL _ZdlPv(*($12 + [8]))
	$8 = [1]
	if ( ((*($5 + [248]) & [1]) == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$32
	$8 = $17
	
.LABEL $label$31
	*($13) = $17
	CALL _ZdlPv($8)
	if ( (*($5 + [328]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$30
	$8 = [1]
	if ( (*($5 + [248]) & [1]) ){ goto $label$28 }
	
.LABEL $label$29
	if ( (*($5 + [264]) & $8) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($5 + [264]) & $8) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*($18 + [8]))
	$8 = [1]
	if ( ((*($5 + [280]) & [1]) == 0) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$8 = [1]
	if ( (*($5 + [280]) & [1]) ){ goto $label$24 }
	
.LABEL $label$25
	if ( (*($5 + [296]) & $8) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL _ZdlPv(*($15 + [8]))
	if ( ((*($5 + [296]) & $8) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*($14 + [8]))
	if ( ((*($5 + [312]) & [1]) == 0) ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$22
	if ( ((*($5 + [312]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv(*($7 + [8]))
	if ( (*($5 + [328]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	if ( ((*($5 + [328]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($5 + [336]))
	
.LABEL $label$18
	$11 = *($5 + [368])
	if ( ($11 == 0) ){ goto $label$76 }
	$17 = ($5 + [372])
	$8 = *($17)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$78 }
	
.LOOP $label$79:
	$8 = ($8 + [-24])
	$16 = *($8)
	*($8) = [0]
	if ( ($16 == 0) ){ goto $label$80 }
	CALL _ZdlPv($16)
	
.LABEL $label$80
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$79 }
	$8 = *(($5 + [368]))
	goto $label$77 
	
.LABEL $label$78
	$8 = $11
	
.LABEL $label$77
	*($17) = $11
	CALL _ZdlPv($8)
	
.LABEL $label$76
	$global$0 = ($5 + [432])
}

void .FUNC $165 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	$5 = ($global$0 - [448])
	$global$0 = $5
	*($5 + [400]) = $1
	$6 = [0]
	*((($5 + [360]) + [32])) = [0]
	*($5 + [376]) = (int_64)-1
	*($5 + [384]) = (int_64)0
	$1 = *($0)
	*($5 + [360]) = $1
	$7 = *($3 + [16])
	*($5 + [368]) = $7
	$8 = [0]
	$9 = CALL db_find_i64($1, $7, (int_64)-3612561720712626176, (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$9) < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $108(($5 + [360]), $9)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)($5 + [360])), [13766])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10080])
	CALL eosio_assert(((int_64)*($8) == (int_64)*(($3 + [8]))), [10102])
	*((($5 + [320]) + [32])) = [0]
	*($5 + [336]) = (int_64)-1
	$1 = *($0)
	*($5 + [320]) = $1
	*($5 + [328]) = $1
	*($5 + [344]) = (int_64)0
	$9 = CALL db_lowerbound_i64($1, $1, (int_64)-3612798081281556480, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $112(($5 + [320]), $9)
	
.LABEL $label$2
	*($5 + [316]) = $6
	*($5 + [312]) = ($5 + [320])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8671])
	CALL eosio_assert(((int_32)*(*($5 + [316]) + [52]) == (int_32)[1]), [11695])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$8 }
	$10 = uint_32($6 >> [1])
	if ( ($10 == 0) ){ goto $label$7 }
	$11 = ($4 + [1])
	$6 = [0]
	$12 = (*(($0 + [128])) & [255])
	$13 = [-1]
	$14 = [-1]
	$15 = [-1]
	$9 = [-1]
	
.LOOP $label$9:
	$16 = $9
	if ( ((int_32)*(($11 + $6)) != (int_32)$12) ){ goto $label$13 }
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$12 }
	if ( ((int_32)$14 == (int_32)[-1]) ){ goto $label$11 }
	if ( ((int_32)$15 == (int_32)[-1]) ){ goto $label$10 }
	$9 = $6
	if ( ((int_32)$16 != (int_32)[-1]) ){ goto $label$5 }
	$6 = ($6 + [1])
	if ( ($6 <= $10) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$13
	$9 = $16
	$6 = ($6 + [1])
	if ( ($6 <= $10) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$12
	$9 = $16
	$13 = $6
	$6 = ($6 + [1])
	if ( ($6 <= $10) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$11
	$9 = $16
	$14 = $6
	$6 = ($6 + [1])
	if ( ($6 <= $10) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$10
	$9 = $16
	$15 = $6
	$6 = ($6 + [1])
	if ( ($6 <= $10) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$8
	$16 = *($4 + [4])
	if ( ($16 == 0) ){ goto $label$7 }
	$10 = *(($4 + [8]))
	$6 = [0]
	$11 = (*(($0 + [128])) & [255])
	$13 = [-1]
	$14 = [-1]
	$15 = [-1]
	$9 = [-1]
	
.LOOP $label$14:
	if ( ((int_32)*(($10 + $6)) != (int_32)$11) ){ goto $label$18 }
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$17 }
	if ( ((int_32)$14 == (int_32)[-1]) ){ goto $label$16 }
	if ( ((int_32)$15 == (int_32)[-1]) ){ goto $label$15 }
	if ( ((int_32)$9 != (int_32)[-1]) ){ goto $label$4 }
	$9 = $6
	
.LABEL $label$18
	$6 = ($6 + [1])
	if ( ($6 <= $16) ){ goto $label$14 }
	goto $label$6 
	
.LABEL $label$17
	$13 = $6
	$6 = ($6 + [1])
	if ( ($6 <= $16) ){ goto $label$14 }
	goto $label$6 
	
.LABEL $label$16
	$14 = $6
	$6 = ($6 + [1])
	if ( ($6 <= $16) ){ goto $label$14 }
	goto $label$6 
	
.LABEL $label$15
	$15 = $6
	$6 = ($6 + [1])
	if ( ($6 <= $16) ){ goto $label$14 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [-1]
	$15 = [-1]
	$14 = [-1]
	$13 = [-1]
	
.LABEL $label$6
	CALL $261(($5 + [296]), $4, [0], $13, $4)
	$6 = [-1]
	goto $label$3 
	
.LABEL $label$5
	$9 = $16
	
.LABEL $label$4
	CALL $261(($5 + [296]), $4, [0], $13, $4)
	
.LABEL $label$3
	$16 = *($5 + [296])
	$10 = CALL $292([11709])
	if ( ((int_32)$10 != (int_32)( *($5 + [300]) ? uint_32($16 >> [1]) : ($16 & [1]) )) ){ goto $label$31 }
	$16 = [0]
	if ( (CALL $268(($5 + [296]), [0], [-1], [11709], $10) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$6 = *($5 + [296])
	$9 = CALL $292([11838])
	if ( ((int_32)$9 != (int_32)( *($5 + [300]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$32 }
	$6 = [0]
	if ( (CALL $268(($5 + [296]), [0], [-1], [11838], $9) == 0) ){ goto $label$29 }
	
.LABEL $label$32
	CALL eosio_assert([0], [10158])
	goto $label$21 
	
.LABEL $label$30
	CALL eosio_assert(((uint_64)CALL $fimport$14() <= (uint_64)*(*($5 + [316]) + [16])), [11713])
	CALL eosio_assert(((int_32)$6 != (int_32)[-1]), [10158])
	$1 = *($3)
	if ( (uint_64)($1 <= *($8 + [16])) ){ goto $label$33 }
	$16 = ((uint_64)$1 <= (uint_64)*($8 + [24]))
	
.LABEL $label$33
	CALL eosio_assert($16, [10178])
	CALL eosio_assert((int_64)(((uint_64)*($3) % (uint_64)*($8 + [32])) == 0), [11758])
	$17 = CALL $261(($5 + [280]), $4, ($13 + [1]), (($14 + [-1]) - $13), $4)
	$18 = CALL $261(($5 + [264]), $4, ($14 + [1]), (($15 + [-1]) - $14), $4)
	$15 = CALL $261(($5 + [248]), $4, ($15 + [1]), (($9 + [-1]) - $15), $4)
	$19 = CALL $261(($5 + [232]), $4, ($9 + [1]), ($6 + ((int_32)$9 ^ (int_32)[-1])), $4)
	$4 = CALL $261(($5 + [216]), $4, ($6 + [1]), [-1], $4)
	*($5 + [208]) = (int_64)0
	$6 = ($6 & [1])
	$6 = *($5 + [280])
	if ( (( *($17 + [4]) ? uint_32($6 >> [1]) : $6 ) == 0) ){ goto $label$27 }
	$6 = ( *($17 + [8]) ? ($17 + [1]) : $6 )
	*($5 + [200]) = $6
	*($5 + [204]) = CALL $292($6)
	*($5 + [16]) = *($5 + [200])
	$1 = *(CALL $176(($5 + [72]), ($5 + [16])))
	*($5 + [208]) = $1
	if ( (CALL is_account($1) == 0) ){ goto $label$28 }
	if ( ((int_64)*($5 + [208]) == (int_64)*($5 + [400])) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	*((($5 + [72]) + [32])) = [0]
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	$1 = *(*($5 + [316]))
	$7 = *($0)
	*($5 + [72]) = $7
	*($5 + [80]) = $1
	$9 = CALL db_find_i64($7, $1, (int_64)-3612780472452513792, *($5 + [400]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$34 }
	$6 = CALL $118(($5 + [72]), $9)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)($5 + [72])), [13766])
	
.LABEL $label$34
	$9 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($9, [9417])
	CALL eosio_assert(((uint_64)CALL $fimport$14() <= (uint_64)*(*($5 + [316]) + [32])), [11843])
	CALL eosio_assert(((int_64)*($6 + [24]) != (int_64)0), [11886])
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*(($6 + [32]))), [12933])
	CALL eosio_assert(((int_64)*($3) == (int_64)*($6 + [24])), [11911])
	CALL eosio_assert(((int_32)*($6 + [124]) ^ (int_32)[1]), [11932])
	CALL eosio_assert(((int_32)*(($6 + [116])) != (int_32)*($6 + [112])), [11956])
	$1 = *($0)
	CALL eosio_assert($9, [13817])
	CALL $186(($5 + [72]), $6, $1)
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$21 }
	$10 = ($5 + [100])
	$9 = *($10)
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$25 }
	
.LOOP $label$35:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$36 }
	$16 = *($6 + [112])
	if ( ($16 == 0) ){ goto $label$37 }
	*(($6 + [116])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$37
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($6 + [72])))
	
.LABEL $label$38
	CALL _ZdlPv($6)
	
.LABEL $label$36
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$35 }
	$6 = *(($5 + [96]))
	goto $label$24 
	
.LABEL $label$28
	*($5 + [208]) = (int_64)0
	if ( ((int_64)0 != (int_64)*($5 + [400])) ){ goto $label$26 }
	
.LABEL $label$27
	*($5 + [208]) = (int_64)0
	
.LABEL $label$26
	$6 = [0]
	*($5 + [192]) = (CASTING int_64)(int_32 CALL $269($18, [0], [10]))
	$9 = CALL $269($15, [0], [10])
	$1 = (CASTING int_64)(int_32 $9)
	*($5 + [184]) = $1
	$7 = *($5 + [192])
	$1 = ((int_64)$7 + (int_64)$1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$39 }
	$6 = ((int_32)(CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)63)) ^ (int_32)[1])
	
.LABEL $label$39
	CALL eosio_assert($6, [11784])
	CALL eosio_assert(((int_64)*($3) == (int_64)$1), [9824])
	$6 = *($5 + [168])
	$14 = CALL $260(($5 + [168]), $19)
	CALL eosio_assert(((int_32)( *($14 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) == (int_32)[20]), [10249])
	$6 = ($6 & [1])
	$6 = *($5 + [168])
	if ( (( *($14 + [4]) ? uint_32($6 >> [1]) : $6 ) == 0) ){ goto $label$40 }
	$16 = ($6 == 0)
	$10 = ($14 + [1])
	$6 = [0]
	$11 = ($14 + [8])
	$12 = ($14 + [4])
	
.LOOP $label$41:
	$9 = [0]
	$16 = *((( $10 ? *($11) : ($16 & [1]) ) + $6))
	if ( ((int_32)$16 < (int_32)[48]) ){ goto $label$42 }
	$9 = [1]
	if ( ((int_32)$16 < (int_32)[58]) ){ goto $label$42 }
	$9 = [0]
	if ( ((int_32)$16 < (int_32)[65]) ){ goto $label$42 }
	$9 = [1]
	if ( ((int_32)$16 < (int_32)[91]) ){ goto $label$42 }
	$9 = ((($16 + [-97]) & [255]) <= [26])
	
.LABEL $label$42
	CALL eosio_assert($9, [10282])
	$9 = *($5 + [168])
	$13 = ($9 & [1])
	$16 = ($13 == 0)
	$6 = ($6 + [1])
	if ( ($6 <= ( *($12) ? uint_32($9 >> [1]) : $13 )) ){ goto $label$41 }
	
.LABEL $label$40
	$6 = *($5 + [152])
	$10 = CALL $260(($5 + [152]), $4)
	CALL eosio_assert(((int_32)( *($10 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) == (int_32)[64]), [10325])
	CALL $1($10, ($5 + [112]), [32])
	*(($16 = (($5 + [72]) + [32]))) = [0]
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	$1 = *(*($5 + [316]))
	$7 = *($0)
	*($5 + [72]) = $7
	*($5 + [80]) = $1
	$6 = [0]
	$9 = CALL db_find_i64($7, $1, (int_64)-3612780472452513792, *($5 + [400]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$43 }
	$6 = CALL $118(($5 + [72]), $9)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)($5 + [72])), [13766])
	
.LABEL $label$43
	CALL eosio_assert(($6 == 0), [11804])
	$1 = *($0)
	*($5 + [56]) = $3
	*($5 + [64]) = $14
	*($5 + [44]) = ($5 + [400])
	*($5 + [40]) = ($5 + [312])
	*($5 + [48]) = ($5 + [208])
	*($5 + [52]) = ($5 + [192])
	*($5 + [60]) = ($5 + [184])
	*($5 + [68]) = ($5 + [112])
	*($5 + [440]) = $1
	CALL eosio_assert(((int_64)*($5 + [72]) == (int_64)CALL $fimport$6()), [14008])
	*($5 + [420]) = ($5 + [40])
	*($5 + [416]) = ($5 + [72])
	*($5 + [424]) = ($5 + [440])
	*(($6 = CALL _Znwj([144])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [64 align=4]) = (int_64)0
	*($6 + [72]) = [0]
	*($6 + [112 align=4]) = (int_64)0
	*($6 + [120]) = [0]
	*($6 + [128]) = ($5 + [72])
	CALL $187(($5 + [416]), $6)
	*($5 + [432]) = $6
	$1 = *($6 + [8])
	*($5 + [416]) = $1
	$13 = *($6 + [132])
	*($5 + [412]) = $13
	$11 = ($5 + [100])
	$9 = *($11)
	if ( ((uint_32)$9 >= (uint_32)*($16)) ){ goto $label$44 }
	*($9 + [8]) = $1
	*($9 + [16]) = $13
	*($5 + [432]) = [0]
	*($9) = $6
	*($11) = ($9 + [24])
	$9 = *($5 + [432])
	$6 = [0]
	*($5 + [432]) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$44
	CALL $188(($5 + [96]), ($5 + [432]), ($5 + [416]), ($5 + [412]))
	$9 = *($5 + [432])
	$6 = [0]
	*($5 + [432]) = [0]
	if ( $9 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$6 = $13
	
.LABEL $label$24
	*($10) = $13
	CALL _ZdlPv($6)
	if ( (*($5 + [296]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$23
	$16 = *($9 + [112])
	if ( ($16 == 0) ){ goto $label$45 }
	*(($9 + [116])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$45
	if ( ((*($9 + [64]) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($9 + [72])))
	
.LABEL $label$46
	CALL _ZdlPv($9)
	
.LABEL $label$22
	$1 = *($3)
	*($5 + [24]) = $1
	$20 = *(*($5 + [316]))
	*($5 + [32]) = *(($3 + [8]))
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$1 = (uint_64)*($5 + [32]) >> (uint_64)(int_64)8)
	
.LOOP $label$48:
	$13 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$1 = $7
	$13 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$1 = $7
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$16 = ($6 + [1])
	$6 = $16
	if ( $9 ){ goto $label$50 }
	$13 = [1]
	$6 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$48 }
	
.LABEL $label$47
	CALL eosio_assert($13, [12744])
	$1 = *($8 + [40])
	*(($5 + [8])) = *((($5 + [24]) + [8]))
	*($5) = *($5 + [24])
	CALL $120($0, $20, $5, $1)
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$51 }
	$11 = ($5 + [100])
	$9 = *($11)
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$53 }
	
.LOOP $label$54:
	$9 = ($9 + [-24])
	$6 = *($9)
	*($9) = [0]
	if ( ($6 == 0) ){ goto $label$55 }
	$16 = *($6 + [112])
	if ( ($16 == 0) ){ goto $label$56 }
	*(($6 + [116])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$56
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*(($6 + [72])))
	
.LABEL $label$57
	CALL _ZdlPv($6)
	
.LABEL $label$55
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$54 }
	$6 = *(($5 + [96]))
	goto $label$52 
	
.LABEL $label$53
	$6 = $13
	
.LABEL $label$52
	*($11) = $13
	CALL _ZdlPv($6)
	
.LABEL $label$51
	if ( (*($5 + [152]) & [1]) ){ goto $label$69 }
	if ( (*($5 + [168]) & [1]) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($5 + [168]) & [1]) == 0) ){ goto $label$67 }
	
.LABEL $label$68
	CALL _ZdlPv(*($14 + [8]))
	$6 = [1]
	if ( ((*($5 + [216]) & [1]) == 0) ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$6 = [1]
	if ( (*($5 + [216]) & [1]) ){ goto $label$65 }
	
.LABEL $label$66
	if ( (*($5 + [232]) & $6) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($5 + [232]) & $6) == 0) ){ goto $label$63 }
	
.LABEL $label$64
	CALL _ZdlPv(*($19 + [8]))
	$6 = [1]
	if ( ((*($5 + [248]) & [1]) == 0) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$6 = [1]
	if ( (*($5 + [248]) & [1]) ){ goto $label$61 }
	
.LABEL $label$62
	if ( (*($5 + [264]) & $6) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	CALL _ZdlPv(*($15 + [8]))
	if ( ((*($5 + [264]) & $6) == 0) ){ goto $label$59 }
	
.LABEL $label$60
	CALL _ZdlPv(*($18 + [8]))
	if ( ((*($5 + [280]) & [1]) == 0) ){ goto $label$21 }
	goto $label$58 
	
.LABEL $label$59
	if ( ((*($5 + [280]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$58
	CALL _ZdlPv(*($17 + [8]))
	if ( (*($5 + [296]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($5 + [296]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*($5 + [304]))
	
.LABEL $label$19
	$13 = *($5 + [344])
	if ( ($13 == 0) ){ goto $label$70 }
	$10 = ($5 + [348])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$72 }
	
.LOOP $label$73:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$74 }
	$16 = *($9 + [40])
	if ( ($16 == 0) ){ goto $label$75 }
	*(($9 + [44])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$75
	CALL _ZdlPv($9)
	
.LABEL $label$74
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$73 }
	$6 = *(($5 + [344]))
	goto $label$71 
	
.LABEL $label$72
	$6 = $13
	
.LABEL $label$71
	*($10) = $13
	CALL _ZdlPv($6)
	
.LABEL $label$70
	$16 = *($5 + [384])
	if ( ($16 == 0) ){ goto $label$76 }
	$13 = ($5 + [388])
	$6 = *($13)
	if ( ((int_32)$6 == (int_32)$16) ){ goto $label$78 }
	
.LOOP $label$79:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$80 }
	CALL _ZdlPv($9)
	
.LABEL $label$80
	if ( ((int_32)$16 != (int_32)$6) ){ goto $label$79 }
	$6 = *(($5 + [384]))
	goto $label$77 
	
.LABEL $label$78
	$6 = $16
	
.LABEL $label$77
	*($13) = $16
	CALL _ZdlPv($6)
	
.LABEL $label$76
	$global$0 = ($5 + [448])
}

void .FUNC $164 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$5 = ($global$0 - [432])
	$global$0 = $5
	*($5 + [400]) = $1
	$6 = [0]
	*((($5 + [360]) + [32])) = [0]
	*($5 + [376]) = (int_64)-1
	*($5 + [384]) = (int_64)0
	$1 = *($0)
	*($5 + [360]) = $1
	$7 = *($3 + [16])
	*($5 + [368]) = $7
	$8 = [0]
	$9 = CALL db_find_i64($1, $7, (int_64)4319875814817529856, (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$9) < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $73(($5 + [360]), $9)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($5 + [360])), [13766])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10080])
	CALL eosio_assert(((int_64)*($8) == (int_64)*(($3 + [8]))), [10102])
	*((($5 + [320]) + [32])) = [0]
	*($5 + [336]) = (int_64)-1
	*($5 + [344]) = (int_64)0
	$1 = *($0)
	*($5 + [320]) = $1
	*($5 + [328]) = $1
	$9 = CALL db_find_i64($1, $1, (int_64)4310307329183580160, (int_64)4310307329183580160)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $68(($5 + [320]), $9)
	CALL eosio_assert(((int_32)*($6 + [8]) == (int_32)($5 + [320])), [13766])
	
.LABEL $label$2
	$10 = [0]
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [10124])
	*($5 + [312]) = CALL $175(($5 + [320]))
	*(($5 + [304])) = [0]
	*($5 + [288]) = (int_64)-1
	*($5 + [296]) = (int_64)0
	*($5 + [272]) = *($0)
	*($5 + [280]) = *($5 + [400])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$8 }
	$11 = uint_32($6 >> [1])
	if ( ($11 == 0) ){ goto $label$7 }
	$12 = ($4 + [1])
	$10 = [0]
	$13 = (*(($0 + [128])) & [255])
	$14 = [-1]
	$9 = [-1]
	$6 = [0]
	
.LOOP $label$9:
	$15 = $9
	if ( ((int_32)*(($12 + $6)) != (int_32)$13) ){ goto $label$11 }
	if ( ((int_32)$14 == (int_32)[-1]) ){ goto $label$10 }
	$10 = ($10 + [1])
	$9 = $6
	if ( ((int_32)$15 != (int_32)[-1]) ){ goto $label$5 }
	$6 = ($6 + [1])
	if ( ($6 <= $11) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$11
	$9 = $15
	$6 = ($6 + [1])
	if ( ($6 <= $11) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$10
	$10 = ($10 + [1])
	$9 = $15
	$14 = $6
	$6 = ($6 + [1])
	if ( ($6 <= $11) ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$8
	$15 = *($4 + [4])
	if ( ($15 == 0) ){ goto $label$7 }
	$11 = *(($4 + [8]))
	$10 = [0]
	$12 = (*(($0 + [128])) & [255])
	$14 = [-1]
	$9 = [-1]
	$6 = [0]
	
.LOOP $label$12:
	if ( ((int_32)*(($11 + $6)) != (int_32)$12) ){ goto $label$14 }
	if ( ((int_32)$14 == (int_32)[-1]) ){ goto $label$13 }
	$10 = ($10 + [1])
	if ( ((int_32)$9 != (int_32)[-1]) ){ goto $label$4 }
	$9 = $6
	
.LABEL $label$14
	$6 = ($6 + [1])
	if ( ($6 <= $15) ){ goto $label$12 }
	goto $label$6 
	
.LABEL $label$13
	$10 = ($10 + [1])
	$14 = $6
	$6 = ($6 + [1])
	if ( ($6 <= $15) ){ goto $label$12 }
	goto $label$6 
	
.LABEL $label$7
	$14 = [-1]
	$9 = [-1]
	
.LABEL $label$6
	CALL $261(($5 + [256]), $4, [0], $14, $4)
	$6 = [-1]
	goto $label$3 
	
.LABEL $label$5
	$9 = $15
	
.LABEL $label$4
	CALL $261(($5 + [256]), $4, [0], $14, $4)
	
.LABEL $label$3
	$15 = *($5 + [256])
	$11 = CALL $292([10150])
	if ( ((int_32)$11 != (int_32)( *($5 + [260]) ? uint_32($15 >> [1]) : ($15 & [1]) )) ){ goto $label$39 }
	$15 = [0]
	if ( (CALL $268(($5 + [256]), [0], [-1], [10150], $11) == 0) ){ goto $label$38 }
	
.LABEL $label$39
	$6 = *($5 + [256])
	$15 = CALL $292([10392])
	if ( ((int_32)$15 != (int_32)( *($5 + [260]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$40 }
	$6 = [0]
	if ( (CALL $268(($5 + [256]), [0], [-1], [10392], $15) == 0) ){ goto $label$37 }
	
.LABEL $label$40
	$6 = *($5 + [256])
	$11 = CALL $292([10573])
	if ( ((int_32)$11 != (int_32)( *($5 + [260]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$41 }
	$15 = [0]
	if ( (CALL $268(($5 + [256]), [0], [-1], [10573], $11) == 0) ){ goto $label$36 }
	
.LABEL $label$41
	$6 = *($5 + [256])
	$11 = CALL $292([10814])
	if ( ((int_32)$11 != (int_32)( *($5 + [260]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$42 }
	$15 = [0]
	if ( (CALL $268(($5 + [256]), [0], [-1], [10814], $11) == 0) ){ goto $label$35 }
	
.LABEL $label$42
	CALL eosio_assert([0], [10158])
	goto $label$17 
	
.LABEL $label$38
	CALL eosio_assert(((int_32)$10 == (int_32)[3]), [10158])
	$1 = *($3)
	if ( (uint_64)($1 <= *($8 + [16])) ){ goto $label$43 }
	$15 = ((uint_64)$1 <= (uint_64)*($8 + [24]))
	
.LABEL $label$43
	CALL eosio_assert($15, [10178])
	$8 = CALL $261(($5 + [240]), $4, ($14 + [1]), (($9 + [-1]) - $14), $4)
	$16 = CALL $261(($5 + [224]), $4, ($9 + [1]), ($6 + ((int_32)$9 ^ (int_32)[-1])), $4)
	$4 = CALL $261(($5 + [208]), $4, ($6 + [1]), [-1], $4)
	$6 = [0]
	$9 = *($5 + [256])
	$10 = CALL $292([10150])
	if ( ((int_32)$10 != (int_32)( *($5 + [260]) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$44 }
	$6 = (CALL $268(($5 + [256]), [0], [-1], [10150], $10) == 0)
	
.LABEL $label$44
	CALL eosio_assert($6, [10202])
	$6 = ( *($8 + [8]) ? ($8 + [1]) : (*($5 + [240]) & [1]) )
	*($5 + [192]) = $6
	*($5 + [196]) = CALL $292($6)
	*($5 + [8]) = *($5 + [192])
	$17 = CALL $176(($5 + [200]), ($5 + [8]))
	$1 = *($17)
	if ( (int_64)($1 == 0) ){ goto $label$45 }
	CALL eosio_assert(CALL $fimport$18($1), [10217])
	
.LABEL $label$45
	$6 = *($5 + [176])
	$13 = CALL $260(($5 + [176]), $16)
	CALL eosio_assert(((int_32)( *($13 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) == (int_32)[20]), [10249])
	$6 = ($6 & [1])
	$6 = *($5 + [176])
	if ( (( *($13 + [4]) ? uint_32($6 >> [1]) : $6 ) == 0) ){ goto $label$46 }
	$10 = ($6 == 0)
	$14 = ($13 + [1])
	$6 = [0]
	$11 = ($13 + [8])
	$12 = ($13 + [4])
	
.LOOP $label$47:
	$9 = [0]
	$10 = *((( $14 ? *($11) : ($10 & [1]) ) + $6))
	if ( ((int_32)$10 < (int_32)[48]) ){ goto $label$48 }
	$9 = [1]
	if ( ((int_32)$10 < (int_32)[58]) ){ goto $label$48 }
	$9 = [0]
	if ( ((int_32)$10 < (int_32)[65]) ){ goto $label$48 }
	$9 = [1]
	if ( ((int_32)$10 < (int_32)[91]) ){ goto $label$48 }
	$9 = ((($10 + [-97]) & [255]) <= [26])
	
.LABEL $label$48
	CALL eosio_assert($9, [10282])
	$9 = *($5 + [176])
	$15 = ($9 & [1])
	$10 = ($15 == 0)
	$6 = ($6 + [1])
	if ( ($6 <= ( *($12) ? uint_32($9 >> [1]) : $15 )) ){ goto $label$47 }
	
.LABEL $label$46
	$6 = *($5 + [160])
	$11 = CALL $260(($5 + [160]), $4)
	CALL eosio_assert(((int_32)( *($11 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) == (int_32)[64]), [10325])
	CALL $1($11, ($5 + [112]), [32])
	$6 = CALL db_lowerbound_i64(*($5 + [272]), *(($5 + [280])), (int_64)4312312276611760128, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$49 }
	$6 = CALL $77(($5 + [272]), $6)
	
.LOOP $label$50:
	CALL eosio_assert(*($6 + [132]), [10358])
	CALL eosio_assert([1], [14084])
	CALL eosio_assert([1], [14118])
	$9 = [0]
	$10 = CALL db_next_i64(*($6 + [148]), ($5 + [72]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$51 }
	$9 = CALL $77(($5 + [272]), $10)
	
.LABEL $label$51
	CALL $104(($5 + [272]), $6)
	$6 = $9
	if ( $9 ){ goto $label$50 }
	
.LABEL $label$49
	$1 = *($0)
	*($5 + [80]) = $17
	*($5 + [84]) = $3
	*($5 + [88]) = $13
	*($5 + [76]) = ($5 + [400])
	*($5 + [72]) = ($5 + [312])
	*($5 + [92]) = ($5 + [112])
	*($5 + [424]) = $1
	CALL eosio_assert(((int_64)*($5 + [272]) == (int_64)CALL $fimport$6()), [14008])
	*($5 + [36]) = ($5 + [72])
	*($5 + [32]) = ($5 + [272])
	*($5 + [40]) = ($5 + [424])
	*(($6 = CALL _Znwj([160])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [56]) = [0]
	*($6 + [96 align=4]) = (int_64)0
	*($6 + [104 align=4]) = (int_64)0
	*($6 + [112 align=4]) = (int_64)0
	*($6 + [120 align=4]) = (int_64)0
	*($6 + [128]) = [0]
	*($6 + [132]) = [0]
	*($6 + [136]) = (int_64)0
	*($6 + [144]) = ($5 + [272])
	CALL $177(($5 + [32]), $6)
	*($5 + [416]) = $6
	$1 = *($6)
	*($5 + [32]) = $1
	$10 = *($6 + [148])
	*($5 + [412]) = $10
	$15 = ($5 + [300])
	$9 = *($15)
	if ( ((uint_32)$9 >= (uint_32)*((($5 + [272]) + [32]))) ){ goto $label$34 }
	*($9 + [8]) = $1
	*($9 + [16]) = $10
	*($5 + [416]) = [0]
	*($9) = $6
	*($15) = ($9 + [24])
	$14 = *($5 + [416])
	*($5 + [416]) = [0]
	if ( ($14 == 0) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$37
	CALL eosio_assert(((int_32)$10 == (int_32)[2]), [10158])
	$11 = CALL $261(($5 + [240]), $4, ($14 + [1]), (($9 + [-1]) - $14), $4)
	$12 = CALL $261(($5 + [224]), $4, ($9 + [1]), [-1], $4)
	$9 = CALL $269($11, [0], [10])
	*($5 + [208]) = (CASTING int_64)(int_32 CALL $269($12, [0], [10]))
	*((($5 + [112]) + [32])) = [0]
	*($5 + [128]) = (int_64)-1
	$1 = *($0)
	*($5 + [112]) = $1
	$7 = *($5 + [400])
	*($5 + [120]) = $7
	*($5 + [136]) = (int_64)0
	$18 = (CASTING int_64)(int_32 $9)
	$9 = CALL db_lowerbound_i64($1, $7, (int_64)4312312276611760128, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$52 }
	$6 = CALL $77(($5 + [112]), $9)
	
.LABEL $label$52
	$9 = [0]
	$4 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($4, [8671])
	CALL eosio_assert(((int_64)*($6) == (int_64)$18), [8686])
	CALL eosio_assert(((int_32)*($6 + [132]) ^ (int_32)[1]), [8703])
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*(($6 + [32]))), [12933])
	if ( ((int_64)*($3) != (int_64)*($6 + [24])) ){ goto $label$53 }
	$9 = ((int_64)*(($3 + [16])) == (int_64)*(($6 + [40])))
	
.LABEL $label$53
	CALL eosio_assert($9, [10398])
	$9 = ($6 + [112])
	CALL eosio_assert(((uint_64)*($5 + [208]) <= (uint_64)(CASTING uint_64)(uint_32 ((int_32)(*($9) - *($6 + [108])) / (int_32)[40]))), [8730])
	$8 = ($6 + [108])
	$15 = (*($5 + [208]) + [-1])
	$10 = *($6 + [108])
	if ( ((uint_32)((int_32)(*($9) - $10) / (int_32)[40]) <= (uint_32)$15) ){ goto $label$26 }
	*((($5 + [72]) + [12])) = (int_64)0
	*($5 + [80]) = [0]
	$9 = ($10 + ((int_32)$15 * (int_32)[40]))
	*($5 + [72]) = *($9)
	$3 = ($9 + [12])
	$14 = (*($3) - *($9 + [8]))
	if ( ($14 == 0) ){ goto $label$54 }
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$23 }
	$13 = CALL _Znwj($14)
	*(($5 + [80])) = $13
	*(($5 + [88])) = ($13 + $14)
	*(($14 = ($5 + [84]))) = $13
	$3 = *(($9 + [8]))
	$9 = (*($3) - $3)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$54 }
	CALL memcpy($13, $3, $9)
	*($14) = (*($14) + $9)
	
.LABEL $label$54
	$9 = ($10 + ((int_32)$15 * (int_32)[40]))
	*((($5 + [72]) + [36])) = *(($9 + [36]))
	*((($5 + [72]) + [28])) = *(($9 + [28]))
	*($5 + [92 align=4]) = *($9 + [20 align=4])
	CALL eosio_assert(((int_32)*($5 + [97]) ^ (int_32)[1]), [8764])
	$9 = [1]
	$1 = *($5 + [208])
	if ( ((int_64)$1 == (int_64)1) ){ goto $label$55 }
	$10 = ((CASTING uint_32)(uint_64 $1) + [-2])
	$9 = *(($6 + [108]))
	if ( ((uint_32)((int_32)(*(($6 + [112])) - $9) / (int_32)[40]) <= (uint_32)$10) ){ goto $label$26 }
	$9 = *(($9 + ((int_32)$10 * (int_32)[40])) + [25])
	
.LABEL $label$55
	CALL eosio_assert($9, [8783])
	CALL eosio_assert(((int_32)*($5 + [95]) ^ (int_32)[1]), [9007])
	$9 = (($5 + [72]) + [8])
	CALL eosio_assert(((int_32)(*((($5 + [72]) + [12])) - *($9)) == (int_32)[2]), [10441])
	CALL eosio_assert(((int_32)*(($5 + [92])) ^ (int_32)[1]), [10489])
	CALL eosio_assert(((int_32)*($5 + [93]) ^ (int_32)[1]), [9099])
	CALL eosio_assert(((int_32)*($5 + [94]) ^ (int_32)[1]), [10522])
	$10 = (((uint_32)*($10 + [1]) % (uint_32)[13]) + [1])
	$10 = *($9)
	$15 = (((uint_32)*($10) % (uint_32)[13]) + [1])
	CALL eosio_assert(((int_32)( $15 ? [10] : ($15 <= [10]) ) == (int_32)( $10 ? [10] : ($10 <= [10]) )), [10542])
	*(($5 + [48])) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [56]) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [32]) = (CASTING uint_64)(uint_32 (((int_32)(*(($6 + [112])) - *(($6 + [108]))) / (int_32)[40]) + [1]))
	CALL $159((($5 + [32]) + [8]), (*($9) + [1]))
	$1 = *($0)
	*($5 + [180]) = ($5 + [32])
	*($5 + [176]) = ($5 + [208])
	CALL eosio_assert($4, [13817])
	CALL $178(($5 + [112]), $6, $1, ($5 + [176]))
	$6 = *($5 + [40])
	if ( ($6 == 0) ){ goto $label$56 }
	*((($5 + [32]) + [12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$56
	$6 = *($5 + [80])
	if ( ($6 == 0) ){ goto $label$57 }
	*(($5 + [84])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$57
	$10 = *($5 + [136])
	if ( ($10 == 0) ){ goto $label$27 }
	$15 = ($5 + [140])
	$6 = *($15)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$29 }
	$6 = ($6 + [-24])
	
.LOOP $label$58:
	$9 = CALL $79($6)
	$6 = ($6 + [-24])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$58 }
	$6 = *(($5 + [136]))
	goto $label$28 
	
.LABEL $label$36
	CALL eosio_assert(((int_32)$10 == (int_32)[2]), [10158])
	$8 = CALL $261(($5 + [72]), $4, ($14 + [1]), (($9 + [-1]) - $14), $4)
	$4 = CALL $261(($5 + [32]), $4, ($9 + [1]), [-1], $4)
	$6 = CALL $269($8, [0], [10])
	*($5 + [240]) = (CASTING int_64)(int_32 CALL $269($4, [0], [10]))
	$1 = (CASTING int_64)(int_32 $6)
	$6 = CALL db_lowerbound_i64(*($5 + [272]), *(($5 + [280])), (int_64)4312312276611760128, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$59 }
	$15 = CALL $77(($5 + [272]), $6)
	
.LABEL $label$59
	$16 = ((int_32)$15 != (int_32)[0])
	CALL eosio_assert($16, [8671])
	CALL eosio_assert(((int_64)*($15) == (int_64)$1), [8686])
	CALL eosio_assert(((int_32)*($15 + [132]) ^ (int_32)[1]), [10584])
	$6 = ($15 + [112])
	CALL eosio_assert(((int_32)(*($6) - *($15 + [108])) == (int_32)[40]), [10607])
	CALL eosio_assert(((uint_64)*($5 + [240]) <= (uint_64)(CASTING uint_64)(uint_32 ((int_32)(*($6) - *($15 + [108])) / (int_32)[40]))), [8730])
	$13 = ($15 + [108])
	$10 = (*($5 + [240]) + [-1])
	$9 = *($15 + [108])
	if ( ((uint_32)((int_32)(*($6) - $9) / (int_32)[40]) <= (uint_32)$10) ){ goto $label$25 }
	*((($5 + [112]) + [12])) = (int_64)0
	*($5 + [120]) = [0]
	$6 = ($9 + ((int_32)$10 * (int_32)[40]))
	*($5 + [112]) = *($6)
	$12 = ($6 + [12])
	$14 = (*($12) - *($6 + [8]))
	if ( ($14 == 0) ){ goto $label$60 }
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$22 }
	$11 = CALL _Znwj($14)
	*(($5 + [120])) = $11
	*(($5 + [128])) = ($11 + $14)
	*(($14 = ($5 + [124]))) = $11
	$12 = *(($6 + [8]))
	$6 = (*($12) - $12)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$60 }
	CALL memcpy($11, $12, $6)
	*($14) = (*($14) + $6)
	
.LABEL $label$60
	$6 = ($9 + ((int_32)$10 * (int_32)[40]))
	*((($5 + [112]) + [36])) = *(($6 + [36]))
	*((($5 + [112]) + [28])) = *(($6 + [28]))
	*($5 + [132 align=4]) = *($6 + [20 align=4])
	$6 = [1]
	$1 = *($5 + [240])
	if ( ((int_64)$1 == (int_64)1) ){ goto $label$61 }
	$9 = ((CASTING uint_32)(uint_64 $1) + [-2])
	$6 = *(($15 + [108]))
	if ( ((uint_32)((int_32)(*(($15 + [112])) - $6) / (int_32)[40]) <= (uint_32)$9) ){ goto $label$25 }
	$6 = *(($6 + ((int_32)$9 * (int_32)[40])) + [25])
	
.LABEL $label$61
	CALL eosio_assert($6, [8783])
	CALL eosio_assert(((int_32)*($5 + [137]) ^ (int_32)[1]), [10638])
	$13 = [0]
	$6 = [0]
	$10 = ($5 + [120])
	$9 = ($5 + [124])
	if ( ((int_32)(*($9) - *($10)) != (int_32)[2]) ){ goto $label$62 }
	$6 = [0]
	if ( (*(($5 + [132])) & [255]) ){ goto $label$62 }
	$6 = ((int_32)*($5 + [133]) ^ (int_32)[1])
	
.LABEL $label$62
	CALL eosio_assert($6, [10665])
	*($5 + [24]) = [0]
	*($5 + [16]) = (int_64)0
	$6 = (*($9) - *($10))
	if ( ($6 == 0) ){ goto $label$33 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$21 }
	$13 = CALL _Znwj($6)
	*((($5 + [16]) + [8])) = ($13 + $6)
	*($5 + [16]) = $13
	*($5 + [20]) = $13
	$9 = [0]
	$10 = *((($5 + [112]) + [8]))
	$6 = (*(($5 + [124])) - $10)
	if ( ((int_32)$6 <= (int_32)[0]) ){ goto $label$33 }
	CALL memcpy($13, $10, $6)
	$6 = (*($5 + [20]) + $6)
	*($5 + [20]) = $6
	$13 = *($5 + [16])
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$32 }
	$14 = ($6 - $13)
	$9 = [0]
	$6 = $13
	$10 = [0]
	
.LOOP $label$63:
	$11 = ($11 + [1])
	$12 = ($11 <= [10])
	$11 = ((uint_32)*($6) % (uint_32)[13])
	$10 = ($10 | (($11 == 0) & $12))
	$9 = (( $11 ? [10] : $12 ) + $9)
	$6 = ($6 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$63 }
	if ( ((uint_32)$9 >= (uint_32)[12]) ){ goto $label$32 }
	$9 = ( ($9 + [10]) ? $9 : ($10 & [1]) )
	if ( $13 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$35
	CALL eosio_assert(((int_32)$10 == (int_32)[2]), [10158])
	$11 = CALL $261(($5 + [72]), $4, ($14 + [1]), (($9 + [-1]) - $14), $4)
	$12 = CALL $261(($5 + [32]), $4, ($9 + [1]), [-1], $4)
	$6 = CALL $269($11, [0], [10])
	*($5 + [240]) = (CASTING int_64)(int_32 CALL $269($12, [0], [10]))
	$1 = (CASTING int_64)(int_32 $6)
	$6 = CALL db_lowerbound_i64(*($5 + [272]), *(($5 + [280])), (int_64)4312312276611760128, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$64 }
	$15 = CALL $77(($5 + [272]), $6)
	
.LABEL $label$64
	$4 = ((int_32)$15 != (int_32)[0])
	CALL eosio_assert($4, [8671])
	CALL eosio_assert(((int_64)*($15) == (int_64)$1), [8686])
	CALL eosio_assert(((int_32)*($15 + [132]) ^ (int_32)[1]), [10584])
	$6 = ($15 + [112])
	CALL eosio_assert(((uint_64)*($5 + [240]) <= (uint_64)(CASTING uint_64)(uint_32 ((int_32)(*($6) - *($15 + [108])) / (int_32)[40]))), [8730])
	$16 = ($15 + [108])
	$10 = (*($5 + [240]) + [-1])
	$9 = *($15 + [108])
	if ( ((uint_32)((int_32)(*($6) - $9) / (int_32)[40]) <= (uint_32)$10) ){ goto $label$24 }
	*((($5 + [112]) + [12])) = (int_64)0
	*($5 + [120]) = [0]
	$6 = ($9 + ((int_32)$10 * (int_32)[40]))
	*($5 + [112]) = *($6)
	$8 = ($6 + [12])
	$14 = (*($8) - *($6 + [8]))
	if ( ($14 == 0) ){ goto $label$65 }
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$20 }
	$13 = CALL _Znwj($14)
	*(($5 + [120])) = $13
	*(($5 + [128])) = ($13 + $14)
	*(($14 = ($5 + [124]))) = $13
	$8 = *(($6 + [8]))
	$6 = (*($8) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$65 }
	CALL memcpy($13, $8, $6)
	*($14) = (*($14) + $6)
	
.LABEL $label$65
	$6 = ($9 + ((int_32)$10 * (int_32)[40]))
	*((($5 + [112]) + [36])) = *(($6 + [36]))
	*((($5 + [112]) + [28])) = *(($6 + [28]))
	*($5 + [132 align=4]) = *($6 + [20 align=4])
	$6 = [1]
	$1 = *($5 + [240])
	if ( ((int_64)$1 == (int_64)1) ){ goto $label$66 }
	$9 = ((CASTING uint_32)(uint_64 $1) + [-2])
	$6 = *(($15 + [108]))
	if ( ((uint_32)((int_32)(*(($15 + [112])) - $6) / (int_32)[40]) <= (uint_32)$9) ){ goto $label$24 }
	$6 = *(($6 + ((int_32)$9 * (int_32)[40])) + [25])
	
.LABEL $label$66
	CALL eosio_assert($6, [8783])
	CALL eosio_assert(((int_32)*($5 + [137]) ^ (int_32)[1]), [10638])
	$6 = [0]
	$9 = [0]
	if ( ((int_32)(*(($5 + [124])) - *(($5 + [120]))) != (int_32)[2]) ){ goto $label$67 }
	$9 = [0]
	if ( (*(($5 + [132])) & [255]) ){ goto $label$67 }
	$9 = [0]
	if ( *($5 + [133]) ){ goto $label$67 }
	$9 = ((int_32)*($5 + [135]) ^ (int_32)[1])
	
.LABEL $label$67
	CALL eosio_assert($9, [10824])
	$9 = ((uint_32)*(*($15 + [120])) % (uint_32)[13])
	CALL eosio_assert((($9 == 0) & (($9 + [1]) <= [10])), [10847])
	CALL eosio_assert(((int_32)*($5 + [134]) ^ (int_32)[1]), [10876])
	$19 = *(($15 + [40]))
	$18 = *(($15 + [32]))
	$20 = ((int_64)*($15 + [24]) / (int_64)2)
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$1 = (uint_64)$18 >> (uint_64)(int_64)8)
	
.LOOP $label$69:
	$14 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$68 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$70 }
	$1 = $7
	$14 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	$1 = $7
	
.LOOP $label$71:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$68 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $9 ){ goto $label$71 }
	$14 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$69 }
	
.LABEL $label$68
	CALL eosio_assert($14, [12744])
	CALL eosio_assert(((int_64)$18 == (int_64)*(($3 + [8]))), [12933])
	CALL eosio_assert((((int_64)$20 == (int_64)*($3)) & ((int_64)$19 == (int_64)*(($3 + [16])))), [10906])
	$1 = *($0)
	*($5 + [224]) = ($5 + [240])
	CALL eosio_assert($4, [13817])
	CALL $179(($5 + [272]), $15, $1, ($5 + [224]))
	$6 = *($5 + [120])
	if ( ($6 == 0) ){ goto $label$72 }
	*(($5 + [124])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$72
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*($12 + [8]))
	
.LABEL $label$73
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($11 + [8]))
	if ( (*($5 + [256]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$34
	CALL $180(($5 + [296]), ($5 + [416]), ($5 + [32]), ($5 + [412]))
	$14 = *($5 + [416])
	*($5 + [416]) = [0]
	if ( $14 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$33
	$9 = [0]
	
.LABEL $label$32
	if ( ($13 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	*($5 + [20]) = $13
	CALL _ZdlPv($13)
	
.LABEL $label$30
	CALL eosio_assert((($9 + [-9]) <= [3]), [10683])
	CALL eosio_assert(((int_32)*($5 + [135]) ^ (int_32)[1]), [10738])
	CALL eosio_assert(((int_64)*(($15 + [32])) == (int_64)*(($3 + [8]))), [12933])
	$6 = [0]
	if ( ((int_64)*($15 + [24]) != (int_64)*($3)) ){ goto $label$74 }
	$6 = ((int_64)*(($15 + [40])) == (int_64)*(($3 + [16])))
	
.LABEL $label$74
	CALL eosio_assert($6, [10765])
	$1 = *($0)
	*($5 + [224]) = ($5 + [240])
	CALL eosio_assert($16, [13817])
	CALL $181(($5 + [272]), $15, $1, ($5 + [224]))
	$6 = *($5 + [120])
	if ( ($6 == 0) ){ goto $label$75 }
	*(($5 + [124])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$75
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$76
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($8 + [8]))
	if ( (*($5 + [256]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$29
	$6 = $10
	
.LABEL $label$28
	*($15) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$27
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$77 }
	CALL _ZdlPv(*($12 + [8]))
	
.LABEL $label$77
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($11 + [8]))
	if ( (*($5 + [256]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$26
	CALL $277($8)
	
.LABEL $label$25
	CALL $277($13)
	
.LABEL $label$24
	CALL $277($16)
	
.LABEL $label$23
	CALL $276((($5 + [72]) + [8]))
	
.LABEL $label$22
	CALL $276((($5 + [112]) + [8]))
	
.LABEL $label$21
	CALL $276(($5 + [16]))
	
.LABEL $label$20
	CALL $276((($5 + [112]) + [8]))
	
.LABEL $label$19
	$6 = *($14 + [120])
	if ( ($6 == 0) ){ goto $label$78 }
	*(($14 + [124])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$78
	$15 = *($14 + [108])
	if ( ($15 == 0) ){ goto $label$79 }
	$12 = ($14 + [112])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$15) ){ goto $label$81 }
	
.LOOP $label$82:
	$9 = ($6 + [-40])
	$10 = *(($6 + [-32]))
	if ( ($10 == 0) ){ goto $label$83 }
	*(($6 + [-28])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$83
	$6 = $9
	if ( ((int_32)$15 != (int_32)$9) ){ goto $label$82 }
	$6 = *(($14 + [108]))
	goto $label$80 
	
.LABEL $label$81
	$6 = $15
	
.LABEL $label$80
	*($12) = $15
	CALL _ZdlPv($6)
	
.LABEL $label$79
	if ( ((*($14 + [96]) & [1]) == 0) ){ goto $label$84 }
	CALL _ZdlPv(*(($14 + [104])))
	
.LABEL $label$84
	if ( ((*($14 + [48]) & [1]) == 0) ){ goto $label$85 }
	CALL _ZdlPv(*(($14 + [56])))
	
.LABEL $label$85
	CALL _ZdlPv($14)
	
.LABEL $label$18
	*($5 + [312]) = ((int_64)*($5 + [312]) + (int_64)1)
	CALL $69(($5 + [320]), ($5 + [312]), *($0))
	if ( (*($5 + [160]) & [1]) ){ goto $label$93 }
	if ( (*($5 + [176]) & [1]) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$93
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($5 + [176]) & [1]) == 0) ){ goto $label$91 }
	
.LABEL $label$92
	CALL _ZdlPv(*($13 + [8]))
	$6 = [1]
	if ( ((*($5 + [208]) & [1]) == 0) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	$6 = [1]
	if ( (*($5 + [208]) & [1]) ){ goto $label$89 }
	
.LABEL $label$90
	if ( (*($5 + [224]) & $6) ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$89
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($5 + [224]) & $6) == 0) ){ goto $label$87 }
	
.LABEL $label$88
	CALL _ZdlPv(*($16 + [8]))
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$17 }
	goto $label$86 
	
.LABEL $label$87
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$86
	CALL _ZdlPv(*(($8 + [8])))
	if ( (*($5 + [256]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((*($5 + [256]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($5 + [264]))
	
.LABEL $label$15
	$10 = *($5 + [296])
	if ( ($10 == 0) ){ goto $label$94 }
	$15 = ($5 + [300])
	$6 = *($15)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$96 }
	$6 = ($6 + [-24])
	
.LOOP $label$97:
	$9 = CALL $79($6)
	$6 = ($6 + [-24])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$97 }
	$6 = *(($5 + [296]))
	goto $label$95 
	
.LABEL $label$96
	$6 = $10
	
.LABEL $label$95
	*($15) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$94
	$10 = *($5 + [344])
	if ( ($10 == 0) ){ goto $label$98 }
	$15 = ($5 + [348])
	$6 = *($15)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$100 }
	
.LOOP $label$101:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$102 }
	CALL _ZdlPv($9)
	
.LABEL $label$102
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$101 }
	$6 = *(($5 + [344]))
	goto $label$99 
	
.LABEL $label$100
	$6 = $10
	
.LABEL $label$99
	*($15) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$98
	$10 = *($5 + [384])
	if ( ($10 == 0) ){ goto $label$103 }
	$15 = ($5 + [388])
	$6 = *($15)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$105 }
	
.LOOP $label$106:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$107 }
	CALL _ZdlPv($9)
	
.LABEL $label$107
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$106 }
	$6 = *(($5 + [384]))
	goto $label$104 
	
.LABEL $label$105
	$6 = $10
	
.LABEL $label$104
	*($15) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$103
	$global$0 = ($5 + [432])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $91(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$2 = ($global$0 - [224])
	$global$0 = $2
	*($2 + [208]) = (int_64)0
	*($2 + [216]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	$4 = ((int_32)$3 / (int_32)[12])
	$5 = *($1 + [8])
	$6 = *($1)
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$5 }
	$3 = CALL _Znwj($3)
	*(($2 + [216])) = ($3 + ((int_32)$4 * (int_32)[12]))
	*($2 + [208]) = $3
	*($2 + [212]) = $3
	$7 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = CALL $260($3, $4)
	$3 = ($3 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	*($2 + [212]) = ($8 + [12])
	
.LABEL $label$6
	*($2 + [200]) = [0]
	*($2 + [192]) = (int_64)0
	$3 = (*(($1 + [32])) - *($1 + [28]))
	$4 = ((int_32)$3 / (int_32)[12])
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$4 }
	$3 = CALL _Znwj($3)
	*(($2 + [200])) = ($3 + ((int_32)$4 * (int_32)[12]))
	*($2 + [192]) = $3
	*($2 + [196]) = $3
	$7 = *(($1 + [32]))
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = CALL $260($3, $4)
	$3 = ($3 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	*($2 + [196]) = ($8 + [12])
	
.LABEL $label$8
	$3 = CALL $260(($2 + [176]), ($1 + [40]))
	$4 = CALL $260(($2 + [160]), ($1 + [52]))
	*(($7 = (($2 + [144]) + [8]))) = *(($1 + [80]))
	*(($8 = (($2 + [128]) + [8]))) = *(($1 + [96]))
	*(($9 = (($2 + [112]) + [8]))) = *(($1 + [112]))
	*(($10 = (($2 + [96]) + [8]))) = *(($1 + [128]))
	*($2 + [144]) = *($1 + [72])
	*($2 + [128]) = *($1 + [88])
	*($2 + [112]) = *($1 + [104])
	*($2 + [96]) = *($1 + [120])
	$11 = *($1 + [65])
	$12 = *($1 + [64])
	*(($13 = (($2 + [80]) + [8]))) = *(($1 + [144]))
	$14 = *($1 + [136])
	*((($2 + [64]) + [8])) = *($7)
	*((($2 + [48]) + [8])) = *($8)
	*((($2 + [32]) + [8])) = *($9)
	*((($2 + [16]) + [8])) = *($10)
	*($2 + [80]) = $14
	*($2 + [64]) = *($2 + [144])
	*($2 + [48]) = *($2 + [128])
	*($2 + [32]) = *($2 + [112])
	*($2 + [16]) = *($2 + [96])
	*(($2 + [8])) = *($13)
	*($2) = *($2 + [80])
	CALL $216($0, $6, $5, ($2 + [208]), ($2 + [192]), $3, $4, $12, $11, ($2 + [64]), ($2 + [48]), ($2 + [32]), ($2 + [16]), $2)
	if ( (*($4) & [1]) ){ goto $label$11 }
	if ( (*($3) & [1]) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$10
	CALL _ZdlPv(*($3 + [8]))
	$1 = *($2 + [192])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $276(($2 + [208]))
	
.LABEL $label$4
	CALL $276(($2 + [192]))
	
.LABEL $label$3
	$1 = *($2 + [192])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = *($2 + [196])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *($2 + [192])
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2 + [196]) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($2 + [208])
	if ( ($1 == 0) ){ goto $label$16 }
	$4 = *($2 + [212])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$20
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *($2 + [208])
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2 + [212]) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$global$0 = ($2 + [224])
	(unreachable)
	(unreachable)
}

void .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $91(*($1), (*($0) + [40]))
	$3 = *($0)
	CALL $91(*($1), ($3 + [52]))
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [12690])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($3 + [64]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [12690])
	CALL memcpy(($2 + [14]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($3 + [65]) = ((int_32)*($2 + [14]) != (int_32)[0])
	*($2 + [8]) = $3
	CALL $215(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [16]) = [0]
	*($2) = ($2 + [16])
	$4 = ($1 + [8])
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	$5 = ($1 + [16])
	*($2 + [32]) = $5
	$6 = ($1 + [28])
	*($2 + [36]) = $6
	$7 = ($1 + [40])
	*($2 + [40]) = $7
	$8 = ($1 + [52])
	*($2 + [44]) = $8
	$9 = ($1 + [64])
	*($2 + [48]) = $9
	$10 = ($1 + [65])
	*($2 + [52]) = $10
	$11 = ($1 + [72])
	*($2 + [56]) = $11
	$12 = ($1 + [88])
	*($2 + [60]) = $12
	$13 = ($1 + [104])
	*($2 + [64]) = $13
	$14 = ($1 + [120])
	*($2 + [68]) = $14
	$15 = ($1 + [136])
	*($2 + [72]) = $15
	CALL $249(($2 + [24]), $2)
	$16 = *($2 + [16])
	if ( ($16 == 0) ){ goto $label$2 }
	CALL $173($0, $16)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	*($2 + [16]) = $2
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	*($2 + [32]) = $5
	*($2 + [36]) = $6
	*($2 + [40]) = $7
	*($2 + [44]) = $8
	*($2 + [48]) = $9
	*($2 + [52]) = $10
	*($2 + [56]) = $11
	*($2 + [60]) = $12
	*($2 + [64]) = $13
	*($2 + [68]) = $14
	*($2 + [72]) = $15
	CALL $250(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [80])
}

int_64 .FUNC $289 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $288($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $278()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $288($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [22881]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $287($0, (int_64)0)
	*(CALL $278()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $288($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $288($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $288($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $288($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [22881])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [22881]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [22881]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $288($0)
	$5 = *(($6 + [22881]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $288($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [22881]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8214]))
	$8 = (int_64)0
	$5 = *(($6 + [22881]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [22881]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $288($0)
	$5 = *(($6 + [22881]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $288($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [22881]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $287($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [22881]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [22881]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $288($0) + [22881]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $278()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $278()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $278()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $230 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $244 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $276($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $169 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	*($1) = *(*($3))
	CALL eosio_assert([1], [13949])
	CALL eosio_assert([1], [12992])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4310307329183580160) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4310307329183580161
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $168 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [14008])
	*(($5 = CALL _Znwj([16])) + [4]) = $1
	*($5) = [0]
	$3 = *(*($3))
	*($5) = $3
	*($4 + [8]) = $3
	CALL eosio_assert([1], [12992])
	CALL memcpy(($4 + [16]), ($4 + [8]), [1])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4982871467403247616, $2, (int_64)4982871467403247616, ($4 + [16]), [1])
	*($5 + [8]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871467403247616) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4982871467403247617
	
.LABEL $label$1
	*($4 + [16]) = $5
	*($4 + [8]) = (int_64)4982871467403247616
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4982871467403247616
	*($3 + [16]) = $6
	*($4 + [16]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $217(($1 + [24]), ($4 + [16]), ($4 + [8]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [16])
	*($4 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $245 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $279 (int_32 $0)
{
}

int_64 .FUNC $175 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [13766])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4310307329183580160, (int_64)4310307329183580160)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $68($0, $2)
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [13766])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [14059])
	return *($1)
}

void .FUNC $242 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = (*($2) + [16])
	*(($2 = *($1))) = $1
	$3 = *($3)
	$3 = *($0 + [8])
	$4 = *($3 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)($4 - $3) / (int_32)[12]))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = *($3)
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$4:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$4 }
	*($2) = $1
	$6 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$5 }
	$1 = ($6 + $1)
	*($2) = $1
	
.LABEL $label$5
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = *($3)
	$3 = *($0 + [12])
	$4 = *($3 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)($4 - $3) / (int_32)[12]))
	
.LOOP $label$6:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$6 }
	*($2) = $1
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = *($3)
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$9:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($2) = $1
	$6 = *($3)
	$6 = ( *(($3 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$10 }
	$1 = ($6 + $1)
	*($2) = $1
	
.LABEL $label$10
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$11:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$11 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$12 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$12
	$6 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	
.LOOP $label$13:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$13 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$14 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$14
	*($2) = ($1 + [81])
}

int_32 .FUNC $288 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $286($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $243 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0 + [8])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($5 + [4]) - *($5)) / (int_32)[12]))
	$7 = *($1)
	$3 = *($7 + [4])
	$4 = ($7 + [4])
	
.LOOP $label$1:
	$8 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$9 = ((int_64)$6) != (int_64)0
	*($2 + [8]) = (($9) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)(*(($7 + [8])) - $3) > (int_32)[0]), [12992])
	CALL memcpy(*($4), ($2 + [8]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $9 ){ goto $label$1 }
	$3 = *(($5 + [4]))
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $226($7, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$10 = *($0 + [12])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($10 + [4]) - *($10)) / (int_32)[12]))
	$5 = *($1)
	$3 = *($5 + [4])
	$7 = ($5 + [8])
	$4 = ($5 + [4])
	
.LOOP $label$4:
	$8 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$9 = ((int_64)$6) != (int_64)0
	*($2 + [8]) = (($9) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $3) > (int_32)[0]), [12992])
	CALL memcpy(*($4), ($2 + [8]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $9 ){ goto $label$4 }
	$3 = *(($10 + [4]))
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $226($5, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$5
	CALL $226(*($1), *($0 + [16]))
	CALL $226(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$8 = (*($4 + [4]) + [8])
	*($4 + [4]) = $8
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $8) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [28]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$8 = (*($4 + [4]) + [8])
	*($4 + [4]) = $8
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $8) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$8 = (*($4 + [4]) + [8])
	*($4 + [4]) = $8
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $8) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$8 = (*($4 + [4]) + [8])
	*($4 + [4]) = $8
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $8) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$8 = (*($4 + [4]) + [8])
	*($4 + [4]) = $8
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $8) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $58 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)4310307329183580160, (int_64)4310307329183580160)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $68(($2 + [8]), $5) + [8]) == (int_32)($2 + [8])), [13766])
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [8481])
	*($2) = $1
	CALL $69(($2 + [8]), $2, *($0))
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $59 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)-3612860735888687104, (int_64)-3612860735888687104)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $105(($2 + [8]), $5) + [8]) == (int_32)($2 + [8])), [13766])
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [10950])
	*($2) = $1
	CALL $106(($2 + [8]), $2, *($0))
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $271 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $273($1, $0, [9035])
	CALL $275()
	(unreachable)
}

void .FUNC $270 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $273($1, $0, [9084])
	CALL $274()
	(unreachable)
}

void .FUNC $277 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $240 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$1 = (*($2) + [12])
	*(($2 = *($1))) = $1
	$3 = *($3)
	$3 = *($0 + [8])
	$4 = *($3 + [4])
	$5 = ($4 - $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$1 = ( $1 ? ($5 + $1) : ((int_32)$3 == (int_32)$4) )
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [12])
	$5 = *($3 + [4])
	$6 = (CASTING uint_64)(uint_32 ((int_32)($5 - $3) / (int_32)[12]))
	
.LOOP $label$2:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	*($2) = $1
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = *($3)
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$4 = *($3)
	$4 = ( *(($3 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$6 }
	$1 = ($4 + $1)
	*($2) = $1
	
.LABEL $label$6
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	
.LABEL $label$3
	$4 = *($3)
	$3 = *($0 + [16])
	$6 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$8
	*($2) = ($1 + [1])
}

void .FUNC $275 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $274 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = ($1 + [8])
	$6 = *($5)
	*((($4 + [64]) + [8])) = $6
	$7 = *($1)
	*((($4 + [8]) + [8])) = $6
	*($4 + [8]) = $7
	*($4 + [64]) = $7
	CALL $72($0, ($4 + [8]))
	CALL eosio_assert(((uint_64)$2 <= (uint_64)$3), [8569])
	$8 = [0]
	*((($4 + [24]) + [32])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$6 = *($0)
	*($4 + [24]) = $6
	$7 = *($5)
	*($4 + [32]) = $7
	$9 = *($1)
	$1 = CALL db_find_i64($6, $7, (int_64)4319875814817529856, (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $73(($4 + [24]), $1) + [32]) == (int_32)($4 + [24])), [13766])
	goto $label$1 
	
.LABEL $label$2
	$8 = [1]
	
.LABEL $label$1
	CALL eosio_assert($8, [8594])
	$6 = *($0)
	CALL eosio_assert(((int_64)*($4 + [24]) == (int_64)CALL $fimport$6()), [14008])
	*(($0 = CALL _Znwj([48])) + [32]) = ($4 + [24])
	*($0 + [8]) = $7
	*($0) = $9
	*($0 + [16]) = $2
	*($0 + [24]) = $3
	*($4 + [128]) = (($4 + [80]) + [32])
	*($4 + [124]) = ($4 + [80])
	*($4 + [120]) = ($4 + [80])
	*($4 + [136]) = ($4 + [120])
	*($4 + [148]) = ($0 + [8])
	*($4 + [144]) = $0
	*($4 + [152]) = ($0 + [16])
	*($4 + [156]) = ($0 + [24])
	CALL $74(($4 + [144]), ($4 + [136]))
	$2 = (uint_64)*($0) >> (uint_64)(int_64)8
	$8 = CALL db_store_i64(*((($4 + [24]) + [8])), (int_64)4319875814817529856, $6, $2), ($4 + [80]), [32]
	*($0 + [36]) = $8)
	$1 = (($4 + [24]) + [16])
	if ( (uint_64)($2 <= *($1)) ){ goto $label$3 }
	*($1) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$3
	*($4 + [144]) = $0
	$2 = (uint_64)*($0) >> (uint_64)(int_64)8
	*($4 + [80]) = $2)
	*($4 + [120]) = $8
	$5 = ($4 + [52])
	$1 = *($5)
	if ( ((uint_32)$1 >= (uint_32)*(($4 + [56]))) ){ goto $label$6 }
	*($1 + [8]) = $2
	*($1 + [16]) = $8
	*($4 + [144]) = [0]
	*($1) = $0
	*($5) = ($1 + [24])
	$0 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $75(($4 + [48]), ($4 + [144]), ($4 + [80]), ($4 + [120]))
	$0 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$8 = *($4 + [48])
	if ( ($8 == 0) ){ goto $label$7 }
	$5 = ($4 + [52])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($4 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $8
	
.LABEL $label$8
	*($5) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$global$0 = ($4 + [160])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$6 = ($global$0 - [144])
	$global$0 = $6
	CALL require_auth(*($0))
	CALL eosio_assert(((uint_64)$2 <= (uint_64)$3), [8569])
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$7 = *($0)
	*($6 + [8]) = $7
	$8 = *($1 + [8])
	*($6 + [16]) = $8
	$9 = [0]
	$1 = CALL db_find_i64($7, $8, (int_64)-3612561720712626176, (uint_64)*($1) >> (uint_64)(int_64)8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $108(($6 + [8]), $1)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)($6 + [8])), [13766])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [8615])
	$1 = [1]
	if ( ((int_64)*($9 + [16]) != (int_64)$2) ){ goto $label$2 }
	$1 = [1]
	if ( ((int_64)*($9 + [24]) != (int_64)$3) ){ goto $label$2 }
	$1 = [1]
	if ( ((int_64)*($9 + [32]) != (int_64)$4) ){ goto $label$2 }
	$1 = ((int_64)*($9 + [40]) != (int_64)$5)
	
.LABEL $label$2
	CALL eosio_assert($1, [8636])
	$7 = *($0)
	CALL eosio_assert($10, [13817])
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)($6 + [8])), [13852])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$6()), [13898])
	*($9 + [16]) = $2
	*($9 + [24]) = $3
	*($9 + [32]) = $4
	*($9 + [40]) = $5
	$2 = *($9)
	CALL eosio_assert([1], [13949])
	*($6 + [104]) = (($6 + [48]) + [48])
	*($6 + [100]) = ($6 + [48])
	*($6 + [96]) = ($6 + [48])
	*($6 + [112]) = ($6 + [96])
	*($6 + [124]) = ($9 + [8])
	*($6 + [120]) = $9
	*($6 + [128]) = ($9 + [16])
	*($6 + [132]) = ($9 + [24])
	*($6 + [136]) = ($9 + [32])
	*($6 + [140]) = ($9 + [40])
	CALL $109(($6 + [120]), ($6 + [112]))
	CALL db_update_i64(*($9 + [52]), $7, ($6 + [48]), [48])
	$9 = (($6 + [8]) + [16])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($9)) ){ goto $label$3 }
	*($9) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$3
	$1 = *($6 + [32])
	if ( ($1 == 0) ){ goto $label$4 }
	$10 = ($6 + [36])
	$9 = *($10)
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$9 = ($9 + [-24])
	$0 = *($9)
	*($9) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$9) ){ goto $label$7 }
	$9 = *(($6 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$9 = $1
	
.LABEL $label$5
	*($10) = $1
	CALL _ZdlPv($9)
	
.LABEL $label$4
	$global$0 = ($6 + [144])
}

void .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = [0]
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	$3 = *($0)
	*($1) = $3
	*($1 + [8]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)4310307329183580160, (int_64)4310307329183580160)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $68($1, $0) + [8]) == (int_32)$1), [13766])
	$2 = [1]
	
.LABEL $label$1
	CALL eosio_assert($2, [8527])
	$0 = *(($1 + [28]))
	if ( ((int_32)$0 == (int_32)*(($1 + [24]))) ){ goto $label$4 }
	$0 = *(($0 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$1), [13766])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$0 = CALL db_find_i64(*($1), *(($1 + [8])), (int_64)4310307329183580160, (int_64)4310307329183580160)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $68($1, $0)
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$1), [13766])
	
.LABEL $label$3
	CALL eosio_assert([1], [14084])
	CALL eosio_assert([1], [14118])
	$2 = CALL db_next_i64(*($0 + [12]), ($1 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	CALL $68($1, $2)
	
.LABEL $label$5
	CALL $70($1, $0)
	
.LABEL $label$2
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = ($1 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($1 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $4
	
.LABEL $label$7
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($1 + [48])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	*($2 + [16]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $62(($2 + [8]), $5) + [4]) == (int_32)($2 + [8])), [13766])
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [8374])
	CALL eosio_assert((((int_32)CALL $64(($2 + [8])) ^ (int_32)$1) & [1]), [8404])
	*($2) = $1
	CALL $63(($2 + [8]), $2, *($0))
	$3 = *($2 + [32])
	if ( ($3 == 0) ){ goto $label$2 }
	$5 = ($2 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $3
	
.LABEL $label$3
	*($5) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

int_32 .FUNC $54 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [12690])
	CALL memcpy(($4 + [32]), $2, [1])
	$8 = *($4 + [32])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [1])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$3 = CALL $5(($4 + [32]), $0, $1, $4)
	$9 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($9) + $6))
	
.LABEL $label$4
	CALL void $9((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$11 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($3 + [40]) & $2) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [36])))
	$global$0 = ($4 + [256])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [256])
	return $2
}

void .FUNC $55 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	$6 = ($global$0 - [624])
	$global$0 = $6
	CALL require_auth(*($0))
	$7 = [0]
	*(($6 + [600])) = [0]
	*($6 + [584]) = (int_64)-1
	*($6 + [592]) = (int_64)0
	$8 = *($0)
	*($6 + [568]) = $8
	*($6 + [576]) = $8
	$9 = [0]
	$10 = CALL db_find_i64($8, $8, (int_64)-3590843033098125312, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $151(($6 + [568]), $10)
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)($6 + [568])), [13766])
	
.LABEL $label$1
	$11 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($11, [8671])
	CALL eosio_assert(((int_64)*($9) == (int_64)$1), [8686])
	$10 = ($10 & [1])
	$10 = *($9 + [64])
	$13 = ($10 & [1])
	$10 = *($3)
	$12 = uint_32($10 >> [1])
	$14 = ( *($3 + [4]) ? $12 : $13 )
	if ( ((int_32)$14 != (int_32)( *(($9 + [68])) ? uint_32($10 >> [1]) : $10 )) ){ goto $label$2 }
	$10 = ( *(($9 + [72])) ? (($9 + [64]) + [1]) : $10 )
	$15 = ($3 + [1])
	if ( $13 ){ goto $label$5 }
	if ( ($14 == 0) ){ goto $label$4 }
	$13 = ([0] - $12)
	
.LOOP $label$6:
	if ( ((int_32)*($15) != (int_32)*($10)) ){ goto $label$3 }
	$7 = [1]
	$10 = ($10 + [1])
	$15 = ($15 + [1])
	$13 = ($13 + [1])
	if ( $13 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$5
	if ( ($14 == 0) ){ goto $label$4 }
	$7 = (CALL $291(( *($3 + [8]) ? $15 : $13 ), $10, $14) == 0)
	goto $label$2 
	
.LABEL $label$4
	$7 = [1]
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [9626])
	$10 = [0]
	if ( ((int_32)*($5) != (int_32)*($9 + [80])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [1]) & [255]) != (int_32)(*(($9 + [81])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [2]) & [255]) != (int_32)(*(($9 + [82])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [3]) & [255]) != (int_32)(*(($9 + [83])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [4]) & [255]) != (int_32)(*(($9 + [84])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [5]) & [255]) != (int_32)(*(($9 + [85])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [6]) & [255]) != (int_32)(*(($9 + [86])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [7]) & [255]) != (int_32)(*(($9 + [87])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [8]) & [255]) != (int_32)(*(($9 + [88])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [9]) & [255]) != (int_32)(*(($9 + [89])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [10]) & [255]) != (int_32)(*(($9 + [90])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [11]) & [255]) != (int_32)(*(($9 + [91])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [12]) & [255]) != (int_32)(*(($9 + [92])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [13]) & [255]) != (int_32)(*(($9 + [93])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [14]) & [255]) != (int_32)(*(($9 + [94])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [15]) & [255]) != (int_32)(*(($9 + [95])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [16]) & [255]) != (int_32)(*(($9 + [96])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [17]) & [255]) != (int_32)(*(($9 + [97])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [18]) & [255]) != (int_32)(*(($9 + [98])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [19]) & [255]) != (int_32)(*(($9 + [99])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [20]) & [255]) != (int_32)(*(($9 + [100])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [21]) & [255]) != (int_32)(*(($9 + [101])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [22]) & [255]) != (int_32)(*(($9 + [102])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [23]) & [255]) != (int_32)(*(($9 + [103])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [24]) & [255]) != (int_32)(*(($9 + [104])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [25]) & [255]) != (int_32)(*(($9 + [105])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [26]) & [255]) != (int_32)(*(($9 + [106])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [27]) & [255]) != (int_32)(*(($9 + [107])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [28]) & [255]) != (int_32)(*(($9 + [108])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [29]) & [255]) != (int_32)(*(($9 + [109])) & [255])) ){ goto $label$7 }
	if ( ((int_32)(*($5 + [30]) & [255]) != (int_32)(*(($9 + [110])) & [255])) ){ goto $label$7 }
	$10 = ((int_32)*(($5 + [31])) == (int_32)*(($9 + [111])))
	
.LABEL $label$7
	CALL eosio_assert($10, [9647])
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$9 }
	$10 = uint_32($10 >> [1])
	$15 = ($4 + [1])
	goto $label$8 
	
.LABEL $label$9
	$10 = *($4 + [4])
	$15 = *($4 + [8])
	
.LABEL $label$8
	CALL sha256($15, $10, ($6 + [528]))
	$15 = [1]
	$10 = [0]
	if ( ((int_32)*($6 + [528]) != (int_32)*($5)) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [529]) & [255]) != (int_32)(*(($5 + [1])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [530]) & [255]) != (int_32)(*(($5 + [2])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [531]) & [255]) != (int_32)(*(($5 + [3])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [532]) & [255]) != (int_32)(*(($5 + [4])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [533]) & [255]) != (int_32)(*(($5 + [5])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [534]) & [255]) != (int_32)(*(($5 + [6])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [535]) & [255]) != (int_32)(*(($5 + [7])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [536]) & [255]) != (int_32)(*(($5 + [8])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [537]) & [255]) != (int_32)(*(($5 + [9])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [538]) & [255]) != (int_32)(*(($5 + [10])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [539]) & [255]) != (int_32)(*(($5 + [11])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [540]) & [255]) != (int_32)(*(($5 + [12])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [541]) & [255]) != (int_32)(*(($5 + [13])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [542]) & [255]) != (int_32)(*(($5 + [14])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [543]) & [255]) != (int_32)(*(($5 + [15])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [544]) & [255]) != (int_32)(*(($5 + [16])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [545]) & [255]) != (int_32)(*(($5 + [17])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [546]) & [255]) != (int_32)(*(($5 + [18])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [547]) & [255]) != (int_32)(*(($5 + [19])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [548]) & [255]) != (int_32)(*(($5 + [20])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [549]) & [255]) != (int_32)(*(($5 + [21])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [550]) & [255]) != (int_32)(*(($5 + [22])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [551]) & [255]) != (int_32)(*(($5 + [23])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [552]) & [255]) != (int_32)(*(($5 + [24])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [553]) & [255]) != (int_32)(*(($5 + [25])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [554]) & [255]) != (int_32)(*(($5 + [26])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [555]) & [255]) != (int_32)(*(($5 + [27])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [556]) & [255]) != (int_32)(*(($5 + [28])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [557]) & [255]) != (int_32)(*(($5 + [29])) & [255])) ){ goto $label$10 }
	if ( ((int_32)(*($6 + [558]) & [255]) != (int_32)(*(($5 + [30])) & [255])) ){ goto $label$10 }
	$10 = ((int_32)*($6 + [559]) == (int_32)*(($5 + [31])))
	
.LABEL $label$10
	CALL eosio_assert($10, [9673])
	if ( (int_64)(*($9 + [24]) == 0) ){ goto $label$11 }
	if ( *($9 + [124]) ){ goto $label$11 }
	$15 = ((int_32)*($9 + [125]) != (int_32)[0])
	
.LABEL $label$11
	CALL eosio_assert($15, [12261])
	CALL $97(($6 + [512]), $3, $4)
	$5 = *($6 + [512])
	$10 = ($5 & [1])
	CALL sha256(( *($6 + [520]) ? (($6 + [512]) | [1]) : $10 ), ( *($6 + [516]) ? uint_32($5 >> [1]) : $10 ), ($6 + [480]))
	*(($5 = (($6 + [432]) + [16]))) = *((($6 + [480]) + [16]))
	*(($15 = (($6 + [432]) + [24]))) = *((($6 + [480]) + [24]))
	$10 = [0]
	*($6 + [472]) = [0]
	*($6 + [464]) = (int_64)0
	*($6 + [432]) = *($6 + [480])
	*($6 + [440]) = *($6 + [488])
	*((($6 + [96]) + [24])) = *($15)
	*((($6 + [96]) + [16])) = *($5)
	*($6 + [104]) = *($6 + [440])
	*($6 + [96]) = *($6 + [432])
	$4 = ($6 + [472])
	$3 = [0]
	$7 = [0]
	
.LOOP $label$14:
	$15 = ($3 - $10)
	if ( ((int_32)$15 == (int_32)[6]) ){ goto $label$13 }
	$5 = *((($6 + [96]) + $7))
	if ( ((uint_32)$5 > (uint_32)[207]) ){ goto $label$15 }
	$13 = ((uint_32)$5 % (uint_32)[52])
	*($6 + [304]) = $13
	if ( ($15 == 0) ){ goto $label$16 }
	$5 = [0]
	
.LOOP $label$17:
	if ( ((int_32)*(($10 + $5)) == (int_32)($13 & [255])) ){ goto $label$15 }
	$5 = ($5 + [1])
	if ( ($5 <= $15) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((int_32)*($4) == (int_32)$3) ){ goto $label$18 }
	*($3) = $13
	*($6 + [468]) = (*($6 + [468]) + [1])
	goto $label$15 
	
.LABEL $label$18
	CALL $159(($6 + [464]), ($6 + [304]))
	
.LABEL $label$15
	$10 = *($6 + [464])
	$3 = *($6 + [468])
	$7 = ($7 + [1])
	if ( ($7 <= [32]) ){ goto $label$14 }
	$5 = ($3 - $10)
	goto $label$12 
	
.LABEL $label$13
	$5 = [6]
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$5 == (int_32)[6]), [12297])
	$10 = *($9 + [112])
	$13 = ($9 + [116])
	if ( ((int_32)*($13) == (int_32)$10) ){ goto $label$23 }
	$5 = [0]
	$7 = ($9 + [112])
	
.LOOP $label$24:
	$15 = *($6 + [464])
	if ( ((uint_32)(*($6 + [468]) - $15) <= (uint_32)$5) ){ goto $label$22 }
	CALL eosio_assert(((int_32)*(($15 + $5)) == (int_32)*(($10 + $5))), [12325])
	$10 = *($7)
	$5 = ($5 + [1])
	if ( ($5 <= (*($13) - $10)) ){ goto $label$24 }
	
.LABEL $label$23
	*($6 + [424]) = [0]
	*($6 + [416]) = (int_64)0
	*($6 + [408]) = [0]
	*($6 + [400]) = (int_64)0
	$5 = *($6 + [464])
	if ( ((int_32)*($6 + [468]) == (int_32)$5) ){ goto $label$25 }
	$10 = *($6 + [420])
	if ( ((int_32)$10 == (int_32)*(($6 + [424]))) ){ goto $label$27 }
	*($10) = *($5)
	*($6 + [420]) = (*($6 + [420]) + [1])
	goto $label$26 
	
.LABEL $label$27
	CALL $159(($6 + [416]), $5)
	
.LABEL $label$26
	$5 = *($6 + [464])
	if ( ((*($6 + [468]) - $5) <= [2]) ){ goto $label$25 }
	$5 = ($5 + [1])
	$10 = *($6 + [420])
	if ( ((int_32)$10 == (int_32)*(($6 + [424]))) ){ goto $label$29 }
	*($10) = *($5)
	*($6 + [420]) = (*($6 + [420]) + [1])
	goto $label$28 
	
.LABEL $label$29
	CALL $159(($6 + [416]), $5)
	
.LABEL $label$28
	$5 = *($6 + [464])
	if ( ((*($6 + [468]) - $5) <= [3]) ){ goto $label$25 }
	$5 = ($5 + [2])
	$10 = *($6 + [420])
	if ( ((int_32)$10 == (int_32)*(($6 + [424]))) ){ goto $label$31 }
	*($10) = *($5)
	*($6 + [420]) = (*($6 + [420]) + [1])
	goto $label$30 
	
.LABEL $label$31
	CALL $159(($6 + [416]), $5)
	
.LABEL $label$30
	$10 = *($6 + [464])
	if ( ((*($6 + [468]) - $10) <= [4]) ){ goto $label$25 }
	$5 = [3]
	$13 = ($6 + [408])
	
.LOOP $label$32:
	$10 = ($10 + $5)
	$15 = *($6 + [404])
	if ( ((int_32)$15 == (int_32)*($13)) ){ goto $label$34 }
	*($15) = *($10)
	*($6 + [404]) = (*($6 + [404]) + [1])
	goto $label$33 
	
.LABEL $label$34
	CALL $159(($6 + [400]), $10)
	
.LABEL $label$33
	$10 = *($6 + [464])
	$5 = ($5 + [1])
	if ( ($5 <= (*($6 + [468]) - $10)) ){ goto $label$32 }
	
.LABEL $label$25
	CALL $141(($6 + [392]), ($6 + [416]), ($6 + [400]))
	$7 = [1]
	if ( ((uint_32)*($6 + [394]) > (uint_32)[1]) ){ goto $label$35 }
	$5 = [0]
	$10 = *($6 + [395])
	if ( ((int_32)$10 == (int_32)[12]) ){ goto $label$36 }
	$5 = (((int_32)$10 != (int_32)[1]) & ($10 <= [12]))
	
.LABEL $label$36
	$7 = ((int_32)$5 ^ (int_32)[1])
	
.LABEL $label$35
	if ( (*($9 + [124]) == 0) ){ goto $label$44 }
	if ( ($7 == 0) ){ goto $label$43 }
	$5 = *($6 + [396])
	if ( ((int_32)$5 == (int_32)[3]) ){ goto $label$42 }
	if ( ((int_32)$5 != (int_32)[1]) ){ goto $label$41 }
	$16 = *(($9 + [32]))
	$8 = *(($9 + [24]))
	CALL eosio_assert(((int_64)$8 < (int_64)1152921504606846976), [12804])
	CALL eosio_assert(((int_64)$8 > (int_64)-1152921504606846976), [12828])
	$17 = ((int_64)$8 << (int_64)2)
	goto $label$37 
	
.LABEL $label$44
	$16 = *(($9 + [32]))
	CALL eosio_assert([1], [12695])
	$8 = (uint_64)$16 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$46 }
	$18 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$48 }
	$8 = $18
	$10 = [1]
	$15 = $5
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$48
	$8 = $18
	
.LOOP $label$49:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$46 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$15 = ($5 + [1])
	$5 = $15
	if ( $10 ){ goto $label$49 }
	$10 = [1]
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	$10 = [0]
	
.LABEL $label$45
	CALL eosio_assert($10, [12744])
	goto $label$38 
	
.LABEL $label$43
	$8 = *(($9 + [24]))
	CALL __multi3(($6 + [80]), $8, (int_64)$8 >> (int_64)63), (int_64)3, (int_64)0)
	$16 = *(($9 + [32]))
	$8 = *(($6 + [88]))
	$17 = *($6 + [80])
	CALL eosio_assert(( (uint_64)($17 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$17 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [12828])
	goto $label$37 
	
.LABEL $label$42
	$16 = *(($9 + [32]))
	CALL eosio_assert([1], [12695])
	$8 = (uint_64)$16 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$50:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$18 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$51 }
	$8 = $18
	$10 = [1]
	$15 = $5
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$50 }
	goto $label$39 
	
.LABEL $label$51
	$8 = $18
	
.LOOP $label$52:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$15 = ($5 + [1])
	$5 = $15
	if ( $10 ){ goto $label$52 }
	$10 = [1]
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$50 }
	goto $label$39 
	
.LABEL $label$41
	$16 = *(($9 + [32]))
	$8 = *(($9 + [24]))
	CALL eosio_assert(((int_64)$8 < (int_64)2305843009213693952), [12804])
	CALL eosio_assert(((int_64)$8 > (int_64)-2305843009213693952), [12828])
	$17 = ((int_64)$8 << (int_64)1)
	goto $label$37 
	
.LABEL $label$40
	$10 = [0]
	
.LABEL $label$39
	CALL eosio_assert($10, [12744])
	
.LABEL $label$38
	$17 = (int_64)0
	
.LABEL $label$37
	$18 = *(($9 + [24]))
	if ( ((int_64)$18 < (int_64)1) ){ goto $label$58 }
	$5 = *($6 + [392])
	if ( ((int_32)$5 == (int_32)[4]) ){ goto $label$56 }
	if ( ((int_32)$5 == (int_32)[5]) ){ goto $label$57 }
	if ( ((int_32)$5 != (int_32)[6]) ){ goto $label$55 }
	CALL __multi3(($6 + [64]), $18, (int_64)$18 >> (int_64)63), (int_64)5, (int_64)0)
	$19 = *(($9 + [32]))
	$8 = *(($6 + [72]))
	$18 = *($6 + [64])
	CALL eosio_assert(( (uint_64)($18 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$18 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [12828])
	$8 = *($9 + [40])
	if ( ((int_64)$8 >= (int_64)1) ){ goto $label$53 }
	goto $label$21 
	
.LABEL $label$58
	$19 = *(($9 + [32]))
	CALL eosio_assert([1], [12695])
	$8 = (uint_64)$19 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$61:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$18 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$62 }
	$8 = $18
	$10 = [1]
	$15 = $5
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$62
	$8 = $18
	
.LOOP $label$63:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$60 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$15 = ($5 + [1])
	$5 = $15
	if ( $10 ){ goto $label$63 }
	$10 = [1]
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$60
	$10 = [0]
	
.LABEL $label$59
	CALL eosio_assert($10, [12744])
	goto $label$54 
	
.LABEL $label$57
	$19 = *(($9 + [32]))
	CALL eosio_assert(((int_64)$18 < (int_64)1152921504606846976), [12804])
	CALL eosio_assert([1], [12828])
	$18 = ((int_64)$18 << (int_64)2)
	$8 = *($9 + [40])
	if ( ((int_64)$8 >= (int_64)1) ){ goto $label$53 }
	goto $label$21 
	
.LABEL $label$56
	$19 = *(($9 + [32]))
	CALL eosio_assert(((int_64)$18 < (int_64)4611686018427387904), [12804])
	CALL eosio_assert([1], [12828])
	$8 = *($9 + [40])
	if ( ((int_64)$8 >= (int_64)1) ){ goto $label$53 }
	goto $label$21 
	
.LABEL $label$55
	$19 = *(($9 + [32]))
	CALL eosio_assert([1], [12695])
	$8 = (uint_64)$19 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$66:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$65 }
	$18 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$67 }
	$8 = $18
	$10 = [1]
	$15 = $5
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$66 }
	goto $label$64 
	
.LABEL $label$67
	$8 = $18
	
.LOOP $label$68:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$65 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$15 = ($5 + [1])
	$5 = $15
	if ( $10 ){ goto $label$68 }
	$10 = [1]
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$66 }
	goto $label$64 
	
.LABEL $label$65
	$10 = [0]
	
.LABEL $label$64
	CALL eosio_assert($10, [12744])
	
.LABEL $label$54
	$18 = (int_64)0
	$8 = *($9 + [40])
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$21 }
	
.LABEL $label$53
	$5 = (*($6 + [392]) + [-2])
	if ( ((uint_32)$5 > (uint_32)[4]) ){ goto $label$69 }
	goto $label$74 
	
.LABEL $label$74
	$20 = *(($9 + [48]))
	CALL eosio_assert(((int_64)$8 < (int_64)2305843009213693952), [12804])
	CALL eosio_assert([1], [12828])
	$22 = ((int_64)$8 << (int_64)1)
	goto $label$19 
	
.LABEL $label$73
	CALL __multi3(($6 + [16]), $8, (int_64)$8 >> (int_64)63), (int_64)51, (int_64)0)
	$20 = *(($9 + [48]))
	$8 = *(($6 + [24]))
	$22 = *($6 + [16])
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [12828])
	goto $label$19 
	
.LABEL $label$72
	CALL __multi3(($6 + [48]), $8, (int_64)$8 >> (int_64)63), (int_64)7, (int_64)0)
	$20 = *(($9 + [48]))
	$8 = *(($6 + [56]))
	$22 = *($6 + [48])
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [12828])
	goto $label$19 
	
.LABEL $label$71
	CALL __multi3(($6 + [32]), $8, (int_64)$8 >> (int_64)63), (int_64)31, (int_64)0)
	$20 = *(($9 + [48]))
	$8 = *(($6 + [40]))
	$22 = *($6 + [32])
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [12828])
	goto $label$19 
	
.LABEL $label$70
	$20 = *(($9 + [48]))
	CALL eosio_assert(((int_64)$8 < (int_64)1152921504606846976), [12804])
	CALL eosio_assert([1], [12828])
	$22 = ((int_64)$8 << (int_64)2)
	goto $label$19 
	
.LABEL $label$69
	$20 = *(($9 + [48]))
	CALL eosio_assert([1], [12695])
	$8 = (uint_64)$20 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$77:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$76 }
	$21 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$78 }
	$8 = $21
	$10 = [1]
	$15 = $5
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$77 }
	goto $label$75 
	
.LABEL $label$78
	$8 = $21
	
.LOOP $label$79:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$76 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$15 = ($5 + [1])
	$5 = $15
	if ( $10 ){ goto $label$79 }
	$10 = [1]
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$77 }
	goto $label$75 
	
.LABEL $label$76
	$10 = [0]
	
.LABEL $label$75
	CALL eosio_assert($10, [12744])
	goto $label$20 
	
.LABEL $label$22
	CALL $277(($6 + [464]))
	
.LABEL $label$21
	$20 = *(($9 + [48]))
	CALL eosio_assert([1], [12695])
	$8 = (uint_64)$20 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$82:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$81 }
	$21 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$83 }
	$8 = $21
	$10 = [1]
	$15 = $5
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$82 }
	goto $label$80 
	
.LABEL $label$83
	$8 = $21
	
.LOOP $label$84:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$81 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$15 = ($5 + [1])
	$5 = $15
	if ( $10 ){ goto $label$84 }
	$10 = [1]
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$82 }
	goto $label$80 
	
.LABEL $label$81
	$10 = [0]
	
.LABEL $label$80
	CALL eosio_assert($10, [12744])
	
.LABEL $label$20
	$22 = (int_64)0
	
.LABEL $label$19
	$21 = *(($9 + [32]))
	$8 = *(($9 + [24]))
	if ( (*(($9 + [124])) == 0) ){ goto $label$85 }
	CALL eosio_assert(((int_64)$8 < (int_64)2305843009213693952), [12804])
	CALL eosio_assert(((int_64)$8 > (int_64)-2305843009213693952), [12828])
	$8 = ((int_64)$8 << (int_64)1)
	
.LABEL $label$85
	CALL eosio_assert(((int_64)*(($9 + [48])) == (int_64)$21), [12853])
	$23 = ((int_64)*($9 + [40]) + (int_64)$8)
	CALL eosio_assert(((int_64)$23 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$23 < (int_64)4611686018427387904), [12915])
	CALL eosio_assert(((int_64)$19 == (int_64)$16), [12853])
	$8 = ((int_64)$18 + (int_64)$17)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [12915])
	CALL eosio_assert(((int_64)$20 == (int_64)$16), [12853])
	$8 = ((int_64)$22 + (int_64)$8)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [12915])
	if ( ((int_64)$8 < (int_64)1) ){ goto $label$92 }
	*(($6 + [120])) = $16
	*((($6 + [96]) + [40])) = [0]
	*($6 + [104]) = $2
	*($6 + [112]) = $8
	*($6 + [128]) = (int_64)0
	*($6 + [96]) = *($0)
	$10 = ($6 + [128])
	$5 = CALL $292([11468])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$91 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$95 }
	*(($6 + [128])) = ($5 << [1])
	$10 = ($10 + [1])
	if ( $5 ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$95
	$15 = (($5 + [16]) & [-16])
	$10 = CALL _Znwj($15)
	*(($6 + [136])) = $10
	*(($6 + [132])) = $5
	*($6 + [128]) = ($15 | [1])
	
.LABEL $label$94
	CALL memcpy($10, [11468], $5)
	
.LABEL $label$93
	*(($10 + $5)) = [0]
	*($6 + [360]) = (int_64)3617214756542218240
	*($6 + [352]) = *($0)
	$5 = CALL $100(($6 + [304]), ($6 + [352]), *($9 + [56]), (int_64)-3617168760277827584, ($6 + [96]))
	CALL $101(($6 + [264]), $5)
	$10 = *($6 + [264])
	CALL send_inline($10, (*($6 + [268]) - $10))
	$10 = *($6 + [264])
	if ( ($10 == 0) ){ goto $label$96 }
	*($6 + [268]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$96
	$10 = *($5 + [28])
	if ( ($10 == 0) ){ goto $label$97 }
	*(($5 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$97
	$10 = *($5 + [16])
	if ( ($10 == 0) ){ goto $label$98 }
	*(($5 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$98
	if ( ((*(($6 + [128])) & [1]) == 0) ){ goto $label$92 }
	CALL _ZdlPv(*(($6 + [136])))
	
.LABEL $label$92
	$5 = ((int_64)$16 == (int_64)$21)
	CALL eosio_assert($5, [12933])
	if ( ((int_64)$8 <= (int_64)$23) ){ goto $label$99 }
	if ( (int_64)(*($9 + [16]) == 0) ){ goto $label$99 }
	$8 = (int_64)
	CALL __multi3($6, $8($8 - $23)), (int_64)$8 >> (int_64)63), (int_64)75, (int_64)0)
	CALL eosio_assert($5, [12998])
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [13046])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [13068])
	$8 = *(($6 + [8]))
	$24 = *($6)
	CALL eosio_assert(( (uint_64)($24 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$24 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [12828])
	CALL eosio_assert([1], [12764])
	CALL eosio_assert([1], [12779])
	if ( ((int_64)$24 < (int_64)10000) ){ goto $label$99 }
	*($6 + [96]) = *($0)
	$8 = *(($9 + [16]))
	*(($6 + [120])) = $16
	*(($6 + [136])) = [0]
	*($6 + [112]) = ((uint_64)$24 / (uint_64)(int_64)10000)
	*($6 + [104]) = $8
	*($6 + [128]) = (int_64)0
	$10 = ($6 + [128])
	$5 = CALL $292([11580])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$86 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$102 }
	*(($6 + [128])) = ($5 << [1])
	$10 = ($10 + [1])
	if ( $5 ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$102
	$15 = (($5 + [16]) & [-16])
	$10 = CALL _Znwj($15)
	*(($6 + [136])) = $10
	*(($6 + [132])) = $5
	*($6 + [128]) = ($15 | [1])
	
.LABEL $label$101
	CALL memcpy($10, [11580], $5)
	
.LABEL $label$100
	*(($10 + $5)) = [0]
	*($6 + [360]) = (int_64)3617214756542218240
	*($6 + [352]) = *($0)
	$5 = CALL $100(($6 + [304]), ($6 + [352]), *($9 + [56]), (int_64)-3617168760277827584, ($6 + [96]))
	CALL $101(($6 + [264]), $5)
	$10 = *($6 + [264])
	CALL send_inline($10, (*($6 + [268]) - $10))
	$10 = *($6 + [264])
	if ( ($10 == 0) ){ goto $label$103 }
	*($6 + [268]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$103
	$10 = *($5 + [28])
	if ( ($10 == 0) ){ goto $label$104 }
	*(($5 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$104
	$10 = *($5 + [16])
	if ( ($10 == 0) ){ goto $label$105 }
	*(($5 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$105
	if ( ((*(($6 + [128])) & [1]) == 0) ){ goto $label$99 }
	CALL _ZdlPv(*(($6 + [136])))
	
.LABEL $label$99
	if ( ((int_64)$21 != (int_64)*($0 + [168])) ){ goto $label$106 }
	*(($6 + [384])) = [0]
	*($6 + [368]) = (int_64)-1
	*($6 + [376]) = (int_64)0
	*($6 + [352]) = *($0 + [176])
	*($6 + [360]) = *($0 + [192])
	$8 = *(CALL $98(($6 + [352]), (uint_64)*($0 + [184]) >> (uint_64)(int_64)8), [9752]))
	*(($5 = (($6 + [96]) + [24]))) = *($0 + [184])
	*($6 + [104]) = $2
	*($6 + [96]) = *($0 + [192])
	$23 = ((int_64)$23 / (int_64)((int_64)((int_64)8000000000000 / (int_64)$8) << (int_64)32) >> (int_64)32)
	*($6 + [112]) = $23)
	CALL eosio_assert((uint_64)(((int_64)$23 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$8 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$109:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$108 }
	$21 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$110 }
	$8 = $21
	$10 = [1]
	$15 = $5
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$109 }
	goto $label$107 
	
.LABEL $label$110
	$8 = $21
	
.LOOP $label$111:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$108 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$15 = ($5 + [1])
	$5 = $15
	if ( $10 ){ goto $label$111 }
	$10 = [1]
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$109 }
	goto $label$107 
	
.LABEL $label$108
	$10 = [0]
	
.LABEL $label$107
	CALL eosio_assert($10, [12744])
	*(($6 + [136])) = [0]
	*($6 + [128]) = (int_64)0
	$10 = ($6 + [128])
	$5 = CALL $292([11468])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$88 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$114 }
	*(($6 + [128])) = ($5 << [1])
	$10 = ($10 + [1])
	if ( $5 ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$114
	$15 = (($5 + [16]) & [-16])
	$10 = CALL _Znwj($15)
	*(($6 + [136])) = $10
	*(($6 + [132])) = $5
	*($6 + [128]) = ($15 | [1])
	
.LABEL $label$113
	CALL memcpy($10, [11468], $5)
	
.LABEL $label$112
	*(($10 + $5)) = [0]
	*($6 + [272]) = (int_64)3617214756542218240
	*($6 + [264]) = *(($0 + [192]))
	$5 = CALL $100(($6 + [304]), ($6 + [264]), *(($0 + [176])), (int_64)-3617168760277827584, ($6 + [96]))
	CALL $101(($6 + [248]), $5)
	$10 = *($6 + [248])
	CALL send_inline($10, (*($6 + [252]) - $10))
	$10 = *($6 + [248])
	if ( ($10 == 0) ){ goto $label$115 }
	*($6 + [252]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$115
	$10 = *($5 + [28])
	if ( ($10 == 0) ){ goto $label$116 }
	*(($5 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$116
	$10 = *($5 + [16])
	if ( ($10 == 0) ){ goto $label$117 }
	*(($5 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$117
	$8 = *($9 + [16])
	if ( (int_64)($8 == 0) ){ goto $label$118 }
	*(($5 = (($6 + [304]) + [24]))) = *(($0 + [184]))
	*($6 + [312]) = $8
	*($6 + [304]) = *(($0 + [192]))
	$8 = ((int_64)$23 / (int_64)2)
	*($6 + [320]) = $8
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$8 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$121:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$120 }
	$21 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$122 }
	$8 = $21
	$10 = [1]
	$15 = $5
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$121 }
	goto $label$119 
	
.LABEL $label$122
	$8 = $21
	
.LOOP $label$123:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$120 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$15 = ($5 + [1])
	$5 = $15
	if ( $10 ){ goto $label$123 }
	$10 = [1]
	$5 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$121 }
	goto $label$119 
	
.LABEL $label$120
	$10 = [0]
	
.LABEL $label$119
	CALL eosio_assert($10, [12744])
	*(($6 + [344])) = [0]
	*($6 + [336]) = (int_64)0
	$10 = ($6 + [336])
	$5 = CALL $292([11580])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$87 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$126 }
	*(($6 + [336])) = ($5 << [1])
	$10 = ($10 + [1])
	if ( $5 ){ goto $label$125 }
	goto $label$124 
	
.LABEL $label$126
	$15 = (($5 + [16]) & [-16])
	$10 = CALL _Znwj($15)
	*(($6 + [344])) = $10
	*(($6 + [340])) = $5
	*($6 + [336]) = ($15 | [1])
	
.LABEL $label$125
	CALL memcpy($10, [11580], $5)
	
.LABEL $label$124
	*(($10 + $5)) = [0]
	*($6 + [256]) = (int_64)3617214756542218240
	*($6 + [248]) = *(($0 + [192]))
	$5 = CALL $100(($6 + [264]), ($6 + [248]), *(($0 + [176])), (int_64)-3617168760277827584, ($6 + [304]))
	CALL $101(($6 + [608]), $5)
	$10 = *($6 + [608])
	CALL send_inline($10, (*($6 + [612]) - $10))
	$10 = *($6 + [608])
	if ( ($10 == 0) ){ goto $label$127 }
	*($6 + [612]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$127
	$10 = *($5 + [28])
	if ( ($10 == 0) ){ goto $label$128 }
	*(($5 + [32])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$128
	$10 = *($5 + [16])
	if ( ($10 == 0) ){ goto $label$129 }
	*(($5 + [20])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$129
	if ( ((*(($6 + [336])) & [1]) == 0) ){ goto $label$118 }
	CALL _ZdlPv(*(($6 + [344])))
	
.LABEL $label$118
	if ( ((*(($6 + [128])) & [1]) == 0) ){ goto $label$130 }
	CALL _ZdlPv(*(($6 + [136])))
	
.LABEL $label$130
	$15 = *($6 + [376])
	if ( ($15 == 0) ){ goto $label$106 }
	$13 = ($6 + [380])
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$15) ){ goto $label$132 }
	
.LOOP $label$133:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$134 }
	CALL _ZdlPv($10)
	
.LABEL $label$134
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$133 }
	$5 = *(($6 + [376]))
	goto $label$131 
	
.LABEL $label$132
	$5 = $15
	
.LABEL $label$131
	*($13) = $15
	CALL _ZdlPv($5)
	
.LABEL $label$106
	*($6 + [272]) = [0]
	*($6 + [264]) = (int_64)0
	*($6 + [256]) = [0]
	*($6 + [248]) = (int_64)0
	$5 = *($6 + [416])
	if ( ((int_32)*($6 + [420]) == (int_32)$5) ){ goto $label$136 }
	CALL $131(($6 + [96]), *($5))
	$5 = *($6 + [268])
	if ( ((uint_32)$5 >= (uint_32)*((($6 + [264]) + [8]))) ){ goto $label$138 }
	*($5) = *($6 + [96])
	$5 = (($6 + [96]) + [8])
	*(($5 + [8])) = *($5)
	*($5) = [0]
	*($6 + [96]) = (int_64)0
	*($6 + [268]) = (*($6 + [268]) + [12])
	$5 = *($6 + [400])
	if ( ((int_32)*($6 + [404]) != (int_32)$5) ){ goto $label$137 }
	goto $label$135 
	
.LABEL $label$138
	CALL $132(($6 + [264]), ($6 + [96]))
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$139 }
	CALL _ZdlPv(*(($6 + [104])))
	
.LABEL $label$139
	$5 = *($6 + [400])
	if ( ((int_32)*($6 + [404]) == (int_32)$5) ){ goto $label$135 }
	
.LABEL $label$137
	CALL $131(($6 + [96]), *($5))
	$5 = *($6 + [252])
	if ( ((uint_32)$5 >= (uint_32)*((($6 + [248]) + [8]))) ){ goto $label$141 }
	*($5) = *($6 + [96])
	$5 = (($6 + [96]) + [8])
	*(($5 + [8])) = *($5)
	*($5) = [0]
	*($6 + [96]) = (int_64)0
	*($6 + [252]) = (*($6 + [252]) + [12])
	goto $label$140 
	
.LABEL $label$141
	CALL $132(($6 + [248]), ($6 + [96]))
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$140 }
	CALL _ZdlPv(*(($6 + [104])))
	
.LABEL $label$140
	$5 = *($6 + [416])
	if ( ((*($6 + [420]) - $5) <= [2]) ){ goto $label$136 }
	CALL $131(($6 + [96]), *($5 + [1]))
	$5 = *($6 + [268])
	if ( ((uint_32)$5 >= (uint_32)*((($6 + [264]) + [8]))) ){ goto $label$143 }
	*($5) = *($6 + [96])
	$5 = (($6 + [96]) + [8])
	*(($5 + [8])) = *($5)
	*($5) = [0]
	*($6 + [96]) = (int_64)0
	*($6 + [268]) = (*($6 + [268]) + [12])
	goto $label$142 
	
.LABEL $label$143
	CALL $132(($6 + [264]), ($6 + [96]))
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$142 }
	CALL _ZdlPv(*(($6 + [104])))
	
.LABEL $label$142
	$5 = *($6 + [400])
	if ( ((*($6 + [404]) - $5) <= [2]) ){ goto $label$135 }
	CALL $131(($6 + [96]), *($5 + [1]))
	$5 = *($6 + [252])
	if ( ((uint_32)$5 >= (uint_32)*((($6 + [248]) + [8]))) ){ goto $label$145 }
	*($5) = *($6 + [96])
	$5 = (($6 + [96]) + [8])
	*(($5 + [8])) = *($5)
	*($5) = [0]
	*($6 + [96]) = (int_64)0
	*($6 + [252]) = (*($6 + [252]) + [12])
	goto $label$144 
	
.LABEL $label$145
	CALL $132(($6 + [248]), ($6 + [96]))
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$144 }
	CALL _ZdlPv(*(($6 + [104])))
	
.LABEL $label$144
	$5 = *($6 + [416])
	if ( ((*($6 + [420]) - $5) <= [3]) ){ goto $label$136 }
	CALL $131(($6 + [96]), *($5 + [2]))
	$5 = *($6 + [268])
	if ( ((uint_32)$5 >= (uint_32)*((($6 + [264]) + [8]))) ){ goto $label$147 }
	*($5) = *($6 + [96])
	$5 = (($6 + [96]) + [8])
	*(($5 + [8])) = *($5)
	*($5) = [0]
	*($6 + [96]) = (int_64)0
	*($6 + [268]) = (*($6 + [268]) + [12])
	goto $label$146 
	
.LABEL $label$147
	CALL $132(($6 + [264]), ($6 + [96]))
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$146 }
	CALL _ZdlPv(*(($6 + [104])))
	
.LABEL $label$146
	$5 = *($6 + [400])
	if ( ((*($6 + [404]) - $5) <= [3]) ){ goto $label$135 }
	CALL $131(($6 + [96]), *($5 + [2]))
	$5 = *($6 + [252])
	if ( ((uint_32)$5 >= (uint_32)*((($6 + [248]) + [8]))) ){ goto $label$149 }
	*($5) = *($6 + [96])
	$5 = (($6 + [96]) + [8])
	*(($5 + [8])) = *($5)
	*($5) = [0]
	*($6 + [96]) = (int_64)0
	*($6 + [252]) = (*($6 + [252]) + [12])
	goto $label$148 
	
.LABEL $label$149
	CALL $132(($6 + [248]), ($6 + [96]))
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$148 }
	CALL _ZdlPv(*(($6 + [104])))
	
.LABEL $label$148
	*(($6 + [120])) = [0]
	*($6 + [104]) = $2
	*($6 + [96]) = $1
	*($6 + [112]) = (int_64)0
	$5 = (*($6 + [268]) - *($6 + [264]))
	$13 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$150 }
	if ( ((uint_32)$13 >= (uint_32)[357913942]) ){ goto $label$90 }
	$10 = CALL _Znwj($5)
	*(($6 + [112])) = $10
	*(($15 = ($6 + [116]))) = $10
	*(($6 + [120])) = ($10 + ((int_32)$13 * (int_32)[12]))
	$13 = *($6 + [268])
	$5 = *($6 + [264])
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$150 }
	
.LOOP $label$151:
	CALL $260($10, $5)
	$10 = (*($15) + [12])
	*($15) = $10
	$5 = ($5 + [12])
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$151 }
	
.LABEL $label$150
	*(($6 + [132])) = [0]
	*($6 + [124 align=4]) = (int_64)0
	$5 = (*($6 + [252]) - *($6 + [248]))
	$13 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$152 }
	if ( ((uint_32)$13 >= (uint_32)[357913942]) ){ goto $label$89 }
	$10 = CALL _Znwj($5)
	*(($6 + [124])) = $10
	*(($15 = ($6 + [128]))) = $10
	*(($6 + [132])) = ($10 + ((int_32)$13 * (int_32)[12]))
	$13 = *($6 + [252])
	$5 = *($6 + [248])
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$152 }
	
.LOOP $label$153:
	CALL $260($10, $5)
	$10 = (*($15) + [12])
	*($15) = $10
	$5 = ($5 + [12])
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$153 }
	
.LABEL $label$152
	CALL $135(($6 + [136]), *($6 + [392]))
	CALL $135(($6 + [148]), *($6 + [394]))
	*($6 + [161]) = $7
	*($6 + [160]) = *(($9 + [124]))
	*(($6 + [176])) = *(($9 + [32]))
	$8 = *($9 + [24])
	*(($6 + [192])) = $16
	*(($6 + [208])) = $19
	*($6 + [168]) = $8
	*($6 + [184]) = $17
	*($6 + [200]) = $18
	$5 = ($9 + [40])
	*(($6 + [224])) = *(($5 + [8]))
	$8 = *($5)
	*(($6 + [240])) = $20
	*($6 + [216]) = $8
	*($6 + [232]) = $22
	*(($10 = ($6 + [328]))) = [0]
	*($6 + [312]) = (int_64)-3590647491983425536
	*($6 + [320]) = (int_64)0
	$8 = *($0)
	*($6 + [304]) = $8
	*(($5 = CALL _Znwj([16]))) = $8
	*($5 + [8]) = (int_64)3617214756542218240
	$15 = ($5 + [16])
	*($10) = $15
	*(($6 + [324])) = $15
	*($6 + [320]) = $5
	CALL $160((($6 + [304]) + [28]), ($6 + [96]))
	CALL $101(($6 + [352]), ($6 + [304]))
	$5 = *($6 + [352])
	CALL send_inline($5, (*($6 + [356]) - $5))
	$5 = *($6 + [352])
	if ( ($5 == 0) ){ goto $label$154 }
	*($6 + [356]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$154
	$5 = *($6 + [332])
	if ( ($5 == 0) ){ goto $label$155 }
	*(($6 + [336])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$155
	$5 = *($6 + [320])
	if ( ($5 == 0) ){ goto $label$156 }
	*(($6 + [324])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$156
	CALL eosio_assert($11, [14084])
	CALL eosio_assert($11, [14118])
	$5 = CALL db_next_i64(*($9 + [132]), ($6 + [304]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$157 }
	CALL $151(($6 + [568]), $5)
	
.LABEL $label$157
	CALL $156(($6 + [568]), $9)
	if ( ((*(($6 + [148])) & [1]) == 0) ){ goto $label$158 }
	CALL _ZdlPv(*(($6 + [156])))
	
.LABEL $label$158
	if ( ((*(($6 + [136])) & [1]) == 0) ){ goto $label$159 }
	CALL _ZdlPv(*(($6 + [144])))
	
.LABEL $label$159
	$15 = *($6 + [124])
	if ( ($15 == 0) ){ goto $label$160 }
	$13 = ($6 + [128])
	$10 = *($13)
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$162 }
	
.LOOP $label$163:
	$5 = ($10 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$164 }
	CALL _ZdlPv(*(($10 + [-4])))
	
.LABEL $label$164
	$10 = $5
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$163 }
	$5 = *(($6 + [124]))
	goto $label$161 
	
.LABEL $label$162
	$5 = $15
	
.LABEL $label$161
	*($13) = $15
	CALL _ZdlPv($5)
	
.LABEL $label$160
	$15 = *($6 + [112])
	if ( ($15 == 0) ){ goto $label$165 }
	$13 = ($6 + [116])
	$10 = *($13)
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$167 }
	
.LOOP $label$168:
	$5 = ($10 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$169 }
	CALL _ZdlPv(*(($10 + [-4])))
	
.LABEL $label$169
	$10 = $5
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$168 }
	$5 = *(($6 + [112]))
	goto $label$166 
	
.LABEL $label$167
	$5 = $15
	
.LABEL $label$166
	*($13) = $15
	CALL _ZdlPv($5)
	
.LABEL $label$165
	$15 = *($6 + [248])
	if ( ($15 == 0) ){ goto $label$170 }
	$10 = *($6 + [252])
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$172 }
	
.LOOP $label$173:
	$5 = ($10 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$174 }
	CALL _ZdlPv(*(($10 + [-4])))
	
.LABEL $label$174
	$10 = $5
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$173 }
	$5 = *($6 + [248])
	goto $label$171 
	
.LABEL $label$172
	$5 = $15
	
.LABEL $label$171
	*($6 + [252]) = $15
	CALL _ZdlPv($5)
	
.LABEL $label$170
	$15 = *($6 + [264])
	if ( ($15 == 0) ){ goto $label$175 }
	$10 = *($6 + [268])
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$177 }
	
.LOOP $label$178:
	$5 = ($10 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$179 }
	CALL _ZdlPv(*(($10 + [-4])))
	
.LABEL $label$179
	$10 = $5
	if ( ((int_32)$15 != (int_32)$5) ){ goto $label$178 }
	$5 = *($6 + [264])
	goto $label$176 
	
.LABEL $label$177
	$5 = $15
	
.LABEL $label$176
	*($6 + [268]) = $15
	CALL _ZdlPv($5)
	
.LABEL $label$175
	$5 = *($6 + [400])
	if ( ($5 == 0) ){ goto $label$180 }
	*($6 + [404]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$180
	$5 = *($6 + [416])
	if ( ($5 == 0) ){ goto $label$181 }
	*($6 + [420]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$181
	$5 = *($6 + [464])
	if ( ($5 == 0) ){ goto $label$182 }
	*($6 + [468]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$182
	if ( ((*($6 + [512]) & [1]) == 0) ){ goto $label$183 }
	CALL _ZdlPv(*(($6 + [520])))
	
.LABEL $label$183
	$13 = *($6 + [592])
	if ( ($13 == 0) ){ goto $label$184 }
	$9 = ($6 + [596])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$186 }
	
.LOOP $label$187:
	$10 = ($10 + [-24])
	$5 = *($10)
	*($10) = [0]
	if ( ($5 == 0) ){ goto $label$188 }
	$15 = *($5 + [112])
	if ( ($15 == 0) ){ goto $label$189 }
	*(($5 + [116])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$189
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$190 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$190
	CALL _ZdlPv($5)
	
.LABEL $label$188
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$187 }
	$5 = *(($6 + [592]))
	goto $label$185 
	
.LABEL $label$186
	$5 = $13
	
.LABEL $label$185
	*($9) = $13
	CALL _ZdlPv($5)
	
.LABEL $label$184
	$global$0 = ($6 + [624])
	return (unreachable)
	
.LABEL $label$136
	CALL $277(($6 + [416]))
	
.LABEL $label$135
	CALL $277(($6 + [400]))
	
.LABEL $label$91
	CALL $259($10)
	
.LABEL $label$90
	CALL $276(($6 + [112]))
	
.LABEL $label$89
	CALL $276((($6 + [96]) + [28]))
	
.LABEL $label$88
	CALL $259($10)
	
.LABEL $label$87
	CALL $259($10)
	
.LABEL $label$86
	CALL $259($10)
	$5
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $56 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [384])
	$global$0 = $3
	*(($4 = $3) + [376]) = *($2)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($5)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*(($4 + [360])) = (int_64)0
	*(($4 + [352])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [276]) = $2
	*($4 + [272]) = $2
	*($4 + [280]) = ($2 + $5)
	*($4 + [24]) = ($4 + [272])
	*($4 + [48]) = ($4 + [288])
	CALL $157(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [280])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [272])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $5(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [376])
	CALL $158(($4 + [24]), ($4 + [288]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$15 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( (*($3 + [40]) & $2) ){ goto $label$11 }
	
.LABEL $label$12
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [36])))
	if ( ((*($4 + [316]) & $2) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($4 + [316]) & $2) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = [1]
	if ( (*($4 + [304]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [324])))
	$3 = [1]
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [312])))
	$global$0 = ($4 + [384])
	return $3
	
.LABEL $label$5
	$global$0 = ($4 + [384])
	return $3
}

void .FUNC $57 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [240])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = [0]
	*((($4 + [184]) + [32])) = [0]
	*($4 + [200]) = (int_64)-1
	$6 = *($0)
	*($4 + [184]) = $6
	*($4 + [192]) = $6
	*($4 + [208]) = (int_64)0
	$7 = [0]
	$8 = CALL db_lowerbound_i64($6, $6, (int_64)-3612798081281556480, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $112(($4 + [184]), $8)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8671])
	CALL eosio_assert(((int_64)*($7) == (int_64)$1), [8686])
	*((($4 + [144]) + [32])) = [0]
	*($4 + [152]) = $1
	*($4 + [160]) = (int_64)-1
	*($4 + [168]) = (int_64)0
	$6 = *($0)
	*($4 + [144]) = $6
	$7 = CALL db_find_i64($6, $1, (int_64)-3612780472452513792, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $118(($4 + [144]), $7)
	CALL eosio_assert(((int_32)*($5 + [128]) == (int_32)($4 + [144])), [13766])
	
.LABEL $label$2
	$8 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($8, [9417])
	CALL eosio_assert(((int_32)*(($5 + [116])) == (int_32)*($5 + [112])), [11243])
	$6 = *($5 + [24])
	$9 = *(($5 + [32]))
	CALL eosio_assert(((int_64)*(($5 + [48])) == (int_64)$9), [12853])
	$6 = ((int_64)$6 + (int_64)*($5 + [40]))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [12915])
	*(($4 + [120])) = $9
	*($4 + [104]) = $2
	*($4 + [112]) = $6
	*($4 + [96]) = *($0)
	$10 = CALL $260((($4 + [96]) + [32]), $3)
	*($4 + [48]) = (int_64)3617214756542218240
	*($4 + [40]) = *($0)
	$7 = CALL $100(($4 + [56]), ($4 + [40]), *($5 + [56]), (int_64)-3617168760277827584, ($4 + [96]))
	CALL $101(($4 + [224]), $7)
	$3 = *($4 + [224])
	CALL send_inline($3, (*($4 + [228]) - $3))
	$3 = *($4 + [224])
	if ( ($3 == 0) ){ goto $label$3 }
	*($4 + [228]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$3 = *($7 + [28])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($7 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($7 + [16])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($7 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($4 + [16])) = $9
	*($4 + [32]) = $9
	*($4 + [8]) = $6
	*($4 + [24]) = $6
	CALL $120($0, $1, ($4 + [8]), (int_64)0)
	CALL eosio_assert($8, [14084])
	CALL eosio_assert($8, [14118])
	$7 = CALL db_next_i64(*($5 + [132]), ($4 + [56]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	CALL $118(($4 + [144]), $7)
	
.LABEL $label$6
	CALL $121(($4 + [144]), $5)
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)-1
	*($4 + [80]) = (int_64)0
	$6 = *($0)
	*($4 + [56]) = $6
	*($4 + [64]) = $6
	$5 = CALL db_find_i64($6, $6, (int_64)-3612602256646602752, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$5 = CALL $122(($4 + [56]), $5)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($4 + [56])), [13766])
	$0 = CALL db_lowerbound_i64(*($4 + [144]), *(($4 + [152])), (int_64)-3612780472452513792, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$9 }
	CALL $118(($4 + [144]), $0)
	
.LABEL $label$10
	$8 = *($4 + [80])
	if ( ($8 == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([1], [14084])
	CALL eosio_assert([1], [14118])
	$0 = CALL db_next_i64(*($5 + [28]), ($4 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$11 }
	CALL $122(($4 + [56]), $0)
	
.LABEL $label$11
	CALL $123(($4 + [56]), $5)
	$8 = *($4 + [80])
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = ($4 + [84])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	$7 = *($0 + [8])
	if ( ($7 == 0) ){ goto $label$16 }
	*(($0 + [12])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$16
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($4 + [80]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $8
	
.LABEL $label$12
	*($3) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((*($10) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($4 + [136])))
	
.LABEL $label$17
	$8 = *($4 + [168])
	if ( ($8 == 0) ){ goto $label$18 }
	$3 = ($4 + [172])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$20 }
	
.LOOP $label$21:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	$7 = *($5 + [112])
	if ( ($7 == 0) ){ goto $label$23 }
	*(($5 + [116])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$23
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$24
	CALL _ZdlPv($5)
	
.LABEL $label$22
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$21 }
	$5 = *(($4 + [168]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $8
	
.LABEL $label$19
	*($3) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$8 = *($4 + [208])
	if ( ($8 == 0) ){ goto $label$25 }
	$3 = ($4 + [212])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$27 }
	
.LOOP $label$28:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$29 }
	$7 = *($0 + [40])
	if ( ($7 == 0) ){ goto $label$30 }
	*(($0 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$30
	CALL _ZdlPv($0)
	
.LABEL $label$29
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$28 }
	$5 = *(($4 + [208]))
	goto $label$26 
	
.LABEL $label$27
	$5 = $8
	
.LABEL $label$26
	*($3) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$25
	$global$0 = ($4 + [240])
}

void .FUNC $247 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $91(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [12690])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	CALL $153(*($1), *($0 + [32]))
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$4 = *($0 + [40])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [12690])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $276($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $152 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	*($1 + [125]) = [1]
	$5 = *($1 + [8])
	CALL eosio_assert([1], [13949])
	$6 = *($1 + [64])
	$7 = ( *(($1 + [68])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [96])
	$8 = (CASTING uint_64)(uint_32 $7)
	$9 = ($1 + [64])
	$10 = ($1 + [125])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$11 = ($1 + [112])
	$12 = *($1 + [112])
	$7 = *(($1 + [116]))
	$13 = ($7 - $12)
	$8 = (CASTING uint_64)(uint_32 $13)
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$7 = (( $6 ? ($13 + $6) : ((int_32)$12 == (int_32)$7) ) + [2])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$6 = CALL $295($7)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($4 + [12]) = $6
	*($4 + [8]) = $6
	*($4 + [16]) = ($6 + $7)
	*($4 + [24]) = ($4 + [8])
	*($4 + [56]) = $9
	*($4 + [64]) = $11
	*($4 + [72]) = $10
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [24])
	*($4 + [48]) = ($1 + [40])
	*($4 + [52]) = ($1 + [56])
	*($4 + [60]) = ($1 + [80])
	*($4 + [68]) = ($1 + [124])
	CALL $248(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $6, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $298($6)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [13762])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = ($6 - $7)
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $203($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + $2)
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($5) != (int_32)$3), [12690])
	CALL memcpy($7, *($2), [1])
	$3 = (*($2) + [1])
	*($2) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $150 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([144])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [112 align=4]) = (int_64)0
	*($5 + [120]) = [0]
	*($5 + [124]) = [0]
	*($5 + [128]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [80])
	*($3 + [64]) = ($5 + [112])
	*($3 + [68]) = ($5 + [124])
	*($3 + [72]) = ($5 + [125])
	CALL $247(($3 + [32]), ($3 + [24]))
	*($5 + [132]) = $1
	*($3 + [24]) = $5
	$6 = *($5 + [8])
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $194(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [112])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [116])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [14148])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [14193])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((int_64)*(*(($5 + [-24])) + [8]) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8) + [8]) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [14243])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [112])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [116])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	$8 = *($5 + [112])
	if ( ($8 == 0) ){ goto $label$14 }
	*(($5 + [116])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [132]))
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $91(*($1), ($3 + [16]))
	CALL $91(*($1), ($3 + [28]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[31]), [12690])
	CALL memcpy(($3 + [48]), *($1 + [4]), [32])
	*($1 + [4]) = (*($1 + [4]) + [32])
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $260(($2 + [32]), ($1 + [16]))
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$6 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL _Znwj($6)
	*(($2 + [24])) = ($7 + $6)
	*($2 + [16]) = $7
	*($2 + [20]) = $7
	$8 = *(($1 + [28]))
	$6 = (*(($1 + [32])) - $8)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $8, $6)
	*($2 + [20]) = (*($2 + [20]) + $6)
	
.LABEL $label$3
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$6 = (*(($1 + [44])) - *($1 + [40]))
	$8 = ((int_32)$6 / (int_32)[12])
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$8 >= (uint_32)[357913942]) ){ goto $label$1 }
	$7 = CALL _Znwj($6)
	*(($2 + [8])) = ($7 + ((int_32)$8 * (int_32)[12]))
	*($2) = $7
	*($2 + [4]) = $7
	$1 = *(($1 + [44]))
	$6 = *(($1 + [40]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $260($7, $6)
	$7 = (*($2 + [4]) + [12])
	*($2 + [4]) = $7
	$6 = ($6 + [12])
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$5 }
	
.LABEL $label$4
	CALL $214($0, $4, $3, $5, ($2 + [16]), $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$6 }
	$7 = *($2 + [4])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$10
	$7 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$9 }
	$6 = *($2)
	goto $label$7 
	
.LABEL $label$8
	$6 = $1
	
.LABEL $label$7
	*($2 + [4]) = $1
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*($2 + [20]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((*($5) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$12
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $276(($2 + [16]))
	
.LABEL $label$1
	CALL $276($2)
	(unreachable)
}

void .FUNC $155 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = *($1 + [8])
	$7 = $6
	$3 = *($3)
	$8 = ($1 + [112])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	CALL $133($8, *($3), *($3 + [4]))
	$7 = *(($1 + [8]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [13949])
	$3 = *($1 + [64])
	$9 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($9 + [96])
	$7 = (CASTING uint_64)(uint_32 $9)
	$10 = ($1 + [64])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	$11 = *($1 + [112])
	$9 = *(($1 + [116]))
	$12 = ($9 - $11)
	$7 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$9 = (( $3 ? ($12 + $3) : ((int_32)$11 == (int_32)$9) ) + [2])
	if ( ($9 <= [513]) ){ goto $label$5 }
	$3 = CALL $295($9)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [56]) = $10
	*($5 + [64]) = $8
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [24])
	*($5 + [48]) = ($1 + [40])
	*($5 + [52]) = ($1 + [56])
	*($5 + [60]) = ($1 + [80])
	*($5 + [68]) = ($1 + [124])
	*($5 + [72]) = ($1 + [125])
	CALL $248(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $298($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [80])
}

void .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [192])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $260(($2 + [80]), ($1 + [16]))
	$6 = CALL $260(($2 + [64]), ($1 + [28]))
	*(($7 = (($2 + [32]) + [24]))) = *(($1 + [72]))
	*(($8 = (($2 + [32]) + [16]))) = *(($1 + [64]))
	*($2 + [40]) = *(($1 + [56]))
	*($2 + [32]) = *($1 + [48])
	*((($2 + [96]) + [24])) = *($7)
	*((($2 + [96]) + [16])) = *($8)
	*($2 + [104]) = *($2 + [40])
	*($2 + [96]) = *($2 + [32])
	$1 = *($0 + [4])
	$7 = *($1 + [4])
	$0 = (*($0) + int_32($7 >> [1]))
	$1 = *($1)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$7 = CALL $260(($2 + [176]), $5)
	$8 = CALL $260(($2 + [160]), $6)
	$9 = *((($2 + [96]) + [24]))
	*((($2 + [128]) + [24])) = $9
	$10 = *((($2 + [96]) + [16]))
	*((($2 + [128]) + [16])) = $10
	*(($2 + [16])) = $10
	*(($2 + [24])) = $9
	$9 = *($2 + [104])
	*($2 + [136]) = $9
	$10 = *($2 + [96])
	*($2) = $10
	*($2 + [128]) = $10
	*($2 + [8]) = $9
	CALL void $0((int_32 $4), (int_64 $3), (int_64 $7), (int_32 $8), (int_32 $2), (int_32 $1))
	if ( (*($2 + [160]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [176]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2 + [176]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($5) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [192])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [192])
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $273 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $292($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $263($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $272 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $265(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $284(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8667], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $265(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $265(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $179 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = ($1 + [108])
	$3 = (*(*($3)) + [-1])
	$7 = *($1 + [108])
	if ( ((uint_32)((int_32)(*(($1 + [112])) - $7) / (int_32)[40]) <= (uint_32)$3) ){ goto $label$2 }
	$8 = *($1)
	*(($7 + ((int_32)$3 * (int_32)[40])) + [22]) = [1]
	CALL eosio_assert([1], [13949])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	*($5 + [60]) = $6
	*($5 + [32]) = $1
	$7 = ($1 + [8])
	*($5 + [36]) = $7
	$9 = ($1 + [16])
	*($5 + [40]) = $9
	$10 = ($1 + [24])
	*($5 + [44]) = $10
	$11 = ($1 + [48])
	*($5 + [48]) = $11
	$12 = ($1 + [64])
	*($5 + [52]) = $12
	$13 = ($1 + [96])
	*($5 + [56]) = $13
	$14 = ($1 + [120])
	*($5 + [64]) = $14
	$15 = ($1 + [132])
	*($5 + [68]) = $15
	$16 = ($1 + [136])
	*($5 + [72]) = $16
	CALL $224(($5 + [32]), ($5 + [8]))
	$3 = *($5 + [24])
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $295($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [40]) = $9
	*($5 + [44]) = $10
	*($5 + [48]) = $11
	*($5 + [52]) = $12
	*($5 + [56]) = $13
	*($5 + [60]) = $6
	*($5 + [64]) = $14
	*($5 + [68]) = $15
	*($5 + [72]) = $16
	*($5 + [32]) = $1
	CALL $225(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [148]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	CALL $298($4)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $277($6)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

void .FUNC $224 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = (*($2) + [48])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$1 = ($1 + [32])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$3 = *($3)
	$3 = *($0 + [28])
	$6 = *($3 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)($6 - $3) / (int_32)[40]))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($1 + [8])
	$7 = *($3 + [8])
	$4 = *(($3 + [12]))
	$8 = ($4 - $7)
	$5 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$8:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$8 }
	$1 = (( $1 ? ($8 + $1) : ((int_32)$7 == (int_32)$4) ) + [14])
	$3 = ($3 + [40])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$7 }
	*($2) = $1
	
.LABEL $label$6
	$3 = *($3)
	$3 = *($0 + [32])
	$4 = *($3 + [4])
	$7 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$9:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($2) = (( $1 ? ($7 + $1) : ((int_32)$3 == (int_32)$4) ) + [9])
}

void .FUNC $183 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [14008])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	CALL eosio_assert([1], [12992])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-3612860735888687104, $2, (int_64)-3612860735888687104, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-3612860735888687104) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-3612860735888687103
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-3612860735888687104
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-3612860735888687104
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $233(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [13766])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4310307329183580160, (int_64)4310307329183580160)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $68($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [13766])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [13817])
	CALL $169($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $170($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [12690])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)4310307329183580160
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4310307329183580160
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $218(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $248 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $226(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [12992])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	CALL $228(*($1), *($0 + [32]))
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [36]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$1 = *($1)
	*($2 + [8]) = *(*($0 + [40]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($1 + [4]), ($2 + [8]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $225 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($3 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $226(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [12992])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	CALL $226(*($1), *($0 + [24]))
	CALL $227(*($1), *($0 + [28]))
	CALL $228(*($1), *($0 + [32]))
	$4 = *($1)
	*($2 + [7]) = *(*($0 + [36]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [7]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$0 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [12690])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $66(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [4]) == (int_32)$0), [13766])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $62($0, $2)
	CALL eosio_assert(((int_32)*($1 + [4]) == (int_32)$0), [13766])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [14059])
	return (*($1) & [1])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [14148])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [14193])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [14243])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [352])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [316])) = [0]
	*(($4 + [340])) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [304]) = [0]
	*($4 + [308 align=4]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [328]) = [0]
	*($4 + [332 align=4]) = (int_64)0
	*($4 + [268]) = $2
	*($4 + [264]) = $2
	*($4 + [272]) = ($2 + $5)
	*($4 + [16]) = ($4 + [264])
	*($4 + [40]) = ($4 + [280])
	CALL $85(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [272])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [264])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $5(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [344])
	CALL $86(($4 + [16]), ($4 + [280]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$14 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($3 + [40]) & $2) ){ goto $label$10 }
	
.LABEL $label$11
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [36])))
	if ( ((*($4 + [332]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($4 + [332]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [308]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [340])))
	$2 = [1]
	if ( ((*($4 + [308]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [316])))
	$global$0 = ($4 + [352])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [352])
	return $2
}

void .FUNC $60 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$9 = ($global$0 - [176])
	$global$0 = $9
	*($9 + [167]) = $4
	*($9 + [168]) = $3
	*($9 + [152]) = $6
	*($9 + [151]) = $7
	CALL require_auth(*($0))
	*(($9 + [136])) = [0]
	*($9 + [120]) = (int_64)-1
	*($9 + [128]) = (int_64)0
	$10 = *($0)
	*($9 + [104]) = $10
	*($9 + [112]) = $2
	$7 = [0]
	$4 = CALL db_find_i64($10, $2, (int_64)4312312276611760128, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $77(($9 + [104]), $4)
	CALL eosio_assert(((int_32)*($7 + [144]) == (int_32)($9 + [104])), [13766])
	$6 = *($9 + [152])
	$3 = *($9 + [168])
	
.LABEL $label$1
	$11 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($11, [8671])
	$4 = ($7 + [112])
	$2 = (CASTING uint_64)(uint_32 ((int_32)(*($4) - *($7 + [108])) / (int_32)[40]))
	CALL eosio_assert((((uint_64)$6 <= (uint_64)$2) & ((uint_64)$3 <= (uint_64)$2)), [9417])
	$12 = ($7 + [108])
	$14 = ((CASTING uint_32)(uint_64 $3) + [-1])
	$13 = *($7 + [108])
	if ( ((uint_32)((int_32)(*($4) - $13) / (int_32)[40]) <= (uint_32)$14) ){ goto $label$4 }
	*((($9 + [64]) + [12])) = (int_64)0
	*($9 + [72]) = [0]
	$4 = ($13 + ((int_32)$14 * (int_32)[40]))
	*($9 + [64]) = *($4)
	$15 = ($4 + [12])
	$16 = (*($15) - *($4 + [8]))
	if ( ($16 == 0) ){ goto $label$5 }
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$3 }
	$17 = CALL _Znwj($16)
	*(($9 + [72])) = $17
	*(($9 + [80])) = ($17 + $16)
	*(($16 = ($9 + [76]))) = $17
	$15 = *(($4 + [8]))
	$4 = (*($15) - $15)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($17, $15, $4)
	*($16) = (*($16) + $4)
	
.LABEL $label$5
	$4 = ($13 + ((int_32)$14 * (int_32)[40]))
	*((($9 + [64]) + [36])) = *(($4 + [36]))
	*((($9 + [64]) + [28])) = *(($4 + [28]))
	*($9 + [84 align=4]) = *($4 + [20 align=4])
	$16 = (*($9 + [152]) + [-1])
	$14 = *(($7 + [108]))
	if ( ((uint_32)((int_32)(*(($7 + [112])) - $14) / (int_32)[40]) <= (uint_32)$16) ){ goto $label$4 }
	*((($9 + [24]) + [12])) = (int_64)0
	$15 = [0]
	*($9 + [32]) = [0]
	$13 = ($14 + ((int_32)$16 * (int_32)[40]))
	*($9 + [24]) = *($13)
	$4 = [0]
	$12 = ($13 + [12])
	$17 = (*($12) - *($13 + [8]))
	if ( ($17 == 0) ){ goto $label$6 }
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$2 }
	$4 = CALL _Znwj($17)
	*(($9 + [32])) = $4
	*(($9 + [40])) = ($4 + $17)
	*(($17 = ($9 + [36]))) = $4
	$12 = *(($13 + [8]))
	$13 = (*($12) - $12)
	if ( ((int_32)$13 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($4, $12, $13)
	$4 = (*($17) + $13)
	*($17) = $4
	
.LABEL $label$6
	$13 = ($14 + ((int_32)$16 * (int_32)[40]))
	*((($9 + [24]) + [36])) = *(($13 + [36]))
	*((($9 + [24]) + [28])) = *(($13 + [28]))
	*($9 + [44 align=4]) = *($13 + [20 align=4])
	if ( ((int_32)(*((($9 + [64]) + [12])) - *((($9 + [64]) + [8]))) != (int_32)[1]) ){ goto $label$7 }
	$15 = ((int_32)($4 - *(($9 + [32]))) == (int_32)[1])
	
.LABEL $label$7
	CALL eosio_assert($15, [9432])
	$13 = (($9 + [24]) + [8])
	$14 = (((uint_32)*(*($13)) % (uint_32)[13]) + [1])
	$4 = (($9 + [64]) + [8])
	$13 = (((uint_32)*(*($4)) % (uint_32)[13]) + [1])
	CALL eosio_assert(((int_32)( $13 ? [10] : ($13 <= [10]) ) == (int_32)( $14 ? [10] : ($14 <= [10]) )), [9471])
	CALL eosio_assert(((int_32)((uint_32)*(*($4)) % (uint_32)[13]) != (int_32)[0]), [9518])
	$3 = *($0)
	*($9 + [12]) = ($9 + [152])
	*($9 + [8]) = ($9 + [168])
	*($9 + [16]) = ($9 + [167])
	*($9 + [20]) = ($9 + [151])
	CALL eosio_assert($11, [13817])
	CALL $87(($9 + [104]), $7, $3, ($9 + [8]))
	$7 = *($13)
	if ( ($7 == 0) ){ goto $label$8 }
	*(($9 + [36])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($9 + [72])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($9 + [76])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$0 = *($9 + [128])
	if ( ($0 == 0) ){ goto $label$10 }
	$13 = ($9 + [132])
	$7 = *($13)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$12 }
	$7 = ($7 + [-24])
	
.LOOP $label$13:
	$4 = CALL $79($7)
	$7 = ($7 + [-24])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$13 }
	$7 = *(($9 + [128]))
	goto $label$11 
	
.LABEL $label$12
	$7 = $0
	
.LABEL $label$11
	*($13) = $0
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($9 + [176])
	return (unreachable)
	
.LABEL $label$4
	CALL $277($12)
	
.LABEL $label$3
	CALL $276((($9 + [64]) + [8]))
	
.LABEL $label$2
	CALL $276((($9 + [24]) + [8]))
	(unreachable)
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)$0), [13766])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $62($0, $4)
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)$0), [13766])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [13817])
	CALL $167($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $168($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([16])) + [4]) = $0
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [12690])
	CALL memcpy(($3 + [16]), $2, [1])
	*($4) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($4 + [8]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)4982871467403247616
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4982871467403247616
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $217(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

int_32 .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8192])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8192])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

int_32 .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [8]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [12992])
	CALL memcpy(*($6), ($2 + [8]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	$7 = ($2 + [20])
	$8 = ($2 + [24])
	$5 = ($2 + [36])
	
.LOOP $label$3:
	*($2) = $0
	*($2 + [8]) = $6
	*((($2 + [8]) + [8])) = ($6 + [20])
	*($7) = ($6 + [21])
	*($8) = ($6 + [22])
	*((($2 + [8]) + [20])) = ($6 + [23])
	*((($2 + [8]) + [24])) = ($6 + [24])
	*($5) = ($6 + [25])
	*((($2 + [8]) + [32])) = ($6 + [32])
	*($2 + [12]) = ($6 + [8])
	CALL $229(($2 + [8]), $2)
	$6 = ($6 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return $0
}

int_32 .FUNC $228 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [12992])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [12992])
	CALL memcpy(*($7), $6, [1])
	$4 = (*($7) + [1])
	*($7) = $4
	$6 = ($6 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $229 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $228(*($1), *($0 + [4]))
	$4 = *($1)
	*($2 + [12]) = *(*($0 + [8]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [12]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [13]) = *(*($0 + [12]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [13]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [14]) = *(*($0 + [20]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [14]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [11]) = *(*($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [11]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [10]) = *(*($0 + [28]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [10]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [32])
	$4 = *($1 + [24])
	$5 = *($1 + [16])
	$6 = *($1 + [8])
	$7 = *($1)
	$1 = CALL $260($2, ($1 + [36]))
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$9 = (*($0) + int_32($8 >> [1]))
	$0 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	$3 = CALL $260(($2 + [16]), $1)
	CALL void $9((int_32 $7), (int_64 $6), (int_64 $5), (int_64 $4), (int_64 ($3 & [255])), (int_32 $3), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [12690])
	CALL memcpy(($3 + [32]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $91(*($1), ($3 + [36]))
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = ($1 + [108])
	$9 = (*(*($3)) + [-1])
	$7 = *($1 + [108])
	$8 = ((int_32)(*(($1 + [112])) - $7) / (int_32)[40])
	if ( ((uint_32)$8 <= (uint_32)$9) ){ goto $label$4 }
	$10 = (*(*($3 + [4])) + [-1])
	if ( ((uint_32)$8 <= (uint_32)$10) ){ goto $label$4 }
	$11 = *($1)
	$12 = ($7 + ((int_32)$9 * (int_32)[40]))
	$13 = ($12 + [8])
	$14 = *($3 + [8])
	$8 = ($12 + [12])
	$15 = *($8)
	if ( ((int_32)$15 == (int_32)*(($12 + [16]))) ){ goto $label$6 }
	*($15) = *($14)
	*($8) = (*($8) + [1])
	goto $label$5 
	
.LABEL $label$6
	CALL $159($13, $14)
	
.LABEL $label$5
	$14 = ($7 + ((int_32)$10 * (int_32)[40]))
	$15 = ($14 + [8])
	$3 = *($3 + [12])
	$12 = ($14 + [12])
	$16 = *($12)
	if ( ((int_32)$16 == (int_32)*(($14 + [16]))) ){ goto $label$8 }
	*($16) = *($3)
	*($12) = (*($12) + [1])
	goto $label$7 
	
.LABEL $label$8
	CALL $159($15, $3)
	
.LABEL $label$7
	*($5 + [16]) = (int_64)0
	$3 = [0]
	*($5 + [24]) = [0]
	$14 = (*($8) - *($13))
	if ( ($14 == 0) ){ goto $label$9 }
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL _Znwj($14)
	*(($5 + [24])) = ($3 + $14)
	*($5 + [16]) = $3
	*($5 + [20]) = $3
	$13 = *($13)
	$8 = (*($8) - $13)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($3, $13, $8)
	*($5 + [20]) = ($3 + $8)
	
.LABEL $label$9
	$8 = ((uint_32)*($3) % (uint_32)[13])
	$14 = ((uint_32)*($3 + [1]) % (uint_32)[13])
	if ( ($14 <= [9]) ){ goto $label$10 }
	if ( $8 ){ goto $label$10 }
	$13 = [1]
	if ( ((uint_32)(($8 + [1]) & [255]) >= (uint_32)[10]) ){ goto $label$10 }
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$10
	$13 = (((uint_32)($8 & [255]) > (uint_32)[8]) & (($14 == 0) & ((($14 + [1]) & [255]) <= [10])))
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $277($6)
	
.LABEL $label$3
	CALL $276(($5 + [16]))
	
.LABEL $label$2
	*($5 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	if ( ($13 == 0) ){ goto $label$11 }
	*(($7 + ((int_32)$9 * (int_32)[40])) + [25]) = [1]
	
.LABEL $label$11
	*($5 + [64]) = (int_64)0
	$3 = [0]
	*($5 + [72]) = [0]
	$8 = (*($12) - *($15))
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$14 }
	$3 = CALL _Znwj($8)
	*(($5 + [72])) = ($3 + $8)
	*($5 + [64]) = $3
	*($5 + [68]) = $3
	$12 = *($15)
	$8 = (*($12) - $12)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($3, $12, $8)
	*($5 + [68]) = ($3 + $8)
	
.LABEL $label$15
	$8 = ((uint_32)*($3) % (uint_32)[13])
	$13 = ((uint_32)*($3 + [1]) % (uint_32)[13])
	if ( ($13 <= [9]) ){ goto $label$16 }
	if ( $8 ){ goto $label$16 }
	$12 = [1]
	if ( ((uint_32)(($8 + [1]) & [255]) >= (uint_32)[10]) ){ goto $label$16 }
	if ( ($3 == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$16
	$12 = (((uint_32)($8 & [255]) > (uint_32)[8]) & (($13 == 0) & ((($13 + [1]) & [255]) <= [10])))
	if ( $3 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $276(($5 + [64]))
	
.LABEL $label$13
	*($5 + [68]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ($12 == 0) ){ goto $label$17 }
	*(($7 + ((int_32)$10 * (int_32)[40])) + [25]) = [1]
	
.LABEL $label$17
	$8 = [0]
	$7 = *(($1 + [112]))
	$3 = *($1 + [108])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$18 }
	
.LOOP $label$20:
	if ( (*(($3 + [25])) == 0) ){ goto $label$19 }
	$3 = ($3 + [40])
	if ( ($3 <= $7) ){ goto $label$20 }
	$8 = [0]
	goto $label$18 
	
.LABEL $label$19
	$8 = [1]
	
.LABEL $label$18
	CALL eosio_assert($8, [14351])
	CALL eosio_assert(((int_64)$11 == (int_64)*($1)), [13949])
	*($5 + [8]) = [0]
	*($5 + [64]) = ($5 + [8])
	$8 = ($1 + [8])
	*($5 + [20]) = $8
	*($5 + [16]) = $1
	$12 = ($1 + [16])
	*($5 + [24]) = $12
	$13 = ($1 + [24])
	*($5 + [28]) = $13
	$14 = ($1 + [48])
	*($5 + [32]) = $14
	$15 = ($1 + [64])
	*($5 + [36]) = $15
	$9 = ($1 + [96])
	*($5 + [40]) = $9
	*($5 + [44]) = $6
	$10 = ($1 + [120])
	*($5 + [48]) = $10
	$16 = ($1 + [132])
	*($5 + [52]) = $16
	$17 = ($1 + [136])
	*($5 + [56]) = $17
	CALL $224(($5 + [16]), ($5 + [64]))
	$7 = *($5 + [8])
	if ( ($7 <= [513]) ){ goto $label$22 }
	$3 = CALL $295($7)
	goto $label$21 
	
.LABEL $label$22
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$21
	*($5 + [68]) = $3
	*($5 + [64]) = $3
	*($5 + [72]) = ($3 + $7)
	*($5 + [8]) = ($5 + [64])
	*($5 + [20]) = $8
	*($5 + [24]) = $12
	*($5 + [28]) = $13
	*($5 + [32]) = $14
	*($5 + [36]) = $15
	*($5 + [40]) = $9
	*($5 + [44]) = $6
	*($5 + [48]) = $10
	*($5 + [52]) = $16
	*($5 + [56]) = $17
	*($5 + [16]) = $1
	CALL $225(($5 + [16]), ($5 + [8]))
	CALL db_update_i64(*($1 + [148]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$25 }
	if ( ((uint_64)$11 >= (uint_64)*($0 + [16])) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL $298($3)
	if ( (uint_64)($11 <= *($0 + [16])) ){ goto $label$23 }
	
.LABEL $label$24
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$23
	$global$0 = ($5 + [80])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1 + [24])
	$4 = *($1 + [16])
	$5 = *($1 + [8])
	$6 = *($1)
	$7 = CALL $260(($2 + [16]), ($1 + [28]))
	$8 = *($1 + [48])
	$9 = *($1 + [40])
	$1 = CALL $260($2, ($1 + [52]))
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$11 = (*($0) + int_32($10 >> [1]))
	$0 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($11) + $0))
	
.LABEL $label$1
	$8 = CALL $260(($2 + [32]), $1)
	$3 = CALL $260(($2 + [48]), $7)
	CALL void $11((int_32 $6), (int_64 $5), (int_64 $4), (int_64 ($3 & [255])), (int_32 $3), (int_32 $9), (int_64 ($8 & [255])), (int_32 $8), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($7) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($7) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($7 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [12690])
	CALL memcpy(($3 + [24]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $91(*($1), ($3 + [28]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [12690])
	CALL memcpy(($3 + [48]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $91(*($1), ($3 + [52]))
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = *($1)
	$7 = *($1 + [108])
	$8 = ($7 + [8])
	$9 = *(*($3))
	$10 = ($7 + [12])
	$11 = *($10)
	if ( ((int_32)$11 == (int_32)*(($7 + [16]))) ){ goto $label$2 }
	*($11) = *($9)
	*($10) = (*($10) + [1])
	goto $label$1 
	
.LABEL $label$2
	CALL $159($8, $9)
	
.LABEL $label$1
	$10 = ($1 + [120])
	$11 = (*(*($3)) + [1])
	$9 = ($1 + [124])
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)*(($1 + [128]))) ){ goto $label$4 }
	*($12) = *($11)
	*($9) = (*($9) + [1])
	goto $label$3 
	
.LABEL $label$4
	CALL $159($10, $11)
	
.LABEL $label$3
	$9 = (*(*($3)) + [2])
	$3 = ($7 + [12])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)*(($7 + [16]))) ){ goto $label$6 }
	*($11) = *($9)
	*($3) = (*($3) + [1])
	goto $label$5 
	
.LABEL $label$6
	CALL $159($8, $9)
	
.LABEL $label$5
	*($5 + [32]) = [255]
	$3 = ($1 + [124])
	$9 = *($3)
	if ( ((uint_32)$9 >= (uint_32)*(($1 + [128]))) ){ goto $label$8 }
	*($9) = [255]
	*($3) = (*($3) + [1])
	goto $label$7 
	
.LABEL $label$8
	CALL $96($10, ($5 + [32]))
	
.LABEL $label$7
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = [0]
	$11 = ($7 + [8])
	$9 = ($7 + [12])
	$3 = (*($9) - *($11))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$11 }
	$7 = CALL _Znwj($3)
	*((($5 + [32]) + [8])) = ($7 + $3)
	*($5 + [32]) = $7
	*($5 + [36]) = $7
	$9 = *($11)
	$3 = (*($9) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($7, $9, $3)
	*($5 + [36]) = (*($5 + [36]) + $3)
	$7 = *($5 + [32])
	
.LABEL $label$12
	$3 = ((uint_32)*($7) % (uint_32)[13])
	$7 = ((uint_32)*($7 + [1]) % (uint_32)[13])
	if ( ($7 <= [9]) ){ goto $label$13 }
	if ( $3 ){ goto $label$13 }
	if ( ((uint_32)(($3 + [1]) & [255]) >= (uint_32)[10]) ){ goto $label$13 }
	CALL eosio_assert([0], [14296])
	$7 = *($5 + [32])
	if ( ($7 == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$13
	CALL eosio_assert(((($3 & [255]) <= [9]) | (((int_32)$7 != (int_32)[0]) | ((uint_32)(($7 + [1]) & [255]) > (uint_32)[9]))), [14296])
	$7 = *($5 + [32])
	if ( $7 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $276(($5 + [32]))
	
.LABEL $label$10
	*($5 + [36]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [13949])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$9 = ($1 + [8])
	*($5 + [36]) = $9
	*($5 + [32]) = $1
	$11 = ($1 + [16])
	*($5 + [40]) = $11
	$8 = ($1 + [24])
	*($5 + [44]) = $8
	$12 = ($1 + [48])
	*($5 + [48]) = $12
	$13 = ($1 + [64])
	*($5 + [52]) = $13
	$14 = ($1 + [96])
	*($5 + [56]) = $14
	$15 = ($1 + [108])
	*($5 + [60]) = $15
	*($5 + [64]) = $10
	$16 = ($1 + [132])
	*($5 + [68]) = $16
	$17 = ($1 + [136])
	*($5 + [72]) = $17
	CALL $224(($5 + [32]), ($5 + [8]))
	$3 = *($5 + [24])
	if ( ($3 <= [513]) ){ goto $label$15 }
	$7 = CALL $295($3)
	goto $label$14 
	
.LABEL $label$15
	$7 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$14
	*($5 + [12]) = $7
	*($5 + [8]) = $7
	*($5 + [16]) = ($7 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $9
	*($5 + [40]) = $11
	*($5 + [44]) = $8
	*($5 + [48]) = $12
	*($5 + [52]) = $13
	*($5 + [56]) = $14
	*($5 + [60]) = $15
	*($5 + [64]) = $10
	*($5 + [68]) = $16
	*($5 + [72]) = $17
	*($5 + [32]) = $1
	CALL $225(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [148]), $2, $7, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$18 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $298($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$16 }
	
.LABEL $label$17
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$16
	$global$0 = ($5 + [80])
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = [0]
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$8 }
	$6 = CALL _Znwj($5)
	*(($2 + [72])) = ($6 + $5)
	*($2 + [64]) = $6
	*($2 + [68]) = $6
	$7 = *(($1 + [16]))
	$5 = (*(($1 + [20])) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($6, $7, $5)
	*($2 + [68]) = ($6 + $5)
	
.LABEL $label$9
	$1 = CALL $260($2, ($1 + [64]))
	$7 = CALL $260(($2 + [16]), ($1 + [52]))
	$6 = CALL $260(($2 + [32]), ($1 + [40]))
	$5 = CALL $260(($2 + [48]), ($1 + [28]))
	CALL $205($0, $4, $3, ($2 + [64]), $5, $6, $7, $1)
	if ( (*($1) & [1]) ){ goto $label$11 }
	if ( (*($7) & [1]) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$11
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$10
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	CALL $276(($2 + [64]))
	
.LABEL $label$7
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($5) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	$1 = *($2 + [64])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($2 + [64])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($2 + [68]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $153(*($1), ($3 + [16]))
	CALL $91(*($1), ($3 + [28]))
	CALL $91(*($1), ($3 + [40]))
	CALL $91(*($1), ($3 + [52]))
	CALL $91(*($1), ($3 + [64]))
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = ($1 + [108])
	$3 = (*(*($3)) + [-1])
	$7 = *($1 + [108])
	if ( ((uint_32)((int_32)(*(($1 + [112])) - $7) / (int_32)[40]) <= (uint_32)$3) ){ goto $label$2 }
	$8 = *($1)
	*(($7 + ((int_32)$3 * (int_32)[40])) + [24]) = [257]
	CALL eosio_assert([1], [13949])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	*($5 + [60]) = $6
	*($5 + [32]) = $1
	$7 = ($1 + [8])
	*($5 + [36]) = $7
	$9 = ($1 + [16])
	*($5 + [40]) = $9
	$10 = ($1 + [24])
	*($5 + [44]) = $10
	$11 = ($1 + [48])
	*($5 + [48]) = $11
	$12 = ($1 + [64])
	*($5 + [52]) = $12
	$13 = ($1 + [96])
	*($5 + [56]) = $13
	$14 = ($1 + [120])
	*($5 + [64]) = $14
	$15 = ($1 + [132])
	*($5 + [68]) = $15
	$16 = ($1 + [136])
	*($5 + [72]) = $16
	CALL $224(($5 + [32]), ($5 + [8]))
	$3 = *($5 + [24])
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $295($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [40]) = $9
	*($5 + [44]) = $10
	*($5 + [48]) = $11
	*($5 + [52]) = $12
	*($5 + [56]) = $13
	*($5 + [60]) = $6
	*($5 + [64]) = $14
	*($5 + [68]) = $15
	*($5 + [72]) = $16
	*($5 + [32]) = $1
	CALL $225(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [148]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	CALL $298($4)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $277($6)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = ($1 + [108])
	$3 = (*(*($3)) + [-1])
	$7 = *($1 + [108])
	if ( ((uint_32)((int_32)(*(($1 + [112])) - $7) / (int_32)[40]) <= (uint_32)$3) ){ goto $label$2 }
	$8 = *($1)
	*(($3 = ($7 + ((int_32)$3 * (int_32)[40]))) + [25]) = [1]
	*($3 + [21]) = [1]
	CALL eosio_assert([1], [13949])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	*($5 + [60]) = $6
	*($5 + [32]) = $1
	$7 = ($1 + [8])
	*($5 + [36]) = $7
	$9 = ($1 + [16])
	*($5 + [40]) = $9
	$10 = ($1 + [24])
	*($5 + [44]) = $10
	$11 = ($1 + [48])
	*($5 + [48]) = $11
	$12 = ($1 + [64])
	*($5 + [52]) = $12
	$13 = ($1 + [96])
	*($5 + [56]) = $13
	$14 = ($1 + [120])
	*($5 + [64]) = $14
	$15 = ($1 + [132])
	*($5 + [68]) = $15
	$16 = ($1 + [136])
	*($5 + [72]) = $16
	CALL $224(($5 + [32]), ($5 + [8]))
	$3 = *($5 + [24])
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $295($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [40]) = $9
	*($5 + [44]) = $10
	*($5 + [48]) = $11
	*($5 + [52]) = $12
	*($5 + [56]) = $13
	*($5 + [60]) = $6
	*($5 + [64]) = $14
	*($5 + [68]) = $15
	*($5 + [72]) = $16
	*($5 + [32]) = $1
	CALL $225(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [148]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	CALL $298($4)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $277($6)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

void .FUNC $182 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	*($1) = *(*($3))
	CALL eosio_assert([1], [13949])
	CALL eosio_assert([1], [12992])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-3612860735888687104) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-3612860735888687103
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = *(*($0))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $246(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $150(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$2 = ($global$0 - [224])
	$global$0 = $2
	*($2 + [208]) = (int_64)0
	*($2 + [216]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	$4 = ((int_32)$3 / (int_32)[12])
	$5 = *($1 + [8])
	$6 = *($1)
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$5 }
	$3 = CALL _Znwj($3)
	*(($2 + [216])) = ($3 + ((int_32)$4 * (int_32)[12]))
	*($2 + [208]) = $3
	*($2 + [212]) = $3
	$7 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = CALL $260($3, $4)
	$3 = ($3 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	*($2 + [212]) = ($8 + [12])
	
.LABEL $label$6
	*($2 + [200]) = [0]
	*($2 + [192]) = (int_64)0
	$3 = (*(($1 + [32])) - *($1 + [28]))
	$4 = ((int_32)$3 / (int_32)[12])
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$4 }
	$3 = CALL _Znwj($3)
	*(($2 + [200])) = ($3 + ((int_32)$4 * (int_32)[12]))
	*($2 + [192]) = $3
	*($2 + [196]) = $3
	$7 = *(($1 + [32]))
	$4 = *(($1 + [28]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = CALL $260($3, $4)
	$3 = ($3 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	*($2 + [196]) = ($8 + [12])
	
.LABEL $label$8
	$3 = CALL $260(($2 + [176]), ($1 + [40]))
	$4 = CALL $260(($2 + [160]), ($1 + [52]))
	*(($7 = (($2 + [144]) + [8]))) = *(($1 + [72]))
	*(($8 = (($2 + [128]) + [8]))) = *(($1 + [96]))
	*(($9 = (($2 + [112]) + [8]))) = *(($1 + [112]))
	*(($10 = (($2 + [96]) + [8]))) = *(($1 + [128]))
	*($2 + [144]) = *($1 + [64])
	*($2 + [128]) = *($1 + [88])
	*($2 + [112]) = *($1 + [104])
	*($2 + [96]) = *($1 + [120])
	$11 = *($1 + [80])
	*(($12 = (($2 + [80]) + [8]))) = *(($1 + [144]))
	$13 = *($1 + [136])
	*((($2 + [64]) + [8])) = *($7)
	*((($2 + [48]) + [8])) = *($8)
	*((($2 + [32]) + [8])) = *($9)
	*((($2 + [16]) + [8])) = *($10)
	*($2 + [80]) = $13
	*($2 + [64]) = *($2 + [144])
	*($2 + [48]) = *($2 + [128])
	*($2 + [32]) = *($2 + [112])
	*($2 + [16]) = *($2 + [96])
	*(($2 + [8])) = *($12)
	*($2) = *($2 + [80])
	CALL $213($0, $6, $5, ($2 + [208]), ($2 + [192]), $3, $4, ($2 + [64]), $11, ($2 + [48]), ($2 + [32]), ($2 + [16]), $2)
	if ( (*($4) & [1]) ){ goto $label$11 }
	if ( (*($3) & [1]) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$10
	CALL _ZdlPv(*($3 + [8]))
	$1 = *($2 + [192])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $276(($2 + [208]))
	
.LABEL $label$4
	CALL $276(($2 + [192]))
	
.LABEL $label$3
	$1 = *($2 + [192])
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = *($2 + [196])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *($2 + [192])
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2 + [196]) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($2 + [208])
	if ( ($1 == 0) ){ goto $label$16 }
	$4 = *($2 + [212])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$20
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *($2 + [208])
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2 + [212]) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$global$0 = ($2 + [224])
	(unreachable)
	(unreachable)
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $91(*($1), (*($0) + [40]))
	$3 = *($0)
	CALL $91(*($1), ($3 + [52]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [64]), *($0 + [4]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($3 + [72])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [12690])
	CALL memcpy(($2 + [7]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($3 + [80]) = ((int_32)*($2 + [7]) != (int_32)[0])
	*($2) = $3
	CALL $212($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $147 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [13766])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3590905687705255936, (int_64)-3590905687705255936)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $146($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [13766])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [13817])
	CALL $189($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $190($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [12690])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-3590905687705255936
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-3590905687705255936
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $245(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = CALL _Znaj([3])
	CALL $127(($3 + [14]), $1, $4)
	$5 = CALL _Znaj([3])
	CALL $127(($3 + [12]), $2, $5)
	$2 = [1]
	$6 = *($3 + [12])
	$1 = *($3 + [14])
	if ( ((uint_32)$1 > (uint_32)$6) ){ goto $label$1 }
	$2 = [3]
	if ( ($1 <= $6) ){ goto $label$1 }
	if ( ((uint_32)($1 + [-4]) >= (uint_32)[3]) ){ goto $label$2 }
	$2 = [2]
	$1 = *($3 + [15])
	$6 = *($3 + [13])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$1 }
	$2 = [1]
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$1 }
	$2 = [1]
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$1 }
	
.LABEL $label$3
	$2 = ( [3] ? ( [3] ? [2] : ($1 <= $6) ) : ((int_32)$6 == (int_32)[1]) )
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$8 }
	if ( ((int_32)$1 != (int_32)[3]) ){ goto $label$7 }
	
.LABEL $label$8
	$1 = *($4 + [2])
	$6 = *($5 + [2])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$1 = *($3 + [13])
	$6 = *($3 + [15])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$5 }
	$6 = *($4)
	if ( ((int_32)$6 != (int_32)*($4 + [1])) ){ goto $label$9 }
	$6 = *($4 + [2])
	
.LABEL $label$9
	$1 = *($5)
	if ( ((int_32)$1 != (int_32)*($5 + [1])) ){ goto $label$10 }
	$1 = *($5 + [2])
	
.LABEL $label$10
	$2 = [2]
	$4 = ($1 & [255])
	if ( ((int_32)($6 & [255]) == (int_32)$4) ){ goto $label$1 }
	$2 = [3]
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$1 }
	$6 = ($6 & [255])
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$11 }
	if ( ($6 <= ($1 & [255])) ){ goto $label$1 }
	
.LABEL $label$11
	$2 = ( [1] ? ( [1] ? [2] : (($1 & [255]) <= $6) ) : ((int_32)$6 == (int_32)[1]) )
	goto $label$1 
	
.LABEL $label$6
	$2 = [1]
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$1 }
	$2 = [1]
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$12 }
	if ( ($6 <= $1) ){ goto $label$1 }
	
.LABEL $label$12
	$2 = [3]
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$5
	$2 = [3]
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$13 }
	if ( ($6 <= $1) ){ goto $label$1 }
	
.LABEL $label$13
	$2 = ( [1] ? ( [1] ? [2] : ($1 <= $6) ) : ((int_32)$6 == (int_32)[1]) )
	goto $label$1 
	
.LABEL $label$4
	$1 = *($4 + [1])
	$6 = *($5 + [1])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$14 }
	$2 = [1]
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$1 }
	$2 = [1]
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$15 }
	if ( ($6 <= $1) ){ goto $label$1 }
	
.LABEL $label$15
	$2 = [3]
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$1 }
	if ( ($1 <= $6) ){ goto $label$1 }
	
.LABEL $label$14
	$1 = *($4)
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$16 }
	$2 = [1]
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$1 }
	$2 = [1]
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$17 }
	if ( ($6 <= $1) ){ goto $label$1 }
	
.LABEL $label$17
	$2 = [3]
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$1 }
	if ( ($1 <= $6) ){ goto $label$1 }
	
.LABEL $label$16
	$2 = [2]
	
.LABEL $label$1
	*($0) = *($3 + [14])
	*($0 + [2 align=1]) = *($3 + [12])
	*($0 + [4]) = $2
	$global$0 = ($3 + [16])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [16]) = [0]
	*($2) = ($2 + [16])
	$4 = ($1 + [8])
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	$5 = ($1 + [12])
	*($2 + [32]) = $5
	$6 = ($1 + [24])
	*($2 + [36]) = $6
	$7 = ($1 + [36])
	*($2 + [40]) = $7
	$8 = ($1 + [48])
	*($2 + [44]) = $8
	CALL $240(($2 + [24]), $2)
	$9 = *($2 + [16])
	if ( ($9 == 0) ){ goto $label$2 }
	CALL $173($0, $9)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	*($2 + [16]) = $2
	*($2 + [28]) = $4
	*($2 + [24]) = $1
	*($2 + [32]) = $5
	*($2 + [36]) = $6
	*($2 + [40]) = $7
	*($2 + [44]) = $8
	CALL $241(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [13762])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $208($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($6 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $91($0, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [24]) = [0]
	*($2 + [8]) = ($2 + [24])
	$4 = ($1 + [8])
	*($2 + [36]) = $4
	*($2 + [32]) = $1
	$5 = ($1 + [16])
	*($2 + [40]) = $5
	$6 = ($1 + [28])
	*($2 + [44]) = $6
	$7 = ($1 + [40])
	*($2 + [48]) = $7
	$8 = ($1 + [52])
	*($2 + [52]) = $8
	$9 = ($1 + [64])
	*($2 + [56]) = $9
	$10 = ($1 + [80])
	*($2 + [60]) = $10
	$11 = ($1 + [88])
	*($2 + [64]) = $11
	$12 = ($1 + [104])
	*($2 + [68]) = $12
	$13 = ($1 + [120])
	*($2 + [72]) = $13
	$14 = ($1 + [136])
	*($2 + [76]) = $14
	CALL $242(($2 + [32]), ($2 + [8]))
	$15 = *($2 + [24])
	if ( ($15 == 0) ){ goto $label$2 }
	CALL $173($0, $15)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [12]) = $0
	*($2 + [8]) = $0
	*($2 + [16]) = $3
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = $4
	*($2 + [32]) = $1
	*($2 + [40]) = $5
	*($2 + [44]) = $6
	*($2 + [48]) = $7
	*($2 + [52]) = $8
	*($2 + [56]) = $9
	*($2 + [60]) = $10
	*($2 + [64]) = $11
	*($2 + [68]) = $12
	*($2 + [72]) = $13
	*($2 + [76]) = $14
	CALL $243(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [80])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1 + [8])
	CALL eosio_assert(CALL $fimport$18($3), [12608])
	$4 = [0]
	*(($2 + [40])) = [0]
	*($2 + [8]) = $3
	*($2 + [24]) = (int_64)-1
	$5 = (uint_64)*($1) >> (uint_64)(int_64)8
	*($2 + [16]) = $5)
	*($2 + [32]) = (int_64)0
	$1 = CALL db_lowerbound_i64($3, $5, (int_64)-4157508551318700032, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	CALL $171(($2 + [8]), $1)
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [12642])
	$6 = *($2 + [32])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = ($2 + [36])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($2 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $6
	
.LABEL $label$3
	*($7) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $219(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $75(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [14148])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [14193])
	$2 = ($0 + [28])
	$3 = *($2)
	CALL eosio_assert(((int_32)$3 != (int_32)*($0 + [24])), [14243])
	$4 = *($2)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$2 = $3
	
.LOOP $label$4:
	$5 = *($2)
	*($2) = [0]
	$6 = ($2 + [-24])
	$3 = *($6)
	*($6) = $5
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdlPv($3)
	
.LABEL $label$5
	*(($2 + [-8])) = *(($2 + [16]))
	*(($2 + [-16])) = *(($2 + [8]))
	$2 = ($2 + [24])
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$5 = ($2 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = ($3 + [-24])
	
.LABEL $label$2
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdlPv($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$1
	*(($0 + [28])) = $5
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([160])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56]) = [0]
	*($5 + [96 align=4]) = (int_64)0
	*($5 + [104 align=4]) = (int_64)0
	*($5 + [112 align=4]) = (int_64)0
	*($5 + [120 align=4]) = (int_64)0
	*($5 + [128]) = [0]
	*($5 + [132]) = [0]
	*($5 + [136]) = (int_64)0
	*($5 + [144]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [64])
	*($3 + [56]) = ($5 + [96])
	*($3 + [60]) = ($5 + [108])
	*($3 + [64]) = ($5 + [120])
	*($3 + [68]) = ($5 + [132])
	*($3 + [72]) = ($5 + [136])
	CALL $220(($3 + [32]), ($3 + [24]))
	*($5 + [148]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $180(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$8 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	$1 = *($8 + [120])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($8 + [124])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$2 = *($8 + [108])
	if ( ($2 == 0) ){ goto $label$11 }
	$7 = ($8 + [112])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($1 + [-40])
	$0 = *(($1 + [-32]))
	if ( ($0 == 0) ){ goto $label$15 }
	*(($1 + [-28])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$15
	$1 = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$14 }
	$1 = *(($8 + [108]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $2
	
.LABEL $label$12
	*($7) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$11
	if ( ((*($8 + [96]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($8 + [104])))
	
.LABEL $label$16
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($8 + [56])))
	
.LABEL $label$17
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = *(*($0))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = ($1 + [108])
	$3 = (*(*($3)) + [-1])
	$7 = *($1 + [108])
	if ( ((uint_32)((int_32)(*(($1 + [112])) - $7) / (int_32)[40]) <= (uint_32)$3) ){ goto $label$2 }
	$8 = *($1)
	*(($7 + ((int_32)$3 * (int_32)[40])) + [20]) = [1]
	CALL eosio_assert([1], [13949])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	*($5 + [60]) = $6
	*($5 + [32]) = $1
	$7 = ($1 + [8])
	*($5 + [36]) = $7
	$9 = ($1 + [16])
	*($5 + [40]) = $9
	$10 = ($1 + [24])
	*($5 + [44]) = $10
	$11 = ($1 + [48])
	*($5 + [48]) = $11
	$12 = ($1 + [64])
	*($5 + [52]) = $12
	$13 = ($1 + [96])
	*($5 + [56]) = $13
	$14 = ($1 + [120])
	*($5 + [64]) = $14
	$15 = ($1 + [132])
	*($5 + [68]) = $15
	$16 = ($1 + [136])
	*($5 + [72]) = $16
	CALL $224(($5 + [32]), ($5 + [8]))
	$3 = *($5 + [24])
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $295($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [40]) = $9
	*($5 + [44]) = $10
	*($5 + [48]) = $11
	*($5 + [52]) = $12
	*($5 + [56]) = $13
	*($5 + [60]) = $6
	*($5 + [64]) = $14
	*($5 + [68]) = $15
	*($5 + [72]) = $16
	*($5 + [32]) = $1
	CALL $225(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [148]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	CALL $298($4)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $277($6)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($1 + [120])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($1 + [124])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$3 = *($1 + [108])
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = ($1 + [112])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = ($2 + [-40])
	$6 = *(($2 + [-32]))
	if ( ($6 == 0) ){ goto $label$7 }
	*(($2 + [-28])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$6 }
	$2 = *(($1 + [108]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $3
	
.LABEL $label$4
	*($4) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$3
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$8
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$9
	CALL _ZdlPv($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $241 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [12992])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	CALL $228(*($1), *($0 + [8]))
	$5 = *($0 + [12])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($5 + [4]) - *($5)) / (int_32)[12]))
	$3 = *($1)
	$7 = *($3 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$8 = ((int_64)$6) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($3 + [8])) - $7) > (int_32)[0]), [12992])
	$4 = ($3 + [4])
	CALL memcpy(*($4), ($2 + [15]), [1])
	$7 = (*($4) + [1])
	*($4) = $7
	if ( $8 ){ goto $label$1 }
	$7 = *(($5 + [4]))
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $226($3, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	CALL $226(*($1), *($0 + [16]))
	$4 = *($1)
	*($2 + [14]) = *(*($0 + [20]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [14]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $259 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $223 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $153(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [12690])
	CALL memcpy(($2 + [12]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [12]) != (int_32)[0])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [12690])
	CALL memcpy(($2 + [13]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [13]) != (int_32)[0])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [12690])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [12690])
	CALL memcpy(($2 + [14]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [14]) != (int_32)[0])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [12690])
	CALL memcpy(($2 + [11]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [11]) != (int_32)[0])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [12690])
	CALL memcpy(($2 + [10]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [10]) != (int_32)[0])
	$4 = *($0 + [32])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $268 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $291(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $295($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [14384])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $295($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $250 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0 + [8])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($5 + [4]) - *($5)) / (int_32)[12]))
	$7 = *($1)
	$3 = *($7 + [4])
	$4 = ($7 + [4])
	
.LOOP $label$1:
	$8 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$9 = ((int_64)$6) != (int_64)0
	*($2 + [8]) = (($9) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)(*(($7 + [8])) - $3) > (int_32)[0]), [12992])
	CALL memcpy(*($4), ($2 + [8]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $9 ){ goto $label$1 }
	$3 = *(($5 + [4]))
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $226($7, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$10 = *($0 + [12])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($10 + [4]) - *($10)) / (int_32)[12]))
	$5 = *($1)
	$3 = *($5 + [4])
	$7 = ($5 + [8])
	$4 = ($5 + [4])
	
.LOOP $label$4:
	$8 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$9 = ((int_64)$6) != (int_64)0
	*($2 + [8]) = (($9) << [7]) | ($8 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $3) > (int_32)[0]), [12992])
	CALL memcpy(*($4), ($2 + [8]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $9 ){ goto $label$4 }
	$3 = *(($10 + [4]))
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $226($5, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$5
	CALL $226(*($1), *($0 + [16]))
	CALL $226(*($1), *($0 + [20]))
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [28]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$8 = (*($4 + [4]) + [8])
	*($4 + [4]) = $8
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $8) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$8 = (*($4 + [4]) + [8])
	*($4 + [4]) = $8
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $8) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$8 = (*($4 + [4]) + [8])
	*($4 + [4]) = $8
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $8) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$8 = (*($4 + [4]) + [8])
	*($4 + [4]) = $8
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $8) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$8 = (*($4 + [4]) + [8])
	*($4 + [4]) = $8
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $8) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $298($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $293(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [14384])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $293(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $298($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $98 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [13766])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $172($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [13766])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $99 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = [0]
	$4 = (*($0 + [4]) - *($0))
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$3 = CALL _Znwj($4)
	*(($1 + [8])) = ($3 + $4)
	*($1) = $3
	*($1 + [4]) = $3
	$0 = *($0)
	$5 = (*(($0 + [4])) - $0)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($3, $0, $5)
	*($1 + [4]) = ($3 + $5)
	$0 = [0]
	$4 = [0]
	$2 = [0]
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$7 = ($6 <= [10])
	$6 = ((uint_32)*(($3 + $0)) % (uint_32)[13])
	$2 = ($2 | (($6 == 0) & $7))
	$4 = (( $6 ? [10] : $7 ) + $4)
	$0 = ($0 + [1])
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$2 = ((uint_32)( ( ($4 + [10]) ? $4 : ($2 & [1]) ) ? $4 : ($4 <= [12]) ) > (uint_32)[21])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($1 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$global$0 = ($1 + [16])
	return $2
	
.LABEL $label$1
	CALL $276($1)
	return (unreachable)
}

void .FUNC $239 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $226(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[31]), [12992])
	CALL memcpy(*($4 + [4]), $3, [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	CALL $228(*($1), *($0 + [32]))
	$1 = *($1)
	*($2 + [8]) = *(*($0 + [36]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($1 + [4]), ($2 + [8]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $91(*($1), *($0 + [24]))
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [12690])
	CALL memcpy($3, *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	CALL $153(*($1), *($0 + [32]))
	$4 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [12690])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [168])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [172])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [168]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$1
	if ( ((*($0 + [156]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($0 + [164])))
	
.LABEL $label$6
	$1 = *($0 + [144])
	if ( ($1 == 0) ){ goto $label$7 }
	$2 = ($0 + [148])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($3 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($0 + [144]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $1
	
.LABEL $label$8
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = *($0 + [132])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($0 + [136])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$1 = *($0 + [120])
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($0 + [124])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($3 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$16 }
	$4 = *(($0 + [120]))
	goto $label$14 
	
.LABEL $label$15
	$4 = $1
	
.LABEL $label$14
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = *($0 + [108])
	if ( ($4 == 0) ){ goto $label$18 }
	*(($0 + [112])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$18
	$4 = *($0 + [96])
	if ( ($4 == 0) ){ goto $label$19 }
	*(($0 + [100])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( (*($0 + [28]) & [1]) ){ goto $label$22 }
	if ( (*($0 + [16]) & [1]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL _ZdlPv(*(($0 + [36])))
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv(*(($0 + [24])))
	return $0
	
.LABEL $label$20
	return $0
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	*(($2 = ($4 + ((int_32)$3 * (int_32)[12]))) + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL _Znwj($3)
	*($2) = $6
	*(($7 = ($2 + [4]))) = $6
	*(($2 + [8])) = ($6 + $3)
	$3 = *($1)
	$1 = (*(($1 + [4])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $3, $1)
	*($7) = (*($7) + $1)
	
.LABEL $label$6
	$6 = ($4 + ((int_32)$5 * (int_32)[12]))
	$7 = ($2 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	*(($3 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$1 = ($4 + [-12])
	*($3) = *($1)
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($1) = (int_64)0
	$2 = $3
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$9 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	$2 = $3
	goto $label$7 
	
.LABEL $label$8
	$4 = $5
	
.LABEL $label$7
	*($0) = $2
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = ($5 + [-12])
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$12 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	return (unreachable)
	
.LABEL $label$5
	CALL $276($2)
	(unreachable)
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($6 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, ( $7 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $267($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $259($0)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = ($1 + [108])
	$8 = (*(*($3)) + [-1])
	$7 = *($1 + [108])
	if ( ((uint_32)((int_32)(*(($1 + [112])) - $7) / (int_32)[40]) <= (uint_32)$8) ){ goto $label$3 }
	$9 = *(($3 + [4]))
	$10 = *($1)
	$11 = ($7 + ((int_32)$8 * (int_32)[40]))
	$12 = ($11 + [8])
	$3 = ($11 + [12])
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)*(($11 + [16]))) ){ goto $label$5 }
	*($13) = *($9)
	*($3) = (*($3) + [1])
	goto $label$4 
	
.LABEL $label$5
	CALL $159($12, $9)
	
.LABEL $label$4
	*(($7 + ((int_32)$8 * (int_32)[40])) + [20]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	$11 = (*($3) - *($12))
	if ( ($11 == 0) ){ goto $label$6 }
	if ( ((int_32)$11 <= (int_32)[-1]) ){ goto $label$2 }
	$9 = CALL _Znwj($11)
	*(($5 + [40])) = ($9 + $11)
	*($5 + [32]) = $9
	*($5 + [36]) = $9
	$11 = *($12)
	$3 = (*($3) - $11)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($9, $11, $3)
	*($5 + [36]) = ($9 + $3)
	
.LABEL $label$6
	$11 = CALL $99(($5 + [32]))
	$3 = *($5 + [32])
	if ( ($3 == 0) ){ goto $label$7 }
	*($5 + [36]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ($11 == 0) ){ goto $label$8 }
	*(($7 + ((int_32)$8 * (int_32)[40])) + [25]) = [1]
	
.LABEL $label$8
	$7 = ($7 + ((int_32)$8 * (int_32)[40]))
	if ( (*($7 + [23]) == 0) ){ goto $label$9 }
	*($7 + [25]) = [1]
	
.LABEL $label$9
	$3 = [0]
	$8 = *(($1 + [112]))
	$7 = *($1 + [108])
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$10 }
	
.LOOP $label$12:
	if ( (*(($7 + [25])) == 0) ){ goto $label$11 }
	$7 = ($7 + [40])
	if ( ($7 <= $8) ){ goto $label$12 }
	$3 = [0]
	goto $label$10 
	
.LABEL $label$11
	$3 = [1]
	
.LABEL $label$10
	CALL eosio_assert($3, [14351])
	CALL eosio_assert(((int_64)$10 == (int_64)*($1)), [13949])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$3 = ($1 + [8])
	*($5 + [36]) = $3
	*($5 + [32]) = $1
	$11 = ($1 + [16])
	*($5 + [40]) = $11
	$12 = ($1 + [24])
	*($5 + [44]) = $12
	$9 = ($1 + [48])
	*($5 + [48]) = $9
	$13 = ($1 + [64])
	*($5 + [52]) = $13
	$14 = ($1 + [96])
	*($5 + [56]) = $14
	*($5 + [60]) = $6
	$15 = ($1 + [120])
	*($5 + [64]) = $15
	$16 = ($1 + [132])
	*($5 + [68]) = $16
	$17 = ($1 + [136])
	*($5 + [72]) = $17
	CALL $224(($5 + [32]), ($5 + [8]))
	$8 = *($5 + [24])
	if ( ($8 <= [513]) ){ goto $label$14 }
	$7 = CALL $295($8)
	goto $label$13 
	
.LABEL $label$14
	$7 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$13
	*($5 + [12]) = $7
	*($5 + [8]) = $7
	*($5 + [16]) = ($7 + $8)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $3
	*($5 + [40]) = $11
	*($5 + [44]) = $12
	*($5 + [48]) = $9
	*($5 + [52]) = $13
	*($5 + [56]) = $14
	*($5 + [60]) = $6
	*($5 + [64]) = $15
	*($5 + [68]) = $16
	*($5 + [72]) = $17
	*($5 + [32]) = $1
	CALL $225(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [148]), $2, $7, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$16 }
	if ( ((uint_64)$10 >= (uint_64)*($0 + [16])) ){ goto $label$15 }
	goto $label$1 
	
.LABEL $label$16
	CALL $298($7)
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$15
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return (unreachable)
	
.LABEL $label$3
	CALL $277($6)
	
.LABEL $label$2
	CALL $276(($5 + [32]))
	
.LABEL $label$1
	$global$0 = ($5 + [80])
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $204($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $264($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $264($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $259($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [12690])
	CALL memcpy(($3 + [48]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [88])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $206(*($1), ($4 + [96]))
	CALL $206(*($1), ($4 + [108]))
	CALL $143(*($1), ($4 + [120]))
	CALL $153(*($1), ($4 + [132]))
	CALL $143(*($1), ($4 + [144]))
	CALL $91(*($1), ($4 + [156]))
	CALL $143(*($1), ($4 + [168]))
	$global$0 = ($2 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [240])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $260(($2 + [224]), ($1 + [16]))
	$6 = CALL $260(($2 + [208]), ($1 + [28]))
	*(($2 + [200])) = *(($1 + [72]))
	*((($2 + [176]) + [16])) = *(($1 + [64]))
	*(($2 + [168])) = *(($1 + [88]))
	*($2 + [144]) = (int_64)0
	*($2 + [152]) = [0]
	*($2 + [184]) = *(($1 + [56]))
	*($2 + [176]) = *($1 + [48])
	*($2 + [160]) = *($1 + [80])
	$7 = (*(($1 + [100])) - *($1 + [96]))
	if ( ($7 == 0) ){ goto $label$8 }
	$8 = int_32($7 >> [4])
	if ( ((uint_32)$8 >= (uint_32)[268435456]) ){ goto $label$7 }
	$7 = CALL _Znwj($7)
	*(($2 + [152])) = ($7 + ($8 << [4]))
	*($2 + [144]) = $7
	*($2 + [148]) = $7
	$9 = *(($1 + [96]))
	$8 = (*(($1 + [100])) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($7, $9, $8)
	*($2 + [148]) = (*($2 + [148]) + $8)
	
.LABEL $label$8
	*($2 + [136]) = [0]
	*($2 + [128]) = (int_64)0
	$7 = (*(($1 + [112])) - *($1 + [108]))
	if ( ($7 == 0) ){ goto $label$9 }
	$8 = int_32($7 >> [4])
	if ( ((uint_32)$8 >= (uint_32)[268435456]) ){ goto $label$6 }
	$7 = CALL _Znwj($7)
	*(($2 + [136])) = ($7 + ($8 << [4]))
	*($2 + [128]) = $7
	*($2 + [132]) = $7
	$9 = *(($1 + [108]))
	$8 = (*(($1 + [112])) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($7, $9, $8)
	*($2 + [132]) = (*($2 + [132]) + $8)
	
.LABEL $label$9
	*($2 + [120]) = [0]
	*($2 + [112]) = (int_64)0
	$7 = (*(($1 + [124])) - *($1 + [120]))
	$9 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$10 }
	if ( ((uint_32)$9 >= (uint_32)[357913942]) ){ goto $label$5 }
	$8 = CALL _Znwj($7)
	*(($2 + [120])) = ($8 + ((int_32)$9 * (int_32)[12]))
	*($2 + [112]) = $8
	*($2 + [116]) = $8
	$9 = *(($1 + [124]))
	$7 = *(($1 + [120]))
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$10 }
	
.LOOP $label$11:
	CALL $260($8, $7)
	$8 = (*($2 + [116]) + [12])
	*($2 + [116]) = $8
	$7 = ($7 + [12])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$11 }
	
.LABEL $label$10
	*($2 + [104]) = [0]
	*($2 + [96]) = (int_64)0
	$7 = (*(($1 + [136])) - *($1 + [132]))
	if ( ($7 == 0) ){ goto $label$12 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$4 }
	$8 = CALL _Znwj($7)
	*(($2 + [104])) = ($8 + $7)
	*($2 + [96]) = $8
	*($2 + [100]) = $8
	$9 = *(($1 + [132]))
	$7 = (*(($1 + [136])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($8, $9, $7)
	*($2 + [100]) = (*($2 + [100]) + $7)
	
.LABEL $label$12
	*($2 + [88]) = [0]
	*($2 + [80]) = (int_64)0
	$7 = (*(($1 + [148])) - *($1 + [144]))
	$9 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$13 }
	if ( ((uint_32)$9 >= (uint_32)[357913942]) ){ goto $label$3 }
	$8 = CALL _Znwj($7)
	*(($2 + [88])) = ($8 + ((int_32)$9 * (int_32)[12]))
	*($2 + [80]) = $8
	*($2 + [84]) = $8
	$9 = *(($1 + [148]))
	$7 = *(($1 + [144]))
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$13 }
	
.LOOP $label$14:
	CALL $260($8, $7)
	$8 = (*($2 + [84]) + [12])
	*($2 + [84]) = $8
	$7 = ($7 + [12])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$14 }
	
.LABEL $label$13
	$9 = CALL $260(($2 + [64]), ($1 + [156]))
	*($2 + [56]) = [0]
	*($2 + [48]) = (int_64)0
	$7 = (*(($1 + [172])) - *($1 + [168]))
	$10 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$15 }
	if ( ((uint_32)$10 >= (uint_32)[357913942]) ){ goto $label$2 }
	$8 = CALL _Znwj($7)
	*(($2 + [56])) = ($8 + ((int_32)$10 * (int_32)[12]))
	*($2 + [48]) = $8
	*($2 + [52]) = $8
	$1 = *(($1 + [172]))
	$7 = *(($1 + [168]))
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$15 }
	
.LOOP $label$16:
	CALL $260($8, $7)
	$8 = (*($2 + [52]) + [12])
	*($2 + [52]) = $8
	$7 = ($7 + [12])
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$16 }
	
.LABEL $label$15
	*((($2 + [16]) + [24])) = *((($2 + [176]) + [24]))
	*((($2 + [16]) + [16])) = *((($2 + [176]) + [16]))
	*(($2 + [8])) = *((($2 + [160]) + [8]))
	*($2 + [24]) = *($2 + [184])
	*($2 + [16]) = *($2 + [176])
	*($2) = *($2 + [160])
	CALL $209($0, $4, $3, $5, $6, ($2 + [16]), $2, ($2 + [144]), ($2 + [128]), ($2 + [112]), ($2 + [96]), ($2 + [80]), $9, ($2 + [48]))
	$8 = *($2 + [48])
	if ( ($8 == 0) ){ goto $label$17 }
	$1 = *($2 + [52])
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$19 }
	
.LOOP $label$20:
	$7 = ($1 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($1 + [-4])))
	
.LABEL $label$21
	$1 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$20 }
	$7 = *($2 + [48])
	goto $label$18 
	
.LABEL $label$19
	$7 = $8
	
.LABEL $label$18
	*($2 + [52]) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((*($9) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$22
	$8 = *($2 + [80])
	if ( ($8 == 0) ){ goto $label$23 }
	$1 = *($2 + [84])
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$25 }
	
.LOOP $label$26:
	$7 = ($1 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($1 + [-4])))
	
.LABEL $label$27
	$1 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$26 }
	$7 = *($2 + [80])
	goto $label$24 
	
.LABEL $label$25
	$7 = $8
	
.LABEL $label$24
	*($2 + [84]) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$23
	$7 = *($2 + [96])
	if ( ($7 == 0) ){ goto $label$28 }
	*($2 + [100]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$28
	$8 = *($2 + [112])
	if ( ($8 == 0) ){ goto $label$29 }
	$1 = *($2 + [116])
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$31 }
	
.LOOP $label$32:
	$7 = ($1 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($1 + [-4])))
	
.LABEL $label$33
	$1 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$32 }
	$7 = *($2 + [112])
	goto $label$30 
	
.LABEL $label$31
	$7 = $8
	
.LABEL $label$30
	*($2 + [116]) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$29
	$7 = *($2 + [128])
	if ( ($7 == 0) ){ goto $label$34 }
	*($2 + [132]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$34
	$7 = *($2 + [144])
	if ( ($7 == 0) ){ goto $label$35 }
	*($2 + [148]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$35
	if ( (*($6) & [1]) ){ goto $label$37 }
	if ( (*($5) & [1]) ){ goto $label$36 }
	goto $label$1 
	
.LABEL $label$37
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$36
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [240])
	return (unreachable)
	
.LABEL $label$7
	CALL $276(($2 + [144]))
	
.LABEL $label$6
	CALL $276(($2 + [128]))
	
.LABEL $label$5
	CALL $276(($2 + [112]))
	
.LABEL $label$4
	CALL $276(($2 + [96]))
	
.LABEL $label$3
	CALL $276(($2 + [80]))
	
.LABEL $label$2
	CALL $276(($2 + [48]))
	
.LABEL $label$1
	$global$0 = ($2 + [240])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $199($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $173($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $200($2, $1)
	CALL $202(CALL $201(CALL $201($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $269 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $292([8245])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8245], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $278())
	*(CALL $278()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $290($4, ($3 + [12]), $2)
	$5 = CALL $278()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $270($3)
	
.LABEL $label$1
	CALL $271($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $130 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	*($1 + [52]) = [4]
	$5 = *($1)
	CALL eosio_assert([1], [13949])
	$6 = [40]
	$7 = ($1 + [40])
	$8 = ($1 + [52])
	$10 = *($1 + [40])
	$9 = *(($1 + [44]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [4]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$6 = (($11 & [-16]) + $6)
	
.LABEL $label$2
	$9 = ($6 + [1])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$6 = CALL $295($9)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($3 - (($9 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($4 + [12]) = $6
	*($4 + [8]) = $6
	*($4 + [16]) = ($6 + $9)
	*($4 + [24]) = ($4 + [8])
	*($4 + [52]) = $7
	*($4 + [56]) = $8
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [24])
	*($4 + [48]) = ($1 + [32])
	CALL $236(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [60]), $2, $6, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $298($6)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [64])
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	if ( ((uint_32)$1 > (uint_32)[51]) ){ goto $label$163 }
	goto $label$213 
	
.LABEL $label$213
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13260])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$142 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$141 }
	goto $label$140 
	
.LABEL $label$212
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13677])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$160 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$159 }
	goto $label$158 
	
.LABEL $label$211
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13620])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$157 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$210
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13503])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$139 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$209
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13559])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$154 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$153 }
	goto $label$152 
	
.LABEL $label$208
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13567])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$151 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$150 }
	goto $label$149 
	
.LABEL $label$207
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13574])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$148 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$147 }
	goto $label$146 
	
.LABEL $label$206
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13652])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$145 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$144 }
	goto $label$143 
	
.LABEL $label$205
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13375])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$136 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$204
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13395])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$133 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$203
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13545])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$130 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$129 }
	goto $label$128 
	
.LABEL $label$202
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13552])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$127 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$126 }
	goto $label$125 
	
.LABEL $label$201
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13628])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$124 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$200
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13660])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$121 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$199
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13268])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$118 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$198
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13276])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$115 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$197
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13284])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$112 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$196
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13292])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$109 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$108 }
	goto $label$107 
	
.LABEL $label$195
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13316])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$106 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$194
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13332])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$103 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$102 }
	goto $label$101 
	
.LABEL $label$193
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13349])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$100 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$192
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13357])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$97 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$191
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13385])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$94 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$190
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13405])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$79 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$189
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13476])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$91 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$188
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13486])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$88 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$187
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13531])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$76 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$186
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13596])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$85 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$185
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13604])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$73 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$184
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13669])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$82 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$183
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13300])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$70 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$182
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13308])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$67 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$181
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13324])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$64 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$180
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13341])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$61 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$179
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13365])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$58 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$178
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13415])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$55 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$177
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13425])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$52 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$176
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13435])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$49 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$175
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13445])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$46 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$174
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13455])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$43 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$173
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13524])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$40 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$172
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13538])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$37 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$171
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13588])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$34 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$170
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13612])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$31 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$169
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13636])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$28 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$168
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13466])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$25 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$167
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13496])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$22 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$166
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13510])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$19 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$165
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13517])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$16 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$164
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13581])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$13 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$163
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13693])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$162
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13644])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$161
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13685])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$160
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$159
	CALL memcpy($2, [13677], $1)
	
.LABEL $label$158
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$157
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$156
	CALL memcpy($2, [13620], $1)
	
.LABEL $label$155
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$154
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$153
	CALL memcpy($2, [13559], $1)
	
.LABEL $label$152
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$151
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$150
	CALL memcpy($2, [13567], $1)
	
.LABEL $label$149
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$148
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$147
	CALL memcpy($2, [13574], $1)
	
.LABEL $label$146
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$145
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$144
	CALL memcpy($2, [13652], $1)
	
.LABEL $label$143
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$142
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$141
	CALL memcpy($2, [13260], $1)
	
.LABEL $label$140
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$139
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$138
	CALL memcpy($2, [13503], $1)
	
.LABEL $label$137
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$136
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$135
	CALL memcpy($2, [13375], $1)
	
.LABEL $label$134
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$133
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$132
	CALL memcpy($2, [13395], $1)
	
.LABEL $label$131
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$130
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$129
	CALL memcpy($2, [13545], $1)
	
.LABEL $label$128
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$127
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$126
	CALL memcpy($2, [13552], $1)
	
.LABEL $label$125
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$124
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$123
	CALL memcpy($2, [13628], $1)
	
.LABEL $label$122
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$121
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$120
	CALL memcpy($2, [13660], $1)
	
.LABEL $label$119
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$118
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$117
	CALL memcpy($2, [13268], $1)
	
.LABEL $label$116
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$115
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$114
	CALL memcpy($2, [13276], $1)
	
.LABEL $label$113
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$112
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$111
	CALL memcpy($2, [13284], $1)
	
.LABEL $label$110
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$109
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$108
	CALL memcpy($2, [13292], $1)
	
.LABEL $label$107
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$106
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$105
	CALL memcpy($2, [13316], $1)
	
.LABEL $label$104
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$103
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$102
	CALL memcpy($2, [13332], $1)
	
.LABEL $label$101
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$100
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$99
	CALL memcpy($2, [13349], $1)
	
.LABEL $label$98
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$97
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$96
	CALL memcpy($2, [13357], $1)
	
.LABEL $label$95
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$94
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$93
	CALL memcpy($2, [13385], $1)
	
.LABEL $label$92
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$91
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$90
	CALL memcpy($2, [13476], $1)
	
.LABEL $label$89
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$88
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$87
	CALL memcpy($2, [13486], $1)
	
.LABEL $label$86
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$85
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$84
	CALL memcpy($2, [13596], $1)
	
.LABEL $label$83
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$82
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$81
	CALL memcpy($2, [13669], $1)
	
.LABEL $label$80
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$79
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$78
	CALL memcpy($2, [13405], $1)
	
.LABEL $label$77
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$76
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$75
	CALL memcpy($2, [13531], $1)
	
.LABEL $label$74
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$73
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$72
	CALL memcpy($2, [13604], $1)
	
.LABEL $label$71
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$70
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$69
	CALL memcpy($2, [13300], $1)
	
.LABEL $label$68
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$67
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$66
	CALL memcpy($2, [13308], $1)
	
.LABEL $label$65
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$64
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$63
	CALL memcpy($2, [13324], $1)
	
.LABEL $label$62
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$61
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$60
	CALL memcpy($2, [13341], $1)
	
.LABEL $label$59
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$58
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$57
	CALL memcpy($2, [13365], $1)
	
.LABEL $label$56
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$55
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$54
	CALL memcpy($2, [13415], $1)
	
.LABEL $label$53
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$52
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$51
	CALL memcpy($2, [13425], $1)
	
.LABEL $label$50
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$49
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$48
	CALL memcpy($2, [13435], $1)
	
.LABEL $label$47
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$46
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$45
	CALL memcpy($2, [13445], $1)
	
.LABEL $label$44
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$43
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$42
	CALL memcpy($2, [13455], $1)
	
.LABEL $label$41
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$40
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$39
	CALL memcpy($2, [13524], $1)
	
.LABEL $label$38
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$37
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$36
	CALL memcpy($2, [13538], $1)
	
.LABEL $label$35
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$34
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$33
	CALL memcpy($2, [13588], $1)
	
.LABEL $label$32
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$31
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$30
	CALL memcpy($2, [13612], $1)
	
.LABEL $label$29
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$28
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$27
	CALL memcpy($2, [13636], $1)
	
.LABEL $label$26
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$25
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$24
	CALL memcpy($2, [13466], $1)
	
.LABEL $label$23
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$22
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$21
	CALL memcpy($2, [13496], $1)
	
.LABEL $label$20
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$19
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$18
	CALL memcpy($2, [13510], $1)
	
.LABEL $label$17
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$16
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$15
	CALL memcpy($2, [13517], $1)
	
.LABEL $label$14
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$13
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$12
	CALL memcpy($2, [13581], $1)
	
.LABEL $label$11
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$10
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$9
	CALL memcpy($2, [13693], $1)
	
.LABEL $label$8
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$7
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$6
	CALL memcpy($2, [13644], $1)
	
.LABEL $label$5
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$4
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$3
	CALL memcpy($2, [13685], $1)
	
.LABEL $label$2
	*(($2 + $1)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $259($0)
	$1
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL _ZdlPv($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL _Znwj($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $276($0)
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $262($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $260($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $260($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $276($0)
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$1 = ($1 + [-1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$17 }
	goto $label$22 
	
.LABEL $label$22
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13752])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$8 }
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$21
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13716])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$15 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$14 }
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$20
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13741])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$13 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$12 }
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$19
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13747])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$6 }
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$18
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13732])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$10 }
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$17
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13693])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$4 }
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$16
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $292([13701])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$2 }
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$15
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$14
	CALL memcpy($2, [13716], $1)
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$13
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$12
	CALL memcpy($2, [13741], $1)
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$11
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$10
	CALL memcpy($2, [13732], $1)
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$9
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$8
	CALL memcpy($2, [13752], $1)
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$7
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$6
	CALL memcpy($2, [13747], $1)
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$5
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$4
	CALL memcpy($2, [13693], $1)
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$3
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$2
	CALL memcpy($2, [13701], $1)
	*(($2 + $1)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $259($0)
	$1
}

void .FUNC $136 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = *($1)
	$7 = *(*($3))
	if ( ((int_64)$7 == (int_64)1) ){ goto $label$3 }
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$2 }
	*($1 + [52]) = [2]
	$7 = $6
	goto $label$1 
	
.LABEL $label$3
	*($1 + [52]) = [3]
	$7 = $6
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [11404])
	$7 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [13949])
	$3 = [40]
	$8 = ($1 + [40])
	$10 = *($1 + [40])
	$9 = *(($1 + [44]))
	$11 = ($9 - $10)
	$7 = (CASTING uint_64)(uint_32 int_32($11 >> [4]))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$5 }
	$3 = (($11 & [-16]) + $3)
	
.LABEL $label$5
	$9 = ($3 + [1])
	if ( ($9 <= [513]) ){ goto $label$7 }
	$3 = CALL $295($9)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $9)
	*($5 + [24]) = ($5 + [8])
	*($5 + [52]) = $8
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [24])
	*($5 + [48]) = ($1 + [32])
	*($5 + [56]) = ($1 + [52])
	CALL $236(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [60]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $298($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [64])
}

void .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $173(($6 + [28]), [16])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [12992])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [12992])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($5 = ($2 + [-16]))) = [0]
	$3 = ($8 + [-24])
	*($4) = *($3)
	$4 = ($8 + [-16])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$5 = ($8 + [-12])
	*($4) = *($5)
	*($3) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $260 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $261 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $213 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12)
{
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$13 = ($global$0 - [224])
	$global$0 = $13
	$0 = *($0 + [4])
	$14 = *($0 + [4])
	$15 = (*($0) + int_32($14 >> [1]))
	$16 = *($0)
	if ( (($14 & [1]) == 0) ){ goto $label$1 }
	$16 = *((*($15) + $16))
	
.LABEL $label$1
	*($13 + [216]) = [0]
	*($13 + [208]) = (int_64)0
	$0 = (*($3 + [4]) - *($3))
	$14 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$7 }
	if ( ((uint_32)$14 >= (uint_32)[357913942]) ){ goto $label$6 }
	$0 = CALL _Znwj($0)
	*(($13 + [216])) = ($0 + ((int_32)$14 * (int_32)[12]))
	*($13 + [208]) = $0
	*($13 + [212]) = $0
	$3 = *(($3 + [4]))
	$14 = *($3)
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$17 = CALL $260($0, $14)
	$0 = ($0 + [12])
	$14 = ($14 + [12])
	if ( ((int_32)$3 != (int_32)$14) ){ goto $label$8 }
	*($13 + [212]) = ($17 + [12])
	
.LABEL $label$7
	*($13 + [200]) = [0]
	*($13 + [192]) = (int_64)0
	$0 = (*($4 + [4]) - *($4))
	$14 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$9 }
	if ( ((uint_32)$14 >= (uint_32)[357913942]) ){ goto $label$5 }
	$0 = CALL _Znwj($0)
	*(($13 + [200])) = ($0 + ((int_32)$14 * (int_32)[12]))
	*($13 + [192]) = $0
	*($13 + [196]) = $0
	$3 = *(($4 + [4]))
	$14 = *($4)
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$17 = CALL $260($0, $14)
	$0 = ($0 + [12])
	$14 = ($14 + [12])
	if ( ((int_32)$3 != (int_32)$14) ){ goto $label$10 }
	*($13 + [196]) = ($17 + [12])
	
.LABEL $label$9
	$0 = CALL $260(($13 + [176]), $5)
	$14 = CALL $260(($13 + [160]), $6)
	*(($3 = (($13 + [144]) + [8]))) = *(($7 + [8]))
	*(($17 = (($13 + [128]) + [8]))) = *(($9 + [8]))
	*(($4 = (($13 + [112]) + [8]))) = *(($10 + [8]))
	*(($5 = (($13 + [96]) + [8]))) = *(($11 + [8]))
	*(($6 = (($13 + [80]) + [8]))) = *(($12 + [8]))
	*($13 + [144]) = *($7)
	*($13 + [128]) = *($9)
	*($13 + [112]) = *($10)
	*($13 + [96]) = *($11)
	*($13 + [80]) = *($12)
	*((($13 + [64]) + [8])) = *($3)
	*($13 + [64]) = *($13 + [144])
	*((($13 + [48]) + [8])) = *($17)
	*($13 + [48]) = *($13 + [128])
	*((($13 + [32]) + [8])) = *($4)
	*($13 + [32]) = *($13 + [112])
	*((($13 + [16]) + [8])) = *($5)
	*($13 + [16]) = *($13 + [96])
	*(($13 + [8])) = *($6)
	*($13) = *($13 + [80])
	CALL void $15((int_32 $1), (int_64 $2), (int_64 ($13 + [208])), (int_32 ($13 + [192])), (int_32 $0), (int_32 $14), (int_32 ($13 + [64])), (int_32 $8), (int_32 ($13 + [48])), (int_32 ($13 + [32])), (int_32 ($13 + [16])), (int_32 $13), (int_32 $16))
	if ( (*($14) & [1]) ){ goto $label$12 }
	if ( (*($0) & [1]) ){ goto $label$11 }
	goto $label$4 
	
.LABEL $label$12
	CALL _ZdlPv(*($14 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$11
	CALL _ZdlPv(*($0 + [8]))
	$3 = *($13 + [192])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	CALL $276(($13 + [208]))
	
.LABEL $label$5
	CALL $276(($13 + [192]))
	
.LABEL $label$4
	$3 = *($13 + [192])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$14 = *($13 + [196])
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($14 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($14 + [-4])))
	
.LABEL $label$16
	$14 = $0
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$15 }
	$0 = *($13 + [192])
	goto $label$13 
	
.LABEL $label$14
	$0 = $3
	
.LABEL $label$13
	*($13 + [196]) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$3 = *($13 + [208])
	if ( ($3 == 0) ){ goto $label$17 }
	$14 = *($13 + [212])
	if ( ((int_32)$14 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$0 = ($14 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($14 + [-4])))
	
.LABEL $label$21
	$14 = $0
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$20 }
	$0 = *($13 + [208])
	goto $label$18 
	
.LABEL $label$19
	$0 = $3
	
.LABEL $label$18
	*($13 + [212]) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$17
	$global$0 = ($13 + [224])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $262 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $263($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $283 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $263 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $265 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $266($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $208 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

void .FUNC $209 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13)
{
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$14 = ($global$0 - [240])
	$global$0 = $14
	$0 = *($0 + [4])
	$15 = *($0 + [4])
	$16 = (*($0) + int_32($15 >> [1]))
	$17 = *($0)
	if ( (($15 & [1]) == 0) ){ goto $label$1 }
	$17 = *((*($16) + $17))
	
.LABEL $label$1
	$0 = CALL $260(($14 + [224]), $3)
	$3 = CALL $260(($14 + [208]), $4)
	*((($14 + [176]) + [24])) = *(($5 + [24]))
	*((($14 + [176]) + [16])) = *(($5 + [16]))
	*((($14 + [160]) + [8])) = *(($6 + [8]))
	*($14 + [144]) = (int_64)0
	*($14 + [152]) = [0]
	*($14 + [184]) = *(($5 + [8]))
	*($14 + [176]) = *($5)
	*($14 + [160]) = *($6)
	$5 = (*($7 + [4]) - *($7))
	if ( ($5 == 0) ){ goto $label$9 }
	$6 = int_32($5 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$8 }
	$5 = CALL _Znwj($5)
	*(($14 + [152])) = ($5 + ($6 << [4]))
	*($14 + [144]) = $5
	*($14 + [148]) = $5
	$6 = *($7)
	$7 = (*(($7 + [4])) - $6)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $6, $7)
	*($14 + [148]) = (*($14 + [148]) + $7)
	
.LABEL $label$9
	*($14 + [136]) = [0]
	*($14 + [128]) = (int_64)0
	$5 = (*($8 + [4]) - *($8))
	if ( ($5 == 0) ){ goto $label$10 }
	$7 = int_32($5 >> [4])
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$7 }
	$5 = CALL _Znwj($5)
	*(($14 + [136])) = ($5 + ($7 << [4]))
	*($14 + [128]) = $5
	*($14 + [132]) = $5
	$8 = *($8)
	$7 = (*(($8 + [4])) - $8)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $8, $7)
	*($14 + [132]) = (*($14 + [132]) + $7)
	
.LABEL $label$10
	*($14 + [120]) = [0]
	*($14 + [112]) = (int_64)0
	$5 = (*($9 + [4]) - *($9))
	$8 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((uint_32)$8 >= (uint_32)[357913942]) ){ goto $label$6 }
	$7 = CALL _Znwj($5)
	*(($14 + [120])) = ($7 + ((int_32)$8 * (int_32)[12]))
	*($14 + [112]) = $7
	*($14 + [116]) = $7
	$8 = *(($9 + [4]))
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$11 }
	
.LOOP $label$12:
	CALL $260($7, $5)
	$7 = (*($14 + [116]) + [12])
	*($14 + [116]) = $7
	$5 = ($5 + [12])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$12 }
	
.LABEL $label$11
	*($14 + [104]) = [0]
	*($14 + [96]) = (int_64)0
	$5 = (*($10 + [4]) - *($10))
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL _Znwj($5)
	*(($14 + [104])) = ($7 + $5)
	*($14 + [96]) = $7
	*($14 + [100]) = $7
	$8 = *($10)
	$5 = (*(($10 + [4])) - $8)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($7, $8, $5)
	*($14 + [100]) = (*($14 + [100]) + $5)
	
.LABEL $label$13
	*($14 + [88]) = [0]
	*($14 + [80]) = (int_64)0
	$5 = (*($11 + [4]) - *($11))
	$8 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$14 }
	if ( ((uint_32)$8 >= (uint_32)[357913942]) ){ goto $label$4 }
	$7 = CALL _Znwj($5)
	*(($14 + [88])) = ($7 + ((int_32)$8 * (int_32)[12]))
	*($14 + [80]) = $7
	*($14 + [84]) = $7
	$8 = *(($11 + [4]))
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$14 }
	
.LOOP $label$15:
	CALL $260($7, $5)
	$7 = (*($14 + [84]) + [12])
	*($14 + [84]) = $7
	$5 = ($5 + [12])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$15 }
	
.LABEL $label$14
	$9 = CALL $260(($14 + [64]), $12)
	*($14 + [56]) = [0]
	*($14 + [48]) = (int_64)0
	$5 = (*($13 + [4]) - *($13))
	$8 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$16 }
	if ( ((uint_32)$8 >= (uint_32)[357913942]) ){ goto $label$3 }
	$7 = CALL _Znwj($5)
	*(($14 + [56])) = ($7 + ((int_32)$8 * (int_32)[12]))
	*($14 + [48]) = $7
	*($14 + [52]) = $7
	$8 = *(($13 + [4]))
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	CALL $260($7, $5)
	$7 = (*($14 + [52]) + [12])
	*($14 + [52]) = $7
	$5 = ($5 + [12])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$17 }
	
.LABEL $label$16
	*((($14 + [16]) + [24])) = *((($14 + [176]) + [24]))
	*((($14 + [16]) + [16])) = *((($14 + [176]) + [16]))
	*(($14 + [8])) = *((($14 + [160]) + [8]))
	*($14 + [24]) = *($14 + [184])
	*($14 + [16]) = *($14 + [176])
	*($14) = *($14 + [160])
	CALL void $16((int_32 $1), (int_64 $2), (int_64 $0), (int_32 $3), (int_32 ($14 + [16])), (int_32 $14), (int_32 ($14 + [144])), (int_32 ($14 + [128])), (int_32 ($14 + [112])), (int_32 ($14 + [96])), (int_32 ($14 + [80])), (int_32 $9), (int_32 ($14 + [48])), (int_32 $17))
	$8 = *($14 + [48])
	if ( ($8 == 0) ){ goto $label$18 }
	$7 = *($14 + [52])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$20 }
	
.LOOP $label$21:
	$5 = ($7 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$22
	$7 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$21 }
	$5 = *($14 + [48])
	goto $label$19 
	
.LABEL $label$20
	$5 = $8
	
.LABEL $label$19
	*($14 + [52]) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((*($9) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$23
	$8 = *($14 + [80])
	if ( ($8 == 0) ){ goto $label$24 }
	$7 = *($14 + [84])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$26 }
	
.LOOP $label$27:
	$5 = ($7 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$28
	$7 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$27 }
	$5 = *($14 + [80])
	goto $label$25 
	
.LABEL $label$26
	$5 = $8
	
.LABEL $label$25
	*($14 + [84]) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$24
	$5 = *($14 + [96])
	if ( ($5 == 0) ){ goto $label$29 }
	*($14 + [100]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$29
	$8 = *($14 + [112])
	if ( ($8 == 0) ){ goto $label$30 }
	$7 = *($14 + [116])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$32 }
	
.LOOP $label$33:
	$5 = ($7 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$34
	$7 = $5
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$33 }
	$5 = *($14 + [112])
	goto $label$31 
	
.LABEL $label$32
	$5 = $8
	
.LABEL $label$31
	*($14 + [116]) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$30
	$5 = *($14 + [128])
	if ( ($5 == 0) ){ goto $label$35 }
	*($14 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$35
	$5 = *($14 + [144])
	if ( ($5 == 0) ){ goto $label$36 }
	*($14 + [148]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$36
	if ( (*($3) & [1]) ){ goto $label$38 }
	if ( (*($0) & [1]) ){ goto $label$37 }
	goto $label$2 
	
.LABEL $label$38
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$37
	CALL _ZdlPv(*($0 + [8]))
	$global$0 = ($14 + [240])
	return (unreachable)
	
.LABEL $label$8
	CALL $276(($14 + [144]))
	
.LABEL $label$7
	CALL $276(($14 + [128]))
	
.LABEL $label$6
	CALL $276(($14 + [112]))
	
.LABEL $label$5
	CALL $276(($14 + [96]))
	
.LABEL $label$4
	CALL $276(($14 + [80]))
	
.LABEL $label$3
	CALL $276(($14 + [48]))
	
.LABEL $label$2
	$global$0 = ($14 + [240])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [12992])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [12992])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $198($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $203 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $276($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [12992])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [12992])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [12992])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [12992])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [12992])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [12992])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [12992])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [12992])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [12992])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $198(CALL $197($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $206 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [13762])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = int_32(($6 - $3) >> [4])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $207($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ($8 << [4]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$4 = *($8)
	
.LOOP $label$6:
	$7 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($8), [8])
	$4 = (*($8) + [8])
	*($8) = $4
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [8])) = *($2 + [8])
	$4 = (*($8) + [8])
	*($8) = $4
	$3 = ($3 + [16])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $207 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $276($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $204 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [13762])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $173($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [12690])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $205 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$8 = ($global$0 - [80])
	$global$0 = $8
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$10 = (*($0) + int_32($9 >> [1]))
	$0 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($10) + $0))
	
.LABEL $label$1
	*($8 + [72]) = [0]
	*($8 + [64]) = (int_64)0
	$9 = (*($3 + [4]) - *($3))
	if ( ($9 == 0) ){ goto $label$10 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$9 }
	$11 = CALL _Znwj($9)
	*(($8 + [72])) = ($11 + $9)
	*($8 + [64]) = $11
	*($8 + [68]) = $11
	$9 = *($3)
	$3 = (*(($3 + [4])) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($11, $9, $3)
	*($8 + [68]) = ($11 + $3)
	
.LABEL $label$10
	$4 = CALL $260($8, $7)
	$11 = CALL $260(($8 + [16]), $6)
	$9 = CALL $260(($8 + [32]), $5)
	$3 = CALL $260(($8 + [48]), $4)
	CALL void $10((int_32 $1), (int_64 $2), (int_64 ($8 + [64])), (int_32 $3), (int_32 $9), (int_32 $11), (int_32 $4), (int_32 $0))
	if ( (*($4) & [1]) ){ goto $label$12 }
	if ( (*($11) & [1]) ){ goto $label$11 }
	goto $label$8 
	
.LABEL $label$12
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($11) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$11
	CALL _ZdlPv(*($11 + [8]))
	$0 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	CALL $276(($8 + [64]))
	
.LABEL $label$8
	$0 = [1]
	if ( (*($9) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($3) & $0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($3 + [8]))
	$3 = *($8 + [64])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = *($8 + [64])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($8 + [68]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$global$0 = ($8 + [80])
	(unreachable)
}

int_32 .FUNC $282 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $181 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = ($1 + [108])
	$3 = (*(*($3)) + [-1])
	$7 = *($1 + [108])
	if ( ((uint_32)((int_32)(*(($1 + [112])) - $7) / (int_32)[40]) <= (uint_32)$3) ){ goto $label$2 }
	$8 = *($1)
	*(($7 + ((int_32)$3 * (int_32)[40])) + [23]) = [1]
	CALL eosio_assert([1], [13949])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	*($5 + [60]) = $6
	*($5 + [32]) = $1
	$7 = ($1 + [8])
	*($5 + [36]) = $7
	$9 = ($1 + [16])
	*($5 + [40]) = $9
	$10 = ($1 + [24])
	*($5 + [44]) = $10
	$11 = ($1 + [48])
	*($5 + [48]) = $11
	$12 = ($1 + [64])
	*($5 + [52]) = $12
	$13 = ($1 + [96])
	*($5 + [56]) = $13
	$14 = ($1 + [120])
	*($5 + [64]) = $14
	$15 = ($1 + [132])
	*($5 + [68]) = $15
	$16 = ($1 + [136])
	*($5 + [72]) = $16
	CALL $224(($5 + [32]), ($5 + [8]))
	$3 = *($5 + [24])
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $295($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $7
	*($5 + [40]) = $9
	*($5 + [44]) = $10
	*($5 + [48]) = $11
	*($5 + [52]) = $12
	*($5 + [56]) = $13
	*($5 + [60]) = $6
	*($5 + [64]) = $14
	*($5 + [68]) = $15
	*($5 + [72]) = $16
	*($5 + [32]) = $1
	CALL $225(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [148]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	CALL $298($4)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$1 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return (unreachable)
	
.LABEL $label$2
	CALL $277($6)
	
.LABEL $label$1
	$global$0 = ($5 + [80])
}

void .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$7 = *($4 + [4])
	$6 = ($1 + [8])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$1 }
	CALL $133($6, *($7), *($7 + [4]))
	
.LABEL $label$1
	$4 = *($4 + [8])
	if ( ((int_32)*($4) != (int_32)[1]) ){ goto $label$3 }
	$7 = *($4 + [1])
	if ( ((int_32)$7 == (int_32)[1]) ){ goto $label$3 }
	$4 = [0]
	if ( ($7 <= [12]) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = [1]
	
.LABEL $label$2
	*($1 + [20]) = $4
	$8 = *($1 + [8])
	$7 = *(($1 + [12]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 $9)
	$4 = [8]
	
.LOOP $label$4:
	$4 = ($4 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	$8 = ( $4 ? ($9 + $4) : ((int_32)$8 == (int_32)$7) )
	$7 = ($8 + [1])
	if ( ($7 <= [513]) ){ goto $label$6 }
	$4 = CALL $295($7)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($3) = $4
	*($3 + [8]) = ($4 + $7)
	CALL eosio_assert(((int_32)($8 + [1]) > (int_32)[7]), [12992])
	CALL memcpy($4, $1, [8])
	*($3 + [4]) = ($4 + [8])
	CALL $228($3, $6)
	*($3 + [15]) = *($1 + [20])
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [12992])
	CALL memcpy(*($3 + [4]), ($3 + [15]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$10 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($5 + [8]), (int_64)-3612602256646602752, *(*($0 + [8])), $10, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$10 >= (uint_64)*($5 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $298($4)
	if ( (uint_64)($10 <= *($5 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

int_32 .FUNC $286 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $285($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $287 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = *($0)
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	$3 = CALL db_find_i64($2, $2, (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $62(($1 + [8]), $3) + [4]) == (int_32)($1 + [8])), [13766])
	$3 = [0]
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [8336])
	*($1) = [0]
	CALL $63(($1 + [8]), $1, *($0))
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($1 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($1 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($1 + [48])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$3 = CALL $295($7)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $7)
	
.LABEL $label$1
	$2 = ($3 + $7)
	*(($4 + [8])) = $2
	*($4 + [20]) = $3
	*($4 + [16]) = $3
	*($4 + [24]) = $2
	*($4) = *($4 + [16])
	$2 = CALL $5(($4 + [32]), $0, $1, $4)
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	if ( ($5 & [1]) ){ goto $label$13 }
	CALL void $8((int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL void $8((int_32 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $298($3)
	$3 = [1]
	if ( ((*($2 + [52]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3 = [1]
	if ( (*($2 + [52]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($2 + [40]) & $3) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($2 + [60])))
	if ( ((*($2 + [40]) & $3) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($2 + [48])))
	$3 = [1]
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$3 = [1]
	if ( (*($2 + [28]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [256])
	return $3
	
.LABEL $label$5
	CALL _ZdlPv(*(($2 + [36])))
	$global$0 = ($4 + [256])
	return $3
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [14148])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [14193])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [14243])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [12])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([40])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [12690])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $153(($3 + [32]), ($5 + [8]))
	CALL eosio_assert(((int_32)*($3 + [40]) != (int_32)*($3 + [36])), [12690])
	CALL memcpy(($3 + [16]), *($3 + [36]), [1])
	*($5 + [20]) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($3 + [36]) = (*($3 + [36]) + [1])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $129(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [14148])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [14193])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((int_64)*(*(($5 + [-24])) + [8]) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8) + [8]) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [14243])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [112])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [116])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	$8 = *($5 + [112])
	if ( ($8 == 0) ){ goto $label$14 }
	*(($5 + [116])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [132]))
}

void .FUNC $120 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5 = *($0)
	*($4 + [24]) = $5
	*($4 + [32]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)-3612798081281556480, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $112(($4 + [24]), $6)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($4 + [24])), [13766])
	$8 = *(($7 + [44]))
	$6 = *($7 + [40])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$3 }
	$5 = *($2 + [8])
	
.LOOP $label$4:
	if ( ((int_64)*(($6 + [8])) == (int_64)$5) ){ goto $label$2 }
	$6 = ($6 + [16])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$4 }
	$6 = $8
	goto $label$2 
	
.LABEL $label$3
	$8 = $6
	
.LABEL $label$2
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = (int_64)0
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$7 }
	$5 = *($6)
	$1 = *($6 + [8])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$1), [12853])
	$5 = ((int_64)$5 + (int_64)*($2))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [12915])
	*(($4 + [16])) = $1
	*($4 + [8]) = $5
	$5 = *($0)
	*($4) = $2
	*($4 + [4]) = ($4 + [8])
	CALL eosio_assert([1], [13817])
	CALL $184(($4 + [24]), $7, $5, $4)
	if ( (int_64)($3 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	*((($4 + [8]) + [8])) = *(($2 + [8]))
	*($4 + [8]) = *($2)
	$5 = *($0)
	*($4) = ($4 + [8])
	CALL eosio_assert([1], [13817])
	CALL $185(($4 + [24]), $7, $5, $4)
	if ( (int_64)($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert(((uint_64)*($4 + [8]) <= (uint_64)$3), [11982])
	
.LABEL $label$5
	$0 = *($4 + [48])
	if ( ($0 == 0) ){ goto $label$1 }
	$7 = ($4 + [52])
	$6 = *($7)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	$2 = *($8 + [40])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($8 + [44])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	CALL _ZdlPv($8)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($4 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $0
	
.LABEL $label$8
	*($7) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 apply)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [944])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$45 }
	if ( ((int_64)$2 > (int_64)-3590647491983425537) ){ goto $label$44 }
	if ( ((int_64)$2 <= (int_64)-3612604550649741313) ){ goto $label$40 }
	if ( ((int_64)$2 <= (int_64)-3612584647772166657) ){ goto $label$38 }
	if ( ((int_64)$2 <= (int_64)-3590893813435990017) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)-3590893813435990016) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-3590852946822168576) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)-3590800762969522176) ){ goto $label$8 }
	*($3 + [716]) = [0]
	*($3 + [712]) = [1]
	*($3 + [208]) = *($3 + [712])
	CALL $4($1, $1, ($3 + [208]))
	goto $label$1 
	
.LABEL $label$45
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$43 }
	*((($3 + [296]) + [8])) = [0]
	*($3 + [424]) = [0]
	*($3 + [296]) = (int_64)0
	*($3 + [416]) = (int_64)0
	$4 = CALL $5(($3 + [432]), $0, $1, ($3 + [296]))
	CALL $6(($3 + [368]))
	*(($5 = (($3 + [328]) + [8]))) = *(($3 + [392]))
	*($3 + [328]) = *($3 + [384])
	$2 = *($3 + [376])
	$0 = *($3 + [368])
	$6 = *($5)
	*((($3 + [928]) + [8])) = $6
	*(($7 = (($3 + [344]) + [8]))) = $6
	*($3 + [360]) = $1
	$1 = *($3 + [328])
	*($3 + [344]) = $1
	*($3 + [928]) = $1
	$8 = ($3 + [400])
	$5 = CALL $260(($3 + [312]), $8)
	*(($3 + [288])) = *($3 + [360])
	*((($3 + [272]) + [8])) = *($7)
	*($3 + [272]) = *($3 + [344])
	CALL $7($4, $0, $2, ($3 + [272]), $5)
	if ( (*($5) & [1]) ){ goto $label$42 }
	if ( (*($8) & [1]) ){ goto $label$41 }
	goto $label$7 
	
.LABEL $label$44
	if ( ((int_64)$2 <= (int_64)4311998324309569695) ){ goto $label$39 }
	if ( ((int_64)$2 <= (int_64)4318710504080211967) ){ goto $label$37 }
	if ( ((int_64)$2 <= (int_64)4319395477083652095) ){ goto $label$33 }
	if ( ((int_64)$2 == (int_64)4319395477083652096) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)4319422484698541568) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$8 }
	*($3 + [924]) = [0]
	*($3 + [920]) = [2]
	*($3) = *($3 + [920])
	CALL $9($1, $1, $3)
	goto $label$1 
	
.LABEL $label$43
	CALL eosio_assert([0], [8223])
	goto $label$1 
	
.LABEL $label$42
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($8) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$41
	CALL _ZdlPv(*(($3 + [408])))
	$5 = [1]
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$40
	if ( ((int_64)$2 > (int_64)-3612848861619421185) ){ goto $label$36 }
	if ( ((int_64)$2 > (int_64)-4417357895863107585) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)-6077959540857372672) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)-5969873149800480768) ){ goto $label$8 }
	*($3 + [900]) = [0]
	*($3 + [896]) = [3]
	*($3 + [24]) = *($3 + [896])
	CALL $11($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$39
	if ( ((int_64)$2 > (int_64)4308982661471584255) ){ goto $label$35 }
	if ( ((int_64)$2 > (int_64)-3590629599642386433) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)-3590647491983425536) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)-3590647431776698368) ){ goto $label$8 }
	*($3 + [676]) = [0]
	*($3 + [672]) = [4]
	*($3 + [248]) = *($3 + [672])
	CALL $13($1, $1, ($3 + [248]))
	goto $label$1 
	
.LABEL $label$38
	if ( ((int_64)$2 > (int_64)-3612602479960129537) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)-3612604550649741312) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)-3612602540166856704) ){ goto $label$8 }
	*($3 + [724]) = [0]
	*($3 + [720]) = [5]
	*($3 + [200]) = *($3 + [720])
	CALL $15($1, $1, ($3 + [200]))
	goto $label$1 
	
.LABEL $label$37
	if ( ((int_64)$2 > (int_64)4313664920727060479) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)4311998324309569696) ){ goto $label$19 }
	if ( ((int_64)$2 != (int_64)4313019627660640256) ){ goto $label$8 }
	*($3 + [860]) = [0]
	*($3 + [856]) = [6]
	*($3 + [64]) = *($3 + [856])
	CALL $17($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$36
	if ( ((int_64)$2 > (int_64)-3612755811152953345) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)-3612848861619421184) ){ goto $label$18 }
	if ( ((int_64)$2 != (int_64)-3612826272665534464) ){ goto $label$8 }
	*($3 + [748]) = [0]
	*($3 + [744]) = [7]
	*($3 + [176]) = *($3 + [744])
	CALL $19($1, $1, ($3 + [176]))
	goto $label$1 
	
.LABEL $label$35
	if ( ((int_64)$2 > (int_64)4310687319046468095) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)4308982661471584256) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)4310687305800089600) ){ goto $label$8 }
	*($3 + [820]) = [0]
	*($3 + [816]) = [8]
	*($3 + [104]) = *($3 + [816])
	CALL $21($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$34
	if ( ((int_64)$2 == (int_64)-3612584647772166656) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)-3590947083571255808) ){ goto $label$8 }
	*($3 + [708]) = [0]
	*($3 + [704]) = [9]
	*($3 + [216]) = *($3 + [704])
	CALL $23($1, $1, ($3 + [216]))
	goto $label$1 
	
.LABEL $label$33
	if ( ((int_64)$2 == (int_64)4318710504080211968) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)4319142148912234496) ){ goto $label$8 }
	*($3 + [868]) = [0]
	*($3 + [864]) = [10]
	*($3 + [56]) = *($3 + [864])
	CALL $23($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)-4417357895863107584) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)-3612902131754686976) ){ goto $label$8 }
	*($3 + [788]) = [0]
	*($3 + [784]) = [11]
	*($3 + [136]) = *($3 + [784])
	CALL $26($1, $1, ($3 + [136]))
	goto $label$1 
	
.LABEL $label$31
	if ( ((int_64)$2 == (int_64)-3590629599642386432) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-3590629599588735488) ){ goto $label$8 }
	*($3 + [700]) = [0]
	*($3 + [696]) = [12]
	*($3 + [224]) = *($3 + [696])
	CALL $23($1, $1, ($3 + [224]))
	goto $label$1 
	
.LABEL $label$30
	if ( ((int_64)$2 == (int_64)-3612602479960129536) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-3612584647825817600) ){ goto $label$8 }
	*($3 + [732]) = [0]
	*($3 + [728]) = [13]
	*($3 + [192]) = *($3 + [728])
	CALL $29($1, $1, ($3 + [192]))
	goto $label$1 
	
.LABEL $label$29
	if ( ((int_64)$2 == (int_64)4313664920727060480) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)4313664925730095104) ){ goto $label$8 }
	*($3 + [836]) = [0]
	*($3 + [832]) = [14]
	*($3 + [88]) = *($3 + [832])
	CALL $31($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$28
	if ( ((int_64)$2 == (int_64)-3612755811152953344) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-3612672564375945216) ){ goto $label$8 }
	*($3 + [772]) = [0]
	*($3 + [768]) = [15]
	*($3 + [152]) = *($3 + [768])
	CALL $33($1, $1, ($3 + [152]))
	goto $label$1 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)4310687319046468096) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)4311410152324464640) ){ goto $label$8 }
	*($3 + [812]) = [0]
	*($3 + [808]) = [16]
	*($3 + [112]) = *($3 + [808])
	CALL $35($1, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$26
	*($3 + [684]) = [0]
	*($3 + [680]) = [17]
	*($3 + [240]) = *($3 + [680])
	CALL $37($1, $1, ($3 + [240]))
	goto $label$1 
	
.LABEL $label$25
	*($3 + [692]) = [0]
	*($3 + [688]) = [18]
	*($3 + [232]) = *($3 + [688])
	CALL $29($1, $1, ($3 + [232]))
	goto $label$1 
	
.LABEL $label$24
	*($3 + [852]) = [0]
	*($3 + [848]) = [19]
	*($3 + [72]) = *($3 + [848])
	CALL $40($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$23
	*($3 + [844]) = [0]
	*($3 + [840]) = [20]
	*($3 + [80]) = *($3 + [840])
	CALL $40($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$22
	*($3 + [908]) = [0]
	*($3 + [904]) = [21]
	*($3 + [16]) = *($3 + [904])
	CALL $11($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$21
	*($3 + [660]) = [0]
	*($3 + [656]) = [22]
	*($3 + [264]) = *($3 + [656])
	CALL $44($1, $1, ($3 + [264]))
	goto $label$1 
	
.LABEL $label$20
	*($3 + [740]) = [0]
	*($3 + [736]) = [23]
	*($3 + [184]) = *($3 + [736])
	CALL $46($1, $1, ($3 + [184]))
	goto $label$1 
	
.LABEL $label$19
	*($3 + [804]) = [0]
	*($3 + [800]) = [24]
	*($3 + [120]) = *($3 + [800])
	CALL $13($1, $1, ($3 + [120]))
	goto $label$1 
	
.LABEL $label$18
	*($3 + [764]) = [0]
	*($3 + [760]) = [25]
	*($3 + [160]) = *($3 + [760])
	CALL $49($1, $1, ($3 + [160]))
	goto $label$1 
	
.LABEL $label$17
	*($3 + [876]) = [0]
	*($3 + [872]) = [26]
	*($3 + [48]) = *($3 + [872])
	CALL $23($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$16
	*($3 + [780]) = [0]
	*($3 + [776]) = [27]
	*($3 + [144]) = *($3 + [776])
	CALL $26($1, $1, ($3 + [144]))
	goto $label$1 
	
.LABEL $label$15
	*($3 + [884]) = [0]
	*($3 + [880]) = [28]
	*($3 + [40]) = *($3 + [880])
	CALL $9($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$14
	*($3 + [916]) = [0]
	*($3 + [912]) = [29]
	*($3 + [8]) = *($3 + [912])
	CALL $54($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$13
	*($3 + [668]) = [0]
	*($3 + [664]) = [30]
	*($3 + [256]) = *($3 + [664])
	CALL $56($1, $1, ($3 + [256]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [756]) = [0]
	*($3 + [752]) = [31]
	*($3 + [168]) = *($3 + [752])
	CALL $13($1, $1, ($3 + [168]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [892]) = [0]
	*($3 + [888]) = [32]
	*($3 + [32]) = *($3 + [888])
	CALL $4($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [796]) = [0]
	*($3 + [792]) = [33]
	*($3 + [128]) = *($3 + [792])
	CALL $4($1, $1, ($3 + [128]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [828]) = [0]
	*($3 + [824]) = [34]
	*($3 + [96]) = *($3 + [824])
	CALL $61($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$8
	CALL eosio_assert([0], [8223])
	goto $label$1 
	
.LABEL $label$7
	$5 = [1]
	if ( (*($4 + [52]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4 + [40]) & $5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [60])))
	if ( ((*($4 + [40]) & $5) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($4 + [48])))
	if ( ((*($4 + [28]) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((*($4 + [28]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($4 + [36])))
	
.LABEL $label$1
	CALL $279([0])
	$global$0 = ($3 + [944])
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL $272(($3 + [64]), $0)
	$0 = *($3 + [64])
	$4 = ($0 & [1])
	CALL sha256(( *($3 + [72]) ? (($3 + [64]) | [1]) : $4 ), ( *($3 + [68]) ? uint_32($0 >> [1]) : $4 ), ($3 + [32]))
	*(($0 = ($3 + [24]))) = *((($3 + [32]) + [24]))
	*(($4 = ($3 + [16]))) = *((($3 + [32]) + [16]))
	*($3 + [8]) = *($3 + [40])
	*($3) = *($3 + [32])
	*((($3 + [80]) + [24])) = *($0)
	*((($3 + [80]) + [16])) = *($4)
	*($3 + [88]) = *($3 + [8])
	*($3 + [80]) = *($3)
	$0 = [0]
	$5 = ($1 + [4])
	$6 = ($1 + [8])
	
.LOOP $label$2:
	$4 = *($5)
	if ( ((int_32)($4 - *($1)) == (int_32)$2) ){ goto $label$1 }
	$7 = *((($3 + [80]) + $0))
	if ( ((uint_32)$7 > (uint_32)[207]) ){ goto $label$4 }
	$7 = ((uint_32)$7 % (uint_32)[52])
	*($3 + [127]) = $7
	if ( ((uint_32)*($6) <= (uint_32)$4) ){ goto $label$3 }
	*($4) = $7
	*($5) = (*($5) + [1])
	
.LABEL $label$4
	$0 = ($0 + [1])
	if ( ($0 <= [32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $96($1, ($3 + [127]))
	$0 = ($0 + [1])
	if ( ($0 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$5
	$global$0 = ($3 + [128])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = [0]
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = (*(($1 + [16])) - *($1 + [12]))
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL _Znwj($5)
	*(($2 + [40])) = ($6 + $5)
	*($2 + [32]) = $6
	*($2 + [36]) = $6
	$7 = *(($1 + [12]))
	$5 = (*(($1 + [16])) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $7, $5)
	*($2 + [36]) = ($6 + $5)
	
.LABEL $label$3
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$5 = (*(($1 + [28])) - *($1 + [24]))
	$6 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($2 + [24])) = ($5 + ((int_32)$6 * (int_32)[12]))
	*($2 + [16]) = $5
	*($2 + [20]) = $5
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = CALL $260($5, $6)
	$5 = ($5 + [12])
	$6 = ($6 + [12])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$5 }
	*($2 + [20]) = ($8 + [12])
	
.LABEL $label$4
	$5 = CALL $260($2, ($1 + [36]))
	CALL $211($0, $4, $3, ($2 + [32]), ($2 + [16]), $5, *($1 + [48]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$6
	$7 = *($2 + [16])
	if ( ($7 == 0) ){ goto $label$7 }
	$6 = *($2 + [20])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$11
	$6 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$10 }
	$5 = *($2 + [16])
	goto $label$8 
	
.LABEL $label$9
	$5 = $7
	
.LABEL $label$8
	*($2 + [20]) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$5 = *($2 + [32])
	if ( ($5 == 0) ){ goto $label$12 }
	*($2 + [36]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$12
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $276(($2 + [32]))
	
.LABEL $label$1
	CALL $276(($2 + [16]))
	(unreachable)
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [12690])
	CALL memcpy(($4 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $153(*($1), ($4 + [12]))
	CALL $143(*($1), ($4 + [24]))
	CALL $91(*($1), ($4 + [36]))
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [12690])
	CALL memcpy(($2 + [15]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*($4 + [48]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12)
{
	CALL require_auth(*($0))
	CALL require_recipient($2)
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [448])
	$global$0 = $3
	*(($4 = $3) + [440]) = *($2)
	$5 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$5 = CALL $295($2)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	CALL read_action_data($5, $2)
	
.LABEL $label$1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*(($4 + [336])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [360])) = (int_64)0
	*(($4 + [384])) = (int_64)0
	*(($4 + [400])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [368]) = [0]
	*($4 + [376]) = (int_64)0
	*($4 + [392]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*(($4 + [432])) = (int_64)0
	*($4 + [276]) = $5
	*($4 + [272]) = $5
	*($4 + [280]) = ($5 + $2)
	*($4 + [24]) = ($4 + [272])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [288]), *($4 + [276]), [8])
	$3 = (*($4 + [276]) + [8])
	*($4 + [276]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [280]) - $3) > (uint_32)[7]), [12690])
	CALL memcpy((($4 + [288]) + [8]), *($4 + [276]), [8])
	*($4 + [276]) = (*($4 + [276]) + [8])
	CALL $143(($4 + [272]), ($4 + [304]))
	CALL $143(($4 + [272]), ($4 + [316]))
	*($4 + [48]) = ($4 + [288])
	CALL $144(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [280])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [272])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $5(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [440])
	CALL $145(($4 + [24]), ($4 + [288]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$18 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $298($5)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	if ( (*($3 + [40]) & $2) ){ goto $label$14 }
	
.LABEL $label$15
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [36])))
	if ( ((*($4 + [340]) & $2) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($4 + [340]) & $2) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($4 + [328]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [348])))
	if ( ((*($4 + [328]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [336])))
	$3 = *($4 + [316])
	if ( ($3 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$3 = *($4 + [316])
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$7
	$3 = *($4 + [304])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = ($4 + [320])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$21
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$20 }
	$2 = *(($4 + [316]))
	*($7) = $3
	CALL _ZdlPv($2)
	$3 = *($4 + [304])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$19
	*($7) = $3
	CALL _ZdlPv($3)
	$3 = *($4 + [304])
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = ($4 + [308])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$23 }
	
.LOOP $label$24:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$25
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$24 }
	$2 = *(($4 + [304]))
	goto $label$22 
	
.LABEL $label$23
	$2 = $3
	
.LABEL $label$22
	*($7) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [448])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$5 = ($global$0 - [112])
	$global$0 = $5
	*($5 + [104]) = $3
	CALL require_auth($1)
	*(($5 + [96])) = [0]
	*($5 + [72]) = $1
	*($5 + [80]) = (int_64)-1
	$6 = *($0)
	*($5 + [64]) = $6
	*($5 + [88]) = (int_64)0
	$7 = [0]
	$8 = CALL db_lowerbound_i64($6, $1, (int_64)4312312276611760128, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $77(($5 + [64]), $8)
	$3 = *($5 + [104])
	
.LABEL $label$1
	$9 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($9, [8671])
	CALL eosio_assert(((int_64)*($7) == (int_64)$2), [8686])
	CALL eosio_assert(((int_32)*($7 + [132]) ^ (int_32)[1]), [8703])
	$8 = ($7 + [112])
	CALL eosio_assert(((uint_64)$3 <= (uint_64)(CASTING uint_64)(uint_32 ((int_32)(*($8) - *($7 + [108])) / (int_32)[40]))), [8730])
	$10 = ($7 + [108])
	$12 = ((CASTING uint_32)(uint_64 $3) + [-1])
	$11 = *($7 + [108])
	if ( ((uint_32)((int_32)(*($8) - $11) / (int_32)[40]) <= (uint_32)$12) ){ goto $label$4 }
	*((($5 + [24]) + [12])) = (int_64)0
	*($5 + [32]) = [0]
	$8 = ($11 + ((int_32)$12 * (int_32)[40]))
	*($5 + [24]) = *($8)
	$13 = ($8 + [12])
	$14 = (*($13) - *($8 + [8]))
	if ( ($14 == 0) ){ goto $label$5 }
	if ( ((int_32)$14 <= (int_32)[-1]) ){ goto $label$3 }
	$15 = CALL _Znwj($14)
	*(($5 + [32])) = $15
	*(($5 + [40])) = ($15 + $14)
	*(($14 = ($5 + [36]))) = $15
	$13 = *(($8 + [8]))
	$8 = (*($13) - $13)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($15, $13, $8)
	*($14) = (*($14) + $8)
	
.LABEL $label$5
	$8 = ($11 + ((int_32)$12 * (int_32)[40]))
	*((($5 + [24]) + [36])) = *(($8 + [36]))
	*((($5 + [24]) + [28])) = *(($8 + [28]))
	*($5 + [44 align=4]) = *($8 + [20 align=4])
	CALL eosio_assert(((int_32)*($5 + [49]) ^ (int_32)[1]), [8764])
	$8 = [1]
	$3 = *($5 + [104])
	if ( ((int_64)$3 == (int_64)1) ){ goto $label$6 }
	$11 = ((CASTING uint_32)(uint_64 $3) + [-2])
	$8 = *(($7 + [108]))
	if ( ((uint_32)((int_32)(*(($7 + [112])) - $8) / (int_32)[40]) <= (uint_32)$11) ){ goto $label$4 }
	$8 = *(($8 + ((int_32)$11 * (int_32)[40])) + [25])
	
.LABEL $label$6
	CALL eosio_assert($8, [8783])
	CALL eosio_assert(((int_32)*($5 + [47]) ^ (int_32)[1]), [8818])
	$12 = ($5 + [32])
	$8 = ($5 + [36])
	CALL eosio_assert(((uint_32)(*($8) - *($12)) > (uint_32)[1]), [8844])
	CALL eosio_assert(((int_32)*(($5 + [44])) ^ (int_32)[1]), [8878])
	CALL eosio_assert(((int_32)*($5 + [45]) ^ (int_32)[1]), [8924])
	CALL eosio_assert(((int_64)(CASTING uint_64)(uint_32 ((*($8) + [1]) - *($12))) == (int_64)$4), [8954])
	$11 = [0]
	*($5 + [16]) = [0]
	*($5 + [8]) = (int_64)0
	$8 = (*($8) - *($12))
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$12 = CALL _Znwj($8)
	*((($5 + [8]) + [8])) = ($12 + $8)
	*($5 + [8]) = $12
	*($5 + [12]) = $12
	$14 = *((($5 + [24]) + [8]))
	$8 = (*(($5 + [36])) - $14)
	if ( ((int_32)$8 <= (int_32)[0]) ){ goto $label$7 }
	CALL memcpy($12, $14, $8)
	$12 = (*($5 + [12]) + $8)
	*($5 + [12]) = $12
	$11 = [0]
	$8 = *($5 + [8])
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$7 }
	$14 = ($12 - $8)
	$11 = [0]
	$12 = [0]
	
.LOOP $label$8:
	$15 = ($15 + [1])
	$13 = ($15 <= [10])
	$15 = ((uint_32)*($8) % (uint_32)[13])
	$12 = ($12 | (($15 == 0) & $13))
	$11 = (( $15 ? [10] : $13 ) + $11)
	$8 = ($8 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$8 }
	if ( ((uint_32)$11 >= (uint_32)[12]) ){ goto $label$7 }
	$11 = ( ($11 + [10]) ? $11 : ($12 & [1]) )
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$11 != (int_32)[21]), [8975])
	$8 = *($5 + [8])
	if ( ($8 == 0) ){ goto $label$9 }
	*($5 + [12]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$3 = *($0)
	*($5) = ($5 + [104])
	CALL eosio_assert($9, [13817])
	CALL $78(($5 + [64]), $7, $3, $5)
	$8 = *($5 + [32])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($5 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$12 = *($5 + [88])
	if ( ($12 == 0) ){ goto $label$11 }
	$14 = ($5 + [92])
	$8 = *($14)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$13 }
	$8 = ($8 + [-24])
	
.LOOP $label$14:
	$11 = CALL $79($8)
	$8 = ($8 + [-24])
	if ( ((int_32)$11 != (int_32)$12) ){ goto $label$14 }
	$8 = *(($5 + [88]))
	goto $label$12 
	
.LABEL $label$13
	$8 = $12
	
.LABEL $label$12
	*($14) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$global$0 = ($5 + [112])
	return (unreachable)
	
.LABEL $label$4
	CALL $277($10)
	
.LABEL $label$3
	CALL $276((($5 + [24]) + [8]))
	
.LABEL $label$2
	CALL $276(($5 + [8]))
	(unreachable)
	(unreachable)
}

int_32 .FUNC $17 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$3 = CALL $295($7)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $7)
	
.LABEL $label$1
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [268]) = $3
	*($4 + [264]) = $3
	*($4 + [272]) = ($3 + $7)
	*($4 + [312]) = ($4 + [264])
	*($4 + [40]) = ($4 + [280])
	CALL $76(($4 + [40]), ($4 + [312]))
	$2 = *($4 + [272])
	*((($4 + [24]) + [8])) = $2
	*((($4 + [8]) + [8])) = $2
	$8 = *($4 + [264])
	*($4 + [8]) = $8
	*($4 + [24]) = $8
	$2 = CALL $5(($4 + [40]), $0, $1, ($4 + [8]))
	$9 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [304])
	$1 = *($4 + [296])
	$8 = *($4 + [288])
	$10 = *($4 + [280])
	if ( ($5 & [1]) ){ goto $label$13 }
	CALL void $9((int_32 $10), (int_64 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL void $9((int_32 $10), (int_64 $8), (int_64 $1), (int_64 $0), (int_64 *((*($9) + $6))))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $298($3)
	$3 = [1]
	if ( ((*($2 + [52]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3 = [1]
	if ( (*($2 + [52]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($2 + [40]) & $3) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($2 + [60])))
	if ( ((*($2 + [40]) & $3) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($2 + [48])))
	$3 = [1]
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$3 = [1]
	if ( (*($2 + [28]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [320])
	return $3
	
.LABEL $label$5
	CALL _ZdlPv(*(($2 + [36])))
	$global$0 = ($4 + [320])
	return $3
}

void .FUNC $10 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-6077946346717839360, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $65($2, $4)
	CALL eosio_assert(((int_32)*($0 + [8]) == (int_32)$2), [13766])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [8454])
	CALL eosio_assert($4, [14084])
	CALL eosio_assert($4, [14118])
	$4 = CALL db_next_i64(*($0 + [12]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $65($2, $4)
	
.LABEL $label$2
	CALL $67($2, $0)
	CALL require_recipient($1)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [264]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [264]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$3 = CALL $5(($4 + [40]), $0, $1, ($4 + [8]))
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [264])
	if ( ($5 & [1]) ){ goto $label$13 }
	CALL void $8((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL void $8((int_32 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [40]) & $2) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [272])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [36])))
	$global$0 = ($4 + [272])
	return $2
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL require_auth(*($0))
	*((($4 + [104]) + [32])) = [0]
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	$5 = *($0)
	*($4 + [104]) = $5
	*($4 + [112]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)-3590843033098125312, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $151(($4 + [104]), $7)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)($4 + [104])), [13766])
	
.LABEL $label$1
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [8671])
	CALL eosio_assert(((int_64)*($6) == (int_64)$1), [8686])
	$5 = *($6 + [24])
	$1 = *(($6 + [32]))
	CALL eosio_assert(((int_64)*(($6 + [48])) == (int_64)$1), [12853])
	$5 = ((int_64)$5 + (int_64)*($6 + [40]))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [12915])
	if ( (*($6 + [124]) == 0) ){ goto $label$2 }
	CALL eosio_assert(((int_64)*(($6 + [32])) == (int_64)$1), [12853])
	$5 = ((int_64)*(($6 + [24])) + (int_64)$5)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [12915])
	
.LABEL $label$2
	*(($4 + [80])) = $1
	*($4 + [64]) = $2
	*($4 + [72]) = $5
	*($4 + [56]) = *($0)
	$8 = CALL $260(($4 + [88]), $3)
	*($4 + [8]) = (int_64)3617214756542218240
	*($4) = *($0)
	$0 = CALL $100(($4 + [16]), $4, *($6 + [56]), (int_64)-3617168760277827584, ($4 + [56]))
	CALL $101(($4 + [144]), $0)
	$3 = *($4 + [144])
	CALL send_inline($3, (*($4 + [148]) - $3))
	$3 = *($4 + [144])
	if ( ($3 == 0) ){ goto $label$3 }
	*($4 + [148]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$3 = *($0 + [28])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($0 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($0 + [16])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($0 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	CALL eosio_assert($7, [14084])
	CALL eosio_assert($7, [14118])
	$0 = CALL db_next_i64(*($6 + [132]), ($4 + [16]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$6 }
	CALL $151(($4 + [104]), $0)
	
.LABEL $label$6
	CALL $156(($4 + [104]), $6)
	if ( ((*($8) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [96])))
	
.LABEL $label$7
	$3 = *($4 + [128])
	if ( ($3 == 0) ){ goto $label$8 }
	$8 = ($4 + [132])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	$7 = *($6 + [112])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($6 + [116])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($6 + [72])))
	
.LABEL $label$14
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$11 }
	$6 = *(($4 + [128]))
	goto $label$9 
	
.LABEL $label$10
	$6 = $3
	
.LABEL $label$9
	*($8) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$8
	$global$0 = ($4 + [160])
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [320])
	$global$0 = $3
	*(($4 = $3) + [312]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [304])) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [272]) = ($2 + $5)
	*($4 + [264]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [280]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [12690])
	CALL memcpy((($4 + [280]) + [8]), ($2 + [8]), [8])
	*($4 + [268]) = ($2 + [16])
	CALL $91(($4 + [264]), (($4 + [280]) + [16]))
	$3 = *($4 + [272])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [264])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $5(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [312])
	CALL $103(($4 + [16]), ($4 + [280]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$12 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($3 + [40]) & $2) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [36])))
	if ( (*($4 + [296]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [296]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [304])))
	
.LABEL $label$4
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $185 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$3 = *($3)
	$6 = *($1)
	$7 = ($1 + [44])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)*(($1 + [48]))) ){ goto $label$2 }
	*($8) = *($3)
	*(($8 + [8])) = *(($3 + [8]))
	*($7) = (*($7) + [16])
	$8 = ($1 + [40])
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [40])
	CALL $244($8, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [13949])
	$9 = *($8)
	$7 = *(($1 + [44]))
	$10 = ($7 - $9)
	$11 = (CASTING uint_64)(uint_32 int_32($10 >> [4]))
	$3 = [40]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$4 }
	$3 = (($10 & [-16]) + $3)
	
.LABEL $label$4
	$7 = ($3 + [1])
	if ( ($7 <= [513]) ){ goto $label$6 }
	$3 = CALL $295($7)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$5
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $7)
	*($5 + [24]) = ($5 + [8])
	*($5 + [52]) = $8
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [24])
	*($5 + [48]) = ($1 + [32])
	*($5 + [56]) = ($1 + [52])
	CALL $236(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [60]), $2, $3, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $298($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [64])
}

void .FUNC $281 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$7 = ($global$0 - [208])
	$global$0 = $7
	*($7 + [160]) = $1
	CALL require_auth(*($0))
	*(($7 + [152])) = [0]
	*($7 + [136]) = (int_64)-1
	$1 = *($0)
	*($7 + [120]) = $1
	*($7 + [128]) = $1
	*($7 + [144]) = (int_64)0
	$8 = [0]
	$9 = CALL db_lowerbound_i64($1, $1, (int_64)-3612798081281556480, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $112(($7 + [120]), $9)
	
.LABEL $label$1
	$10 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($10, [8671])
	CALL eosio_assert(((int_64)*($7 + [160]) == (int_64)*($8)), [8686])
	CALL eosio_assert(((int_32)*($8 + [52]) == (int_32)[3]), [11285])
	CALL eosio_assert(((int_32)CALL $fimport$16() == (int_32)$2), [11307])
	*($7 + [112]) = [0]
	*($7 + [104]) = (int_64)0
	CALL $126($2, ($7 + [104]), [3])
	CALL eosio_assert(((int_32)(*($3 + [4]) - *($3)) == (int_32)(*($7 + [108]) - *($7 + [104]))), [11329])
	$9 = *($3)
	if ( ((int_32)*($3 + [4]) == (int_32)$9) ){ goto $label$5 }
	$2 = [0]
	$11 = ($3 + [4])
	
.LOOP $label$6:
	$12 = *($7 + [104])
	if ( ((uint_32)(*($7 + [108]) - $12) <= (uint_32)$2) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($9 + $2)) == (int_32)*(($12 + $2))), [11220])
	$9 = *($3)
	$2 = ($2 + [1])
	if ( ($2 <= (*($11) - $9)) ){ goto $label$6 }
	
.LABEL $label$5
	*((($7 + [64]) + [32])) = [0]
	*($7 + [80]) = (int_64)-1
	*($7 + [88]) = (int_64)0
	$1 = *($0)
	*($7 + [64]) = $1
	*($7 + [72]) = $1
	$2 = CALL db_find_i64($1, $1, (int_64)-3612602256646602752, *($7 + [160]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*(CALL $122(($7 + [64]), $2) + [24]) == (int_32)($7 + [64])), [13766])
	$2 = [0]
	goto $label$7 
	
.LABEL $label$8
	$2 = [1]
	
.LABEL $label$7
	CALL eosio_assert($2, [11349])
	*((($7 + [24]) + [32])) = [0]
	*($7 + [40]) = (int_64)-1
	$1 = *($0)
	*($7 + [24]) = $1
	$13 = *($7 + [160])
	*($7 + [32]) = $13
	*($7 + [48]) = (int_64)0
	$2 = CALL db_lowerbound_i64($1, $13, (int_64)-3612780472452513792, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL $118(($7 + [24]), $2)
	CALL $127(($7 + [16]), $3, CALL $252([3]))
	$1 = *($0)
	*($7 + [4]) = $3
	*($7) = ($7 + [160])
	*($7 + [8]) = ($7 + [16])
	*($7 + [200]) = $1
	CALL eosio_assert(((int_64)*($7 + [64]) == (int_64)CALL $fimport$6()), [14008])
	*($7 + [180]) = $7
	*($7 + [176]) = ($7 + [64])
	*($7 + [184]) = ($7 + [200])
	*(($2 = CALL _Znwj([40])) + [16]) = [0]
	*($2 + [8 align=4]) = (int_64)0
	*($2 + [24]) = ($7 + [64])
	CALL $128(($7 + [176]), $2)
	*($7 + [192]) = $2
	$1 = *($2)
	*($7 + [176]) = $1
	$12 = *($2 + [28])
	*($7 + [172]) = $12
	$3 = ($7 + [92])
	$9 = *($3)
	if ( ((uint_32)$9 >= (uint_32)*(($7 + [96]))) ){ goto $label$9 }
	*($9 + [8]) = $1
	*($9 + [16]) = $12
	*($7 + [192]) = [0]
	*($9) = $2
	*($3) = ($9 + [24])
	$2 = *($7 + [192])
	*($7 + [192]) = [0]
	if ( ($2 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$9
	CALL $129(($7 + [88]), ($7 + [192]), ($7 + [176]), ($7 + [172]))
	$2 = *($7 + [192])
	*($7 + [192]) = [0]
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $277(($7 + [104]))
	
.LABEL $label$3
	$9 = *($2 + [8])
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [12])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$1 = *($0)
	CALL eosio_assert($10, [13817])
	CALL $130(($7 + [120]), $8, $1)
	$3 = *($7 + [48])
	if ( ($3 == 0) ){ goto $label$11 }
	$11 = ($7 + [52])
	$9 = *($11)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$2 = *($9)
	*($9) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	$12 = *($2 + [112])
	if ( ($12 == 0) ){ goto $label$16 }
	*(($2 + [116])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$16
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($2 + [72])))
	
.LABEL $label$17
	CALL _ZdlPv($2)
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$14 }
	$2 = *(($7 + [48]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $3
	
.LABEL $label$12
	*($11) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$3 = *($7 + [88])
	if ( ($3 == 0) ){ goto $label$18 }
	$11 = ($7 + [92])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($2 + [-24])
	$9 = *($2)
	*($2) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	$12 = *($9 + [8])
	if ( ($12 == 0) ){ goto $label$23 }
	*(($9 + [12])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$23
	CALL _ZdlPv($9)
	
.LABEL $label$22
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$21 }
	$2 = *(($7 + [88]))
	goto $label$19 
	
.LABEL $label$20
	$2 = $3
	
.LABEL $label$19
	*($11) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$18
	$2 = *($7 + [104])
	if ( ($2 == 0) ){ goto $label$24 }
	*($7 + [108]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$24
	$3 = *($7 + [144])
	if ( ($3 == 0) ){ goto $label$25 }
	$11 = ($7 + [148])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$27 }
	
.LOOP $label$28:
	$2 = ($2 + [-24])
	$9 = *($2)
	*($2) = [0]
	if ( ($9 == 0) ){ goto $label$29 }
	$12 = *($9 + [40])
	if ( ($12 == 0) ){ goto $label$30 }
	*(($9 + [44])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$30
	CALL _ZdlPv($9)
	
.LABEL $label$29
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$28 }
	$2 = *(($7 + [144]))
	goto $label$26 
	
.LABEL $label$27
	$2 = $3
	
.LABEL $label$26
	*($11) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$25
	$global$0 = ($7 + [208])
	(unreachable)
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [352])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [304])) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*(($4 + [328])) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [336]) = [0]
	*($4 + [276]) = $2
	*($4 + [272]) = $2
	*($4 + [280]) = ($2 + $5)
	*($4 + [24]) = ($4 + [272])
	*($4 + [48]) = ($4 + [288])
	CALL $124(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [280])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [272])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $5(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [344])
	CALL $125(($4 + [24]), ($4 + [288]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$16 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( (*($3 + [40]) & $2) ){ goto $label$12 }
	
.LABEL $label$13
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [36])))
	if ( ((*($4 + [324]) & $2) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($4 + [324]) & $2) ){ goto $label$8 }
	
.LABEL $label$9
	$5 = *($4 + [312])
	if ( $5 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [332])))
	$5 = *($4 + [312])
	if ( ($5 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$7 = ($4 + [316])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$18 }
	
.LOOP $label$19:
	$2 = ($3 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$20
	$3 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$19 }
	$2 = *(($4 + [312]))
	goto $label$17 
	
.LABEL $label$18
	$2 = $5
	
.LABEL $label$17
	*($7) = $5
	CALL _ZdlPv($2)
	$2 = *(($4 + [300]))
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = *(($4 + [300]))
	if ( ($2 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [304])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $184 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = *($1)
	$7 = $6
	$9 = ($1 + [44])
	$10 = *($9)
	$8 = *($1 + [40])
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$1 }
	$7 = *(*($3) + [8])
	
.LOOP $label$3:
	if ( ((int_64)*(($8 + [8])) == (int_64)$7) ){ goto $label$2 }
	$8 = ($8 + [16])
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$3 }
	$7 = $6
	goto $label$1 
	
.LABEL $label$2
	$10 = *($3 + [4])
	*($8) = *($10)
	*(($8 + [8])) = *(($10 + [8]))
	$7 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [13949])
	$8 = [40]
	$3 = ($1 + [40])
	$9 = *($1 + [40])
	$10 = *($9)
	$11 = ($10 - $9)
	$7 = (CASTING uint_64)(uint_32 int_32($11 >> [4]))
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$5 }
	$8 = (($11 & [-16]) + $8)
	
.LABEL $label$5
	$10 = ($8 + [1])
	if ( ($10 <= [513]) ){ goto $label$7 }
	$8 = CALL $295($10)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$6
	*($5 + [12]) = $8
	*($5 + [8]) = $8
	*($5 + [16]) = ($8 + $10)
	*($5 + [24]) = ($5 + [8])
	*($5 + [52]) = $3
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [24])
	*($5 + [48]) = ($1 + [32])
	*($5 + [56]) = ($1 + [52])
	CALL $236(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [60]), $2, $8, $10)
	if ( ((uint_32)$10 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $298($8)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [64])
}

void .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*(*($4) + [4]))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	$5 = *($0)
	$6 = *(*($4 + [16]) + [8])
	$7 = *(*($4 + [12]))
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$11 = [1]
	$12 = $9
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$9 < (int_32)[6])
	$12 = ($9 + [1])
	$9 = $12
	if ( $11 ){ goto $label$5 }
	$11 = [1]
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [12744])
	*(($1 + [32])) = $6
	*($1 + [24]) = $7
	$6 = *(*(($4 + [16])) + [8])
	$7 = *(*($4 + [20]))
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$8 = $10
	$11 = [1]
	$12 = $9
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$8 = $10
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$9 < (int_32)[6])
	$12 = ($9 + [1])
	$9 = $12
	if ( $11 ){ goto $label$10 }
	$11 = [1]
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$11 = [0]
	
.LABEL $label$6
	CALL eosio_assert($11, [12744])
	*(($1 + [48])) = $6
	*($1 + [40]) = $7
	*($1 + [56]) = *(*(($4 + [16])) + [16])
	$12 = ($1 + [64])
	CALL $262($12, *($4 + [24]))
	$9 = *($4 + [28])
	*($1 + [80]) = *($9)
	$8 = *(($9 + [8]))
	$10 = *(($9 + [16]))
	$6 = *(($9 + [24]))
	*($1 + [124]) = [0]
	*(($1 + [104])) = $6
	*(($1 + [96])) = $10
	*(($1 + [88])) = $8
	$9 = *($1 + [64])
	$11 = ( *(($1 + [68])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($11 + [96])
	$8 = (CASTING uint_64)(uint_32 $11)
	$4 = ($1 + [124])
	$13 = ($1 + [80])
	
.LOOP $label$11:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	$14 = ($1 + [112])
	$15 = *($1 + [112])
	$11 = *(($1 + [116]))
	$16 = ($11 - $15)
	$8 = (CASTING uint_64)(uint_32 $16)
	
.LOOP $label$12:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	$11 = (( $9 ? ($16 + $9) : ((int_32)$15 == (int_32)$11) ) + [1])
	if ( ($11 <= [513]) ){ goto $label$14 }
	$9 = CALL $295($11)
	goto $label$13 
	
.LABEL $label$14
	$9 = ($2 - (($11 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$13
	*($3 + [4]) = $9
	*($3) = $9
	*($3 + [8]) = ($9 + $11)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = ($1 + [40])
	*($3 + [44]) = ($1 + [56])
	*($3 + [48]) = $12
	*($3 + [52]) = $13
	*($3 + [56]) = $14
	*($3 + [60]) = $4
	CALL $239(($3 + [24]), ($3 + [16]))
	$8 = *($1 + [8])
	*($1 + [132]) = CALL db_store_i64(*($5 + [8]), (int_64)-3612780472452513792, *(*($0 + [8])), $8, $9, $11)
	if ( ($11 <= [513]) ){ goto $label$17 }
	CALL $298($9)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$15 }
	
.LABEL $label$16
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$15
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
}

void .FUNC $218 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $186 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	*($1 + [124]) = [1]
	$5 = *($1 + [8])
	CALL eosio_assert([1], [13949])
	$6 = *($1 + [64])
	$7 = ( *(($1 + [68])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [96])
	$8 = (CASTING uint_64)(uint_32 $7)
	$9 = ($1 + [64])
	$10 = ($1 + [124])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$11 = ($1 + [112])
	$12 = *($1 + [112])
	$7 = *(($1 + [116]))
	$13 = ($7 - $12)
	$8 = (CASTING uint_64)(uint_32 $13)
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$7 = (( $6 ? ($13 + $6) : ((int_32)$12 == (int_32)$7) ) + [1])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$6 = CALL $295($7)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($4 + [4]) = $6
	*($4) = $6
	*($4 + [8]) = ($6 + $7)
	*($4 + [16]) = $4
	*($4 + [48]) = $9
	*($4 + [56]) = $11
	*($4 + [60]) = $10
	*($4 + [24]) = $1
	*($4 + [28]) = ($1 + [8])
	*($4 + [32]) = ($1 + [16])
	*($4 + [36]) = ($1 + [24])
	*($4 + [40]) = ($1 + [40])
	*($4 + [44]) = ($1 + [56])
	*($4 + [52]) = ($1 + [80])
	CALL $239(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [132]), $2, $6, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $298($6)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [64])
}

void .FUNC $180 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$2 = *($4)
	*($4) = [0]
	*($1) = $2
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	$1 = ($3 + [-24])
	
.LOOP $label$9:
	$7 = CALL $79($1)
	$1 = ($1 + [-24])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $91(*($1), ($3 + [16]))
	CALL $91(*($1), ($3 + [28]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [12690])
	CALL memcpy(($3 + [48]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	CALL $153(*($1), ($3 + [80]))
	CALL $143(*($1), ($3 + [92]))
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $260(($2 + [112]), ($1 + [16]))
	$6 = CALL $260(($2 + [96]), ($1 + [28]))
	*(($2 + [88])) = *(($1 + [72]))
	*((($2 + [64]) + [16])) = *(($1 + [64]))
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = [0]
	*($2 + [72]) = *(($1 + [56]))
	*($2 + [64]) = *($1 + [48])
	$7 = (*(($1 + [84])) - *($1 + [80]))
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$3 }
	$8 = CALL _Znwj($7)
	*(($2 + [56])) = ($8 + $7)
	*($2 + [48]) = $8
	*($2 + [52]) = $8
	$9 = *(($1 + [80]))
	$7 = (*(($1 + [84])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($8, $9, $7)
	*($2 + [52]) = (*($2 + [52]) + $7)
	
.LABEL $label$4
	*($2 + [40]) = [0]
	*($2 + [32]) = (int_64)0
	$7 = (*(($1 + [96])) - *($1 + [92]))
	$9 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$5 }
	if ( ((uint_32)$9 >= (uint_32)[357913942]) ){ goto $label$2 }
	$8 = CALL _Znwj($7)
	*(($2 + [40])) = ($8 + ((int_32)$9 * (int_32)[12]))
	*($2 + [32]) = $8
	*($2 + [36]) = $8
	$1 = *(($1 + [96]))
	$7 = *(($1 + [92]))
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $260($8, $7)
	$8 = (*($2 + [36]) + [12])
	*($2 + [36]) = $8
	$7 = ($7 + [12])
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$5
	*(($2 + [24])) = *((($2 + [64]) + [24]))
	*(($2 + [16])) = *((($2 + [64]) + [16]))
	*($2 + [8]) = *($2 + [72])
	*($2) = *($2 + [64])
	CALL $210($0, $4, $3, $5, $6, $2, ($2 + [48]), ($2 + [32]))
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$7 }
	$8 = *($2 + [36])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = ($8 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$11
	$8 = $7
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$10 }
	$7 = *($2 + [32])
	goto $label$8 
	
.LABEL $label$9
	$7 = $1
	
.LABEL $label$8
	*($2 + [36]) = $1
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($2 + [48])
	if ( ($7 == 0) ){ goto $label$12 }
	*($2 + [52]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( (*($6) & [1]) ){ goto $label$14 }
	if ( (*($5) & [1]) ){ goto $label$13 }
	goto $label$1 
	
.LABEL $label$14
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$13
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [128])
	return (unreachable)
	
.LABEL $label$3
	CALL $276(($2 + [48]))
	
.LABEL $label$2
	CALL $276(($2 + [32]))
	
.LABEL $label$1
	$global$0 = ($2 + [128])
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	*($1 + [8]) = CALL current_time()
	*($1 + [16]) = *(*($4 + [4]))
	*($1 + [24]) = *(*($4 + [8]))
	*($1 + [52]) = [1]
	*($1 + [32]) = *(*($4 + [12]))
	$4 = [40]
	$6 = ($1 + [40])
	$7 = ($1 + [52])
	$8 = ($1 + [32])
	$9 = ($1 + [24])
	$10 = ($1 + [16])
	$11 = ($1 + [8])
	$13 = *($1 + [40])
	$12 = *(($1 + [44]))
	$14 = ($12 - $13)
	$15 = (CASTING uint_64)(uint_32 int_32($14 >> [4]))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$2 }
	$4 = (($14 & [-16]) + $4)
	
.LABEL $label$2
	$12 = ($4 + [1])
	if ( ($12 <= [513]) ){ goto $label$4 }
	$4 = CALL $295($12)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($2 - (($12 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $12)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $11
	*($3 + [32]) = $1
	*($3 + [40]) = $10
	*($3 + [44]) = $9
	*($3 + [48]) = $8
	*($3 + [52]) = $6
	*($3 + [56]) = $7
	CALL $236(($3 + [32]), ($3 + [24]))
	$15 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)-3612798081281556480, *(*($0 + [8])), $15, $4, $12)
	if ( ((uint_32)$12 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$15 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $298($4)
	if ( (uint_64)($15 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [64])
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [40])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [44])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [48]) = [0]
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [56]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [52])
	CALL $235(($3 + [32]), ($3 + [24]))
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $115(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [44])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [14148])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [14193])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [14243])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$8 = *($5 + [40])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($5 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_64 .FUNC $111 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [13766])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3612860735888687104, (int_64)-3612860735888687104)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $105($0, $2)
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [13766])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [14059])
	return *($1)
}

int_32 .FUNC $237 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [12992])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [12992])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [8]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [12992])
	CALL memcpy(*($6), $2, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([144])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [112 align=4]) = (int_64)0
	*($5 + [120]) = [0]
	*($5 + [128]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [112])
	*($3 + [76]) = ($5 + [124])
	CALL $238(($3 + [40]), ($3 + [32]))
	*($5 + [132]) = $1
	*($3 + [32]) = $5
	$6 = *($5 + [8])
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $188(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [112])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [116])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = *($1 + [8])
	$7 = $6
	$3 = *($3)
	$8 = ($1 + [112])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	CALL $133($8, *($3), *($3 + [4]))
	$7 = *(($1 + [8]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [13949])
	$3 = *($1 + [64])
	$9 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($9 + [96])
	$7 = (CASTING uint_64)(uint_32 $9)
	$10 = ($1 + [64])
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	$11 = *($1 + [112])
	$9 = *(($1 + [116]))
	$12 = ($9 - $11)
	$7 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$9 = (( $3 ? ($12 + $3) : ((int_32)$11 == (int_32)$9) ) + [1])
	if ( ($9 <= [513]) ){ goto $label$5 }
	$3 = CALL $295($9)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$4
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $9)
	*($5 + [16]) = $5
	*($5 + [48]) = $10
	*($5 + [56]) = $8
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [16])
	*($5 + [36]) = ($1 + [24])
	*($5 + [40]) = ($1 + [40])
	*($5 + [44]) = ($1 + [56])
	*($5 + [52]) = ($1 + [80])
	*($5 + [60]) = ($1 + [124])
	CALL $239(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [132]), $2, $3, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $298($3)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [64])
}

void .FUNC $298 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [22788])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [22596]
	$3 = (((int_32)$1 * (int_32)[12]) + [22596])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $295 (int_32 $0)
{
	return CALL $296([14404], $0)
}

int_32 .FUNC $294 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $295($1)
	
.LABEL $label$2
	*(CALL $278()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $295(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $298($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $297 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [14396]) == 0) ){ goto $label$2 }
	$2 = *([0] + [14400])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [14396]) = [1]
	$2 = ($2 << [16])
	*([0] + [14400]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [14400])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [14400]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [14396]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [14396]) = [1]
	$3 = ($3 << [16])
	*([0] + [14400]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [14400])
	
.LABEL $label$10
	*([0] + [14400]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $296 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $297($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8250])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $291 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $290 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $287($3, (int_64)0)
	$4 = CALL $289($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $293 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $278())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $294($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $292 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $29 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [264]) = (int_64)0
	*($4 + [256]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [256]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [12690])
	CALL memcpy((($4 + [256]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$3 = CALL $5(($4 + [32]), $0, $1, $4)
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [264])
	$1 = *($4 + [256])
	if ( ($5 & [1]) ){ goto $label$13 }
	CALL void $8((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL void $8((int_32 $1), (int_64 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [40]) & $2) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [272])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [36])))
	$global$0 = ($4 + [272])
	return $2
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	$3 = ($global$0 - [576])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	*((($3 + [520]) + [32])) = [0]
	*($3 + [528]) = $1
	*($3 + [536]) = (int_64)-1
	*($3 + [544]) = (int_64)0
	$5 = *($0)
	*($3 + [520]) = $5
	$6 = [0]
	$7 = CALL db_find_i64($5, $1, (int_64)-3612780472452513792, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $118(($3 + [520]), $7)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)($3 + [520])), [13766])
	
.LABEL $label$1
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [9417])
	*((($3 + [480]) + [32])) = [0]
	*($3 + [496]) = (int_64)-1
	*($3 + [504]) = (int_64)0
	$5 = *($0)
	*($3 + [480]) = $5
	*($3 + [488]) = $5
	$7 = CALL db_find_i64($5, $5, (int_64)-3612602256646602752, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $122(($3 + [480]), $7)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)($3 + [480])), [13766])
	
.LABEL $label$2
	$7 = [0]
	$9 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($9, [11446])
	$11 = ($4 + [8])
	$10 = ($6 + [112])
	CALL $141(($3 + [472]), $10, $11)
	if ( (*($6 + [124]) == 0) ){ goto $label$16 }
	if ( (*($4 + [20]) == 0) ){ goto $label$15 }
	$7 = *($3 + [476])
	if ( ((int_32)$7 == (int_32)[3]) ){ goto $label$14 }
	if ( ((int_32)$7 != (int_32)[1]) ){ goto $label$13 }
	$12 = *(($6 + [32]))
	$5 = *($6 + [24])
	CALL eosio_assert(((int_64)$5 < (int_64)1152921504606846976), [12804])
	CALL eosio_assert(((int_64)$5 > (int_64)-1152921504606846976), [12828])
	$13 = ((int_64)$5 << (int_64)2)
	$14 = *($6 + [24])
	if ( ((int_64)$14 >= (int_64)1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$16
	$12 = *(($6 + [32]))
	CALL eosio_assert([1], [12695])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	
.LOOP $label$18:
	$15 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$14 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$5 = $14
	$15 = [1]
	$16 = $7
	$7 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$5 = $14
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$16 = ((int_32)$7 < (int_32)[6])
	$17 = ($7 + [1])
	$7 = $17
	if ( $16 ){ goto $label$20 }
	$15 = [1]
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$18 }
	
.LABEL $label$17
	CALL eosio_assert($15, [12744])
	goto $label$10 
	
.LABEL $label$15
	$5 = *($6 + [24])
	CALL __multi3(($3 + [160]), $5, (int_64)$5 >> (int_64)63), (int_64)3, (int_64)0)
	$12 = *(($6 + [32]))
	$5 = *(($3 + [168]))
	$13 = *($3 + [160])
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [12828])
	$14 = *($6 + [24])
	if ( ((int_64)$14 >= (int_64)1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$14
	$12 = *(($6 + [32]))
	CALL eosio_assert([1], [12695])
	$5 = (uint_64)$12 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$14 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$5 = $14
	$16 = [1]
	$17 = $7
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$21 }
	goto $label$11 
	
.LABEL $label$22
	$5 = $14
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$16 = ((int_32)$7 < (int_32)[6])
	$17 = ($7 + [1])
	$7 = $17
	if ( $16 ){ goto $label$23 }
	$16 = [1]
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$21 }
	goto $label$11 
	
.LABEL $label$13
	$12 = *(($6 + [32]))
	$5 = *($6 + [24])
	CALL eosio_assert(((int_64)$5 < (int_64)2305843009213693952), [12804])
	CALL eosio_assert(((int_64)$5 > (int_64)-2305843009213693952), [12828])
	$13 = ((int_64)$5 << (int_64)1)
	$14 = *($6 + [24])
	if ( ((int_64)$14 >= (int_64)1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$16 = [0]
	
.LABEL $label$11
	CALL eosio_assert($16, [12744])
	
.LABEL $label$10
	$13 = (int_64)0
	$14 = *($6 + [24])
	if ( ((int_64)$14 < (int_64)1) ){ goto $label$8 }
	
.LABEL $label$9
	$7 = *($3 + [472])
	if ( ((int_32)$7 == (int_32)[4]) ){ goto $label$25 }
	if ( ((int_32)$7 == (int_32)[5]) ){ goto $label$26 }
	if ( ((int_32)$7 != (int_32)[6]) ){ goto $label$24 }
	CALL __multi3(($3 + [144]), $14, (int_64)$14 >> (int_64)63), (int_64)5, (int_64)0)
	$18 = *(($6 + [32]))
	$5 = *(($3 + [152]))
	$14 = *($3 + [144])
	CALL eosio_assert(( (uint_64)($14 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$14 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [12828])
	$5 = *($6 + [40])
	if ( ((int_64)$5 >= (int_64)1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$26
	$18 = *(($6 + [32]))
	CALL eosio_assert(((int_64)$14 < (int_64)1152921504606846976), [12804])
	CALL eosio_assert([1], [12828])
	$14 = ((int_64)$14 << (int_64)2)
	$5 = *($6 + [40])
	if ( ((int_64)$5 >= (int_64)1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$25
	$18 = *(($6 + [32]))
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [12804])
	CALL eosio_assert([1], [12828])
	$5 = *($6 + [40])
	if ( ((int_64)$5 >= (int_64)1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$24
	$18 = *(($6 + [32]))
	CALL eosio_assert([1], [12695])
	$5 = (uint_64)$18 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$14 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$5 = $14
	$16 = [1]
	$17 = $7
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$5 = $14
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$16 = ((int_32)$7 < (int_32)[6])
	$17 = ($7 + [1])
	$7 = $17
	if ( $16 ){ goto $label$31 }
	$16 = [1]
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$16 = [0]
	
.LABEL $label$27
	CALL eosio_assert($16, [12744])
	goto $label$7 
	
.LABEL $label$8
	$18 = *(($6 + [32]))
	CALL eosio_assert([1], [12695])
	$5 = (uint_64)$18 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$14 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$5 = $14
	$16 = [1]
	$17 = $7
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$5 = $14
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$16 = ((int_32)$7 < (int_32)[6])
	$17 = ($7 + [1])
	$7 = $17
	if ( $16 ){ goto $label$36 }
	$16 = [1]
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$16 = [0]
	
.LABEL $label$32
	CALL eosio_assert($16, [12744])
	
.LABEL $label$7
	$14 = (int_64)0
	$5 = *($6 + [40])
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = *($3 + [472])
	if ( ((uint_64)*($6) > (uint_64)(int_64)649) ){ goto $label$51 }
	if ( ((int_32)$7 != (int_32)[6]) ){ goto $label$50 }
	CALL __multi3(($3 + [16]), $5, (int_64)$5 >> (int_64)63), (int_64)41, (int_64)0)
	$19 = *(($6 + [48]))
	$5 = *(($3 + [24]))
	$21 = *($3 + [16])
	CALL eosio_assert(( (uint_64)($21 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$21 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [12828])
	goto $label$3 
	
.LABEL $label$51
	if ( ((int_32)$7 != (int_32)[6]) ){ goto $label$49 }
	CALL __multi3(($3 + [80]), $5, (int_64)$5 >> (int_64)63), (int_64)41, (int_64)0)
	$19 = *(($6 + [48]))
	$5 = *(($3 + [88]))
	$21 = *($3 + [80])
	CALL eosio_assert(( (uint_64)($21 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$21 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [12828])
	goto $label$3 
	
.LABEL $label$50
	$7 = ($7 + [-2])
	if ( ((uint_32)$7 > (uint_32)[3]) ){ goto $label$42 }
	goto $label$52 
	
.LABEL $label$52
	$19 = *(($6 + [48]))
	CALL eosio_assert(((int_64)$5 < (int_64)2305843009213693952), [12804])
	CALL eosio_assert([1], [12828])
	$21 = ((int_64)$5 << (int_64)1)
	goto $label$3 
	
.LABEL $label$49
	$7 = ($7 + [-2])
	if ( ((uint_32)$7 > (uint_32)[3]) ){ goto $label$41 }
	goto $label$53 
	
.LABEL $label$53
	$19 = *(($6 + [48]))
	CALL eosio_assert(((int_64)$5 < (int_64)2305843009213693952), [12804])
	CALL eosio_assert([1], [12828])
	$21 = ((int_64)$5 << (int_64)1)
	goto $label$3 
	
.LABEL $label$48
	CALL __multi3(($3 + [48]), $5, (int_64)$5 >> (int_64)63), (int_64)7, (int_64)0)
	$19 = *(($6 + [48]))
	$5 = *(($3 + [56]))
	$21 = *($3 + [48])
	CALL eosio_assert(( (uint_64)($21 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$21 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [12828])
	goto $label$3 
	
.LABEL $label$47
	CALL __multi3(($3 + [112]), $5, (int_64)$5 >> (int_64)63), (int_64)5, (int_64)0)
	$19 = *(($6 + [48]))
	$5 = *(($3 + [120]))
	$21 = *($3 + [112])
	CALL eosio_assert(( (uint_64)($21 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$21 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [12828])
	goto $label$3 
	
.LABEL $label$46
	CALL __multi3(($3 + [32]), $5, (int_64)$5 >> (int_64)63), (int_64)31, (int_64)0)
	$19 = *(($6 + [48]))
	$5 = *(($3 + [40]))
	$21 = *($3 + [32])
	CALL eosio_assert(( (uint_64)($21 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$21 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [12828])
	goto $label$3 
	
.LABEL $label$45
	CALL __multi3(($3 + [96]), $5, (int_64)$5 >> (int_64)63), (int_64)21, (int_64)0)
	$19 = *(($6 + [48]))
	$5 = *(($3 + [104]))
	$21 = *($3 + [96])
	CALL eosio_assert(( (uint_64)($21 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$21 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [12828])
	goto $label$3 
	
.LABEL $label$44
	CALL __multi3(($3 + [64]), $5, (int_64)$5 >> (int_64)63), (int_64)5, (int_64)0)
	$19 = *(($6 + [48]))
	$5 = *(($3 + [72]))
	$21 = *($3 + [64])
	CALL eosio_assert(( (uint_64)($21 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$21 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [12828])
	goto $label$3 
	
.LABEL $label$43
	CALL __multi3(($3 + [128]), $5, (int_64)$5 >> (int_64)63), (int_64)3, (int_64)0)
	$19 = *(($6 + [48]))
	$5 = *(($3 + [136]))
	$21 = *($3 + [128])
	CALL eosio_assert(( (uint_64)($21 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$21 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [12828])
	goto $label$3 
	
.LABEL $label$42
	$19 = *(($6 + [48]))
	CALL eosio_assert([1], [12695])
	$5 = (uint_64)$19 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$20 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$55 }
	$5 = $20
	$16 = [1]
	$17 = $7
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$54 }
	goto $label$39 
	
.LABEL $label$55
	$5 = $20
	
.LOOP $label$56:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$16 = ((int_32)$7 < (int_32)[6])
	$17 = ($7 + [1])
	$7 = $17
	if ( $16 ){ goto $label$56 }
	$16 = [1]
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$54 }
	goto $label$39 
	
.LABEL $label$41
	$19 = *(($6 + [48]))
	CALL eosio_assert([1], [12695])
	$5 = (uint_64)$19 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$57:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$20 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$58 }
	$5 = $20
	$16 = [1]
	$17 = $7
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$57 }
	goto $label$37 
	
.LABEL $label$58
	$5 = $20
	
.LOOP $label$59:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$16 = ((int_32)$7 < (int_32)[6])
	$17 = ($7 + [1])
	$7 = $17
	if ( $16 ){ goto $label$59 }
	$16 = [1]
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$57 }
	goto $label$37 
	
.LABEL $label$40
	$16 = [0]
	
.LABEL $label$39
	CALL eosio_assert($16, [12744])
	goto $label$4 
	
.LABEL $label$38
	$16 = [0]
	
.LABEL $label$37
	CALL eosio_assert($16, [12744])
	goto $label$4 
	
.LABEL $label$5
	$19 = *(($6 + [48]))
	CALL eosio_assert([1], [12695])
	$5 = (uint_64)$19 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$20 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$63 }
	$5 = $20
	$16 = [1]
	$17 = $7
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$63
	$5 = $20
	
.LOOP $label$64:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$61 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$16 = ((int_32)$7 < (int_32)[6])
	$17 = ($7 + [1])
	$7 = $17
	if ( $16 ){ goto $label$64 }
	$16 = [1]
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	$16 = [0]
	
.LABEL $label$60
	CALL eosio_assert($16, [12744])
	
.LABEL $label$4
	$21 = (int_64)0
	
.LABEL $label$3
	$20 = *(($6 + [32]))
	$5 = *(($6 + [24]))
	if ( (*(($6 + [124])) == 0) ){ goto $label$65 }
	CALL eosio_assert(((int_64)$5 < (int_64)2305843009213693952), [12804])
	CALL eosio_assert(((int_64)$5 > (int_64)-2305843009213693952), [12828])
	$5 = ((int_64)$5 << (int_64)1)
	
.LABEL $label$65
	CALL eosio_assert(((int_64)*(($6 + [48])) == (int_64)$20), [12853])
	$22 = ((int_64)*($6 + [40]) + (int_64)$5)
	CALL eosio_assert(((int_64)$22 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$22 < (int_64)4611686018427387904), [12915])
	CALL eosio_assert(((int_64)$18 == (int_64)$12), [12853])
	$5 = ((int_64)$14 + (int_64)$13)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [12915])
	CALL eosio_assert(((int_64)$19 == (int_64)$12), [12853])
	$5 = ((int_64)$21 + (int_64)$5)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [12915])
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$72 }
	*(($3 + [200])) = $12
	*((($3 + [176]) + [40])) = [0]
	*($3 + [184]) = $2
	*($3 + [192]) = $5
	*($3 + [208]) = (int_64)0
	*($3 + [176]) = *($0)
	$16 = ($3 + [208])
	$7 = CALL $292([11468])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$71 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$75 }
	*(($3 + [208])) = ($7 << [1])
	$16 = ($16 + [1])
	if ( $7 ){ goto $label$74 }
	goto $label$73 
	
.LABEL $label$75
	$17 = (($7 + [16]) & [-16])
	$16 = CALL _Znwj($17)
	*(($3 + [216])) = $16
	*(($3 + [212])) = $7
	*($3 + [208]) = ($17 | [1])
	
.LABEL $label$74
	CALL memcpy($16, [11468], $7)
	
.LABEL $label$73
	*(($16 + $7)) = [0]
	*($3 + [440]) = (int_64)3617214756542218240
	*($3 + [432]) = *($0)
	$7 = CALL $100(($3 + [384]), ($3 + [432]), *($6 + [56]), (int_64)-3617168760277827584, ($3 + [176]))
	CALL $101(($3 + [344]), $7)
	$16 = *($3 + [344])
	CALL send_inline($16, (*($3 + [348]) - $16))
	$16 = *($3 + [344])
	if ( ($16 == 0) ){ goto $label$76 }
	*($3 + [348]) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$76
	$16 = *($7 + [28])
	if ( ($16 == 0) ){ goto $label$77 }
	*(($7 + [32])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$77
	$16 = *($7 + [16])
	if ( ($16 == 0) ){ goto $label$78 }
	*(($7 + [20])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$78
	if ( ((*(($3 + [208])) & [1]) == 0) ){ goto $label$72 }
	CALL _ZdlPv(*(($3 + [216])))
	
.LABEL $label$72
	$7 = ((int_64)$12 == (int_64)$20)
	CALL eosio_assert($7, [12933])
	if ( ((int_64)$5 <= (int_64)$22) ){ goto $label$79 }
	if ( (int_64)(*($6 + [16]) == 0) ){ goto $label$79 }
	$5 = (int_64)
	CALL __multi3($3, $5($5 - $22)), (int_64)$5 >> (int_64)63), (int_64)75, (int_64)0)
	CALL eosio_assert($7, [12998])
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [13046])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [13068])
	$5 = *(($3 + [8]))
	$23 = *($3)
	CALL eosio_assert(( (uint_64)($23 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$23 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [12828])
	CALL eosio_assert([1], [12764])
	CALL eosio_assert([1], [12779])
	if ( ((int_64)$23 < (int_64)10000) ){ goto $label$79 }
	*($3 + [176]) = *($0)
	$5 = *(($6 + [16]))
	*(($3 + [200])) = $12
	*(($3 + [216])) = [0]
	*($3 + [192]) = ((uint_64)$23 / (uint_64)(int_64)10000)
	*($3 + [184]) = $5
	*($3 + [208]) = (int_64)0
	$16 = ($3 + [208])
	$7 = CALL $292([11580])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$66 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$82 }
	*(($3 + [208])) = ($7 << [1])
	$16 = ($16 + [1])
	if ( $7 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	$17 = (($7 + [16]) & [-16])
	$16 = CALL _Znwj($17)
	*(($3 + [216])) = $16
	*(($3 + [212])) = $7
	*($3 + [208]) = ($17 | [1])
	
.LABEL $label$81
	CALL memcpy($16, [11580], $7)
	
.LABEL $label$80
	*(($16 + $7)) = [0]
	*($3 + [440]) = (int_64)3617214756542218240
	*($3 + [432]) = *($0)
	$7 = CALL $100(($3 + [384]), ($3 + [432]), *($6 + [56]), (int_64)-3617168760277827584, ($3 + [176]))
	CALL $101(($3 + [344]), $7)
	$16 = *($3 + [344])
	CALL send_inline($16, (*($3 + [348]) - $16))
	$16 = *($3 + [344])
	if ( ($16 == 0) ){ goto $label$83 }
	*($3 + [348]) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$83
	$16 = *($7 + [28])
	if ( ($16 == 0) ){ goto $label$84 }
	*(($7 + [32])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$84
	$16 = *($7 + [16])
	if ( ($16 == 0) ){ goto $label$85 }
	*(($7 + [20])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$85
	if ( ((*(($3 + [208])) & [1]) == 0) ){ goto $label$79 }
	CALL _ZdlPv(*(($3 + [216])))
	
.LABEL $label$79
	if ( ((int_64)$20 != (int_64)*($0 + [168])) ){ goto $label$86 }
	*(($3 + [464])) = [0]
	*($3 + [448]) = (int_64)-1
	*($3 + [456]) = (int_64)0
	*($3 + [432]) = *($0 + [176])
	*($3 + [440]) = *($0 + [192])
	$5 = *(CALL $98(($3 + [432]), (uint_64)*($0 + [184]) >> (uint_64)(int_64)8), [9752]))
	*(($7 = (($3 + [176]) + [24]))) = *($0 + [184])
	*($3 + [184]) = $2
	*($3 + [176]) = *($0 + [192])
	$22 = ((int_64)$22 / (int_64)((int_64)((int_64)8000000000000 / (int_64)$5) << (int_64)32) >> (int_64)32)
	*($3 + [192]) = $22)
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$5 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$89:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$88 }
	$20 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$90 }
	$5 = $20
	$16 = [1]
	$17 = $7
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$90
	$5 = $20
	
.LOOP $label$91:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$88 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$16 = ((int_32)$7 < (int_32)[6])
	$17 = ($7 + [1])
	$7 = $17
	if ( $16 ){ goto $label$91 }
	$16 = [1]
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$88
	$16 = [0]
	
.LABEL $label$87
	CALL eosio_assert($16, [12744])
	*(($3 + [216])) = [0]
	*($3 + [208]) = (int_64)0
	$16 = ($3 + [208])
	$7 = CALL $292([11468])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$68 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$94 }
	*(($3 + [208])) = ($7 << [1])
	$16 = ($16 + [1])
	if ( $7 ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$94
	$17 = (($7 + [16]) & [-16])
	$16 = CALL _Znwj($17)
	*(($3 + [216])) = $16
	*(($3 + [212])) = $7
	*($3 + [208]) = ($17 | [1])
	
.LABEL $label$93
	CALL memcpy($16, [11468], $7)
	
.LABEL $label$92
	*(($16 + $7)) = [0]
	*($3 + [352]) = (int_64)3617214756542218240
	*($3 + [344]) = *(($0 + [192]))
	$7 = CALL $100(($3 + [384]), ($3 + [344]), *(($0 + [176])), (int_64)-3617168760277827584, ($3 + [176]))
	CALL $101(($3 + [328]), $7)
	$16 = *($3 + [328])
	CALL send_inline($16, (*($3 + [332]) - $16))
	$16 = *($3 + [328])
	if ( ($16 == 0) ){ goto $label$95 }
	*($3 + [332]) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$95
	$16 = *($7 + [28])
	if ( ($16 == 0) ){ goto $label$96 }
	*(($7 + [32])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$96
	$16 = *($7 + [16])
	if ( ($16 == 0) ){ goto $label$97 }
	*(($7 + [20])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$97
	$5 = *($6 + [16])
	if ( (int_64)($5 == 0) ){ goto $label$98 }
	*(($7 = (($3 + [384]) + [24]))) = *(($0 + [184]))
	*($3 + [392]) = $5
	*($3 + [384]) = *(($0 + [192]))
	$5 = ((int_64)$22 / (int_64)2)
	*($3 + [400]) = $5
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$5 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$101:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$100 }
	$20 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$102 }
	$5 = $20
	$16 = [1]
	$17 = $7
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$101 }
	goto $label$99 
	
.LABEL $label$102
	$5 = $20
	
.LOOP $label$103:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$100 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$16 = ((int_32)$7 < (int_32)[6])
	$17 = ($7 + [1])
	$7 = $17
	if ( $16 ){ goto $label$103 }
	$16 = [1]
	$7 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)[6]) ){ goto $label$101 }
	goto $label$99 
	
.LABEL $label$100
	$16 = [0]
	
.LABEL $label$99
	CALL eosio_assert($16, [12744])
	*(($3 + [424])) = [0]
	*($3 + [416]) = (int_64)0
	$16 = ($3 + [416])
	$7 = CALL $292([11580])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$67 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$106 }
	*(($3 + [416])) = ($7 << [1])
	$16 = ($16 + [1])
	if ( $7 ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$106
	$17 = (($7 + [16]) & [-16])
	$16 = CALL _Znwj($17)
	*(($3 + [424])) = $16
	*(($3 + [420])) = $7
	*($3 + [416]) = ($17 | [1])
	
.LABEL $label$105
	CALL memcpy($16, [11580], $7)
	
.LABEL $label$104
	*(($16 + $7)) = [0]
	*($3 + [336]) = (int_64)3617214756542218240
	*($3 + [328]) = *(($0 + [192]))
	$7 = CALL $100(($3 + [344]), ($3 + [328]), *(($0 + [176])), (int_64)-3617168760277827584, ($3 + [384]))
	CALL $101(($3 + [560]), $7)
	$16 = *($3 + [560])
	CALL send_inline($16, (*($3 + [564]) - $16))
	$16 = *($3 + [560])
	if ( ($16 == 0) ){ goto $label$107 }
	*($3 + [564]) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$107
	$16 = *($7 + [28])
	if ( ($16 == 0) ){ goto $label$108 }
	*(($7 + [32])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$108
	$16 = *($7 + [16])
	if ( ($16 == 0) ){ goto $label$109 }
	*(($7 + [20])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$109
	if ( ((*(($3 + [416])) & [1]) == 0) ){ goto $label$98 }
	CALL _ZdlPv(*(($3 + [424])))
	
.LABEL $label$98
	if ( ((*(($3 + [208])) & [1]) == 0) ){ goto $label$110 }
	CALL _ZdlPv(*(($3 + [216])))
	
.LABEL $label$110
	$17 = *($3 + [456])
	if ( ($17 == 0) ){ goto $label$86 }
	$15 = ($3 + [460])
	$7 = *($15)
	if ( ((int_32)$7 == (int_32)$17) ){ goto $label$112 }
	
.LOOP $label$113:
	$7 = ($7 + [-24])
	$16 = *($7)
	*($7) = [0]
	if ( ($16 == 0) ){ goto $label$114 }
	CALL _ZdlPv($16)
	
.LABEL $label$114
	if ( ((int_32)$17 != (int_32)$7) ){ goto $label$113 }
	$7 = *(($3 + [456]))
	goto $label$111 
	
.LABEL $label$112
	$7 = $17
	
.LABEL $label$111
	*($15) = $17
	CALL _ZdlPv($7)
	
.LABEL $label$86
	*($3 + [352]) = [0]
	*($3 + [344]) = (int_64)0
	*($3 + [336]) = [0]
	*($3 + [328]) = (int_64)0
	$7 = *($6 + [112])
	if ( ((int_32)*(($6 + [116])) == (int_32)$7) ){ goto $label$116 }
	CALL $131(($3 + [176]), *($7))
	$7 = *($3 + [348])
	if ( ((uint_32)$7 >= (uint_32)*((($3 + [344]) + [8]))) ){ goto $label$118 }
	*($7) = *($3 + [176])
	$7 = (($3 + [176]) + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($3 + [176]) = (int_64)0
	*($3 + [348]) = (*($3 + [348]) + [12])
	goto $label$117 
	
.LABEL $label$118
	CALL $132(($3 + [344]), ($3 + [176]))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$117 }
	CALL _ZdlPv(*(($3 + [184])))
	
.LABEL $label$117
	$7 = *(($4 + [8]))
	if ( ((int_32)*(($4 + [12])) == (int_32)$7) ){ goto $label$115 }
	CALL $131(($3 + [176]), *($7))
	$7 = *($3 + [332])
	if ( ((uint_32)$7 >= (uint_32)*((($3 + [328]) + [8]))) ){ goto $label$120 }
	*($7) = *($3 + [176])
	$7 = (($3 + [176]) + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($3 + [176]) = (int_64)0
	*($3 + [332]) = (*($3 + [332]) + [12])
	goto $label$119 
	
.LABEL $label$120
	CALL $132(($3 + [328]), ($3 + [176]))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$119 }
	CALL _ZdlPv(*(($3 + [184])))
	
.LABEL $label$119
	$7 = *(($6 + [112]))
	if ( ((uint_32)(*(($6 + [116])) - $7) <= (uint_32)[1]) ){ goto $label$116 }
	CALL $131(($3 + [176]), *($7 + [1]))
	$7 = *($3 + [348])
	if ( ((uint_32)$7 >= (uint_32)*((($3 + [344]) + [8]))) ){ goto $label$122 }
	*($7) = *($3 + [176])
	$7 = (($3 + [176]) + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($3 + [176]) = (int_64)0
	*($3 + [348]) = (*($3 + [348]) + [12])
	goto $label$121 
	
.LABEL $label$122
	CALL $132(($3 + [344]), ($3 + [176]))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$121 }
	CALL _ZdlPv(*(($3 + [184])))
	
.LABEL $label$121
	$7 = *(($4 + [8]))
	if ( ((*(($4 + [12])) - $7) <= [2]) ){ goto $label$115 }
	CALL $131(($3 + [176]), *($7 + [1]))
	$7 = *($3 + [332])
	if ( ((uint_32)$7 >= (uint_32)*((($3 + [328]) + [8]))) ){ goto $label$124 }
	*($7) = *($3 + [176])
	$7 = (($3 + [176]) + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($3 + [176]) = (int_64)0
	*($3 + [332]) = (*($3 + [332]) + [12])
	goto $label$123 
	
.LABEL $label$124
	CALL $132(($3 + [328]), ($3 + [176]))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$123 }
	CALL _ZdlPv(*(($3 + [184])))
	
.LABEL $label$123
	$7 = *(($6 + [112]))
	if ( ((*(($6 + [116])) - $7) <= [3]) ){ goto $label$116 }
	CALL $131(($3 + [176]), *($7 + [2]))
	$7 = *($3 + [348])
	if ( ((uint_32)$7 >= (uint_32)*((($3 + [344]) + [8]))) ){ goto $label$126 }
	*($7) = *($3 + [176])
	$7 = (($3 + [176]) + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($3 + [176]) = (int_64)0
	*($3 + [348]) = (*($3 + [348]) + [12])
	goto $label$125 
	
.LABEL $label$126
	CALL $132(($3 + [344]), ($3 + [176]))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$125 }
	CALL _ZdlPv(*(($3 + [184])))
	
.LABEL $label$125
	$7 = *(($4 + [8]))
	if ( ((*(($4 + [12])) - $7) <= [3]) ){ goto $label$115 }
	CALL $131(($3 + [176]), *($7 + [2]))
	$7 = *($3 + [332])
	if ( ((uint_32)$7 >= (uint_32)*((($3 + [328]) + [8]))) ){ goto $label$128 }
	*($7) = *($3 + [176])
	$7 = (($3 + [176]) + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($3 + [176]) = (int_64)0
	*($3 + [332]) = (*($3 + [332]) + [12])
	goto $label$127 
	
.LABEL $label$128
	CALL $132(($3 + [328]), ($3 + [176]))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$127 }
	CALL _ZdlPv(*(($3 + [184])))
	
.LABEL $label$127
	*(($3 + [200])) = [0]
	*($3 + [184]) = $2
	*($3 + [176]) = $1
	*($3 + [192]) = (int_64)0
	$7 = (*($3 + [348]) - *($3 + [344]))
	$15 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$129 }
	if ( ((uint_32)$15 >= (uint_32)[357913942]) ){ goto $label$70 }
	$16 = CALL _Znwj($7)
	*(($3 + [192])) = $16
	*(($17 = ($3 + [196]))) = $16
	*(($3 + [200])) = ($16 + ((int_32)$15 * (int_32)[12]))
	$15 = *($3 + [348])
	$7 = *($3 + [344])
	if ( ((int_32)$7 == (int_32)$15) ){ goto $label$129 }
	
.LOOP $label$130:
	CALL $260($16, $7)
	$16 = (*($17) + [12])
	*($17) = $16
	$7 = ($7 + [12])
	if ( ((int_32)$15 != (int_32)$7) ){ goto $label$130 }
	
.LABEL $label$129
	*(($3 + [212])) = [0]
	*($3 + [204 align=4]) = (int_64)0
	$7 = (*($3 + [332]) - *($3 + [328]))
	$15 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$131 }
	if ( ((uint_32)$15 >= (uint_32)[357913942]) ){ goto $label$69 }
	$16 = CALL _Znwj($7)
	*(($3 + [204])) = $16
	*(($17 = ($3 + [208]))) = $16
	*(($3 + [212])) = ($16 + ((int_32)$15 * (int_32)[12]))
	$15 = *($3 + [332])
	$7 = *($3 + [328])
	if ( ((int_32)$7 == (int_32)$15) ){ goto $label$131 }
	
.LOOP $label$132:
	CALL $260($16, $7)
	$16 = (*($17) + [12])
	*($17) = $16
	$7 = ($7 + [12])
	if ( ((int_32)$15 != (int_32)$7) ){ goto $label$132 }
	
.LABEL $label$131
	CALL $135(($3 + [216]), *($3 + [472]))
	CALL $135(($3 + [228]), *($3 + [474]))
	*(($3 + [248])) = *(($6 + [32]))
	*($3 + [240]) = *($6 + [24])
	$7 = *(($6 + [124]))
	*(($3 + [272])) = $12
	*(($3 + [288])) = $18
	*($3 + [256]) = $7
	*($3 + [264]) = $13
	*($3 + [280]) = $14
	$7 = ($6 + [40])
	$5 = *(($7 + [8]))
	$12 = *($7)
	*(($3 + [320])) = $19
	*(($3 + [304])) = $5
	*($3 + [312]) = $21
	*($3 + [296]) = $12
	*(($16 = ($3 + [408]))) = [0]
	*($3 + [392]) = (int_64)-3612602540166856704
	*($3 + [400]) = (int_64)0
	$5 = *($0)
	*($3 + [384]) = $5
	*(($7 = CALL _Znwj([16]))) = $5
	*($7 + [8]) = (int_64)3617214756542218240
	$17 = ($7 + [16])
	*($16) = $17
	*(($3 + [404])) = $17
	*($3 + [400]) = $7
	CALL $142((($3 + [384]) + [28]), ($3 + [176]))
	CALL $101(($3 + [432]), ($3 + [384]))
	$7 = *($3 + [432])
	CALL send_inline($7, (*($3 + [436]) - $7))
	$7 = *($3 + [432])
	if ( ($7 == 0) ){ goto $label$133 }
	*($3 + [436]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$133
	$7 = *($3 + [412])
	if ( ($7 == 0) ){ goto $label$134 }
	*(($3 + [416])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$134
	$7 = *($3 + [400])
	if ( ($7 == 0) ){ goto $label$135 }
	*(($3 + [404])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$135
	CALL eosio_assert($8, [14084])
	CALL eosio_assert($8, [14118])
	$7 = CALL db_next_i64(*($6 + [132]), ($3 + [384]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$136 }
	CALL $118(($3 + [520]), $7)
	
.LABEL $label$136
	CALL $121(($3 + [520]), $6)
	$7 = CALL db_lowerbound_i64(*($3 + [520]), *(($3 + [528])), (int_64)-3612780472452513792, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$138 }
	CALL $118(($3 + [520]), $7)
	goto $label$137 
	
.LABEL $label$138
	CALL eosio_assert($9, [14084])
	CALL eosio_assert($9, [14118])
	$7 = CALL db_next_i64(*($4 + [28]), ($3 + [384]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$139 }
	CALL $122(($3 + [480]), $7)
	
.LABEL $label$139
	CALL $123(($3 + [480]), $4)
	
.LABEL $label$137
	if ( ((*(($3 + [228])) & [1]) == 0) ){ goto $label$140 }
	CALL _ZdlPv(*(($3 + [236])))
	
.LABEL $label$140
	if ( ((*(($3 + [216])) & [1]) == 0) ){ goto $label$141 }
	CALL _ZdlPv(*(($3 + [224])))
	
.LABEL $label$141
	$16 = *($3 + [204])
	if ( ($16 == 0) ){ goto $label$142 }
	$17 = ($3 + [208])
	$6 = *($17)
	if ( ((int_32)$6 == (int_32)$16) ){ goto $label$144 }
	
.LOOP $label$145:
	$7 = ($6 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$146 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$146
	$6 = $7
	if ( ((int_32)$16 != (int_32)$7) ){ goto $label$145 }
	$7 = *(($3 + [204]))
	goto $label$143 
	
.LABEL $label$144
	$7 = $16
	
.LABEL $label$143
	*($17) = $16
	CALL _ZdlPv($7)
	
.LABEL $label$142
	$16 = *($3 + [192])
	if ( ($16 == 0) ){ goto $label$147 }
	$17 = ($3 + [196])
	$6 = *($17)
	if ( ((int_32)$6 == (int_32)$16) ){ goto $label$149 }
	
.LOOP $label$150:
	$7 = ($6 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$151 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$151
	$6 = $7
	if ( ((int_32)$16 != (int_32)$7) ){ goto $label$150 }
	$7 = *(($3 + [192]))
	goto $label$148 
	
.LABEL $label$149
	$7 = $16
	
.LABEL $label$148
	*($17) = $16
	CALL _ZdlPv($7)
	
.LABEL $label$147
	$16 = *($3 + [328])
	if ( ($16 == 0) ){ goto $label$152 }
	$6 = *($3 + [332])
	if ( ((int_32)$6 == (int_32)$16) ){ goto $label$154 }
	
.LOOP $label$155:
	$7 = ($6 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$156 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$156
	$6 = $7
	if ( ((int_32)$16 != (int_32)$7) ){ goto $label$155 }
	$7 = *($3 + [328])
	goto $label$153 
	
.LABEL $label$154
	$7 = $16
	
.LABEL $label$153
	*($3 + [332]) = $16
	CALL _ZdlPv($7)
	
.LABEL $label$152
	$16 = *($3 + [344])
	if ( ($16 == 0) ){ goto $label$157 }
	$6 = *($3 + [348])
	if ( ((int_32)$6 == (int_32)$16) ){ goto $label$159 }
	
.LOOP $label$160:
	$7 = ($6 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$161 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$161
	$6 = $7
	if ( ((int_32)$16 != (int_32)$7) ){ goto $label$160 }
	$7 = *($3 + [344])
	goto $label$158 
	
.LABEL $label$159
	$7 = $16
	
.LABEL $label$158
	*($3 + [348]) = $16
	CALL _ZdlPv($7)
	
.LABEL $label$157
	$17 = *($3 + [504])
	if ( ($17 == 0) ){ goto $label$162 }
	$15 = ($3 + [508])
	$7 = *($15)
	if ( ((int_32)$7 == (int_32)$17) ){ goto $label$164 }
	
.LOOP $label$165:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$166 }
	$16 = *($6 + [8])
	if ( ($16 == 0) ){ goto $label$167 }
	*(($6 + [12])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$167
	CALL _ZdlPv($6)
	
.LABEL $label$166
	if ( ((int_32)$17 != (int_32)$7) ){ goto $label$165 }
	$7 = *(($3 + [504]))
	goto $label$163 
	
.LABEL $label$164
	$7 = $17
	
.LABEL $label$163
	*($15) = $17
	CALL _ZdlPv($7)
	
.LABEL $label$162
	$17 = *($3 + [544])
	if ( ($17 == 0) ){ goto $label$168 }
	$15 = ($3 + [548])
	$6 = *($15)
	if ( ((int_32)$6 == (int_32)$17) ){ goto $label$170 }
	
.LOOP $label$171:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$172 }
	$16 = *($7 + [112])
	if ( ($16 == 0) ){ goto $label$173 }
	*(($7 + [116])) = $16
	CALL _ZdlPv($16)
	
.LABEL $label$173
	if ( ((*($7 + [64]) & [1]) == 0) ){ goto $label$174 }
	CALL _ZdlPv(*(($7 + [72])))
	
.LABEL $label$174
	CALL _ZdlPv($7)
	
.LABEL $label$172
	if ( ((int_32)$17 != (int_32)$6) ){ goto $label$171 }
	$7 = *(($3 + [544]))
	goto $label$169 
	
.LABEL $label$170
	$7 = $17
	
.LABEL $label$169
	*($15) = $17
	CALL _ZdlPv($7)
	
.LABEL $label$168
	$global$0 = ($3 + [576])
	return (unreachable)
	
.LABEL $label$116
	CALL $277($10)
	
.LABEL $label$115
	CALL $277($11)
	
.LABEL $label$71
	CALL $259($16)
	
.LABEL $label$70
	CALL $276(($3 + [192]))
	
.LABEL $label$69
	CALL $276((($3 + [176]) + [28]))
	
.LABEL $label$68
	CALL $259($16)
	
.LABEL $label$67
	CALL $259($16)
	
.LABEL $label$66
	CALL $259($16)
	$7
	$7
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $235 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $206(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [12690])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $278 ()
{
	return [14388]
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [328]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [324])) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [312]) = [0]
	*($4 + [316 align=4]) = (int_64)0
	*($4 + [268]) = $2
	*($4 + [264]) = $2
	*($4 + [272]) = ($2 + $5)
	*($4 + [16]) = ($4 + [264])
	*($4 + [40]) = ($4 + [280])
	CALL $88(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [272])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [264])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $5(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [328])
	CALL $89(($4 + [16]), ($4 + [280]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$12 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($3 + [40]) & $2) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [36])))
	if ( (*($4 + [316]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [316]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [324])))
	
.LABEL $label$4
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$7 = ($global$0 - [112])
	$global$0 = $7
	*($7 + [103]) = $5
	*($7 + [104]) = $3
	CALL require_auth(*($0))
	*(($7 + [88])) = [0]
	*($7 + [72]) = (int_64)-1
	*($7 + [80]) = (int_64)0
	$8 = *($0)
	*($7 + [56]) = $8
	*($7 + [64]) = $2
	$5 = [0]
	$9 = CALL db_find_i64($8, $2, (int_64)4312312276611760128, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $77(($7 + [56]), $9)
	CALL eosio_assert(((int_32)*($5 + [144]) == (int_32)($7 + [56])), [13766])
	$3 = *($7 + [104])
	
.LABEL $label$1
	$10 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($10, [8671])
	$9 = ($5 + [112])
	CALL eosio_assert(((uint_64)$3 <= (uint_64)(CASTING uint_64)(uint_32 ((int_32)(*($9) - *($5 + [108])) / (int_32)[40]))), [9417])
	$12 = ((CASTING uint_32)(uint_64 $3) + [-1])
	$11 = *($5 + [108])
	if ( ((uint_32)((int_32)(*($9) - $11) / (int_32)[40]) <= (uint_32)$12) ){ goto $label$3 }
	*(($13 = (($7 + [16]) + [12]))) = (int_64)0
	*($7 + [24]) = [0]
	$9 = ($11 + ((int_32)$12 * (int_32)[40]))
	*($7 + [16]) = *($9)
	$14 = (($7 + [16]) + [8])
	$15 = ($9 + [12])
	$16 = (*($15) - *($9 + [8]))
	if ( ($16 == 0) ){ goto $label$4 }
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$2 }
	$17 = CALL _Znwj($16)
	*(($7 + [24])) = $17
	*(($7 + [32])) = ($17 + $16)
	*(($16 = ($7 + [28]))) = $17
	$15 = *(($9 + [8]))
	$9 = (*($15) - $15)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($17, $15, $9)
	*($16) = (*($16) + $9)
	
.LABEL $label$4
	$9 = ($11 + ((int_32)$12 * (int_32)[40]))
	*((($7 + [16]) + [36])) = *(($9 + [36]))
	*((($7 + [16]) + [28])) = *(($9 + [28]))
	*($7 + [36 align=4]) = *($9 + [20 align=4])
	CALL eosio_assert(((*($7 + [36]) & [1]) | *($7 + [39])), [9553])
	CALL eosio_assert(((int_64)(CASTING uint_64)(uint_32 ((*($13) + [1]) - *($14))) == (int_64)$4), [9586])
	$3 = *($0)
	*($7 + [12]) = ($7 + [103])
	*($7 + [8]) = ($7 + [104])
	CALL eosio_assert($10, [13817])
	CALL $90(($7 + [56]), $5, $3, ($7 + [8]))
	$5 = *($14)
	if ( ($5 == 0) ){ goto $label$5 }
	*(($7 + [28])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$9 = *($7 + [80])
	if ( ($9 == 0) ){ goto $label$6 }
	$11 = ($7 + [84])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$8 }
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$0 = CALL $79($5)
	$5 = ($5 + [-24])
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$9 }
	$5 = *(($7 + [80]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $9
	
.LABEL $label$7
	*($11) = $9
	CALL _ZdlPv($5)
	
.LABEL $label$6
	$global$0 = ($7 + [112])
	return (unreachable)
	
.LABEL $label$3
	CALL $277(($5 + [108]))
	
.LABEL $label$2
	CALL $276($14)
	(unreachable)
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$3 = CALL $295($7)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $7)
	
.LABEL $label$1
	*($4 + [296]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [276]) = $3
	*($4 + [272]) = $3
	*($4 + [280]) = ($3 + $7)
	*($4 + [352]) = ($4 + [272])
	*($4 + [48]) = ($4 + [288])
	CALL $71(($4 + [48]), ($4 + [352]))
	$2 = *($4 + [280])
	*((($4 + [32]) + [8])) = $2
	*((($4 + [16]) + [8])) = $2
	$8 = *($4 + [272])
	*($4 + [16]) = $8
	*($4 + [32]) = $8
	$2 = CALL $5(($4 + [48]), $0, $1, ($4 + [16]))
	*(($9 = (($4 + [320]) + [8]))) = *($4 + [296])
	*($4 + [320]) = *($4 + [288])
	$0 = *($4 + [304])
	$1 = *($4 + [312])
	*((($4 + [336]) + [8])) = *($9)
	*($4 + [336]) = *($4 + [320])
	$9 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($9) + $6))
	
.LABEL $label$5
	$8 = *((($4 + [336]) + [8]))
	*((($4 + [352]) + [8])) = $8
	*(($4 + [8])) = $8
	$8 = *($4 + [336])
	*($4) = $8
	*($4 + [352]) = $8
	CALL void $9((int_32 $4), (int_32 $0), (int_64 $1), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	$3 = [1]
	if ( (*($2 + [52]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $298($3)
	$3 = [1]
	if ( ((*($2 + [52]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($2 + [60])))
	if ( ((*($2 + [40]) & $3) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($2 + [40]) & $3) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = [1]
	if ( (*($2 + [28]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($2 + [48])))
	$3 = [1]
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($2 + [36])))
	$global$0 = ($4 + [368])
	return $3
	
.LABEL $label$6
	$global$0 = ($4 + [368])
	return $3
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [160])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = ($1 + [8])
	$6 = *($5)
	*((($4 + [64]) + [8])) = $6
	$7 = *($1)
	*((($4 + [8]) + [8])) = $6
	*($4 + [8]) = $7
	*($4 + [64]) = $7
	CALL $72($0, ($4 + [8]))
	CALL eosio_assert(((uint_64)$2 <= (uint_64)$3), [8569])
	$8 = [0]
	*((($4 + [24]) + [32])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$6 = *($0)
	*($4 + [24]) = $6
	$7 = *($5)
	*($4 + [32]) = $7
	$9 = *($1)
	$1 = CALL db_find_i64($6, $7, (int_64)-3590606672529195008, (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $148(($4 + [24]), $1) + [32]) == (int_32)($4 + [24])), [13766])
	goto $label$1 
	
.LABEL $label$2
	$8 = [1]
	
.LABEL $label$1
	CALL eosio_assert($8, [8594])
	$6 = *($0)
	CALL eosio_assert(((int_64)*($4 + [24]) == (int_64)CALL $fimport$6()), [14008])
	*(($0 = CALL _Znwj([48])) + [32]) = ($4 + [24])
	*($0 + [8]) = $7
	*($0) = $9
	*($0 + [16]) = $2
	*($0 + [24]) = $3
	*($4 + [128]) = (($4 + [80]) + [32])
	*($4 + [124]) = ($4 + [80])
	*($4 + [120]) = ($4 + [80])
	*($4 + [136]) = ($4 + [120])
	*($4 + [148]) = ($0 + [8])
	*($4 + [144]) = $0
	*($4 + [152]) = ($0 + [16])
	*($4 + [156]) = ($0 + [24])
	CALL $149(($4 + [144]), ($4 + [136]))
	$2 = (uint_64)*($0) >> (uint_64)(int_64)8
	$8 = CALL db_store_i64(*((($4 + [24]) + [8])), (int_64)-3590606672529195008, $6, $2), ($4 + [80]), [32]
	*($0 + [36]) = $8)
	$1 = (($4 + [24]) + [16])
	if ( (uint_64)($2 <= *($1)) ){ goto $label$3 }
	*($1) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$3
	*($4 + [144]) = $0
	$2 = (uint_64)*($0) >> (uint_64)(int_64)8
	*($4 + [80]) = $2)
	*($4 + [120]) = $8
	$5 = ($4 + [52])
	$1 = *($5)
	if ( ((uint_32)$1 >= (uint_32)*(($4 + [56]))) ){ goto $label$6 }
	*($1 + [8]) = $2
	*($1 + [16]) = $8
	*($4 + [144]) = [0]
	*($1) = $0
	*($5) = ($1 + [24])
	$0 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $150(($4 + [48]), ($4 + [144]), ($4 + [80]), ($4 + [120]))
	$0 = *($4 + [144])
	*($4 + [144]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$8 = *($4 + [48])
	if ( ($8 == 0) ){ goto $label$7 }
	$5 = ($4 + [52])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($4 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $8
	
.LABEL $label$8
	*($5) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$global$0 = ($4 + [160])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$6 = ($global$0 - [176])
	$global$0 = $6
	CALL require_auth(*($0))
	$7 = ($1 + [8])
	$8 = *($7)
	*((($6 + [64]) + [8])) = $8
	$9 = *($1)
	*((($6 + [8]) + [8])) = $8
	*($6 + [8]) = $9
	*($6 + [64]) = $9
	CALL $72($0, ($6 + [8]))
	CALL eosio_assert(((uint_64)$2 <= (uint_64)$3), [8569])
	$10 = [0]
	*((($6 + [24]) + [32])) = [0]
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	$8 = *($0)
	*($6 + [24]) = $8
	$9 = *($7)
	*($6 + [32]) = $9
	$11 = *($1)
	$1 = CALL db_find_i64($8, $9, (int_64)-3612561720712626176, (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $108(($6 + [24]), $1) + [48]) == (int_32)($6 + [24])), [13766])
	goto $label$1 
	
.LABEL $label$2
	$10 = [1]
	
.LABEL $label$1
	CALL eosio_assert($10, [8594])
	$8 = *($0)
	CALL eosio_assert(((int_64)*($6 + [24]) == (int_64)CALL $fimport$6()), [14008])
	*(($0 = CALL _Znwj([64])) + [48]) = ($6 + [24])
	*($0 + [8]) = $9
	*($0) = $11
	*($0 + [16]) = $2
	*($0 + [24]) = $3
	*($0 + [32]) = $4
	*($0 + [40]) = $5
	*($6 + [136]) = (($6 + [80]) + [48])
	*($6 + [132]) = ($6 + [80])
	*($6 + [128]) = ($6 + [80])
	*($6 + [144]) = ($6 + [128])
	*($6 + [156]) = ($0 + [8])
	*($6 + [152]) = $0
	*($6 + [160]) = ($0 + [16])
	*($6 + [164]) = ($0 + [24])
	*($6 + [168]) = ($0 + [32])
	*($6 + [172]) = ($0 + [40])
	CALL $109(($6 + [152]), ($6 + [144]))
	$2 = (uint_64)*($0) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*((($6 + [24]) + [8])), (int_64)-3612561720712626176, $8, $2), ($6 + [80]), [48]
	*($0 + [52]) = $10)
	$1 = (($6 + [24]) + [16])
	if ( (uint_64)($2 <= *($1)) ){ goto $label$3 }
	*($1) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$3
	*($6 + [152]) = $0
	$2 = (uint_64)*($0) >> (uint_64)(int_64)8
	*($6 + [80]) = $2)
	*($6 + [128]) = $10
	$7 = ($6 + [52])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*(($6 + [56]))) ){ goto $label$6 }
	*($1 + [8]) = $2
	*($1 + [16]) = $10
	*($6 + [152]) = [0]
	*($1) = $0
	*($7) = ($1 + [24])
	$0 = *($6 + [152])
	*($6 + [152]) = [0]
	if ( $0 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $110(($6 + [48]), ($6 + [152]), ($6 + [80]), ($6 + [128]))
	$0 = *($6 + [152])
	*($6 + [152]) = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$10 = *($6 + [48])
	if ( ($10 == 0) ){ goto $label$7 }
	$7 = ($6 + [52])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$10) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	if ( ((int_32)$10 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($6 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $10
	
.LABEL $label$8
	*($7) = $10
	CALL _ZdlPv($0)
	
.LABEL $label$7
	$global$0 = ($6 + [176])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL eosio_assert(((uint_64)$2 <= (uint_64)$3), [8569])
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($1 + [8])
	*($4 + [16]) = $6
	$7 = [0]
	$1 = CALL db_find_i64($5, $6, (int_64)4319875814817529856, (uint_64)*($1) >> (uint_64)(int_64)8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $73(($4 + [8]), $1)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($4 + [8])), [13766])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8615])
	$1 = [1]
	if ( ((int_64)*($7 + [16]) != (int_64)$2) ){ goto $label$2 }
	$1 = ((int_64)*($7 + [24]) != (int_64)$3)
	
.LABEL $label$2
	CALL eosio_assert($1, [8636])
	$5 = *($0)
	CALL eosio_assert($8, [13817])
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($4 + [8])), [13852])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$6()), [13898])
	*($7 + [16]) = $2
	*($7 + [24]) = $3
	$2 = *($7)
	CALL eosio_assert([1], [13949])
	*($4 + [96]) = (($4 + [48]) + [32])
	*($4 + [92]) = ($4 + [48])
	*($4 + [88]) = ($4 + [48])
	*($4 + [104]) = ($4 + [88])
	*($4 + [116]) = ($7 + [8])
	*($4 + [112]) = $7
	*($4 + [120]) = ($7 + [16])
	*($4 + [124]) = ($7 + [24])
	CALL $74(($4 + [112]), ($4 + [104]))
	CALL db_update_i64(*($7 + [36]), $5, ($4 + [48]), [32])
	$7 = (($4 + [8]) + [16])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($7)) ){ goto $label$3 }
	*($7) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$3
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$4 }
	$8 = ($4 + [36])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$7 }
	$7 = *(($4 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$7 = $1
	
.LABEL $label$5
	*($8) = $1
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth(*($0))
	CALL eosio_assert(((uint_64)$2 <= (uint_64)$3), [8569])
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($1 + [8])
	*($4 + [16]) = $6
	$7 = [0]
	$1 = CALL db_find_i64($5, $6, (int_64)-3590606672529195008, (uint_64)*($1) >> (uint_64)(int_64)8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $148(($4 + [8]), $1)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($4 + [8])), [13766])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8615])
	$1 = [1]
	if ( ((int_64)*($7 + [16]) != (int_64)$2) ){ goto $label$2 }
	$1 = ((int_64)*($7 + [24]) != (int_64)$3)
	
.LABEL $label$2
	CALL eosio_assert($1, [8636])
	$5 = *($0)
	CALL eosio_assert($8, [13817])
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)($4 + [8])), [13852])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$6()), [13898])
	*($7 + [16]) = $2
	*($7 + [24]) = $3
	$2 = *($7)
	CALL eosio_assert([1], [13949])
	*($4 + [96]) = (($4 + [48]) + [32])
	*($4 + [92]) = ($4 + [48])
	*($4 + [88]) = ($4 + [48])
	*($4 + [104]) = ($4 + [88])
	*($4 + [116]) = ($7 + [8])
	*($4 + [112]) = $7
	*($4 + [120]) = ($7 + [16])
	*($4 + [124]) = ($7 + [24])
	CALL $149(($4 + [112]), ($4 + [104]))
	CALL db_update_i64(*($7 + [36]), $5, ($4 + [48]), [32])
	$7 = (($4 + [8]) + [16])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( (uint_64)($2) <= *($7)) ){ goto $label$3 }
	*($7) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$3
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$4 }
	$8 = ($4 + [36])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	CALL _ZdlPv($0)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$7 }
	$7 = *(($4 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$7 = $1
	
.LABEL $label$5
	*($8) = $1
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [384])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$3 = CALL $295($7)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $7)
	
.LABEL $label$1
	*($4 + [296]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [276]) = $3
	*($4 + [272]) = $3
	*($4 + [280]) = ($3 + $7)
	*($4 + [368]) = ($4 + [272])
	*($4 + [48]) = ($4 + [288])
	CALL $107(($4 + [48]), ($4 + [368]))
	$2 = *($4 + [280])
	*((($4 + [32]) + [8])) = $2
	*((($4 + [16]) + [8])) = $2
	$8 = *($4 + [272])
	*($4 + [16]) = $8
	*($4 + [32]) = $8
	$2 = CALL $5(($4 + [48]), $0, $1, ($4 + [16]))
	*(($9 = (($4 + [336]) + [8]))) = *($4 + [296])
	*($4 + [336]) = *($4 + [288])
	$0 = *($4 + [304])
	$1 = *($4 + [312])
	$8 = *($4 + [320])
	$10 = *($4 + [328])
	*((($4 + [352]) + [8])) = *($9)
	*($4 + [352]) = *($4 + [336])
	$9 = (($4 + [48]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($9) + $6))
	
.LABEL $label$5
	$11 = *((($4 + [352]) + [8]))
	*((($4 + [368]) + [8])) = $11
	*(($4 + [8])) = $11
	$11 = *($4 + [352])
	*($4) = $11
	*($4 + [368]) = $11
	CALL void $9((int_32 $4), (int_32 $0), (int_64 $1), (int_64 $8), (int_64 $10), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	$3 = [1]
	if ( (*($2 + [52]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $298($3)
	$3 = [1]
	if ( ((*($2 + [52]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($2 + [60])))
	if ( ((*($2 + [40]) & $3) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($2 + [40]) & $3) ){ goto $label$8 }
	
.LABEL $label$9
	$3 = [1]
	if ( (*($2 + [28]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($2 + [48])))
	$3 = [1]
	if ( ((*($2 + [28]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($2 + [36])))
	$global$0 = ($4 + [384])
	return $3
	
.LABEL $label$6
	$global$0 = ($4 + [384])
	return $3
}

void .FUNC $232 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	*(($6 = ($2 + ((int_32)$3 * (int_32)[40])))) = *($1)
	*($6 + [8 align=4]) = (int_64)0
	*(($7 = ($6 + [16]))) = [0]
	$3 = (*(($1 + [12])) - *($1 + [8]))
	if ( ($3 == 0) ){ goto $label$6 }
	$8 = ($6 + [8])
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL _Znwj($3)
	*($8) = $4
	*(($8 = ($6 + [12]))) = $4
	*($7) = ($4 + $3)
	$7 = *(($1 + [8]))
	$3 = (*(($1 + [12])) - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($4, $7, $3)
	*($8) = (*($8) + $3)
	
.LABEL $label$6
	$9 = ($2 + ((int_32)$5 * (int_32)[40]))
	*($6 + [20 align=4]) = *($1 + [20 align=4])
	*(($6 + [36])) = *(($1 + [36]))
	*(($6 + [28])) = *(($1 + [28]))
	$10 = ($6 + [40])
	$1 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$8 }
	$11 = ($1 - $8)
	$2 = [0]
	
.LOOP $label$9:
	*(($3 = (($1 = ($6 + $2)) + [-32]))) = (int_64)0
	*(($4 = ($1 + [-24]))) = [0]
	$5 = ($8 + $2)
	$7 = ($5 + [-32])
	*($3) = *($7)
	$3 = ($5 + [-24])
	*($4) = *($3)
	*(($1 + [-40])) = *(($5 + [-40]))
	*($3) = [0]
	*($7) = (int_64)0
	*(($1 + [-4])) = *(($5 + [-4]))
	*(($1 + [-12])) = *(($5 + [-12]))
	*(($1 + [-20])) = *(($5 + [-20]))
	$2 = ($2 + [-40])
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$9 }
	$6 = ($6 + $2)
	$1 = *(($0 + [4]))
	$3 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($1 + [-40])
	$2 = *(($1 + [-32]))
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [-28])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$1 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$13 }
	CALL _ZdlPv($3)
	
.LABEL $label$13
	return (unreachable)
	
.LABEL $label$5
	CALL $276($8)
	(unreachable)
}

int_32 .FUNC $280 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [35] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $282($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $282($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $282($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $282($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [22800]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $282($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $282($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $282($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $173($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [12992])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [12992])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $198(CALL $197($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($4 + [32])
	$6 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $173($6, $7)
	$6 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [12]) = $7
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($5 + [24]) = ($5 + [8])
	*($5 + [44]) = $1
	*($5 + [32]) = $4
	*($5 + [36]) = ($4 + [8])
	*($5 + [40]) = ($4 + [16])
	CALL $174(($5 + [32]), ($5 + [24]))
	$global$0 = ($5 + [48])
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $260($2, ($1 + [16]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $260(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_64 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	$6 = *($1)
	$8 = ($1 + [112])
	$9 = *($8)
	$7 = *($1 + [108])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$1 }
	
.LOOP $label$2:
	$11 = (*(*($3)) + ((int_32)(*($7) + [-1]) * (int_32)[12]))
	$10 = ($7 + [8])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$3 }
	CALL $133($10, *($11), *($11 + [4]))
	$9 = *($8)
	
.LABEL $label$3
	*(($7 + [20])) = [0]
	*(($7 + [25])) = [1]
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$2 }
	
.LABEL $label$1
	$10 = ($1 + [96])
	CALL $262($10, *($3 + [4]))
	$7 = *($3 + [8])
	$9 = ($1 + [120])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$4 }
	CALL $133($9, *($7), *($7 + [4]))
	
.LABEL $label$4
	*($1 + [132]) = [1]
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [13949])
	*($5 + [24]) = [0]
	*($5 + [8]) = ($5 + [24])
	$3 = ($1 + [8])
	*($5 + [36]) = $3
	*($5 + [32]) = $1
	$8 = ($1 + [16])
	*($5 + [40]) = $8
	$12 = ($1 + [24])
	*($5 + [44]) = $12
	$13 = ($1 + [48])
	*($5 + [48]) = $13
	$14 = ($1 + [64])
	*($5 + [52]) = $14
	*($5 + [56]) = $10
	$15 = ($1 + [108])
	*($5 + [60]) = $15
	*($5 + [64]) = $9
	$16 = ($1 + [132])
	*($5 + [68]) = $16
	$17 = ($1 + [136])
	*($5 + [72]) = $17
	CALL $224(($5 + [32]), ($5 + [8]))
	$11 = *($5 + [24])
	if ( ($11 <= [513]) ){ goto $label$6 }
	$7 = CALL $295($11)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($4 - (($11 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$5
	*($5 + [12]) = $7
	*($5 + [8]) = $7
	*($5 + [16]) = ($7 + $11)
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = $3
	*($5 + [40]) = $8
	*($5 + [44]) = $12
	*($5 + [48]) = $13
	*($5 + [52]) = $14
	*($5 + [56]) = $10
	*($5 + [60]) = $15
	*($5 + [64]) = $9
	*($5 + [68]) = $16
	*($5 + [72]) = $17
	*($5 + [32]) = $1
	CALL $225(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [148]), $2, $7, $11)
	if ( ((uint_32)$11 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $298($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [80])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [80])
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [12690])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	*($3 + [16]) = (int_64)-3612860735888687104
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-3612860735888687104
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $233(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [144]) == (int_32)$0), [14148])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [14193])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [14243])
	$5 = ($3 + [-24])
	$7 = *($4)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = ($5 + [24])
	CALL $231($5, $8)
	$3 = ($5 + [48])
	$5 = $8
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$8 }
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = $5
	
.LABEL $label$6
	$5 = ($3 + [-24])
	
.LOOP $label$9:
	$3 = CALL $79($5)
	$5 = ($5 + [-24])
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [148]))
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [40]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [13766])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3612860735888687104, (int_64)-3612860735888687104)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $105($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [13766])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [13817])
	CALL $182($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $183($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = *(*($0))
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($3 + [4]), $4, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [12992])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [12667])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $295($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	CALL $234(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($3 + [40]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $110(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $298($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [88]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($3 + [96])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($0 + [104]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [112])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($0 + [120]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [128])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($0 + [136]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [144])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $231 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	$2 = *($3 + [120])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($3 + [124])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$4 = *($3 + [108])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($3 + [112])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$6 = ($2 + [-40])
	$7 = *(($2 + [-32]))
	if ( ($7 == 0) ){ goto $label$7 }
	*(($2 + [-28])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$2 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	$2 = *(($3 + [108]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$3
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$8
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

void .FUNC $219 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth($2)
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($0)
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-3590843033098125312, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $151(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($5 + [128]) == (int_32)($3 + [8])), [13766])
	
.LABEL $label$1
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [8671])
	CALL eosio_assert(((int_64)*($5) == (int_64)$1), [8686])
	CALL eosio_assert(((int_32)*(($5 + [116])) != (int_32)*($5 + [112])), [12074])
	CALL eosio_assert(((int_32)*($5 + [124]) ^ (int_32)[1]), [12107])
	CALL eosio_assert(((int_32)*($5 + [125]) ^ (int_32)[1]), [12139])
	$4 = *($0)
	CALL eosio_assert($6, [13817])
	CALL $152(($3 + [8]), $5, $4)
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = *($5 + [112])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($5 + [116])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$7
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$8
	CALL _ZdlPv($5)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$5 }
	$5 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$5 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [88]) = $3
	CALL require_auth($1)
	*(($4 + [80])) = [0]
	*($4 + [56]) = $1
	*($4 + [64]) = (int_64)-1
	$5 = *($0)
	*($4 + [48]) = $5
	*($4 + [72]) = (int_64)0
	$6 = [0]
	$7 = CALL db_lowerbound_i64($5, $1, (int_64)4312312276611760128, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $77(($4 + [48]), $7)
	$3 = *($4 + [88])
	
.LABEL $label$1
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [8671])
	CALL eosio_assert(((int_64)*($6) == (int_64)$2), [8686])
	CALL eosio_assert(((int_32)*($6 + [132]) ^ (int_32)[1]), [8703])
	$7 = ($6 + [112])
	CALL eosio_assert(((uint_64)$3 <= (uint_64)(CASTING uint_64)(uint_32 ((int_32)(*($7) - *($6 + [108])) / (int_32)[40]))), [8730])
	$9 = ($6 + [108])
	$11 = ((CASTING uint_32)(uint_64 $3) + [-1])
	$10 = *($6 + [108])
	if ( ((uint_32)((int_32)(*($7) - $10) / (int_32)[40]) <= (uint_32)$11) ){ goto $label$3 }
	*((($4 + [8]) + [12])) = (int_64)0
	*($4 + [16]) = [0]
	$7 = ($10 + ((int_32)$11 * (int_32)[40]))
	*($4 + [8]) = *($7)
	$12 = ($7 + [12])
	$13 = (*($12) - *($7 + [8]))
	if ( ($13 == 0) ){ goto $label$4 }
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$2 }
	$14 = CALL _Znwj($13)
	*(($4 + [16])) = $14
	*(($4 + [24])) = ($14 + $13)
	*(($13 = ($4 + [20]))) = $14
	$12 = *(($7 + [8]))
	$7 = (*($12) - $12)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($14, $12, $7)
	*($13) = (*($13) + $7)
	
.LABEL $label$4
	$7 = ($10 + ((int_32)$11 * (int_32)[40]))
	*((($4 + [8]) + [36])) = *(($7 + [36]))
	*((($4 + [8]) + [28])) = *(($7 + [28]))
	*($4 + [28 align=4]) = *($7 + [20 align=4])
	CALL eosio_assert(((int_32)*($4 + [33]) ^ (int_32)[1]), [8764])
	$7 = [1]
	$3 = *($4 + [88])
	if ( ((int_64)$3 == (int_64)1) ){ goto $label$5 }
	$10 = ((CASTING uint_32)(uint_64 $3) + [-2])
	$7 = *(($6 + [108]))
	if ( ((uint_32)((int_32)(*(($6 + [112])) - $7) / (int_32)[40]) <= (uint_32)$10) ){ goto $label$3 }
	$7 = *(($7 + ((int_32)$10 * (int_32)[40])) + [25])
	
.LABEL $label$5
	CALL eosio_assert($7, [8783])
	CALL eosio_assert(((int_32)*($4 + [31]) ^ (int_32)[1]), [9007])
	$7 = ($4 + [16])
	$10 = ($4 + [20])
	CALL eosio_assert(((uint_32)(*($10) - *($7)) > (uint_32)[1]), [8844])
	CALL eosio_assert(((int_32)*(($4 + [28])) ^ (int_32)[1]), [9051])
	CALL eosio_assert(((int_32)*($4 + [29]) ^ (int_32)[1]), [9099])
	$3 = *($0)
	*($4) = ($4 + [88])
	CALL eosio_assert($8, [13817])
	CALL $80(($4 + [48]), $6, $3, $4)
	$6 = *($7)
	if ( ($6 == 0) ){ goto $label$6 }
	*($10) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$7 }
	$10 = ($4 + [76])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$9 }
	$6 = ($6 + [-24])
	
.LOOP $label$10:
	$7 = CALL $79($6)
	$6 = ($6 + [-24])
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$10 }
	$6 = *(($4 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $0
	
.LABEL $label$8
	*($10) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$3
	CALL $277($9)
	
.LABEL $label$2
	CALL $276((($4 + [8]) + [8]))
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$6 = ($global$0 - [48])
	$global$0 = $6
	CALL require_auth(*($0))
	CALL eosio_assert(((int_32)(*($4 + [4]) - *($4)) == (int_32)[3]), [12169])
	$7 = [0]
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$8 = *($0)
	*($6 + [8]) = $8
	*($6 + [16]) = $8
	$9 = [0]
	$10 = CALL db_find_i64($8, $8, (int_64)-3590843033098125312, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $151(($6 + [8]), $10)
	CALL eosio_assert(((int_32)*($9 + [128]) == (int_32)($6 + [8])), [13766])
	
.LABEL $label$1
	$11 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($11, [8671])
	CALL eosio_assert(((int_64)*($9) == (int_64)$1), [8686])
	$10 = ($10 & [1])
	$10 = *($9 + [64])
	$13 = ($10 & [1])
	$10 = *($3)
	$12 = uint_32($10 >> [1])
	$14 = ( *($3 + [4]) ? $12 : $13 )
	if ( ((int_32)$14 != (int_32)( *(($9 + [68])) ? uint_32($10 >> [1]) : $10 )) ){ goto $label$2 }
	$10 = ( *(($9 + [72])) ? (($9 + [64]) + [1]) : $10 )
	$15 = ($3 + [1])
	if ( $13 ){ goto $label$5 }
	if ( ($14 == 0) ){ goto $label$4 }
	$3 = ([0] - $12)
	
.LOOP $label$6:
	if ( ((int_32)*($15) != (int_32)*($10)) ){ goto $label$3 }
	$7 = [1]
	$10 = ($10 + [1])
	$15 = ($15 + [1])
	$3 = ($3 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$5
	if ( ($14 == 0) ){ goto $label$4 }
	$7 = (CALL $291(( *($3 + [8]) ? $15 : $13 ), $10, $14) == 0)
	goto $label$2 
	
.LABEL $label$4
	$7 = [1]
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [9626])
	CALL eosio_assert(((int_32)*(($9 + [116])) == (int_32)*($9 + [112])), [12188])
	CALL eosio_assert(((int_64)*($9 + [24]) > (int_64)0), [12215])
	$8 = *($0)
	*($6) = $4
	CALL eosio_assert($11, [13817])
	CALL $155(($6 + [8]), $9, $8, $6)
	$3 = *($6 + [32])
	if ( ($3 == 0) ){ goto $label$7 }
	$7 = ($6 + [36])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$10 = ($10 + [-24])
	$9 = *($10)
	*($10) = [0]
	if ( ($9 == 0) ){ goto $label$11 }
	$15 = *($9 + [112])
	if ( ($15 == 0) ){ goto $label$12 }
	*(($9 + [116])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$12
	if ( ((*($9 + [64]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($9 + [72])))
	
.LABEL $label$13
	CALL _ZdlPv($9)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$10 }
	$9 = *(($6 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$9 = $3
	
.LABEL $label$8
	*($7) = $3
	CALL _ZdlPv($9)
	
.LABEL $label$7
	$global$0 = ($6 + [48])
}

int_32 .FUNC $37 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [352])
	$global$0 = $3
	*(($4 = $3) + [344]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*(($4 + [336])) = [0]
	*($4 + [296]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [280]) = ($2 + $5)
	*($4 + [272]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [288]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [12690])
	CALL memcpy((($4 + [288]) + [8]), ($2 + [8]), [8])
	*($4 + [276]) = ($2 + [16])
	CALL $91(($4 + [272]), (($4 + [288]) + [16]))
	CALL $153(($4 + [272]), ($4 + [316]))
	CALL $143(($4 + [272]), ($4 + [328]))
	$3 = *($4 + [280])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [272])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $5(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [344])
	CALL $154(($4 + [24]), ($4 + [288]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$14 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( (*($3 + [40]) & $2) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($3 + [28]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [48])))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [36])))
	$3 = *($4 + [328])
	if ( ($3 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$3 = *($4 + [328])
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$7
	$2 = *(($4 + [316]))
	if ( ($2 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$7 = ($4 + [332])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$18
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($4 + [328]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $3
	
.LABEL $label$15
	*($7) = $3
	CALL _ZdlPv($2)
	$2 = *(($4 + [316]))
	if ( ($2 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [320])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($4 + [312])))
	
.LABEL $label$19
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13)
{
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_64 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_64 $36
	int_64 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	int_32 $51
	int_64 $52
	int_64 $53
	$14 = ($global$0 - [560])
	$global$0 = $14
	CALL require_auth(*($0))
	*($14 + [536]) = [0]
	*($14 + [528]) = (int_64)0
	$15 = *($9)
	if ( ((int_32)*($9 + [4]) == (int_32)$15) ){ goto $label$1 }
	$16 = (($14 + [112]) + [8])
	$17 = ($9 + [4])
	$18 = [0]
	
.LOOP $label$2:
	$19 = [0]
	*($16) = [0]
	*($14 + [112]) = (int_64)0
	
.LOOP $label$3:
	$15 = ($15 + ((int_32)$18 * (int_32)[12]))
	$20 = *($15)
	$21 = ($20 & [1])
	if ( $21 ){ goto $label$6 }
	if ( ((uint_32)$19 >= (uint_32)uint_32($20 >> [1])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ($19 <= *($15 + [4])) ){ goto $label$4 }
	
.LABEL $label$5
	$19 = *($14 + [532])
	if ( ((int_32)$19 != (int_32)*((($14 + [528]) + [8]))) ){ goto $label$10 }
	CALL $95(($14 + [528]), ($14 + [112]))
	$19 = *($14 + [112])
	if ( $19 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($19) = (int_64)0
	*($19 + [8]) = [0]
	$15 = (*($14 + [116]) - *($14 + [112]))
	if ( ($15 == 0) ){ goto $label$11 }
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$7 }
	$21 = CALL _Znwj($15)
	*($19) = $21
	*(($19 + [8])) = ($21 + $15)
	*(($19 = ($19 + [4]))) = $21
	$20 = *($14 + [112])
	$15 = (*($14 + [116]) - $20)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($21, $20, $15)
	*($19) = (*($19) + $15)
	
.LABEL $label$11
	*($14 + [532]) = (*($14 + [532]) + [12])
	$19 = *($14 + [112])
	if ( ($19 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	*($14 + [116]) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$8
	$15 = *($9)
	$18 = ($18 + [1])
	if ( ($18 <= ((int_32)(*($17) - $15) / (int_32)[12])) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	CALL $276($19)
	
.LABEL $label$4
	if ( $21 ){ goto $label$13 }
	$15 = ($15 + [1])
	goto $label$12 
	
.LABEL $label$13
	$15 = *($15 + [8])
	
.LABEL $label$12
	$15 = *(($15 + $19))
	*($14 + [488]) = $15
	$21 = *($14 + [116])
	if ( ((uint_32)$21 >= (uint_32)*($16)) ){ goto $label$15 }
	*($21) = $15
	*($14 + [116]) = (*($14 + [116]) + [1])
	goto $label$14 
	
.LABEL $label$15
	CALL $96(($14 + [112]), ($14 + [488]))
	
.LABEL $label$14
	$19 = ($19 + [1])
	$15 = *($9)
	goto $label$3 
	
.LABEL $label$1
	$20 = [0]
	*(($14 + [520])) = [0]
	*($14 + [504]) = (int_64)-1
	*($14 + [512]) = (int_64)0
	$22 = *($0)
	*($14 + [488]) = $22
	*($14 + [496]) = $2
	$9 = [0]
	$19 = CALL db_find_i64($22, $2, (int_64)4312312276611760128, $1)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$16 }
	$9 = CALL $77(($14 + [488]), $19)
	CALL eosio_assert(((int_32)*($9 + [144]) == (int_32)($14 + [488])), [13766])
	
.LABEL $label$16
	$23 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($23, [8671])
	CALL eosio_assert(((int_32)*($9 + [132]) ^ (int_32)[1]), [9607])
	$15 = ($19 & [1])
	$19 = *($3)
	$21 = ($19 & [1])
	$19 = *($9 + [48])
	$16 = uint_32($19 >> [1])
	$18 = ( *(($9 + [52])) ? $16 : $21 )
	if ( ((int_32)$18 != (int_32)( *($3 + [4]) ? uint_32($19 >> [1]) : $15 )) ){ goto $label$17 }
	$19 = (($9 + [48]) + [1])
	$15 = ( *($3 + [8]) ? ($3 + [1]) : $15 )
	if ( $21 ){ goto $label$20 }
	if ( ($18 == 0) ){ goto $label$19 }
	$21 = ([0] - $16)
	
.LOOP $label$21:
	if ( ((int_32)*($19) != (int_32)*($15)) ){ goto $label$18 }
	$20 = [1]
	$15 = ($15 + [1])
	$19 = ($19 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$21 }
	goto $label$17 
	
.LABEL $label$20
	if ( ($18 == 0) ){ goto $label$19 }
	$20 = (CALL $291(( *(($9 + [56])) ? $19 : $21 ), $15, $18) == 0)
	goto $label$17 
	
.LABEL $label$19
	$20 = [1]
	goto $label$17 
	
.LABEL $label$18
	$20 = [0]
	
.LABEL $label$17
	CALL eosio_assert($20, [9626])
	$19 = [0]
	if ( ((int_32)*($9 + [64]) != (int_32)*($5)) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [65])) & [255]) != (int_32)(*($5 + [1]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [66])) & [255]) != (int_32)(*($5 + [2]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [67])) & [255]) != (int_32)(*($5 + [3]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [68])) & [255]) != (int_32)(*($5 + [4]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [69])) & [255]) != (int_32)(*($5 + [5]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [70])) & [255]) != (int_32)(*($5 + [6]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [71])) & [255]) != (int_32)(*($5 + [7]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [72])) & [255]) != (int_32)(*($5 + [8]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [73])) & [255]) != (int_32)(*($5 + [9]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [74])) & [255]) != (int_32)(*($5 + [10]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [75])) & [255]) != (int_32)(*($5 + [11]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [76])) & [255]) != (int_32)(*($5 + [12]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [77])) & [255]) != (int_32)(*($5 + [13]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [78])) & [255]) != (int_32)(*($5 + [14]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [79])) & [255]) != (int_32)(*($5 + [15]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [80])) & [255]) != (int_32)(*($5 + [16]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [81])) & [255]) != (int_32)(*($5 + [17]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [82])) & [255]) != (int_32)(*($5 + [18]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [83])) & [255]) != (int_32)(*($5 + [19]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [84])) & [255]) != (int_32)(*($5 + [20]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [85])) & [255]) != (int_32)(*($5 + [21]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [86])) & [255]) != (int_32)(*($5 + [22]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [87])) & [255]) != (int_32)(*($5 + [23]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [88])) & [255]) != (int_32)(*($5 + [24]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [89])) & [255]) != (int_32)(*($5 + [25]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [90])) & [255]) != (int_32)(*($5 + [26]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [91])) & [255]) != (int_32)(*($5 + [27]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [92])) & [255]) != (int_32)(*($5 + [28]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [93])) & [255]) != (int_32)(*($5 + [29]) & [255])) ){ goto $label$22 }
	if ( ((int_32)(*(($9 + [94])) & [255]) != (int_32)(*($5 + [30]) & [255])) ){ goto $label$22 }
	$19 = ((int_32)*(($9 + [95])) == (int_32)*(($5 + [31])))
	
.LABEL $label$22
	CALL eosio_assert($19, [9647])
	$19 = *($4)
	if ( ($19 & [1]) ){ goto $label$24 }
	$19 = uint_32($19 >> [1])
	$15 = ($4 + [1])
	goto $label$23 
	
.LABEL $label$24
	$19 = *($4 + [4])
	$15 = *($4 + [8])
	
.LABEL $label$23
	CALL sha256($15, $19, ($14 + [448]))
	$15 = [0]
	$19 = [0]
	if ( ((int_32)*($14 + [448]) != (int_32)*($5)) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [449]) & [255]) != (int_32)(*(($5 + [1])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [450]) & [255]) != (int_32)(*(($5 + [2])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [451]) & [255]) != (int_32)(*(($5 + [3])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [452]) & [255]) != (int_32)(*(($5 + [4])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [453]) & [255]) != (int_32)(*(($5 + [5])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [454]) & [255]) != (int_32)(*(($5 + [6])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [455]) & [255]) != (int_32)(*(($5 + [7])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [456]) & [255]) != (int_32)(*(($5 + [8])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [457]) & [255]) != (int_32)(*(($5 + [9])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [458]) & [255]) != (int_32)(*(($5 + [10])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [459]) & [255]) != (int_32)(*(($5 + [11])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [460]) & [255]) != (int_32)(*(($5 + [12])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [461]) & [255]) != (int_32)(*(($5 + [13])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [462]) & [255]) != (int_32)(*(($5 + [14])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [463]) & [255]) != (int_32)(*(($5 + [15])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [464]) & [255]) != (int_32)(*(($5 + [16])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [465]) & [255]) != (int_32)(*(($5 + [17])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [466]) & [255]) != (int_32)(*(($5 + [18])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [467]) & [255]) != (int_32)(*(($5 + [19])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [468]) & [255]) != (int_32)(*(($5 + [20])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [469]) & [255]) != (int_32)(*(($5 + [21])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [470]) & [255]) != (int_32)(*(($5 + [22])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [471]) & [255]) != (int_32)(*(($5 + [23])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [472]) & [255]) != (int_32)(*(($5 + [24])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [473]) & [255]) != (int_32)(*(($5 + [25])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [474]) & [255]) != (int_32)(*(($5 + [26])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [475]) & [255]) != (int_32)(*(($5 + [27])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [476]) & [255]) != (int_32)(*(($5 + [28])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [477]) & [255]) != (int_32)(*(($5 + [29])) & [255])) ){ goto $label$25 }
	$19 = [0]
	if ( ((int_32)(*($14 + [478]) & [255]) != (int_32)(*(($5 + [30])) & [255])) ){ goto $label$25 }
	$19 = ((int_32)*($14 + [479]) == (int_32)*(($5 + [31])))
	
.LABEL $label$25
	CALL eosio_assert($19, [9673])
	CALL $97(($14 + [432]), $3, $4)
	$19 = *($14 + [432])
	$21 = ($19 & [1])
	CALL sha256(( *($14 + [440]) ? (($14 + [432]) | [1]) : $21 ), ( *($14 + [436]) ? uint_32($19 >> [1]) : $21 ), ($14 + [400]))
	*(($19 = (($14 + [352]) + [16]))) = *((($14 + [400]) + [16]))
	*(($21 = (($14 + [352]) + [24]))) = *((($14 + [400]) + [24]))
	*($14 + [392]) = [0]
	*($14 + [384]) = (int_64)0
	*($14 + [352]) = *($14 + [400])
	*($14 + [360]) = *($14 + [408])
	*((($14 + [112]) + [24])) = *($21)
	*((($14 + [112]) + [16])) = *($19)
	*($14 + [120]) = *($14 + [360])
	*($14 + [112]) = *($14 + [352])
	$20 = (($14 + [384]) + [8])
	$19 = [0]
	
.LOOP $label$27:
	$21 = *((($14 + [112]) + $19))
	if ( ((uint_32)$21 > (uint_32)[207]) ){ goto $label$30 }
	$21 = ((uint_32)$21 % (uint_32)[52])
	*($14 + [312]) = $21
	if ( ((uint_32)*($20) <= (uint_32)$15) ){ goto $label$29 }
	*($15) = $21
	*($14 + [388]) = (*($14 + [388]) + [1])
	
.LABEL $label$30
	$19 = ($19 + [1])
	if ( ((uint_32)$19 > (uint_32)[31]) ){ goto $label$26 }
	goto $label$28 
	
.LABEL $label$29
	CALL $96(($14 + [384]), ($14 + [312]))
	$19 = ($19 + [1])
	if ( ((uint_32)$19 > (uint_32)[31]) ){ goto $label$26 }
	
.LABEL $label$28
	$15 = *($14 + [388])
	if ( ((int_32)($15 - *($14 + [384])) != (int_32)[32]) ){ goto $label$27 }
	
.LABEL $label$26
	$5 = ($9 + [112])
	if ( ((int_32)(*($5) - *($9 + [108])) != (int_32)[40]) ){ goto $label$34 }
	$18 = *($14 + [528])
	if ( ((int_32)*($14 + [532]) == (int_32)$18) ){ goto $label$33 }
	$21 = *($18)
	if ( ((int_32)*($18 + [4]) == (int_32)$21) ){ goto $label$35 }
	$19 = [0]
	$16 = ($18 + [4])
	
.LOOP $label$36:
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$38 }
	$15 = $19
	if ( ($19 == 0) ){ goto $label$37 }
	$15 = ($19 + [2])
	goto $label$37 
	
.LABEL $label$38
	$15 = [2]
	
.LABEL $label$37
	$15 = ($15 & [255])
	$20 = *($14 + [384])
	if ( ((uint_32)(*($14 + [388]) - $20) <= (uint_32)$15) ){ goto $label$31 }
	CALL eosio_assert(((int_32)*(($20 + $15)) == (int_32)*(($21 + $19))), [9710])
	$21 = *($18)
	$19 = ($19 + [1])
	if ( ($19 <= (*($16) - $21)) ){ goto $label$36 }
	
.LABEL $label$35
	$21 = *($10)
	if ( ((int_32)*($10 + [4]) == (int_32)$21) ){ goto $label$34 }
	$19 = [0]
	$16 = ($10 + [4])
	
.LOOP $label$39:
	$15 = [1]
	if ( ($19 == 0) ){ goto $label$40 }
	if ( ((int_32)$19 != (int_32)[1]) ){ goto $label$41 }
	$15 = [3]
	goto $label$40 
	
.LABEL $label$41
	$15 = ($19 + (*(($18 + [4])) - *($18)))
	
.LABEL $label$40
	$15 = ($15 & [255])
	$20 = *($14 + [384])
	if ( ((uint_32)(*($14 + [388]) - $20) <= (uint_32)$15) ){ goto $label$32 }
	CALL eosio_assert(((int_32)*(($20 + $15)) == (int_32)*(($21 + $19))), [9731])
	$21 = *($10)
	$19 = ($19 + [1])
	if ( ($19 <= (*($16) - $21)) ){ goto $label$39 }
	
.LABEL $label$34
	$24 = ($9 + [108])
	$19 = ((uint_32)((int_32)(*($5) - *($24)) / (int_32)[40]) > (uint_32)[1])
	$25 = *(($0 + ( [104] ? [88] : $19 )))
	$26 = *(($0 + ( [96] ? [80] : $19 )))
	*((($14 + [312]) + [32])) = [0]
	*($14 + [328]) = (int_64)-1
	*($14 + [336]) = (int_64)0
	*($14 + [312]) = *($0 + [176])
	*($14 + [320]) = *($0 + [192])
	$19 = CALL $98(($14 + [312]), (uint_64)*($0 + [184]) >> (uint_64)(int_64)8), [9752])
	$27 = *(($9 + [40]))
	$22 = *($19)
	$28 = *(($9 + [32]))
	$29 = *($0 + [160])
	CALL eosio_assert([1], [12695])
	$1 = (uint_64)$28 >> (uint_64)(int_64)8)
	$30 = ((int_64)1777777777777 / (int_64)$22)
	$19 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$22 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$45 }
	$1 = $22
	$15 = [1]
	$21 = $19
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$1 = $22
	
.LOOP $label$46:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$43 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_32)$19 < (int_32)[6])
	$21 = ($19 + [1])
	$19 = $21
	if ( $15 ){ goto $label$46 }
	$15 = [1]
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	$15 = [0]
	
.LABEL $label$42
	CALL eosio_assert($15, [12744])
	$31 = *(($9 + [32]))
	CALL eosio_assert([1], [12695])
	$1 = (uint_64)$31 >> (uint_64)(int_64)8)
	$19 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$22 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$1 = $22
	$15 = [1]
	$21 = $19
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$1 = $22
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_32)$19 < (int_32)[6])
	$21 = ($19 + [1])
	$19 = $21
	if ( $15 ){ goto $label$51 }
	$15 = [1]
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$15 = [0]
	
.LABEL $label$47
	CALL eosio_assert($15, [12744])
	if ( ((int_32)*($14 + [532]) != (int_32)*($14 + [528])) ){ goto $label$59 }
	$32 = *($6)
	$33 = *($6 + [8])
	$34 = (int_64)0
	$35 = (int_64)0
	$36 = (int_64)0
	goto $label$58 
	
.LABEL $label$59
	$37 = (int_64)((int_64)$30 << (int_64)32) >> (int_64)32)
	$17 = (($14 + [112]) + [8])
	$38 = ($9 + [108])
	$39 = ($9 + [112])
	$3 = ($14 + [132])
	$40 = ($3 + [16])
	$41 = (($14 + [112]) + [24])
	$42 = ($0 + [120])
	$43 = ($14 + [135])
	$44 = ($14 + [134])
	$45 = ($0 + [64])
	$46 = ($0 + [72])
	$36 = (int_64)0
	$20 = [0]
	$35 = (int_64)0
	$34 = (int_64)0
	
.LOOP $label$60:
	$19 = *($38)
	if ( ((uint_32)((int_32)(*($39) - $19) / (int_32)[40]) <= (uint_32)$20) ){ goto $label$65 }
	*($17) = [0]
	*(($16 = (($14 + [112]) + [12]))) = (int_64)0
	$19 = ($19 + ((int_32)$20 * (int_32)[40]))
	*($14 + [112]) = *($19)
	$18 = ($19 + [12])
	$15 = (*($18) - *($19 + [8]))
	if ( ($15 == 0) ){ goto $label$66 }
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$64 }
	$21 = CALL _Znwj($15)
	*($17) = $21
	*((($14 + [112]) + [16])) = ($21 + $15)
	*($16) = $21
	$18 = *(($19 + [8]))
	$15 = (*($18) - $18)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$66 }
	CALL memcpy($21, $18, $15)
	*($16) = (*($16) + $15)
	
.LABEL $label$66
	*($3) = *($19 + [20 align=4])
	*($40) = *(($19 + [36]))
	*(($3 + [8])) = *(($19 + [28]))
	$5 = [0]
	$18 = ((int_32)$20 * (int_32)[12])
	$15 = (*($14 + [528]) + $18)
	if ( ((int_32)(*($15 + [4]) - *($15)) != (int_32)[2]) ){ goto $label$61 }
	$19 = [0]
	*(($5 = (($14 + [296]) + [8]))) = [0]
	*($14 + [296]) = (int_64)0
	$47 = ($15 + [4])
	$21 = (*($47) - *($15))
	if ( ($21 == 0) ){ goto $label$67 }
	if ( ((int_32)$21 <= (int_32)[-1]) ){ goto $label$63 }
	$19 = CALL _Znwj($21)
	*($5) = ($19 + $21)
	*($14 + [296]) = $19
	*($14 + [300]) = $19
	$21 = *($15)
	$15 = (*($47) - $21)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$67 }
	CALL memcpy($19, $21, $15)
	*($14 + [300]) = (*($14 + [300]) + $15)
	$19 = *($14 + [296])
	
.LABEL $label$67
	$15 = ((uint_32)*($19) % (uint_32)[13])
	$21 = ((uint_32)*($19 + [1]) % (uint_32)[13])
	if ( ($21 <= [9]) ){ goto $label$68 }
	if ( $15 ){ goto $label$68 }
	$5 = [1]
	if ( ((uint_32)(($15 + [1]) & [255]) >= (uint_32)[10]) ){ goto $label$68 }
	if ( ($19 == 0) ){ goto $label$61 }
	goto $label$62 
	
.LABEL $label$68
	$5 = (((uint_32)($15 & [255]) > (uint_32)[8]) & (($21 == 0) & ((($21 + [1]) & [255]) <= [10])))
	if ( $19 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$65
	CALL $277($24)
	
.LABEL $label$64
	CALL $276($17)
	
.LABEL $label$63
	CALL $276(($14 + [296]))
	
.LABEL $label$62
	*($14 + [300]) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$61
	if ( (*($41) == 0) ){ goto $label$83 }
	$19 = [0]
	*(($21 = (($14 + [280]) + [8]))) = [0]
	*($14 + [280]) = (int_64)0
	$18 = ($10 + [4])
	$15 = (*($18) - *($10))
	if ( ($15 == 0) ){ goto $label$84 }
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$78 }
	$19 = CALL _Znwj($15)
	*($21) = ($19 + $15)
	*($14 + [280]) = $19
	*($14 + [284]) = $19
	$21 = *($10)
	$15 = (*($18) - $21)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$84 }
	CALL memcpy($19, $21, $15)
	*($14 + [284]) = (*($14 + [284]) + $15)
	$19 = *($14 + [280])
	
.LABEL $label$84
	$21 = ((uint_32)*($19) % (uint_32)[13])
	$18 = ((uint_32)*($19 + [1]) % (uint_32)[13])
	if ( ($18 <= [9]) ){ goto $label$82 }
	if ( $21 ){ goto $label$82 }
	$15 = [1]
	if ( ((uint_32)(($21 + [1]) & [255]) >= (uint_32)[10]) ){ goto $label$82 }
	if ( ($19 == 0) ){ goto $label$70 }
	goto $label$71 
	
.LABEL $label$83
	if ( ($5 == 0) ){ goto $label$81 }
	$19 = [0]
	*(($21 = (($14 + [264]) + [8]))) = [0]
	*($14 + [264]) = (int_64)0
	$18 = ($10 + [4])
	$15 = (*($18) - *($10))
	if ( ($15 == 0) ){ goto $label$85 }
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$77 }
	$19 = CALL _Znwj($15)
	*($21) = ($19 + $15)
	*($14 + [264]) = $19
	*($14 + [268]) = $19
	$21 = *($10)
	$15 = (*($18) - $21)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$85 }
	CALL memcpy($19, $21, $15)
	*($14 + [268]) = (*($14 + [268]) + $15)
	$19 = *($14 + [264])
	
.LABEL $label$85
	$21 = ((uint_32)*($19) % (uint_32)[13])
	$18 = ((uint_32)*($19 + [1]) % (uint_32)[13])
	if ( ($18 <= [9]) ){ goto $label$80 }
	if ( $21 ){ goto $label$80 }
	$15 = [1]
	if ( ((uint_32)(($21 + [1]) & [255]) >= (uint_32)[10]) ){ goto $label$80 }
	if ( ($19 == 0) ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$82
	$15 = (((uint_32)($21 & [255]) > (uint_32)[8]) & (($18 == 0) & ((($18 + [1]) & [255]) <= [10])))
	if ( $19 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$81
	$19 = [0]
	*(($47 = (($14 + [248]) + [8]))) = [0]
	*($14 + [248]) = (int_64)0
	$21 = ($10 + [4])
	$15 = (*($21) - *($10))
	if ( ($15 == 0) ){ goto $label$86 }
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$76 }
	$19 = CALL _Znwj($15)
	*($47) = ($19 + $15)
	*($14 + [248]) = $19
	*($14 + [252]) = $19
	$47 = *($10)
	$15 = (*($21) - $47)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$86 }
	CALL memcpy($19, $47, $15)
	*($14 + [252]) = (*($14 + [252]) + $15)
	$19 = *($14 + [248])
	
.LABEL $label$86
	$15 = ((uint_32)*($19) % (uint_32)[13])
	$48 = ((uint_32)*($19 + [1]) % (uint_32)[13])
	if ( ($48 <= [9]) ){ goto $label$79 }
	if ( $15 ){ goto $label$79 }
	$47 = [1]
	if ( ((uint_32)(($15 + [1]) & [255]) >= (uint_32)[10]) ){ goto $label$79 }
	if ( ($19 == 0) ){ goto $label$74 }
	goto $label$75 
	
.LABEL $label$80
	$15 = (((uint_32)($21 & [255]) > (uint_32)[8]) & (($18 == 0) & ((($18 + [1]) & [255]) <= [10])))
	if ( $19 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$79
	$47 = (((uint_32)($15 & [255]) > (uint_32)[8]) & (($48 == 0) & ((($48 + [1]) & [255]) <= [10])))
	if ( $19 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$78
	CALL $276(($14 + [280]))
	
.LABEL $label$77
	CALL $276(($14 + [264]))
	
.LABEL $label$76
	CALL $276(($14 + [248]))
	
.LABEL $label$75
	*($14 + [252]) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$74
	$22 = (int_64)0
	$1 = (int_64)1
	if ( $47 ){ goto $label$69 }
	*($14 + [232]) = [0]
	*($14 + [236 align=4]) = (int_64)0
	$19 = (*($14 + [528]) + $18)
	$15 = (*($19 + [4]) - *($19))
	if ( ($15 == 0) ){ goto $label$91 }
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$90 }
	$47 = CALL _Znwj($15)
	*((($14 + [232]) + [8])) = ($47 + $15)
	*($14 + [232]) = $47
	*($14 + [236]) = $47
	$15 = *($19)
	$19 = (*(($19 + [4])) - $15)
	if ( ((int_32)$19 < (int_32)[1]) ){ goto $label$91 }
	CALL memcpy($47, $15, $19)
	*($14 + [236]) = (*($14 + [236]) + $19)
	
.LABEL $label$91
	$15 = CALL $99(($14 + [232]))
	$19 = *($14 + [232])
	if ( ($19 == 0) ){ goto $label$92 }
	*($14 + [236]) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$92
	if ( $15 ){ goto $label$69 }
	*(($47 = (($14 + [216]) + [8]))) = [0]
	*($14 + [216]) = (int_64)0
	$19 = (*($21) - *($10))
	if ( ($19 == 0) ){ goto $label$93 }
	if ( ((int_32)$19 <= (int_32)[-1]) ){ goto $label$89 }
	$15 = CALL _Znwj($19)
	*($47) = ($15 + $19)
	*($14 + [216]) = $15
	*($14 + [220]) = $15
	$47 = *($10)
	$19 = (*($21) - $47)
	if ( ((int_32)$19 < (int_32)[1]) ){ goto $label$93 }
	CALL memcpy($15, $47, $19)
	*($14 + [220]) = (*($14 + [220]) + $19)
	
.LABEL $label$93
	$15 = CALL $99(($14 + [216]))
	$19 = *($14 + [216])
	if ( ($19 == 0) ){ goto $label$94 }
	*($14 + [220]) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$94
	if ( ($15 == 0) ){ goto $label$95 }
	$1 = *($42)
	$22 = *(($0 + [112]))
	goto $label$69 
	
.LABEL $label$95
	$15 = [0]
	*($14 + [200]) = [0]
	*($14 + [204 align=4]) = (int_64)0
	$47 = [0]
	$19 = (*($14 + [528]) + $18)
	$18 = (*($19 + [4]) - *($19))
	if ( ($18 == 0) ){ goto $label$96 }
	if ( ((int_32)$18 <= (int_32)[-1]) ){ goto $label$88 }
	$49 = CALL _Znwj($18)
	*((($14 + [200]) + [8])) = ($49 + $18)
	*($14 + [200]) = $49
	*($14 + [204]) = $49
	$47 = [0]
	$18 = *($19)
	$19 = (*(($19 + [4])) - $18)
	if ( ((int_32)$19 < (int_32)[1]) ){ goto $label$97 }
	CALL memcpy($49, $18, $19)
	$19 = (*($14 + [204]) + $19)
	*($14 + [204]) = $19
	$49 = *($14 + [200])
	if ( ((int_32)$49 == (int_32)$19) ){ goto $label$97 }
	$48 = ($19 - $49)
	$47 = [0]
	$19 = $49
	$18 = [0]
	
.LOOP $label$98:
	$50 = ($50 + [1])
	$51 = ($50 <= [10])
	$50 = ((uint_32)*($19) % (uint_32)[13])
	$18 = ($18 | (($50 == 0) & $51))
	$47 = (( $50 ? [10] : $51 ) + $47)
	$19 = ($19 + [1])
	$48 = ($48 + [-1])
	if ( $48 ){ goto $label$98 }
	if ( ((uint_32)$47 >= (uint_32)[12]) ){ goto $label$97 }
	$47 = ( ($47 + [10]) ? $47 : ($18 & [1]) )
	
.LABEL $label$97
	if ( ($49 == 0) ){ goto $label$96 }
	*($14 + [204]) = $49
	CALL _ZdlPv($49)
	
.LABEL $label$96
	*(($18 = (($14 + [184]) + [8]))) = [0]
	*($14 + [184]) = (int_64)0
	$19 = (*($21) - *($10))
	if ( ($19 == 0) ){ goto $label$99 }
	if ( ((int_32)$19 <= (int_32)[-1]) ){ goto $label$87 }
	$51 = CALL _Znwj($19)
	*($18) = ($51 + $19)
	*($14 + [184]) = $51
	*($14 + [188]) = $51
	$15 = [0]
	$21 = *($10)
	$19 = (*($21) - $21)
	if ( ((int_32)$19 < (int_32)[1]) ){ goto $label$100 }
	CALL memcpy($51, $21, $19)
	$19 = (*($14 + [188]) + $19)
	*($14 + [188]) = $19
	$51 = *($14 + [184])
	if ( ((int_32)$51 == (int_32)$19) ){ goto $label$100 }
	$18 = ($19 - $51)
	$15 = [0]
	$19 = $51
	$21 = [0]
	
.LOOP $label$101:
	$48 = ($48 + [1])
	$50 = ($48 <= [10])
	$48 = ((uint_32)*($19) % (uint_32)[13])
	$21 = ($21 | (($48 == 0) & $50))
	$15 = (( $48 ? [10] : $50 ) + $15)
	$19 = ($19 + [1])
	$18 = ($18 + [-1])
	if ( $18 ){ goto $label$101 }
	if ( ((uint_32)$15 >= (uint_32)[12]) ){ goto $label$100 }
	$15 = ( ($15 + [10]) ? $15 : ($21 & [1]) )
	
.LABEL $label$100
	if ( ($51 == 0) ){ goto $label$99 }
	*($14 + [188]) = $51
	CALL _ZdlPv($51)
	
.LABEL $label$99
	if ( ((int_32)$47 < (int_32)$15) ){ goto $label$69 }
	$1 = (int_64)1
	$22 = (int_64)1
	if ( ((int_32)$47 == (int_32)$15) ){ goto $label$69 }
	$1 = *($42)
	$22 = *(($0 + [112]))
	goto $label$69 
	
.LABEL $label$90
	CALL $276(($14 + [232]))
	
.LABEL $label$89
	CALL $276(($14 + [216]))
	
.LABEL $label$88
	CALL $276(($14 + [200]))
	
.LABEL $label$87
	CALL $276(($14 + [184]))
	
.LABEL $label$73
	*($14 + [268]) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$72
	$22 = ( (int_64)1 ? $26 : $15 )
	$1 = ( (int_64)1 ? $25 : $15 )
	goto $label$69 
	
.LABEL $label$71
	*($14 + [284]) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$70
	$1 = ( (int_64)1 ? (int_64)2 : $15 )
	$22 = (CASTING uint_64)(uint_32 ((int_32)$15 ^ (int_32)[1]))
	
.LABEL $label$69
	$52 = (int_64)$32 >> (int_64)63
	$32 = *($6)
	CALL __multi3(($14 + [40]), $32, $52), $22, (int_64)$22 >> (int_64)63))
	$33 = *(($6 + [8]))
	$30 = *((($14 + [40]) + [8]))
	$22 = *($14 + [40])
	CALL eosio_assert(( (uint_64)($22 <= (int_64)4611686018427387904) ? ((int_64)$30 < (int_64)0) : (int_64)($30 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$22 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$30 > (int_64)-1) : ((int_64)$30 == (int_64)-1) ), [12828])
	CALL eosio_assert(((int_64)$1 != (int_64)0), [12764])
	CALL eosio_assert((((int_64)$1 != (int_64)-1) | ((int_64)$22 != (int_64)-9223372036854775808)), [12779])
	$53 = ((int_64)$22 / (int_64)$1)
	if ( (*($43) == 0) ){ goto $label$107 }
	CALL eosio_assert(((int_64)$53 < (int_64)2305843009213693952), [12804])
	CALL eosio_assert(((int_64)$53 > (int_64)-2305843009213693952), [12828])
	CALL eosio_assert(((int_64)$32 < (int_64)2305843009213693952), [12804])
	CALL eosio_assert(((int_64)$32 > (int_64)-2305843009213693952), [12828])
	$22 = ((int_64)$32 << (int_64)1)
	$53 = ((int_64)$53 << (int_64)1)
	$19 = [0]
	if ( *($44) ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$107
	$22 = $32
	$19 = [0]
	if ( (*($44) == 0) ){ goto $label$105 }
	
.LABEL $label$106
	CALL eosio_assert([1], [12764])
	CALL eosio_assert([1], [12779])
	CALL eosio_assert([1], [12853])
	$22 = ((int_64)$22 + (int_64)((int_64)$32 / (int_64)2))
	CALL eosio_assert(((int_64)$22 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$22 < (int_64)4611686018427387904), [12915])
	if ( (*($44) == 0) ){ goto $label$105 }
	*(($18 = (($14 + [168]) + [8]))) = [0]
	*($14 + [168]) = (int_64)0
	$47 = ($10 + [4])
	$21 = (*($47) - *($10))
	if ( ((int_32)$21 <= (int_32)[-1]) ){ goto $label$56 }
	$15 = CALL _Znwj($21)
	*($18) = ($15 + $21)
	*($14 + [168]) = $15
	*($14 + [172]) = $15
	$18 = *($10)
	$21 = (*($47) - $18)
	if ( ((int_32)$21 < (int_32)[1]) ){ goto $label$108 }
	CALL memcpy($15, $18, $21)
	*($14 + [172]) = (*($14 + [172]) + $21)
	$15 = *($14 + [168])
	
.LABEL $label$108
	$21 = ((uint_32)*($15) % (uint_32)[13])
	$15 = ((uint_32)*($15 + [1]) % (uint_32)[13])
	if ( ($15 <= [9]) ){ goto $label$110 }
	if ( $21 ){ goto $label$110 }
	if ( ((($21 + [1]) & [255]) <= [10]) ){ goto $label$109 }
	
.LABEL $label$110
	$47 = [1]
	if ( (($21 & [255]) <= [9]) ){ goto $label$104 }
	if ( $15 ){ goto $label$104 }
	if ( ((uint_32)(($15 + [1]) & [255]) >= (uint_32)[10]) ){ goto $label$104 }
	
.LABEL $label$109
	$1 = *($45)
	CALL __multi3(($14 + [24]), $1, (int_64)$1 >> (int_64)63), $32, $52)
	$1 = *((($14 + [24]) + [8]))
	$30 = *($14 + [24])
	CALL eosio_assert(( (uint_64)($30 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$30 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [12828])
	CALL eosio_assert([1], [12764])
	CALL eosio_assert([1], [12779])
	$1 = *($46)
	CALL eosio_assert(((int_64)$1 != (int_64)0), [12764])
	CALL eosio_assert([1], [12779])
	$1 = ((int_64)((int_64)$30 / (int_64)2) / (int_64)$1)
	$19 = *($14 + [168])
	if ( $19 ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$105
	$47 = [0]
	
.LABEL $label$104
	CALL eosio_assert([1], [12695])
	$1 = (uint_64)$33 >> (uint_64)(int_64)8)
	
.LOOP $label$112:
	$18 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$111 }
	$30 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$113 }
	$1 = $30
	$18 = [1]
	$15 = $19
	$19 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$113
	$1 = $30
	
.LOOP $label$114:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$111 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_32)$19 < (int_32)[6])
	$21 = ($19 + [1])
	$19 = $21
	if ( $15 ){ goto $label$114 }
	$18 = [1]
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$112 }
	
.LABEL $label$111
	CALL eosio_assert($18, [12744])
	$1 = (int_64)0
	if ( ($47 == 0) ){ goto $label$102 }
	$19 = *($14 + [168])
	if ( ($19 == 0) ){ goto $label$102 }
	
.LABEL $label$103
	*($14 + [172]) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$102
	CALL eosio_assert([1], [12853])
	$1 = ((int_64)$1 + (int_64)$53)
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [12915])
	$19 = *($7)
	if ( ((uint_32)int_32((*(($7 + [4])) - $19) >> [4]) <= (uint_32)$20) ){ goto $label$57 }
	$15 = ($20 << [4])
	$19 = ($19 + $15)
	CALL eosio_assert(((int_64)*($19 + [8]) == (int_64)$33), [12933])
	CALL eosio_assert(((int_64)*($19) == (int_64)$22), [9776])
	CALL eosio_assert(((int_64)$1 == (int_64)*((*($8) + $15))), [9801])
	CALL eosio_assert(((int_64)$33 == (int_64)$28), [12853])
	$35 = ((int_64)$1 + (int_64)$35)
	CALL eosio_assert(((int_64)$35 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$35 < (int_64)4611686018427387904), [12915])
	CALL eosio_assert(((int_64)$33 == (int_64)$31), [12853])
	$34 = ((int_64)$22 + (int_64)$34)
	CALL eosio_assert(((int_64)$34 > (int_64)-4611686018427387904), [12896])
	CALL eosio_assert(((int_64)$34 < (int_64)4611686018427387904), [12915])
	$19 = [0]
	if ( ($5 == 0) ){ goto $label$115 }
	$19 = ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) > (uint_32)[1540943999])
	
.LABEL $label$115
	$1 = ((int_64)((int_64)$22 / (int_64)$37) << (int_64)(CASTING uint_64)(uint_32 $19))
	$19 = *($17)
	if ( ($19 == 0) ){ goto $label$116 }
	*($16) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$116
	$36 = ((int_64)$1 + (int_64)$36)
	$20 = ($20 + [1])
	if ( ($20 <= ((int_32)(*($14 + [532]) - *($14 + [528])) / (int_32)[12])) ){ goto $label$60 }
	
.LABEL $label$58
	CALL eosio_assert(((int_64)*(($9 + [32])) == (int_64)$33), [12933])
	CALL eosio_assert(((int_64)*($9 + [24]) == (int_64)$32), [9824])
	if ( ((int_64)$35 <= (int_64)0) ){ goto $label$117 }
	*(($14 + [136])) = $28
	*(($14 + [152])) = [0]
	*($14 + [120]) = $2
	*($14 + [128]) = $35
	*($14 + [144]) = (int_64)0
	*($14 + [112]) = *($0)
	$15 = (($14 + [112]) + [32])
	$19 = CALL $292([9844])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$55 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$120 }
	*(($14 + [144])) = ($19 << [1])
	$15 = ($15 + [1])
	if ( $19 ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$120
	$21 = (($19 + [16]) & [-16])
	$15 = CALL _Znwj($21)
	*(($14 + [152])) = $15
	*(($14 + [148])) = $19
	*($14 + [144]) = ($21 | [1])
	
.LABEL $label$119
	CALL memcpy($15, [9844], $19)
	
.LABEL $label$118
	*(($15 + $19)) = [0]
	*($14 + [64]) = (int_64)3617214756542218240
	*($14 + [56]) = *($0)
	$19 = CALL $100(($14 + [72]), ($14 + [56]), *(($9 + [40])), (int_64)-3617168760277827584, ($14 + [112]))
	CALL $101(($14 + [544]), $19)
	$15 = *($14 + [544])
	CALL send_inline($15, (*($14 + [548]) - $15))
	$15 = *($14 + [544])
	if ( ($15 == 0) ){ goto $label$121 }
	*($14 + [548]) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$121
	$15 = *($19 + [28])
	if ( ($15 == 0) ){ goto $label$122 }
	*(($19 + [32])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$122
	$15 = *($19 + [16])
	if ( ($15 == 0) ){ goto $label$123 }
	*(($19 + [20])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$123
	if ( ((*(($14 + [144])) & [1]) == 0) ){ goto $label$117 }
	CALL _ZdlPv(*(($14 + [152])))
	
.LABEL $label$117
	$20 = ((int_64)$27 != (int_64)$29)
	if ( $20 ){ goto $label$124 }
	*(($19 = (($14 + [112]) + [24]))) = *(($0 + [184]))
	*($14 + [120]) = $2
	*($14 + [112]) = *(($0 + [192]))
	*($14 + [128]) = $36
	CALL eosio_assert((uint_64)(((int_64)$36 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$1 = (uint_64)*($19) >> (uint_64)(int_64)8)
	$19 = [0]
	
.LOOP $label$127:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$126 }
	$22 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$128 }
	$1 = $22
	$15 = [1]
	$21 = $19
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$127 }
	goto $label$125 
	
.LABEL $label$128
	$1 = $22
	
.LOOP $label$129:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$126 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_32)$19 < (int_32)[6])
	$21 = ($19 + [1])
	$19 = $21
	if ( $15 ){ goto $label$129 }
	$15 = [1]
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$127 }
	goto $label$125 
	
.LABEL $label$126
	$15 = [0]
	
.LABEL $label$125
	CALL eosio_assert($15, [12744])
	*(($14 + [152])) = [0]
	*($14 + [144]) = (int_64)0
	$15 = ($14 + [144])
	$19 = CALL $292([9844])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$54 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$132 }
	*(($14 + [144])) = ($19 << [1])
	$15 = ($15 + [1])
	if ( $19 ){ goto $label$131 }
	goto $label$130 
	
.LABEL $label$132
	$21 = (($19 + [16]) & [-16])
	$15 = CALL _Znwj($21)
	*(($14 + [152])) = $15
	*(($14 + [148])) = $19
	*($14 + [144]) = ($21 | [1])
	
.LABEL $label$131
	CALL memcpy($15, [9844], $19)
	
.LABEL $label$130
	*(($15 + $19)) = [0]
	*($14 + [64]) = (int_64)3617214756542218240
	*($14 + [56]) = *(($0 + [192]))
	$19 = CALL $100(($14 + [72]), ($14 + [56]), *(($0 + [176])), (int_64)-3617168760277827584, ($14 + [112]))
	CALL $101(($14 + [544]), $19)
	$15 = *($14 + [544])
	CALL send_inline($15, (*($14 + [548]) - $15))
	$15 = *($14 + [544])
	if ( ($15 == 0) ){ goto $label$133 }
	*($14 + [548]) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$133
	$15 = *($19 + [28])
	if ( ($15 == 0) ){ goto $label$134 }
	*(($19 + [32])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$134
	$15 = *($19 + [16])
	if ( ($15 == 0) ){ goto $label$135 }
	*(($19 + [20])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$135
	if ( ((*(($14 + [144])) & [1]) == 0) ){ goto $label$124 }
	CALL _ZdlPv(*(($14 + [152])))
	
.LABEL $label$124
	if ( (int_64)(*($9 + [16]) == 0) ){ goto $label$136 }
	$19 = ((int_64)$28 == (int_64)$31)
	CALL eosio_assert($19, [12933])
	if ( ((int_64)$35 <= (int_64)$34) ){ goto $label$137 }
	CALL eosio_assert($19, [12998])
	$1 = (int_64)
	CALL eosio_assert(((int_64)$1($35 - $34)) > (int_64)-4611686018427387904), [13046])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [13068])
	$22 = *($0 + [144])
	CALL __multi3(($14 + [8]), $22, (int_64)$22 >> (int_64)63), $1, (int_64)$1 >> (int_64)63))
	$22 = *(($14 + [16]))
	$1 = *($14 + [8])
	CALL eosio_assert(( (uint_64)($1 <= (int_64)4611686018427387904) ? ((int_64)$22 < (int_64)0) : (int_64)($22 == 0) ), [12804])
	CALL eosio_assert(( ((uint_64)$1 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$22 > (int_64)-1) : ((int_64)$22 == (int_64)-1) ), [12828])
	$22 = *($0 + [152])
	CALL eosio_assert(((int_64)$22 != (int_64)0), [12764])
	CALL eosio_assert((((int_64)$22 != (int_64)-1) | ((int_64)$1 != (int_64)-9223372036854775808)), [12779])
	$1 = ((int_64)$1 / (int_64)$22)
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$137 }
	*($14 + [112]) = *($0)
	$22 = *(($9 + [16]))
	*(($14 + [136])) = $28
	*(($14 + [152])) = [0]
	*($14 + [128]) = $1
	*($14 + [120]) = $22
	*($14 + [144]) = (int_64)0
	$15 = ($14 + [144])
	$19 = CALL $292([9949])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$52 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$140 }
	*(($14 + [144])) = ($19 << [1])
	$15 = ($15 + [1])
	if ( $19 ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$140
	$21 = (($19 + [16]) & [-16])
	$15 = CALL _Znwj($21)
	*(($14 + [152])) = $15
	*(($14 + [148])) = $19
	*($14 + [144]) = ($21 | [1])
	
.LABEL $label$139
	CALL memcpy($15, [9949], $19)
	
.LABEL $label$138
	*(($15 + $19)) = [0]
	*($14 + [64]) = (int_64)3617214756542218240
	*($14 + [56]) = *($0)
	$19 = CALL $100(($14 + [72]), ($14 + [56]), *(($9 + [40])), (int_64)-3617168760277827584, ($14 + [112]))
	CALL $101(($14 + [544]), $19)
	$15 = *($14 + [544])
	CALL send_inline($15, (*($14 + [548]) - $15))
	$15 = *($14 + [544])
	if ( ($15 == 0) ){ goto $label$141 }
	*($14 + [548]) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$141
	$15 = *($19 + [28])
	if ( ($15 == 0) ){ goto $label$142 }
	*(($19 + [32])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$142
	$15 = *($19 + [16])
	if ( ($15 == 0) ){ goto $label$143 }
	*(($19 + [20])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$143
	if ( ((*(($14 + [144])) & [1]) == 0) ){ goto $label$137 }
	CALL _ZdlPv(*(($14 + [152])))
	
.LABEL $label$137
	if ( $20 ){ goto $label$136 }
	*($14 + [112]) = *(($0 + [192]))
	$1 = *(($9 + [16]))
	*(($19 = (($14 + [112]) + [24]))) = *(($0 + [184]))
	*($14 + [120]) = $1
	$1 = ((int_64)$36 / (int_64)2)
	*($14 + [128]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$1 = (uint_64)*($19) >> (uint_64)(int_64)8)
	$19 = [0]
	
.LOOP $label$146:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$145 }
	$22 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$147 }
	$1 = $22
	$15 = [1]
	$21 = $19
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$146 }
	goto $label$144 
	
.LABEL $label$147
	$1 = $22
	
.LOOP $label$148:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$145 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$15 = ((int_32)$19 < (int_32)[6])
	$21 = ($19 + [1])
	$19 = $21
	if ( $15 ){ goto $label$148 }
	$15 = [1]
	$19 = ($21 + [1])
	if ( ((int_32)$21 < (int_32)[6]) ){ goto $label$146 }
	goto $label$144 
	
.LABEL $label$145
	$15 = [0]
	
.LABEL $label$144
	CALL eosio_assert($15, [12744])
	*(($14 + [152])) = [0]
	*($14 + [144]) = (int_64)0
	$15 = ($14 + [144])
	$19 = CALL $292([9949])
	if ( ((uint_32)$19 >= (uint_32)[-16]) ){ goto $label$53 }
	if ( ((uint_32)$19 >= (uint_32)[11]) ){ goto $label$151 }
	*(($14 + [144])) = ($19 << [1])
	$15 = ($15 + [1])
	if ( $19 ){ goto $label$150 }
	goto $label$149 
	
.LABEL $label$151
	$21 = (($19 + [16]) & [-16])
	$15 = CALL _Znwj($21)
	*(($14 + [152])) = $15
	*(($14 + [148])) = $19
	*($14 + [144]) = ($21 | [1])
	
.LABEL $label$150
	CALL memcpy($15, [9949], $19)
	
.LABEL $label$149
	*(($15 + $19)) = [0]
	*($14 + [64]) = (int_64)3617214756542218240
	*($14 + [56]) = *(($0 + [192]))
	$19 = CALL $100(($14 + [72]), ($14 + [56]), *(($0 + [176])), (int_64)-3617168760277827584, ($14 + [112]))
	CALL $101(($14 + [544]), $19)
	$15 = *($14 + [544])
	CALL send_inline($15, (*($14 + [548]) - $15))
	$15 = *($14 + [544])
	if ( ($15 == 0) ){ goto $label$152 }
	*($14 + [548]) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$152
	$15 = *($19 + [28])
	if ( ($15 == 0) ){ goto $label$153 }
	*(($19 + [32])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$153
	$15 = *($19 + [16])
	if ( ($15 == 0) ){ goto $label$154 }
	*(($19 + [20])) = $15
	CALL _ZdlPv($15)
	
.LABEL $label$154
	if ( ((*(($14 + [144])) & [1]) == 0) ){ goto $label$136 }
	CALL _ZdlPv(*(($14 + [152])))
	
.LABEL $label$136
	$1 = *($0)
	*($14 + [116]) = $4
	*($14 + [120]) = $10
	*($14 + [112]) = ($14 + [528])
	CALL eosio_assert($23, [13817])
	CALL $102(($14 + [488]), $9, $1, ($14 + [112]))
	CALL require_recipient(*($0 + [208]))
	$21 = *($14 + [336])
	if ( ($21 == 0) ){ goto $label$155 }
	$20 = ($14 + [340])
	$19 = *($20)
	if ( ((int_32)$19 == (int_32)$21) ){ goto $label$157 }
	
.LOOP $label$158:
	$19 = ($19 + [-24])
	$15 = *($19)
	*($19) = [0]
	if ( ($15 == 0) ){ goto $label$159 }
	CALL _ZdlPv($15)
	
.LABEL $label$159
	if ( ((int_32)$21 != (int_32)$19) ){ goto $label$158 }
	$19 = *(($14 + [336]))
	goto $label$156 
	
.LABEL $label$157
	$19 = $21
	
.LABEL $label$156
	*($20) = $21
	CALL _ZdlPv($19)
	
.LABEL $label$155
	$19 = *($14 + [384])
	if ( ($19 == 0) ){ goto $label$160 }
	*($14 + [388]) = $19
	CALL _ZdlPv($19)
	
.LABEL $label$160
	if ( ((*($14 + [432]) & [1]) == 0) ){ goto $label$161 }
	CALL _ZdlPv(*(($14 + [440])))
	
.LABEL $label$161
	$21 = *($14 + [512])
	if ( ($21 == 0) ){ goto $label$162 }
	$20 = ($14 + [516])
	$19 = *($20)
	if ( ((int_32)$19 == (int_32)$21) ){ goto $label$164 }
	$19 = ($19 + [-24])
	
.LOOP $label$165:
	$15 = CALL $79($19)
	$19 = ($19 + [-24])
	if ( ((int_32)$15 != (int_32)$21) ){ goto $label$165 }
	$19 = *(($14 + [512]))
	goto $label$163 
	
.LABEL $label$164
	$19 = $21
	
.LABEL $label$163
	*($20) = $21
	CALL _ZdlPv($19)
	
.LABEL $label$162
	$20 = *($14 + [528])
	if ( ($20 == 0) ){ goto $label$166 }
	$15 = *($14 + [532])
	if ( ((int_32)$15 == (int_32)$20) ){ goto $label$168 }
	
.LOOP $label$169:
	$19 = ($15 + [-12])
	$21 = *($19)
	if ( ($21 == 0) ){ goto $label$170 }
	*(($15 + [-8])) = $21
	CALL _ZdlPv($21)
	
.LABEL $label$170
	$15 = $19
	if ( ((int_32)$20 != (int_32)$19) ){ goto $label$169 }
	$19 = *($14 + [528])
	goto $label$167 
	
.LABEL $label$168
	$19 = $20
	
.LABEL $label$167
	*($14 + [532]) = $20
	CALL _ZdlPv($19)
	
.LABEL $label$166
	$global$0 = ($14 + [560])
	return (unreachable)
	
.LABEL $label$57
	CALL $277($7)
	
.LABEL $label$56
	CALL $276(($14 + [168]))
	
.LABEL $label$55
	CALL $259($15)
	
.LABEL $label$54
	CALL $259($15)
	
.LABEL $label$53
	CALL $259($15)
	
.LABEL $label$52
	CALL $259($15)
	
.LABEL $label$33
	CALL $277(($14 + [528]))
	
.LABEL $label$32
	CALL $277(($14 + [384]))
	
.LABEL $label$31
	CALL $277(($14 + [384]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [496])
	$global$0 = $3
	*(($4 = $3) + [488]) = *($2)
	$5 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$5 = CALL $295($2)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$2
	CALL read_action_data($5, $2)
	
.LABEL $label$1
	*(($4 + [312])) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*(($4 + [360])) = (int_64)0
	*(($4 + [352])) = (int_64)0
	*(($4 + [344])) = (int_64)0
	*(($4 + [376])) = (int_64)0
	*(($4 + [392])) = (int_64)0
	*(($4 + [400])) = (int_64)0
	*(($4 + [416])) = (int_64)0
	*(($4 + [424])) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [408]) = (int_64)0
	*(($4 + [440])) = (int_64)0
	*(($4 + [448])) = (int_64)0
	*(($4 + [464])) = [0]
	*($4 + [432]) = (int_64)0
	*($4 + [456]) = (int_64)0
	*($4 + [276]) = $5
	*($4 + [272]) = $5
	*($4 + [280]) = ($5 + $2)
	*($4 + [24]) = ($4 + [272])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [288]), *($4 + [276]), [8])
	$3 = (*($4 + [276]) + [8])
	*($4 + [276]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [280]) - $3) > (uint_32)[7]), [12690])
	CALL memcpy((($4 + [288]) | [8]), *($4 + [276]), [8])
	*($4 + [276]) = (*($4 + [276]) + [8])
	CALL $91(($4 + [272]), ($4 + [304]))
	CALL $91(($4 + [272]), ($4 + [316]))
	*($4 + [48]) = ($4 + [288])
	CALL $92(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [280])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [272])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	$3 = CALL $5(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [24]) = $3
	*($4 + [28]) = ($4 + [488])
	CALL $93(($4 + [24]), ($4 + [288]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$10 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $298($5)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( (*($3 + [40]) & $2) ){ goto $label$6 }
	
.LABEL $label$7
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [36])))
	
.LABEL $label$4
	CALL $94(($4 + [288]))
	$global$0 = ($4 + [496])
	return $2
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [224])
	$global$0 = $4
	*($4 + [176]) = $1
	CALL require_auth(*($0))
	$5 = [0]
	*((($4 + [136]) + [32])) = [0]
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	$1 = *($0)
	*($4 + [136]) = $1
	*($4 + [144]) = $1
	$6 = [0]
	$7 = CALL db_find_i64($1, $1, (int_64)4982871467403247616, (int_64)4982871467403247616)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $62(($4 + [136]), $7) + [4]) == (int_32)($4 + [136])), [13766])
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [11003])
	CALL eosio_assert((CALL $64(($4 + [136])) & [1]), [11042])
	*((($4 + [96]) + [32])) = [0]
	*($4 + [112]) = (int_64)-1
	*($4 + [120]) = (int_64)0
	$1 = *($0)
	*($4 + [96]) = $1
	*($4 + [104]) = $1
	$6 = CALL db_find_i64($1, $1, (int_64)-3612860735888687104, (int_64)-3612860735888687104)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $105(($4 + [96]), $6) + [8]) == (int_32)($4 + [96])), [13766])
	$5 = [1]
	
.LABEL $label$2
	CALL eosio_assert($5, [11057])
	$1 = CALL $111(($4 + [96]))
	*($4 + [88]) = $1
	CALL eosio_assert(((int_64)*($4 + [176]) == (int_64)((int_64)$1 + (int_64)1)), [8686])
	*(($7 = ($4 + [80]))) = [0]
	*($4 + [64]) = (int_64)-1
	$1 = *($0)
	*($4 + [48]) = $1
	*($4 + [56]) = $1
	*($4 + [72]) = (int_64)0
	$5 = CALL db_lowerbound_i64($1, $1, (int_64)-3612798081281556480, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $112(($4 + [48]), $5)
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)[4]), [11089])
	CALL eosio_assert([1], [14084])
	CALL eosio_assert([1], [14118])
	$6 = CALL db_next_i64(*($5 + [60]), ($4 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	CALL $112(($4 + [48]), $6)
	
.LABEL $label$4
	CALL $113(($4 + [48]), $5)
	
.LABEL $label$3
	*($4 + [40]) = ((int_64)CALL current_time() + (int_64)((int_64)$2 * (int_64)1000000))
	$1 = ((int_64)CALL current_time() + (int_64)((int_64)((int_64)$3 + (int_64)$2) * (int_64)1000000))
	*($4 + [32]) = $1
	*($4 + [24]) = ((int_64)$1 + (int_64)-5000000)
	$1 = *($0)
	*($4 + [12]) = ($4 + [40])
	*($4 + [8]) = ($4 + [176])
	*($4 + [16]) = ($4 + [24])
	*($4 + [20]) = ($4 + [32])
	*($4 + [216]) = $1
	CALL eosio_assert(((int_64)*($4 + [48]) == (int_64)CALL $fimport$6()), [14008])
	*($4 + [196]) = ($4 + [8])
	*($4 + [192]) = ($4 + [48])
	*($4 + [200]) = ($4 + [216])
	*(($5 = CALL _Znwj([72])) + [48]) = [0]
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [56]) = ($4 + [48])
	CALL $114(($4 + [192]), $5)
	*($4 + [208]) = $5
	$1 = *($5)
	*($4 + [192]) = $1
	$8 = *($5 + [60])
	*($4 + [188]) = $8
	$9 = ($4 + [76])
	$6 = *($9)
	if ( ((uint_32)$6 >= (uint_32)*($7)) ){ goto $label$7 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($4 + [208]) = [0]
	*($6) = $5
	*($9) = ($6 + [24])
	$5 = *($4 + [208])
	*($4 + [208]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	CALL $115(($4 + [72]), ($4 + [208]), ($4 + [192]), ($4 + [188]))
	$5 = *($4 + [208])
	*($4 + [208]) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = *($5 + [40])
	if ( ($6 == 0) ){ goto $label$8 }
	*(($5 + [44])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$8
	CALL _ZdlPv($5)
	
.LABEL $label$5
	*($4 + [88]) = ((int_64)*($4 + [88]) + (int_64)1)
	CALL $106(($4 + [96]), ($4 + [88]), *($0))
	$7 = *($4 + [72])
	if ( ($7 == 0) ){ goto $label$9 }
	$8 = ($4 + [76])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$13 }
	$6 = *($0 + [40])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($0 + [44])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$14
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$12 }
	$5 = *(($4 + [72]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $7
	
.LABEL $label$10
	*($8) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$6 = *($4 + [120])
	if ( ($6 == 0) ){ goto $label$15 }
	$7 = ($4 + [124])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$19 }
	CALL _ZdlPv($0)
	
.LABEL $label$19
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$18 }
	$5 = *(($4 + [120]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $6
	
.LABEL $label$16
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$6 = *($4 + [160])
	if ( ($6 == 0) ){ goto $label$20 }
	$7 = ($4 + [164])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$22 }
	
.LOOP $label$23:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$24 }
	CALL _ZdlPv($0)
	
.LABEL $label$24
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$23 }
	$5 = *(($4 + [160]))
	goto $label$21 
	
.LABEL $label$22
	$5 = $6
	
.LABEL $label$21
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$20
	$global$0 = ($4 + [224])
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [272]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [264]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [12690])
	CALL memcpy((($4 + [264]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [12690])
	CALL memcpy((($4 + [264]) + [16]), ($2 + [16]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [24])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	$3 = CALL $5(($4 + [40]), $0, $1, ($4 + [8]))
	$8 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [280])
	$1 = *($4 + [272])
	$9 = *($4 + [264])
	if ( ($5 & [1]) ){ goto $label$13 }
	CALL void $8((int_32 $9), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL void $8((int_32 $9), (int_64 $1), (int_64 $0), (int_64 *((*($8) + $6))))
	if ( ($7 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [40]) & $2) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [288])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [36])))
	$global$0 = ($4 + [288])
	return $2
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$8 = ($global$0 - [48])
	$global$0 = $8
	CALL require_auth(*($0))
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$9 = *($0)
	*($8 + [8]) = $9
	*($8 + [16]) = $2
	$10 = [0]
	$11 = CALL db_find_i64($9, $2, (int_64)4312312276611760128, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $77(($8 + [8]), $11)
	CALL eosio_assert(((int_32)*($10 + [144]) == (int_32)($8 + [8])), [13766])
	
.LABEL $label$1
	$12 = ((int_32)$10 != (int_32)[0])
	CALL eosio_assert($12, [8671])
	$11 = ($10 + [112])
	CALL eosio_assert(((int_32)(*($11) - *($10 + [108])) == (int_32)[40]), [9365])
	$11 = *($10 + [108])
	if ( ((int_32)*($11) == (int_32)$11) ){ goto $label$2 }
	$13 = [0]
	if ( ((int_32)*(($11 + [12])) != (int_32)*($11 + [8])) ){ goto $label$3 }
	$13 = ((int_32)*(($10 + [124])) == (int_32)*($10 + [120]))
	
.LABEL $label$3
	CALL eosio_assert($13, [9395])
	$2 = *($0)
	*($8) = $3
	CALL eosio_assert($12, [13817])
	CALL $84(($8 + [8]), $10, $2, $8)
	$11 = *($8 + [32])
	if ( ($11 == 0) ){ goto $label$4 }
	$13 = ($8 + [36])
	$10 = *($13)
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$6 }
	$10 = ($10 + [-24])
	
.LOOP $label$7:
	$0 = CALL $79($10)
	$10 = ($10 + [-24])
	if ( ((int_32)$0 != (int_32)$11) ){ goto $label$7 }
	$10 = *(($8 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$10 = $11
	
.LABEL $label$5
	*($13) = $11
	CALL _ZdlPv($10)
	
.LABEL $label$4
	$global$0 = ($8 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $277(($10 + [108]))
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [368])
	$global$0 = $3
	*(($4 = $3) + [360]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $295($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [304])) = (int_64)0
	*(($4 + [312])) = (int_64)0
	*(($4 + [328])) = (int_64)0
	*(($4 + [336])) = (int_64)0
	*(($4 + [352])) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [268]) = $2
	*($4 + [264]) = $2
	*($4 + [272]) = ($2 + $5)
	*($4 + [16]) = ($4 + [264])
	*($4 + [40]) = ($4 + [280])
	CALL $82(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [272])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [264])
	*($4) = $6
	*($4 + [24]) = $6
	$3 = CALL $5(($4 + [40]), $0, $1, $4)
	*($4 + [16]) = $3
	*($4 + [20]) = ($4 + [360])
	CALL $83(($4 + [16]), ($4 + [280]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$20 }
	$2 = [1]
	if ( (*($3 + [52]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL $298($2)
	$2 = [1]
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*(($3 + [60])))
	if ( ((*($3 + [40]) & $2) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	if ( (*($3 + [40]) & $2) ){ goto $label$16 }
	
.LABEL $label$17
	$2 = [1]
	if ( (*($3 + [28]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($3 + [48])))
	$2 = [1]
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [36])))
	if ( ((*($4 + [344]) & $2) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( (*($4 + [344]) & $2) ){ goto $label$12 }
	
.LABEL $label$13
	$2 = [1]
	if ( (*($4 + [332]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [352])))
	$2 = [1]
	if ( ((*($4 + [332]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [340])))
	if ( ((*($4 + [320]) & $2) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($4 + [320]) & $2) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($4 + [308]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [328])))
	if ( ((*($4 + [308]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [316])))
	$2 = *(($4 + [296]))
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = *(($4 + [296]))
	if ( ($2 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [300])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $215 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($3 + [72]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($3 + [80])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [96])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [112])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [120]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [128])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy(($4 + [136]), *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [144])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $214 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [48])
	$global$0 = $6
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*($0) + int_32($7 >> [1]))
	$9 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$9 = *((*($8) + $9))
	
.LABEL $label$1
	$3 = CALL $260(($6 + [32]), $3)
	*($6 + [24]) = [0]
	*($6 + [16]) = (int_64)0
	$0 = (*($4 + [4]) - *($4))
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = CALL _Znwj($0)
	*(($6 + [24])) = ($7 + $0)
	*($6 + [16]) = $7
	*($6 + [20]) = $7
	$0 = *($4)
	$4 = (*(($4 + [4])) - $0)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($7, $0, $4)
	*($6 + [20]) = (*($6 + [20]) + $4)
	
.LABEL $label$4
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	$4 = (*($5 + [4]) - *($5))
	$7 = ((int_32)$4 / (int_32)[12])
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$2 }
	$0 = CALL _Znwj($4)
	*(($6 + [8])) = ($0 + ((int_32)$7 * (int_32)[12]))
	*($6) = $0
	*($6 + [4]) = $0
	$5 = *(($5 + [4]))
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $260($0, $4)
	$0 = (*($6 + [4]) + [12])
	*($6 + [4]) = $0
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$5
	CALL void $8((int_32 $1), (int_64 $2), (int_64 $3), (int_32 ($6 + [16])), (int_32 $6), (int_32 $9))
	$5 = *($6)
	if ( ($5 == 0) ){ goto $label$7 }
	$0 = *($6 + [4])
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($0 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($0 + [-4])))
	
.LABEL $label$11
	$0 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$10 }
	$4 = *($6)
	goto $label$8 
	
.LABEL $label$9
	$4 = $5
	
.LABEL $label$8
	*($6 + [4]) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$12 }
	*($6 + [20]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((*($3) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$13
	$global$0 = ($6 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $276(($6 + [16]))
	
.LABEL $label$2
	CALL $276($6)
	(unreachable)
}

void .FUNC $217 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $216 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13)
{
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$14 = ($global$0 - [224])
	$global$0 = $14
	$0 = *($0 + [4])
	$15 = *($0 + [4])
	$16 = (*($0) + int_32($15 >> [1]))
	$17 = *($0)
	if ( (($15 & [1]) == 0) ){ goto $label$1 }
	$17 = *((*($16) + $17))
	
.LABEL $label$1
	*($14 + [216]) = [0]
	*($14 + [208]) = (int_64)0
	$0 = (*($3 + [4]) - *($3))
	$15 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$7 }
	if ( ((uint_32)$15 >= (uint_32)[357913942]) ){ goto $label$6 }
	$0 = CALL _Znwj($0)
	*(($14 + [216])) = ($0 + ((int_32)$15 * (int_32)[12]))
	*($14 + [208]) = $0
	*($14 + [212]) = $0
	$3 = *(($3 + [4]))
	$15 = *($3)
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$18 = CALL $260($0, $15)
	$0 = ($0 + [12])
	$15 = ($15 + [12])
	if ( ((int_32)$3 != (int_32)$15) ){ goto $label$8 }
	*($14 + [212]) = ($18 + [12])
	
.LABEL $label$7
	*($14 + [200]) = [0]
	*($14 + [192]) = (int_64)0
	$0 = (*($4 + [4]) - *($4))
	$15 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$9 }
	if ( ((uint_32)$15 >= (uint_32)[357913942]) ){ goto $label$5 }
	$0 = CALL _Znwj($0)
	*(($14 + [200])) = ($0 + ((int_32)$15 * (int_32)[12]))
	*($14 + [192]) = $0
	*($14 + [196]) = $0
	$3 = *(($4 + [4]))
	$15 = *($4)
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$18 = CALL $260($0, $15)
	$0 = ($0 + [12])
	$15 = ($15 + [12])
	if ( ((int_32)$3 != (int_32)$15) ){ goto $label$10 }
	*($14 + [196]) = ($18 + [12])
	
.LABEL $label$9
	$0 = CALL $260(($14 + [176]), $5)
	$15 = CALL $260(($14 + [160]), $6)
	*(($3 = (($14 + [144]) + [8]))) = *(($9 + [8]))
	*(($18 = (($14 + [128]) + [8]))) = *(($10 + [8]))
	*(($4 = (($14 + [112]) + [8]))) = *(($11 + [8]))
	*(($5 = (($14 + [96]) + [8]))) = *(($12 + [8]))
	*(($6 = (($14 + [80]) + [8]))) = *(($13 + [8]))
	*($14 + [144]) = *($9)
	*($14 + [128]) = *($10)
	*($14 + [112]) = *($11)
	*($14 + [96]) = *($12)
	*($14 + [80]) = *($13)
	*((($14 + [64]) + [8])) = *($3)
	*($14 + [64]) = *($14 + [144])
	*((($14 + [48]) + [8])) = *($18)
	*($14 + [48]) = *($14 + [128])
	*((($14 + [32]) + [8])) = *($4)
	*($14 + [32]) = *($14 + [112])
	*((($14 + [16]) + [8])) = *($5)
	*($14 + [16]) = *($14 + [96])
	*(($14 + [8])) = *($6)
	*($14) = *($14 + [80])
	CALL void $16((int_32 $1), (int_64 $2), (int_64 ($14 + [208])), (int_32 ($14 + [192])), (int_32 $0), (int_32 $15), (int_32 $7), (int_32 $8), (int_32 ($14 + [64])), (int_32 ($14 + [48])), (int_32 ($14 + [32])), (int_32 ($14 + [16])), (int_32 $14), (int_32 $17))
	if ( (*($15) & [1]) ){ goto $label$12 }
	if ( (*($0) & [1]) ){ goto $label$11 }
	goto $label$4 
	
.LABEL $label$12
	CALL _ZdlPv(*($15 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$11
	CALL _ZdlPv(*($0 + [8]))
	$3 = *($14 + [192])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	CALL $276(($14 + [208]))
	
.LABEL $label$5
	CALL $276(($14 + [192]))
	
.LABEL $label$4
	$3 = *($14 + [192])
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$15 = *($14 + [196])
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($15 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($15 + [-4])))
	
.LABEL $label$16
	$15 = $0
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$15 }
	$0 = *($14 + [192])
	goto $label$13 
	
.LABEL $label$14
	$0 = $3
	
.LABEL $label$13
	*($14 + [196]) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$3 = *($14 + [208])
	if ( ($3 == 0) ){ goto $label$17 }
	$15 = *($14 + [212])
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$0 = ($15 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*(($15 + [-4])))
	
.LABEL $label$21
	$15 = $0
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$20 }
	$0 = *($14 + [208])
	goto $label$18 
	
.LABEL $label$19
	$0 = $3
	
.LABEL $label$18
	*($14 + [212]) = $3
	CALL _ZdlPv($0)
	
.LABEL $label$17
	$global$0 = ($14 + [224])
	(unreachable)
	(unreachable)
}

void .FUNC $211 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$7 = ($global$0 - [48])
	$global$0 = $7
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$9 = (*($0) + int_32($8 >> [1]))
	$10 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$10 = *((*($9) + $10))
	
.LABEL $label$1
	*($7 + [40]) = [0]
	*($7 + [32]) = (int_64)0
	$0 = (*($3 + [4]) - *($3))
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$3 }
	$8 = CALL _Znwj($0)
	*(($7 + [40])) = ($8 + $0)
	*($7 + [32]) = $8
	*($7 + [36]) = $8
	$0 = *($3)
	$3 = (*(($3 + [4])) - $0)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($8, $0, $3)
	*($7 + [36]) = ($8 + $3)
	
.LABEL $label$4
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$3 = (*($4 + [4]) - *($4))
	$0 = ((int_32)$3 / (int_32)[12])
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$0 >= (uint_32)[357913942]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($7 + [24])) = ($3 + ((int_32)$0 * (int_32)[12]))
	*($7 + [16]) = $3
	*($7 + [20]) = $3
	$4 = *(($4 + [4]))
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$8 = CALL $260($3, $0)
	$3 = ($3 + [12])
	$0 = ($0 + [12])
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	*($7 + [20]) = ($8 + [12])
	
.LABEL $label$5
	$3 = CALL $260($7, $5)
	CALL void $9((int_32 $1), (int_64 $2), (int_32 ($7 + [32])), (int_32 ($7 + [16])), (int_32 $3), (int_32 $6), (int_32 $10))
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$7
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$8 }
	$0 = *($7 + [20])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($0 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($0 + [-4])))
	
.LABEL $label$12
	$0 = $3
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$11 }
	$3 = *($7 + [16])
	goto $label$9 
	
.LABEL $label$10
	$3 = $4
	
.LABEL $label$9
	*($7 + [20]) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$3 = *($7 + [32])
	if ( ($3 == 0) ){ goto $label$13 }
	*($7 + [36]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$global$0 = ($7 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $276(($7 + [32]))
	
.LABEL $label$2
	CALL $276(($7 + [16]))
	(unreachable)
}

void .FUNC $210 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$8 = ($global$0 - [128])
	$global$0 = $8
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$10 = (*($0) + int_32($9 >> [1]))
	$11 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$11 = *((*($10) + $11))
	
.LABEL $label$1
	$0 = CALL $260(($8 + [112]), $3)
	$3 = CALL $260(($8 + [96]), $4)
	*((($8 + [64]) + [24])) = *(($5 + [24]))
	*((($8 + [64]) + [16])) = *(($5 + [16]))
	*($8 + [48]) = (int_64)0
	*($8 + [56]) = [0]
	*($8 + [72]) = *(($5 + [8]))
	*($8 + [64]) = *($5)
	$5 = (*($6 + [4]) - *($6))
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$4 = CALL _Znwj($5)
	*(($8 + [56])) = ($4 + $5)
	*($8 + [48]) = $4
	*($8 + [52]) = $4
	$6 = *($6)
	$5 = (*(($6 + [4])) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($4, $6, $5)
	*($8 + [52]) = (*($8 + [52]) + $5)
	
.LABEL $label$5
	*($8 + [40]) = [0]
	*($8 + [32]) = (int_64)0
	$5 = (*($7 + [4]) - *($7))
	$4 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$3 }
	$6 = CALL _Znwj($5)
	*(($8 + [40])) = ($6 + ((int_32)$4 * (int_32)[12]))
	*($8 + [32]) = $6
	*($8 + [36]) = $6
	$7 = *(($7 + [4]))
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	CALL $260($6, $5)
	$6 = (*($8 + [36]) + [12])
	*($8 + [36]) = $6
	$5 = ($5 + [12])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$6
	*(($8 + [24])) = *((($8 + [64]) + [24]))
	*(($8 + [16])) = *((($8 + [64]) + [16]))
	*($8 + [8]) = *($8 + [72])
	*($8) = *($8 + [64])
	CALL void $10((int_32 $1), (int_64 $2), (int_64 $0), (int_32 $3), (int_32 $8), (int_32 ($8 + [48])), (int_32 ($8 + [32])), (int_32 $11))
	$7 = *($8 + [32])
	if ( ($7 == 0) ){ goto $label$8 }
	$6 = *($8 + [36])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($6 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$12
	$6 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$11 }
	$5 = *($8 + [32])
	goto $label$9 
	
.LABEL $label$10
	$5 = $7
	
.LABEL $label$9
	*($8 + [36]) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$5 = *($8 + [48])
	if ( ($5 == 0) ){ goto $label$13 }
	*($8 + [52]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( (*($3) & [1]) ){ goto $label$15 }
	if ( (*($0) & [1]) ){ goto $label$14 }
	goto $label$2 
	
.LABEL $label$15
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$14
	CALL _ZdlPv(*($0 + [8]))
	$global$0 = ($8 + [128])
	return (unreachable)
	
.LABEL $label$4
	CALL $276(($8 + [48]))
	
.LABEL $label$3
	CALL $276(($8 + [32]))
	
.LABEL $label$2
	$global$0 = ($8 + [128])
	(unreachable)
}

int_32 .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [12992])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [12992])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $196 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $197 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [12992])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [12992])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [12992])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $194 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $276($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [112])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [116])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [72])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [12690])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [12690])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_64 .FUNC $192 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [13766])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3590905687705255936, (int_64)-3590905687705255936)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $146($0, $2)
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [13766])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [14059])
	return *($1)
}

void .FUNC $193 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	$5 = *($0)
	$6 = *(*($4 + [16]) + [8])
	$7 = *(*($4 + [12]))
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$11 = [1]
	$12 = $9
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$9 < (int_32)[6])
	$12 = ($9 + [1])
	$9 = $12
	if ( $11 ){ goto $label$5 }
	$11 = [1]
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [12744])
	*(($1 + [32])) = $6
	*($1 + [24]) = $7
	$6 = *(*(($4 + [16])) + [8])
	$7 = *(*($4 + [20]))
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [12695])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$8 = $10
	$11 = [1]
	$12 = $9
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$8 = $10
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$9 < (int_32)[6])
	$12 = ($9 + [1])
	$9 = $12
	if ( $11 ){ goto $label$10 }
	$11 = [1]
	$9 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$11 = [0]
	
.LABEL $label$6
	CALL eosio_assert($11, [12744])
	*(($1 + [48])) = $6
	*($1 + [40]) = $7
	*($1 + [56]) = *(*(($4 + [16])) + [16])
	$12 = ($1 + [64])
	CALL $262($12, *($4 + [24]))
	$9 = *($4 + [28])
	*($1 + [80]) = *($9)
	*(($1 + [104])) = *(($9 + [24]))
	*(($1 + [96])) = *(($9 + [16]))
	*(($1 + [88])) = *(($9 + [8]))
	$9 = *($1 + [64])
	$11 = ( *(($1 + [68])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($11 + [96])
	$8 = (CASTING uint_64)(uint_32 $11)
	$4 = ($1 + [80])
	
.LOOP $label$11:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	$13 = ($1 + [112])
	$14 = *($1 + [112])
	$11 = *(($1 + [116]))
	$15 = ($11 - $14)
	$8 = (CASTING uint_64)(uint_32 $15)
	
.LOOP $label$12:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	$11 = (( $9 ? ($15 + $9) : ((int_32)$14 == (int_32)$11) ) + [2])
	if ( ($11 <= [513]) ){ goto $label$14 }
	$9 = CALL $295($11)
	goto $label$13 
	
.LABEL $label$14
	$9 = ($2 - (($11 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$13
	*($3 + [12]) = $9
	*($3 + [8]) = $9
	*($3 + [16]) = ($9 + $11)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [24])
	*($3 + [48]) = ($1 + [40])
	*($3 + [52]) = ($1 + [56])
	*($3 + [56]) = $12
	*($3 + [60]) = $4
	*($3 + [64]) = $13
	*($3 + [68]) = ($1 + [124])
	*($3 + [72]) = ($1 + [125])
	CALL $248(($3 + [32]), ($3 + [24]))
	$8 = *($1 + [8])
	*($1 + [132]) = CALL db_store_i64(*($5 + [8]), (int_64)-3590843033098125312, *(*($0 + [8])), $8, $9, $11)
	if ( ($11 <= [513]) ){ goto $label$17 }
	CALL $298($9)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$15 }
	
.LABEL $label$16
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$15
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [80])
}

void .FUNC $190 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [14008])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	CALL eosio_assert([1], [12992])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-3590905687705255936, $2, (int_64)-3590905687705255936, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-3590905687705255936) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-3590905687705255935
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)-3590905687705255936
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-3590905687705255936
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $245(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $191 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [13852])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [13898])
	*($1 + [124]) = [1]
	$5 = *($1 + [8])
	CALL eosio_assert([1], [13949])
	$6 = *($1 + [64])
	$7 = ( *(($1 + [68])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($7 + [96])
	$8 = (CASTING uint_64)(uint_32 $7)
	$9 = ($1 + [64])
	$10 = ($1 + [124])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$11 = ($1 + [112])
	$12 = *($1 + [112])
	$7 = *(($1 + [116]))
	$13 = ($7 - $12)
	$8 = (CASTING uint_64)(uint_32 $13)
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	$7 = (( $6 ? ($13 + $6) : ((int_32)$12 == (int_32)$7) ) + [2])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$6 = CALL $295($7)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($4 + [12]) = $6
	*($4 + [8]) = $6
	*($4 + [16]) = ($6 + $7)
	*($4 + [24]) = ($4 + [8])
	*($4 + [56]) = $9
	*($4 + [64]) = $11
	*($4 + [68]) = $10
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [16])
	*($4 + [44]) = ($1 + [24])
	*($4 + [48]) = ($1 + [40])
	*($4 + [52]) = ($1 + [56])
	*($4 + [60]) = ($1 + [80])
	*($4 + [72]) = ($1 + [125])
	CALL $248(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $6, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $298($6)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [80])
}