(data (i32.const 4) "@o\00\00")
(data (i32.const 16) "rating.pra\00")
(data (i32.const 32) "transfer\00")
(data (i32.const 48) "eosio.token\00")
(data (i32.const 64) "bid,\00")
(data (i32.const 80) "setpk,\00")
(data (i32.const 96) "$BIDNAME_ERROR#107$ memo mode error\00")
(data (i32.const 144) "$BIDNAME_ERROR#100$ Invalid token transfer\00")
(data (i32.const 192) "$BIDNAME_ERROR#101$ Quantity must be positive\00")
(data (i32.const 240) " \0d\n\t\00")
(data (i32.const 256) ",\00")
(data (i32.const 272) "$BIDNAME_ERROR#102$ setpk memo format error\00")
(data (i32.const 320) "$BIDNAME_ERROR#103$ pub key length error\00")
(data (i32.const 368) "$BIDNAME_ERROR#300$ bid not end\00")
(data (i32.const 400) "$BIDNAME_ERROR#104$ transferred eos not enough for set pk\00")
(data (i32.const 464) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 528) "$BIDNAME_ERROR#303$ account not exist\00")
(data (i32.const 576) "cannot pass end iterator to modify\00")
(data (i32.const 624) "object passed to modify is not in multi_index\00")
(data (i32.const 672) "cannot modify objects in table of another contract\00")
(data (i32.const 736) "$BIDNAME_ERROR#304$ set pk error when update user account\00")
(data (i32.const 800) "updater cannot change primary key when modifying an object\00")
(data (i32.const 864) "write\00")
(data (i32.const 880) "error reading iterator\00")
(data (i32.const 912) "read\00")
(data (i32.const 928) "get\00")
(data (i32.const 944) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1008) "invalid symbol name\00")
(data (i32.const 1040) "$BIDNAME_ERROR#304$ name not exist\00")
(data (i32.const 1088) ":\00")
(data (i32.const 1104) "$BIDNAME_ERROR#105$ bid memo format error\00")
(data (i32.const 1152) "$BIDNAME_ERROR#106$ memo content error\00")
(data (i32.const 1200) "$BIDNAME_ERROR#110$ referrer cannot be self\00")
(data (i32.const 1248) "$BIDNAME_ERROR#301$ name price has rise recently\00")
(data (i32.const 1312) "$BIDNAME_ERROR#302$ transfer amount is not enough\00")
(data (i32.const 1376) "attempt to subtract asset with different symbol\00")
(data (i32.const 1424) "subtraction underflow\00")
(data (i32.const 1456) "subtraction overflow\00")
(data (i32.const 1488) "$BIDNAME_ERROR#109$ global not exist\00")
(data (i32.const 1536) "active\00")
(data (i32.const 1552) "prochaintech\00")
(data (i32.const 1568) "notify\00")
(data (i32.const 1600) "multiplication overflow\00")
(data (i32.const 1632) "multiplication underflow\00")
(data (i32.const 1664) "multiply overflow\00")
(data (i32.const 1696) "divide by zero\00")
(data (i32.const 1712) "signed division overflow\00")
(data (i32.const 1744) "attempt to add asset with different symbol\00")
(data (i32.const 1792) "addition underflow\00")
(data (i32.const 1824) "addition overflow\00")
(data (i32.const 1856) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1920) "$BIDNAME_ERROR#305$ name has end\00")
(data (i32.const 1968) "$BIDNAME_ERROR#305$ bidname has end\00")
(data (i32.const 2016) "cannot create objects in table of another contract\00")
(data (i32.const 2080) "$BIDNAME_ERROR#200$ account exist\00")
(data (i32.const 2128) "$BIDNAME_ERROR#111$ account is code \00")
(data (i32.const 2176) "user has exist\00")
(data (i32.const 2192) "cannot pass end iterator to erase\00")
(data (i32.const 2240) "cannot increment end iterator\00")
(data (i32.const 2272) "object passed to erase is not in multi_index\00")
(data (i32.const 2320) "cannot erase objects in table of another contract\00")
(data (i32.const 2384) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2448) "$BIDNAME_ERROR#303$ name exist\00")
(data (i32.const 2480) "\80Q\01\00\80Q\01\00\00\e1\00\00")
(data (i32.const 2492) "\c0\t\00\00")
(data (i32.const 2496) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 2544) "next primary key in table is at autoincrement limit\00")
(data (i32.const 2608) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 2672) "cannot decrement iterator at beginning of table\00")
(data (i32.const 2720) "0123456789abcdef\00")
(data (i32.const 2752) "successa\00")
(data (i32.const 2768) "hex needed\00")
(data (i32.const 2784) "$BIDNAME_ERROR#112$ global do not need to update\00")
(data (i32.const 2848) "$BIDNAME_ERROR#305$ account has got share\00")
(data (i32.const 2896) "$BIDNAME_ERROR#402$ votename is not exist\00")
(data (i32.const 2944) "$BIDNAME_ERROR#400$ votename has been bid\00")
(data (i32.const 2992) "$BIDNAME_ERROR#406$ votename unvalid\00")
(data (i32.const 3040) "eosio\00")
(data (i32.const 3056) "$BIDNAME_ERROR#401$ suffix is not exist\00")
(data (i32.const 3104) "$BIDNAME_ERROR#407$ votename is account\00")
(data (i32.const 3152) "$BIDNAME_ERROR#403$ daily new votename has been full\00")
(data (i32.const 3216) "$BIDNAME_ERROR#201$ no chance to vote\00")
(data (i32.const 3264) "$BIDNAME_ERROR#202$ user has vote this name already today\00")
(data (i32.const 3328) "$BIDNAME_ERROR#108$ global has already init\00")
(data (i32.const 3376) "$BIDNAME_ERROR#405$ suffix already exist\00")
(data (i32.const 3424) "getreceipt\00")
(data (i32.const 3440) "end name error\00")
(data (i32.const 3456) "$BIDNAME_ERROR#308$ announcement is too long\00")
(data (i32.const 3504) "$BIDNAME_ERROR#6$ set announce not allow\00")
(data (i32.const 3552) "$BIDNAME_ERROR#307$ user do not match bidder\00")
(data (i32.const 12000) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "assert_sha256" (func $fimport$3 (param i32 i32 i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "db_end_i64" (func $fimport$6 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_idx_double_find_primary" (func $fimport$9 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx_double_lowerbound" (func $fimport$10 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx_double_next" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_idx_double_remove" (func $fimport$12 (param i32)))
(import "env" "db_idx_double_store" (func $fimport$13 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx_double_update" (func $fimport$14 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$18 (param i32)))
(import "env" "db_store_i64" (func $fimport$19 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$20 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$21 (param i32 i32)))
(import "env" "is_account" (func $fimport$22 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$26 (param i32)))
(import "env" "read_action_data" (func $fimport$27 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$28 (param i64)))
(import "env" "require_auth2" (func $fimport$29 (param i64 i64)))
(import "env" "send_inline" (func $fimport$30 (param i32 i32)))
(import "env" "sha256" (func $fimport$31 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $243))
(export "free" (func $246))
(export "memchr" (func $262))
(export "memcmp" (func $263))
(export "strlen" (func $264))
(table $0 35 35 anyfunc)
(elem (i32.const 0) $265 $49 $25 $44 $10 $40 $45 $33 $32 $6 $17 $11 $18 $13 $31 $35 $27 $39 $36 $47 $22 $46 $9 $34 $15 $42 $20 $30 $16 $24 $37 $28 $19 $48 $8)



void .FUNC $220 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $247([128])
	CALL $84($3)
	*($3 + [112]) = $1
	CALL $221(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [116])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $86(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$4 }
	CALL $248(*(($1 + [52])))
	
.LABEL $label$4
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $248(*(($1 + [40])))
	
.LABEL $label$5
	CALL $248($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $174 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	$4 = *(($1 + [32]))
	$13 = *(($1 + [36]))
	if ( ((int_32)$13 == (int_32)$4) ){ goto $label$1 }
	$12 = ($13 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($12)) == (int_64)$2) ){ goto $label$1 }
	$13 = $12
	$6 = ($12 + [-24])
	$12 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($1 + [8])
	if ( ((int_32)$13 == (int_32)$4) ){ goto $label$4 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [140]) == (int_32)$6), [464])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$13 = CALL db_find_i64(*(($1 + [8])), *(($1 + [16])), (int_64)-3922483085538492416, $2)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $63($6, $13)
	CALL eosio_assert(((int_32)*($12 + [140]) == (int_32)$6), [464])
	
.LABEL $label$3
	$5 = ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [28800]) / (uint_32)[86400])
	*($14 + [28]) = $5
	$13 = [0]
	$1 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($1, [528])
	$4 = *($12 + [112])
	if ( ((uint_32)$5 <= (uint_32)$4) ){ goto $label$5 }
	$13 = ((uint_32)*($3 + [28]) > (uint_32)$4)
	
.LABEL $label$5
	CALL eosio_assert($13, [2848])
	$2 = *($3 + [76])
	$7 = *($3 + [80])
	$11 = ((int_64)$7 / (int_64)$2)
	CALL __multi3($14, $11, (int_64)$11 >> (int_64)63), *($12 + [8]), (int_64)0)
	$10 = *(($3 + [104]))
	$8 = *(($3 + [88]))
	$9 = *($3 + [96])
	CALL eosio_assert(((int_64)$2 != (int_64)0), [1696])
	CALL eosio_assert([1], [1712])
	*($0 + [8]) = $8
	$11 = *(($14 + [8]))
	$2 = *($14)
	CALL eosio_assert(( (uint_64)($2 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ), [1600])
	CALL eosio_assert(( ((uint_64)$2 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ), [1632])
	*($0) = $2
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$6 }
	$13 = ((int_64)$10 == (int_64)$8)
	CALL eosio_assert($13, [1376])
	$11 = (int_64)
	$5 = ((int_64)$11($7 - $9)) > (int_64)-4611686018427387904
	CALL eosio_assert($5), [1424])
	$3 = ((int_64)$11 < (int_64)4611686018427387904)
	CALL eosio_assert($3, [1456])
	CALL eosio_assert([1], [1856])
	if ( ((int_64)$11 >= (int_64)$2) ){ goto $label$7 }
	CALL eosio_assert($13, [1376])
	CALL eosio_assert($5, [1424])
	CALL eosio_assert($3, [1456])
	*(($0 + [8])) = $8
	*($0) = $11
	
.LABEL $label$7
	*($14 + [20]) = $0
	*($14 + [16]) = ($14 + [28])
	CALL eosio_assert($1, [576])
	CALL $176($6, $12, (int_64)0, ($14 + [16]))
	
.LABEL $label$6
	*([0] + [4]) = ($14 + [32])
}

void .FUNC $6 (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
	CALL $239(($0 + [192]), $1)
}

void .FUNC $176 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	*(($9 = $10) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($9 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($9 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$2 = *($1 + [48])
	*($9 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($9 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $2))
	*($1 + [112]) = *(*($3))
	$8 = *($1)
	*($9 + [40]) = $8
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [24]))), [1744])
	$2 = ((int_64)*($1 + [16]) + (int_64)*($7))
	*($1 + [16]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [1824])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [40]))), [1744])
	$2 = ((int_64)*($1 + [32]) + (int_64)*($3))
	*($1 + [32]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [1824])
	*($1 + [8]) = uint_32(*($1 + [8]) >> [1])
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [800])
	$7 = *($1 + [80])
	$4 = *(($1 + [84]))
	$2 = (CASTING uint_64)(uint_32 int_32(($4 - $7) >> [5]))
	$3 = [76]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($7 + [8])
	$5 = ( *(($7 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = (($5 + $3) + [16])
	$2 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = ($0 + [36])
	$3 = ($3 + [28])
	$4 = *($1 + [124])
	$5 = *(($1 + [128]))
	$6 = ($5 - $4)
	$2 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$3 = (($6 & [-8]) + $3)
	
.LABEL $label$6
	$5 = ($3 + [4])
	if ( ($5 <= [513]) ){ goto $label$8 }
	$3 = CALL malloc($5)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($10 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$7
	*($9 + [28]) = $3
	*($9 + [24]) = $3
	*($9 + [32]) = ($3 + $5)
	CALL $65(($9 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), *($9 + [80]), $3, $5)
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL free($3)
	$8 = *($9 + [40])
	
.LABEL $label$9
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [12]) = $1
	*($9 + [8]) = ($9 + [48])
	*($9 + [16]) = ($9 + [40])
	*($9 + [20]) = ($9 + [80])
	*($9 + [88]) = $9
	CALL $177(($9 + [88]), $7, ($7 + [1]), ($7 + [2]), ($7 + [3]))
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $177 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $170 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($1 + [72]) = (*($1 + [72]) + [20000])
	$4 = *($1)
	CALL eosio_assert([1], [800])
	*($5 + [120]) = ($5 + [112])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $106(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $5, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $171 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($0 + [8])
	$3 = [0]
	$0 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $98($1, $0)
	
.LABEL $label$1
	$0 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($0, [1488])
	$2 = ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [28800]) / (uint_32)[86400])
	*($4 + [12]) = $2
	CALL eosio_assert((*($3 + [28]) <= $2), [2784])
	*($4 + [8]) = ($4 + [12])
	CALL eosio_assert($0, [576])
	CALL $172($1, $3, (int_64)0, ($4 + [8]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $172 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$7 = ($1 + [16])
	$6 = *($7)
	$4 = *($1)
	$5 = *($1 + [8])
	CALL eosio_assert([1], [1696])
	CALL eosio_assert([1], [1712])
	*($7) = $6
	$6 = ((int_64)$5 / (int_64)2)
	*($1 + [8]) = $6
	$8 = *($1 + [72])
	*($1 + [76]) = $8
	*($1 + [72]) = uint_32($8 >> [1])
	*(($1 + [92])) = *(($1 + [20]))
	*(($1 + [88])) = *($7)
	*($1 + [80]) = $6
	CALL eosio_assert([1], [944])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [1008])
	*($1 + [112]) = [0]
	*(($1 + [104])) = (int_64)1397703940
	*($1 + [96]) = (int_64)0
	*($1 + [28]) = *(*($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [800])
	$8 = $10
	$7 = ($8 + [-112])
	*([0] + [4]) = $7
	*($9 + [4]) = $7
	*($9) = $7
	*($9 + [8]) = $8
	CALL $106($9, $1)
	CALL db_update_i64(*($1 + [120]), $2, $7, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [912])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11984])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11792]
	$1 = (((int_32)$2 * (int_32)[12]) + [11792])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $178 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($1 + [88]) = (int_64)5
	$4 = *($1)
	CALL eosio_assert([1], [800])
	$7 = *($1 + [32])
	$5 = ( *(($1 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [79])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [44])
	$5 = ( *(($1 + [48])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$7 = ($5 + $7)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $7)
	CALL $83($9, $1)
	CALL db_update_i64(*($1 + [116]), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC $221 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	$5 = *(*(*($0 + [4])) + [4])
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	CALL $250(($1 + [32]), ($5 + [32]))
	CALL $250(($1 + [44]), ($5 + [44]))
	CALL memcpy(($1 + [56]), ($5 + [56]), [56])
	*($1 + [88]) = (int_64)3
	$5 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [79])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [44]))
	$3 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $83($7, $1)
	$4 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)-3844216343968612352, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [1184])
	*([0] + [4]) = $9
	*(($9 + [696])) = $0
	*(($9 + [704])) = $0
	*(($9 + [712])) = (int_64)-1
	*(($9 + [720])) = [0]
	*($9 + [680]) = $0
	*($9 + [672]) = $0
	*($9 + [688]) = $0
	*(($9 + [724])) = [0]
	*(($9 + [728])) = [0]
	*(($9 + [736])) = $0
	*(($9 + [744])) = $0
	*(($9 + [752])) = (int_64)-1
	*(($9 + [760])) = [0]
	*(($9 + [764])) = [0]
	*(($9 + [768])) = [0]
	*(($9 + [776])) = $0
	*(($9 + [784])) = $0
	*(($9 + [792])) = (int_64)-1
	*(($9 + [800])) = [0]
	*(($9 + [804])) = [0]
	*(($9 + [808])) = [0]
	*($9 + [816]) = $0
	*(($9 + [824])) = $0
	*(($9 + [832])) = $0
	*(($9 + [840])) = (int_64)-1
	*(($9 + [848])) = [0]
	*(($9 + [852])) = [0]
	*(($9 + [856])) = [0]
	*(($9 + [860])) = [0]
	*($9 + [864]) = $0
	*(($9 + [872])) = $0
	*((($9 + [672]) + [208])) = $0
	*(($9 + [888])) = (int_64)-1
	*(($9 + [896])) = [0]
	*(($9 + [900])) = [0]
	*(($9 + [904])) = [0]
	*(($9 + [908])) = [0]
	*(($9 + [912])) = $0
	*(($9 + [920])) = $0
	*(($9 + [928])) = (int_64)-1
	*(($9 + [936])) = [0]
	*(($9 + [940])) = [0]
	*(($9 + [944])) = [0]
	*(($9 + [952])) = $0
	*(($9 + [960])) = $0
	*(($9 + [968])) = (int_64)-1
	*(($9 + [976])) = [0]
	*(($9 + [980])) = [0]
	*(($9 + [984])) = [0]
	*($9 + [992]) = $0
	*(($9 + [1000])) = $0
	*(($9 + [1008])) = $0
	*(($9 + [1016])) = (int_64)-1
	*(($9 + [1024])) = [0]
	*(($9 + [1028])) = [0]
	*(($9 + [1032])) = [0]
	*(($9 + [1040])) = $0
	*(($9 + [1048])) = $0
	*(($9 + [1056])) = (int_64)-1
	*(($9 + [1064])) = [0]
	*(($9 + [1068])) = [0]
	*(($9 + [1072])) = [0]
	*(($9 + [1080])) = $0
	*(($9 + [1088])) = $0
	*(($9 + [1096])) = (int_64)-1
	*(($9 + [1104])) = [0]
	*(($9 + [1108])) = [0]
	*(($9 + [1112])) = [0]
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*(($9 + [1128])) = $7
	*(($9 + [1136])) = $7
	*(($9 + [1144])) = (int_64)-1
	$6 = (int_64)0
	*(($9 + [1152])) = (int_64)0
	*(($9 + [1160])) = [0]
	*($9 + [1120]) = $7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$41 }
	if ( ((int_64)$2 > (int_64)3626298514662752255) ){ goto $label$40 }
	if ( ((int_64)$2 <= (int_64)-3075276111885991937) ){ goto $label$39 }
	if ( ((int_64)$2 <= (int_64)-2507760073317548033) ){ goto $label$37 }
	if ( ((int_64)$2 <= (int_64)3626083795288981503) ){ goto $label$33 }
	if ( ((int_64)$2 == (int_64)3626083795288981504) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)3626171756219203584) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)3626298342139818496) ){ goto $label$7 }
	*($9 + [404]) = [0]
	*($9 + [400]) = [1]
	*($9 + [264 align=4]) = *($9 + [400])
	CALL $7(($9 + [672]), ($9 + [264]))
	goto $label$7 
	
.LABEL $label$41
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$47 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$3 = ($3 + [165])
	goto $label$45 
	
.LABEL $label$47
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$43
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$42 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	CALL $50(($9 + [352]))
	$6 = *($9 + [360])
	*(($9 + [324])) = *(($9 + [380]))
	*(($4 = (($9 + [312]) + [8]))) = *(($9 + [376]))
	*($9 + [316]) = *(($9 + [372]))
	$8 = *($9 + [352])
	*($9 + [312]) = *($9 + [368])
	$5 = *($4)
	*((($9 + [1168]) + [8])) = $5
	*(($4 = (($9 + [328]) + [8]))) = $5
	$5 = *($9 + [312])
	*($9 + [1168]) = $5
	*($9 + [328]) = $5
	*($9 + [344]) = $1
	$3 = ($9 + [384])
	CALL $260(($9 + [296]), $3)
	*(($9 + [288])) = *($9 + [344])
	*((($9 + [272]) + [8])) = *($4)
	*($9 + [272]) = *($9 + [328])
	CALL $51(($9 + [672]), $8, $6, ($9 + [272]), ($9 + [296]))
	if ( ((*($9 + [296]) & [1]) == 0) ){ goto $label$48 }
	CALL $248(*($9 + [304]))
	
.LABEL $label$48
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL $248(*(($9 + [392])))
	goto $label$7 
	
.LABEL $label$40
	if ( ((int_64)$2 <= (int_64)5378198769709875199) ){ goto $label$38 }
	if ( ((int_64)$2 <= (int_64)6112285508971266047) ){ goto $label$36 }
	if ( ((int_64)$2 <= (int_64)6112398774008545279) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)6112398774008545280) ){ goto $label$23 }
	if ( ((int_64)$2 == (int_64)7112157022462558208) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$7 }
	*($9 + [556]) = [0]
	*($9 + [552]) = [2]
	*($9 + [112 align=4]) = *($9 + [552])
	CALL $26(($9 + [672]), ($9 + [112]))
	goto $label$7 
	
.LABEL $label$39
	if ( ((int_64)$2 > (int_64)-4417235868247392257) ){ goto $label$35 }
	if ( ((int_64)$2 > (int_64)-4421659996308803073) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)-7375580274680659968) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)-5918304954946158592) ){ goto $label$7 }
	*($9 + [444]) = [0]
	*($9 + [440]) = [3]
	*($9 + [224 align=4]) = *($9 + [440])
	CALL $29(($9 + [672]), ($9 + [224]))
	goto $label$7 
	
.LABEL $label$38
	if ( ((int_64)$2 > (int_64)4520898386864259071) ){ goto $label$34 }
	if ( ((int_64)$2 > (int_64)3626382862451736575) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)3626298514662752256) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)3626298514847301632) ){ goto $label$7 }
	*($9 + [644]) = [0]
	*($9 + [640]) = [4]
	*($9 + [24 align=4]) = *($9 + [640])
	CALL $7(($9 + [672]), ($9 + [24]))
	goto $label$7 
	
.LABEL $label$37
	if ( ((int_64)$2 > (int_64)-2507766120631500801) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)-3075276111885991936) ){ goto $label$19 }
	if ( ((int_64)$2 != (int_64)-2764395866176356352) ){ goto $label$7 }
	*($9 + [460]) = [0]
	*($9 + [456]) = [5]
	*($9 + [208 align=4]) = *($9 + [456])
	CALL $41(($9 + [672]), ($9 + [208]))
	goto $label$7 
	
.LABEL $label$36
	if ( ((int_64)$2 > (int_64)5378297606284247039) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)5378198769709875200) ){ goto $label$18 }
	if ( ((int_64)$2 != (int_64)5378243242653384704) ){ goto $label$7 }
	*($9 + [436]) = [0]
	*($9 + [432]) = [6]
	*($9 + [232 align=4]) = *($9 + [432])
	CALL $29(($9 + [672]), ($9 + [232]))
	goto $label$7 
	
.LABEL $label$35
	if ( ((int_64)$2 > (int_64)-3681244989058187265) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-4417235868247392256) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)-4373711020246433792) ){ goto $label$7 }
	*($9 + [508]) = [0]
	*($9 + [504]) = [7]
	*($9 + [160 align=4]) = *($9 + [504])
	CALL $7(($9 + [672]), ($9 + [160]))
	goto $label$7 
	
.LABEL $label$34
	if ( ((int_64)$2 > (int_64)5377971004819521535) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)4520898386864259072) ){ goto $label$16 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$7 }
	*($9 + [516]) = [0]
	*($9 + [512]) = [8]
	*($9 + [152 align=4]) = *($9 + [512])
	CALL $29(($9 + [672]), ($9 + [152]))
	goto $label$7 
	
.LABEL $label$33
	if ( ((int_64)$2 == (int_64)-2507760073317548032) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)-2039333636196532224) ){ goto $label$7 }
	*($9 + [668]) = [0]
	*($9 + [664]) = [9]
	*($9) = *($9 + [664])
	CALL $7(($9 + [672]), $9)
	goto $label$7 
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)6112285508971266048) ){ goto $label$14 }
	if ( ((int_64)$2 != (int_64)6112285509155815424) ){ goto $label$7 }
	*($9 + [604]) = [0]
	*($9 + [600]) = [10]
	*($9 + [64 align=4]) = *($9 + [600])
	CALL $7(($9 + [672]), ($9 + [64]))
	goto $label$7 
	
.LABEL $label$31
	if ( ((int_64)$2 == (int_64)-4421659996308803072) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)-4417352286020304896) ){ goto $label$7 }
	*($9 + [636]) = [0]
	*($9 + [632]) = [11]
	*($9 + [32 align=4]) = *($9 + [632])
	CALL $12(($9 + [672]), ($9 + [32]))
	goto $label$7 
	
.LABEL $label$30
	if ( ((int_64)$2 == (int_64)3626382862451736576) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)3626397351237124096) ){ goto $label$7 }
	*($9 + [596]) = [0]
	*($9 + [592]) = [12]
	*($9 + [72 align=4]) = *($9 + [592])
	CALL $7(($9 + [672]), ($9 + [72]))
	goto $label$7 
	
.LABEL $label$29
	if ( ((int_64)$2 == (int_64)-2507766120631500800) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-2507764893193601024) ){ goto $label$7 }
	*($9 + [628]) = [0]
	*($9 + [624]) = [13]
	*($9 + [40 align=4]) = *($9 + [624])
	CALL $14(($9 + [672]), ($9 + [40]))
	goto $label$7 
	
.LABEL $label$28
	if ( ((int_64)$2 == (int_64)5378297606284247040) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)5378347324038709248) ){ goto $label$7 }
	*($9 + [524]) = [0]
	*($9 + [520]) = [14]
	*($9 + [144 align=4]) = *($9 + [520])
	CALL $7(($9 + [672]), ($9 + [144]))
	goto $label$7 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)-3681244989058187264) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-3075276113623788544) ){ goto $label$7 }
	*($9 + [492]) = [0]
	*($9 + [488]) = [15]
	*($9 + [176 align=4]) = *($9 + [488])
	CALL $26(($9 + [672]), ($9 + [176]))
	goto $label$7 
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)5377971004819521536) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)5378081704580218880) ){ goto $label$7 }
	*($9 + [548]) = [0]
	*($9 + [544]) = [16]
	*($9 + [120 align=4]) = *($9 + [544])
	CALL $7(($9 + [672]), ($9 + [120]))
	goto $label$7 
	
.LABEL $label$25
	*($9 + [468]) = [0]
	*($9 + [464]) = [17]
	*($9 + [200 align=4]) = *($9 + [464])
	CALL $38(($9 + [672]), ($9 + [200]))
	goto $label$7 
	
.LABEL $label$24
	*($9 + [484]) = [0]
	*($9 + [480]) = [18]
	*($9 + [184 align=4]) = *($9 + [480])
	CALL $26(($9 + [672]), ($9 + [184]))
	goto $label$7 
	
.LABEL $label$23
	*($9 + [420]) = [0]
	*($9 + [416]) = [19]
	*($9 + [248 align=4]) = *($9 + [416])
	CALL $7(($9 + [672]), ($9 + [248]))
	goto $label$7 
	
.LABEL $label$22
	*($9 + [572]) = [0]
	*($9 + [568]) = [20]
	*($9 + [96 align=4]) = *($9 + [568])
	CALL $23(($9 + [672]), ($9 + [96]))
	goto $label$7 
	
.LABEL $label$21
	*($9 + [428]) = [0]
	*($9 + [424]) = [21]
	*($9 + [240 align=4]) = *($9 + [424])
	CALL $7(($9 + [672]), ($9 + [240]))
	goto $label$7 
	
.LABEL $label$20
	*($9 + [652]) = [0]
	*($9 + [648]) = [22]
	*($9 + [16 align=4]) = *($9 + [648])
	CALL $7(($9 + [672]), ($9 + [16]))
	goto $label$7 
	
.LABEL $label$19
	*($9 + [500]) = [0]
	*($9 + [496]) = [23]
	*($9 + [168 align=4]) = *($9 + [496])
	CALL $26(($9 + [672]), ($9 + [168]))
	goto $label$7 
	
.LABEL $label$18
	*($9 + [620]) = [0]
	*($9 + [616]) = [24]
	*($9 + [48 align=4]) = *($9 + [616])
	CALL $7(($9 + [672]), ($9 + [48]))
	goto $label$7 
	
.LABEL $label$17
	*($9 + [452]) = [0]
	*($9 + [448]) = [25]
	*($9 + [216 align=4]) = *($9 + [448])
	CALL $43(($9 + [672]), ($9 + [216]))
	goto $label$7 
	
.LABEL $label$16
	*($9 + [580]) = [0]
	*($9 + [576]) = [26]
	*($9 + [88 align=4]) = *($9 + [576])
	CALL $21(($9 + [672]), ($9 + [88]))
	goto $label$7 
	
.LABEL $label$15
	*($9 + [532]) = [0]
	*($9 + [528]) = [27]
	*($9 + [136 align=4]) = *($9 + [528])
	CALL $7(($9 + [672]), ($9 + [136]))
	goto $label$7 
	
.LABEL $label$14
	*($9 + [612]) = [0]
	*($9 + [608]) = [28]
	*($9 + [56 align=4]) = *($9 + [608])
	CALL $7(($9 + [672]), ($9 + [56]))
	goto $label$7 
	
.LABEL $label$13
	*($9 + [564]) = [0]
	*($9 + [560]) = [29]
	*($9 + [104 align=4]) = *($9 + [560])
	CALL $21(($9 + [672]), ($9 + [104]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [476]) = [0]
	*($9 + [472]) = [30]
	*($9 + [192 align=4]) = *($9 + [472])
	CALL $38(($9 + [672]), ($9 + [192]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [540]) = [0]
	*($9 + [536]) = [31]
	*($9 + [128 align=4]) = *($9 + [536])
	CALL $29(($9 + [672]), ($9 + [128]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [588]) = [0]
	*($9 + [584]) = [32]
	*($9 + [80 align=4]) = *($9 + [584])
	CALL $7(($9 + [672]), ($9 + [80]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [412]) = [0]
	*($9 + [408]) = [33]
	*($9 + [256 align=4]) = *($9 + [408])
	CALL $7(($9 + [672]), ($9 + [256]))
	goto $label$7 
	
.LABEL $label$8
	*($9 + [660]) = [0]
	*($9 + [656]) = [34]
	*($9 + [8 align=4]) = *($9 + [656])
	CALL $7(($9 + [672]), ($9 + [8]))
	
.LABEL $label$7
	CALL $52(($9 + [672]))
	*([0] + [4]) = ($9 + [1184])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	CALL $128(*($0 + [4]), $1)
	$6 = *($1 + [80])
	$3 = *(($1 + [84]))
	$7 = (CASTING uint_64)(uint_32 int_32(($3 - $6) >> [5]))
	$5 = [76]
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($6 + [8])
	$4 = ( *(($6 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$5 = (($4 + $5) + [16])
	$7 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	$6 = ($6 + [32])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = ($5 + [28])
	$4 = *($1 + [124])
	$6 = *(($1 + [128]))
	$3 = ($6 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($3 >> [3]))
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$6 }
	$5 = (($3 & [-8]) + $5)
	
.LABEL $label$6
	$6 = ($5 + [4])
	if ( ($6 <= [513]) ){ goto $label$8 }
	$5 = CALL malloc($6)
	goto $label$7 
	
.LABEL $label$8
	$5 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$7
	*($8 + [28]) = $5
	*($8 + [24]) = $5
	*($8 + [32]) = ($5 + $6)
	CALL $65(($8 + [24]), $1)
	$7 = *($1)
	*($1 + [144]) = CALL db_store_i64(*($2 + [8]), (int_64)-3922483085538492416, *(*($0 + [8])), $7, $5, $6)
	if ( ($6 <= [513]) ){ goto $label$9 }
	CALL free($5)
	
.LABEL $label$9
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($8 + [12]) = $1
	*($8 + [20]) = $1
	*($8 + [16]) = *(($0 + [8]))
	*($8 + [8]) = $2
	*($8 + [40]) = ($8 + [8])
	CALL $129(($8 + [40]), ($2 + [36]), ($2 + [37]), ($2 + [38]), ($2 + [39]))
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC $189 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $247([48])) + [32]) = $1
	CALL $192(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $185(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $248($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $188 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$5), [464])
	$5 = [0]
	if ( $4 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$4 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3538024836733337600, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $182($5, $4) + [32]) == (int_32)$5), [464])
	return [0]
	
.LABEL $label$4
	$5 = [1]
	CALL eosio_assert(((int_32)CALL $fimport$22($1) ^ (int_32)[1]), [3104])
	
.LABEL $label$3
	return $5
}

void .FUNC $49 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0 + [8]))
	CALL $135(($0 + [192]), $1)
}

void .FUNC $48 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [128])
	*([0] + [4]) = $10
	CALL require_auth(*($0 + [8]))
	$9 = *($0 + [8])
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1536]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*($10 + [64]) = $7
	*($10 + [56]) = $9
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [1552]
	$7 = (int_64)0
	
.LOOP $label$7:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$8 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$2 = ($2 + [165])
	goto $label$9 
	
.LABEL $label$10
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1568]
	$9 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$16 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$2 = ($2 + [165])
	goto $label$14 
	
.LABEL $label$16
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$11 }
	*(($10 + [16])) = [0]
	*($10 + [8]) = (int_64)0
	$4 = CALL strlen([1584])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$20 }
	*($10 + [8]) = ($4 << [1])
	$2 = (($10 + [8]) | [1])
	if ( $4 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$3 = (($4 + [16]) & [-16])
	$2 = CALL $247($3)
	*($10 + [8]) = ($3 | [1])
	*($10 + [16]) = $2
	*($10 + [12]) = $4
	
.LABEL $label$19
	CALL memcpy($2, [1584], $4)
	
.LABEL $label$18
	*(($2 + $4)) = [0]
	*(($10 + [44])) = *($10 + [12])
	*($10 + [32]) = $1
	$4 = (($10 + [8]) + [8])
	*(($10 + [48])) = *($4)
	*($10 + [24]) = *(($0 + [8]))
	*($10 + [40]) = *($10 + [8])
	*($10 + [8]) = [0]
	*($10 + [12]) = [0]
	*($4) = [0]
	$4 = CALL $100(($10 + [72]), ($10 + [56]), $7, $9, ($10 + [24]))
	CALL $101(($10 + [112]), $4)
	$2 = *($10 + [112])
	CALL send_inline($2, (*($10 + [116]) - $2))
	$2 = *($10 + [112])
	if ( ($2 == 0) ){ goto $label$21 }
	*($10 + [116]) = $2
	CALL $248($2)
	
.LABEL $label$21
	$2 = *($4 + [28])
	if ( ($2 == 0) ){ goto $label$22 }
	*(($4 + [32])) = $2
	CALL $248($2)
	
.LABEL $label$22
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$23 }
	*(($4 + [20])) = $2
	CALL $248($2)
	
.LABEL $label$23
	if ( ((*(($10 + [40])) & [1]) == 0) ){ goto $label$24 }
	CALL $248(*(($10 + [48])))
	
.LABEL $label$24
	if ( ((*($10 + [8]) & [1]) == 0) ){ goto $label$25 }
	CALL $248(*(($10 + [16])))
	
.LABEL $label$25
	*([0] + [4]) = ($10 + [128])
	return (unreachable)
	
.LABEL $label$17
	CALL $249(($10 + [8]))
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $236 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [140]) == (int_32)$4), [464])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $63($4, $6)
	CALL eosio_assert(((int_32)*($5 + [140]) == (int_32)$4), [464])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [528])
	CALL eosio_assert($6, [2192])
	CALL eosio_assert($6, [2240])
	$6 = CALL db_next_i64(*($5 + [144]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $63($4, $6)
	
.LABEL $label$5
	CALL $237($4, $5)
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $78(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $260(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $260(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $248(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $248(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $248(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	CALL require_auth(*($0 + [8]))
	CALL $260($4, $1)
	$1 = ($0 + [408])
	$2 = CALL db_lowerbound_i64(*($1), *(($0 + [416])), (int_64)-3797231026489524224, (int_64)0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$0 = CALL $158($1, $2)
	*($4 + [24]) = $4
	CALL eosio_assert([1], [576])
	CALL $159($1, $0, (int_64)0, ($4 + [24]))
	goto $label$1 
	
.LABEL $label$2
	$0 = ($0 + [320])
	$3 = *($0)
	*($4 + [24]) = $0
	*($4 + [28]) = $4
	CALL $157(($4 + [16]), $1, $3, ($4 + [24]))
	
.LABEL $label$1
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $248(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [52]) = $1
	*($2 + [48]) = $1
	*($2 + [56]) = ($1 + $0)
	CALL $78(($2 + [48]), ($2 + [8]))
	CALL $78(($2 + [48]), ($2 + [20]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $163(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL $248(*(($2 + [28])))
	
.LABEL $label$6
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $248(*(($2 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	$3 = ($2 + [1])
	$7 = ($10 + [48])
	$6 = [0]
	$5 = ($2 + [8])
	
.LOOP $label$1:
	$4 = $3
	$8 = *($2)
	if ( (($8 & [1]) == 0) ){ goto $label$2 }
	$4 = *($5)
	
.LABEL $label$2
	$4 = *(($4 + $6))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$4 }
	$9 = ($4 + [208])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$9 = ($4 + [169])
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)(($4 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$6 }
	$9 = ($4 + [201])
	goto $label$3 
	
.LABEL $label$6
	$9 = [0]
	CALL eosio_assert([0], [2768])
	$8 = *($2)
	
.LABEL $label$3
	$4 = $3
	if ( (($8 & [1]) == 0) ){ goto $label$7 }
	$4 = *($5)
	
.LABEL $label$7
	$8 = ($9 << [4])
	$4 = *((($4 + $6) + [1]))
	if ( ((uint_32)(($4 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$9 }
	$4 = ($4 + [208])
	goto $label$8 
	
.LABEL $label$9
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$4 = ($4 + [169])
	goto $label$8 
	
.LABEL $label$10
	if ( ((uint_32)(($4 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$11 }
	$4 = ($4 + [201])
	goto $label$8 
	
.LABEL $label$11
	$4 = [0]
	CALL eosio_assert([0], [2768])
	
.LABEL $label$8
	*($7) = ($4 + $8)
	$7 = ($7 + [1])
	$6 = ($6 + [2])
	if ( ((int_32)$6 != (int_32)[64]) ){ goto $label$1 }
	$6 = *($1)
	if ( ($6 & [1]) ){ goto $label$13 }
	$6 = uint_32($6 >> [1])
	$7 = ($1 + [1])
	goto $label$12 
	
.LABEL $label$13
	$6 = *($1 + [4])
	$7 = *($1 + [8])
	
.LABEL $label$12
	CALL sha256($7, $6, ($10 + [16]))
	$6 = [0]
	*($10 + [8]) = [0]
	*($10) = (int_64)0
	
.LOOP $label$14:
	$7 = *((($10 + [16]) + $6))
	CALL $254($10, *((uint_32($7 >> [4]) + [2720])))
	CALL $254($10, *((($7 & [15]) + [2720])))
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$14 }
	$6 = *($10)
	$7 = ($6 & [1])
	$4 = ($10 + [8])
	CALL assert_sha256(( *($4) ? ($10 | [1]) : $7 ), ( *($10 + [4]) ? uint_32($6 >> [1]) : $7 ), ($10 + [48]))
	CALL prints([2752])
	if ( ((*($10) & [1]) == 0) ){ goto $label$15 }
	CALL $248(*($4))
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [80])
}

void .FUNC $47 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0 + [8]))
	CALL $137(($0 + [16]), $1)
}

void .FUNC $46 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0 + [8]))
	CALL $141(($0 + [16]), $1)
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL require_auth(*($0 + [8]))
	*($8 + [8]) = $2
	$3 = *(($0 + [224]))
	$7 = *(($0 + [228]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [200])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [200])), *(($0 + [208])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $63($5, $7)
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [528])
	*($8) = ($8 + [8])
	CALL eosio_assert($7, [576])
	CALL $145($5, $6, (int_64)0, $8)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $44 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL require_auth(*($0 + [8]))
	CALL $147(($0 + [16]), $1, $2)
	CALL $148(($0 + [192]), $1, $2)
}

void .FUNC $222 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)$4), [464])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3689251837816340480, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $87($4, $6)
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)$4), [464])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [1040])
	CALL eosio_assert($6, [2192])
	CALL eosio_assert($6, [2240])
	$6 = CALL db_next_i64(*($5 + [116]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $87($4, $6)
	
.LABEL $label$5
	CALL $143($4, $5)
	$2 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$7:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$6 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = ($0 + [48])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$10 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$5), [464])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3689251709890068480, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$4 = CALL $223($5, $4)
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$5), [464])
	
.LABEL $label$9
	CALL eosio_assert([1], [2192])
	CALL eosio_assert([1], [2240])
	$6 = CALL db_next_i64(*($4 + [28]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	CALL $223($5, $6)
	
.LABEL $label$11
	CALL $224($5, $4)
	
.LABEL $label$8
	$2 = *(($0 + [112]))
	$6 = *(($0 + [116]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$12 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$13:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$12 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$5 = ($0 + [88])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$16 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$5), [464])
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$4 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-3844216343968612352, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$14 }
	$4 = CALL $81($5, $4)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$5), [464])
	
.LABEL $label$15
	CALL eosio_assert([1], [2192])
	CALL eosio_assert([1], [2240])
	$6 = CALL db_next_i64(*($4 + [116]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$17 }
	CALL $81($5, $6)
	
.LABEL $label$17
	CALL $139($5, $4)
	
.LABEL $label$14
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $234 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$4 = *(($0 + [112]))
	$8 = *(($0 + [116]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [88])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)$6), [464])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-3844216343968612352, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $81($6, $8)
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)$6), [464])
	
.LABEL $label$3
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [1040])
	CALL eosio_assert(((uint_64)*($7 + [88]) > (uint_64)(int_64)2), [3504])
	CALL eosio_assert(((int_64)*($7 + [24]) == (int_64)$1), [3552])
	*($9 + [8]) = $3
	CALL eosio_assert($8, [576])
	CALL $235($6, $7, (int_64)0, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $233 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $260($5, ($1 + [16]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $260(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [16])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $248(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $248(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $249 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $226 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($7 + [32]) = ($1 + [8])
	*($7 + [40]) = (int_64)-4503599627370497
	CALL $231(($7 + [24]), ($7 + [32]), ($7 + [40]))
	$1 = *($7 + [28])
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($2 == 0) ){ goto $label$1 }
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$2:
	*($7 + [16]) = *($1)
	CALL $156($7, ($7 + [16]))
	$1 = CALL $256($7, [46], [0])
	if ( ((*($7) & [1]) == 0) ){ goto $label$3 }
	CALL $248(*(($7 + [8])))
	
.LABEL $label$3
	if ( ((int_32)$1 < (int_32)[5]) ){ goto $label$7 }
	$3 = *($7 + [28])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)*($4)) ){ goto $label$6 }
	*($5) = ($1 + [8])
	*($1) = *($3)
	goto $label$5 
	
.LABEL $label$7
	CALL $232(($7 + [24]))
	$1 = *($7 + [28])
	if ( $1 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$6
	CALL $198($0, $3)
	
.LABEL $label$5
	$6 = *($7 + [24])
	*($7 + [40]) = $6
	$1 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$1) != (int_32)[0]), [2192])
	CALL $232(($7 + [40]))
	CALL $183(*($7 + [32]), $1)
	$6 = *($7 + [40])
	*($7 + [24]) = $6
	$1 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	if ( ($1) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	if ( (int_32((*($5) - *($0)) >> [3]) <= $2) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $167 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $63($5, $7)
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	
.LABEL $label$3
	*($8 + [8]) = $2
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [576])
	CALL $168($5, $6, (int_64)0, ($8 + [8]))
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $166 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $165 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*(($10 = $11) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($10 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($10 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$8 = *($1 + [48])
	*($10 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($10 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $8))
	$9 = *($1)
	*($10 + [40]) = $9
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))), [1744])
	$8 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [1824])
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [800])
	$7 = *($1 + [80])
	$4 = *(($1 + [84]))
	$8 = (CASTING uint_64)(uint_32 int_32(($4 - $7) >> [5]))
	$3 = [76]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($7 + [8])
	$5 = ( *(($7 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = (($5 + $3) + [16])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = ($0 + [36])
	$3 = ($3 + [28])
	$4 = *($1 + [124])
	$5 = *(($1 + [128]))
	$6 = ($5 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$3 = (($6 & [-8]) + $3)
	
.LABEL $label$6
	$5 = ($3 + [4])
	if ( ($5 <= [513]) ){ goto $label$8 }
	$3 = CALL malloc($5)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($11 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$7
	*($10 + [28]) = $3
	*($10 + [24]) = $3
	*($10 + [32]) = ($3 + $5)
	CALL $65(($10 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL free($3)
	$9 = *($10 + [40])
	
.LABEL $label$9
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($10 + [4]) = $1
	*($10) = $0
	*($10 + [12]) = $1
	*($10 + [8]) = ($10 + [48])
	*($10 + [16]) = ($10 + [40])
	*($10 + [20]) = ($10 + [80])
	*($10 + [88]) = $10
	CALL $166(($10 + [88]), $7, ($7 + [1]), ($7 + [2]), ($7 + [3]))
	*([0] + [4]) = ($10 + [96])
}

void .FUNC $164 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $63($5, $7)
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	
.LABEL $label$3
	*($8 + [8]) = $2
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [576])
	CALL $165($5, $6, (int_64)0, ($8 + [8]))
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	CALL $260(($3 + [16]), $1)
	CALL $260($3, ($1 + [12]))
	$0 = *($0 + [4])
	$2 = *($0 + [4])
	$1 = (*(*($0)) + int_32($2 >> [1]))
	$0 = *($0)
	if ( (($2 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $260(($3 + [48]), ($3 + [16]))
	CALL $260(($3 + [32]), $3)
	CALL void $1((int_32 ($3 + [48])), (int_32 ($3 + [32])), (int_32 $0))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $248(*($3 + [40]))
	
.LABEL $label$2
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $248(*($3 + [56]))
	
.LABEL $label$3
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	CALL $248(*($3 + [8]))
	
.LABEL $label$4
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $248(*($3 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
}

int_32 .FUNC $162 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [24]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2672])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3797231026489524224)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2608])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2608])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $158(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$3 = *($0 + [4])
	$7 = *($3)
	$6 = ($7 + [104])
	$8 = *($6)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$4 = ($7 + [88])
	$5 = CALL db_lowerbound_i64(*($4), *(($7 + [96])), (int_64)-3797231026489524224, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $158($4, $5)
	*($10 + [4]) = [0]
	*($10) = $4
	$8 = *(*(CALL $162($10) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($7 + [104])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [2544])
	*($1) = *($6)
	$6 = ($1 + [8])
	CALL $250($6, *($3 + [4]))
	$7 = *($1 + [8])
	$3 = ( *(($1 + [12])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($3 + [8])
	$8 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [864])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $69($10, $6)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-3797231026489524224, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $160 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $247(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*(($1 + [16])))
	
.LABEL $label$11
	CALL $248($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $248($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $230 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($1) = *(*($0))
	*($1 + [12]) = *(*($0 + [4]))
	*($1 + [8]) = *(*($0 + [4]))
	$3 = [0]
	*($1 + [16]) = [0]
	*($1 + [24]) = (int_64)0
	CALL $253(($1 + [32]), [1584])
	CALL $253(($1 + [44]), [1584])
	*($1 + [88]) = (int_64)1
	CALL eosio_assert([1], [944])
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [1008])
	*(($1 + [64])) = (int_64)1397703940
	*($1 + [56]) = (int_64)500
	CALL eosio_assert([1], [944])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [1008])
	*(($1 + [80])) = (int_64)1397703940
	*($1 + [72]) = (int_64)0
	*($5 + [24]) = *(*($0))
	CALL $156(($5 + [8]), ($5 + [24]))
	$3 = CALL $256(($5 + [8]), [46], [0])
	*($1 + [96]) = $3
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*($5 + [16]))
	$3 = *(($1 + [96]))
	
.LABEL $label$11
	$4 = ($3 + [-2])
	if ( ((uint_32)($4 & [255]) >= (uint_32)[3]) ){ goto $label$13 }
	$3 = *(((int_32(($4 << [24]) >> [24]) << [2]) + [2480]))
	goto $label$12 
	
.LABEL $label$13
	$3 = ( [57600] ? [43200] : ((int_32)($3 & [255]) == (int_32)[5]) )
	
.LABEL $label$12
	*($1 + [104]) = [0]
	*($1 + [100]) = $3
	*($1 + [108]) = [1]
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $244 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $245($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [12000])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $169 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $168 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*(($10 = $11) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($10 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($10 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$8 = *($1 + [48])
	*($10 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($10 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $8))
	$9 = *($1)
	*($10 + [40]) = $9
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [40]))), [1744])
	$8 = ((int_64)*($1 + [32]) + (int_64)*($7))
	*($1 + [32]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [1824])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))), [1744])
	$8 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [1824])
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [800])
	$7 = *($1 + [80])
	$4 = *(($1 + [84]))
	$8 = (CASTING uint_64)(uint_32 int_32(($4 - $7) >> [5]))
	$3 = [76]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($7 + [8])
	$5 = ( *(($7 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = (($5 + $3) + [16])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = ($0 + [36])
	$3 = ($3 + [28])
	$4 = *($1 + [124])
	$5 = *(($1 + [128]))
	$6 = ($5 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$3 = (($6 & [-8]) + $3)
	
.LABEL $label$6
	$5 = ($3 + [4])
	if ( ($5 <= [513]) ){ goto $label$8 }
	$3 = CALL malloc($5)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($11 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$7
	*($10 + [28]) = $3
	*($10 + [24]) = $3
	*($10 + [32]) = ($3 + $5)
	CALL $65(($10 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL free($3)
	$9 = *($10 + [40])
	
.LABEL $label$9
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($10 + [4]) = $1
	*($10) = $0
	*($10 + [12]) = $1
	*($10 + [8]) = ($10 + [48])
	*($10 + [16]) = ($10 + [40])
	*($10 + [20]) = ($10 + [80])
	*($10 + [88]) = $10
	CALL $169(($10 + [88]), $7, ($7 + [1]), ($7 + [2]), ($7 + [3]))
	*([0] + [4]) = ($10 + [96])
}

int_32 .FUNC $245 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [12086]) == 0) ){ goto $label$2 }
	$7 = *([0] + [12088])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [12086]) = [1]
	$7 = ($7 << [16])
	*([0] + [12088]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [12088])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [12088]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [12086]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [12086]) = [1]
	$3 = ($3 << [16])
	*([0] + [12088]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [12088])
	
.LABEL $label$8
	*([0] + [12088]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $175 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [104]))), [1744])
	$5 = ((int_64)*($1 + [96]) + (int_64)*($3))
	*($1 + [96]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [96]) < (int_64)4611686018427387904), [1824])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [800])
	*($6 + [120]) = ($6 + [112])
	*($6 + [116]) = $6
	*($6 + [112]) = $6
	CALL $106(($6 + [112]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $6, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $242 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $244([3600], $0)
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ($1 + [1])
	$5 = ($1 + [8])
	$6 = ($1 + [4])
	$3 = [0]
	
.LOOP $label$8:
	if ( ((int_32)CALL $256($2, *((( *($5) ? $4 : ($7 & [1]) ) + $3)), [0]) == (int_32)[-1]) ){ goto $label$5 }
	$7 = *($1)
	$3 = ($3 + [1])
	if ( ($3 <= ( *($6) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$7
	CALL $260($0, $1)
	return 
	
.LABEL $label$6
	$3 = ($7 & [1])
	$7 = *($2)
	$7 = ( *($2 + [4]) ? uint_32($7 >> [1]) : $3 )
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$3 }
	CALL $260($0, $1)
	return 
	
.LABEL $label$5
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$4
	CALL $261($0, $1, $3, [-1], $1)
	return 
	
.LABEL $label$3
	if ( (CALL $258($1, [0], $7, ( *($2 + [8]) ? ($2 + [1]) : $3 ), $7) == 0) ){ goto $label$1 }
	CALL $260($0, $1)
	return 
	
.LABEL $label$2
	CALL $260($0, $1)
	return 
	
.LABEL $label$1
	$7 = *($2)
	CALL $261($0, $1, ( *(($2 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) ), [-1], $1)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($1)
	$6 = ( *($1 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ($3 == 0) ){ goto $label$6 }
	$6 = ($6 + [1])
	$4 = ($1 + [1])
	$5 = ($1 + [8])
	
.LOOP $label$8:
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$5 }
	$3 = (( *($5) ? $4 : (*($1) & [1]) ) + $6)
	$6 = ($6 + [-1])
	if ( ((int_32)CALL $256($2, *(($3 + [-2])), [0]) != (int_32)[-1]) ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$7
	CALL $260($0, $1)
	return 
	
.LABEL $label$6
	$4 = ($3 & [1])
	$3 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 >= (uint_32)$3) ){ goto $label$3 }
	CALL $260($0, $1)
	return 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$4
	$3 = *($1)
	if ( ((int_32)$6 != (int_32)( *(($1 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$2 }
	CALL $260($0, $1)
	return 
	
.LABEL $label$3
	if ( (CALL $258($1, ($6 - $3), $3, ( *($2 + [8]) ? ($2 + [1]) : $4 ), $3) == 0) ){ goto $label$1 }
	CALL $260($0, $1)
	return 
	
.LABEL $label$2
	CALL $261($0, $1, [0], $6, $1)
	return 
	
.LABEL $label$1
	$6 = *($2)
	$6 = *($1)
	CALL $261($0, $1, [0], (( *(($1 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) ) - ( *(($2 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )), $1)
}

void .FUNC $240 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	*(($11 = $12) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$7 = [0]
	*($11 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($11 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$9 = *($1 + [48])
	*($11 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($11 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $9))
	$10 = *($1)
	*($11 + [40]) = $10
	CALL eosio_assert([1], [944])
	$4 = ($0 + [36])
	$9 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [1008])
	*(($1 + [24])) = (int_64)1397703940
	*(($1 + [16])) = (int_64)0
	CALL eosio_assert(((int_64)$10 == (int_64)*($1)), [800])
	$8 = *($1 + [80])
	$5 = *(($1 + [84]))
	$9 = (CASTING uint_64)(uint_32 int_32(($5 - $8) >> [5]))
	$7 = [76]
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = *($8 + [8])
	$6 = ( *(($8 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$7 = (($6 + $7) + [16])
	$9 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$9:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$9 }
	$8 = ($8 + [32])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$8 }
	
.LABEL $label$7
	$7 = ($7 + [28])
	$6 = *($1 + [124])
	$8 = *(($1 + [128]))
	$5 = ($8 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$10:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$10 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$11 }
	$7 = (($5 & [-8]) + $7)
	
.LABEL $label$11
	$8 = ($7 + [4])
	if ( ($8 <= [513]) ){ goto $label$13 }
	$7 = CALL malloc($8)
	goto $label$12 
	
.LABEL $label$13
	$7 = ($12 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$12
	*($11 + [28]) = $7
	*($11 + [24]) = $7
	*($11 + [32]) = ($7 + $8)
	CALL $65(($11 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), $2, $7, $8)
	if ( ($8 <= [513]) ){ goto $label$14 }
	CALL free($7)
	$10 = *($11 + [40])
	
.LABEL $label$14
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$15 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($11 + [4]) = $1
	*($11) = $0
	*($11 + [12]) = $1
	*($11 + [8]) = ($11 + [48])
	*($11 + [16]) = ($11 + [40])
	*($11 + [20]) = ($11 + [80])
	*($11 + [88]) = $11
	CALL $242(($11 + [88]), $4, ($4 + [1]), ($4 + [2]), ($4 + [3]))
	*([0] + [4]) = ($11 + [96])
}

void .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $133($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

void .FUNC $51 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [128])
	*([0] + [4]) = $14
	$11 = *($0)
	if ( ((int_64)$11 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$11 != (int_64)$2) ){ goto $label$1 }
	$5 = *($3 + [16])
	$2 = (int_64)0
	$9 = (int_64)59
	$8 = [48]
	$10 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$7 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$6 = ($6 + [165])
	goto $label$5 
	
.LABEL $label$7
	$11 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$3
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$2 }
	if ( ((int_64)$5 != (int_64)$10) ){ goto $label$1 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$9 }
	$6 = uint_32($8 >> [1])
	$12 = ($4 + [1])
	goto $label$8 
	
.LABEL $label$9
	$6 = *($4 + [4])
	$12 = *($4 + [8])
	
.LABEL $label$8
	$8 = CALL strlen([64])
	if ( ($8 == 0) ){ goto $label$11 }
	if ( ((int_32)$6 < (int_32)$8) ){ goto $label$10 }
	$7 = ($12 + $6)
	$13 = $12
	
.LOOP $label$12:
	$6 = (($6 - $8) + [1])
	if ( ($6 == 0) ){ goto $label$10 }
	$6 = CALL memchr($13, [98], $6)
	if ( ($6 == 0) ){ goto $label$10 }
	if ( (CALL memcmp($6, [64], $8) == 0) ){ goto $label$13 }
	$13 = ($6 + [1])
	$6 = ($7 - $13)
	if ( ((int_32)$6 >= (int_32)$8) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	if ( ((int_32)$6 != (int_32)$12) ){ goto $label$10 }
	
.LABEL $label$11
	*(($8 = (($14 + [104]) + [16]))) = *(($3 + [16]))
	*(($6 = (($14 + [104]) + [8]))) = *(($3 + [8]))
	*($14 + [104]) = *($3)
	CALL $261(($14 + [88]), $4, [4], [-1], $4)
	*(($14 + [16])) = *($8)
	*(($14 + [8])) = *($6)
	*($14) = *($14 + [104])
	CALL $56($0, $1, $14, ($14 + [88]))
	if ( ((*($14 + [88]) & [1]) == 0) ){ goto $label$1 }
	CALL $248(*($14 + [96]))
	goto $label$1 
	
.LABEL $label$10
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$15 }
	$6 = uint_32($8 >> [1])
	$12 = ($4 + [1])
	goto $label$14 
	
.LABEL $label$15
	$6 = *($4 + [4])
	$12 = *($4 + [8])
	
.LABEL $label$14
	$8 = CALL strlen([80])
	if ( ($8 == 0) ){ goto $label$17 }
	if ( ((int_32)$6 < (int_32)$8) ){ goto $label$16 }
	$7 = ($12 + $6)
	$13 = $12
	
.LOOP $label$18:
	$6 = (($6 - $8) + [1])
	if ( ($6 == 0) ){ goto $label$16 }
	$6 = CALL memchr($13, [115], $6)
	if ( ($6 == 0) ){ goto $label$16 }
	if ( (CALL memcmp($6, [80], $8) == 0) ){ goto $label$19 }
	$13 = ($6 + [1])
	$6 = ($7 - $13)
	if ( ((int_32)$6 >= (int_32)$8) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$16 }
	if ( ((int_32)$6 != (int_32)$12) ){ goto $label$16 }
	
.LABEL $label$17
	*(($8 = (($14 + [64]) + [16]))) = *(($3 + [16]))
	*(($6 = (($14 + [64]) + [8]))) = *(($3 + [8]))
	*($14 + [64]) = *($3)
	CALL $261(($14 + [48]), $4, [6], [-1], $4)
	*((($14 + [24]) + [16])) = *($8)
	*((($14 + [24]) + [8])) = *($6)
	*($14 + [24]) = *($14 + [64])
	CALL $57($0, $1, ($14 + [24]), ($14 + [48]))
	if ( ((*($14 + [48]) & [1]) == 0) ){ goto $label$1 }
	CALL $248(*($14 + [56]))
	goto $label$1 
	
.LABEL $label$16
	CALL eosio_assert([0], [96])
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [128])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [480]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [484])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $248($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [480]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $248($4)
	
.LABEL $label$1
	CALL $53(($0 + [320]))
	$1 = *(($0 + [304]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [308])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $248($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [304]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $248($4)
	
.LABEL $label$6
	$1 = *(($0 + [264]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [268])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $248($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [264]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $248($4)
	
.LABEL $label$11
	CALL $54(($0 + [224]))
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$16 }
	$3 = ($0 + [180])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	CALL $248($2)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($0 + [176]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $1
	
.LABEL $label$17
	*($3) = $1
	CALL $248($4)
	
.LABEL $label$16
	CALL $55(($0 + [16]))
	return $0
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $248(*(($2 + [16])))
	
.LABEL $label$6
	CALL $248($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $248($4)
	
.LABEL $label$1
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$7 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $248($2)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($0 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $1
	
.LABEL $label$8
	*($3) = $1
	CALL $248($4)
	
.LABEL $label$7
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$12 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	CALL $248($2)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($0 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $1
	
.LABEL $label$13
	*($3) = $1
	CALL $248($4)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$7 = *($2 + [124])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($2 + [128])) = $7
	CALL $248($7)
	
.LABEL $label$6
	$3 = *($2 + [80])
	if ( ($3 == 0) ){ goto $label$7 }
	$5 = ($2 + [84])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$9 }
	$4 = ([0] - $3)
	$7 = ($7 + [-24])
	
.LOOP $label$10:
	if ( ((*($7) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*(($7 + [8])))
	
.LABEL $label$11
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$10 }
	$7 = *(($2 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$7 = $3
	
.LABEL $label$8
	*($5) = $3
	CALL $248($7)
	
.LABEL $label$7
	CALL $248($2)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $248($7)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [116])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [44]) & [1]) == 0) ){ goto $label$6 }
	CALL $248(*(($2 + [52])))
	
.LABEL $label$6
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $248(*(($2 + [40])))
	
.LABEL $label$7
	CALL $248($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $248($2)
	
.LABEL $label$1
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$8 }
	$3 = ($0 + [76])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $248($4)
	
.LABEL $label$12
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($0 + [72]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $1
	
.LABEL $label$9
	*($3) = $1
	CALL $248($2)
	
.LABEL $label$8
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$13 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	if ( ((*($2 + [44]) & [1]) == 0) ){ goto $label$18 }
	CALL $248(*(($2 + [52])))
	
.LABEL $label$18
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$19 }
	CALL $248(*(($2 + [40])))
	
.LABEL $label$19
	CALL $248($2)
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$16 }
	$2 = *(($0 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $1
	
.LABEL $label$14
	*($3) = $1
	CALL $248($2)
	
.LABEL $label$13
	return $0
}

void .FUNC $56 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [480])
	*([0] + [4]) = $17
	CALL require_auth($1)
	$8 = [0]
	$15 = *($2)
	if ( ((uint_64)((int_64)$15 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$10 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [144])
	CALL eosio_assert(((int_64)$15 > (int_64)0), [192])
	$6 = *(($0 + [224]))
	$7 = *(($0 + [228]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$6 }
	$9 = ($7 + [-24])
	$12 = ([0] - $6)
	
.LOOP $label$7:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$6 }
	$7 = $9
	$8 = ($9 + [-24])
	$9 = $8
	if ( ((int_32)($8 + $12) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = ($0 + [200])
	$4 = ($0 + [192])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [140]) == (int_32)$9), [464])
	if ( $8 ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$8 = CALL db_find_i64(*(($0 + [200])), *(($0 + [208])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $63($9, $8) + [140]) == (int_32)$9), [464])
	goto $label$8 
	
.LABEL $label$9
	CALL $91(($0 + [448]), $1)
	CALL $92($4, $1)
	
.LABEL $label$8
	*(($17 + [64])) = [0]
	*($17 + [56]) = (int_64)0
	$9 = CALL strlen([240])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$19 }
	*($17 + [56]) = ($9 << [1])
	$8 = (($17 + [56]) | [1])
	if ( $9 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$7 = (($9 + [16]) & [-16])
	$8 = CALL $247($7)
	*($17 + [56]) = ($7 | [1])
	*($17 + [64]) = $8
	*($17 + [60]) = $9
	
.LABEL $label$18
	CALL memcpy($8, [240], $9)
	
.LABEL $label$17
	*(($8 + $9)) = [0]
	$9 = *($3)
	if ( (( *($3 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) ) == 0) ){ goto $label$21 }
	CALL $58(($17 + [224]), $3, ($17 + [56]), [1])
	CALL $59(($17 + [104]), ($17 + [224]), ($17 + [56]), [1])
	if ( ((*($17 + [224]) & [1]) == 0) ){ goto $label$20 }
	CALL $248(*($17 + [232]))
	goto $label$20 
	
.LABEL $label$21
	CALL $260(($17 + [104]), $3)
	
.LABEL $label$20
	if ( (*($3) & [1]) ){ goto $label$23 }
	*($3) = [0]
	goto $label$22 
	
.LABEL $label$23
	*(*($3 + [8])) = [0]
	*(($3 + [4])) = [0]
	
.LABEL $label$22
	CALL $252($3, [0])
	$9 = (($17 + [104]) + [8])
	*(($3 + [8])) = *($9)
	*($3) = *($17 + [104])
	*($9) = [0]
	*($17 + [104]) = (int_64)0
	if ( ((*($17 + [56]) & [1]) == 0) ){ goto $label$24 }
	CALL $248(*($17 + [64]))
	
.LABEL $label$24
	*($17 + [456]) = [0]
	*($17 + [448]) = (int_64)0
	CALL $260(($17 + [432]), $3)
	*((($17 + [416]) + [8])) = [0]
	*($17 + [416]) = (int_64)0
	$9 = CALL strlen([1088])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$27 }
	*($17 + [416]) = ($9 << [1])
	$8 = (($17 + [416]) | [1])
	if ( $9 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$7 = (($9 + [16]) & [-16])
	$8 = CALL $247($7)
	*($17 + [416]) = ($7 | [1])
	*($17 + [424]) = $8
	*($17 + [420]) = $9
	
.LABEL $label$26
	CALL memcpy($8, [1088], $9)
	
.LABEL $label$25
	*(($8 + $9)) = [0]
	CALL $60(($17 + [432]), ($17 + [416]), ($17 + [448]))
	if ( ((*($17 + [416]) & [1]) == 0) ){ goto $label$28 }
	CALL $248(*($17 + [424]))
	
.LABEL $label$28
	if ( ((*($17 + [432]) & [1]) == 0) ){ goto $label$29 }
	CALL $248(*($17 + [440]))
	
.LABEL $label$29
	CALL $250($3, *($17 + [448]))
	*($17 + [408]) = [0]
	*($17 + [400]) = (int_64)0
	CALL $260(($17 + [384]), $3)
	*(($17 + [376])) = [0]
	*($17 + [368]) = (int_64)0
	$9 = CALL strlen([256])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$32 }
	*($17 + [368]) = ($9 << [1])
	$8 = (($17 + [368]) | [1])
	if ( $9 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$7 = (($9 + [16]) & [-16])
	$8 = CALL $247($7)
	*($17 + [368]) = ($7 | [1])
	*($17 + [376]) = $8
	*($17 + [372]) = $9
	
.LABEL $label$31
	CALL memcpy($8, [256], $9)
	
.LABEL $label$30
	*(($8 + $9)) = [0]
	CALL $60(($17 + [384]), ($17 + [368]), ($17 + [400]))
	if ( ((*($17 + [368]) & [1]) == 0) ){ goto $label$33 }
	CALL $248(*($17 + [376]))
	
.LABEL $label$33
	if ( ((*($17 + [384]) & [1]) == 0) ){ goto $label$34 }
	CALL $248(*($17 + [392]))
	
.LABEL $label$34
	$9 = (*($17 + [404]) - *($17 + [400]))
	CALL eosio_assert((((int_32)$9 == (int_32)[24]) | ((int_32)$9 == (int_32)[36])), [1104])
	CALL $260(($17 + [352]), *($17 + [400]))
	$9 = ( *($17 + [360]) ? (($17 + [352]) | [1]) : (*($17 + [352]) & [1]) )
	$8 = [-1]
	
.LOOP $label$35:
	$7 = ($9 + $8)
	$3 = ($8 + [1])
	$8 = $3
	if ( *(($7 + [1])) ){ goto $label$35 }
	$14 = (CASTING uint_64)(uint_32 $3)
	$10 = (int_64)0
	$15 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$36:
	$13 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$14) ){ goto $label$37 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$8 = ($8 + [165])
	goto $label$38 
	
.LABEL $label$39
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$41 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$40 
	
.LABEL $label$41
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$40
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$13 | (int_64)$11)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$36 }
	CALL $260(($17 + [336]), (*($17 + [400]) + [12]))
	$6 = ($9 & [1])
	$9 = *($17 + [336])
	$3 = uint_32($9 >> [1])
	$7 = *($17 + [340])
	if ( ((uint_32)( $7 ? $3 : $6 ) <= (uint_32)[3]) ){ goto $label$42 }
	$12 = [-1]
	goto $label$13 
	
.LABEL $label$42
	if ( $6 ){ goto $label$46 }
	if ( ($3 == 0) ){ goto $label$44 }
	$7 = (($17 + [336]) | [1])
	$9 = [0]
	$12 = [0]
	
.LOOP $label$47:
	$8 = *(($7 + $9))
	if ( ((uint_32)(($8 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$45 }
	$12 = ((((int_32)$12 * (int_32)[10]) + $8) + [-48])
	$9 = ($9 + [1])
	if ( ($9 <= $3) ){ goto $label$47 }
	goto $label$13 
	
.LABEL $label$46
	if ( ($7 == 0) ){ goto $label$43 }
	$3 = *(($17 + [344]))
	$9 = [0]
	$12 = [0]
	
.LOOP $label$48:
	$8 = *(($3 + $9))
	if ( ((uint_32)(($8 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$45 }
	$12 = ((((int_32)$12 * (int_32)[10]) + $8) + [-48])
	$9 = ($9 + [1])
	if ( ($9 <= $7) ){ goto $label$48 }
	goto $label$13 
	
.LABEL $label$45
	$12 = [-1]
	if ( $6 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$44
	$12 = [0]
	goto $label$11 
	
.LABEL $label$43
	$12 = [0]
	goto $label$12 
	
.LABEL $label$16
	CALL $249(($17 + [56]))
	
.LABEL $label$15
	CALL $249(($17 + [416]))
	
.LABEL $label$14
	CALL $249(($17 + [368]))
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $248(*($17 + [344]))
	
.LABEL $label$11
	$14 = (int_64)0
	$9 = *($17 + [400])
	if ( ((int_32)(*($17 + [404]) - $9) != (int_32)[36]) ){ goto $label$49 }
	CALL $260(($17 + [224]), ($9 + [24]))
	$6 = (*($17 + [224]) & [1])
	$5 = *($17 + [232])
	$9 = ( $5 ? (($17 + [224]) | [1]) : $6 )
	$8 = [-1]
	
.LOOP $label$50:
	$7 = ($9 + $8)
	$3 = ($8 + [1])
	$8 = $3
	if ( *(($7 + [1])) ){ goto $label$50 }
	$16 = (CASTING uint_64)(uint_32 $3)
	$10 = (int_64)0
	$15 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$51:
	$13 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$16) ){ goto $label$52 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$8 = ($8 + [165])
	goto $label$53 
	
.LABEL $label$54
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$56 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$55 
	
.LABEL $label$56
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$55
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$51 }
	if ( ($6 == 0) ){ goto $label$49 }
	CALL $248($5)
	
.LABEL $label$49
	$14 = CALL $93($4, $1, $14)
	CALL eosio_assert(((int_32)uint_32($12 >> [31]) ^ (int_32)[1]), [1152])
	CALL eosio_assert(((int_64)$14 != (int_64)$1), [1200])
	$6 = ($0 + [16])
	CALL $94($6, $11)
	CALL $61(($17 + [224]), $6, $11)
	CALL eosio_assert(((int_32)*($17 + [240]) == (int_32)$12), [1248])
	$13 = *($2)
	CALL eosio_assert(((int_64)*($17 + [280]) <= (int_64)$13), [1312])
	*($17 + [208]) = $13
	$15 = *($2 + [8])
	*($17 + [216]) = $15
	$7 = (uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	CALL eosio_assert($7, [944])
	$3 = ($0 + [320])
	$10 = (uint_64)*($17 + [216]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$60 }
	
.LOOP $label$61:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$58 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$61 }
	
.LABEL $label$60
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$8 = [0]
	
.LABEL $label$57
	CALL eosio_assert($8, [1008])
	*((($17 + [24]) + [8])) = *((($17 + [208]) + [8]))
	*($17 + [24]) = *($17 + [208])
	CALL $95($3, ($17 + [24]), ($17 + [224]))
	CALL eosio_assert($7, [944])
	$10 = (uint_64)$15 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$64:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$63 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$65 }
	
.LOOP $label$66:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$63 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$66 }
	
.LABEL $label$65
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$64 }
	goto $label$62 
	
.LABEL $label$63
	$8 = [0]
	
.LABEL $label$62
	CALL eosio_assert($8, [1008])
	CALL eosio_assert(((int_64)*(($17 + [288])) == (int_64)$15), [1376])
	$13 = (int_64)
	CALL eosio_assert(((int_64)$13($13 - *(($17 + [280])))) > (int_64)-4611686018427387904), [1424])
	CALL eosio_assert(((int_64)$13 < (int_64)4611686018427387904), [1456])
	*($17 + [200]) = (int_64)1397703940
	*($17 + [192]) = (int_64)0
	CALL eosio_assert([1], [944])
	$10 = (uint_64)*($17 + [200]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$69:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$68 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$70 }
	
.LOOP $label$71:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$68 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$71 }
	
.LABEL $label$70
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$69 }
	goto $label$67 
	
.LABEL $label$68
	$8 = [0]
	
.LABEL $label$67
	CALL eosio_assert($8, [1008])
	*($17 + [184]) = (int_64)1397703940
	*($17 + [176]) = (int_64)0
	CALL eosio_assert([1], [944])
	$10 = (uint_64)*($17 + [184]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$74:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$73 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$75 }
	
.LOOP $label$76:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$73 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$76 }
	
.LABEL $label$75
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$74 }
	goto $label$72 
	
.LABEL $label$73
	$8 = [0]
	
.LABEL $label$72
	CALL eosio_assert($8, [1008])
	*($17 + [168]) = $15
	*(($17 + [16])) = $15
	*($17 + [160]) = $13
	*($17 + [8]) = $13
	CALL $96($4, $1, ($17 + [224]), $14, ($17 + [8]), ($17 + [176]), ($17 + [192]))
	if ( ((int_64)*($17 + [312]) != (int_64)2) ){ goto $label$77 }
	$12 = *(($0 + [304]))
	$7 = *(($0 + [308]))
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$78 }
	$9 = ($7 + [-24])
	$3 = ([0] - $12)
	
.LOOP $label$79:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$78 }
	$7 = $9
	$8 = ($9 + [-24])
	$9 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$79 }
	
.LABEL $label$78
	$9 = ($0 + [280])
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$81 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$9), [464])
	if ( $8 ){ goto $label$77 }
	goto $label$80 
	
.LABEL $label$81
	$8 = CALL db_find_i64(*(($0 + [280])), *(($0 + [288])), (int_64)-3689428501300510720, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$80 }
	CALL eosio_assert(((int_32)*(CALL $97($9, $8) + [8]) == (int_32)$9), [464])
	goto $label$77 
	
.LABEL $label$80
	*(($9 = (($17 + [144]) + [8]))) = *((($17 + [192]) + [8]))
	*($17 + [144]) = *($17 + [192])
	*((($17 + [104]) + [8])) = *($9)
	*($17 + [104]) = *($17 + [144])
	$9 = [0]
	$8 = ($0 + [328])
	$7 = CALL db_lowerbound_i64(*($8), *(($0 + [336])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$82 }
	$9 = CALL $98($8, $7)
	
.LABEL $label$82
	$7 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($7, [1488])
	*($17 + [56]) = ($17 + [104])
	CALL eosio_assert($7, [576])
	CALL $99($8, $9, (int_64)0, ($17 + [56]))
	
.LABEL $label$77
	$16 = *($0 + [8])
	$10 = (int_64)0
	$13 = (int_64)59
	$9 = [1536]
	$14 = (int_64)0
	
.LOOP $label$83:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$88 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$87 }
	$8 = ($8 + [165])
	goto $label$86 
	
.LABEL $label$88
	$15 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$87
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$86
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$85
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$84
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$83 }
	*($17 + [96]) = $14
	*($17 + [88]) = $16
	$10 = (int_64)0
	$15 = (int_64)59
	$9 = [1552]
	$14 = (int_64)0
	
.LOOP $label$89:
	$13 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$90 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$92 }
	$8 = ($8 + [165])
	goto $label$91 
	
.LABEL $label$92
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$91
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$90
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$89 }
	$10 = (int_64)0
	$13 = (int_64)59
	$9 = [1568]
	$16 = (int_64)0
	
.LOOP $label$93:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$98 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$8 = ($8 + [165])
	goto $label$96 
	
.LABEL $label$98
	$15 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$97
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$95
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$94
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$93 }
	*(($17 + [48])) = [0]
	*($17 + [40]) = (int_64)0
	$9 = CALL strlen([1584])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$99 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$102 }
	*($17 + [40]) = ($9 << [1])
	$8 = (($17 + [40]) | [1])
	if ( $9 ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$102
	$7 = (($9 + [16]) & [-16])
	$8 = CALL $247($7)
	*($17 + [40]) = ($7 | [1])
	*($17 + [48]) = $8
	*($17 + [44]) = $9
	
.LABEL $label$101
	CALL memcpy($8, [1584], $9)
	
.LABEL $label$100
	*(($8 + $9)) = [0]
	*(($17 + [76])) = *($17 + [44])
	*($17 + [64]) = $1
	$9 = (($17 + [40]) + [8])
	*(($17 + [80])) = *($9)
	*($17 + [56]) = *(($0 + [8]))
	*($17 + [72]) = *($17 + [40])
	*($17 + [40]) = [0]
	*($17 + [44]) = [0]
	*($9) = [0]
	$9 = CALL $100(($17 + [104]), ($17 + [88]), $14, $16, ($17 + [56]))
	CALL $101(($17 + [464]), $9)
	$8 = *($17 + [464])
	CALL send_inline($8, (*($17 + [468]) - $8))
	$8 = *($17 + [464])
	if ( ($8 == 0) ){ goto $label$103 }
	*($17 + [468]) = $8
	CALL $248($8)
	
.LABEL $label$103
	$8 = *($9 + [28])
	if ( ($8 == 0) ){ goto $label$104 }
	*(($9 + [32])) = $8
	CALL $248($8)
	
.LABEL $label$104
	$8 = *($9 + [16])
	if ( ($8 == 0) ){ goto $label$105 }
	*(($9 + [20])) = $8
	CALL $248($8)
	
.LABEL $label$105
	if ( ((*(($17 + [72])) & [1]) == 0) ){ goto $label$106 }
	CALL $248(*(($17 + [80])))
	
.LABEL $label$106
	if ( ((*($17 + [40]) & [1]) == 0) ){ goto $label$107 }
	CALL $248(*(($17 + [48])))
	
.LABEL $label$107
	CALL $102($6, $1, $11)
	if ( ((*($17 + [268]) & [1]) == 0) ){ goto $label$108 }
	CALL $248(*(($17 + [276])))
	
.LABEL $label$108
	if ( ((*($17 + [256]) & [1]) == 0) ){ goto $label$109 }
	CALL $248(*(($17 + [264])))
	
.LABEL $label$109
	if ( ((*($17 + [352]) & [1]) == 0) ){ goto $label$110 }
	CALL $248(*(($17 + [360])))
	
.LABEL $label$110
	$7 = *($17 + [400])
	if ( ($7 == 0) ){ goto $label$111 }
	$9 = *($17 + [404])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$113 }
	$8 = ([0] - $7)
	$9 = ($9 + [-12])
	
.LOOP $label$114:
	if ( ((*($9) & [1]) == 0) ){ goto $label$115 }
	CALL $248(*(($9 + [8])))
	
.LABEL $label$115
	$9 = ($9 + [-12])
	if ( ((int_32)($9 + $8) != (int_32)[-12]) ){ goto $label$114 }
	$9 = *($17 + [400])
	goto $label$112 
	
.LABEL $label$113
	$9 = $7
	
.LABEL $label$112
	*($17 + [404]) = $7
	CALL $248($9)
	
.LABEL $label$111
	$7 = *($17 + [448])
	if ( ($7 == 0) ){ goto $label$116 }
	$9 = *($17 + [452])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$118 }
	$8 = ([0] - $7)
	$9 = ($9 + [-12])
	
.LOOP $label$119:
	if ( ((*($9) & [1]) == 0) ){ goto $label$120 }
	CALL $248(*(($9 + [8])))
	
.LABEL $label$120
	$9 = ($9 + [-12])
	if ( ((int_32)($9 + $8) != (int_32)[-12]) ){ goto $label$119 }
	$9 = *($17 + [448])
	goto $label$117 
	
.LABEL $label$118
	$9 = $7
	
.LABEL $label$117
	*($17 + [452]) = $7
	CALL $248($9)
	
.LABEL $label$116
	*([0] + [4]) = ($17 + [480])
	return (unreachable)
	
.LABEL $label$99
	CALL $249(($17 + [40]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [240])
	*([0] + [4]) = $12
	CALL require_auth($1)
	$6 = [0]
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$9 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [144])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [192])
	*($12 + [216]) = [0]
	*($12 + [208]) = (int_64)0
	*(($12 + [184])) = [0]
	*($12 + [176]) = (int_64)0
	$7 = CALL strlen([240])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$10 }
	*($12 + [176]) = ($7 << [1])
	$6 = (($12 + [176]) | [1])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = (($7 + [16]) & [-16])
	$6 = CALL $247($4)
	*($12 + [176]) = ($4 | [1])
	*($12 + [184]) = $6
	*($12 + [180]) = $7
	
.LABEL $label$9
	CALL memcpy($6, [240], $7)
	
.LABEL $label$8
	*(($6 + $7)) = [0]
	$7 = *($3)
	if ( (( *($3 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ) == 0) ){ goto $label$12 }
	CALL $58(($12 + [32]), $3, ($12 + [176]), [1])
	CALL $59(($12 + [192]), ($12 + [32]), ($12 + [176]), [1])
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*($12 + [40]))
	goto $label$11 
	
.LABEL $label$12
	CALL $260(($12 + [192]), $3)
	
.LABEL $label$11
	if ( (*($3) & [1]) ){ goto $label$14 }
	*($3) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*($3 + [8])) = [0]
	*(($3 + [4])) = [0]
	
.LABEL $label$13
	CALL $252($3, [0])
	$7 = (($12 + [192]) + [8])
	*(($3 + [8])) = *($7)
	*($3) = *($12 + [192])
	*($7) = [0]
	*($12 + [192]) = (int_64)0
	if ( ((*($12 + [176]) & [1]) == 0) ){ goto $label$15 }
	CALL $248(*($12 + [184]))
	
.LABEL $label$15
	CALL $260(($12 + [160]), $3)
	*((($12 + [144]) + [8])) = [0]
	*($12 + [144]) = (int_64)0
	$7 = CALL strlen([256])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$18 }
	*($12 + [144]) = ($7 << [1])
	$3 = (($12 + [144]) | [1])
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$6 = (($7 + [16]) & [-16])
	$3 = CALL $247($6)
	*($12 + [144]) = ($6 | [1])
	*($12 + [152]) = $3
	*($12 + [148]) = $7
	
.LABEL $label$17
	CALL memcpy($3, [256], $7)
	
.LABEL $label$16
	*(($3 + $7)) = [0]
	CALL $60(($12 + [160]), ($12 + [144]), ($12 + [208]))
	if ( ((*($12 + [144]) & [1]) == 0) ){ goto $label$19 }
	CALL $248(*($12 + [152]))
	
.LABEL $label$19
	if ( ((*($12 + [160]) & [1]) == 0) ){ goto $label$20 }
	CALL $248(*($12 + [168]))
	
.LABEL $label$20
	CALL eosio_assert(((int_32)(*($12 + [212]) - *($12 + [208])) == (int_32)[24]), [272])
	CALL $260(($12 + [192]), *($12 + [208]))
	CALL $260(($12 + [176]), (*($12 + [208]) + [12]))
	$7 = *($12 + [176])
	CALL eosio_assert(((int_32)( *($12 + [180]) ? uint_32($7 >> [1]) : ($7 & [1]) ) == (int_32)[53]), [320])
	$7 = ( *($12 + [200]) ? (($12 + [192]) | [1]) : (*($12 + [192]) & [1]) )
	$3 = [-1]
	
.LOOP $label$21:
	$6 = ($7 + $3)
	$4 = ($3 + [1])
	$3 = $4
	if ( *(($6 + [1])) ){ goto $label$21 }
	$5 = (CASTING uint_64)(uint_32 $4)
	$9 = (int_64)0
	$8 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$22:
	$11 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$5) ){ goto $label$23 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$3 = ($3 + [165])
	goto $label$24 
	
.LABEL $label$25
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$27 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$26 
	
.LABEL $label$27
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$26
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$22 }
	$7 = ($0 + [16])
	CALL $61(($12 + [32]), $7, $10)
	CALL eosio_assert(((int_64)*($12 + [120]) == (int_64)3), [368])
	CALL eosio_assert(((int_64)*($2) > (int_64)2999), [400])
	CALL require_auth(*($12 + [56]))
	CALL $260(($12 + [16]), ($12 + [176]))
	CALL $62($7, $10, ($12 + [16]))
	if ( ((*($12 + [16]) & [1]) == 0) ){ goto $label$28 }
	CALL $248(*($12 + [24]))
	
.LABEL $label$28
	CALL $260($12, ($12 + [176]))
	*($12 + [232]) = $10
	$2 = *(($0 + [224]))
	$6 = *(($0 + [228]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$29 }
	$7 = ($6 + [-24])
	$4 = ([0] - $2)
	
.LOOP $label$30:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$29 }
	$6 = $7
	$3 = ($7 + [-24])
	$7 = $3
	if ( ((int_32)($3 + $4) != (int_32)[-24]) ){ goto $label$30 }
	
.LABEL $label$29
	$3 = ($0 + [200])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$32 }
	$7 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [140]) == (int_32)$3), [464])
	goto $label$31 
	
.LABEL $label$32
	$7 = [0]
	$6 = CALL db_find_i64(*(($0 + [200])), *(($0 + [208])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$31 }
	$7 = CALL $63($3, $6)
	CALL eosio_assert(((int_32)*($7 + [140]) == (int_32)$3), [464])
	
.LABEL $label$31
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [528])
	*($12 + [228]) = $12
	*($12 + [224]) = ($12 + [232])
	CALL eosio_assert($6, [576])
	CALL $64($3, $7, (int_64)0, ($12 + [224]))
	if ( ((*($12) & [1]) == 0) ){ goto $label$33 }
	CALL $248(*($12 + [8]))
	
.LABEL $label$33
	if ( ((*($12 + [76]) & [1]) == 0) ){ goto $label$34 }
	CALL $248(*(($12 + [84])))
	
.LABEL $label$34
	if ( ((*($12 + [64]) & [1]) == 0) ){ goto $label$35 }
	CALL $248(*(($12 + [72])))
	
.LABEL $label$35
	if ( ((*($12 + [176]) & [1]) == 0) ){ goto $label$36 }
	CALL $248(*($12 + [184]))
	
.LABEL $label$36
	if ( ((*($12 + [192]) & [1]) == 0) ){ goto $label$37 }
	CALL $248(*(($12 + [200])))
	
.LABEL $label$37
	$6 = *($12 + [208])
	if ( ($6 == 0) ){ goto $label$38 }
	$7 = *($12 + [212])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$40 }
	$3 = ([0] - $6)
	$7 = ($7 + [-12])
	
.LOOP $label$41:
	if ( ((*($7) & [1]) == 0) ){ goto $label$42 }
	CALL $248(*(($7 + [8])))
	
.LABEL $label$42
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $3) != (int_32)[-12]) ){ goto $label$41 }
	$7 = *($12 + [208])
	goto $label$39 
	
.LABEL $label$40
	$7 = $6
	
.LABEL $label$39
	*($12 + [212]) = $6
	CALL $248($7)
	
.LABEL $label$38
	*([0] + [4]) = ($12 + [240])
	return (unreachable)
	
.LABEL $label$7
	CALL $249(($12 + [176]))
	
.LABEL $label$6
	CALL $249(($12 + [144]))
	(unreachable)
}

int_32 .FUNC $247 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [12092])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $173 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($1 + [24]) = [200]
	$4 = *($1)
	CALL eosio_assert([1], [800])
	*($5 + [120]) = ($5 + [112])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $106(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $5, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0)
	$4 = int_32((*($0 + [4]) - $7) >> [5])
	$6 = ($4 + [1])
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	$5 = [134217727]
	$7 = (*($0 + [8]) - $7)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$7 = int_32($7 >> [4])
	$5 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$6 = CALL $247(($5 << [5]))
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($7 = ($6 + ($4 << [5])))) = *($1)
	CALL $260(($7 + [8]), ($1 + [8]))
	*($7 + [24]) = *($1 + [24])
	$2 = ($6 + ($5 << [5]))
	$3 = ($7 + [32])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$7 }
	$4 = ([0] - $1)
	$1 = ($5 + [-16])
	
.LOOP $label$8:
	*(($7 + [-32])) = *(($1 + [-16]))
	$5 = ($1 + [-4])
	*(($7 + [-20])) = *($5)
	$6 = ($1 + [-8])
	*(($7 + [-24])) = *($6)
	*($6) = [0]
	*($5) = [0]
	*($1) = [0]
	*(($7 + [-8])) = *(($1 + [8]))
	$7 = ($7 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $4) != (int_32)[-16]) ){ goto $label$8 }
	$1 = *(($0 + [4]))
	$5 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$5 = $1
	
.LABEL $label$6
	*($0) = $7
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$9 }
	$7 = ([0] - $5)
	$1 = ($1 + [-24])
	
.LOOP $label$10:
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*(($1 + [8])))
	
.LABEL $label$11
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $7) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $248($5)
	
.LABEL $label$12
	(unreachable)
	(unreachable)
}

void .FUNC $153 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $247([128])
	CALL $84($3)
	*($3 + [112]) = $1
	CALL $154(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [116])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $86(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$4 }
	CALL $248(*(($1 + [52])))
	
.LABEL $label$4
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $248(*(($1 + [40])))
	
.LABEL $label$5
	CALL $248($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$3 = *(*($0))
	*(($6 + [12])) = (int_64)0
	*($6) = $3
	*($6 + [8]) = [0]
	$2 = ($6 + [8])
	$0 = CALL strlen([1584])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*(($6 + [8])) = ($0 << [1])
	$5 = ($2 + [1])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($0 + [16]) & [-16])
	$5 = CALL $247($4)
	*(($6 + [8])) = ($4 | [1])
	*(($6 + [16])) = $5
	*(($6 + [12])) = $0
	
.LABEL $label$3
	CALL memcpy($5, [1584], $0)
	
.LABEL $label$2
	*(($5 + $0)) = [0]
	*($6 + [24]) = (int_64)3
	$5 = ($1 + [84])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)*(($1 + [88]))) ){ goto $label$6 }
	*($0) = *($6)
	CALL $260(($0 + [8]), $2)
	*($0 + [24]) = *(($6 + [24]))
	*($5) = (*($5) + [32])
	goto $label$5 
	
.LABEL $label$6
	CALL $152(($1 + [80]), $6)
	
.LABEL $label$5
	if ( ((*(($6 + [8])) & [1]) == 0) ){ goto $label$7 }
	CALL $248(*(($6 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($6 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $249($2)
}

void .FUNC $151 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $247([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [2492]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $261($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $252($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $157 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $247([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $161(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $160(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL $248(*(($3 + [16])))
	
.LABEL $label$4
	CALL $248($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	CALL $155(*($0 + [4]), $1)
	$5 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [79])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *($1 + [44])
	$3 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $83($7, $1)
	$4 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)-3844216343968612352, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($1) = *(*($0))
	*($1 + [12]) = *(*($0 + [4]))
	*($1 + [8]) = *(*($0 + [4]))
	$3 = [0]
	*($1 + [16]) = [0]
	*($1 + [24]) = *(*($0 + [8]))
	CALL $253(($1 + [32]), [1584])
	CALL $253(($1 + [44]), [1584])
	*($1 + [88]) = (int_64)3
	CALL eosio_assert([1], [944])
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [1008])
	*(($1 + [64])) = (int_64)1397703940
	*($1 + [56]) = (int_64)500
	CALL eosio_assert([1], [944])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [1008])
	*(($1 + [80])) = (int_64)1397703940
	*($1 + [72]) = (int_64)0
	*($5 + [24]) = *(*($0))
	CALL $156(($5 + [8]), ($5 + [24]))
	$3 = CALL $256(($5 + [8]), [46], [0])
	*($1 + [96]) = $3
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*($5 + [16]))
	$3 = *(($1 + [96]))
	
.LABEL $label$11
	$0 = ($3 + [-2])
	if ( ((uint_32)($0 & [255]) >= (uint_32)[3]) ){ goto $label$13 }
	$3 = *(((int_32(($0 << [24]) >> [24]) << [2]) + [2480]))
	goto $label$12 
	
.LABEL $label$13
	$3 = ( [57600] ? [43200] : ((int_32)($3 & [255]) == (int_32)[5]) )
	
.LABEL $label$12
	*($1 + [104]) = [0]
	*($1 + [100]) = $3
	*($1 + [108]) = [1]
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [880])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $247([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [912])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $78(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $160(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $248(*(($4 + [16])))
	
.LABEL $label$10
	CALL $248($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $159 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$4 = *($1)
	$5 = ($1 + [8])
	CALL $250($5, *($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [800])
	$3 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [8])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = ($8 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [864])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $69($9, $5)
	CALL db_update_i64(*($1 + [24]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $179 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*(($10 = $11) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$7 = [0]
	*($10 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($10 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$8 = *($1 + [48])
	*($10 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($10 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $8))
	$9 = *($1)
	*($10 + [40]) = $9
	$6 = *($1 + [80])
	$5 = *(($1 + [84]))
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$2 }
	$5 = int_32(($5 - $6) >> [5])
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	$5 = int_32(($5 - $6) >> [5])
	$8 = *(*($3))
	
.LOOP $label$4:
	if ( ((int_64)*($6) == (int_64)$8) ){ goto $label$3 }
	$6 = ($6 + [32])
	$7 = ($7 + [1])
	if ( ($7 <= $5) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	*(($6 + [24])) = (int_64)5
	
.LABEL $label$1
	$8 = $9
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	CALL eosio_assert([0], [736])
	$8 = *($1)
	
.LABEL $label$5
	$4 = ($0 + [36])
	CALL eosio_assert(((int_64)$9 == (int_64)$8), [800])
	$7 = *(($1 + [80]))
	$3 = *(($1 + [84]))
	$8 = (CASTING uint_64)(uint_32 int_32(($3 - $7) >> [5]))
	$6 = [76]
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = *($7 + [8])
	$5 = ( *(($7 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$6 = (($5 + $6) + [16])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = ($6 + [28])
	$5 = *($1 + [124])
	$7 = *(($1 + [128]))
	$3 = ($7 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($3 >> [3]))
	
.LOOP $label$10:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$11 }
	$6 = (($3 & [-8]) + $6)
	
.LABEL $label$11
	$7 = ($6 + [4])
	if ( ($7 <= [513]) ){ goto $label$13 }
	$6 = CALL malloc($7)
	goto $label$12 
	
.LABEL $label$13
	$6 = ($11 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$12
	*($10 + [28]) = $6
	*($10 + [24]) = $6
	*($10 + [32]) = ($6 + $7)
	CALL $65(($10 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), $2, $6, $7)
	if ( ($7 <= [513]) ){ goto $label$14 }
	CALL free($6)
	$9 = *($10 + [40])
	
.LABEL $label$14
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$15 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($10 + [4]) = $1
	*($10) = $0
	*($10 + [12]) = $1
	*($10 + [8]) = ($10 + [48])
	*($10 + [16]) = ($10 + [40])
	*($10 + [20]) = ($10 + [80])
	*($10 + [88]) = $10
	CALL $180(($10 + [88]), $4, ($4 + [1]), ($4 + [2]), ($4 + [3]))
	*([0] + [4]) = ($10 + [96])
}

void .FUNC $224 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [2272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [2320])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2384])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $248($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $248($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $183 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [2272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [2320])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2384])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $248($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $248($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
	$7 = *(($1 + [40]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-3538024836733337600, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx_double_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [864])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [864])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [864])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [864])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $248 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $225 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $247(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $248($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $248($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $67($0, ($1 + [80]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [116]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $68($0, ($1 + [124]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	*(($12 = $13) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$9 = [0]
	*($12 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($12 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$10 = *($1 + [48])
	*($12 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($12 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $10))
	$11 = *($1)
	*($12 + [40]) = $11
	$6 = *($1 + [80])
	$7 = *(($1 + [84]))
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$2 }
	$6 = $7
	goto $label$1 
	
.LABEL $label$2
	$4 = int_32(($7 - $6) >> [5])
	$10 = *(*($3))
	$9 = [0]
	$8 = [24]
	
.LOOP $label$4:
	$5 = ($6 + $8)
	if ( ((int_64)*(($5 + [-24])) == (int_64)$10) ){ goto $label$3 }
	$8 = ($8 + [32])
	$9 = ($9 + [1])
	if ( ($9 <= $4) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	CALL $250(($5 + [-16]), *($3 + [4]))
	*((($6 = *(($1 + [80]))) + $8)) = (int_64)4
	$7 = *(($1 + [84]))
	
.LABEL $label$1
	if ( ((int_32)$9 != (int_32)int_32(($7 - $6) >> [5])) ){ goto $label$5 }
	CALL eosio_assert([0], [736])
	
.LABEL $label$5
	$4 = ($0 + [36])
	CALL eosio_assert(((int_64)$11 == (int_64)*($1)), [800])
	$9 = *(($1 + [80]))
	$5 = *(($1 + [84]))
	$10 = (CASTING uint_64)(uint_32 int_32(($5 - $9) >> [5]))
	$8 = [76]
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = *($9 + [8])
	$6 = ( *(($9 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$8 = (($6 + $8) + [16])
	$10 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$9:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$9 }
	$9 = ($9 + [32])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$8 }
	
.LABEL $label$7
	$8 = ($8 + [28])
	$6 = *($1 + [124])
	$9 = *(($1 + [128]))
	$5 = ($9 - $6)
	$10 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$10:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$10 }
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$11 }
	$8 = (($5 & [-8]) + $8)
	
.LABEL $label$11
	$9 = ($8 + [4])
	if ( ($9 <= [513]) ){ goto $label$13 }
	$8 = CALL malloc($9)
	goto $label$12 
	
.LABEL $label$13
	$8 = ($13 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$12
	*($12 + [28]) = $8
	*($12 + [24]) = $8
	*($12 + [32]) = ($8 + $9)
	CALL $65(($12 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), $2, $8, $9)
	if ( ($9 <= [513]) ){ goto $label$14 }
	CALL free($8)
	$11 = *($12 + [40])
	
.LABEL $label$14
	if ( (uint_64)($11 <= *($0 + [16])) ){ goto $label$15 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($12 + [4]) = $1
	*($12) = $0
	*($12 + [12]) = $1
	*($12 + [8]) = ($12 + [48])
	*($12 + [16]) = ($12 + [40])
	*($12 + [20]) = ($12 + [80])
	*($12 + [88]) = $12
	CALL $66(($12 + [88]), $4, ($4 + [1]), ($4 + [2]), ($4 + [3]))
	*([0] + [4]) = ($12 + [96])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [864])
	CALL memcpy(*($7), ($8 + [15]), [1])
	$6 = (*($7) + [1])
	*($7) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) > (int_32)[7]), [864])
	CALL memcpy(*($4), $7, [8])
	*($4) = (*($4) + [8])
	$6 = CALL $69($0, ($7 + [8]))
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($6 + [4]), ($7 + [24]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	$7 = ($7 + [32])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *(($1 + [32]))
	$7 = *(($1 + [36]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$3 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($1 + [8])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [464])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$4 = CALL db_find_i64(*(($1 + [8])), *(($1 + [16])), (int_64)-3689251837816340480, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $87($6, $4)
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [464])
	
.LABEL $label$3
	$5 = *(($1 + [112]))
	$7 = *(($1 + [116]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$5 }
	$6 = ($7 + [-24])
	$3 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$5 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($1 + [88])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$10 }
	$4 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$6), [464])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = [0]
	$7 = CALL db_find_i64(*(($1 + [88])), *(($1 + [96])), (int_64)-3844216343968612352, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	$4 = CALL $81($6, $7)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$6), [464])
	
.LABEL $label$11
	if ( ($8 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert([1], [1040])
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1040])
	$8 = $4
	
.LABEL $label$7
	*($0) = *($8)
	*(($0 + [24])) = *(($8 + [24]))
	*(($0 + [16])) = *(($8 + [16]))
	*(($0 + [8])) = *(($8 + [8]))
	CALL $260(($0 + [32]), ($8 + [32]))
	CALL $260(($0 + [44]), ($8 + [44]))
	CALL memcpy(($0 + [56]), ($8 + [56]), [56])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [32])
	*([0] + [4]) = $13
	$9 = *($2 + [4])
	if ( ((int_32)$9 == (int_32)*($2 + [8])) ){ goto $label$2 }
	CALL $260($9, $0)
	*(($0 = ($2 + [4]))) = (*($0) + [12])
	goto $label$1 
	
.LABEL $label$2
	CALL $89($2, $0)
	
.LABEL $label$1
	$0 = *($1)
	if ( ($0 & [1]) ){ goto $label$4 }
	$11 = uint_32($0 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$11 = *($1 + [4])
	
.LABEL $label$3
	*($13 + [24]) = [0]
	*($13 + [16]) = (int_64)0
	$4 = ($1 + [1])
	$3 = (($13 + [16]) | [1])
	
.LOOP $label$6:
	$10 = ($2 + [4])
	CALL $250(($13 + [16]), (*($10) + [-12]))
	$8 = *($13 + [16])
	$12 = ($8 & [1])
	$9 = [0]
	$6 = ($0 & [1])
	$0 = *($1)
	$0 = ( *(($1 + [4])) ? uint_32($0 >> [1]) : $6 )
	if ( ($0 == 0) ){ goto $label$7 }
	$9 = ( *($13 + [20]) ? uint_32($8 >> [1]) : $12 )
	if ( ((int_32)$9 < (int_32)$0) ){ goto $label$5 }
	$5 = ( *((($13 + [16]) + [8])) ? $3 : $12 )
	$7 = ($5 + $9)
	$6 = ( *(($1 + [8])) ? $4 : $6 )
	$8 = *($6)
	$12 = $5
	
.LOOP $label$8:
	$9 = (($9 - $0) + [1])
	if ( ($9 == 0) ){ goto $label$5 }
	$9 = CALL memchr($12, $8, $9)
	if ( ($9 == 0) ){ goto $label$5 }
	if ( (CALL memcmp($9, $6, $0) == 0) ){ goto $label$9 }
	$12 = ($9 + [1])
	$9 = ($7 - $12)
	if ( ((int_32)$9 >= (int_32)$0) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$5 }
	$9 = ($9 - $5)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$5 }
	
.LABEL $label$7
	CALL $261($13, ($13 + [16]), [0], $9, ($13 + [16]))
	$12 = *($10)
	$0 = ($12 + [-12])
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*(($12 + [-4]))) = [0]
	*(($12 + [-8])) = [0]
	
.LABEL $label$10
	CALL $252($0, [0])
	$12 = ($13 + [8])
	*(($0 + [8])) = *($12)
	*($0) = *($13)
	$9 = *($13 + [16])
	$0 = ($9 + $11)
	CALL $261($13, ($13 + [16]), $0, (( *($13 + [20]) ? uint_32($9 >> [1]) : ($9 & [1]) ) - $0), ($13 + [16]))
	$0 = *($10)
	if ( ($0 <= *(($2 + [8]))) ){ goto $label$12 }
	CALL $90($2, $13)
	if ( ((*($13) & [1]) == 0) ){ goto $label$6 }
	CALL $248(*($12))
	goto $label$6 
	
.LABEL $label$12
	*($0) = *($13)
	*(($0 + [8])) = *($12)
	*($12) = [0]
	*($13) = [0]
	*($13 + [4]) = [0]
	*($10) = (*($10) + [12])
	goto $label$6 
	
.LABEL $label$5
	if ( ((*($13 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL $248(*(($13 + [24])))
	
.LABEL $label$13
	*([0] + [4]) = ($13 + [32])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [880])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$4 = CALL $247([168])
	$6 = CALL $70($4)
	*($4 + [140]) = $0
	CALL $71(($8 + [32]), $6)
	*($4 + [148]) = [-1]
	*($4 + [144]) = $1
	*($4 + [152]) = [-1]
	*($4 + [156]) = [-1]
	*($4 + [160]) = [-1]
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$7 = *($4 + [144])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($8 + [24]) = [0]
	*($6) = $4
	*($1) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $72(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$6 = *($1 + [124])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($1 + [128])) = $6
	CALL $248($6)
	
.LABEL $label$10
	$3 = *($1 + [80])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($1 + [84])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$13 }
	$7 = ([0] - $3)
	$6 = ($6 + [-24])
	
.LOOP $label$14:
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $248(*(($6 + [8])))
	
.LABEL $label$15
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $7) != (int_32)[-24]) ){ goto $label$14 }
	$6 = *(($1 + [80]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $248($6)
	
.LABEL $label$11
	CALL $248($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $62 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$3 = *(($0 + [112]))
	$7 = *(($0 + [116]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [88])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-3844216343968612352, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $81($5, $7)
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)$5), [464])
	
.LABEL $label$3
	*($8 + [8]) = $2
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [576])
	CALL $82($5, $6, (int_64)0, ($8 + [8]))
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $227 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = $1
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3689251837816340480, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $87($5, $6)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$5), [464])
	
.LABEL $label$3
	CALL eosio_assert(($4 == 0), [2448])
	*($7 + [20]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$1 = *($0)
	*($7 + [12]) = ($7 + [20])
	*($7 + [8]) = ($7 + [24])
	CALL $228($7, $5, $1, ($7 + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $228 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $247([128])
	CALL $84($3)
	*($3 + [112]) = $1
	CALL $229(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [116])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $88(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$4 }
	CALL $248(*(($1 + [52])))
	
.LABEL $label$4
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $248(*(($1 + [40])))
	
.LABEL $label$5
	CALL $248($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $229 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	CALL $230(*($0 + [4]), $1)
	$5 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [79])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *($1 + [44])
	$3 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $83($7, $1)
	$4 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)-3689251837816340480, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $247(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $260($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $248(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $248($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $247(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*(($1 + [52])))
	
.LABEL $label$11
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $248(*(($1 + [40])))
	
.LABEL $label$12
	CALL $248($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $248($6)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [880])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $247([128])
	$4 = CALL $84($6)
	*($6 + [112]) = $0
	CALL $85(($8 + [32]), $4)
	*($6 + [116]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [116])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $88(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL $248(*(($4 + [52])))
	
.LABEL $label$10
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*(($4 + [40])))
	
.LABEL $label$11
	CALL $248($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $247(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*(($1 + [52])))
	
.LABEL $label$11
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $248(*(($1 + [40])))
	
.LABEL $label$12
	CALL $248($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $248($6)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [912])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [12]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [912])
	CALL memcpy(($1 + [16]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $78(CALL $78($0, ($1 + [32])), ($1 + [44]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [912])
	CALL memcpy(($1 + [96]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [100]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [104]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [108]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $84 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [32 align=4]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($2 = ($0 + [64]))) = (int_64)1397703940
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1008])
	*(($2 = ($0 + [80]))) = (int_64)1397703940
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [1008])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [12]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $69(CALL $69($0, ($1 + [32])), ($1 + [44]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [100]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [108]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$4 = *($1)
	CALL $250(($1 + [32]), *($3))
	*($1 + [88]) = (int_64)4
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [800])
	$3 = *($1 + [32])
	$5 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [79])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *($1 + [44])
	$5 = ( *(($1 + [48])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL $83($8, $1)
	CALL db_update_i64(*($1 + [116]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [880])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $247([128])
	$4 = CALL $84($6)
	*($6 + [112]) = $0
	CALL $85(($8 + [32]), $4)
	*($6 + [116]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [116])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $86(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$10 }
	CALL $248(*(($4 + [52])))
	
.LABEL $label$10
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*(($4 + [40])))
	
.LABEL $label$11
	CALL $248($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $247($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $248($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [880])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $247([48])) + [32]) = $0
	CALL $184(($8 + [32]), $6)
	*($6 + [40]) = [-1]
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $185(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $248($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $149 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*(($10 = $11) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($10 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($10 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$8 = *($1 + [48])
	*($10 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($10 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $8))
	$9 = *($1)
	*($10 + [40]) = $9
	CALL $150($3, $1)
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [800])
	$7 = *($1 + [80])
	$4 = *(($1 + [84]))
	$8 = (CASTING uint_64)(uint_32 int_32(($4 - $7) >> [5]))
	$3 = [76]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($7 + [8])
	$5 = ( *(($7 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = (($5 + $3) + [16])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = ($0 + [36])
	$3 = ($3 + [28])
	$4 = *($1 + [124])
	$5 = *(($1 + [128]))
	$6 = ($5 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$3 = (($6 & [-8]) + $3)
	
.LABEL $label$6
	$5 = ($3 + [4])
	if ( ($5 <= [513]) ){ goto $label$8 }
	$3 = CALL malloc($5)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($11 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$7
	*($10 + [28]) = $3
	*($10 + [24]) = $3
	*($10 + [32]) = ($3 + $5)
	CALL $65(($10 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL free($3)
	$9 = *($10 + [40])
	
.LABEL $label$9
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($10 + [4]) = $1
	*($10) = $0
	*($10 + [12]) = $1
	*($10 + [8]) = ($10 + [48])
	*($10 + [16]) = ($10 + [40])
	*($10 + [20]) = ($10 + [80])
	*($10 + [88]) = $10
	CALL $151(($10 + [88]), $7, ($7 + [1]), ($7 + [2]), ($7 + [3]))
	*([0] + [4]) = ($10 + [96])
}

void .FUNC $148 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($8 + [8]) = $2
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $63($5, $7)
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [528])
	*($8) = ($8 + [8])
	CALL eosio_assert($7, [576])
	CALL $149($5, $6, (int_64)0, $8)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $145 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	*(($11 = $12) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($11 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($11 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$2 = *($1 + [48])
	*($11 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($11 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $2))
	$7 = *($1)
	*($11 + [40]) = $7
	$6 = ($1 + [84])
	$10 = *($6)
	$9 = *($1 + [80])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$3 }
	$5 = ($10 + [-32])
	$2 = *(*($3))
	
.LOOP $label$4:
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$2 }
	$9 = ($9 + [32])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$4 }
	
.LABEL $label$3
	$8 = $7
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$7 }
	$4 = ($10 + [-32])
	
.LOOP $label$8:
	$3 = ($9 + [32])
	*($9) = *($3)
	$10 = ($9 + [8])
	if ( (*($10) & [1]) ){ goto $label$10 }
	*($10) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*(($9 + [16]))) = [0]
	*(($9 + [12])) = [0]
	
.LABEL $label$9
	CALL $252($10, [0])
	$5 = ($9 + [40])
	$2 = *($5)
	*(($9 + [44])) = [0]
	*($5) = [0]
	$5 = ($9 + [48])
	*(($10 + [8])) = *($5)
	*($10) = $2
	*($5) = [0]
	*(($9 + [24])) = *(($9 + [56]))
	$9 = $3
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$8 }
	$10 = *(($1 + [84]))
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$3 = $9
	
.LABEL $label$6
	
.LOOP $label$11:
	$9 = ($10 + [-32])
	if ( ((*(($10 + [-24])) & [1]) == 0) ){ goto $label$12 }
	CALL $248(*(($10 + [-16])))
	
.LABEL $label$12
	$10 = $9
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$11 }
	
.LABEL $label$5
	*(($1 + [84])) = $3
	$7 = *($1)
	$8 = *($11 + [40])
	
.LABEL $label$1
	$4 = ($0 + [36])
	CALL eosio_assert(((int_64)$8 == (int_64)$7), [800])
	$10 = *($1 + [80])
	$5 = *($6)
	$2 = (CASTING uint_64)(uint_32 int_32(($5 - $10) >> [5]))
	$9 = [76]
	
.LOOP $label$13:
	$9 = ($9 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$13 }
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = *($10 + [8])
	$3 = ( *(($10 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$9 = (($3 + $9) + [16])
	$2 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$16:
	$9 = ($9 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$16 }
	$10 = ($10 + [32])
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$15 }
	
.LABEL $label$14
	$9 = ($9 + [28])
	$3 = *($1 + [124])
	$10 = *(($1 + [128]))
	$5 = ($10 - $3)
	$2 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$17:
	$9 = ($9 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$17 }
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$18 }
	$9 = (($5 & [-8]) + $9)
	
.LABEL $label$18
	$10 = ($9 + [4])
	if ( ($10 <= [513]) ){ goto $label$20 }
	$9 = CALL malloc($10)
	goto $label$19 
	
.LABEL $label$20
	$9 = ($12 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$19
	*($11 + [28]) = $9
	*($11 + [24]) = $9
	*($11 + [32]) = ($9 + $10)
	CALL $65(($11 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), *($11 + [80]), $9, $10)
	if ( ($10 <= [513]) ){ goto $label$21 }
	CALL free($9)
	$8 = *($11 + [40])
	
.LABEL $label$21
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$22 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$22
	*($11 + [4]) = $1
	*($11) = $0
	*($11 + [12]) = $1
	*($11 + [8]) = ($11 + [48])
	*($11 + [16]) = ($11 + [40])
	*($11 + [20]) = ($11 + [80])
	*($11 + [88]) = $11
	CALL $146(($11 + [88]), $4, ($4 + [1]), ($4 + [2]), ($4 + [3]))
	*([0] + [4]) = ($11 + [96])
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	$5 = *(*(*($0 + [4])) + [4])
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	CALL $250(($1 + [32]), ($5 + [32]))
	CALL $250(($1 + [44]), ($5 + [44]))
	CALL memcpy(($1 + [56]), ($5 + [56]), [56])
	$5 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [79])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [44]))
	$3 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $83($7, $1)
	$4 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)-3844216343968612352, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $147 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*($9 + [40]) = $1
	*($9 + [32]) = $2
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [464])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$5 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3689251837816340480, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $87($6, $5)
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [464])
	
.LABEL $label$3
	$3 = *(($0 + [112]))
	$7 = *(($0 + [116]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$5 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [88])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$10 }
	$5 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)$6), [464])
	if ( $8 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = [0]
	$7 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-3844216343968612352, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$11 }
	$5 = CALL $81($6, $7)
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)$6), [464])
	
.LABEL $label$11
	if ( ($8 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert([0], [2448])
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert(($5 == 0), [2448])
	
.LABEL $label$7
	*($9 + [28]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$2 = *($0)
	*($9 + [20]) = ($9 + [28])
	*($9 + [16]) = ($9 + [32])
	*($9 + [24]) = ($9 + [40])
	CALL $153(($9 + [8]), $6, $2, ($9 + [16]))
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $141 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$5), [464])
	*($7 + [20]) = $4
	*($7 + [16]) = $5
	if ( $4 ){ goto $label$5 }
	$4 = [0]
	goto $label$3 
	
.LABEL $label$6
	$4 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3689251837816340480, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$4 }
	$4 = CALL $87($5, $4)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$5), [464])
	*($7 + [20]) = $4
	*($7 + [16]) = $5
	
.LABEL $label$5
	$4 = ((uint_64)*($4 + [88]) > (uint_64)(int_64)2)
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	*($7 + [20]) = [0]
	*($7 + [16]) = $5
	
.LABEL $label$3
	CALL eosio_assert($4, [1584])
	$1 = *($0)
	*($7 + [8]) = ($7 + [16])
	CALL $142(($7 + [24]), ($0 + [88]), $1, ($7 + [8]))
	$1 = *($7 + [16])
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$6 = ((int_32)$4) != (int_32)[0]
	CALL eosio_assert($6), [2192])
	CALL eosio_assert($6, [2240])
	$6 = CALL db_next_i64(*($4 + [116]), ($7 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL $87((CASTING uint_32)(uint_64 $1), $6)
	
.LABEL $label$7
	CALL $143($5, $4)
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	$5 = *(*(*($0 + [4])) + [4])
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	CALL $250(($1 + [32]), ($5 + [32]))
	CALL $250(($1 + [44]), ($5 + [44]))
	CALL memcpy(($1 + [56]), ($5 + [56]), [56])
	$5 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [79])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [44]))
	$3 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $83($7, $1)
	$4 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)-3689251837816340480, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [2272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [2320])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2384])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$7 }
	CALL $248(*(($4 + [52])))
	
.LABEL $label$7
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $248(*(($4 + [40])))
	
.LABEL $label$8
	CALL $248($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*(($4 + [52])))
	
.LABEL $label$11
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $248(*(($4 + [40])))
	
.LABEL $label$12
	CALL $248($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [116]))
}

void .FUNC $142 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $247([128])
	CALL $84($3)
	*($3 + [112]) = $1
	CALL $144(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [116])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $86(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$4 }
	CALL $248(*(($1 + [52])))
	
.LABEL $label$4
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $248(*(($1 + [40])))
	
.LABEL $label$5
	CALL $248($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $247(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $73(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$1 }
	$5 = ($0 + [8])
	
.LOOP $label$2:
	$7 = ($7 + [-24])
	*($5) = $7
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$7 = *($2 + [124])
	if ( ($7 == 0) ){ goto $label$4 }
	*(($2 + [128])) = $7
	CALL $248($7)
	
.LABEL $label$4
	$3 = *($2 + [80])
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($2 + [84])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$7 }
	$4 = ([0] - $3)
	$7 = ($7 + [-24])
	
.LOOP $label$8:
	if ( ((*($7) & [1]) == 0) ){ goto $label$9 }
	CALL $248(*(($7 + [8])))
	
.LABEL $label$9
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$8 }
	$7 = *(($2 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$7 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL $248($7)
	
.LABEL $label$5
	CALL $248($2)
	
.LABEL $label$3
	$7 = *($5)
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$10 }
	CALL $248($7)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $70 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1008])
	*(($2 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [1008])
	*(($2 = ($0 + [56]))) = (int_64)1397703940
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [1008])
	*(($2 = ($0 + [72]))) = (int_64)1397703940
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [1008])
	*(($0 + [88])) = [0]
	*($0 + [80 align=4]) = (int_64)0
	*($0 + [96]) = (int_64)0
	*(($2 = ($0 + [104]))) = (int_64)1397703940
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [1008])
	*(($0 + [132])) = [0]
	*($0 + [124 align=4]) = (int_64)0
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [912])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $74($0, ($1 + [80]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [112]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [116]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [120]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $75($0, ($1 + [124]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [136]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $247(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $248($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$3 = int_32(($6 - $4) >> [5])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$7 = ($7 - $4)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($7 >> [4])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $247(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$7 = ($0 + [4])
	
.LOOP $label$8:
	*(($4 = ($6 + [8]))) = (int_64)0
	*(($5 = ($6 + [16]))) = (int_64)0
	*($6) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*($4) = [0]
	*($5) = [0]
	$6 = (*($7) + [32])
	*($7) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $259($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$2 = ($7 + ($6 << [5]))
	$7 = ($7 + ($3 << [5]))
	$6 = $7
	
.LOOP $label$9:
	*(($4 = ($6 + [8]))) = (int_64)0
	*(($5 = ($6 + [16]))) = (int_64)0
	*($6) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*($4) = [0]
	*($5) = [0]
	$6 = ($6 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$11 }
	$3 = ([0] - $4)
	$1 = ($1 + [-16])
	
.LOOP $label$12:
	*(($7 + [-32])) = *(($1 + [-16]))
	$4 = ($1 + [-4])
	*(($7 + [-20])) = *($4)
	$5 = ($1 + [-8])
	*(($7 + [-24])) = *($5)
	*($5) = [0]
	*($4) = [0]
	*($1) = [0]
	*(($7 + [-8])) = *(($1 + [8]))
	$7 = ($7 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $3) != (int_32)[-16]) ){ goto $label$12 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$5 = $4
	
.LABEL $label$10
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	$1 = ([0] - $5)
	$6 = ($4 + [-24])
	
.LOOP $label$14:
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $248(*(($6 + [8])))
	
.LABEL $label$15
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $1) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $248($5)
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$4 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [928])
	$5 = *($3)
	$7 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$4 = ($4 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $4)) | (int_64)$6)
	$4 = ($4 + [7])
	if ( uint_32($7 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$5 = int_32(($3 - $4) >> [5])
	$7 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$7 <= (uint_32)$5) ){ goto $label$3 }
	CALL $77($1, ($7 - $5))
	$3 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$7 >= (uint_32)$5) ){ goto $label$2 }
	$7 = ($7 << [5])
	$2 = ($4 + $7)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	$5 = (([0] - $4) - $7)
	$7 = ($3 + [-24])
	
.LOOP $label$5:
	if ( ((*($7) & [1]) == 0) ){ goto $label$6 }
	CALL $248(*(($7 + [8])))
	
.LABEL $label$6
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $5) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$3 = $2
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$7 }
	$4 = ($0 + [4])
	
.LOOP $label$8:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - *($4)) > (uint_32)[7]), [912])
	CALL memcpy($7, *($4), [8])
	*($4) = (*($4) + [8])
	$5 = CALL $78($0, ($7 + [8]))
	CALL eosio_assert(((uint_32)(*($5 + [8]) - *($5 + [4])) > (uint_32)[7]), [912])
	CALL memcpy(($7 + [24]), *($5 + [4]), [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [928])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $76($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [912])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $79($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $252($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $247($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $252($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $248($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $249($7)
	return (unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [928])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $80($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [912])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $241 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $69(*($1), ($0 + [32]))
}

void .FUNC $259 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $258 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $223 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [880])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $247([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [912])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [912])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [912])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $225(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $248($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $251 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $247($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $248($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $250 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $251($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $253 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $251($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

void .FUNC $252 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $247(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $248($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $255 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $247($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $248($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $254 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $255($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $257 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$4 }
	$4 = ($0 + [1])
	$0 = uint_32($3 >> [1])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = *($0 + [8])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$0 = ( ($2 + [1]) ? $0 : ((uint_32)$0 > (uint_32)$2) )
	$1 = ($1 & [255])
	
.LOOP $label$5:
	if ( ($0 == 0) ){ goto $label$1 }
	$2 = ($4 + $0)
	$0 = ($0 + [-1])
	if ( ((int_32)*(($2 + [-1])) != (int_32)$1) ){ goto $label$5 }
	return $0
	
.LABEL $label$2
	return [-1]
	
.LABEL $label$1
	return [-1]
}

int_32 .FUNC $256 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [880])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $247([128])
	$4 = CALL $107($6)
	*($6 + [116]) = $0
	CALL $108(($8 + [32]), $4)
	*($6 + [120]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [120])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $109(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $248($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [1744])
	$5 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1824])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [800])
	*($6 + [120]) = ($6 + [112])
	*($6 + [116]) = $6
	*($6 + [112]) = $6
	CALL $106(($6 + [112]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $6, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $239 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [160])
	*([0] + [4]) = $14
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$7 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$6 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [140]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $63($5, $6)
	CALL eosio_assert(((int_32)*($7 + [140]) == (int_32)$5), [464])
	
.LABEL $label$3
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [528])
	*(($14 + [120])) = *(($7 + [24]))
	*($14 + [112]) = *($7 + [16])
	CALL eosio_assert($6, [576])
	$9 = (int_64)0
	CALL $240($5, $7, (int_64)0, ($14 + [24]))
	$4 = *($0)
	$8 = (int_64)59
	$7 = [1536]
	$10 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$10 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$5 = ($5 + [165])
	goto $label$8 
	
.LABEL $label$10
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$6
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$5 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [48]
	$12 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$16 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$16
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$12 = ((int_64)$11 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$11 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$13 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$22 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$5 = ($5 + [165])
	goto $label$20 
	
.LABEL $label$22
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$17 }
	*(($14 + [16])) = [0]
	*($14 + [8]) = (int_64)0
	$7 = CALL strlen([1584])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$26 }
	*($14 + [8]) = ($7 << [1])
	$5 = (($14 + [8]) | [1])
	if ( $7 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$6 = (($7 + [16]) & [-16])
	$5 = CALL $247($6)
	*($14 + [8]) = ($6 | [1])
	*($14 + [16]) = $5
	*($14 + [12]) = $7
	
.LABEL $label$25
	CALL memcpy($5, [1584], $7)
	
.LABEL $label$24
	*(($5 + $7)) = [0]
	*((($14 + [24]) + [20])) = *($14 + [116])
	*($14 + [32]) = $1
	*((($14 + [24]) + [28])) = *(($14 + [124]))
	*((($14 + [24]) + [24])) = *((($14 + [112]) + [8]))
	*($14 + [24]) = *($0)
	*($14 + [40]) = *($14 + [112])
	$7 = (($14 + [8]) + [8])
	*(($14 + [64])) = *($7)
	*($14 + [56]) = *($14 + [8])
	*($14 + [8]) = [0]
	*($14 + [12]) = [0]
	*($7) = [0]
	*($14 + [72]) = $12
	*($14 + [80]) = $13
	*(($7 = CALL $247([16]))) = $4
	*($7 + [8]) = $10
	*((($14 + [72]) + [32])) = [0]
	$5 = ($7 + [16])
	*((($14 + [72]) + [24])) = $5
	*((($14 + [72]) + [20])) = $5
	*($14 + [88]) = $7
	*($14 + [100]) = [0]
	*((($14 + [72]) + [36])) = [0]
	$7 = *($14 + [56])
	$5 = ( *((($14 + [24]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [32])
	$9 = (CASTING uint_64)(uint_32 $5)
	$5 = (($14 + [72]) + [28])
	
.LOOP $label$27:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$27 }
	if ( ($7 == 0) ){ goto $label$29 }
	CALL $80($5, $7)
	$5 = *(($14 + [104]))
	$7 = *(($14 + [100]))
	goto $label$28 
	
.LABEL $label$29
	$5 = [0]
	$7 = [0]
	
.LABEL $label$28
	*($14 + [148]) = $7
	*($14 + [144]) = $7
	*($14 + [152]) = $5
	*($14 + [128]) = ($14 + [144])
	*($14 + [136]) = ($14 + [24])
	CALL $241(($14 + [136]), ($14 + [128]))
	CALL $101(($14 + [144]), ($14 + [72]))
	$7 = *($14 + [144])
	CALL send_inline($7, (*($14 + [148]) - $7))
	$7 = *($14 + [144])
	if ( ($7 == 0) ){ goto $label$30 }
	*($14 + [148]) = $7
	CALL $248($7)
	
.LABEL $label$30
	$7 = *($14 + [100])
	if ( ($7 == 0) ){ goto $label$31 }
	*(($14 + [104])) = $7
	CALL $248($7)
	
.LABEL $label$31
	$7 = *($14 + [88])
	if ( ($7 == 0) ){ goto $label$32 }
	*(($14 + [92])) = $7
	CALL $248($7)
	
.LABEL $label$32
	if ( ((*(($14 + [56])) & [1]) == 0) ){ goto $label$33 }
	CALL $248(*(($14 + [64])))
	
.LABEL $label$33
	if ( ((*($14 + [8]) & [1]) == 0) ){ goto $label$34 }
	CALL $248(*(($14 + [16])))
	
.LABEL $label$34
	*([0] + [4]) = ($14 + [160])
	return (unreachable)
	
.LABEL $label$23
	CALL $249(($14 + [8]))
}

void .FUNC $238 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = *($0)
	$5 = *($6 + [4])
	$7 = *($5 + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($6)
	$7 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492416, ($8 + [8]), *($5))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx_double_remove($7)
	
.LABEL $label$1
	$6 = *($0)
	$5 = *($6 + [4])
	$7 = *(($5 + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($6)
	$7 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492415, ($8 + [8]), *($5))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx_double_remove($7)
	
.LABEL $label$3
	$6 = *($0)
	$5 = *($6 + [4])
	$7 = *(($5 + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = *($6)
	$7 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492414, ($8 + [8]), *($5))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx_double_remove($7)
	
.LABEL $label$5
	$7 = *($0)
	$6 = *($7 + [4])
	$0 = *(($6 + [160]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$8 }
	$0 = *($7)
	$0 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-3922483085538492413, ($8 + [8]), *($6))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL db_idx_double_remove($0)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $94 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)$4), [464])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3689251837816340480, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $87($4, $6)
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)$4), [464])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1040])
	$1 = CALL current_time()
	CALL eosio_assert((uint_64)(*($5 + [88]) <= (int_64)3), [1920])
	if ( ((int_64)*($5 + [88]) != (int_64)2) ){ goto $label$5 }
	CALL eosio_assert(((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) <= (uint_32)(*($5 + [100]) + *($5 + [12]))), [1968])
	
.LABEL $label$5
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	$3 = ($0 + [8])
	$5 = [0]
	$0 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $98($3, $0)
	
.LABEL $label$1
	$0 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($0, [1488])
	*($6 + [40]) = *($2 + [108])
	$4 = *(($2 + [64]))
	*((($6 + [24]) + [8])) = $4
	*($6 + [24]) = *($2 + [56])
	CALL eosio_assert(((int_64)$4 == (int_64)*(($2 + [80]))), [1376])
	$4 = (int_64)
	*($6 + [24]) = $4(*($6 + [24]) - *($2 + [72])))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [1424])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [1456])
	*($6 + [8]) = $1
	*($6 + [12]) = ($6 + [40])
	*($6 + [16]) = ($6 + [24])
	CALL eosio_assert($0, [576])
	CALL $117($3, $5, (int_64)0, ($6 + [8]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $96 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [128])
	*([0] + [4]) = $18
	if ( ((int_64)*($2 + [88]) != (int_64)2) ){ goto $label$4 }
	$8 = *($2 + [72])
	CALL __multi3(($18 + [56]), $8, (int_64)$8 >> (int_64)63), (int_64)10, (int_64)0)
	$12 = (int_64)$7 >> (int_64)63
	$8 = *($18 + [56])
	$7 = ((int_64)$8 / (int_64)100)
	CALL __multi3(($18 + [40]), $7, $12), (int_64)20, (int_64)0)
	CALL __multi3(($18 + [24]), $7, $12, (int_64)15, (int_64)0)
	CALL __multi3(($18 + [8]), $7, $12, (int_64)5, (int_64)0)
	$16 = ($2 + [80])
	$7 = *($16)
	$12 = *((($18 + [56]) + [8]))
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [1600])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [1632])
	CALL eosio_assert(((int_64)$7 == (int_64)*($16)), [1856])
	CALL eosio_assert(((int_64)$8 > (int_64)*($2 + [72])), [1664])
	CALL eosio_assert([1], [1696])
	CALL eosio_assert([1], [1712])
	$8 = *((($18 + [40]) + [8]))
	$12 = *($18 + [40])
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [1600])
	CALL eosio_assert(( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [1632])
	*($18 + [96]) = $7
	CALL eosio_assert([1], [1696])
	CALL eosio_assert([1], [1712])
	$8 = ((int_64)$12 / (int_64)100)
	*($18 + [88]) = $8
	$12 = *($16)
	*((($18 + [72]) + [8])) = $12
	*($18 + [72]) = *($2 + [72])
	CALL eosio_assert(((int_64)$7 == (int_64)$12), [1744])
	$8 = ((int_64)*($18 + [72]) + (int_64)$8)
	*($18 + [72]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [1824])
	$8 = *((($18 + [24]) + [8]))
	$12 = *($18 + [24])
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [1600])
	CALL eosio_assert(( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [1632])
	CALL eosio_assert([1], [1696])
	CALL eosio_assert([1], [1712])
	*($6 + [8]) = $7
	*($6) = ((int_64)$12 / (int_64)100)
	$8 = *((($18 + [8]) + [8]))
	$12 = *($18 + [8])
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [1600])
	CALL eosio_assert(( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [1632])
	CALL eosio_assert([1], [1696])
	CALL eosio_assert([1], [1712])
	$12 = ((int_64)$12 / (int_64)100)
	$8 = *($2 + [24])
	$13 = ($0 + [32])
	$9 = *($13)
	$14 = ($0 + [36])
	$17 = *($14)
	if ( ((int_32)$17 == (int_32)$9) ){ goto $label$5 }
	$16 = ($17 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$6:
	if ( ((int_64)*(*($16)) == (int_64)$8) ){ goto $label$5 }
	$17 = $16
	$11 = ($16 + [-24])
	$16 = $11
	if ( ((int_32)($11 + $10) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$15 = ($0 + [8])
	if ( ((int_32)$17 == (int_32)$9) ){ goto $label$3 }
	$16 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [140]) == (int_32)$15), [464])
	goto $label$2 
	
.LABEL $label$4
	$13 = ($0 + [32])
	$14 = ($0 + [36])
	$15 = ($0 + [8])
	goto $label$1 
	
.LABEL $label$3
	$16 = [0]
	$11 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3922483085538492416, $8)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$2 }
	$16 = CALL $63($15, $11)
	CALL eosio_assert(((int_32)*($16 + [140]) == (int_32)$15), [464])
	
.LABEL $label$2
	*($18 + [108]) = ($18 + [88])
	*($18 + [104]) = ($18 + [72])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [576])
	CALL $111($15, $16, (int_64)0, ($18 + [104]))
	if ( (int_64)($3 == 0) ){ goto $label$9 }
	*($18 + [112]) = $7
	*($18 + [104]) = $12
	$6 = *($13)
	$17 = *($14)
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$10 }
	$16 = ($17 + [-24])
	$10 = ([0] - $6)
	
.LOOP $label$11:
	if ( ((int_64)*(*($16)) == (int_64)$3) ){ goto $label$10 }
	$17 = $16
	$11 = ($16 + [-24])
	$16 = $11
	if ( ((int_32)($11 + $10) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$8 }
	$16 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [140]) == (int_32)$15), [464])
	if ( $16 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$9
	CALL eosio_assert(((int_64)$7 == (int_64)*(($6 + [8]))), [1744])
	$8 = ((int_64)*($6) + (int_64)$12)
	*($6) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($6) < (int_64)4611686018427387904), [1824])
	goto $label$1 
	
.LABEL $label$8
	$16 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3922483085538492416, $3)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$1 }
	$16 = CALL $63($15, $16)
	CALL eosio_assert(((int_32)*($16 + [140]) == (int_32)$15), [464])
	
.LABEL $label$7
	*($18 + [120]) = ($18 + [104])
	CALL eosio_assert([1], [576])
	CALL $112($15, $16, (int_64)0, ($18 + [120]))
	
.LABEL $label$1
	*($18 + [88]) = *($2 + [108])
	$6 = *($13)
	$17 = *($14)
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$12 }
	$16 = ($17 + [-24])
	$10 = ([0] - $6)
	
.LOOP $label$13:
	if ( ((int_64)*(*($16)) == (int_64)$1) ){ goto $label$12 }
	$17 = $16
	$11 = ($16 + [-24])
	$16 = $11
	if ( ((int_32)($11 + $10) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$15 }
	$16 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [140]) == (int_32)$15), [464])
	goto $label$14 
	
.LABEL $label$15
	$16 = [0]
	$11 = CALL db_find_i64(*($0 + [8]), *(($0 + [16])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$14 }
	$16 = CALL $63($15, $11)
	CALL eosio_assert(((int_32)*($16 + [140]) == (int_32)$15), [464])
	
.LABEL $label$14
	*($18 + [104]) = $4
	*($18 + [112]) = $2
	*($18 + [108]) = ($18 + [88])
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [576])
	CALL $113($15, $16, (int_64)0, ($18 + [104]))
	*([0] + [4]) = ($18 + [128])
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [880])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $247([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [912])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $110(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $248($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $247(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $248(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $248($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [464])
	if ( $5 ){ goto $label$5 }
	$5 = [1]
	goto $label$3 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3617068566592880640, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $130($4, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$4), [464])
	
.LABEL $label$5
	$5 = (*($5 + [8]) == 0)
	goto $label$3 
	
.LABEL $label$4
	$5 = [1]
	
.LABEL $label$3
	CALL eosio_assert($5, [2128])
}

void .FUNC $92 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = $1
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [140]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $63($5, $6)
	CALL eosio_assert(((int_32)*($4 + [140]) == (int_32)$5), [464])
	
.LABEL $label$3
	CALL eosio_assert(($4 == 0), [2080])
	$1 = *($0)
	*($7 + [16]) = ($7 + [24])
	CALL $126(($7 + [8]), $5, $1, ($7 + [16]))
	*([0] + [4]) = ($7 + [32])
}

int_64 .FUNC $93 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($9 + [24]) = $1
	*($9 + [16]) = $2
	$4 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$7 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [464])
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3615065194130046976, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $118($3, $7)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [464])
	
.LABEL $label$6
	$1 = *($7 + [8])
	if ( ((int_64)($1 == 0) == 0) ){ goto $label$3 }
	*($9 + [8]) = ($9 + [16])
	CALL eosio_assert([1], [576])
	CALL $120($3, $7, (int_64)0, ($9 + [8]))
	goto $label$4 
	
.LABEL $label$5
	$1 = *($0)
	*($9 + [12]) = ($9 + [16])
	*($9 + [8]) = ($9 + [24])
	CALL $119($9, $3, $1, ($9 + [8]))
	
.LABEL $label$4
	$1 = *($9 + [24])
	$4 = *(($0 + [32]))
	$8 = *(($0 + [36]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$8 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$9:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$8 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	$7 = ($0 + [8])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$12 }
	$6 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$7), [464])
	if ( (($6 == 0) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	CALL eosio_assert(((int_32)*(CALL $63($7, $6) + [140]) == (int_32)$7), [464])
	goto $label$10 
	
.LABEL $label$13
	if ( ([1] == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$1 = *($9 + [16])
	if ( (int_64)($1 == 0) ){ goto $label$10 }
	$4 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$14 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$15:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$14 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$18 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [464])
	if ( $7 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$7 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3615065194130046976, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$16 }
	$7 = CALL $118($3, $7)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [464])
	
.LABEL $label$17
	CALL eosio_assert([1], [576])
	CALL $122($3, $7, (int_64)0, ($9 + [8]))
	goto $label$10 
	
.LABEL $label$16
	$1 = *($0)
	*($9) = ($9 + [16])
	CALL $121(($9 + [8]), $3, $1, $9)
	
.LABEL $label$10
	$1 = *($9 + [16])
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
	return $1
}

void .FUNC $138 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $247([128])
	CALL $84($3)
	*($3 + [112]) = $1
	CALL $140(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [116])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $88(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$4 }
	CALL $248(*(($1 + [52])))
	
.LABEL $label$4
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $248(*(($1 + [40])))
	
.LABEL $label$5
	CALL $248($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [2272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [2320])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2384])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$7 }
	CALL $248(*(($4 + [52])))
	
.LABEL $label$7
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $248(*(($4 + [40])))
	
.LABEL $label$8
	CALL $248($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$11 }
	CALL $248(*(($4 + [52])))
	
.LABEL $label$11
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $248(*(($4 + [40])))
	
.LABEL $label$12
	CALL $248($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [116]))
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [880])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $247([32])) + [16]) = $0
	CALL $131(($8 + [32]), $6)
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $132(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $248($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [912])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [912])
	CALL memcpy(($1 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [912])
	CALL memcpy(($1 + [9]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [912])
	CALL memcpy(($1 + [10]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $132 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $247(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $248($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $248($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $133 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [944])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1008])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $134(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [912])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [912])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [912])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [912])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $78(*($1), *($0 + [12]))
}

void .FUNC $135 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = $1
	$2 = *(($0 + [112]))
	$6 = *(($0 + [116]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [88])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	$6 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-3689428501300510720, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $97($5, $6)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$5), [464])
	
.LABEL $label$3
	CALL eosio_assert(($4 == 0), [2176])
	$1 = *($0)
	*($7 + [16]) = ($7 + [24])
	CALL $136(($7 + [8]), $5, $1, ($7 + [16]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $136 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*(($4 = CALL $247([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [864])
	CALL memcpy(($8 + [16]), $4, [8])
	$5 = *($4)
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-3689428501300510720, $2, $5, ($8 + [16]), [8])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [8]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [12])
	*($8 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [8]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $110(($1 + [24]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $248($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $137 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$2 = *(($0 + [112]))
	$6 = *(($0 + [116]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [88])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$6 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$5), [464])
	*($7 + [20]) = $4
	*($7 + [16]) = $5
	if ( $4 ){ goto $label$5 }
	$4 = [0]
	goto $label$3 
	
.LABEL $label$6
	$4 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-3844216343968612352, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$4 }
	$4 = CALL $81($5, $4)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$5), [464])
	*($7 + [20]) = $4
	*($7 + [16]) = $5
	
.LABEL $label$5
	$4 = (uint_64)(*($4 + [88]) <= (int_64)3)
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	*($7 + [20]) = [0]
	*($7 + [16]) = $5
	
.LABEL $label$3
	CALL eosio_assert($4, [1584])
	$1 = *($0)
	*($7 + [8]) = ($7 + [16])
	CALL $138(($7 + [24]), ($0 + [8]), $1, ($7 + [8]))
	$1 = *($7 + [16])
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$6 = ((int_32)$4) != (int_32)[0]
	CALL eosio_assert($6), [2192])
	CALL eosio_assert($6, [2240])
	$6 = CALL db_next_i64(*($4 + [116]), ($7 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL $81((CASTING uint_32)(uint_64 $1), $6)
	
.LABEL $label$7
	CALL $139($5, $4)
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $260 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $247($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $261 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $247($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $213 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*(($4 = CALL $247([24])) + [8]) = $1
	*($4) = *(*($3))
	CALL eosio_assert([1], [864])
	CALL memcpy(($8 + [16]), $4, [8])
	$5 = *($4)
	*($4 + [12]) = CALL db_store_i64(*($1 + [8]), (int_64)-3588043185659576320, $2, $5, ($8 + [16]), [8])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [8]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [12])
	*($8 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [8]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $193(($1 + [24]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $248($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [32])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $265 ()
{
	(unreachable)
}

void .FUNC $208 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [912])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [912])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [912])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [912])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $209 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [912])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [912])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [912])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [912])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $202 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $203 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [116]) == (int_32)$4), [464])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3809126530584412160, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $98($4, $6)
	CALL eosio_assert(((int_32)*($5 + [116]) == (int_32)$4), [464])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [1488])
	CALL eosio_assert($6, [2192])
	CALL eosio_assert($6, [2240])
	$6 = CALL db_next_i64(*($5 + [120]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $98($4, $6)
	
.LABEL $label$5
	CALL $204($4, $5)
	CALL prints([1584])
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $200 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($1 + [24]) = (*($1 + [24]) + [-1])
	$4 = *($1)
	CALL eosio_assert([1], [800])
	*($5 + [120]) = ($5 + [112])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $106(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $5, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $201 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*(($10 = $11) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($10 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($10 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$8 = *($1 + [48])
	*($10 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($10 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $8))
	*(($1 + [128])) = *($1 + [124])
	*($1 + [136]) = *(*($3))
	$9 = *($1)
	*($10 + [40]) = $9
	CALL eosio_assert([1], [800])
	$7 = *($1 + [80])
	$4 = *(($1 + [84]))
	$8 = (CASTING uint_64)(uint_32 int_32(($4 - $7) >> [5]))
	$3 = [76]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($7 + [8])
	$5 = ( *(($7 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = (($5 + $3) + [16])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = ($0 + [36])
	$4 = *(($1 + [124]))
	$5 = *(($1 + [128]))
	$6 = ($5 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	$3 = ($3 + [28])
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$3 = (($6 & [-8]) + $3)
	
.LABEL $label$6
	$5 = ($3 + [4])
	if ( ($5 <= [513]) ){ goto $label$8 }
	$3 = CALL malloc($5)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($11 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$7
	*($10 + [28]) = $3
	*($10 + [24]) = $3
	*($10 + [32]) = ($3 + $5)
	CALL $65(($10 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL free($3)
	$9 = *($10 + [40])
	
.LABEL $label$9
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($10 + [4]) = $1
	*($10) = $0
	*($10 + [12]) = $1
	*($10 + [8]) = ($10 + [48])
	*($10 + [16]) = ($10 + [40])
	*($10 + [20]) = ($10 + [80])
	*($10 + [88]) = $10
	CALL $202(($10 + [88]), $7, ($7 + [1]), ($7 + [2]), ($7 + [3]))
	*([0] + [4]) = ($10 + [96])
}

void .FUNC $206 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$0 = *($0)
	$5 = ($0 + [24])
	$4 = *($5)
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$2 = ($0 + [8])
	$3 = CALL db_lowerbound_i64(*($2), *(($0 + [16])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $98($2, $3)
	*($6 + [12]) = [0]
	*($6 + [8]) = $2
	$4 = *(*(CALL $207(($6 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [24])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [2544])
	*($1) = *($5)
	CALL eosio_assert([1], [944])
	$4 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1008])
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = [200]
	*($1 + [28]) = ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [28800]) / (uint_32)[86400])
	CALL eosio_assert([1], [944])
	$4 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$5 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [1008])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)0
	*($1 + [48]) = [0]
	*($1 + [72]) = [0]
	CALL eosio_assert([1], [944])
	$4 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$5 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$5 = [0]
	
.LABEL $label$13
	CALL eosio_assert($5, [1008])
	*(($1 + [64])) = (int_64)1397703940
	*($1 + [56]) = (int_64)0
	CALL eosio_assert([1], [944])
	$4 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$5 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$5 = [0]
	
.LABEL $label$18
	CALL eosio_assert($5, [1008])
	*(($1 + [88])) = (int_64)1397703940
	*($1 + [80]) = (int_64)0
	CALL eosio_assert([1], [944])
	$4 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$5 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$5 = [0]
	
.LABEL $label$23
	CALL eosio_assert($5, [1008])
	*(($1 + [104])) = (int_64)1397703940
	*($1 + [96]) = (int_64)0
	*($1 + [112]) = [0]
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $207 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [120]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2672])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3809126530584412160)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [2608])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [2608])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $98(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $204 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [2272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [2320])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2384])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $248($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $248($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [120]))
}

void .FUNC $205 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [144])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	$4 = CALL $247([128])
	$6 = CALL $107($4)
	*($4 + [116]) = $1
	CALL $206($3, $6)
	*($8 + [136]) = (($8 + [16]) + [112])
	*($8 + [132]) = ($8 + [16])
	*($8 + [128]) = ($8 + [16])
	CALL $106(($8 + [128]), $6)
	$5 = *($4)
	*($4 + [120]) = CALL db_store_i64(*($1 + [8]), (int_64)-3809126530584412160, $2, $5, ($8 + [16]), [112])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [128]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$3 = *($4 + [120])
	*($8 + [12]) = $3
	$7 = ($1 + [28])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($6 + [8]) = $5
	*($6 + [16]) = $3
	*($8 + [128]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $109(($1 + [24]), ($8 + [128]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$1 = *($8 + [128])
	*($8 + [128]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $248($1)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [144])
}

void .FUNC $181 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [464])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3538024836733337600, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $182($4, $6)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [464])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [2896])
	CALL eosio_assert($6, [2192])
	CALL eosio_assert($6, [2240])
	$6 = CALL db_next_i64(*($5 + [36]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $182($4, $6)
	
.LABEL $label$5
	CALL $183($4, $5)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$5 = *($0)
	$6 = *($5 + [12])
	$7 = *($6)
	$8 = *(*($5 + [8]))
	$9 = *(*($5) + [8])
	*($10 + [8]) = (CASTING float_64)(uint_32 ([0] - *($6 + [8])))
	$6 = CALL db_idx_double_store($9, (int_64)-3922483085538492416, $8, $7, ($10 + [8]))
	*(*($5 + [4]) + [148]) = $6
	$5 = *($0)
	$6 = *($5 + [12])
	$7 = *($6)
	$8 = *(*($5 + [8]))
	$9 = *(*($5) + [8])
	*($10 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($6 + [16])))
	$6 = CALL db_idx_double_store($9, (int_64)-3922483085538492415, $8, $7, ($10 + [8]))
	*((*($5 + [4]) + [152])) = $6
	$5 = *($0)
	$6 = *($5 + [12])
	$7 = *($6)
	$8 = *(*($5 + [8]))
	$9 = *(*($5) + [8])
	*($10 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($6 + [32])))
	$6 = CALL db_idx_double_store($9, (int_64)-3922483085538492414, $8, $7, ($10 + [8]))
	*((*($5 + [4]) + [156])) = $6
	$0 = *($0)
	$5 = *($0 + [12])
	$7 = *($5)
	$8 = *(*($0 + [8]))
	$9 = *(*($0) + [8])
	*($10 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($5 + [48])))
	$5 = CALL db_idx_double_store($9, (int_64)-3922483085538492413, $8, $7, ($10 + [8]))
	*((*($0 + [4]) + [160])) = $5
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = *($0)
	$0 = [0]
	*($1 + [8]) = [0]
	*($1) = *($3)
	CALL eosio_assert([1], [944])
	$2 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1008])
	*(($1 + [104])) = (int_64)1397703940
	*($1 + [96]) = (int_64)0
	CALL eosio_assert([1], [944])
	$2 = (int_64)5459781
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$0 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [1008])
	*(($1 + [24])) = (int_64)1397703940
	*($1 + [16]) = (int_64)0
	$2 = CALL current_time()
	*($1 + [120]) = [10]
	*($1 + [116]) = ((uint_64)$2 / (uint_64)(int_64)1000000)
	$0 = ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [28800]) / (uint_32)[86400])
	*($1 + [112]) = $0
	*($1 + [136]) = $0
}

void .FUNC $8 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $236(($0 + [192]), $1)
}

void .FUNC $9 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $227(($0 + [16]), $1)
	CALL $181(($0 + [144]), $1)
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *(*($0 + [4]))
	*($1 + [16]) = [1]
	*($1) = *($2)
	*($1 + [8]) = (int_64)0
	$2 = *($0)
	CALL eosio_assert([1], [864])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [864])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [864])
	CALL memcpy(($4 + [16]), ($1 + [16]), [4])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-3615065194130046976, *(*($0 + [8])), $3, $4, [20])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($1 + [16]) = (*($1 + [16]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [800])
	CALL eosio_assert([1], [864])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [864])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [864])
	CALL memcpy(($5 + [16]), ($1 + [16]), [4])
	CALL db_update_i64(*($1 + [28]), $2, $5, [20])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $247([40])) + [24]) = $1
	CALL $123(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $124(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $248($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [800])
	CALL eosio_assert([1], [864])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [864])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [864])
	CALL memcpy(($5 + [16]), ($1 + [16]), [4])
	CALL db_update_i64(*($1 + [28]), $2, $5, [20])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC $126 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $247([168])
	CALL $70($3)
	*($3 + [140]) = $1
	CALL $127(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [144])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$1 = *($0 + [124])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($0 + [128])) = $1
	CALL $248($1)
	
.LABEL $label$4
	$5 = *($0 + [80])
	if ( ($5 == 0) ){ goto $label$5 }
	$4 = ($0 + [84])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$7 }
	$3 = ([0] - $5)
	$1 = ($1 + [-24])
	
.LOOP $label$8:
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL $248(*(($1 + [8])))
	
.LABEL $label$9
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $3) != (int_32)[-24]) ){ goto $label$8 }
	$1 = *(($0 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $5
	
.LABEL $label$6
	*($4) = $5
	CALL $248($1)
	
.LABEL $label$5
	CALL $248($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($0 + [4])
	*($1) = *(*($2))
	*($1 + [8]) = *(*($2 + [4]))
	$2 = *($0)
	*($1 + [16]) = [0]
	CALL eosio_assert([1], [864])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [864])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [864])
	CALL memcpy(($4 + [16]), ($1 + [16]), [4])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-3615065194130046976, *(*($0 + [8])), $3, $4, [20])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $247(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $248($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $248($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [912])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $222(($0 + [16]), $1)
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [240])
	*([0] + [4]) = $12
	CALL require_auth(*($0))
	$5 = ($0 + [16])
	CALL $219($5, $1)
	CALL $61(($12 + [96]), $5, $1)
	*(($12 + [88])) = *(($12 + [176]))
	*($12 + [80]) = *($12 + [168])
	$8 = (int_64)0
	$5 = [0]
	$2 = ($0 + [328])
	$6 = CALL db_lowerbound_i64(*($2), *(($0 + [336])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $98($2, $6)
	
.LABEL $label$1
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [1488])
	CALL eosio_assert($6, [576])
	CALL $215($2, $5, (int_64)0, ($12 + [40]))
	$3 = *($12 + [120])
	CALL $148(($0 + [192]), $3, $1)
	$4 = *($0 + [8])
	$7 = (int_64)59
	$0 = [1536]
	$9 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$7 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [165])
	goto $label$5 
	
.LABEL $label$7
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$2 }
	$8 = (int_64)0
	$7 = (int_64)59
	$0 = [3424]
	$11 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)9) ){ goto $label$13 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$5 = ($5 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	*((($12 + [8]) + [20])) = *($12 + [84])
	*($12 + [16]) = $1
	*((($12 + [8]) + [28])) = *(($12 + [92]))
	*((($12 + [8]) + [24])) = *(($12 + [88]))
	*($12 + [8]) = $3
	*($12 + [24]) = *($12 + [80])
	*($12 + [40]) = $4
	*($12 + [48]) = $11
	*(($0 = CALL $247([16]))) = $4
	*($0 + [8]) = $9
	*(($5 = (($12 + [40]) + [32]))) = [0]
	$2 = ($0 + [16])
	*((($12 + [40]) + [24])) = $2
	*((($12 + [40]) + [20])) = $2
	*($12 + [56]) = $0
	*($12 + [68]) = [0]
	*(($12 + [76])) = [0]
	CALL $80((($12 + [40]) + [28]), [32])
	$0 = *($5)
	$5 = *($12 + [68])
	*($12 + [228]) = $5
	*($12 + [224]) = $5
	*($12 + [232]) = $0
	*($12 + [208]) = ($12 + [224])
	*($12 + [216]) = ($12 + [8])
	CALL $216(($12 + [216]), ($12 + [208]))
	CALL $101(($12 + [224]), ($12 + [40]))
	$0 = *($12 + [224])
	CALL send_inline($0, (*($12 + [228]) - $0))
	$0 = *($12 + [224])
	if ( ($0 == 0) ){ goto $label$14 }
	*($12 + [228]) = $0
	CALL $248($0)
	
.LABEL $label$14
	$0 = *($12 + [68])
	if ( ($0 == 0) ){ goto $label$15 }
	*(($12 + [72])) = $0
	CALL $248($0)
	
.LABEL $label$15
	$0 = *($12 + [56])
	if ( ($0 == 0) ){ goto $label$16 }
	*(($12 + [60])) = $0
	CALL $248($0)
	
.LABEL $label$16
	if ( ((*($12 + [140]) & [1]) == 0) ){ goto $label$17 }
	CALL $248(*(($12 + [148])))
	
.LABEL $label$17
	if ( ((*($12 + [128]) & [1]) == 0) ){ goto $label$18 }
	CALL $248(*(($12 + [136])))
	
.LABEL $label$18
	*([0] + [4]) = ($12 + [240])
}

void .FUNC $17 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [240])
	*([0] + [4]) = $12
	CALL require_auth(*($0))
	$5 = ($0 + [16])
	CALL $214($5, $1)
	CALL $61(($12 + [96]), $5, $1)
	*(($12 + [88])) = *(($12 + [176]))
	*($12 + [80]) = *($12 + [168])
	$8 = (int_64)0
	$5 = [0]
	$2 = ($0 + [328])
	$6 = CALL db_lowerbound_i64(*($2), *(($0 + [336])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $98($2, $6)
	
.LABEL $label$1
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [1488])
	CALL eosio_assert($6, [576])
	CALL $215($2, $5, (int_64)0, ($12 + [40]))
	$3 = *($12 + [120])
	CALL $148(($0 + [192]), $3, $1)
	$4 = *($0 + [8])
	$7 = (int_64)59
	$0 = [1536]
	$9 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$7 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$5 = ($5 + [165])
	goto $label$5 
	
.LABEL $label$7
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$2 }
	$8 = (int_64)0
	$7 = (int_64)59
	$0 = [3424]
	$11 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)9) ){ goto $label$13 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$5 = ($5 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	*((($12 + [8]) + [20])) = *($12 + [84])
	*($12 + [16]) = $1
	*((($12 + [8]) + [28])) = *(($12 + [92]))
	*((($12 + [8]) + [24])) = *(($12 + [88]))
	*($12 + [8]) = $3
	*($12 + [24]) = *($12 + [80])
	*($12 + [40]) = $4
	*($12 + [48]) = $11
	*(($0 = CALL $247([16]))) = $4
	*($0 + [8]) = $9
	*(($5 = (($12 + [40]) + [32]))) = [0]
	$2 = ($0 + [16])
	*((($12 + [40]) + [24])) = $2
	*((($12 + [40]) + [20])) = $2
	*($12 + [56]) = $0
	*($12 + [68]) = [0]
	*(($12 + [76])) = [0]
	CALL $80((($12 + [40]) + [28]), [32])
	$0 = *($5)
	$5 = *($12 + [68])
	*($12 + [228]) = $5
	*($12 + [224]) = $5
	*($12 + [232]) = $0
	*($12 + [208]) = ($12 + [224])
	*($12 + [216]) = ($12 + [8])
	CALL $216(($12 + [216]), ($12 + [208]))
	CALL $101(($12 + [224]), ($12 + [40]))
	$0 = *($12 + [224])
	CALL send_inline($0, (*($12 + [228]) - $0))
	$0 = *($12 + [224])
	if ( ($0 == 0) ){ goto $label$14 }
	*($12 + [228]) = $0
	CALL $248($0)
	
.LABEL $label$14
	$0 = *($12 + [68])
	if ( ($0 == 0) ){ goto $label$15 }
	*(($12 + [72])) = $0
	CALL $248($0)
	
.LABEL $label$15
	$0 = *($12 + [56])
	if ( ($0 == 0) ){ goto $label$16 }
	*(($12 + [60])) = $0
	CALL $248($0)
	
.LABEL $label$16
	if ( ((*($12 + [140]) & [1]) == 0) ){ goto $label$17 }
	CALL $248(*(($12 + [148])))
	
.LABEL $label$17
	if ( ((*($12 + [128]) & [1]) == 0) ){ goto $label$18 }
	CALL $248(*(($12 + [136])))
	
.LABEL $label$18
	*([0] + [4]) = ($12 + [240])
}

void .FUNC $10 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $227(($0 + [16]), $1)
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL require_auth($1)
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($3 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($4 <= [150]), [3456])
	CALL $260($5, $3)
	CALL $234(($0 + [16]), $1, $2, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $248(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [912])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [912])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	CALL $78(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $233(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $248(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL require_auth(*($0))
	CALL $226($4, ($0 + [144]), $1)
	$1 = *($4)
	if ( ((int_32)*($4 + [4]) == (int_32)$1) ){ goto $label$1 }
	$2 = ($0 + [16])
	$0 = [0]
	$3 = [0]
	
.LOOP $label$2:
	CALL $227($2, *(($1 + $0)))
	$0 = ($0 + [8])
	$1 = *($4)
	$3 = ($3 + [1])
	if ( ($3 <= int_32((*($4 + [4]) - $1) >> [3])) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ($1 == 0) ){ goto $label$3 }
	*($4 + [4]) = $1
	CALL $248($1)
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $185 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $247(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $248($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $248($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $212(($0 + [320]), $1)
}

void .FUNC $19 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	CALL $210(($0 + [320]), $1)
}

int_32 .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [912])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [880])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $247([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [912])
	CALL memcpy($6, $7, [8])
	*($6 + [12]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [12])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $193(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $248($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $218 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	$5 = *(*(*($0 + [4])) + [4])
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	CALL $250(($1 + [32]), ($5 + [32]))
	CALL $250(($1 + [44]), ($5 + [44]))
	CALL memcpy(($1 + [56]), ($5 + [56]), [56])
	*($1 + [88]) = (int_64)3
	$5 = *($1 + [32])
	$3 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($3 + [79])
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	$3 = *(($1 + [44]))
	$3 = ( *(($1 + [48])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $5)
	$4 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $5)
	CALL $83($7, $1)
	$4 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($2 + [8]), (int_64)-3844216343968612352, *(*($0 + [8])), $4, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $186 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$7 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$4 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3689251837816340480, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $87($5, $4)
	CALL eosio_assert(((int_32)*($7 + [112]) == (int_32)$5), [464])
	
.LABEL $label$3
	$2 = *(($0 + [112]))
	$6 = *(($0 + [116]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$5 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$6:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$5 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($0 + [88])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$8 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)$4), [464])
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-3844216343968612352, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $81($4, $6)
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)$4), [464])
	
.LABEL $label$7
	return ((int_32)($7 | $5) != (int_32)[0])
}

void .FUNC $180 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_64)*($5 + [8]) == (int_64)*(($1 + [40]))), [1744])
	$6 = ((int_64)*($1 + [32]) + (int_64)*($5))
	*($1 + [32]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [1824])
	*($1 + [48]) = (*($1 + [48]) + [1])
	*($1 + [72]) = ((int_64)*($1 + [72]) + (int_64)*(*($3 + [4])))
	$3 = *($3 + [8])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [64]))), [1744])
	$6 = ((int_64)*($1 + [56]) + (int_64)*($3))
	*($1 + [56]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [1824])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [800])
	*($7 + [120]) = ($7 + [112])
	*($7 + [116]) = $7
	*($7 + [112]) = $7
	CALL $106(($7 + [112]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $7, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [128])
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*(($10 = $11) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($10 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($10 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$8 = *($1 + [48])
	*($10 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($10 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $8))
	$9 = *($1)
	*($10 + [40]) = $9
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [24]))), [1744])
	$8 = ((int_64)*($1 + [16]) + (int_64)*($7))
	*($1 + [16]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [1824])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))), [1744])
	$8 = ((int_64)*($1 + [48]) + (int_64)*($3))
	*($1 + [48]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [1824])
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [800])
	$7 = *($1 + [80])
	$4 = *(($1 + [84]))
	$8 = (CASTING uint_64)(uint_32 int_32(($4 - $7) >> [5]))
	$3 = [76]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($7 + [8])
	$5 = ( *(($7 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = (($5 + $3) + [16])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = ($0 + [36])
	$3 = ($3 + [28])
	$4 = *($1 + [124])
	$5 = *(($1 + [128]))
	$6 = ($5 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$3 = (($6 & [-8]) + $3)
	
.LABEL $label$6
	$5 = ($3 + [4])
	if ( ($5 <= [513]) ){ goto $label$8 }
	$3 = CALL malloc($5)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($11 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$7
	*($10 + [28]) = $3
	*($10 + [24]) = $3
	*($10 + [32]) = ($3 + $5)
	CALL $65(($10 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL free($3)
	$9 = *($10 + [40])
	
.LABEL $label$9
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($10 + [4]) = $1
	*($10) = $0
	*($10 + [12]) = $1
	*($10 + [8]) = ($10 + [48])
	*($10 + [16]) = ($10 + [40])
	*($10 + [20]) = ($10 + [80])
	*($10 + [88]) = $10
	CALL $115(($10 + [88]), $7, ($7 + [1]), ($7 + [2]), ($7 + [3]))
	*([0] + [4]) = ($10 + [96])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	*(($9 = $10) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($9 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($9 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$2 = *($1 + [48])
	*($9 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($9 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $2))
	$8 = *($1)
	*($9 + [40]) = $8
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [24]))), [1744])
	$2 = ((int_64)*($1 + [16]) + (int_64)*($7))
	*($1 + [16]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [1824])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3 + [4])))
	$3 = *($3 + [8])
	CALL eosio_assert(((int_64)*(($3 + [64])) == (int_64)*(($1 + [104]))), [1744])
	$2 = ((int_64)*($1 + [96]) + (int_64)*($3 + [56]))
	*($1 + [96]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [96]) < (int_64)4611686018427387904), [1824])
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [800])
	$7 = *($1 + [80])
	$4 = *(($1 + [84]))
	$2 = (CASTING uint_64)(uint_32 int_32(($4 - $7) >> [5]))
	$3 = [76]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($7 + [8])
	$5 = ( *(($7 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = (($5 + $3) + [16])
	$2 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = ($0 + [36])
	$3 = ($3 + [28])
	$4 = *($1 + [124])
	$5 = *(($1 + [128]))
	$6 = ($5 - $4)
	$2 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$3 = (($6 & [-8]) + $3)
	
.LABEL $label$6
	$5 = ($3 + [4])
	if ( ($5 <= [513]) ){ goto $label$8 }
	$3 = CALL malloc($5)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($10 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$7
	*($9 + [28]) = $3
	*($9 + [24]) = $3
	*($9 + [32]) = ($3 + $5)
	CALL $65(($9 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), *($9 + [80]), $3, $5)
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL free($3)
	$8 = *($9 + [40])
	
.LABEL $label$9
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [12]) = $1
	*($9 + [8]) = ($9 + [48])
	*($9 + [16]) = ($9 + [40])
	*($9 + [20]) = ($9 + [80])
	*($9 + [88]) = $9
	CALL $114(($9 + [88]), $7, ($7 + [1]), ($7 + [2]), ($7 + [3]))
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $247(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $248($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $248($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	*(($9 = $10) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($9 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($9 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$2 = *($1 + [48])
	*($9 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($9 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $2))
	$8 = *($1)
	*($9 + [40]) = $8
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [24]))), [1744])
	$2 = ((int_64)*($1 + [16]) + (int_64)*($7))
	*($1 + [16]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [1824])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [72]))), [1744])
	$2 = ((int_64)*($1 + [64]) + (int_64)*($3))
	*($1 + [64]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [1824])
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [800])
	$7 = *($1 + [80])
	$4 = *(($1 + [84]))
	$2 = (CASTING uint_64)(uint_32 int_32(($4 - $7) >> [5]))
	$3 = [76]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($7 + [8])
	$5 = ( *(($7 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = (($5 + $3) + [16])
	$2 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = ($0 + [36])
	$3 = ($3 + [28])
	$4 = *($1 + [124])
	$5 = *(($1 + [128]))
	$6 = ($5 - $4)
	$2 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$5:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$3 = (($6 & [-8]) + $3)
	
.LABEL $label$6
	$5 = ($3 + [4])
	if ( ($5 <= [513]) ){ goto $label$8 }
	$3 = CALL malloc($5)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($10 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$7
	*($9 + [28]) = $3
	*($9 + [24]) = $3
	*($9 + [32]) = ($3 + $5)
	CALL $65(($9 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), *($9 + [80]), $3, $5)
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL free($3)
	$8 = *($9 + [40])
	
.LABEL $label$9
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [12]) = $1
	*($9 + [8]) = ($9 + [48])
	*($9 + [16]) = ($9 + [40])
	*($9 + [20]) = ($9 + [80])
	*($9 + [88]) = $9
	CALL $116(($9 + [88]), $7, ($7 + [1]), ($7 + [2]), ($7 + [3]))
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $237 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [2272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [2320])
	$4 = *($0 + [24])
	$5 = ($0 + [28])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$2 = *($1)
	$8 = ([0] - $4)
	$10 = ($9 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$1 }
	$9 = $10
	$6 = ($10 + [-24])
	$10 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)$4), [2384])
	$8 = ($9 + [-24])
	$3 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = *($9)
	*($9) = [0]
	$4 = *($8)
	*($8) = $10
	if ( ($4 == 0) ){ goto $label$6 }
	$10 = *($4 + [124])
	if ( ($10 == 0) ){ goto $label$7 }
	*(($4 + [128])) = $10
	CALL $248($10)
	
.LABEL $label$7
	$5 = *($4 + [80])
	if ( ($5 == 0) ){ goto $label$8 }
	$7 = ($4 + [84])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$10 }
	$6 = ([0] - $5)
	$10 = ($10 + [-24])
	
.LOOP $label$11:
	if ( ((*($10) & [1]) == 0) ){ goto $label$12 }
	CALL $248(*(($10 + [8])))
	
.LABEL $label$12
	$10 = ($10 + [-32])
	if ( ((int_32)($10 + $6) != (int_32)[-24]) ){ goto $label$11 }
	$10 = *(($4 + [80]))
	goto $label$9 
	
.LABEL $label$10
	$10 = $5
	
.LABEL $label$9
	*($7) = $5
	CALL $248($10)
	
.LABEL $label$8
	CALL $248($4)
	
.LABEL $label$6
	*($8 + [8]) = *($9 + [8])
	*(($8 + [16])) = *(($9 + [16]))
	$8 = ($8 + [24])
	$9 = ($9 + [24])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$5 }
	$9 = *(($0 + [28]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$9 = ($9 + [-24])
	$4 = *($9)
	*($9) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	$10 = *($4 + [124])
	if ( ($10 == 0) ){ goto $label$15 }
	*(($4 + [128])) = $10
	CALL $248($10)
	
.LABEL $label$15
	$5 = *($4 + [80])
	if ( ($5 == 0) ){ goto $label$16 }
	$3 = ($4 + [84])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$18 }
	$6 = ([0] - $5)
	$10 = ($10 + [-24])
	
.LOOP $label$19:
	if ( ((*($10) & [1]) == 0) ){ goto $label$20 }
	CALL $248(*(($10 + [8])))
	
.LABEL $label$20
	$10 = ($10 + [-32])
	if ( ((int_32)($10 + $6) != (int_32)[-24]) ){ goto $label$19 }
	$10 = *(($4 + [80]))
	goto $label$17 
	
.LABEL $label$18
	$10 = $5
	
.LABEL $label$17
	*($3) = $5
	CALL $248($10)
	
.LABEL $label$16
	CALL $248($4)
	
.LABEL $label$14
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [144]))
	*($11 + [4]) = $1
	*($11) = $0
	*($11 + [8]) = $11
	CALL $238(($11 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]), ($0 + [39]))
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [880])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $247([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [912])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [912])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[16]), [912])
	CALL memcpy(($6 + [16]), ($7 + [16]), [4])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $124(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $248($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $247([40])) + [24]) = $1
	CALL $125(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $124(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $248($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [912])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [912])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [96])
	*([0] + [4]) = $13
	CALL require_auth($1)
	CALL eosio_assert(((int_32)CALL $186(($0 + [16]), $2) ^ (int_32)[1]), [2944])
	*($13 + [56]) = $2
	CALL $156(($13 + [40]), ($13 + [56]))
	$8 = CALL $257(($13 + [40]), [46], [-1])
	CALL eosio_assert(((int_32)uint_32($8 >> [31]) ^ (int_32)[1]), [2992])
	CALL $261(($13 + [24]), ($13 + [40]), ($8 + [1]), [-1], ($13 + [40]))
	$7 = [0]
	CALL $261(($13 + [8]), ($13 + [40]), [0], $8, ($13 + [40]))
	if ( ((int_32)CALL $256(($13 + [8]), [46], [0]) != (int_32)[-1]) ){ goto $label$1 }
	$8 = *($13 + [8])
	$7 = ((int_32)( *($13 + [12]) ? uint_32($8 >> [1]) : ($8 & [1]) ) != (int_32)[0])
	
.LABEL $label$1
	CALL eosio_assert($7, [2992])
	$8 = [1]
	$7 = *($13 + [8])
	$6 = CALL strlen([3040])
	if ( ((int_32)$6 != (int_32)( *($13 + [12]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	$8 = ((int_32)CALL $258(($13 + [8]), [0], [-1], [3040], $6) != (int_32)[0])
	
.LABEL $label$2
	CALL eosio_assert($8, [2992])
	$8 = ( *($13 + [32]) ? (($13 + [24]) | [1]) : (*($13 + [24]) & [1]) )
	$7 = [-1]
	
.LOOP $label$3:
	$6 = ($8 + $7)
	$3 = ($7 + [1])
	$7 = $3
	if ( *(($6 + [1])) ){ goto $label$3 }
	$4 = (CASTING uint_64)(uint_32 $3)
	$10 = (int_64)0
	$9 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$4:
	$12 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$4) ){ goto $label$5 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [165])
	goto $label$6 
	
.LABEL $label$7
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$4 }
	$5 = *(($0 + [392]))
	$6 = *(($0 + [396]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$10 }
	$8 = ($6 + [-24])
	$3 = ([0] - $5)
	
.LOOP $label$11:
	if ( ((int_64)*(*($8)) == (int_64)$11) ){ goto $label$10 }
	$6 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$7 = ($0 + [368])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$13 }
	$8 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$7), [464])
	goto $label$12 
	
.LABEL $label$13
	$8 = [0]
	$6 = CALL db_find_i64(*(($0 + [368])), *(($0 + [376])), (int_64)-3588043185659576320, $11)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	$8 = CALL $187($7, $6)
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$7), [464])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [3056])
	$5 = *(($0 + [224]))
	$6 = *(($0 + [228]))
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$14 }
	$8 = ($6 + [-24])
	$3 = ([0] - $5)
	
.LOOP $label$15:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$14 }
	$6 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $3) != (int_32)[-24]) ){ goto $label$15 }
	
.LABEL $label$14
	$7 = ($0 + [200])
	$8 = ($0 + [192])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$18 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$7), [464])
	if ( $6 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$18
	$6 = CALL db_find_i64(*(($0 + [200])), *(($0 + [208])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*(CALL $63($7, $6) + [140]) == (int_32)$7), [464])
	goto $label$16 
	
.LABEL $label$17
	CALL $91(($0 + [448]), $1)
	CALL $92($8, $1)
	
.LABEL $label$16
	CALL $194($8, $1, $2)
	$7 = ($0 + [144])
	if ( (CALL $188($7, $2) == 0) ){ goto $label$19 }
	CALL $195(($0 + [320]))
	*($13 + [88]) = $1
	*($13 + [80]) = $2
	$10 = *($7)
	*($13 + [76]) = ($13 + [88])
	*($13 + [72]) = ($13 + [80])
	CALL $189(($13 + [64]), ($0 + [152]), $10, ($13 + [72]))
	
.LABEL $label$19
	CALL $190($7, $2)
	CALL $196($8, $1, $2)
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$20 }
	CALL $248(*($13 + [16]))
	
.LABEL $label$20
	if ( ((*($13 + [24]) & [1]) == 0) ){ goto $label$21 }
	CALL $248(*(($13 + [32])))
	
.LABEL $label$21
	if ( ((*($13 + [40]) & [1]) == 0) ){ goto $label$22 }
	CALL $248(*($13 + [48]))
	
.LABEL $label$22
	*([0] + [4]) = ($13 + [96])
}

void .FUNC $235 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$4 = *($1)
	CALL $250(($1 + [44]), *($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [800])
	$3 = *($1 + [32])
	$5 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($5 + [79])
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$5 = *(($1 + [44]))
	$5 = ( *(($1 + [48])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$3 = ($5 + $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $3)
	CALL $83($8, $1)
	CALL db_update_i64(*($1 + [116]), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$9 = (*([0] + [4]) - [112])
	$11 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = [0]
	$7 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $3)
	
.LABEL $label$1
	*(($11 + [40])) = (int_64)1397703940
	*($11 + [32]) = (int_64)0
	*($11 + [24]) = (int_64)0
	CALL eosio_assert([1], [944])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [1008])
	*($11 + [56]) = (int_64)0
	*($11 + [48]) = (int_64)0
	*($11 + [100]) = $7
	*($11 + [96]) = $7
	*($11 + [104]) = ($7 + $3)
	*($11 + [64]) = ($11 + [96])
	*($11 + [80]) = ($11 + [24])
	CALL $209(($11 + [80]), ($11 + [64]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	*(($1 = (($11 + [64]) + [8]))) = *(($11 + [40]))
	$8 = *($11 + [24])
	*($11 + [64]) = *($11 + [32])
	$5 = *(($11 + [56]))
	$4 = *(($11 + [48]))
	*((($11 + [80]) + [8])) = *($1)
	*($11 + [80]) = *($11 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$10 = *((*($1) + $10))
	
.LABEL $label$9
	$6 = *((($11 + [80]) + [8]))
	*((($11 + [96]) + [8])) = $6
	*((($11 + [8]) + [8])) = $6
	$6 = *($11 + [80])
	*($11 + [96]) = $6
	*($11 + [8]) = $6
	CALL void $1((int_32 $8), (int_64 ($11 + [8])), (int_32 $4), (int_64 $5), (int_64 $10))
	*([0] + [4]) = ($11 + [112])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	CALL require_auth(*($0 + [8]))
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [16]) + [24])) = (int_64)1397703940
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert([1], [944])
	$7 = (int_64)5459781
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [1008])
	*($10 + [84]) = $6
	*($10 + [80]) = $6
	*($10 + [88]) = ($6 + $3)
	*($10 + [48]) = ($10 + [80])
	*($10 + [64]) = ($10 + [16])
	CALL $208(($10 + [64]), ($10 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *((($10 + [16]) + [8]))
	*(($10 + [60])) = *(($10 + [44]))
	*(($1 = (($10 + [48]) + [8]))) = *(($10 + [40]))
	$4 = *($10 + [16])
	*($10 + [48]) = *($10 + [32])
	*($10 + [52]) = *(($10 + [36]))
	*((($10 + [64]) + [8])) = *($1)
	*($10 + [64]) = *($10 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [64]) + [8]))
	*((($10 + [80]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [64])
	*($10 + [80]) = $5
	*($10) = $5
	CALL void $1((int_32 $4), (int_64 $7), (int_64 $10), (int_32 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	CALL require_auth(*($0 + [8]))
}

void .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL require_auth(*($0 + [8]))
	$4 = [0]
	$1 = ($0 + [320])
	$2 = ($0 + [328])
	$0 = CALL db_lowerbound_i64(*($2), *(($0 + [336])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	CALL $98($2, $0)
	goto $label$1 
	
.LABEL $label$2
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [3328])
	$3 = *($1)
	*($5 + [8]) = $1
	CALL $205($5, $2, $3, ($5 + [8]))
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4)
{
	CALL require_auth(*($0 + [8]))
}

void .FUNC $27 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0 + [8]))
	CALL $203(($0 + [320]), $1)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $232 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [2240])
	$6 = *($0 + [4])
	$7 = *($6 + [40])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3538024836733337600, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [40]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx_double_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$2), [464])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $182($2, CALL $fimport$7(*($2), *($2 + [8]), (int_64)-3538024836733337600, $3))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$2), [464])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [40])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $80($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [864])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [864])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $105(CALL $104($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $247([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [16])
	$1 = ( *(($4 + [20])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [16])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [16])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $80($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [864])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [864])
	CALL memcpy($6, ($4 + [8]), [8])
	*($9 + [4]) = ($8 + [16])
	CALL $69($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$4 = *($1)
	*($1 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [16]) = (*($1 + [16]) + [1])
	*($1 + [24]) = *(*($3))
	$3 = ($1 + [64])
	*(($1 + [80])) = *($3)
	*($1 + [72]) = *($1 + [56])
	$9 = *($1 + [56])
	$11 = $10
	CALL __multi3($11, $9, (int_64)$9 >> (int_64)63), (int_64)10, (int_64)0)
	$6 = *($3)
	$5 = *(($11 + [8]))
	$9 = *($11)
	CALL eosio_assert(( (uint_64)($9 <= (int_64)4611686018427387904) ? ((int_64)$5 < (int_64)0) : (int_64)($5 == 0) ), [1600])
	CALL eosio_assert(( ((uint_64)$9 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$5 > (int_64)-1) : ((int_64)$5 == (int_64)-1) ), [1632])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [1664])
	CALL eosio_assert([1], [1696])
	CALL eosio_assert([1], [1712])
	$5 = *($1 + [56])
	$7 = *($3)
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [1744])
	$9 = ((int_64)$5 + (int_64)((int_64)$9 / (int_64)100))
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [1792])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [1824])
	*($3) = $7
	*($1 + [56]) = $9
	*($1 + [88]) = (int_64)2
	$3 = *($1 + [108])
	*($1 + [104]) = $3
	*($1 + [108]) = ($3 + [1])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [800])
	$3 = *($1 + [32])
	$8 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [79])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$8 = *($1 + [44])
	$8 = ( *(($1 + [48])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$3 = ($8 + $3)
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($3)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11 + [20]) = $10
	*($11 + [16]) = $10
	*($11 + [24]) = ($10 + $3)
	CALL $83(($11 + [16]), $1)
	CALL db_update_i64(*($1 + [116]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $102 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($8 + [8]) = $1
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3689251837816340480, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $87($5, $7)
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)$5), [464])
	
.LABEL $label$3
	*($8) = ($8 + [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [576])
	CALL $103($5, $6, (int_64)0, $8)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [864])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [864])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [864])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [864])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [864])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $107 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1008])
	*(($2 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [1008])
	*(($2 = ($0 + [64]))) = (int_64)1397703940
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [1008])
	*(($2 = ($0 + [88]))) = (int_64)1397703940
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [1008])
	*(($2 = ($0 + [104]))) = (int_64)1397703940
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [944])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [1008])
	return $0
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [76]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [864])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $247(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $248($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $248($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [912])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [76]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [912])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [912])
	CALL memcpy(($1 + [112]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $212 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = $1
	$2 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [48])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	$6 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3588043185659576320, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $187($5, $6)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$5), [464])
	
.LABEL $label$3
	CALL eosio_assert(($4 == 0), [3376])
	$1 = *($0)
	*($7 + [16]) = ($7 + [24])
	CALL $213(($7 + [8]), $5, $1, ($7 + [16]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $231 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx_double_lowerbound(*($8), *($8 + [8]), (int_64)-3538024836733337600, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [464])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $182($4, CALL $fimport$7(*($4), *($4 + [8]), (int_64)-3538024836733337600, $5))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [464])
	
.LABEL $label$4
	*(($2 + [40])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $219 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)$4), [464])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3689251837816340480, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $87($4, $5)
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)$4), [464])
	goto $label$3 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$3
	*($7 + [20]) = $5
	*($7 + [16]) = $4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1040])
	$1 = CALL current_time()
	if ( ((int_64)*($5 + [88]) != (int_64)2) ){ goto $label$7 }
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) <= (uint_32)(*($5 + [100]) + *($5 + [12]))) ){ goto $label$7 }
	$1 = *($0)
	*($7 + [8]) = ($7 + [16])
	CALL $220(($7 + [24]), ($0 + [88]), $1, ($7 + [8]))
	$1 = *($7 + [16])
	$5 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$6 = ((int_32)$5) != (int_32)[0]
	CALL eosio_assert($6), [2192])
	CALL eosio_assert($6, [2240])
	$6 = CALL db_next_i64(*($5 + [116]), ($7 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	CALL $87((CASTING uint_32)(uint_64 $1), $6)
	
.LABEL $label$8
	CALL $143($4, $5)
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [3440])
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1397703940
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [944])
	$6 = (int_64)5459781
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [1008])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [912])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [912])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [912])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $39 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL require_auth(*($0 + [8]))
	*(($3 = (($5 + [16]) + [8]))) = *(($2 + [8]))
	$4 = *($2)
	*(($5 + [12])) = *((($5 + [16]) + [12]))
	*(($5 + [8])) = *($3)
	*($5 + [16]) = $4
	*($5 + [4]) = *($5 + [20])
	*($5) = *($5 + [16])
	CALL $164(($0 + [192]), $1, $5)
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL require_auth(*($0 + [8]))
	$2 = [0]
	$1 = ($0 + [328])
	$0 = CALL db_lowerbound_i64(*($1), *(($0 + [336])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $98($1, $0)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [576])
	CALL $170($1, $2, (int_64)0, ($3 + [8]))
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL require_auth(*($0 + [8]))
	*(($3 = (($5 + [16]) + [8]))) = *(($2 + [8]))
	$4 = *($2)
	*(($5 + [12])) = *((($5 + [16]) + [12]))
	*(($5 + [8])) = *($3)
	*($5 + [16]) = $4
	*($5 + [4]) = *($5 + [20])
	*($5) = *($5 + [16])
	CALL $167(($0 + [192]), $1, $5)
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL require_auth(*($0 + [8]))
	$2 = [0]
	$1 = ($0 + [328])
	$0 = CALL db_lowerbound_i64(*($1), *(($0 + [336])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $98($1, $0)
	
.LABEL $label$1
	$0 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($0, [1488])
	CALL current_time()
	CALL eosio_assert($0, [576])
	CALL $173($1, $2, (int_64)0, ($3 + [8]))
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $35 (int_32 $0)
{
	CALL require_auth(*($0 + [8]))
	CALL $171(($0 + [320]))
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	$3 = *(($0 + [128]))
	$7 = *(($0 + [132]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [104])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-3844216343968612352, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $81($5, $7)
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)$5), [464])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [1040])
	CALL eosio_assert($7, [576])
	CALL $178($5, $6, (int_64)0, ($8 + [8]))
	*($8 + [24]) = $2
	$3 = *(($0 + [224]))
	$7 = *(($0 + [228]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [200])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$8 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [200])), *(($0 + [208])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $63($5, $7)
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	
.LABEL $label$7
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [528])
	*($8 + [16]) = ($8 + [24])
	CALL eosio_assert($7, [576])
	CALL $179($5, $6, (int_64)0, ($8 + [16]))
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $33 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	CALL require_auth(*($0 + [8]))
	$4 = [0]
	$2 = ($0 + [328])
	$3 = CALL db_lowerbound_i64(*($2), *(($0 + [336])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $98($2, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1488])
	CALL $174(($5 + [24]), ($0 + [192]), $1, $4)
	if ( ((int_64)*($5 + [24]) < (int_64)1) ){ goto $label$2 }
	*(($4 = (($5 + [8]) + [8]))) = *((($5 + [24]) + [8]))
	*($5 + [8]) = *($5 + [24])
	*((($5 + [40]) + [8])) = *($4)
	*($5 + [40]) = *($5 + [8])
	$4 = [0]
	$0 = CALL db_lowerbound_i64(*(($0 + [328])), *(($0 + [336])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $98($2, $0)
	
.LABEL $label$3
	$0 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($0, [1488])
	*($5 + [56]) = ($5 + [40])
	CALL eosio_assert($0, [576])
	CALL $175($2, $4, (int_64)0, ($5 + [56]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $30 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	CALL require_auth(*($0 + [8]))
	CALL eosio_assert(((int_32)CALL $186(($0 + [16]), $1) ^ (int_32)[1]), [2944])
	*($12 + [56]) = $1
	CALL $156(($12 + [40]), ($12 + [56]))
	$7 = CALL $257(($12 + [40]), [46], [-1])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [2992])
	CALL $261(($12 + [24]), ($12 + [40]), ($7 + [1]), [-1], ($12 + [40]))
	$6 = [0]
	CALL $261(($12 + [8]), ($12 + [40]), [0], $7, ($12 + [40]))
	if ( ((int_32)CALL $256(($12 + [8]), [46], [0]) != (int_32)[-1]) ){ goto $label$1 }
	$7 = *($12 + [8])
	$6 = ((int_32)( *($12 + [12]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)[0])
	
.LABEL $label$1
	CALL eosio_assert($6, [2992])
	$7 = [1]
	$6 = *($12 + [8])
	$5 = CALL strlen([3040])
	if ( ((int_32)$5 != (int_32)( *($12 + [12]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$2 }
	$7 = ((int_32)CALL $258(($12 + [8]), [0], [-1], [3040], $5) != (int_32)[0])
	
.LABEL $label$2
	CALL eosio_assert($7, [2992])
	$7 = ( *($12 + [32]) ? (($12 + [24]) | [1]) : (*($12 + [24]) & [1]) )
	$6 = [-1]
	
.LOOP $label$3:
	$5 = ($7 + $6)
	$2 = ($6 + [1])
	$6 = $2
	if ( *(($5 + [1])) ){ goto $label$3 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$9 = (int_64)0
	$8 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$4:
	$11 = (int_64)0
	if ( ((uint_64)$9 >= (uint_64)$3) ){ goto $label$5 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$6 = ($6 + [165])
	goto $label$6 
	
.LABEL $label$7
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$9 }
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$11 = ((int_64)$11 & (int_64)15)
	
.LABEL $label$8
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$4 }
	$4 = *(($0 + [392]))
	$5 = *(($0 + [396]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	$7 = ($5 + [-24])
	$2 = ([0] - $4)
	
.LOOP $label$11:
	if ( ((int_64)*(*($7)) == (int_64)$10) ){ goto $label$10 }
	$5 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $2) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = ($0 + [368])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$13 }
	$7 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$6), [464])
	goto $label$12 
	
.LABEL $label$13
	$7 = [0]
	$5 = CALL db_find_i64(*(($0 + [368])), *(($0 + [376])), (int_64)-3588043185659576320, $10)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	$7 = CALL $187($6, $5)
	CALL eosio_assert(((int_32)*($7 + [8]) == (int_32)$6), [464])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [3056])
	$7 = ($0 + [144])
	if ( (CALL $188($7, $1) == 0) ){ goto $label$14 }
	*($12 + [88]) = (int_64)0
	*($12 + [80]) = $1
	$9 = *($7)
	*($12 + [76]) = ($12 + [88])
	*($12 + [72]) = ($12 + [80])
	CALL $189(($12 + [64]), ($0 + [152]), $9, ($12 + [72]))
	
.LABEL $label$14
	CALL $190($7, $1)
	if ( ((*($12 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $248(*($12 + [16]))
	
.LABEL $label$15
	if ( ((*($12 + [24]) & [1]) == 0) ){ goto $label$16 }
	CALL $248(*(($12 + [32])))
	
.LABEL $label$16
	if ( ((*($12 + [40]) & [1]) == 0) ){ goto $label$17 }
	CALL $248(*($12 + [48]))
	
.LABEL $label$17
	*([0] + [4]) = ($12 + [96])
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0 + [8]))
	CALL $181(($0 + [144]), $1)
}

void .FUNC $215 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [128])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($1 + [112]) = (*($1 + [112]) + [1])
	$4 = *($1)
	CALL eosio_assert([1], [800])
	*($5 + [120]) = ($5 + [112])
	*($5 + [116]) = $5
	*($5 + [112]) = $5
	CALL $106(($5 + [112]), $1)
	CALL db_update_i64(*($1 + [120]), $2, $5, [112])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [128])
}

void .FUNC $214 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3689251837816340480, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $87($5, $4)
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$3
	*($7 + [20]) = $4
	*($7 + [16]) = $5
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [1040])
	$1 = *($0)
	*($7 + [8]) = ($7 + [16])
	CALL $217(($7 + [24]), ($0 + [88]), $1, ($7 + [8]))
	$1 = *($7 + [16])
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$6 = ((int_32)$4) != (int_32)[0]
	CALL eosio_assert($6), [2192])
	CALL eosio_assert($6, [2240])
	$6 = CALL db_next_i64(*($4 + [116]), ($7 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $87((CASTING uint_32)(uint_64 $1), $6)
	
.LABEL $label$6
	CALL $143($5, $4)
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $217 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [2016])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $247([128])
	CALL $84($3)
	*($3 + [112]) = $1
	CALL $218(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [116])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $86(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$4 }
	CALL $248(*(($1 + [52])))
	
.LABEL $label$4
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $248(*(($1 + [40])))
	
.LABEL $label$5
	CALL $248($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $211 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [2272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [2320])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2384])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $248($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $248($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $210 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [48])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [8]) == (int_32)$4), [464])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-3588043185659576320, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $187($4, $6)
	CALL eosio_assert(((int_32)*($5 + [8]) == (int_32)$4), [464])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [2192])
	CALL eosio_assert($6, [2240])
	$6 = CALL db_next_i64(*($5 + [12]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $187($4, $6)
	
.LABEL $label$5
	CALL $211($4, $5)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $247(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $259($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $248($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $199 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(uint_32 ([0] - *(*($5 + [4]) + [8])))
	if ( (CALL memcmp(*($5 + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$1 }
	$7 = *(*($5 + [12]) + [148])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492416, $8, *(*($5 + [16])))
	*(*(($5 + [12])) + [148]) = $7
	
.LABEL $label$2
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [16])))
	if ( (CALL memcmp((*($5 + [8]) + [8]), ($8 + [8]), [8]) == 0) ){ goto $label$3 }
	$7 = *((*($5 + [12]) + [152]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492415, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [152])) = $7
	
.LABEL $label$4
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$3
	$5 = *($0)
	$6 = *($5)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($5 + [4]) + [32])))
	if ( (CALL memcmp((*($5 + [8]) + [16]), ($8 + [8]), [8]) == 0) ){ goto $label$5 }
	$7 = *((*($5 + [12]) + [156]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$6 }
	$7 = CALL db_idx_double_find_primary(*($6), *($6 + [8]), (int_64)-3922483085538492414, $8, *(*($5 + [16])))
	*((*(($5 + [12])) + [156])) = $7
	
.LABEL $label$6
	CALL db_idx_double_update($7, *(*($5 + [20])), ($8 + [8]))
	
.LABEL $label$5
	$0 = *($0)
	$7 = *($0)
	*($8 + [8]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *(*($0 + [4]) + [48])))
	if ( (CALL memcmp((*($0 + [8]) + [24]), ($8 + [8]), [8]) == 0) ){ goto $label$7 }
	$5 = *((*($0 + [12]) + [160]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL db_idx_double_find_primary(*($7), *($7 + [8]), (int_64)-3922483085538492413, $8, *(*($0 + [16])))
	*((*(($0 + [12])) + [160])) = $5
	
.LABEL $label$8
	CALL db_idx_double_update($5, *(*($0 + [20])), ($8 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $196 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($8 + [8]) = $2
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $63($5, $7)
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	
.LABEL $label$3
	*($8) = ($8 + [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [576])
	CALL $197($5, $6, (int_64)0, $8)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $197 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	*(($9 = $10) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [140]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	*($9 + [48]) = (CASTING float_64)(uint_32 ([0] - *($1 + [8])))
	*($9 + [56]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [16])))
	$2 = *($1 + [48])
	*($9 + [64]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - *($1 + [32])))
	*($9 + [72]) = (CASTING float_64)(int_64 (int_64))((int_64)0 - $2))
	$8 = *($1)
	*($9 + [40]) = $8
	$7 = *($1 + [120])
	$5 = *($1 + [116])
	$6 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	if ( ((((uint_32)($6 - $5) / (uint_32)[7200]) + $7) <= [10]) ){ goto $label$2 }
	*(($1 + [120])) = [9]
	*(($1 + [116])) = $6
	goto $label$1 
	
.LABEL $label$2
	if ( ($7 == 0) ){ goto $label$3 }
	*(($1 + [120])) = ($7 + [-1])
	goto $label$1 
	
.LABEL $label$3
	*(($1 + [116])) = ($5 + [7200])
	
.LABEL $label$1
	$7 = *($3)
	$6 = ($1 + [128])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)*(($1 + [132]))) ){ goto $label$5 }
	*($3) = *($7)
	*($6) = ($3 + [8])
	$8 = *($9 + [40])
	goto $label$4 
	
.LABEL $label$5
	CALL $198(($1 + [124]), $7)
	
.LABEL $label$4
	$4 = ($0 + [36])
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [800])
	$7 = *($1 + [80])
	$5 = *(($1 + [84]))
	$2 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [5]))
	$3 = [76]
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = *($7 + [8])
	$6 = ( *(($7 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$3 = (($6 + $3) + [16])
	$2 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$9 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$8 }
	
.LABEL $label$7
	$3 = ($3 + [28])
	$6 = *($1 + [124])
	$7 = *(($1 + [128]))
	$5 = ($7 - $6)
	$2 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$10:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$10 }
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$11 }
	$3 = (($5 & [-8]) + $3)
	
.LABEL $label$11
	$7 = ($3 + [4])
	if ( ($7 <= [513]) ){ goto $label$13 }
	$3 = CALL malloc($7)
	goto $label$12 
	
.LABEL $label$13
	$3 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$12
	*($9 + [28]) = $3
	*($9 + [24]) = $3
	*($9 + [32]) = ($3 + $7)
	CALL $65(($9 + [24]), $1)
	CALL db_update_i64(*($1 + [144]), *($9 + [80]), $3, $7)
	if ( ($7 <= [513]) ){ goto $label$14 }
	CALL free($3)
	$8 = *($9 + [40])
	
.LABEL $label$14
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$15 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [12]) = $1
	*($9 + [8]) = ($9 + [48])
	*($9 + [16]) = ($9 + [40])
	*($9 + [20]) = ($9 + [80])
	*($9 + [88]) = $9
	CALL $199(($9 + [88]), $4, ($4 + [1]), ($4 + [2]), ($4 + [3]))
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $194 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3922483085538492416, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $63($5, $7)
	CALL eosio_assert(((int_32)*($6 + [140]) == (int_32)$5), [464])
	
.LABEL $label$3
	$1 = CALL current_time()
	$7 = [1]
	if ( *($6 + [120]) ){ goto $label$5 }
	$7 = ((uint_32)(*($6 + [116]) + [7200]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)))
	
.LABEL $label$5
	CALL eosio_assert($7, [3216])
	$7 = ((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [28800]) / (uint_32)[86400])
	*($8 + [12]) = $7
	if ( ((uint_32)$7 <= (uint_32)*($6 + [136])) ){ goto $label$7 }
	*($8 + [8]) = ($8 + [12])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [576])
	CALL $201($5, $6, (int_64)0, ($8 + [8]))
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	$4 = *($6 + [124])
	$0 = *(($6 + [128]))
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$8 }
	$7 = int_32(($0 - $4) >> [3])
	$5 = [0]
	$6 = $4
	
.LOOP $label$9:
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$8 }
	$6 = ($6 + [8])
	$5 = ($5 + [1])
	if ( ($5 <= $7) ){ goto $label$9 }
	
.LABEL $label$8
	$6 = int_32(($0 - $4) >> [3])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL eosio_assert(((int_32)$5 == (int_32)$6), [3264])
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $195 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	$1 = ($0 + [8])
	$2 = [0]
	$0 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-3809126530584412160, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $98($1, $0)
	
.LABEL $label$1
	$0 = ((int_32)$2 != (int_32)[0])
	CALL eosio_assert($0, [1488])
	CALL current_time()
	CALL eosio_assert(((int_32)*($2 + [24]) != (int_32)[0]), [3152])
	CALL eosio_assert($0, [576])
	CALL $200($1, $2, (int_64)0, ($3 + [8]))
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$4 = *($0 + [4])
	$2 = *($4)
	*($1 + [16]) = [0]
	*($1) = *($2)
	*($1 + [24]) = (int_64)1
	$2 = *($0)
	*($1 + [8]) = *(*($4 + [4]))
	CALL eosio_assert([1], [864])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [864])
	CALL memcpy(($7 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [864])
	$4 = ($1 + [16])
	CALL memcpy(($7 + [16]), $4, [4])
	CALL eosio_assert([1], [864])
	CALL memcpy(($7 + [20]), ($1 + [24]), [8])
	$3 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-3538024836733337600, *(*($0 + [8])), $3, $7, [28])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = *(($2 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($1)
	*($7 + [40]) = (CASTING float_64)(int_32 ([0] - *($4)))
	*($1 + [40]) = CALL db_idx_double_store($3, (int_64)-3538024836733337600, $5, $6, ($7 + [40]))
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $193 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $247(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $259($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $248($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $248($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $190 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [464])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-3538024836733337600, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $182($4, $6)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [464])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [2896])
	CALL eosio_assert($6, [576])
	CALL $191($4, $5, (int_64)0, ($7 + [8]))
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $191 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [624])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [672])
	$5 = *($1 + [16])
	*($1 + [16]) = ($5 + [1])
	*($6 + [40]) = (CASTING float_64)(int_32 ([0] - $5))
	$4 = *($1)
	CALL eosio_assert([1], [800])
	CALL eosio_assert([1], [864])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [864])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [864])
	$5 = ($1 + [16])
	CALL memcpy(($6 + [16]), $5, [4])
	CALL eosio_assert([1], [864])
	CALL memcpy(($6 + [20]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $6, [28])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [56]) = (CASTING float_64)(int_32 ([0] - *($5)))
	if ( (CALL memcmp(($6 + [40]), ($6 + [56]), [8]) == 0) ){ goto $label$2 }
	$5 = ($1 + [40])
	$1 = *($5)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx_double_find_primary(*($0), *($0 + [8]), (int_64)-3538024836733337600, ($6 + [48]), $4)
	*($5) = $1
	
.LABEL $label$3
	CALL db_idx_double_update($1, $2, ($6 + [56]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [64])
}