(data (i32.const 8192) ":\00")
(data (i32.const 8194) "no bets table for this hand\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8308) "<Deck:\00")
(data (i32.const 8315) " hand:\00")
(data (i32.const 8322) " closed:\00")
(data (i32.const 8331) ">\00")
(data (i32.const 8333) "this betting window is still open\00")
(data (i32.const 8367) "<\00")
(data (i32.const 8369) "player\00")
(data (i32.const 8376) "<player win>\00")
(data (i32.const 8389) "banker\00")
(data (i32.const 8396) "<banker win>\00")
(data (i32.const 8409) "<tie win>\00")
(data (i32.const 8419) "tie\00")
(data (i32.const 8423) "playerpair\00")
(data (i32.const 8434) "<player pair win>\00")
(data (i32.const 8452) "bankerpair\00")
(data (i32.const 8463) "<banker pair win>\00")
(data (i32.const 8481) "<player lose>\00")
(data (i32.const 8495) "<banker lose>\00")
(data (i32.const 8509) "referrals\00")
(data (i32.const 8519) "unable to find config\00")
(data (i32.const 8541) "transfer\00")
(data (i32.const 8550) "Thanks for playing, please accept this Lelego Baccarat Bonus - Come play at https://play.lelego.io\00")
(data (i32.const 8649) "Lelego Baccarat - Worker Proposal Fund - Come play at https://play.lelego.io\00")
(data (i32.const 8726) "Lelego Baccarat - Referral Bonus - Come play at https://play.lelego.io\00")
(data (i32.const 8797) "<payout:\00")
(data (i32.const 8806) "You won betting on [\00")
(data (i32.const 8827) "] for hand [\00")
(data (i32.const 8840) "]! Thanks for playing eoslelego Baccarat at https://play.lelego.io\00")
(data (i32.const 8907) "this game result is tie and we return the bet to you for hand [\00")
(data (i32.const 8971) "\n\00")
(data (i32.const 8973) "llgagentcoin\00")
(data (i32.const 8986) "gameplay has been suspended temporarily\00")
(data (i32.const 9026) "invalid quantity in transfer\00")
(data (i32.const 9055) "zero quantity is disallowed in transfer\00")
(data (i32.const 9095) "only accept MB\00")
(data (i32.const 9110) "the betting window for this hand has closed\00")
(data (i32.const 9154) "invalid hand id\00")
(data (i32.const 9171) "<added referrer: \00")
(data (i32.const 9189) "setreferral\00")
(data (i32.const 9201) "<existing referrer>\00")
(data (i32.const 9221) "outside personal bet limits\00")
(data (i32.const 9249) "outside personal sidebet limits\00")
(data (i32.const 9281) "invalid bet type\00")
(data (i32.const 9298) "no reserve funds\00")
(data (i32.const 9315) "<Reward pool: \00")
(data (i32.const 9330) "bet exceeds max for this hand\00")
(data (i32.const 9360) "bet exceeds sidebet max for this hand\00")
(data (i32.const 9398) "dividend\00")
(data (i32.const 9407) "Dividend\00")
(data (i32.const 9416) "no bets table for this id\00")
(data (i32.const 9442) "deck does not match\00")
(data (i32.const 9462) "hand_id does not match\00")
(data (i32.const 9485) "betting window has not closed\00")
(data (i32.const 9515) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9564) "invalid symbol name\00")
(data (i32.const 9584) "write\00")
(data (i32.const 9590) "type mismatch\00")
(data (i32.const 9604) "attempt to add asset with different symbol\00")
(data (i32.const 9647) "addition underflow\00")
(data (i32.const 9666) "addition overflow\00")
(data (i32.const 9684) "init\00")
(data (i32.const 9689) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9740) "error reading iterator\00")
(data (i32.const 9763) "read\00")
(data (i32.const 9768) "singleton does not exist\00")
(data (i32.const 9793) "get\00")
(data (i32.const 9797) "cannot pass end iterator to modify\00")
(data (i32.const 9832) "object passed to modify is not in multi_index\00")
(data (i32.const 9878) "cannot modify objects in table of another contract\00")
(data (i32.const 9929) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9988) "cannot create objects in table of another contract\00")
(data (i32.const 10039) "object passed to erase is not in multi_index\00")
(data (i32.const 10084) "cannot erase objects in table of another contract\00")
(data (i32.const 10134) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10187) "true\00")
(data (i32.const 10192) "false\00")
(data (i32.const 10198) ".\00")
(data (i32.const 10200) " \00")
(data (i32.const 10202) ",\00")
(data (i32.const 10204) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10256) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10310) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10358) "cannot increment end iterator\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_remove_i64" (func $fimport$5 (param i32)))
(import "env" "prints" (func $fimport$6 (param i32)))
(import "env" "prints_l" (func $fimport$7 (param i32 i32)))
(import "env" "send_inline" (func $fimport$8 (param i32 i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "is_account" (func $fimport$11 (param i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "printui" (func $fimport$13 (param i64)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$15 (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$19 (param i64)))
(import "env" "db_previous_i64" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$21 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $64))
(export "_Znwj" (func $98))
(export "_ZdlPv" (func $100))
(export "_Znaj" (func $99))
(export "_ZdaPv" (func $101))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $33 $37 $40 $36 $6 $39 $10 $29 $35)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18796))
(global $global$2 i32 (i32.const 18796))


int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $122($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10388])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $122($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = ($global$0 - [64])
	$global$0 = $5
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$4 = CALL $103($5, $4)
	$3 = CALL $103(($5 + [16]), $3)
	$2 = CALL $103(($5 + [32]), $2)
	$1 = CALL $103(($5 + [48]), $1)
	CALL void $7((int_32 $1), (int_32 $2), (int_32 $3), (int_32 $4), (int_32 $0))
	if ( (*($4) & [1]) ){ goto $label$8 }
	if ( (*($3) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [8]))
	$0 = [1]
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($2) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($1) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($2 + [8]))
	if ( ((*($1) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($5 + [64])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	$11 = ($global$0 - [80])
	$global$0 = $11
	$0 = *($0 + [4])
	$12 = *($0 + [4])
	$13 = (*(*($0)) + int_32($12 >> [1]))
	$0 = *($0)
	if ( (($12 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($13) + $0))
	
.LABEL $label$1
	$5 = CALL $103($11, $5)
	$4 = CALL $103(($11 + [16]), $4)
	$3 = CALL $103(($11 + [32]), $3)
	$2 = CALL $103(($11 + [48]), $2)
	$1 = CALL $103(($11 + [64]), $1)
	CALL void $13((int_32 $1), (int_32 $2), (int_32 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $8), (int_32 $9), (int_32 $10), (int_32 $0))
	if ( (*($5) & [1]) ){ goto $label$10 }
	if ( (*($4) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$0 = [1]
	if ( (*($3) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($2) & $0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($2) & $0) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($2 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($1) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($11 + [80])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($11 + [80])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([10202])
	
.LABEL $label$1
	$3 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)8)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)16)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)24)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)56)
	*($2 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[48]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9584])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9584])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9584])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9584])
	CALL memcpy(*($6), ($7 + [16]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9584])
	CALL memcpy(*($6), ($7 + [24]), [8])
	*($6) = (*($6) + [8])
	CALL $83($0, ($7 + [32]))
	$7 = ($7 + [48])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9515])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9564])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9763])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $124($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8222])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $115 (int_32 $0)
{
	int_32 $1
	$1 = [0]
	if ( ((uint_32)($0 + [-33]) > (uint_32)[93]) ){ goto $label$1 }
	$1 = (CALL $114($0) == 0)
	
.LABEL $label$1
	return $1
}

int_32 .FUNC $122 (int_32 $0)
{
	return CALL $123([10400], $0)
}

int_32 .FUNC $121 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9832])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9878])
	*($1 + [32]) = [1]
	*($1 + [33]) = *(*($2))
	*($1 + [34]) = *(*($2 + [4]))
	*($1 + [35]) = *(*($2 + [8]))
	*($1 + [36]) = *(*($2 + [12]))
	$4 = *($1)
	*($1 + [37]) = *(*($2 + [16]))
	CALL eosio_assert([1], [9929])
	*(($2 = $3) + [16]) = [0]
	*($2) = ($2 + [16])
	$5 = ($1 + [8])
	*($2 + [28]) = $5
	*($2 + [24]) = $1
	$6 = ($1 + [20])
	*($2 + [32]) = $6
	$7 = ($1 + [32])
	*($2 + [36]) = $7
	$8 = ($1 + [33])
	*($2 + [40]) = $8
	$9 = ($1 + [34])
	*($2 + [44]) = $9
	$10 = ($1 + [35])
	*($2 + [48]) = $10
	$11 = ($1 + [36])
	*($2 + [52]) = $11
	$12 = ($1 + [37])
	*($2 + [56]) = $12
	$13 = ($1 + [40])
	*($2 + [60]) = $13
	CALL $22(($2 + [24]), $2)
	$14 = *($2 + [16])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$3 = CALL $122($14)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($14 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = ($3 + $14)
	*($2 + [16]) = $2
	*($2 + [28]) = $5
	*($2 + [32]) = $6
	*($2 + [36]) = $7
	*($2 + [40]) = $8
	*($2 + [44]) = $9
	*($2 + [48]) = $10
	*($2 + [52]) = $11
	*($2 + [56]) = $12
	*($2 + [60]) = $13
	*($2 + [24]) = $1
	CALL $23(($2 + [24]), ($2 + [16]))
	CALL db_update_i64(*($1 + [56]), (int_64)0, $3, $14)
	if ( ((uint_32)$14 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$4 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $125($3)
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($2 + [64])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9763])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	*($3 + [8]) = $6
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $122($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3) = (int_64)0
	*($3 + [8]) = [0]
	*($3 + [12]) = [0]
	*($3 + [20]) = $1
	*($3 + [16]) = $1
	*($3 + [24]) = ($1 + $6)
	*($3 + [32]) = ($3 + [16])
	*($3 + [40]) = $3
	CALL $62(($3 + [40]), ($3 + [32]))
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $125($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$6 = *(($3 + [12]))
	$2 = *(($3 + [11]))
	$0 = *(($3 + [10]))
	$7 = *(($3 + [9]))
	$8 = *(($3 + [8]))
	$9 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $9), (int_64 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 ((int_32)($7 & [255]) != (int_32)[0])), (int_32 ((int_32)($0 & [255]) != (int_32)[0])), (int_32 ((int_32)($2 & [255]) != (int_32)[0])), (int_32 ((int_32)($6 & [255]) != (int_32)[0])), (int_32 $5))
	$global$0 = ($3 + [48])
	return [1]
}

void .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18784])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18592]
	$3 = (((int_32)$1 * (int_32)[12]) + [18592])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9832])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9878])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9929])
	CALL eosio_assert([1], [9584])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9740])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9763])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)4982871454518345728
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4982871454518345728
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $75(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9689])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $42($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9689])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9797])
	CALL $43($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $44($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL $41(($0 + [8]), $1, *($0))
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $63(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	*(($1 = (($3 + [32]) + [8]))) = *((($3 + [16]) + [8]))
	*($3 + [32]) = *($3 + [16])
	*((($3 + [48]) + [8])) = *($1)
	*($3 + [48]) = *($3 + [32])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$6 = *((($3 + [48]) + [8]))
	*((($3 + [64]) + [8])) = $6
	*(($3 + [8])) = $6
	$6 = *($3 + [48])
	*($3) = $6
	*($3 + [64]) = $6
	CALL void $1((int_32 $3), (int_32 $5))
	$global$0 = ($3 + [80])
	return [1]
}

void .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $122($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [9515])
	$5 = (int_64)5462355
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $6
	$7 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [9564])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($2 + [4]) = $4
	*($2) = $4
	*($2 + [8]) = ($4 + $3)
	CALL $56($2, $0)
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [192])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8541]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$13 }
	CALL $46(($3 + [144]))
	CALL $24($0, ($3 + [144]), $1)
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [184])))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$13
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$12 }
	if ( ((int_64)$2 <= (int_64)-4362662280071864321) ){ goto $label$16 }
	if ( ((int_64)$2 <= (int_64)4923678848098238463) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)4923678848098238464) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)5371974782965252096) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)8516769952340901888) ){ goto $label$12 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [1]
	*($3 + [56]) = *($3 + [80])
	CALL $47($0, ($3 + [56]))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$16
	if ( ((int_64)$2 > (int_64)-4992623619436445697) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-6215726818809348096) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-4994130327958978560) ){ goto $label$12 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [2]
	*($3 + [32]) = *($3 + [104])
	CALL $48($0, ($3 + [32]))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-4362662280071864320) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-3075276122089661248) ){ goto $label$12 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [3]
	*($3 + [64]) = *($3 + [72])
	CALL $49($0, ($3 + [64]))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-4992623619436445696) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4417261948374089728) ){ goto $label$12 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [4]
	*($3 + [40]) = *($3 + [96])
	CALL $50($0, ($3 + [40]))
	
.LABEL $label$12
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$11
	*($3 + [92]) = [0]
	*($3 + [88]) = [5]
	*($3 + [48]) = *($3 + [88])
	CALL $51($0, ($3 + [48]))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$10
	*($3 + [124]) = [0]
	*($3 + [120]) = [6]
	*($3 + [16]) = *($3 + [120])
	CALL $52($0, ($3 + [16]))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$9
	*($3 + [116]) = [0]
	*($3 + [112]) = [7]
	*($3 + [24]) = *($3 + [112])
	CALL $53($0, ($3 + [24]))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$8
	*($3 + [140]) = [0]
	*($3 + [136]) = [8]
	*($3) = *($3 + [136])
	CALL $54($0, $3)
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$7
	*($3 + [132]) = [0]
	*($3 + [128]) = [9]
	*($3 + [8]) = *($3 + [128])
	CALL $55($0, ($3 + [8]))
	$global$0 = ($3 + [192])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [9988])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9584])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, $2, (int_64)4982871454518345728, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)4982871454518345728
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4982871454518345728
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $75(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

int_32 .FUNC $124 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10392]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10396])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10392]) = [1]
	$2 = ($2 << [16])
	*([0] + [10396]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10396])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10396]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10392]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10392]) = [1]
	$3 = ($3 << [16])
	*([0] + [10396]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10396])
	
.LABEL $label$10
	*([0] + [10396]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [10039])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10084])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10134])
	$2 = ($3 + [-24])
	$9 = *($4)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = *($3)
	*($3) = [0]
	$4 = *($2)
	*($2) = $5
	if ( ($4 == 0) ){ goto $label$8 }
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	$10 = ($4 + [44])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$8 = ($5 + [-48])
	if ( ((*(($5 + [-16])) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [-8])))
	
.LABEL $label$13
	$5 = $8
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$12 }
	$5 = *(($4 + [40]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $7
	
.LABEL $label$10
	*($10) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$14
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($4)
	
.LABEL $label$8
	*($2 + [8]) = *($3 + [8])
	*(($2 + [16])) = *(($3 + [16]))
	$2 = ($2 + [24])
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$7 }
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$6
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$18 }
	$9 = ($4 + [44])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$8 = ($5 + [-48])
	if ( ((*(($5 + [-16])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($5 + [-8])))
	
.LABEL $label$22
	$5 = $8
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$21 }
	$5 = *(($4 + [40]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $7
	
.LABEL $label$19
	*($9) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$23
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$24
	CALL _ZdlPv($4)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$16 }
	
.LABEL $label$5
	*(($0 + [28])) = $2
	CALL db_remove_i64(*($1 + [56]))
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9740])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $5)
	*(($4 = CALL _Znwj([64])) + [8 align=4]) = (int_64)0
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32]) = [0]
	*($4 + [36]) = [0]
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($4 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($4 + [8])
	*($3 + [40]) = $4
	*($3 + [48]) = ($4 + [20])
	*($3 + [52]) = ($4 + [32])
	*($3 + [56]) = ($4 + [33])
	*($3 + [60]) = ($4 + [34])
	*($3 + [64]) = ($4 + [35])
	*($3 + [68]) = ($4 + [36])
	*($3 + [72]) = ($4 + [37])
	*($3 + [76]) = ($4 + [40])
	CALL $84(($3 + [40]), ($3 + [32]))
	*($4 + [56]) = $1
	*($3 + [32]) = $4
	$6 = *($4)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $4
	*($7) = ($8 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $32(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$2 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	$0 = *($2 + [40])
	if ( ($0 == 0) ){ goto $label$10 }
	$8 = ($2 + [44])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($5 + [-48])
	if ( ((*(($5 + [-16])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [-8])))
	
.LABEL $label$14
	$5 = $1
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$13 }
	$5 = *(($2 + [40]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$10
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($2 + [28])))
	
.LABEL $label$15
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$16
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $4
}

void .FUNC $6 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	$0 = ($0 + [88])
	CALL $8($0, CALL $7($0, $1, [8194]))
}

int_32 .FUNC $7 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$0), [9689])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4229865212519383040, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $9($0, $4)
	CALL eosio_assert(((int_32)*($5 + [52]) == (int_32)$0), [9689])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	if ( (*($0 + [28]) == 0) ){ goto $label$13 }
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$13
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$3 }
	$5 = ($0 + [12])
	$7 = ($0 + [25])
	$8 = ($0 + [16])
	
.LOOP $label$15:
	$4 = *($4)
	$6 = *($5)
	if ( ($6 & [1]) ){ goto $label$19 }
	if ( (uint_32($6 >> [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	if ( *($8) ){ goto $label$17 }
	
.LABEL $label$18
	if ( (*($7) == 0) ){ goto $label$14 }
	if ( (CALL $116($4) == 0) ){ goto $label$14 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)CALL $110($5, $4, [0]) == (int_32)[-1]) ){ goto $label$14 }
	
.LABEL $label$16
	$4 = (*($1) + [1])
	*($1) = $4
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$15 }
	
.LABEL $label$14
	$4 = *($1)
	if ( (*(($0 + [28])) == 0) ){ goto $label$11 }
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$12
	if ( (*($0 + [32]) == 0) ){ goto $label$20 }
	return [0]
	
.LABEL $label$20
	*(($0 + [32])) = [1]
	$1 = *($1)
	$0 = ($1 - $2)
	$4 = [10]
	$6 = *($3)
	$5 = $6
	$8 = ($6 & [1])
	if ( ($8 == 0) ){ goto $label$21 }
	$5 = *($3)
	$4 = (($5 & [-2]) + [-1])
	
.LABEL $label$21
	if ( ((uint_32)$0 <= (uint_32)$4) ){ goto $label$22 }
	$5 = ( *($3 + [4]) ? uint_32($6 >> [1]) : $8 )
	CALL $107($3, $4, ($0 - $4), $5, [0], $5, [0])
	$5 = *($3)
	
.LABEL $label$22
	$5 = ( *($3 + [8]) ? ($3 + [1]) : ($5 & [1]) )
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$23 }
	$4 = $5
	
.LOOP $label$24:
	*($4) = *($2)
	$4 = ($4 + [1])
	$2 = ($2 + [1])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$24 }
	$5 = ($5 + $0)
	
.LABEL $label$23
	*($5) = [0]
	if ( (*($3) & [1]) ){ goto $label$10 }
	*($3) = ($0 << [1])
	return [1]
	
.LABEL $label$11
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$9 }
	$5 = *($4)
	$6 = *($0)
	if ( ($6 & [1]) ){ goto $label$8 }
	if ( (uint_32($6 >> [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$10
	*($3 + [4]) = $0
	return [1]
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	if ( *($0 + [4]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($0 + [24]) == 0) ){ goto $label$4 }
	if ( (CALL $115($5) == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)CALL $110($0, $5, [0]) == (int_32)[-1]) ){ goto $label$4 }
	
.LABEL $label$5
	*($1) = (*($1) + [1])
	goto $label$1 
	
.LABEL $label$4
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$1 }
	$6 = ($0 + [12])
	$11 = ($0 + [25])
	$9 = ($0 + [24])
	$12 = ($0 + [4])
	$7 = ($0 + [16])
	
.LOOP $label$25:
	$5 = *($5)
	$8 = *($6)
	if ( ($8 & [1]) ){ goto $label$29 }
	if ( (uint_32($8 >> [1]) == 0) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	if ( *($7) ){ goto $label$27 }
	
.LABEL $label$28
	if ( (*($11) == 0) ){ goto $label$26 }
	if ( CALL $116($5) ){ goto $label$1 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)CALL $110($6, $5, [0]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$26
	$5 = *(*($1))
	$8 = *($0)
	if ( ($8 & [1]) ){ goto $label$33 }
	if ( (uint_32($8 >> [1]) == 0) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	if ( *($12) ){ goto $label$31 }
	
.LABEL $label$32
	if ( (*($9) == 0) ){ goto $label$30 }
	if ( CALL $115($5) ){ goto $label$1 }
	goto $label$30 
	
.LABEL $label$31
	if ( ((int_32)CALL $110($0, $5, [0]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$30
	$5 = (*($1) + [1])
	*($1) = $5
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$25 }
	goto $label$1 
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	$5 = *($4)
	$6 = *($0)
	if ( ($6 & [1]) ){ goto $label$45 }
	if ( (uint_32($6 >> [1]) == 0) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	if ( *($0 + [4]) ){ goto $label$43 }
	
.LABEL $label$44
	if ( (*($0 + [24]) == 0) ){ goto $label$46 }
	$7 = ($0 + [32])
	$6 = CALL $115($5)
	$5 = (*($0 + [32]) == 0)
	if ( $6 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$46
	$7 = ($0 + [32])
	if ( *($0 + [32]) ){ goto $label$34 }
	$6 = [1]
	$8 = *($0 + [12])
	if ( ($8 & [1]) ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$43
	$6 = CALL $110($0, $5, [0])
	$7 = ($0 + [32])
	$5 = (*($0 + [32]) == 0)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$41 }
	
.LABEL $label$42
	if ( ($5 == 0) ){ goto $label$40 }
	*($7) = [1]
	goto $label$1 
	
.LABEL $label$41
	if ( ($5 == 0) ){ goto $label$34 }
	$5 = *(*($1))
	$6 = [1]
	$8 = *($0 + [12])
	if ( (($8 & [1]) == 0) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	*($7) = [0]
	*($1) = (*($1) + [1])
	goto $label$1 
	
.LABEL $label$39
	if ( (uint_32($8 >> $6) == 0) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	if ( *(($0 + [16])) ){ goto $label$36 }
	
.LABEL $label$37
	if ( (*($0 + [25]) == 0) ){ goto $label$34 }
	if ( (CALL $116(int_32(($5 << [24]) >> [24])) == 0) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$36
	if ( ((int_32)CALL $110(($0 + [12]), int_32(($5 << [24]) >> [24]), [0]) == (int_32)[-1]) ){ goto $label$34 }
	
.LABEL $label$35
	*($7) = [1]
	goto $label$1 
	
.LABEL $label$34
	$5 = *(*($1))
	$8 = *($0 + [12])
	if ( ($8 & [1]) ){ goto $label$51 }
	$6 = ($0 + [12])
	if ( (uint_32($8 >> [1]) == 0) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$6 = ($0 + [12])
	if ( *(($0 + [16])) ){ goto $label$49 }
	
.LABEL $label$50
	if ( (*($0 + [25]) == 0) ){ goto $label$47 }
	if ( (CALL $116($5) == 0) ){ goto $label$47 }
	goto $label$48 
	
.LABEL $label$49
	if ( ((int_32)CALL $110($6, $5, [0]) == (int_32)[-1]) ){ goto $label$47 }
	
.LABEL $label$48
	$4 = (*($1) + [1])
	*($1) = $4
	
.LABEL $label$47
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$52 }
	$9 = ($0 + [25])
	$10 = ($0 + [24])
	$11 = ($0 + [4])
	$12 = ($0 + [16])
	
.LOOP $label$53:
	$5 = *($5)
	$8 = *($6)
	if ( ($8 & [1]) ){ goto $label$57 }
	if ( (uint_32($8 >> [1]) == 0) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	if ( *($12) ){ goto $label$55 }
	
.LABEL $label$56
	if ( (*($9) == 0) ){ goto $label$54 }
	if ( CALL $116($5) ){ goto $label$52 }
	goto $label$54 
	
.LABEL $label$55
	if ( ((int_32)CALL $110($6, $5, [0]) != (int_32)[-1]) ){ goto $label$52 }
	
.LABEL $label$54
	$5 = *(*($1))
	$8 = *($0)
	if ( ($8 & [1]) ){ goto $label$61 }
	if ( (uint_32($8 >> [1]) == 0) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	if ( *($11) ){ goto $label$59 }
	
.LABEL $label$60
	if ( (*($10) == 0) ){ goto $label$58 }
	if ( CALL $115($5) ){ goto $label$52 }
	goto $label$58 
	
.LABEL $label$59
	if ( ((int_32)CALL $110($0, $5, [0]) != (int_32)[-1]) ){ goto $label$52 }
	
.LABEL $label$58
	$5 = (*($1) + [1])
	*($1) = $5
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$53 }
	
.LABEL $label$52
	*($7) = [1]
	
.LABEL $label$1
	$2 = *($1)
	$0 = ($2 - $4)
	$1 = [10]
	$6 = *($3)
	$5 = $6
	$8 = ($6 & [1])
	if ( ($8 == 0) ){ goto $label$62 }
	$5 = *($3)
	$1 = (($5 & [-2]) + [-1])
	
.LABEL $label$62
	if ( ((uint_32)$0 <= (uint_32)$1) ){ goto $label$63 }
	$5 = ( *($3 + [4]) ? uint_32($6 >> [1]) : $8 )
	CALL $107($3, $1, ($0 - $1), $5, [0], $5, [0])
	$5 = *($3)
	
.LABEL $label$63
	$5 = ( *($3 + [8]) ? ($3 + [1]) : ($5 & [1]) )
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$64 }
	$1 = $5
	
.LOOP $label$65:
	*($1) = *($4)
	$1 = ($1 + [1])
	$4 = ($4 + [1])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$65 }
	$5 = ($5 + $0)
	
.LABEL $label$64
	*($5) = [0]
	if ( (*($3) & [1]) ){ goto $label$66 }
	*($3) = ($0 << [1])
	return [1]
	
.LABEL $label$66
	*($3 + [4]) = $0
	return [1]
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $103(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = CALL $103(($2 + [8]), ($1 + [8]))
	$4 = CALL $103((($2 + [8]) + [12]), ($1 + [20]))
	*(($5 = (($2 + [8]) + [32]))) = *(($1 + [40]))
	*($2 + [32]) = *(($1 + [32]))
	$6 = *($1 + [4])
	$1 = *($1)
	CALL $103($0, $3)
	CALL $103(($0 + [12]), $4)
	*($0 + [36]) = $1
	*($0 + [40]) = $6
	$3 = [0]
	*($0 + [44]) = [0]
	*($0 + [48 align=4]) = (int_64)0
	*(($0 + [56])) = [0]
	*(($0 + [32])) = *($5)
	*($0 + [24 align=4]) = *($2 + [32])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$1 }
	$3 = CALL $4($0, ($0 + [36]), $6, ($0 + [48]))
	
.LABEL $label$1
	*(($0 + [44])) = $3
	if ( (*($4) & [1]) ){ goto $label$4 }
	if ( (*($2 + [8]) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*(($2 + [28])))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($2 + [16]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = CALL $103(($2 + [8]), ($1 + [8]))
	$4 = CALL $103((($2 + [8]) + [12]), ($1 + [20]))
	*(($5 = (($2 + [8]) + [32]))) = *(($1 + [40]))
	*($2 + [32]) = *(($1 + [32]))
	$1 = *($1 + [4])
	CALL $103($0, $3)
	CALL $103(($0 + [12]), $4)
	*($0 + [36]) = $1
	*($0 + [40]) = $1
	*($0 + [48 align=4]) = (int_64)0
	*(($0 + [56])) = [0]
	*($0 + [44]) = [0]
	*(($0 + [32])) = *($5)
	*($0 + [24 align=4]) = *($2 + [32])
	if ( (*($4) & [1]) ){ goto $label$3 }
	if ( (*($2 + [8]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*((($2 + [8]) + [20])))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($2 + [16]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [224])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*(($2 + [204])) = [0]
	*($2 + [192]) = [0]
	*($2 + [184]) = (int_64)0
	*($2 + [196 align=4]) = (int_64)0
	$3 = ($2 + [196])
	$4 = CALL $121([8192])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$7 }
	*(($2 + [196])) = ($4 << [1])
	$5 = ($3 + [1])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*(($2 + [204])) = $5
	*((($2 + [184]) + [16])) = $4
	*($2 + [196]) = ($6 | [1])
	
.LABEL $label$6
	CALL memcpy($5, [8192], $4)
	
.LABEL $label$5
	*(($5 + $4)) = [0]
	*($2 + [212]) = [0]
	*($2 + [208]) = [0]
	*($2 + [216]) = [0]
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = ($1 & [1])
	$6 = ( *($1 + [8]) ? ($1 + [1]) : $5 )
	*($2 + [136]) = $6
	*($2 + [140]) = ($6 + ( $4 ? uint_32($1 >> [1]) : $5 ))
	CALL $103((($2 + [136]) + [8]), ($2 + [184]))
	$7 = CALL $103(($2 + [156]), $3)
	*((($2 + [136]) + [40])) = *($2 + [216])
	*(($2 + [168])) = *($2 + [208])
	CALL $2(($2 + [72]), ($2 + [136]))
	CALL $3(($2 + [8]), ($2 + [136]))
	$3 = (($2 + [72]) + [36])
	$5 = ($2 + [120])
	$1 = *($2 + [116])
	$4 = ($0 + [4])
	$8 = (($2 + [8]) + [44])
	$6 = *($8)
	if ( $6 ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	CALL $102($3)
	
.LABEL $label$3
	$9 = [5]
	goto $label$1 
	
.LABEL $label$2
	$9 = [4]
	
.LABEL $label$1
	
.LOOP $label$8:
	goto $label$62 
	
.LABEL $label$64
	$1 = CALL $4(($2 + [72]), $3, *((($2 + [72]) + [40])), $5)
	*((($2 + [72]) + [44])) = $1
	$6 = *($8)
	if ( ($6 == 0) ){ goto $label$35 }
	$9 = [4]
	goto $label$8 
	
.LABEL $label$63
	if ( (($1 & [255]) == 0) ){ goto $label$34 }
	$9 = [0]
	goto $label$8 
	
.LABEL $label$62
	if ( ((int_32)*((($2 + [8]) + [36])) != (int_32)*($3)) ){ goto $label$31 }
	$9 = [28]
	goto $label$8 
	
.LABEL $label$61
	if ( ((int_32)*((($2 + [8]) + [40])) != (int_32)*((($2 + [72]) + [40]))) ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$60
	if ( ((int_32)$6 == (int_32)($1 & [255])) ){ goto $label$30 }
	$9 = [1]
	goto $label$8 
	
.LABEL $label$59
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)*(($0 + [8]))) ){ goto $label$29 }
	$9 = [2]
	goto $label$8 
	
.LABEL $label$58
	CALL $103($1, $5)
	*($4) = (*($4) + [12])
	goto $label$28 
	
.LABEL $label$57
	CALL $5($0, $5)
	goto $label$27 
	
.LABEL $label$56
	if ( (*($2 + [56]) & [1]) ){ goto $label$26 }
	$9 = [26]
	goto $label$8 
	
.LABEL $label$55
	if ( (*($2 + [20]) & [1]) ){ goto $label$25 }
	$9 = [25]
	goto $label$8 
	
.LABEL $label$54
	$4 = [1]
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$23 }
	$9 = [9]
	goto $label$8 
	
.LABEL $label$53
	CALL _ZdlPv(*($2 + [16]))
	$9 = [10]
	goto $label$8 
	
.LABEL $label$52
	if ( (*(($2 + [120])) & $4) ){ goto $label$20 }
	$9 = [24]
	goto $label$8 
	
.LABEL $label$51
	$4 = [1]
	if ( (*($2 + [84]) & [1]) ){ goto $label$19 }
	$9 = [23]
	goto $label$8 
	
.LABEL $label$50
	if ( (*($2 + [72]) & $4) ){ goto $label$17 }
	$9 = [22]
	goto $label$8 
	
.LABEL $label$49
	$4 = [1]
	if ( ((*($7) & [1]) == 0) ){ goto $label$15 }
	$9 = [14]
	goto $label$8 
	
.LABEL $label$48
	CALL _ZdlPv(*(($2 + [164])))
	$9 = [15]
	goto $label$8 
	
.LABEL $label$47
	if ( ((*(($2 + [144])) & $4) == 0) ){ goto $label$12 }
	$9 = [16]
	goto $label$8 
	
.LABEL $label$46
	CALL _ZdlPv(*(($2 + [152])))
	$9 = [17]
	goto $label$8 
	
.LABEL $label$45
	if ( (*(($2 + [196])) & [1]) ){ goto $label$11 }
	$9 = [21]
	goto $label$8 
	
.LABEL $label$44
	if ( (*($2 + [184]) & [1]) ){ goto $label$10 }
	$9 = [20]
	goto $label$8 
	
.LABEL $label$43
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$42
	CALL _ZdlPv(*(($2 + [64])))
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$24 }
	$9 = [8]
	goto $label$8 
	
.LABEL $label$41
	CALL _ZdlPv(*(($2 + [28])))
	$4 = [1]
	if ( (*($2 + [8]) & [1]) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$40
	CALL _ZdlPv(*(($2 + [128])))
	$4 = [1]
	if ( ((*($2 + [84]) & [1]) == 0) ){ goto $label$18 }
	$9 = [12]
	goto $label$8 
	
.LABEL $label$39
	CALL _ZdlPv(*(($2 + [92])))
	if ( ((*($2 + [72]) & $4) == 0) ){ goto $label$16 }
	$9 = [13]
	goto $label$8 
	
.LABEL $label$38
	CALL _ZdlPv(*($2 + [80]))
	$4 = [1]
	if ( (*($7) & [1]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$37
	CALL _ZdlPv(*(($2 + [204])))
	if ( ((*($2 + [184]) & [1]) == 0) ){ goto $label$9 }
	$9 = [19]
	goto $label$8 
	
.LABEL $label$36
	CALL _ZdlPv(*(($2 + [192])))
	$global$0 = ($2 + [224])
	return 
	
.LABEL $label$35
	$9 = [5]
	goto $label$8 
	
.LABEL $label$34
	$9 = [5]
	goto $label$8 
	
.LABEL $label$33
	$9 = [6]
	goto $label$8 
	
.LABEL $label$32
	$9 = [1]
	goto $label$8 
	
.LABEL $label$31
	$9 = [1]
	goto $label$8 
	
.LABEL $label$30
	$9 = [6]
	goto $label$8 
	
.LABEL $label$29
	$9 = [27]
	goto $label$8 
	
.LABEL $label$28
	$9 = [3]
	goto $label$8 
	
.LABEL $label$27
	$9 = [3]
	goto $label$8 
	
.LABEL $label$26
	$9 = [7]
	goto $label$8 
	
.LABEL $label$25
	$9 = [8]
	goto $label$8 
	
.LABEL $label$24
	$9 = [25]
	goto $label$8 
	
.LABEL $label$23
	$9 = [10]
	goto $label$8 
	
.LABEL $label$22
	$9 = [10]
	goto $label$8 
	
.LABEL $label$21
	$9 = [9]
	goto $label$8 
	
.LABEL $label$20
	$9 = [11]
	goto $label$8 
	
.LABEL $label$19
	$9 = [12]
	goto $label$8 
	
.LABEL $label$18
	$9 = [23]
	goto $label$8 
	
.LABEL $label$17
	$9 = [13]
	goto $label$8 
	
.LABEL $label$16
	$9 = [22]
	goto $label$8 
	
.LABEL $label$15
	$9 = [15]
	goto $label$8 
	
.LABEL $label$14
	$9 = [15]
	goto $label$8 
	
.LABEL $label$13
	$9 = [14]
	goto $label$8 
	
.LABEL $label$12
	$9 = [17]
	goto $label$8 
	
.LABEL $label$11
	$9 = [18]
	goto $label$8 
	
.LABEL $label$10
	$9 = [19]
	goto $label$8 
	
.LABEL $label$9
	$9 = [20]
	goto $label$8 
	(unreachable)
	$9
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $19($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9584])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9584])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $74(CALL $73($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $19($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $21(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$1 = $global$0
	$2 = $1
	$3 = *($0 + [8])
	$4 = (int_64)($3 == 0)
	if ( $4 ){ goto $label$2 }
	$5 = ((int_64)$3 + (int_64)1)
	$6 = (int_64)1
	
.LOOP $label$3:
	$6 = ((int_64)$6 * (int_64)10)
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)1
	
.LABEL $label$1
	$7 = ($0 + [8])
	$8 = (CASTING uint_32)(uint_64 $3)
	$1 = ($1 - (($8 + [16]) & [496]))
	$global$0 = $1
	*(($9 = ($1 + $8))) = [0]
	$10 = *($0)
	if ( $4 ){ goto $label$4 }
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$10 % (int_64)$6)
	$0 = ($9 + [-1])
	
.LOOP $label$5:
	$11 = ((int_64)$5 / (int_64)10)
	*($0) = ((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$11 * (int_64)10))) + [48])
	$0 = ($0 + [-1])
	$5 = $11
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$10 / (int_64)$6))
	CALL prints([10198])
	CALL prints_l($1, $8)
	CALL prints([10200])
	CALL $91($7, [0])
	$global$0 = $2
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9832])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9878])
	$5 = *($1)
	$7 = *(($1 + [44]))
	$2 = *(*($2))
	$6 = ($2 + [48])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	$8 = ($7 + [-48])
	
.LOOP $label$4:
	*(($2 + [24])) = *(($2 + [72]))
	*(($2 + [16])) = *(($2 + [64]))
	*(($2 + [8])) = *(($2 + [56]))
	$7 = ($2 + [48])
	*($2) = *($7)
	$6 = ($2 + [32])
	if ( (*($6) & [1]) ){ goto $label$6 }
	*($6) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*(($2 + [40]))) = [0]
	*(($2 + [36])) = [0]
	
.LABEL $label$5
	CALL $106($6, [0])
	$9 = ($2 + [88])
	*(($6 + [8])) = *($9)
	$2 = ($2 + [80])
	*($6) = *($2)
	*($2) = (int_64)0
	*($9) = [0]
	$2 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$4 }
	$6 = *(($1 + [44]))
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = $2
	
.LABEL $label$2
	
.LOOP $label$7:
	$2 = ($6 + [-48])
	if ( ((*(($6 + [-16])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($6 + [-8])))
	
.LABEL $label$8
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	
.LABEL $label$1
	*(($1 + [44])) = $7
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9929])
	*($4 + [16]) = [0]
	*($4) = ($4 + [16])
	$7 = ($1 + [8])
	*($4 + [28]) = $7
	*($4 + [24]) = $1
	$9 = ($1 + [20])
	*($4 + [32]) = $9
	$8 = ($1 + [32])
	*($4 + [36]) = $8
	$10 = ($1 + [33])
	*($4 + [40]) = $10
	$11 = ($1 + [34])
	*($4 + [44]) = $11
	$12 = ($1 + [35])
	*($4 + [48]) = $12
	$13 = ($1 + [36])
	*($4 + [52]) = $13
	$14 = ($1 + [37])
	*($4 + [56]) = $14
	$15 = ($1 + [40])
	*($4 + [60]) = $15
	CALL $22(($4 + [24]), $4)
	$6 = *($4 + [16])
	if ( ($6 <= [513]) ){ goto $label$10 }
	$2 = CALL $122($6)
	goto $label$9 
	
.LABEL $label$10
	$2 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$9
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $6)
	*($4 + [16]) = $4
	*($4 + [28]) = $7
	*($4 + [32]) = $9
	*($4 + [36]) = $8
	*($4 + [40]) = $10
	*($4 + [44]) = $11
	*($4 + [48]) = $12
	*($4 + [52]) = $13
	*($4 + [56]) = $14
	*($4 + [60]) = $15
	*($4 + [24]) = $1
	CALL $23(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [56]), (int_64)0, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$13 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $125($2)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$11 }
	
.LABEL $label$12
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$11
	$global$0 = ($4 + [64])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_64 $20
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [88])
	$5 = CALL $7($4, $1, [8194])
	CALL prints([8308])
	$6 = *($5 + [20])
	$7 = ($6 & [1])
	CALL prints_l(( *(($5 + [28])) ? ($5 + [21]) : $7 ), ( *(($5 + [24])) ? uint_32($6 >> [1]) : $7 ))
	CALL prints([8315])
	$6 = *($5 + [8])
	$7 = ($6 & [1])
	$8 = ($5 + [9])
	CALL prints_l(( *(($5 + [16])) ? $8 : $7 ), ( *(($5 + [12])) ? uint_32($6 >> [1]) : $7 ))
	CALL prints([8322])
	CALL prints(( [10187] ? [10192] : *($5 + [32]) ))
	CALL prints([8331])
	CALL eosio_assert(*($5 + [32]), [8333])
	$6 = *($5 + [40])
	if ( ((int_32)*(($5 + [44])) != (int_32)$6) ){ goto $label$1 }
	CALL $8($4, $5)
	$global$0 = ($3 + [240])
	return (unreachable)
	
.LABEL $label$1
	$6 = ($6 + ((int_32)(CASTING uint_32)(uint_64 $2) * (int_32)[48]))
	*($3 + [216]) = $6
	$9 = CALL $103(($3 + [200]), ($6 + [32]))
	$10 = *($6 + [8])
	CALL prints([8367])
	$6 = *($3 + [200])
	$7 = ($6 & [1])
	CALL prints_l(( *($9 + [8]) ? ($9 + [1]) : $7 ), ( *($9 + [4]) ? uint_32($6 >> [1]) : $7 ))
	CALL prints([8331])
	$11 = (int_64)0
	if ( (*($5 + [33]) == 0) ){ goto $label$2 }
	$6 = *($3 + [200])
	$7 = CALL $121([8369])
	if ( ((int_32)$7 != (int_32)( *(($9 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$2 }
	if ( CALL $111($9, [0], [-1], [8369], $7) ){ goto $label$2 }
	CALL prints([8376])
	$11 = ((int_64)$10 << (int_64)1)
	
.LABEL $label$2
	if ( (*($5 + [34]) == 0) ){ goto $label$3 }
	$6 = *($3 + [200])
	$7 = CALL $121([8389])
	if ( ((int_32)$7 != (int_32)( *(($9 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$3 }
	if ( CALL $111($9, [0], [-1], [8389], $7) ){ goto $label$3 }
	CALL prints([8396])
	$11 = ((uint_64)((int_64)$10 * (int_64)39) / (uint_64)(int_64)20)
	
.LABEL $label$3
	if ( (*($5 + [35]) == 0) ){ goto $label$4 }
	CALL prints([8409])
	$7 = *($3 + [200])
	$6 = ($9 + [4])
	$12 = CALL $121([8419])
	if ( ((int_32)$12 != (int_32)( *($6) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$5 }
	$11 = ( $11 ? ((int_64)$10 * (int_64)9) : CALL $111($9, [0], [-1], [8419], $12) )
	
.LABEL $label$5
	$6 = *($3 + [200])
	$7 = CALL $121([8369])
	if ( ((int_32)$7 != (int_32)( *($6) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$7 }
	if ( (CALL $111($9, [0], [-1], [8369], $7) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = *($3 + [200])
	$7 = CALL $121([8389])
	if ( ((int_32)$7 != (int_32)( *(($9 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$4 }
	if ( CALL $111($9, [0], [-1], [8389], $7) ){ goto $label$4 }
	
.LABEL $label$6
	$11 = $10
	
.LABEL $label$4
	if ( (*($5 + [36]) == 0) ){ goto $label$8 }
	$6 = *($3 + [200])
	$7 = CALL $121([8423])
	if ( ((int_32)$7 != (int_32)( *(($9 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$8 }
	if ( CALL $111($9, [0], [-1], [8423], $7) ){ goto $label$8 }
	CALL prints([8434])
	$11 = ((int_64)$10 * (int_64)12)
	
.LABEL $label$8
	if ( (*($5 + [37]) == 0) ){ goto $label$9 }
	$6 = *($3 + [200])
	$7 = CALL $121([8452])
	if ( ((int_32)$7 != (int_32)( *(($9 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$9 }
	if ( CALL $111($9, [0], [-1], [8452], $7) ){ goto $label$9 }
	CALL prints([8463])
	$11 = ((int_64)$10 * (int_64)12)
	
.LABEL $label$9
	$6 = ($5 + [35])
	$13 = (int_64)0
	if ( ((int_32)*(($5 + [33])) == (int_32)[1]) ){ goto $label$10 }
	if ( ((int_32)(*($6) & [255]) == (int_32)[1]) ){ goto $label$10 }
	$7 = *($3 + [200])
	$12 = CALL $121([8369])
	if ( ((int_32)$12 != (int_32)( *(($9 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$10 }
	if ( CALL $111($9, [0], [-1], [8369], $12) ){ goto $label$10 }
	CALL prints([8481])
	$13 = $10
	
.LABEL $label$10
	if ( ((int_32)*(($5 + [34])) == (int_32)[1]) ){ goto $label$11 }
	if ( ((int_32)(*($6) & [255]) == (int_32)[1]) ){ goto $label$11 }
	$6 = *($3 + [200])
	$7 = CALL $121([8389])
	if ( ((int_32)$7 != (int_32)( *(($9 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$11 }
	if ( CALL $111($9, [0], [-1], [8389], $7) ){ goto $label$11 }
	CALL prints([8495])
	$13 = $10
	
.LABEL $label$11
	if ( (int_64)($13 == 0) ){ goto $label$19 }
	$1 = (int_64)0
	$14 = (int_64)59
	$6 = [8509]
	$15 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$1 > (uint_64)(int_64)8) ){ goto $label$25 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$7 = ($7 + [-91])
	goto $label$23 
	
.LABEL $label$25
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$2 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$20 }
	$16 = [0]
	*((($3 + [160]) + [32])) = [0]
	*($3 + [168]) = $15
	*($3 + [160]) = (int_64)-7939483657262738416
	*($3 + [176]) = (int_64)-1
	$17 = (int_64)0
	*($3 + [184]) = (int_64)0
	*((($3 + [120]) + [32])) = [0]
	*($3 + [120]) = (int_64)-7939483657262738416
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	$1 = *($0 + [128])
	*($3 + [128]) = $1
	$18 = CALL $11(($3 + [120]), $1, [8519])
	$2 = ((int_64)*($18 + [64]) * (int_64)$13)
	$19 = ((uint_64)$2 / (uint_64)(int_64)1000)
	$20 = ((uint_64)((int_64)*($18 + [72]) * (int_64)$13) / (uint_64)(int_64)1000)
	$1 = *(*($3 + [216]))
	$7 = *(($3 + [188]))
	$0 = *($3 + [184])
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$28 }
	
.LOOP $label$30:
	$6 = ($7 + [-24])
	$12 = *($6)
	if ( ((int_64)*($12) == (int_64)$1) ){ goto $label$29 }
	$7 = $6
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$28 }
	CALL eosio_assert(((int_32)*($12 + [16]) == (int_32)($3 + [160])), [9689])
	$16 = $12
	goto $label$27 
	
.LABEL $label$28
	$6 = CALL db_find_i64(*($3 + [160]), *(($3 + [168])), (int_64)-5001621371248181248, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$26 }
	$16 = CALL $12(($3 + [160]), $6)
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)($3 + [160])), [9689])
	
.LABEL $label$27
	$17 = ((uint_64)((int_64)*(($18 + [72])) * (int_64)$13) / (uint_64)(int_64)1000)
	$20 = (int_64)0
	
.LABEL $label$26
	if ( (uint_64)($2 <= (int_64)1000) ){ goto $label$31 }
	$1 = (int_64)6
	
.LOOP $label$32:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$32 }
	*($3 + [72]) = (int_64)-4992121834821386240
	*($3 + [64]) = (int_64)-7941687527490813424
	$1 = (int_64)0
	$14 = (int_64)59
	$6 = [8541]
	$15 = (int_64)0
	
.LOOP $label$33:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$38 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$7 = ($7 + [-91])
	goto $label$36 
	
.LABEL $label$38
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$37
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$34
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$2 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$33 }
	$12 = *($3 + [216])
	CALL eosio_assert([1], [9515])
	$1 = (int_64)16973
	$6 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$42 }
	$1 = $2
	$7 = [1]
	$0 = $6
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$42
	$1 = $2
	
.LOOP $label$43:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$0 = ($6 + [1])
	$6 = $0
	if ( $7 ){ goto $label$43 }
	$7 = [1]
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$7 = [0]
	
.LABEL $label$39
	CALL eosio_assert($7, [9564])
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$6 = CALL $121([8550])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$46 }
	*($3) = ($6 << [1])
	$7 = ($3 | [1])
	if ( $6 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	$0 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($0)
	*($3) = ($0 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $6
	
.LABEL $label$45
	CALL memcpy($7, [8550], $6)
	
.LABEL $label$44
	*(($7 + $6)) = [0]
	$1 = *($12)
	*(($3 + [40])) = (int_64)4345092
	$6 = ($3 + [8])
	*(($3 + [56])) = *($6)
	*($6) = [0]
	*($3 + [16]) = (int_64)-7941687527490813424
	$2 = *($3)
	*($3) = (int_64)0
	*($3 + [32]) = $19
	*($3 + [48]) = $2
	*($3 + [24]) = $1
	$6 = CALL $13(($3 + [80]), ($3 + [64]), (int_64)-8333798777839870672, $15, ($3 + [16]))
	CALL $14(($3 + [224]), $6)
	$7 = *($3 + [224])
	CALL send_inline($7, (*($3 + [228]) - $7))
	$7 = *($3 + [224])
	if ( ($7 == 0) ){ goto $label$47 }
	*($3 + [228]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$47
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$48 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$48
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$49 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$49
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$50
	if ( ((*($3) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$31
	if ( (int_64)($20 == 0) ){ goto $label$51 }
	$1 = (int_64)6
	
.LOOP $label$52:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$52 }
	*($3 + [72]) = (int_64)-4992121834821386240
	*($3 + [64]) = (int_64)-7941687527490813424
	$1 = (int_64)0
	$14 = (int_64)59
	$6 = [8541]
	$15 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$58 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$7 = ($7 + [-91])
	goto $label$56 
	
.LABEL $label$58
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$54
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$2 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$53 }
	CALL eosio_assert([1], [9515])
	$1 = (int_64)16973
	$6 = [0]
	
.LOOP $label$61:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$62 }
	$1 = $2
	$7 = [1]
	$0 = $6
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$62
	$1 = $2
	
.LOOP $label$63:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$60 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$0 = ($6 + [1])
	$6 = $0
	if ( $7 ){ goto $label$63 }
	$7 = [1]
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$60
	$7 = [0]
	
.LABEL $label$59
	CALL eosio_assert($7, [9564])
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$6 = CALL $121([8649])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$66 }
	*($3) = ($6 << [1])
	$7 = ($3 | [1])
	if ( $6 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$0 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($0)
	*($3) = ($0 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $6
	
.LABEL $label$65
	CALL memcpy($7, [8649], $6)
	
.LABEL $label$64
	*(($7 + $6)) = [0]
	*(($3 + [40])) = (int_64)4345092
	$6 = ($3 + [8])
	*(($3 + [56])) = *($6)
	*($6) = [0]
	*($3 + [24]) = (int_64)-401928106512693712
	*($3 + [16]) = (int_64)-7941687527490813424
	*($3 + [32]) = $20
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$6 = CALL $15(($3 + [80]), ($3 + [64]), (int_64)-8333798777839870672, $15, ($3 + [16]))
	CALL $14(($3 + [224]), $6)
	$7 = *($3 + [224])
	CALL send_inline($7, (*($3 + [228]) - $7))
	$7 = *($3 + [224])
	if ( ($7 == 0) ){ goto $label$67 }
	*($3 + [228]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$67
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$68 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$68
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$69 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$69
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$70
	if ( ((*($3) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$51
	if ( (int_64)($17 == 0) ){ goto $label$71 }
	$1 = (int_64)6
	
.LOOP $label$72:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$72 }
	*($3 + [72]) = (int_64)-4992121834821386240
	*($3 + [64]) = (int_64)-7941687527490813424
	$1 = (int_64)0
	$14 = (int_64)59
	$6 = [8541]
	$15 = (int_64)0
	
.LOOP $label$73:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$78 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$7 = ($7 + [-91])
	goto $label$76 
	
.LABEL $label$78
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$75
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$74
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$2 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$73 }
	CALL eosio_assert([1], [9515])
	$1 = (int_64)16973
	$6 = [0]
	
.LOOP $label$81:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$80 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$82 }
	$1 = $2
	$7 = [1]
	$0 = $6
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$81 }
	goto $label$79 
	
.LABEL $label$82
	$1 = $2
	
.LOOP $label$83:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$80 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$0 = ($6 + [1])
	$6 = $0
	if ( $7 ){ goto $label$83 }
	$7 = [1]
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$81 }
	goto $label$79 
	
.LABEL $label$80
	$7 = [0]
	
.LABEL $label$79
	CALL eosio_assert($7, [9564])
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$6 = CALL $121([8726])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$86 }
	*($3) = ($6 << [1])
	$7 = ($3 | [1])
	if ( $6 ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$86
	$0 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($0)
	*($3) = ($0 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $6
	
.LABEL $label$85
	CALL memcpy($7, [8726], $6)
	
.LABEL $label$84
	*(($7 + $6)) = [0]
	$1 = *($16 + [8])
	*(($3 + [40])) = (int_64)4345092
	$6 = ($3 + [8])
	*(($3 + [56])) = *($6)
	*($6) = [0]
	*($3 + [16]) = (int_64)-7941687527490813424
	*($3 + [32]) = $17
	*($3 + [48]) = *($3)
	*($3 + [24]) = $1
	*($3) = (int_64)0
	$6 = CALL $13(($3 + [80]), ($3 + [64]), (int_64)-8333798777839870672, $15, ($3 + [16]))
	CALL $14(($3 + [224]), $6)
	$7 = *($3 + [224])
	CALL send_inline($7, (*($3 + [228]) - $7))
	$7 = *($3 + [224])
	if ( ($7 == 0) ){ goto $label$87 }
	*($3 + [228]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$87
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$88 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$88
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$89 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$89
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$90 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$90
	if ( ((*($3) & [1]) == 0) ){ goto $label$71 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$71
	$0 = *($3 + [144])
	if ( ($0 == 0) ){ goto $label$91 }
	$12 = ($3 + [148])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$93 }
	
.LOOP $label$94:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$95 }
	CALL _ZdlPv($7)
	
.LABEL $label$95
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$94 }
	$6 = *(($3 + [144]))
	goto $label$92 
	
.LABEL $label$93
	$6 = $0
	
.LABEL $label$92
	*($12) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$91
	$0 = *($3 + [184])
	if ( ($0 == 0) ){ goto $label$19 }
	$12 = ($3 + [188])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$97 }
	
.LOOP $label$98:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$99 }
	CALL _ZdlPv($7)
	
.LABEL $label$99
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$98 }
	$6 = *(($3 + [184]))
	goto $label$96 
	
.LABEL $label$97
	$6 = $0
	
.LABEL $label$96
	*($12) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$18 = ($5 + [8])
	*($3 + [24]) = (int_64)4345092
	*($3 + [16]) = $11
	$12 = (uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807)
	CALL eosio_assert($12, [9515])
	$1 = (uint_64)*($3 + [24]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$102:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$101 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$103 }
	$1 = $2
	$7 = [1]
	$0 = $6
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$102 }
	goto $label$100 
	
.LABEL $label$103
	$1 = $2
	
.LOOP $label$104:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$101 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$0 = ($6 + [1])
	$6 = $0
	if ( $7 ){ goto $label$104 }
	$7 = [1]
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$102 }
	goto $label$100 
	
.LABEL $label$101
	$7 = [0]
	
.LABEL $label$100
	CALL eosio_assert($7, [9564])
	CALL prints([8797])
	CALL $16(($3 + [16]))
	CALL prints([8331])
	if ( (int_64)($11 == 0) ){ goto $label$12 }
	CALL $112(($3 + [120]), [8806], $9)
	$6 = CALL $108(($3 + [120]), [8827])
	$7 = ($6 + [8])
	*((($3 + [160]) + [8])) = *($7)
	*($3 + [160]) = *($6)
	*($6) = (int_64)0
	*($7) = [0]
	$6 = *(($5 + [8]))
	$7 = ($6 & [1])
	$6 = CALL $109(($3 + [160]), ( *(($5 + [16])) ? $8 : $7 ), ( *(($5 + [12])) ? uint_32($6 >> [1]) : $7 ))
	$7 = ($6 + [8])
	*((($3 + [16]) + [8])) = *($7)
	*($3 + [16]) = *($6)
	*($6) = (int_64)0
	*($7) = [0]
	$6 = CALL $108(($3 + [16]), [8840])
	$7 = ($6 + [8])
	*((($3 + [64]) + [8])) = *($7)
	*($3 + [64]) = *($6)
	*($6) = (int_64)0
	*($7) = [0]
	if ( (*($3 + [16]) & [1]) ){ goto $label$106 }
	if ( (*($3 + [160]) & [1]) ){ goto $label$105 }
	goto $label$17 
	
.LABEL $label$106
	CALL _ZdlPv(*($3 + [24]))
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$105
	CALL _ZdlPv(*($3 + [168]))
	if ( ((*($3 + [120]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	CALL $102($3)
	
.LABEL $label$17
	if ( (*($3 + [120]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( ((int_64)$11 == (int_64)$10) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*($3 + [128]))
	if ( ((int_64)$11 != (int_64)$10) ){ goto $label$13 }
	
.LABEL $label$14
	CALL $112(($3 + [16]), [8907], $18)
	$6 = CALL $108(($3 + [16]), [8840])
	$7 = *($6 + [4])
	$0 = *($6)
	*($6) = (int_64)0
	$8 = *($6 + [8])
	*($6 + [8]) = [0]
	if ( (*($3 + [64]) & [1]) ){ goto $label$108 }
	*($3 + [64]) = [0]
	$6 = ($3 + [72])
	goto $label$107 
	
.LABEL $label$108
	*(*($3 + [72])) = [0]
	*($3 + [68]) = [0]
	$6 = ($3 + [72])
	
.LABEL $label$107
	CALL $106(($3 + [64]), [0])
	*($6) = $8
	*($3 + [68]) = $7
	*($3 + [64]) = $0
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($3 + [24]))
	
.LABEL $label$13
	CALL prints([8971])
	$6 = *($3 + [64])
	$7 = ($6 & [1])
	CALL prints_l(( *(($3 + [72])) ? (($3 + [64]) | [1]) : $7 ), ( *($3 + [68]) ? uint_32($6 >> [1]) : $7 ))
	CALL prints([8971])
	$1 = (int_64)6
	
.LOOP $label$109:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$109 }
	*($3 + [128]) = (int_64)-4992121834821386240
	*($3 + [120]) = (int_64)-7937689284756821744
	$1 = (int_64)0
	$2 = (int_64)59
	$6 = [8973]
	$15 = (int_64)0
	
.LOOP $label$110:
	$14 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$111 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$113 }
	$7 = ($7 + [-91])
	goto $label$112 
	
.LABEL $label$113
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$112
	$14 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$111
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$15 = ((int_64)$14 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$110 }
	$1 = (int_64)0
	$14 = (int_64)59
	$6 = [8541]
	$13 = (int_64)0
	
.LOOP $label$114:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$119 }
	$7 = *($6)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$118 }
	$7 = ($7 + [-91])
	goto $label$117 
	
.LABEL $label$119
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$116 }
	goto $label$115 
	
.LABEL $label$118
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$117
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$116
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$115
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$2 | (int_64)$13)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$114 }
	$8 = *($3 + [216])
	CALL eosio_assert($12, [9515])
	$1 = (int_64)16973
	$6 = [0]
	
.LOOP $label$122:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$121 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$123 }
	$1 = $2
	$7 = [1]
	$0 = $6
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$122 }
	goto $label$120 
	
.LABEL $label$123
	$1 = $2
	
.LOOP $label$124:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$121 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$0 = ($6 + [1])
	$6 = $0
	if ( $7 ){ goto $label$124 }
	$7 = [1]
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$122 }
	goto $label$120 
	
.LABEL $label$121
	$7 = [0]
	
.LABEL $label$120
	CALL eosio_assert($7, [9564])
	$1 = *($8)
	*(($3 + [40])) = (int_64)4345092
	*($3 + [16]) = (int_64)-7937689284756821744
	*($3 + [32]) = $11
	*($3 + [24]) = $1
	CALL $103(($3 + [48]), ($3 + [64]))
	$6 = CALL $13(($3 + [160]), ($3 + [120]), $15, $13, ($3 + [16]))
	CALL $14(($3 + [80]), $6)
	$7 = *($3 + [80])
	CALL send_inline($7, (*($3 + [84]) - $7))
	$7 = *($3 + [80])
	if ( ($7 == 0) ){ goto $label$125 }
	*($3 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$125
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$126 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$126
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$127 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$127
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$128 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$128
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [72])))
	
.LABEL $label$12
	*($3 + [16]) = ($3 + [216])
	CALL $17($4, $5, ($3 + [16]))
	if ( ((*($3 + [200]) & [1]) == 0) ){ goto $label$129 }
	CALL _ZdlPv(*(($9 + [8])))
	
.LABEL $label$129
	$global$0 = ($3 + [240])
}

int_32 .FUNC $11 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$0), [9689])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4417020450001911808, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $18($0, $4)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$0), [9689])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9740])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9763])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9763])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $90(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $19($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $20(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9740])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)40
	*($5 + [8]) = [52]
	*($5 + [24]) = (int_64)10
	*($5 + [32]) = (int_64)1000
	*($5 + [40]) = (int_64)500000
	*($5 + [48]) = (int_64)1000
	*($5 + [56]) = (int_64)10000000
	*($5 + [64]) = (int_64)4
	*($5 + [72]) = (int_64)1
	*($5 + [80]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [72])
	CALL $88(($3 + [40]), ($3 + [32]))
	*($5 + [84]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $89(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $113($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = CALL $103(($2 + [16]), $1)
	$1 = CALL $103($2, ($1 + [12]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$6 = CALL $103(($2 + [32]), $1)
	$4 = CALL $103(($2 + [48]), $3)
	CALL void $5((int_32 $4), (int_32 $6), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($4 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($3) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	$1 = CALL $103($2, ($1 + [36]))
	$5 = CALL $103(($2 + [16]), ($1 + [24]))
	$4 = CALL $103(($2 + [32]), ($1 + [12]))
	$3 = CALL $103(($2 + [48]), $1)
	CALL $96($0, $3, $4, $5, $1)
	if ( (*($1) & [1]) ){ goto $label$7 }
	if ( (*($5) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $122($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [9763])
	CALL memcpy(($3 + [15]), $6, [1])
	$2 = *($3 + [15])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $125($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($2 & [255]) != (int_32)[0])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9763])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [128])
	$global$0 = $2
	*(($3 = $2) + [92]) = $0
	*($3 + [80]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $122($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*(($3 + [64])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [72]) = [0]
	*($3 + [100]) = $1
	*($3 + [96]) = $1
	*($3 + [104]) = ($1 + $0)
	*($3 + [112]) = ($3 + [96])
	CALL $57(($3 + [96]), ($3 + [8]))
	CALL $57(($3 + [96]), ($3 + [20]))
	CALL $57(($3 + [96]), ($3 + [32]))
	CALL $57(($3 + [96]), ($3 + [44]))
	*($3 + [120]) = ($3 + [8])
	CALL $60(($3 + [120]), ($3 + [112]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $125($1)
	
.LABEL $label$4
	*($3 + [100]) = ($3 + [80])
	*($3 + [96]) = ($3 + [92])
	CALL $61(($3 + [96]), ($3 + [8]))
	if ( (*($3 + [56]) & [1]) ){ goto $label$13 }
	if ( (*($3 + [44]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [52])))
	$1 = [1]
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($3 + [32]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [20]) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3 + [20]) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [28])))
	$1 = [1]
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($3 + [8]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($3 + [128])
	return $1
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [16])))
	$global$0 = ($3 + [128])
	return $1
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9763])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [9763])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [52]) = $2
	*($3 + [48]) = $2
	*($3 + [56]) = ($2 + $1)
	CALL $57(($3 + [48]), ($3 + [8]))
	CALL $57(($3 + [48]), ($3 + [20]))
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $58(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$6
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$7
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9740])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9763])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9763])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $95(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $57($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9763])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9763])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9763])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $78($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $106($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $106($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $102($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $116 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $117 (int_32 $0)
{
}

int_32 .FUNC $114 (int_32 $0)
{
	return ((($0 + [-48]) <= [10]) | ((($0 | [32]) + [-97]) <= [26]))
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL require_auth(*($0))
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $121($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $105($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

void .FUNC $113 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $119(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $120(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_64 .FUNC $118 (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	*(($3 + [64])) = [0]
	*($3 + [32]) = (int_64)-7939483657262738416
	*($3 + [56]) = (int_64)0
	$5 = *($0 + [128])
	*($3 + [40]) = $5
	$6 = ($0 + [88])
	*($3 + [48]) = (int_64)-1
	$7 = *(CALL $11(($3 + [32]), $5, [8519]) + [8])
	$8 = ($0 + [104])
	$5 = *($8)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$9 = CALL db_lowerbound_i64(*($6), *(($0 + [96])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$2 }
	CALL $9($6, $9)
	*($3 + [84]) = [0]
	*($3 + [80]) = $6
	$5 = *(*(CALL $30(($3 + [80])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [104])) = $5
	
.LABEL $label$1
	$10 = ((int_64)$7 * (int_64)1000000)
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [10204])
	$5 = *($8)
	*($3 + [24]) = $5
	CALL $104(($0 + [136]), $2)
	CALL $104(($0 + [148]), $1)
	*(($0 + [160])) = $5
	CALL eosio_assert([1], [9515])
	$5 = (int_64)16973
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $7
	$9 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $7
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $9 ){ goto $label$7 }
	$9 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	
.LABEL $label$3
	CALL eosio_assert($9, [9564])
	*(($0 + [176])) = (int_64)4345092
	*(($0 + [168])) = (int_64)0
	CALL eosio_assert([1], [9515])
	$5 = (int_64)16973
	
.LOOP $label$10:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$5 = $7
	$9 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$5 = $7
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $9 ){ goto $label$12 }
	$9 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$9 = [0]
	
.LABEL $label$8
	CALL eosio_assert($9, [9564])
	*(($0 + [192])) = (int_64)4345092
	*(($0 + [184])) = (int_64)0
	CALL eosio_assert([1], [9515])
	$5 = (int_64)16973
	
.LOOP $label$15:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$5 = $7
	$9 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$5 = $7
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $9 ){ goto $label$17 }
	$9 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$9 = [0]
	
.LABEL $label$13
	CALL eosio_assert($9, [9564])
	*(($0 + [208])) = (int_64)4345092
	*(($0 + [200])) = (int_64)0
	CALL eosio_assert([1], [9515])
	$5 = (int_64)16973
	
.LOOP $label$20:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$5 = $7
	$9 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$5 = $7
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $9 ){ goto $label$22 }
	$9 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$9 = [0]
	
.LABEL $label$18
	CALL eosio_assert($9, [9564])
	*(($0 + [224])) = (int_64)4345092
	*(($0 + [216])) = (int_64)0
	CALL eosio_assert([1], [9515])
	$5 = (int_64)16973
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$5 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$5 = $7
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$27 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$8 = [0]
	
.LABEL $label$23
	CALL eosio_assert($8, [9564])
	*(($0 + [240])) = (int_64)4345092
	*(($0 + [232])) = (int_64)0
	*(($0 + [248])) = ((int_64)CALL current_time() + (int_64)$10)
	$5 = *($0)
	*($3 + [12]) = $1
	*($3 + [16]) = $2
	*($3 + [8]) = ($3 + [24])
	*($3 + [104]) = $5
	CALL eosio_assert(((int_64)*(($0 + [88])) == (int_64)CALL $fimport$4()), [9988])
	*($3 + [80]) = $6
	*($3 + [84]) = ($3 + [8])
	*($3 + [88]) = ($3 + [104])
	*(($8 = CALL _Znwj([64])) + [8 align=4]) = (int_64)0
	*($8 + [16 align=4]) = (int_64)0
	*($8 + [24 align=4]) = (int_64)0
	*($8 + [32]) = [0]
	*($8 + [36]) = [0]
	*($8 + [40 align=4]) = (int_64)0
	*($8 + [48]) = [0]
	*($8 + [52]) = $6
	CALL $31(($3 + [80]), $8)
	*($3 + [96]) = $8
	$5 = *($8)
	*($3 + [80]) = $5
	$9 = *($8 + [56])
	*($3 + [76]) = $9
	$11 = ($0 + [116])
	$4 = *($11)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [120]))) ){ goto $label$30 }
	*($4 + [8]) = $5
	*($4 + [16]) = $9
	*($3 + [96]) = [0]
	*($4) = $8
	*($11) = ($4 + [24])
	$11 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($11 == 0) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$30
	CALL $32(($0 + [112]), ($3 + [96]), ($3 + [80]), ($3 + [76]))
	$11 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($11 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$9 = *($11 + [40])
	if ( ($9 == 0) ){ goto $label$31 }
	$0 = ($11 + [44])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$33 }
	
.LOOP $label$34:
	$4 = ($8 + [-48])
	if ( ((*(($8 + [-16])) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($8 + [-8])))
	
.LABEL $label$35
	$8 = $4
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$34 }
	$8 = *(($11 + [40]))
	goto $label$32 
	
.LABEL $label$33
	$8 = $9
	
.LABEL $label$32
	*($0) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$31
	if ( ((*($11 + [20]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($11 + [28])))
	
.LABEL $label$36
	if ( ((*($11 + [8]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*(($11 + [16])))
	
.LABEL $label$37
	CALL _ZdlPv($11)
	
.LABEL $label$28
	$9 = *($3 + [56])
	if ( ($9 == 0) ){ goto $label$38 }
	$11 = ($3 + [60])
	$8 = *($11)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$40 }
	
.LOOP $label$41:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$42 }
	CALL _ZdlPv($4)
	
.LABEL $label$42
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$41 }
	$8 = *(($3 + [56]))
	goto $label$39 
	
.LABEL $label$40
	$8 = $9
	
.LABEL $label$39
	*($11) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$38
	$global$0 = ($3 + [112])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[48])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[89478486]) ){ goto $label$2 }
	$5 = [89478485]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[48])
	if ( ((uint_32)$2 > (uint_32)[44739241]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[48]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	*(($4 = ($2 + ((int_32)$3 * (int_32)[48])))) = *($1)
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	CALL $103(($4 + [32]), ($1 + [32]))
	$6 = ($2 + ((int_32)$5 * (int_32)[48]))
	$7 = ($4 + [48])
	$1 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$6 }
	$9 = ($1 - $8)
	$2 = [0]
	
.LOOP $label$7:
	$5 = ($8 + $2)
	*((($1 = ($4 + $2)) + [-24])) = *(($5 + [-24]))
	*(($1 + [-32])) = *(($5 + [-32]))
	*(($1 + [-40])) = *(($5 + [-40]))
	*(($1 + [-48])) = *(($5 + [-48]))
	$3 = ($5 + [-8])
	*(($1 + [-8])) = *($3)
	$1 = ($5 + [-16])
	*(($1 + [-16])) = *($1)
	*($1) = (int_64)0
	*($3) = [0]
	$2 = ($2 + [-48])
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$7 }
	$4 = ($4 + $2)
	$1 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $1
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($1 + [-48])
	if ( ((*(($1 + [-16])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [-8])))
	
.LABEL $label$10
	$1 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $122($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*(($3 + [16])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [68]) = $2
	*($3 + [64]) = $2
	*($3 + [72]) = ($2 + $1)
	CALL $57(($3 + [64]), $3)
	CALL $57(($3 + [64]), ($3 + [12]))
	CALL $57(($3 + [64]), ($3 + [24]))
	CALL $57(($3 + [64]), ($3 + [36]))
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $125($2)
	
.LABEL $label$5
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $59(($3 + [64]), $3)
	if ( (*($3 + [36]) & [1]) ){ goto $label$12 }
	if ( (*($3 + [24]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [44])))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [32])))
	$2 = [1]
	if ( ((*($3 + [12]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = [1]
	if ( (*($3 + [12]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((*($3) & $2) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [20])))
	if ( ((*($3) & $2) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$6
	$global$0 = ($3 + [80])
	return [1]
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9584])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $83(*($1), ($0 + [32]))
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9584])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $83(*($1), ($0 + [32]))
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $83(*($1), *($0 + [4]))
	CALL $83(*($1), *($0 + [8]))
	$4 = *($1)
	*($2 + [13]) = *(*($0 + [12]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9584])
	CALL memcpy(*($4 + [4]), ($2 + [13]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9584])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [14]) = *(*($0 + [20]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9584])
	CALL memcpy(*($4 + [4]), ($2 + [14]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [12]) = *(*($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9584])
	CALL memcpy(*($4 + [4]), ($2 + [12]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [11]) = *(*($0 + [28]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9584])
	CALL memcpy(*($4 + [4]), ($2 + [11]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($1)
	*($2 + [10]) = *(*($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9584])
	CALL memcpy(*($4 + [4]), ($2 + [10]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	CALL $92(*($1), *($0 + [36]))
	$global$0 = ($2 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = (*($2) + [8])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$1 = ($1 + [6])
	*($2) = $1
	$0 = *($0)
	$0 = *($0 + [36])
	$6 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ((int_32)($6 - $0) / (int_32)[48]))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($1 + [32])
	*($2) = $1
	$4 = *($0 + [32])
	$3 = ($0 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *($3) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$8:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$8 }
	*($2) = $1
	$3 = *(($0 + [32]))
	$3 = ( *($3) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$9 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$9
	$0 = ($0 + [48])
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$7 }
	
.LABEL $label$6
}

int_32 .FUNC $25 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9689])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $27($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9689])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_64 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_64 $29
	$3 = ($global$0 - [352])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($0 + [256])) ^ (int_32)[1]), [8986])
	if ( ((int_64)*($1 + [8]) != (int_64)*($0)) ){ goto $label$1 }
	$4 = *(($1 + [24]))
	$5 = [0]
	$6 = *($1 + [16])
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$7 = $9
	$5 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$7 = $9
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $5 ){ goto $label$6 }
	$5 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	$11 = ($1 + [16])
	CALL eosio_assert($5, [9026])
	$7 = (int_64)0
	CALL eosio_assert(((int_64)$6 > (int_64)0), [9055])
	$9 = (int_64)59
	$8 = [8973]
	$12 = (int_64)0
	
.LOOP $label$7:
	$13 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$8 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [-91])
	goto $label$9 
	
.LABEL $label$10
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$13 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$8
	$8 = ($8 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$7 }
	CALL eosio_assert((((int_64)$4 == (int_64)4345092) & ((int_64)$12 == (int_64)$2)), [9095])
	CALL eosio_assert(((uint_64)CALL $fimport$10() <= (uint_64)*(($0 + [248]))), [9110])
	$10 = [0]
	*((($3 + [296]) + [32])) = [0]
	*($3 + [296]) = (int_64)-7939483657262738416
	*($3 + [312]) = (int_64)-1
	*($3 + [320]) = (int_64)0
	$7 = *($0 + [128])
	*($3 + [304]) = $7
	$14 = CALL $11(($3 + [296]), $7, [8519])
	$15 = ($1 + [32])
	$8 = CALL $103(($3 + [264]), $15)
	CALL $1(($3 + [280]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$11
	$16 = CALL $103(($3 + [248]), *($3 + [280]))
	$17 = CALL $103(($3 + [232]), (*($3 + [280]) + [12]))
	$18 = CALL $103(($3 + [216]), (*($3 + [280]) + [24]))
	*(($3 + [184])) = $4
	*((($3 + [168]) + [24])) = $2
	*($3 + [176]) = $6
	*($3 + [168]) = *($1)
	$19 = CALL $103((($3 + [168]) + [32]), $17)
	$5 = ($8 & [1])
	$8 = *($3 + [248])
	$21 = ($8 & [1])
	$8 = *($0 + [136])
	$20 = uint_32($8 >> [1])
	$22 = ( *(($0 + [140])) ? $20 : $21 )
	if ( ((int_32)$22 != (int_32)( *($16 + [4]) ? uint_32($8 >> [1]) : $5 )) ){ goto $label$12 }
	$10 = [1]
	$8 = (($0 + [136]) + [1])
	$5 = ( *($16 + [8]) ? ($16 + [1]) : $5 )
	if ( $21 ){ goto $label$14 }
	if ( ($22 == 0) ){ goto $label$12 }
	$21 = ([0] - $20)
	
.LOOP $label$15:
	if ( ((int_32)*($8) != (int_32)*($5)) ){ goto $label$13 }
	$10 = [1]
	$5 = ($5 + [1])
	$8 = ($8 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$15 }
	goto $label$12 
	
.LABEL $label$14
	if ( ($22 == 0) ){ goto $label$12 }
	$10 = (CALL $120(( *(($0 + [144])) ? $8 : $21 ), $5, $22) == 0)
	goto $label$12 
	
.LABEL $label$13
	$10 = [0]
	
.LABEL $label$12
	CALL eosio_assert($10, [9154])
	$23 = ($0 + [88])
	$24 = CALL $7($23, *(($0 + [160])), [8194])
	$8 = *($24 + [40])
	$22 = ($24 + [44])
	$5 = *($22)
	*($3 + [160]) = $5
	$25 = $6
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	$26 = ($19 + [1])
	
.LOOP $label$18:
	if ( ((int_64)*($8) != (int_64)*($3 + [168])) ){ goto $label$20 }
	$5 = ($5 & [1])
	$5 = *($19)
	$20 = ($5 & [1])
	$5 = *($8 + [32])
	$10 = uint_32($5 >> [1])
	$27 = ( *(($8 + [36])) ? $10 : $20 )
	if ( ((int_32)$27 != (int_32)( *((($3 + [168]) + [36])) ? uint_32($5 >> [1]) : $5 )) ){ goto $label$20 }
	$21 = ( *((($3 + [168]) + [40])) ? $26 : $5 )
	if ( $20 ){ goto $label$21 }
	if ( ($27 == 0) ){ goto $label$19 }
	$5 = [0]
	
.LOOP $label$22:
	if ( ((int_32)*((($8 + $5) + [33])) != (int_32)*(($21 + $5))) ){ goto $label$20 }
	$5 = ($5 + [1])
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$21
	if ( ($27 == 0) ){ goto $label$19 }
	if ( (CALL $120(( *(($8 + [40])) ? (($8 + [32]) + [1]) : $20 ), $21, $27) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$8 = ($8 + [48])
	if ( ((int_32)*($22) != (int_32)$8) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	*($3 + [160]) = $8
	$8 = ($8 + [48])
	if ( ((int_32)*($22) != (int_32)$8) ){ goto $label$18 }
	
.LABEL $label$17
	$25 = $6
	$5 = *($3 + [160])
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	$9 = *($5 + [8])
	CALL eosio_assert(((int_64)*(($5 + [24])) == (int_64)$2), [9590])
	CALL eosio_assert(((int_64)*(($5 + [16])) == (int_64)$4), [9604])
	$7 = ((int_64)*($5 + [8]) + (int_64)$6)
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9647])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9666])
	*((($3 + [168]) + [16])) = $4
	*(($3 + [176])) = $7
	*((($3 + [168]) + [24])) = $2
	$25 = ((int_64)$9 + (int_64)$6)
	
.LABEL $label$16
	$8 = ($8 & [1])
	$8 = *($3 + [216])
	$5 = CALL $121([9170])
	if ( ((int_32)$5 != (int_32)( *($18 + [4]) ? uint_32($8 >> [1]) : $8 )) ){ goto $label$24 }
	if ( (CALL $111($18, [0], [-1], [9170], $5) == 0) ){ goto $label$23 }
	$8 = (*($3 + [216]) & [1])
	
.LABEL $label$24
	$22 = ($18 + [1])
	$8 = ( *($18 + [8]) ? $22 : $8 )
	$5 = [0]
	
.LOOP $label$25:
	$10 = ($8 + $5)
	$21 = ($5 + [1])
	$5 = $21
	if ( *($10) ){ goto $label$25 }
	$28 = (CASTING uint_64)(uint_32 ($21 + [-1]))
	$7 = (int_64)0
	$9 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$26:
	$13 = (int_64)0
	if ( ((uint_64)$7 >= (uint_64)$28) ){ goto $label$27 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$5 = ($5 + [-91])
	goto $label$28 
	
.LABEL $label$29
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$31 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$30 
	
.LABEL $label$31
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$30
	$8 = ($8 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$26 }
	if ( (CALL is_account($12) == 0) ){ goto $label$23 }
	$29 = *($1)
	if ( ((int_64)$12 == (int_64)$29) ){ goto $label$23 }
	$7 = (int_64)0
	$13 = (int_64)59
	$8 = [8509]
	$28 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$7 > (uint_64)(int_64)8) ){ goto $label$37 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$5 = ($5 + [-91])
	goto $label$35 
	
.LABEL $label$37
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$33
	$8 = ($8 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$28 = ((int_64)$9 | (int_64)$28)
	$13 = ((int_64)$13 + (int_64)4294967291)
	if ( ((int_64)$13 != (int_64)55834574842) ){ goto $label$32 }
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = $28
	*($3) = (int_64)-7939483657262738416
	$8 = CALL db_find_i64((int_64)-7939483657262738416, $28, (int_64)-5001621371248181248, $29)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$39 }
	CALL eosio_assert(((int_32)*(CALL $12($3, $8) + [16]) == (int_32)$3), [9689])
	CALL prints([9201])
	$10 = *($3 + [24])
	if ( $10 ){ goto $label$38 }
	goto $label$23 
	
.LABEL $label$39
	CALL prints([9171])
	$8 = *($3 + [216])
	$5 = ($8 & [1])
	CALL prints_l(( *(($18 + [8])) ? $22 : $5 ), ( *(($18 + [4])) ? uint_32($8 >> [1]) : $5 ))
	CALL prints([8331])
	$7 = (int_64)6
	
.LOOP $label$40:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$40 }
	$7 = (int_64)0
	$13 = (int_64)59
	$8 = [9189]
	$28 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$46 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$5 = ($5 + [-91])
	goto $label$44 
	
.LABEL $label$46
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$42
	$8 = ($8 + [1])
	$13 = ((int_64)$13 + (int_64)4294967291)
	$28 = ((int_64)$9 | (int_64)$28)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$41 }
	*(($5 = ($3 + [144]))) = [0]
	*($3 + [72]) = $12
	*($3 + [120]) = (int_64)-7939483657262738416
	*($3 + [128]) = $28
	*($3 + [136]) = (int_64)0
	*($3 + [64]) = *($1)
	*(($8 = CALL _Znwj([16]))) = (int_64)-7939483657262738416
	*($8 + [8]) = (int_64)4982871454518345728
	*(($3 + [156])) = [0]
	$10 = ($8 + [16])
	*($5) = $10
	*(($3 + [140])) = $10
	*($3 + [136]) = $8
	*($3 + [148 align=4]) = (int_64)0
	CALL $19(($3 + [148]), [16])
	$8 = *($3 + [148])
	$5 = (*(($3 + [152])) - $8)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [9584])
	CALL memcpy($8, ($3 + [64]), [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[7]), [9584])
	CALL memcpy(($8 + [8]), (($3 + [64]) + [8]), [8])
	CALL $14(($3 + [104]), ($3 + [120]))
	$8 = *($3 + [104])
	CALL send_inline($8, (*($3 + [108]) - $8))
	$8 = *($3 + [104])
	if ( ($8 == 0) ){ goto $label$47 }
	*($3 + [108]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$47
	$8 = *($3 + [148])
	if ( ($8 == 0) ){ goto $label$48 }
	*(($3 + [152])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$48
	$8 = *($3 + [136])
	if ( ($8 == 0) ){ goto $label$49 }
	*(($3 + [140])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$49
	$10 = *($3 + [24])
	if ( ($10 == 0) ){ goto $label$23 }
	
.LABEL $label$38
	$21 = ($3 + [28])
	$8 = *($21)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$51 }
	
.LOOP $label$52:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$53 }
	CALL _ZdlPv($5)
	
.LABEL $label$53
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$52 }
	$8 = *(($3 + [24]))
	goto $label$50 
	
.LABEL $label$51
	$8 = $10
	
.LABEL $label$50
	*($21) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$23
	$8 = *($3 + [232])
	$5 = CALL $121([8369])
	if ( ((int_32)$5 != (int_32)( *($17 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$56 }
	if ( (CALL $111($17, [0], [-1], [8369], $5) == 0) ){ goto $label$55 }
	
.LABEL $label$56
	$8 = *($3 + [232])
	$5 = CALL $121([8389])
	if ( ((int_32)$5 != (int_32)( *(($17 + [4])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$57 }
	if ( (CALL $111($17, [0], [-1], [8389], $5) == 0) ){ goto $label$55 }
	
.LABEL $label$57
	CALL eosio_assert((((uint_64)*($14 + [32]) <= (uint_64)$25) & ((uint_64)$25 <= (uint_64)*($14 + [40]))), [9249])
	goto $label$54 
	
.LABEL $label$55
	CALL eosio_assert((((uint_64)*($14 + [48]) <= (uint_64)$25) & ((uint_64)$25 <= (uint_64)*($14 + [56]))), [9221])
	
.LABEL $label$54
	$8 = [0]
	$10 = *($3 + [232])
	$5 = ($17 + [4])
	$21 = CALL $121([8369])
	if ( ((int_32)$21 != (int_32)( *($5) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$58 }
	$8 = [0]
	if ( CALL $111($17, [0], [-1], [8369], $21) ){ goto $label$58 }
	CALL eosio_assert(((int_64)$4 == (int_64)*(($0 + [176]))), [9604])
	$7 = ((int_64)*($8) + (int_64)$6)
	*(($8 = ($0 + [168]))) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9647])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [9666])
	$8 = [1]
	
.LABEL $label$58
	$5 = *($3 + [232])
	$10 = CALL $121([8389])
	if ( ((int_32)$10 != (int_32)( *($5) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$59 }
	if ( CALL $111($17, [0], [-1], [8389], $10) ){ goto $label$59 }
	CALL eosio_assert(((int_64)$4 == (int_64)*(($0 + [192]))), [9604])
	$7 = ((int_64)*($8) + (int_64)$6)
	*(($8 = ($0 + [184]))) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9647])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [9666])
	$8 = [1]
	
.LABEL $label$59
	$10 = *($3 + [232])
	$5 = ($17 + [4])
	$21 = CALL $121([8419])
	if ( ((int_32)$21 != (int_32)( *($5) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$60 }
	if ( CALL $111($17, [0], [-1], [8419], $21) ){ goto $label$60 }
	CALL eosio_assert(((int_64)$4 == (int_64)*(($0 + [208]))), [9604])
	$7 = ((int_64)*($8) + (int_64)$6)
	*(($8 = ($0 + [200]))) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9647])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [9666])
	$8 = [1]
	
.LABEL $label$60
	$5 = *($3 + [232])
	$10 = CALL $121([8423])
	if ( ((int_32)$10 != (int_32)( *($5) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$61 }
	if ( CALL $111($17, [0], [-1], [8423], $10) ){ goto $label$61 }
	CALL eosio_assert(((int_64)$4 == (int_64)*(($0 + [224]))), [9604])
	$7 = ((int_64)*($8) + (int_64)$6)
	*(($8 = ($0 + [216]))) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9647])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [9666])
	$8 = [1]
	
.LABEL $label$61
	$5 = *($3 + [232])
	$10 = CALL $121([8452])
	if ( ((int_32)$10 != (int_32)( *(($17 + [4])) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$62 }
	if ( CALL $111($17, [0], [-1], [8452], $10) ){ goto $label$62 }
	CALL eosio_assert(((int_64)$4 == (int_64)*(($0 + [240]))), [9604])
	$7 = ((int_64)*($8) + (int_64)$6)
	*(($8 = ($0 + [232]))) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9647])
	CALL eosio_assert(((int_64)*($8) < (int_64)4611686018427387904), [9666])
	$8 = [1]
	
.LABEL $label$62
	CALL eosio_assert($8, [9281])
	$28 = CALL $118((int_64))(*(($0 + [184])) - *(($0 + [168]))))
	$6 = ((int_64)((int_64)*(($0 + [216])) + (int_64)*(($0 + [200]))) + (int_64)*(($0 + [232])))
	$7 = (int_64)0
	$9 = (int_64)59
	$8 = [8973]
	$12 = (int_64)0
	
.LOOP $label$63:
	$13 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$64 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$5 = ($5 + [-91])
	goto $label$65 
	
.LABEL $label$66
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$13 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$64
	$8 = ($8 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$63 }
	*(($3 + [152])) = [0]
	*($3 + [128]) = (int_64)-7937689284756821744
	*($3 + [120]) = $12
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	CALL eosio_assert([1], [9515])
	$8 = [0]
	$7 = (int_64)16973
	
.LOOP $label$69:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$68 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$70 }
	$7 = $9
	$5 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$69 }
	goto $label$67 
	
.LABEL $label$70
	$7 = $9
	
.LOOP $label$71:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$68 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$5 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $5 ){ goto $label$71 }
	$5 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$69 }
	goto $label$67 
	
.LABEL $label$68
	$5 = [0]
	
.LABEL $label$67
	CALL eosio_assert($5, [9564])
	$8 = CALL $25(($3 + [120]), (int_64)16973, [9298])
	*((($3 + [104]) + [8])) = *(($8 + [8]))
	*($3 + [104]) = *($8)
	CALL prints([9315])
	CALL $16(($3 + [104]))
	CALL prints([8331])
	$7 = *($14 + [24])
	$9 = *($3 + [104])
	CALL eosio_assert(((uint_64)$28 <= (uint_64)((uint_64)$9 / (uint_64)*($14 + [16]))), [9330])
	CALL eosio_assert(((uint_64)$6 <= (uint_64)((uint_64)$9 / (uint_64)$7)), [9360])
	*($3 + [4]) = $24
	*($3) = ($3 + [160])
	*($3 + [8]) = ($3 + [168])
	CALL $26($23, $24, $3)
	$28 = *($0)
	$7 = (int_64)7
	
.LOOP $label$72:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$72 }
	*($3 + [56]) = (int_64)6714800374168944640
	*($3 + [48]) = $28
	$7 = (int_64)0
	$13 = (int_64)59
	$8 = [8541]
	$12 = (int_64)0
	
.LOOP $label$73:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$78 }
	$5 = *($8)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$5 = ($5 + [-91])
	goto $label$76 
	
.LABEL $label$78
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$75
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$74
	$8 = ($8 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$12 = ((int_64)$9 | (int_64)$12)
	$13 = ((int_64)$13 + (int_64)4294967291)
	if ( ((int_64)$13 != (int_64)55834574842) ){ goto $label$73 }
	*(($3 + [24])) = *(($11 + [8]))
	*($3 + [8]) = (int_64)-7937689284756821744
	*($3) = $28
	*($3 + [16]) = *($11)
	CALL $103(($3 + [32]), $15)
	$8 = CALL $15(($3 + [64]), ($3 + [48]), $2, $12, $3)
	CALL $14(($3 + [336]), $8)
	$5 = *($3 + [336])
	CALL send_inline($5, (*($3 + [340]) - $5))
	$5 = *($3 + [336])
	if ( ($5 == 0) ){ goto $label$79 }
	*($3 + [340]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$79
	$5 = *($8 + [28])
	if ( ($5 == 0) ){ goto $label$80 }
	*(($8 + [32])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$80
	$5 = *($8 + [16])
	if ( ($5 == 0) ){ goto $label$81 }
	*(($8 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$81
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$82 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$82
	$10 = *($3 + [144])
	if ( ($10 == 0) ){ goto $label$83 }
	$21 = ($3 + [148])
	$8 = *($21)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$85 }
	
.LOOP $label$86:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$87 }
	CALL _ZdlPv($5)
	
.LABEL $label$87
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$86 }
	$8 = *(($3 + [144]))
	goto $label$84 
	
.LABEL $label$85
	$8 = $10
	
.LABEL $label$84
	*($21) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$83
	if ( (*($19) & [1]) ){ goto $label$96 }
	if ( (*($3 + [216]) & [1]) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$96
	CALL _ZdlPv(*(($3 + [208])))
	if ( ((*($3 + [216]) & [1]) == 0) ){ goto $label$94 }
	
.LABEL $label$95
	CALL _ZdlPv(*($18 + [8]))
	$8 = [1]
	if ( ((*($3 + [232]) & [1]) == 0) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$94
	$8 = [1]
	if ( (*($3 + [232]) & [1]) ){ goto $label$92 }
	
.LABEL $label$93
	if ( (*($3 + [248]) & $8) ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$92
	CALL _ZdlPv(*($17 + [8]))
	if ( ((*($3 + [248]) & $8) == 0) ){ goto $label$90 }
	
.LABEL $label$91
	CALL _ZdlPv(*($16 + [8]))
	$10 = *($3 + [280])
	if ( $10 ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$90
	$10 = *($3 + [280])
	if ( ($10 == 0) ){ goto $label$88 }
	
.LABEL $label$89
	$5 = *($3 + [284])
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$98 }
	
.LOOP $label$99:
	$8 = ($5 + [-12])
	if ( ((*($8) & [1]) == 0) ){ goto $label$100 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$100
	$5 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$99 }
	$8 = *($3 + [280])
	goto $label$97 
	
.LABEL $label$98
	$8 = $10
	
.LABEL $label$97
	*($3 + [284]) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$88
	$10 = *($3 + [320])
	if ( ($10 == 0) ){ goto $label$1 }
	$21 = ($3 + [324])
	$8 = *($21)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$102 }
	
.LOOP $label$103:
	$8 = ($8 + [-24])
	$5 = *($8)
	*($8) = [0]
	if ( ($5 == 0) ){ goto $label$104 }
	CALL _ZdlPv($5)
	
.LABEL $label$104
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$103 }
	$8 = *(($3 + [320]))
	goto $label$101 
	
.LABEL $label$102
	$8 = $10
	
.LABEL $label$101
	*($21) = $10
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$global$0 = ($3 + [352])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9740])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $122($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $93($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $94(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9832])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9878])
	$5 = ($1 + [40])
	$6 = *(($2 + [8]))
	$7 = *($1)
	$2 = *(($2 + [4]))
	$8 = *(*($2))
	if ( ((int_32)$8 == (int_32)*(($2 + [44]))) ){ goto $label$2 }
	*(($2 = (*($5) + ((int_32)((int_32)($8 - *($2 + [40])) / (int_32)[48]) * (int_32)[48])))) = *($6)
	*(($2 + [24])) = *(($6 + [24]))
	*(($2 + [16])) = *(($6 + [16]))
	*(($2 + [8])) = *(($6 + [8]))
	CALL $104(($2 + [32]), ($6 + [32]))
	goto $label$1 
	
.LABEL $label$2
	$2 = *(($1 + [44]))
	if ( ((int_32)$2 == (int_32)*(($1 + [48]))) ){ goto $label$3 }
	*($2) = *($6)
	*(($2 + [24])) = *(($6 + [24]))
	*(($2 + [16])) = *(($6 + [16]))
	*(($2 + [8])) = *(($6 + [8]))
	CALL $103(($2 + [32]), ($6 + [32]))
	*(($6 = ($1 + [44]))) = (*($6) + [48])
	goto $label$1 
	
.LABEL $label$3
	CALL $28($5, $6)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9929])
	*($4 + [16]) = [0]
	*($4) = ($4 + [16])
	$8 = ($1 + [8])
	*($4 + [28]) = $8
	*($4 + [24]) = $1
	$9 = ($1 + [20])
	*($4 + [32]) = $9
	$10 = ($1 + [32])
	*($4 + [36]) = $10
	$11 = ($1 + [33])
	*($4 + [40]) = $11
	$12 = ($1 + [34])
	*($4 + [44]) = $12
	$13 = ($1 + [35])
	*($4 + [48]) = $13
	$14 = ($1 + [36])
	*($4 + [52]) = $14
	$15 = ($1 + [37])
	*($4 + [56]) = $15
	*($4 + [60]) = $5
	CALL $22(($4 + [24]), $4)
	$2 = *($4 + [16])
	if ( ($2 <= [513]) ){ goto $label$5 }
	$6 = CALL $122($2)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($4 + [4]) = $6
	*($4) = $6
	*($4 + [8]) = ($6 + $2)
	*($4 + [16]) = $4
	*($4 + [28]) = $8
	*($4 + [32]) = $9
	*($4 + [36]) = $10
	*($4 + [40]) = $11
	*($4 + [44]) = $12
	*($4 + [48]) = $13
	*($4 + [52]) = $14
	*($4 + [56]) = $15
	*($4 + [60]) = $5
	*($4 + [24]) = $1
	CALL $23(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [56]), (int_64)0, $6, $2)
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $125($6)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($4 + [64])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $105($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9740])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $122($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([144])
	CALL $67($5)
	*($5 + [128]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [12])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [64])
	*($3 + [64]) = ($5 + [80])
	*($3 + [68]) = ($5 + [96])
	*($3 + [72]) = ($5 + [112])
	*($3 + [76]) = ($5 + [120])
	CALL $76(($3 + [40]), ($3 + [32]))
	*($5 + [132]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)7035924439720001536
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7035924439720001536
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $125($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$10
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_64 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *(($0 + [28]))
	if ( ((int_32)$1 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$1 = *(($1 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9689])
	goto $label$1 
	
.LABEL $label$2
	$1 = [0]
	$2 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $42($0, $2)
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9689])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [9768])
	return *($1)
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $121($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $105($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [128])
	$global$0 = $2
	*($0 + [8]) = $1
	*($0) = $1
	*($0 + [48]) = $1
	*($0 + [88]) = $1
	*(($3 = ($0 + [16]))) = $1
	*(($0 + [24])) = (int_64)-1
	*(($4 = ($0 + [32]))) = (int_64)0
	*(($0 + [40])) = [0]
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = (int_64)0
	*(($0 + [80])) = [0]
	*(($0 + [96])) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	$5 = CALL $67(($0 + [136]))
	$6 = ($0 + [8])
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)*($4)) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$6), [9689])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = CALL db_find_i64(*($6), *($3), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $42($6, $4) + [8]) == (int_32)$6), [9689])
	
.LABEL $label$3
	$8 = CALL $68($6)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)7
	$8 = (int_64)4921744144226844672
	
.LOOP $label$5:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$5 }
	
.LABEL $label$1
	$6 = ($0 + [48])
	*($0 + [128]) = $8
	$4 = *(($0 + [76]))
	if ( ((int_32)$4 == (int_32)*(($0 + [72]))) ){ goto $label$13 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [128]) == (int_32)$6), [9689])
	if ( $4 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$4 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7035924439720001536, (int_64)7035924439720001536)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $69($6, $4) + [128]) == (int_32)$6), [9689])
	
.LABEL $label$12
	CALL $70($2, $6)
	if ( (*($5) & [1]) ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$11
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$6 = CALL $121([9684])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$16 }
	*($2) = ($6 << [1])
	$4 = ($2 | [1])
	if ( $6 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$7 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($2) = ($7 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $6
	
.LABEL $label$15
	CALL memcpy($4, [9684], $6)
	
.LABEL $label$14
	*(($4 + $6)) = [0]
	*(($2 + [20])) = [0]
	*($2 + [12 align=4]) = (int_64)0
	$4 = ($2 + [12])
	$6 = CALL $121([9684])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$19 }
	*(($2 + [12])) = ($6 << [1])
	$4 = ($4 + [1])
	if ( $6 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$7 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*(($2 + [20])) = $4
	*(($2 + [16])) = $6
	*($2 + [12]) = ($7 | [1])
	
.LABEL $label$18
	CALL memcpy($4, [9684], $6)
	
.LABEL $label$17
	*(($4 + $6)) = [0]
	*(($6 = ($2 + [40]))) = (int_64)4345092
	*($2 + [32]) = (int_64)0
	*($2 + [24]) = (int_64)0
	CALL eosio_assert([1], [9515])
	$1 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$1 = $8
	$4 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$1 = $8
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $4 ){ goto $label$24 }
	$4 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$4 = [0]
	
.LABEL $label$20
	CALL eosio_assert($4, [9564])
	*(($6 = ($2 + [56]))) = (int_64)4345092
	*($2 + [48]) = (int_64)0
	CALL eosio_assert([1], [9515])
	$1 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$1 = $8
	$4 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$1 = $8
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $4 ){ goto $label$29 }
	$4 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$4 = [0]
	
.LABEL $label$25
	CALL eosio_assert($4, [9564])
	*(($6 = ($2 + [72]))) = (int_64)4345092
	*($2 + [64]) = (int_64)0
	CALL eosio_assert([1], [9515])
	$1 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$32:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$31 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$1 = $8
	$4 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$33
	$1 = $8
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$31 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $4 ){ goto $label$34 }
	$4 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$32 }
	goto $label$30 
	
.LABEL $label$31
	$4 = [0]
	
.LABEL $label$30
	CALL eosio_assert($4, [9564])
	*(($6 = ($2 + [88]))) = (int_64)4345092
	*($2 + [80]) = (int_64)0
	CALL eosio_assert([1], [9515])
	$1 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$38 }
	$1 = $8
	$4 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$38
	$1 = $8
	
.LOOP $label$39:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$36 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $4 ){ goto $label$39 }
	$4 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	$4 = [0]
	
.LABEL $label$35
	CALL eosio_assert($4, [9564])
	*(($6 = ($2 + [104]))) = (int_64)4345092
	*($2 + [96]) = (int_64)0
	CALL eosio_assert([1], [9515])
	$1 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$8 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$1 = $8
	$4 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$1 = $8
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $4 ){ goto $label$44 }
	$4 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$4 = [0]
	
.LABEL $label$40
	CALL eosio_assert($4, [9564])
	*($2 + [120]) = [1]
	*($2 + [112]) = (int_64)0
	if ( ((*($5) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$10
	*(*(($0 + [144]))) = [0]
	*(($0 + [140])) = [0]
	goto $label$6 
	
.LABEL $label$9
	CALL $102($2)
	
.LABEL $label$8
	CALL $102($4)
	
.LABEL $label$7
	*($5) = [0]
	
.LABEL $label$6
	CALL $106($5, [0])
	$6 = ($2 + [8])
	*(($5 + [8])) = *($6)
	*($5) = *($2)
	*($6) = [0]
	*($2) = (int_64)0
	$4 = ($2 + [12])
	$6 = ($0 + [148])
	if ( (*($6) & [1]) ){ goto $label$46 }
	*($6) = [0]
	goto $label$45 
	
.LABEL $label$46
	*(*(($0 + [156]))) = [0]
	*(($0 + [152])) = [0]
	
.LABEL $label$45
	CALL $106($6, [0])
	*(($6 + [8])) = *(($4 + [8]))
	*($6) = *($4)
	*(($2 + [12])) = (int_64)0
	*(($2 + [20])) = [0]
	CALL memcpy(($0 + [160]), ($2 + [24]), [97])
	if ( ((*($2) & [1]) == 0) ){ goto $label$47 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$47
	$global$0 = ($2 + [128])
	(unreachable)
	(unreachable)
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [272])
	$global$0 = $3
	CALL memory()
	$4 = CALL $65(($3 + [8]), $0)
	CALL $45($4, $1, $2)
	CALL $66($4)
	CALL $117([0])
	$global$0 = ($3 + [272])
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [9515])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9564])
	*(($1 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [9515])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9564])
	*(($1 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [9515])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [9564])
	*(($1 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [9515])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$2 = $3
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [9564])
	*(($1 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [9515])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$2 = $3
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$25 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [9564])
	*($0 + [120]) = [0]
	return $0
}

int_32 .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($0 + [136])
	CALL $71(($0 + [48]), $1, *($0))
	if ( ((*(($0 + [148])) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($0 + [156])))
	
.LABEL $label$1
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($0 + [144])))
	
.LABEL $label$2
	CALL $72(($0 + [112]))
	$2 = *(($0 + [72]))
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$8
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$9
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$6 }
	$1 = *(($0 + [72]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $2
	
.LABEL $label$4
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$2 = *(($0 + [32]))
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = ($0 + [36])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($0 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $2
	
.LABEL $label$11
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$10
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	$7 = CALL $103($2, ($1 + [48]))
	$6 = CALL $103(($2 + [16]), ($1 + [36]))
	$5 = CALL $103(($2 + [32]), ($1 + [24]))
	$4 = CALL $103(($2 + [48]), ($1 + [12]))
	$3 = CALL $103(($2 + [64]), $1)
	CALL $97($0, $3, $4, $5, $6, $7, *($1 + [60]), *($1 + [61]), *($1 + [62]), *($1 + [63]), *($1 + [64]))
	if ( (*($7) & [1]) ){ goto $label$9 }
	if ( (*($6) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($5) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($4) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [80])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $57(*($1), (*($0) + [48]))
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9763])
	CALL memcpy(($2 + [13]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*($0 + [60]) = ((int_32)*($2 + [13]) != (int_32)[0])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9763])
	CALL memcpy(($2 + [14]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*($0 + [61]) = ((int_32)*($2 + [14]) != (int_32)[0])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9763])
	CALL memcpy(($2 + [15]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*($0 + [62]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [9763])
	CALL memcpy(($2 + [12]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*($0 + [63]) = ((int_32)*($2 + [12]) != (int_32)[0])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [9763])
	CALL memcpy(($2 + [11]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*($0 + [64]) = ((int_32)*($2 + [11]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [9515])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9564])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9763])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [9763])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9763])
	CALL memcpy(($2 + [13]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4 + [8]) = ((int_32)*($2 + [13]) != (int_32)[0])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9763])
	CALL memcpy(($2 + [14]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4 + [9]) = ((int_32)*($2 + [14]) != (int_32)[0])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9763])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4 + [10]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9763])
	CALL memcpy(($2 + [12]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4 + [11]) = ((int_32)*($2 + [12]) != (int_32)[0])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [9763])
	CALL memcpy(($2 + [11]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	*($4 + [12]) = ((int_32)*($2 + [11]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $125($0)
	
.LABEL $label$1
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $102 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $105($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9763])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$1 = ($1 + [-24])
	*($3) = $1
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = *($4 + [40])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($4 + [44])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($1 + [-48])
	if ( ((*(($1 + [-16])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [-8])))
	
.LABEL $label$8
	$1 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	$1 = *(($4 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$4
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$9
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[48]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[48])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[89478486]) ){ goto $label$3 }
	$7 = [89478485]
	$2 = ((int_32)($2 - $4) / (int_32)[48])
	if ( ((uint_32)$2 > (uint_32)[44739241]) ){ goto $label$6 }
	$7 = ($2 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL _Znwj(((int_32)$7 * (int_32)[48]))
	goto $label$2 
	
.LABEL $label$5
	$11 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*(($12 = ($3 + [40]))) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($10 = ($3 + [24]))) = (int_64)0
	*(($7 = ($3 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [9515])
	$13 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$9:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$13 = $14
	$5 = [1]
	$2 = $7
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$13 = $14
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$2 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $2 ){ goto $label$11 }
	$5 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($5, [9564])
	*($10) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($12) = [0]
	$3 = (*($11) + [48])
	*($11) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $113($0)
	
.LABEL $label$2
	$9 = ($8 + ((int_32)$7 * (int_32)[48]))
	$10 = ($8 + ((int_32)$5 * (int_32)[48]))
	$5 = $10
	
.LOOP $label$12:
	*($5) = (int_64)0
	*($5 + [8]) = (int_64)0
	*(($11 = ($5 + [40]))) = (int_64)0
	*(($5 + [32])) = (int_64)0
	*(($12 = ($5 + [24]))) = (int_64)0
	*(($7 = ($5 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [9515])
	$13 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$14:
	$3 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$13 = $14
	$3 = [1]
	$2 = $7
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$13 = $14
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$2 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $2 ){ goto $label$16 }
	$3 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert($3, [9564])
	*($12) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($11) = [0]
	$5 = ($5 + [48])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$12 }
	$11 = ($8 + ((int_32)$6 * (int_32)[48]))
	$7 = *($0)
	$3 = *(($0 + [4]))
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$18 }
	$1 = ($7 - $3)
	$4 = [0]
	
.LOOP $label$19:
	$2 = ($3 + $4)
	*((($7 = ($10 + $4)) + [-24])) = *(($2 + [-24]))
	*(($7 + [-32])) = *(($2 + [-32]))
	*(($7 + [-40])) = *(($2 + [-40]))
	*(($7 + [-48])) = *(($2 + [-48]))
	$5 = ($2 + [-8])
	*(($7 + [-8])) = *($5)
	$7 = ($2 + [-16])
	*(($7 + [-16])) = *($7)
	*($7) = (int_64)0
	*($5) = [0]
	$4 = ($4 + [-48])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$19 }
	$10 = ($10 + $4)
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$17 
	
.LABEL $label$18
	$4 = $7
	
.LABEL $label$17
	*($0) = $10
	*(($0 + [4])) = $11
	*(($0 + [8])) = $9
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($7 + [-48])
	if ( ((*(($7 + [-16])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($7 + [-8])))
	
.LABEL $label$22
	$7 = $2
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$21 }
	
.LABEL $label$20
	if ( ($4 == 0) ){ goto $label$1 }
	CALL _ZdlPv($4)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9793])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$3 = *($1)
	$5 = *($1 + [4])
	$2 = ((int_32)($5 - $3) / (int_32)[48])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $86($1, ($7 - $2))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$2 = ($3 + ((int_32)$7 * (int_32)[48]))
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($5 + [-48])
	if ( ((*(($5 + [-16])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($5 + [-8])))
	
.LABEL $label$8
	$5 = $7
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$9:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - *($7)) > (uint_32)[7]), [9763])
	CALL memcpy($2, *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [9763])
	CALL memcpy(($2 + [8]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [9763])
	CALL memcpy(($2 + [16]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [9763])
	CALL memcpy(($2 + [24]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $57($0, ($2 + [32]))
	$2 = ($2 + [48])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $57(*($1), *($0 + [4]))
	CALL $57(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9763])
	CALL memcpy(($2 + [13]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [13]) != (int_32)[0])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9763])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9763])
	CALL memcpy(($2 + [14]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [14]) != (int_32)[0])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9763])
	CALL memcpy(($2 + [12]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [12]) != (int_32)[0])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9763])
	CALL memcpy(($2 + [11]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [11]) != (int_32)[0])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9763])
	CALL memcpy(($2 + [10]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [10]) != (int_32)[0])
	CALL $85(*($1), *($0 + [36]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9584])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9584])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $83(*($1), *($0))
	CALL $83(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9584])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$1 = *($1)
	*($2 + [15]) = *(*($0 + [36]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[0]), [9584])
	CALL memcpy(*($1 + [4]), ($2 + [15]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	CALL $104($1, $5)
	$6 = ($1 + [12])
	CALL $104($6, ($5 + [12]))
	$7 = CALL memcpy(($1 + [24]), ($5 + [24]), [97])
	$5 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($8 + [97])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$8 = *(($1 + [12]))
	$8 = ( *(($1 + [16])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$5 = ($8 + $5)
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	$2 = CALL $122($5)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	*($3 + [32]) = $7
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = ($1 + [48])
	*($3 + [44]) = ($1 + [64])
	*($3 + [48]) = ($1 + [80])
	*($3 + [52]) = ($1 + [96])
	*($3 + [56]) = ($1 + [112])
	*($3 + [60]) = ($1 + [120])
	CALL $82(($3 + [24]), ($3 + [16]))
	*($1 + [132]) = CALL db_store_i64(*($4 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), (int_64)7035924439720001536, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)7035924439720001536) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $125($2)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)7035924439720001536) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = (int_64)7035924439720001537
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [64])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [9988])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([144])
	CALL $67($3)
	*($3 + [128]) = $1
	CALL $81(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)7035924439720001536
	$5 = *($3 + [132])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)7035924439720001536
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $77(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$4
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$5
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = ($3 + [44])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($6 + [-48])
	if ( ((*(($6 + [-16])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($6 + [-8])))
	
.LABEL $label$10
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	$6 = *(($3 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $4
	
.LABEL $label$7
	*($5) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$6
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$11
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$4 }
	$6 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$6 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($6)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9584])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9584])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9584])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$1), [9689])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7035924439720001536, (int_64)7035924439720001536)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $69($1, $3)
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)$1), [9689])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9768])
	CALL $103($0, $2)
	CALL $103(($0 + [12]), ($2 + [12]))
	CALL memcpy(($0 + [24]), ($2 + [24]), [97])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [128]) == (int_32)$0), [9689])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7035924439720001536, (int_64)7035924439720001536)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $69($0, $4)
	CALL eosio_assert(((int_32)*($4 + [128]) == (int_32)$0), [9689])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9797])
	CALL $79($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $80($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $57(*($1), *($0))
	CALL $57(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9763])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9763])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9763])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9763])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9763])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9763])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [9763])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [20])))
	
.LABEL $label$11
	if ( ((*($1) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9584])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9584])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	$11 = ($global$0 - [64])
	$global$0 = $11
	CALL require_auth(*($0))
	$12 = [0]
	$13 = [0]
	$19 = ($15 & [1])
	$15 = *($1)
	$17 = ($15 & [1])
	$14 = ($0 + [148])
	$15 = *($14)
	$16 = uint_32($15 >> [1])
	$18 = ( *(($0 + [152])) ? $16 : $17 )
	if ( ((int_32)$18 != (int_32)( *($1 + [4]) ? uint_32($15 >> [1]) : $19 )) ){ goto $label$1 }
	$15 = ($14 + [1])
	$14 = ( *($1 + [8]) ? ($1 + [1]) : $19 )
	if ( $17 ){ goto $label$4 }
	if ( ($18 == 0) ){ goto $label$3 }
	$17 = ([0] - $16)
	
.LOOP $label$5:
	if ( ((int_32)*($15) != (int_32)*($14)) ){ goto $label$2 }
	$13 = [1]
	$14 = ($14 + [1])
	$15 = ($15 + [1])
	$17 = ($17 + [1])
	if ( $17 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	if ( ($18 == 0) ){ goto $label$3 }
	$13 = (CALL $120(( *(($0 + [156])) ? $15 : $17 ), $14, $18) == 0)
	goto $label$1 
	
.LABEL $label$3
	$13 = [1]
	goto $label$1 
	
.LABEL $label$2
	$13 = [0]
	
.LABEL $label$1
	CALL eosio_assert($13, [9442])
	$14 = ($15 & [1])
	$15 = *($2)
	$17 = ($15 & [1])
	$15 = *($0 + [136])
	$18 = uint_32($15 >> [1])
	$13 = ( *(($0 + [140])) ? $18 : $17 )
	if ( ((int_32)$13 != (int_32)( *($2 + [4]) ? uint_32($15 >> [1]) : $14 )) ){ goto $label$6 }
	$12 = [1]
	$15 = (($0 + [136]) + [1])
	$14 = ( *($2 + [8]) ? ($2 + [1]) : $14 )
	if ( $17 ){ goto $label$8 }
	if ( ($13 == 0) ){ goto $label$6 }
	$17 = ([0] - $18)
	
.LOOP $label$9:
	if ( ((int_32)*($15) != (int_32)*($14)) ){ goto $label$7 }
	$12 = [1]
	$14 = ($14 + [1])
	$15 = ($15 + [1])
	$17 = ($17 + [1])
	if ( $17 ){ goto $label$9 }
	goto $label$6 
	
.LABEL $label$8
	if ( ($13 == 0) ){ goto $label$6 }
	$12 = (CALL $120(( *(($0 + [144])) ? $15 : $17 ), $14, $13) == 0)
	goto $label$6 
	
.LABEL $label$7
	$12 = [0]
	
.LABEL $label$6
	CALL eosio_assert($12, [9462])
	CALL eosio_assert(((uint_64)*(($0 + [248])) <= (uint_64)CALL $fimport$10()), [9485])
	$20 = *(($0 + [160]))
	*($11 + [62]) = $7
	*($11 + [63]) = $6
	*($11 + [61]) = $8
	*($11 + [60]) = $9
	*($11 + [59]) = $10
	CALL require_auth(*($0))
	$15 = ($0 + [88])
	$14 = CALL $7($15, $20, [9416])
	*($11 + [36]) = ($11 + [62])
	*($11 + [32]) = ($11 + [63])
	*($11 + [40]) = ($11 + [61])
	*($11 + [44]) = ($11 + [60])
	*($11 + [48]) = ($11 + [59])
	CALL $38($15, $14, ($11 + [32]))
	$14 = CALL $103($11, $3)
	$15 = CALL $103(($11 + [16]), $1)
	CALL $29($0, $15, $14)
	if ( (*($14) & [1]) ){ goto $label$12 }
	if ( (*($15) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($14 + [8]))
	if ( ((*($15) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($15 + [8]))
	$global$0 = ($11 + [64])
	return 
	
.LABEL $label$10
	$global$0 = ($11 + [64])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	*(($0 + [256])) = $1
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	$7 = ($global$0 - [32])
	$global$0 = $7
	*($7 + [30]) = $3
	*($7 + [31]) = $2
	*($7 + [29]) = $4
	*($7 + [28]) = $5
	*($7 + [27]) = $6
	CALL require_auth(*($0))
	$0 = ($0 + [88])
	$6 = CALL $7($0, $1, [9416])
	*($7 + [4]) = ($7 + [30])
	*($7) = ($7 + [31])
	*($7 + [8]) = ($7 + [29])
	*($7 + [12]) = ($7 + [28])
	*($7 + [16]) = ($7 + [27])
	CALL $38($0, $6, $7)
	$global$0 = ($7 + [32])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9793])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $19($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9763])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [9832])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9878])
	$3 = *($3)
	CALL $104($1, $3)
	$6 = ($1 + [12])
	CALL $104($6, ($3 + [12]))
	$7 = CALL memcpy(($1 + [24]), ($3 + [24]), [97])
	CALL eosio_assert([1], [9929])
	$3 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [97])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$8 = *(($1 + [12]))
	$8 = ( *(($1 + [16])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$3 = ($8 + $3)
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $122($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $6
	*($5 + [32]) = $7
	*($5 + [24]) = $1
	*($5 + [36]) = ($1 + [32])
	*($5 + [40]) = ($1 + [48])
	*($5 + [44]) = ($1 + [64])
	*($5 + [48]) = ($1 + [80])
	*($5 + [52]) = ($1 + [96])
	*($5 + [56]) = ($1 + [112])
	*($5 + [60]) = ($1 + [120])
	CALL $82(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*(($1 + [132])), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)7035924439720001536) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $125($4)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7035924439720001536) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = (int_64)7035924439720001537
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [64])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $113($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $87(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	$2 = ($global$0 - [176])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = *($1 + [8])
	$4 = [0]
	$5 = *($1)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$6 = (uint_64)$3 >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$4 = [1]
	$8 = $0
	$0 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$8 = ($0 + [1])
	$0 = $8
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$0 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9026])
	$6 = (int_64)0
	CALL eosio_assert(((int_64)$5 > (int_64)0), [9055])
	CALL eosio_assert(((int_64)$3 == (int_64)4345092), [9095])
	$3 = (int_64)59
	$0 = [9398]
	$9 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$11 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$4 = ($4 + [-91])
	goto $label$9 
	
.LABEL $label$11
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$7
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$6 }
	*((($2 + [120]) + [32])) = [0]
	*($2 + [136]) = (int_64)-1
	*($2 + [128]) = $9
	*($2 + [120]) = (int_64)-7939483657262738416
	*($2 + [144]) = (int_64)0
	$0 = CALL db_lowerbound_i64((int_64)-7939483657262738416, $9, (int_64)5455799419163115520, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$13 }
	$10 = (($2 + [16]) + [32])
	$11 = ($2 | [1])
	$12 = CALL $34(($2 + [120]), $0)
	$13 = (($2 + [64]) + [8])
	$14 = (($2 + [16]) + [16])
	$15 = ($2 + [108])
	$16 = ($2 + [56])
	$17 = ($2 + [100])
	
.LOOP $label$14:
	CALL printui(*($12))
	$18 = ((int_64)$5 * (int_64)*($12 + [8]))
	if ( (uint_64)($18 <= (int_64)100) ){ goto $label$15 }
	$6 = (int_64)6
	
.LOOP $label$16:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$16 }
	*($13) = (int_64)-4992121834821386240
	*($2 + [64]) = (int_64)-7937689284756821744
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [8973]
	$9 = (int_64)0
	
.LOOP $label$17:
	$3 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$18 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$4 = ($4 + [-91])
	goto $label$19 
	
.LABEL $label$20
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$3 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$18
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$3 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$17 }
	$6 = (int_64)0
	$3 = (int_64)59
	$0 = [8541]
	$5 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$26 }
	$4 = *($0)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$4 = ($4 + [-91])
	goto $label$24 
	
.LABEL $label$26
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$22
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$5 = ((int_64)$7 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$21 }
	CALL eosio_assert([1], [9515])
	$3 = ((uint_64)$18 / (uint_64)(int_64)100)
	$6 = (int_64)16973
	$0 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$6 = $7
	$4 = [1]
	$8 = $0
	$0 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$6 = $7
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$8 = ($0 + [1])
	$0 = $8
	if ( $4 ){ goto $label$31 }
	$4 = [1]
	$0 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$4 = [0]
	
.LABEL $label$27
	CALL eosio_assert($4, [9564])
	*(($4 = ($2 + [8]))) = [0]
	*($2) = (int_64)0
	$0 = CALL $121([9407])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$34 }
	*($2) = ($0 << [1])
	$8 = $11
	if ( $0 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$19 = (($0 + [16]) & [-16])
	$8 = CALL _Znwj($19)
	*($4) = $8
	*($2) = ($19 | [1])
	*($2 + [4]) = $0
	
.LABEL $label$33
	CALL memcpy($8, [9407], $0)
	
.LABEL $label$32
	*(($8 + $0)) = [0]
	$6 = *($12)
	*($14) = $3
	*((($2 + [16]) + [24])) = (int_64)4345092
	*($10) = *($2)
	*(($10 + [8])) = *($4)
	*((($2 + [16]) + [8])) = $6
	*($4) = [0]
	*($2 + [16]) = (int_64)-7937689284756821744
	*($2) = (int_64)0
	CALL $14(($2 + [160]), CALL $15(($2 + [80]), ($2 + [64]), $9, $5, ($2 + [16])))
	$0 = *($2 + [160])
	CALL send_inline($0, (*($2 + [164]) - $0))
	$0 = *($2 + [160])
	if ( ($0 == 0) ){ goto $label$35 }
	*($2 + [164]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$35
	$0 = *($15)
	if ( ($0 == 0) ){ goto $label$36 }
	*((($2 + [80]) + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$36
	$0 = *((($2 + [80]) + [16]))
	if ( ($0 == 0) ){ goto $label$37 }
	*($17) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$37
	if ( ((*($10) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($16))
	
.LABEL $label$38
	if ( ((*($2) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$15
	CALL eosio_assert([1], [10358])
	$0 = CALL db_next_i64(*($12 + [20]), ($2 + [16]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$13 }
	$12 = CALL $34(($2 + [120]), $0)
	$5 = *($1)
	goto $label$14 
	
.LABEL $label$13
	$8 = *($2 + [144])
	if ( ($8 == 0) ){ goto $label$39 }
	$12 = ($2 + [148])
	$0 = *($12)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$41 }
	
.LOOP $label$42:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$43 }
	CALL _ZdlPv($4)
	
.LABEL $label$43
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$42 }
	$0 = *(($2 + [144]))
	goto $label$40 
	
.LABEL $label$41
	$0 = $8
	
.LABEL $label$40
	*($12) = $8
	CALL _ZdlPv($0)
	
.LABEL $label$39
	$global$0 = ($2 + [176])
	return (unreachable)
	
.LABEL $label$12
	CALL $102($2)
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [56]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10310])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229865212519383040)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10256])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10256])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $9(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$5 = ($1 + [20])
	CALL $104($5, *($3 + [4]))
	$6 = ($1 + [8])
	CALL $104($6, *($3 + [8]))
	*(($3 = $2) + [16]) = [0]
	*($3) = ($3 + [16])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	*($3 + [32]) = $5
	$7 = ($1 + [32])
	*($3 + [36]) = $7
	$8 = ($1 + [33])
	*($3 + [40]) = $8
	$9 = ($1 + [34])
	*($3 + [44]) = $9
	$10 = ($1 + [35])
	*($3 + [48]) = $10
	$11 = ($1 + [36])
	*($3 + [52]) = $11
	$12 = ($1 + [37])
	*($3 + [56]) = $12
	$13 = ($1 + [40])
	*($3 + [60]) = $13
	CALL $22(($3 + [24]), $3)
	$14 = *($3 + [16])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$2 = CALL $122($14)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($14 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $14)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	*($3 + [32]) = $5
	*($3 + [36]) = $7
	*($3 + [40]) = $8
	*($3 + [44]) = $9
	*($3 + [48]) = $10
	*($3 + [52]) = $11
	*($3 + [56]) = $12
	*($3 + [60]) = $13
	CALL $23(($3 + [24]), ($3 + [16]))
	$15 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $15, $2, $14)
	if ( ((uint_32)$14 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$15 >= (uint_64)*($4 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $125($2)
	if ( (uint_64)($15 <= *($4 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}