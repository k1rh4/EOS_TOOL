{
  "version": "eosio::abi/1.0",
  "types": [{
      "new_type_name": "symbol_name",
      "type": "uint64"
    }
  ],
  "structs": [{
      "name": "cur_stats",
      "base": "",
      "fields": [{
          "name": "supply",
          "type": "asset"
        },{
          "name": "max_supply",
          "type": "asset"
        },{
          "name": "issuer",
          "type": "name"
        }
      ]
    },{
      "name": "minute_stat",
      "base": "",
      "fields": [{
          "name": "amount",
          "type": "float64"
        },{
          "name": "money",
          "type": "float64"
        },{
          "name": "open",
          "type": "float64"
        },{
          "name": "high",
          "type": "float64"
        },{
          "name": "low",
          "type": "float64"
        },{
          "name": "close",
          "type": "float64"
        },{
          "name": "time",
          "type": "uint64"
        }
      ]
    },{
      "name": "hour_stat",
      "base": "",
      "fields": [{
          "name": "amount",
          "type": "float64"
        },{
          "name": "money",
          "type": "float64"
        },{
          "name": "open",
          "type": "float64"
        },{
          "name": "high",
          "type": "float64"
        },{
          "name": "low",
          "type": "float64"
        },{
          "name": "close",
          "type": "float64"
        },{
          "name": "time",
          "type": "uint64"
        }
      ]
    },{
      "name": "day_stat",
      "base": "",
      "fields": [{
          "name": "amount",
          "type": "float64"
        },{
          "name": "money",
          "type": "float64"
        },{
          "name": "open",
          "type": "float64"
        },{
          "name": "high",
          "type": "float64"
        },{
          "name": "low",
          "type": "float64"
        },{
          "name": "close",
          "type": "float64"
        },{
          "name": "time",
          "type": "uint64"
        }
      ]
    },{
      "name": "k_order",
      "base": "",
      "fields": [{
          "name": "account_name",
          "type": "name"
        },{
          "name": "amount",
          "type": "float64"
        },{
          "name": "money",
          "type": "float64"
        },{
          "name": "price",
          "type": "float64"
        },{
          "name": "is_buy_type",
          "type": "bool"
        },{
          "name": "fee",
          "type": "float64"
        },{
          "name": "time",
          "type": "uint64"
        }
      ]
    },{
      "name": "symbol_type",
      "base": "",
      "fields": [{
          "name": "value",
          "type": "symbol_name"
        }
      ]
    },{
      "name": "st_game",
      "base": "",
      "fields": [{
          "name": "symbol",
          "type": "symbol_type"
        },{
          "name": "owner",
          "type": "name"
        },{
          "name": "base_eos",
          "type": "int128"
        },{
          "name": "base_stake",
          "type": "int64"
        },{
          "name": "base_option",
          "type": "int64"
        },{
          "name": "deserved_option",
          "type": "int64"
        },{
          "name": "claimed_option",
          "type": "int64"
        },{
          "name": "eos",
          "type": "int128"
        },{
          "name": "stake",
          "type": "int64"
        },{
          "name": "lock_up_period",
          "type": "uint32"
        },{
          "name": "start_time",
          "type": "uint32"
        },{
          "name": "base_fee_percent",
          "type": "uint8"
        },{
          "name": "init_fee_percent",
          "type": "uint8"
        }
      ]
    },{
      "name": "st_refer",
      "base": "",
      "fields": [{
          "name": "fee_percent",
          "type": "uint64"
        }
      ]
    },{
      "name": "st_trans",
      "base": "",
      "fields": [{
          "name": "trans",
          "type": "uint64"
        }
      ]
    },{
      "name": "account",
      "base": "",
      "fields": [{
          "name": "balance",
          "type": "asset"
        }
      ]
    },{
      "name": "reg",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "memo",
          "type": "string"
        }
      ]
    },{
      "name": "sell",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "quantity",
          "type": "asset"
        }
      ]
    },{
      "name": "consume",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "quantity",
          "type": "asset"
        },{
          "name": "memo",
          "type": "string"
        }
      ]
    },{
      "name": "hellodapppub",
      "base": "",
      "fields": [{
          "name": "base_eos_quantity",
          "type": "asset"
        },{
          "name": "maximum_stake",
          "type": "asset"
        },{
          "name": "option_quantity",
          "type": "asset"
        },{
          "name": "lock_up_period",
          "type": "uint32"
        },{
          "name": "base_fee_percent",
          "type": "uint8"
        },{
          "name": "init_fee_percent",
          "type": "uint8"
        },{
          "name": "refer_fee",
          "type": "uint64"
        },{
          "name": "start_time",
          "type": "uint32"
        }
      ]
    },{
      "name": "initdapppub",
      "base": "",
      "fields": [{
          "name": "base_eos_quantity",
          "type": "asset"
        },{
          "name": "maximum_stake",
          "type": "asset"
        },{
          "name": "option_quantity",
          "type": "asset"
        },{
          "name": "lock_up_period",
          "type": "uint32"
        },{
          "name": "base_fee_percent",
          "type": "uint8"
        },{
          "name": "init_fee_percent",
          "type": "uint8"
        },{
          "name": "refer_fee",
          "type": "uint64"
        },{
          "name": "start_time",
          "type": "uint32"
        }
      ]
    },{
      "name": "destroy",
      "base": "",
      "fields": [{
          "name": "name",
          "type": "string"
        }
      ]
    },{
      "name": "claim",
      "base": "",
      "fields": [{
          "name": "name",
          "type": "string"
        },{
          "name": "sell",
          "type": "bool"
        }
      ]
    },{
      "name": "newtoken",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "base_eos_quantity",
          "type": "asset"
        },{
          "name": "maximum_stake",
          "type": "asset"
        },{
          "name": "option_quantity",
          "type": "asset"
        },{
          "name": "lock_up_period",
          "type": "uint32"
        },{
          "name": "base_fee_percent",
          "type": "uint8"
        },{
          "name": "init_fee_percent",
          "type": "uint8"
        },{
          "name": "refer_fee",
          "type": "uint64"
        },{
          "name": "start_time",
          "type": "uint32"
        }
      ]
    },{
      "name": "transfer",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "to",
          "type": "name"
        },{
          "name": "quantity",
          "type": "asset"
        },{
          "name": "memo",
          "type": "string"
        }
      ]
    },{
      "name": "receipt",
      "base": "",
      "fields": [{
          "name": "from",
          "type": "name"
        },{
          "name": "type",
          "type": "string"
        },{
          "name": "in",
          "type": "asset"
        },{
          "name": "out",
          "type": "asset"
        },{
          "name": "fee",
          "type": "asset"
        }
      ]
    },{
      "name": "detail",
      "base": "",
      "fields": [{
          "name": "tokenname",
          "type": "string"
        },{
          "name": "dappname",
          "type": "string"
        },{
          "name": "logo",
          "type": "string"
        },{
          "name": "website",
          "type": "string"
        },{
          "name": "social",
          "type": "string"
        },{
          "name": "community",
          "type": "string"
        },{
          "name": "medium",
          "type": "string"
        },{
          "name": "github",
          "type": "string"
        },{
          "name": "contract",
          "type": "name"
        },{
          "name": "memo",
          "type": "string"
        }
      ]
    },{
      "name": "setreferfee",
      "base": "",
      "fields": [{
          "name": "name_str",
          "type": "string"
        },{
          "name": "refer_fee",
          "type": "uint64"
        }
      ]
    },{
      "name": "settrans",
      "base": "",
      "fields": [{
          "name": "name_str",
          "type": "string"
        },{
          "name": "trans",
          "type": "uint64"
        }
      ]
    },{
      "name": "create",
      "base": "",
      "fields": [{
          "name": "issuer",
          "type": "name"
        },{
          "name": "maximum_supply",
          "type": "asset"
        }
      ]
    },{
      "name": "issue",
      "base": "",
      "fields": [{
          "name": "to",
          "type": "name"
        },{
          "name": "quantity",
          "type": "asset"
        },{
          "name": "memo",
          "type": "string"
        }
      ]
    },{
      "name": "cleantable",
      "base": "",
      "fields": []
    },{
      "name": "airdrop",
      "base": "",
      "fields": [{
          "name": "i",
          "type": "uint32"
        },{
          "name": "m",
          "type": "uint32"
        },{
          "name": "n",
          "type": "uint64"
        }
      ]
    },{
      "name": "setairdrop",
      "base": "",
      "fields": [{
          "name": "n",
          "type": "uint64"
        },{
          "name": "q",
          "type": "asset"
        },{
          "name": "s",
          "type": "string"
        }
      ]
    }
  ],
  "actions": [{
      "name": "reg",
      "type": "reg",
      "ricardian_contract": "# CONTRACT FOR tokendapppub::reg## ACTION NAME: reg\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `from` (user who want to register to this Dapp)* `from` (user who want to register to this Dapp)\n* `memo` (to specify the token name)* `memo` (to specify the token name)\n\n### Intent### Intent\nINTENT. The main purpose of this contract is to help users register the token. it will cost user 128 bytes RAM.INTENT. The main purpose of this contract is to help users register the token. it will cost user 128 bytes RAM.\n\n### Term### Term\nTERM. This Contract expires at the conclusion of code execution.TERM. This Contract expires at the conclusion of code execution.\n"
    },{
      "name": "sell",
      "type": "sell",
      "ricardian_contract": "# CONTRACT FOR tokendapppub::sell## ACTION NAME: sell\n### Parameters### Parameters\n* `from` (token seller)* `from` (token seller)\n* `quantity` (token selling amount)* `quantity` (token selling amount)\n\n### Intent### Intent\nINTENT. The main purpose of this contract is to help users sell the token. The selling fee defined by the DApp project owner will be deducted from the token selling amount and will be distributed to the current token to increase its price.INTENT. The main purpose of this contract is to help users sell the token. The selling fee defined by the DApp project owner will be deducted from the token selling amount and will be distributed to the current token to increase its price.\n\n### Term### Term\nTERM. This Contract expires at the conclusion of code execution.TERM. This Contract expires at the conclusion of code execution.\n"
    },{
      "name": "consume",
      "type": "consume",
      "ricardian_contract": "# CONTRACT FOR tokendapppub::consume## ACTION NAME: consume\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `from` (token consumer)* `from` (token consumer)\n* `quantity` (token consumption amount)* `quantity` (token consumption amount)\n* `memo` (DApp project owner will be notified of the \"memo\" info and used it as parameters for convenience)* `memo` (DApp project owner will be notified of the \"memo\" info and used it as parameters for convenience)\n\n### Intent### Intent\nINTENT. The main purpose of this contract is to help users consume the token. During the exection process, DApp project owner will be notified of the consumed token amount and \"memo\" info. When users comsume this specific token, the total supply of this token still remains the same, but the current circulating supply will be reduced. Others users will benefit from this token consumption behaviour as their holding tokens will be appreciated.INTENT. The main purpose of this contract is to help users consume the token. During the exection process, DApp project owner will be notified of the consumed token amount and \"memo\" info. When users comsume this specific token, the total supply of this token still remains the same, but the current circulating supply will be reduced. Others users will benefit from this token consumption behaviour as their holding tokens will be appreciated.\n\n### Term### Term\nTERM. This Contract expires at the conclusion of code execution.TERM. This Contract expires at the conclusion of code execution.\n"
    },{
      "name": "hellodapppub",
      "type": "hellodapppub",
      "ricardian_contract": "# CONTRACT FOR tokendapppub::hellodapppub## ACTION NAME: hellodapppub\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `base_eos_quantity` (basic EOS fund pool)* `base_eos_quantity` (basic EOS fund pool)\n* `maximum_stake` (maximum token supply)* `maximum_stake` (maximum token supply)\n* `option_quantity` （option amount for the token project owner）* `option_quantity` （option amount for the token project owner）\n* `lock_up_period` (option lock period: seconds)* `lock_up_period` (option lock period: seconds)\n* `base_fee_percent` (lowest token selling fee)* `base_fee_percent` (lowest token selling fee)\n* `init_fee_percent` (initial token selling fee)* `init_fee_percent` (initial token selling fee)\n* `refer_fee` (referral fee when user buy the token)* `refer_fee` (referral fee when user buy the token)\n* `start_time` (time when the issuance of tokens)* `start_time` (time when the issuance of tokens)\n\n### Intent### Intent\nINTENT. The main purpose of this contract is to create the platform token for the contract owner.INTENT. The main purpose of this contract is to create the platform token for the contract owner.\n\n### Term### Term\nTERM. This Contract expires at the conclusion of code execution.TERM. This Contract expires at the conclusion of code execution.\n"
    },{
      "name": "initdapppub",
      "type": "initdapppub",
      "ricardian_contract": ""
    },{
      "name": "destroy",
      "type": "destroy",
      "ricardian_contract": "# CONTRACT FOR tokendapppub::destroy## ACTION NAME: destroy\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `name` (token name)* `name` (token name)\n\n### Intent### Intent\nIntent. The main purpose of this contract is to help the DApp project owner destroy the token. Before the project owner destroys, it is necessary to confirm that all users have sold their token, otherwise it will be impossible to destroy if there are still users holding the token.Intent. The main purpose of this contract is to help the DApp project owner destroy the token. Before the project owner destroys, it is necessary to confirm that all users have sold their token, otherwise it will be impossible to destroy if there are still users holding the token.\n\n### Term### Term\nTERM. This Contract expires at the conclusion of code execution.TERM. This Contract expires at the conclusion of code execution.\n"
    },{
      "name": "claim",
      "type": "claim",
      "ricardian_contract": "CONTRACT FOR tokendapppub::claim## ACTION NAME: claim\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `name` (token name)* `name` (token name)\n* `sell` (whether to sell)* `sell` (whether to sell)\n\n### Intent### Intent\nThe primary purpose of this contract is to help DApp project owners claim their expired options. After the project owners claim their options, they could choose to sell the tokens as how the ordinary users do.The primary purpose of this contract is to help DApp project owners claim their expired options. After the project owners claim their options, they could choose to sell the tokens as how the ordinary users do.\n\n### Term### Term\nTERM. This Contract expires at the conclusion of code execution.TERM. This Contract expires at the conclusion of code execution.\n"
    },{
      "name": "newtoken",
      "type": "newtoken",
      "ricardian_contract": "#CONTRACT FOR tokendapppub::newtoken## ACTION NAME: newtoken\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `from` (token issuer)* `from` (token issuer)\n* `base_eos_quantity` (basic EOS fund pool)* `base_eos_quantity` (basic EOS fund pool)\n* `maximum_stake` (maxmiun token supply)* `maximum_stake` (maxmiun token supply)\n* `option_quantity` （option amount for the token project owner）* `option_quantity` （option amount for the token project owner）\n* `lock_up_period` (option lock period: seconds)* `lock_up_period` (option lock period: seconds)\n* `base_fee_percent` (minimum token selling fee)* `base_fee_percent` (minimum token selling fee)\n* `init_fee_percent` (initial token selling fee)* `init_fee_percent` (initial token selling fee)\n* `refer_fee` (referral fee when user buy the token)* `refer_fee` (referral fee when user buy the token)\n* `start_time` (time when the issuance of tokens)* `start_time` (time when the issuance of tokens)\n\n### Intent### Intent\nINTENT. The main purpose of this contract is for the DApp prject teams to issue their own tokens, and it will cost the platform tokens in the meantime.INTENT. The main purpose of this contract is for the DApp prject teams to issue their own tokens, and it will cost the platform tokens in the meantime.\n\n### Term### Term\nTERM. This Contract expires at the conclusion of code execution.TERM. This Contract expires at the conclusion of code execution.\n"
    },{
      "name": "transfer",
      "type": "transfer",
      "ricardian_contract": "# CONTRACT FOR tokendapppub::transfer## ACTION NAME: transfer\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `from` (token payer)* `from` (token payer)\n* `to` (token receiver)* `to` (token receiver)\n* `quantity` (token tranfer amount)* `quantity` (token tranfer amount)\n* `memo` (DApp project owner will be notified of the \"memo\" info and used it as parameters for convenience)* `memo` (DApp project owner will be notified of the \"memo\" info and used it as parameters for convenience)\n\n### Intent### Intent\nINTENT. The main purpose of this contract is to help users transfer the token.INTENT. The main purpose of this contract is to help users transfer the token.\n\n### Term### Term\nTERM. This Contract expires at the conclusion of code execution.TERM. This Contract expires at the conclusion of code execution.\n"
    },{
      "name": "receipt",
      "type": "receipt",
      "ricardian_contract": "# CONTRACT FOR tokendapppub::receipt## ACTION NAME: receipt\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `from` (user account name)* `from` (user account name)\n* `type` (buy or sell type)* `type` (buy or sell type)\n* `in` (quantity of token transfer in)* `in` (quantity of token transfer in)\n* `out` (quantity of token transfer out)* `out` (quantity of token transfer out)\n\n### Intent### Intent\nIntent. The main purpose of this contract is to help the user to get receipt feedback on action history. Only for buy and sell action now.Intent. The main purpose of this contract is to help the user to get receipt feedback on action history. Only for buy and sell action now.\n\n### Term### Term\nTERM. This Contract expires at the conclusion of code execution.TERM. This Contract expires at the conclusion of code execution.\n"
    },{
      "name": "detail",
      "type": "detail",
      "ricardian_contract": ""
    },{
      "name": "setreferfee",
      "type": "setreferfee",
      "ricardian_contract": ""
    },{
      "name": "settrans",
      "type": "settrans",
      "ricardian_contract": ""
    },{
      "name": "create",
      "type": "create",
      "ricardian_contract": ""
    },{
      "name": "issue",
      "type": "issue",
      "ricardian_contract": ""
    },{
      "name": "cleantable",
      "type": "cleantable",
      "ricardian_contract": ""
    },{
      "name": "airdrop",
      "type": "airdrop",
      "ricardian_contract": ""
    },{
      "name": "setairdrop",
      "type": "setairdrop",
      "ricardian_contract": ""
    }
  ],
  "tables": [{
      "name": "stat",
      "index_type": "i64",
      "key_names": [
        "supply"
      ],
      "key_types": [
        "asset"
      ],
      "type": "cur_stats"
    },{
      "name": "mkline",
      "index_type": "i64",
      "key_names": [
        "amount"
      ],
      "key_types": [
        "float64"
      ],
      "type": "minute_stat"
    },{
      "name": "hkline",
      "index_type": "i64",
      "key_names": [
        "amount"
      ],
      "key_types": [
        "float64"
      ],
      "type": "hour_stat"
    },{
      "name": "dkline",
      "index_type": "i64",
      "key_names": [
        "amount"
      ],
      "key_types": [
        "float64"
      ],
      "type": "day_stat"
    },{
      "name": "korders",
      "index_type": "i64",
      "key_names": [
        "account_name"
      ],
      "key_types": [
        "name"
      ],
      "type": "k_order"
    },{
      "name": "games",
      "index_type": "i64",
      "key_names": [
        "symbol"
      ],
      "key_types": [
        "symbol_type"
      ],
      "type": "st_game"
    },{
      "name": "refer",
      "index_type": "i64",
      "key_names": [
        "fee_percent"
      ],
      "key_types": [
        "uint64"
      ],
      "type": "st_refer"
    },{
      "name": "trans",
      "index_type": "i64",
      "key_names": [
        "trans"
      ],
      "key_types": [
        "uint64"
      ],
      "type": "st_trans"
    },{
      "name": "accounts",
      "index_type": "i64",
      "key_names": [
        "balance"
      ],
      "key_types": [
        "asset"
      ],
      "type": "account"
    }
  ],
  "ricardian_clauses": [{
      "id": "Warranty",
      "body": "WARRANTY. The invoker of the contract action shall uphold its Obligations under this Contract in a timely and workmanlike manner, using knowledge and recommendations for performing the services which meet generally acceptable standards set forth by EOS.IO Blockchain Block Producers.\n\n"
    },{
      "id": "Default",
      "body": "DEFAULT. The occurrence of any of the following shall constitute a material default under this Contract: \n\n"
    },{
      "id": "Remedies",
      "body": "REMEDIES. In addition to any and all other rights a party may have available according to law, if a party defaults by failing to substantially perform any provision, term or condition of this Contract, the other party may terminate the Contract by providing written notice to the defaulting party. This notice shall describe with sufficient detail the nature of the default. The party receiving such notice shall promptly be removed from being a Block Producer and this Contract shall be automatically terminated. \n  \n"
    },{
      "id": "Force Majeure",
      "body": "FORCE MAJEURE. If performance of this Contract or any obligation under this Contract is prevented, restricted, or interfered with by causes beyond either party's reasonable control (\"Force Majeure\"), and if the party unable to carry out its obligations gives the other party prompt written notice of such event, then the obligations of the party invoking this provision shall be suspended to the extent necessary by such event. The term Force Majeure shall include, without limitation, acts of God, fire, explosion, vandalism, storm or other similar occurrence, orders or acts of military or civil authority, or by national emergencies, insurrections, riots, or wars, or strikes, lock-outs, work stoppages, or supplier failures. The excused party shall use reasonable efforts under the circumstances to avoid or remove such causes of non-performance and shall proceed to perform with reasonable dispatch whenever such causes are removed or ceased. An act or omission shall be deemed within the reasonable control of a party if committed, omitted, or caused by such party, or its employees, officers, agents, or affiliates. \n  \n"
    },{
      "id": "Dispute Resolution",
      "body": "DISPUTE RESOLUTION. Any controversies or disputes arising out of or relating to this Contract will be resolved by binding arbitration under the default rules set forth by the EOS.IO Blockchain. The arbitrator's award will be final, and judgment may be entered upon it by any court having proper jurisdiction. \n  \n"
    },{
      "id": "Entire Agreement",
      "body": "ENTIRE AGREEMENT. This Contract contains the entire agreement of the parties, and there are no other promises or conditions in any other agreement whether oral or written concerning the subject matter of this Contract. This Contract supersedes any prior written or oral agreements between the parties. \n\n"
    },{
      "id": "Severability",
      "body": "SEVERABILITY. If any provision of this Contract will be held to be invalid or unenforceable for any reason, the remaining provisions will continue to be valid and enforceable. If a court finds that any provision of this Contract is invalid or unenforceable, but that by limiting such provision it would become valid and enforceable, then such provision will be deemed to be written, construed, and enforced as so limited. \n\n"
    },{
      "id": "Amendment",
      "body": "AMENDMENT. This Contract may be modified or amended in writing by mutual agreement between the parties, if the writing is signed by the party obligated under the amendment. \n\n"
    },{
      "id": "Governing Law",
      "body": "GOVERNING LAW. This Contract shall be construed in accordance with the Maxims of Equity. \n\n"
    },{
      "id": "Notice",
      "body": "NOTICE. Any notice or communication required or permitted under this Contract shall be sufficiently given if delivered to a verifiable email address or to such other email address as one party may have publicly furnished in writing, or published on a broadcast contract provided by this blockchain for purposes of providing notices of this type. \n"
    },{
      "id": "Waiver of Contractual Right",
      "body": "WAIVER OF CONTRACTUAL RIGHT. The failure of either party to enforce any provision of this Contract shall not be construed as a waiver or limitation of that party's right to subsequently enforce and compel strict compliance with every provision of this Contract. \n\n"
    },{
      "id": "Arbitrator's Fees to Prevailing Party",
      "body": "ARBITRATOR'S FEES TO PREVAILING PARTY. In any action arising hereunder or any separate action pertaining to the validity of this Agreement, both sides shall pay half the initial cost of arbitration, and the prevailing party shall be awarded reasonable arbitrator's fees and costs.\n  \n"
    },{
      "id": "Construction and Interpretation",
      "body": "CONSTRUCTION AND INTERPRETATION. The rule requiring construction or interpretation against the drafter is waived. The document shall be deemed as if it were drafted by both parties in a mutual effort. \n  \n"
    }
  ],
  "error_messages": [],
  "abi_extensions": [],
  "variants": []
}