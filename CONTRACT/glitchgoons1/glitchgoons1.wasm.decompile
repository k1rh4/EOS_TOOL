(data (i32.const 16896) "buy ggi \00\00\01\02\04\07\03\06\05\00")
(data (i32.const 16914) "issuer account does not exist\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 17035) "invalid symbol name\00")
(data (i32.const 17055) "token with symbol already exists\00")
(data (i32.const 17088) "must purchase a positive amount\00")
(data (i32.const 17120) "EOS\00")
(data (i32.const 17124) "only EOS allowed\00")
(data (i32.const 17141) ":\00")
(data (i32.const 17143) "invalid memo format.\00")
(data (i32.const 17164) "0\00")
(data (i32.const 17166) "can\'t get dna, item not found\00")
(data (i32.const 17196) "event does not exist\00")
(data (i32.const 17217) " event is not started\00")
(data (i32.const 17239) "total ggi must be positive\00")
(data (i32.const 17266) "GGI\00%llu\00")
(data (i32.const 17275) "to account does not exist\00")
(data (i32.const 17301) "quantity must be a whole number\00")
(data (i32.const 17333) "memo has more than 256 bytes\00")
(data (i32.const 17362) "name has more than 32 bytes\00")
(data (i32.const 17390) "dna is not number\00")
(data (i32.const 17408) "token with symbol does not exist. create token before issue\00")
(data (i32.const 17468) "invalid quantity\00")
(data (i32.const 17485) "must issue positive quantity of NFT\00")
(data (i32.const 17521) "symbol precision mismatch\00")
(data (i32.const 17547) "cannot transfer to self\00")
(data (i32.const 17571) "token with specified ID does not exist\00: no conversion\00")
(data (i32.const 17626) "sender does not own token with specified ID\00: out of range\00")
(data (i32.const 17685) "rate can\'t be less or equals zero\00")
(data (i32.const 17719) "start event date is not valid. allowed format: dd.mm\00")
(data (i32.const 17772) "end event date is not valid. allowed format: dd.mm\00")
(data (i32.const 17823) "no balance object found\00")
(data (i32.const 17847) "overdrawn balance\00")
(data (i32.const 17865) "string is too long to be a valid symbol_code\00")
(data (i32.const 17910) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17963) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18012) "chrstmas\00")
(data (i32.const 18021) "melee\00")
(data (i32.const 18027) "1263674378701611466752\00")
(data (i32.const 18050) "ranged\00")
(data (i32.const 18057) "1263674378770330943488\00")
(data (i32.const 18080) "armor\00")
(data (i32.const 18086) "1263674378839050420224\00")
(data (i32.const 18109) "helmet\00")
(data (i32.const 18116) "1263674378907769896960\00")
(data (i32.const 18139) "legs\00")
(data (i32.const 18144) "1263674378976489373696\00")
(data (i32.const 18167) "gloves\00")
(data (i32.const 18174) "1263674379045208850432\00")
(data (i32.const 18197) "boots\00")
(data (i32.const 18203) "1263674379113928327168\00")
(data (i32.const 18226) "necklace\00")
(data (i32.const 18235) "1263674379182647803904\00")
(data (i32.const 18258) "mods\00")
(data (i32.const 18263) "1263674379251367280640\00")
(data (i32.const 18286) "string is too long to be a valid name\00")
(data (i32.const 18324) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 18391) "character is not in allowed character set for names\00")
(data (i32.const 18443) ".\00")
(data (i32.const 18445) "31.12\00")
(data (i32.const 18451) "1.1\00")
(data (i32.const 18455) "active")
(data (i32.const 18461) "glitchgoons1")
(data (i32.const 18473) "issueggi")
(data (i32.const 18481) "write\00")
(data (i32.const 18487) "eosio.token")
(data (i32.const 18498) "transfer")
(data (i32.const 18506) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18557) "error reading iterator\00")
(data (i32.const 18580) "read\00")
(data (i32.const 18585) "cannot create objects in table of another contract\00")
(data (i32.const 18636) "get\00")
(data (i32.const 18640) "cannot pass end iterator to modify\00")
(data (i32.const 18675) "object passed to modify is not in multi_index\00")
(data (i32.const 18721) "cannot modify objects in table of another contract\00")
(data (i32.const 18772) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18831) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18883) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18937) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18985) "object passed to erase is not in multi_index\00")
(data (i32.const 19030) "cannot erase objects in table of another contract\00")
(data (i32.const 19080) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19133) "attempt to subtract asset with different symbol\00")
(data (i32.const 19181) "subtraction underflow\00")
(data (i32.const 19203) "subtraction overflow\00")
(data (i32.const 19224) "attempt to add asset with different symbol\00")
(data (i32.const 19267) "addition underflow\00")
(data (i32.const 19286) "addition overflow\00")
(data (i32.const 19312) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 19392) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "is_account" (func $fimport$1 (param i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$7 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "current_time" (func $fimport$8 (result i64)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$10 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$11 (param i32 i64 i32)))
(import "env" "require_recipient" (func $fimport$12 (param i64)))
(import "env" "db_remove_i64" (func $fimport$13 (param i32)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$15 (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$20 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$24 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$35 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$36 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$37 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$39 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$41 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$42 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$43 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $43))
(export "_ZdlPv" (func $71))
(export "_Znwj" (func $69))
(export "_Znaj" (func $70))
(export "_ZdaPv" (func $72))
(export "_ZnwjSt11align_val_t" (func $73))
(export "_ZnajSt11align_val_t" (func $74))
(export "_ZdlPvSt11align_val_t" (func $75))
(export "_ZdaPvSt11align_val_t" (func $76))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $2 $5 $32 $26 $13 $36 $1 $101 $103)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19649))
(global $global$2 i32 (i32.const 19649))


void .FUNC $98 (int_32 $0)
{
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $114([8216])
	$3 = *([0] + [8224])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8232]
	*([0] + [8224]) = [8232]
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $121([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8224])
	*([0] + [8224]) = $3
	*([0] + [8228]) = [0]
	
.LABEL $label$2
	*([0] + [8228]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $115([8216])
	return [0]
	
.LABEL $label$1
	CALL $115([8216])
	return [-1]
}

void .FUNC $94 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $95 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $96 (int_32 $0)
{
	return (($0 + [-48]) <= [10])
}

int_32 .FUNC $97 ()
{
	return [8208]
}

void .FUNC $90 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $12($1, $0, [17670])
	CALL $93()
	(unreachable)
}

void .FUNC $91 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $12($1, $0, [17610])
	CALL $94()
	(unreachable)
}

void .FUNC $92 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $83(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $104(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [17270], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $83(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $83(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $93 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $115 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16884])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16692]
	$3 = (((int_32)$1 * (int_32)[12]) + [16692])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $119([8500], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $120 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8492]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8496])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8492]) = [1]
	$2 = ($2 << [16])
	*([0] + [8496]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8496])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8496]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8492]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8492]) = [1]
	$3 = ($3 << [16])
	*([0] + [8496]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8496])
	
.LABEL $label$10
	*([0] + [8496]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $118($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [4]) = $1
	*($2) = $1
	*($2 + [8]) = ($1 + $3)
	CALL $42($2, $0)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $49 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $118($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [104]) + [24])) = (int_64)0
	*((($4 + [104]) + [40])) = [0]
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $5)
	*($4 + [192]) = ($4 + [88])
	*($4 + [16]) = ($4 + [104])
	CALL $55(($4 + [16]), ($4 + [192]))
	*(($3 = ($4 + [8]))) = *($4 + [96])
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4)
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [176])
	*($4 + [32]) = $1
	*($4 + [192]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($3 = ($4 + [72]))) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*($4 + [48]) = $0
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [16])
	CALL $56(($4 + [192]), ($4 + [104]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $122($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [72]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [144])))
	
.LABEL $label$11
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $48 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $118($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [120])) = (int_64)0
	*(($4 + [136])) = (int_64)0
	*((($4 + [104]) + [40])) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [92]) = $2
	*($4 + [88]) = $2
	*($4 + [96]) = ($2 + $5)
	*($4 + [192]) = ($4 + [88])
	*($4 + [16]) = ($4 + [104])
	CALL $51(($4 + [16]), ($4 + [192]))
	*(($3 = ($4 + [8]))) = *($4 + [96])
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4)
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [176])
	*($4 + [32]) = $1
	*($4 + [192]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($3 = ($4 + [72]))) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*($4 + [48]) = $0
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [16])
	CALL $52(($4 + [192]), ($4 + [104]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $122($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [72]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((*($4 + [140]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [148])))
	
.LABEL $label$11
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [136])))
	
.LABEL $label$12
	$global$0 = ($4 + [208])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL memory()
	*($3 + [116]) = [11]
	*($3 + [112]) = [18487]
	*($3 + [56]) = *($3 + [112])
	CALL $7(($3 + [120]), ($3 + [56]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [116]) = [8]
	*($3 + [112]) = [18498]
	*($3 + [48]) = *($3 + [112])
	CALL $7(($3 + [120]), ($3 + [48]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	CALL $37($0, $1)
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	if ( ((int_64)$2 > (int_64)8516769789752901631) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-4417277336810946560) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-3617168760270340096) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$2 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [1]
	*($3) = *($3 + [104])
	CALL $44($1, $1, $3)
	goto $label$2 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)8516769944371724288) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8516770002588663808) ){ goto $label$2 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [2]
	*($3 + [16]) = *($3 + [88])
	CALL $45($1, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [84]) = [0]
	*($3 + [80]) = [3]
	*($3 + [24]) = *($3 + [80])
	CALL $46($1, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$5
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [40]) = *($3 + [64])
	CALL $47($1, $1, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [100]) = [0]
	*($3 + [96]) = [5]
	*($3 + [8]) = *($3 + [96])
	CALL $48($1, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [76]) = [0]
	*($3 + [72]) = [6]
	*($3 + [32]) = *($3 + [72])
	CALL $49($1, $1, ($3 + [32]))
	
.LABEL $label$2
	CALL $98([0])
	$global$0 = ($3 + [128])
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18580])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18580])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18580])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18580])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $50($0, ($1 + [32]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $39($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18481])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18481])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $59(CALL $58($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18481])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18481])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $47 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $118($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [144])) = [0]
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [104]) = ($2 + $5)
	*($4 + [96]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [18580])
	CALL memcpy(($4 + [112]), $2, [8])
	$3 = ($5 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [18580])
	CALL memcpy((($4 + [112]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [18580])
	CALL memcpy((($4 + [112]) + [16]), ($2 + [16]), [8])
	*($4 + [100]) = ($2 + [24])
	CALL $50(($4 + [96]), (($4 + [112]) + [24]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [104])
	*($4 + [8]) = *($4 + [96])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [176])
	*($4 + [40]) = $1
	*($4 + [192]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($3 = ($4 + [80]))) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*($4 + [56]) = $0
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [24])
	CALL $57(($4 + [192]), ($4 + [112]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $122($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [144])))
	
.LABEL $label$11
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $118($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [112]) + [24])) = (int_64)0
	*(($4 + [144])) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $5)
	CALL $50(($4 + [96]), ($4 + [112]))
	CALL eosio_assert(((uint_32)(*($4 + [104]) - *($4 + [100])) > (uint_32)[3]), [18580])
	CALL memcpy(($4 + [124]), *($4 + [100]), [4])
	*($4 + [100]) = (*($4 + [100]) + [4])
	CALL $50(($4 + [96]), ($4 + [128]))
	CALL $50(($4 + [96]), ($4 + [140]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [104])
	*($4 + [8]) = *($4 + [96])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [176])
	*($4 + [40]) = $1
	*($4 + [192]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($3 = ($4 + [80]))) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*($4 + [56]) = $0
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [24])
	CALL $54(($4 + [192]), ($4 + [112]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $122($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( (*($4 + [140]) & [1]) ){ goto $label$15 }
	if ( (*($4 + [128]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [148])))
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($4 + [136])))
	$2 = [1]
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$2 = [1]
	if ( (*($4 + [112]) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	$global$0 = ($4 + [208])
	return $2
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [120])))
	$global$0 = ($4 + [208])
	return $2
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [208])
	$global$0 = $3
	*(($4 = $3) + [152]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $118($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [112]) + [16]))) = (int_64)0
	*(($4 + [144])) = [0]
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [104]) = ($2 + $5)
	*($4 + [96]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [18580])
	CALL memcpy(($4 + [112]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [18580])
	CALL memcpy((($4 + [112]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [18580])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*($4 + [100]) = ($2 + [24])
	CALL $50(($4 + [96]), (($4 + [112]) + [24]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [104])
	*($4 + [8]) = *($4 + [96])
	$3 = *($3)
	*((($4 + [160]) + [8])) = $3
	*(($6 = (($4 + [176]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [176]) = $7
	*($4 + [160]) = $7
	$3 = *($6)
	*((($4 + [192]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [176])
	*($4 + [40]) = $1
	*($4 + [192]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($3 = ($4 + [80]))) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*($4 + [56]) = $0
	*($4 + [196]) = ($4 + [152])
	*($4 + [192]) = ($4 + [24])
	CALL $53(($4 + [192]), ($4 + [112]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $122($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [80]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [144])))
	
.LABEL $label$11
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $118($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [120])) = [0]
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [96]) = ($2 + $7)
	*($4 + [88]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18580])
	CALL memcpy(($4 + [104]), $2, [8])
	*($4 + [92]) = ($2 + [8])
	$8 = (($4 + [104]) + [8])
	CALL $50(($4 + [88]), $8)
	*(($3 = ($4 + [8]))) = *($4 + [96])
	*($4) = *($4 + [88])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($9 = (($4 + [144]) + [8]))) = $3
	$10 = *($4)
	*($4 + [144]) = $10
	*($4 + [128]) = $10
	$3 = *($9)
	*((($4 + [160]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [144])
	*($4 + [32]) = $1
	*($4 + [160]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*($4 + [48]) = $0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$0 = *($4 + [104])
	$8 = CALL $78(($4 + [144]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $78(($4 + [160]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [160]) & [1]) ){ goto $label$13 }
	if ( (*($4 + [144]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [144]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	
.LABEL $label$10
	$5 = *(($4 + [72]))
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $122($2)
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($7 + [40])))
	
.LABEL $label$18
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [72]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $5
	
.LABEL $label$14
	*($6) = $5
	CALL _ZdlPv($2)
	$2 = [1]
	if ( (*($4 + [112]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [120])))
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$6 = $5
	
.LOOP $label$3:
	$6 = ($6 + [-24])
	$7 = *($6)
	$8 = *($7)
	if ( ($8 & [1]) ){ goto $label$5 }
	$8 = uint_32($8 >> [1])
	$7 = ($7 + [1])
	goto $label$4 
	
.LABEL $label$5
	$8 = *($7 + [4])
	$7 = *($7 + [8])
	
.LABEL $label$4
	*($3 + [20]) = $8
	*($3 + [16]) = $7
	*($3 + [8]) = *($3 + [16])
	CALL $7(($3 + [24]), ($3 + [8]))
	if ( ((int_64)*($3 + [24]) == (int_64)$2) ){ goto $label$1 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = $4
	
.LABEL $label$1
	if ( ((int_32)$5 == (int_32)*(($1 + [24]))) ){ goto $label$7 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$1), [18506])
	*($0 + [4]) = $6
	goto $label$6 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6256974190071513088, $2)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$8 }
	$6 = CALL $15($1, $6)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$1), [18506])
	*($0 + [4]) = $6
	goto $label$6 
	
.LABEL $label$8
	*($0 + [4]) = [0]
	
.LABEL $label$6
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$3 = ((uint_64)$1 / (uint_64)(int_64)86400)
	$4 = ((int_64)$3 * (int_64)-24)
	$5 = ((uint_64)$1 / (uint_64)(int_64)3600)
	$6 = ((int_64)$5 * (int_64)-60)
	$7 = ((uint_64)$1 / (uint_64)(int_64)60)
	$8 = ((int_64)$7 * (int_64)-60)
	$9 = (int_64)4
	$10 = [1970]
	$11 = (int_64)0
	$12 = (int_64)-1970
	$13 = (int_64)1970
	
.LOOP $label$2:
	$16 = ((uint_64)$13 / (uint_64)(int_64)100)
	$17 = ((uint_64)$13 / (uint_64)(int_64)400)
	$14 = [0]
	$15 = (int_64)365
	if ( ((int_64)((int_64)((int_64)$11 + (int_64)1970) & (int_64)3) == (int_64)0) ){ goto $label$4 }
	if ( ((uint_64)$3 >= (uint_64)(int_64)365) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$14 = (((int_64)((int_64)((int_64)$16 * (int_64)100) + (int_64)-1970) != (int_64)$11) | (int_64)(((int_64)$12 + (int_64)((int_64)$17 * (int_64)400)) == 0))
	$15 = ( (int_64)366 ? (int_64)365 : $14 )
	if ( (uint_64)($3 <= $15) ){ goto $label$1 }
	
.LABEL $label$3
	$9 = ((int_64)( (int_64)2 ? (int_64)1 : $14 ) + (int_64)$9)
	$9 = ( ((int_64)$9 + (int_64)-7) ? $9 : ((uint_64)$9 > (uint_64)(int_64)6) )
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$12 + (int_64)-1)
	$10 = ($10 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$3 = (int_64))($3 - $15)
	goto $label$2 
	
.LABEL $label$1
	*($2 + [28]) = $3
	$11 = ((int_64)$4 + (int_64)$5)
	$12 = ((int_64)$6 + (int_64)$7)
	$15 = ((int_64)$8 + (int_64)$1)
	$9 = ((uint_64)((int_64)$9 + (int_64)$3) % (uint_64)(int_64)7)
	$18 = (uint_64)($3 <= (int_64)31)
	$13 = (int_64))($3 - ( (int_64)0 ? (int_64)31 : $18 ))
	if ( ($18 == 0) ){ goto $label$6 }
	$14 = [1]
	goto $label$5 
	
.LABEL $label$6
	$18 = (uint_64)($13 <= $3)
	$3 = ( (int_64)29 ? (int_64)28 : $14 )
	$13 = (int_64))($13 - ( (int_64)0 ? $3 : $18 ))
	$14 = [2]
	if ( $18 ){ goto $label$5 }
	$18 = (uint_64)($13 <= (int_64)31)
	$13 = (int_64))($13 - ( (int_64)0 ? (int_64)31 : $18 ))
	$14 = [3]
	if ( $18 ){ goto $label$5 }
	$18 = (uint_64)($13 <= (int_64)30)
	$13 = (int_64))($13 - ( (int_64)0 ? (int_64)30 : $18 ))
	$14 = [4]
	if ( $18 ){ goto $label$5 }
	$18 = (uint_64)($13 <= (int_64)31)
	$13 = (int_64))($13 - ( (int_64)0 ? (int_64)31 : $18 ))
	$14 = [5]
	if ( $18 ){ goto $label$5 }
	$18 = (uint_64)($13 <= (int_64)30)
	$13 = (int_64))($13 - ( (int_64)0 ? (int_64)30 : $18 ))
	$14 = [6]
	if ( $18 ){ goto $label$5 }
	$18 = (uint_64)($13 <= (int_64)31)
	$13 = (int_64))($13 - ( (int_64)0 ? (int_64)31 : $18 ))
	$14 = [7]
	if ( $18 ){ goto $label$5 }
	$18 = (uint_64)($13 <= (int_64)31)
	$13 = (int_64))($13 - ( (int_64)0 ? (int_64)31 : $18 ))
	$14 = [8]
	if ( $18 ){ goto $label$5 }
	$18 = (uint_64)($13 <= (int_64)30)
	$13 = (int_64))($13 - ( (int_64)0 ? (int_64)30 : $18 ))
	$14 = [9]
	if ( $18 ){ goto $label$5 }
	$18 = (uint_64)($13 <= (int_64)31)
	$13 = (int_64))($13 - ( (int_64)0 ? (int_64)31 : $18 ))
	$14 = [10]
	if ( $18 ){ goto $label$5 }
	$18 = (uint_64)($13 <= (int_64)30)
	$13 = (int_64))($13 - ( (int_64)0 ? (int_64)30 : $18 ))
	$14 = [11]
	if ( $18 ){ goto $label$5 }
	$18 = (uint_64)($13 <= (int_64)31)
	$14 = ( [12] ? [13] : $18 )
	$13 = (int_64))($13 - ( (int_64)0 ? (int_64)31 : $18 ))
	
.LABEL $label$5
	*($2 + [4]) = $12
	*($2) = $15
	*($2 + [8]) = $11
	*($2 + [16]) = $14
	*($2 + [20]) = $10
	*($2 + [24]) = $9
	*($2 + [12]) = ((CASTING uint_32)(uint_64 $13) + [1])
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( (CALL $88($1, [18012]) == 0) ){ goto $label$37 }
	$1 = *($2)
	$3 = CALL $113([18021])
	if ( ((int_32)$3 != (int_32)( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$38 }
	if ( (CALL $87($2, [0], [-1], [18021], $3) == 0) ){ goto $label$36 }
	
.LABEL $label$38
	$1 = *($2)
	$3 = ($2 + [4])
	$4 = CALL $113([18050])
	if ( ((int_32)$4 != (int_32)( *($3) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$39 }
	if ( (CALL $87($2, [0], [-1], [18050], $4) == 0) ){ goto $label$35 }
	
.LABEL $label$39
	$1 = *($2)
	$4 = CALL $113([18080])
	if ( ((int_32)$4 != (int_32)( *($3) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$40 }
	if ( (CALL $87($2, [0], [-1], [18080], $4) == 0) ){ goto $label$34 }
	
.LABEL $label$40
	$1 = *($2)
	$3 = ($2 + [4])
	$4 = CALL $113([18109])
	if ( ((int_32)$4 != (int_32)( *($3) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$41 }
	if ( (CALL $87($2, [0], [-1], [18109], $4) == 0) ){ goto $label$33 }
	
.LABEL $label$41
	$1 = *($2)
	$4 = CALL $113([18139])
	if ( ((int_32)$4 != (int_32)( *($3) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$42 }
	if ( (CALL $87($2, [0], [-1], [18139], $4) == 0) ){ goto $label$30 }
	
.LABEL $label$42
	$1 = *($2)
	$3 = ($2 + [4])
	$4 = CALL $113([18167])
	if ( ((int_32)$4 != (int_32)( *($3) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$43 }
	if ( (CALL $87($2, [0], [-1], [18167], $4) == 0) ){ goto $label$26 }
	
.LABEL $label$43
	$1 = *($2)
	$4 = CALL $113([18197])
	if ( ((int_32)$4 != (int_32)( *($3) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$44 }
	if ( (CALL $87($2, [0], [-1], [18197], $4) == 0) ){ goto $label$22 }
	
.LABEL $label$44
	$1 = *($2)
	$3 = ($2 + [4])
	$4 = CALL $113([18226])
	if ( ((int_32)$4 != (int_32)( *($3) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$45 }
	if ( (CALL $87($2, [0], [-1], [18226], $4) == 0) ){ goto $label$18 }
	
.LABEL $label$45
	$1 = *($2)
	$4 = CALL $113([18258])
	if ( ((int_32)$4 != (int_32)( *($3) ? uint_32($1 >> [1]) : ($1 & [1]) )) ){ goto $label$37 }
	if ( (CALL $87($2, [0], [-1], [18258], $4) == 0) ){ goto $label$14 }
	
.LABEL $label$37
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $113([17164])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$48 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$3 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$47
	CALL memcpy($1, [17164], $2)
	
.LABEL $label$46
	*(($1 + $2)) = [0]
	return 
	
.LABEL $label$36
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $113([18027])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$32 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$31 }
	*(($1 + $2)) = [0]
	return 
	
.LABEL $label$35
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $113([18057])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$29 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$34
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $113([18086])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$25 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$33
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $113([18116])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$21 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$32
	$3 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$31
	CALL memcpy($1, [18027], $2)
	*(($1 + $2)) = [0]
	return 
	
.LABEL $label$30
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $113([18144])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$17 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$29
	$3 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$28
	CALL memcpy($1, [18057], $2)
	
.LABEL $label$27
	*(($1 + $2)) = [0]
	return 
	
.LABEL $label$26
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $113([18174])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$13 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$25
	$3 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$24
	CALL memcpy($1, [18086], $2)
	
.LABEL $label$23
	*(($1 + $2)) = [0]
	return 
	
.LABEL $label$22
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $113([18203])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$21
	$3 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$20
	CALL memcpy($1, [18116], $2)
	
.LABEL $label$19
	*(($1 + $2)) = [0]
	return 
	
.LABEL $label$18
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $113([18235])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$17
	$3 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$16
	CALL memcpy($1, [18144], $2)
	
.LABEL $label$15
	*(($1 + $2)) = [0]
	return 
	
.LABEL $label$14
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$2 = CALL $113([18263])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$13
	$3 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$12
	CALL memcpy($1, [18174], $2)
	
.LABEL $label$11
	*(($1 + $2)) = [0]
	return 
	
.LABEL $label$10
	$3 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$9
	CALL memcpy($1, [18203], $2)
	
.LABEL $label$8
	*(($1 + $2)) = [0]
	return 
	
.LABEL $label$7
	$3 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$6
	CALL memcpy($1, [18235], $2)
	
.LABEL $label$5
	*(($1 + $2)) = [0]
	return 
	
.LABEL $label$4
	$3 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, [18263], $2)
	
.LABEL $label$2
	*(($1 + $2)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $77($0)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [18286])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [18391])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [18324])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [18391])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $5 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$4 = ($global$0 - [352])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = (int_64)0
	$6 = *($2)
	CALL eosio_assert(((int_64)$6 > (int_64)0), [17088])
	$7 = CALL $113([17120])
	if ( ($7 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [17865])
	goto $label$2 
	
.LABEL $label$3
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = (int_64)0
	
.LOOP $label$4:
	$8 = *(($7 + [17119]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [17910])
	
.LABEL $label$5
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$4 }
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)4)), [17124])
	$7 = *($3)
	if ( ($7 & [1]) ){ goto $label$11 }
	$7 = uint_32($7 >> [1])
	$9 = ($3 + [1])
	$8 = CALL $113([17141])
	if ( ($8 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$7 = *($3 + [4])
	$9 = *($3 + [8])
	$8 = CALL $113([17141])
	if ( $8 ){ goto $label$9 }
	
.LABEL $label$10
	$9 = [0]
	$8 = [1]
	$7 = *($3)
	if ( (($7 & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$10 = ($9 + $7)
	if ( ((int_32)$7 < (int_32)$8) ){ goto $label$13 }
	$2 = $9
	
.LOOP $label$14:
	$7 = (($7 - $8) + [1])
	if ( ($7 == 0) ){ goto $label$13 }
	$7 = CALL $111($2, [58], $7)
	if ( ($7 == 0) ){ goto $label$13 }
	if ( (CALL $112($7, [17141], $8) == 0) ){ goto $label$12 }
	$2 = ($7 + [1])
	$7 = ($10 - $2)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$14 }
	
.LABEL $label$13
	$7 = $10
	
.LABEL $label$12
	$9 = ( [-1] ? ($7 - $9) : ((int_32)$7 == (int_32)$10) )
	$8 = [1]
	$7 = *($3)
	if ( ($7 & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = uint_32($7 >> $8)
	$11 = ($3 + $8)
	goto $label$6 
	
.LABEL $label$7
	$7 = *($3 + [4])
	$11 = *($3 + [8])
	
.LABEL $label$6
	$2 = [0]
	$12 = ($8 & [1])
	$8 = *([0] + [8192])
	$8 = ( *([0] + [8196]) ? uint_32($8 >> [1]) : $12 )
	if ( ($8 == 0) ){ goto $label$15 }
	$10 = ($11 + $7)
	if ( ((int_32)$7 < (int_32)$8) ){ goto $label$17 }
	$13 = ( *([0] + [8200]) ? [8193] : $12 )
	$12 = *($13)
	$2 = $11
	
.LOOP $label$18:
	$7 = (($7 - $8) + [1])
	if ( ($7 == 0) ){ goto $label$17 }
	$7 = CALL $111($2, $12, $7)
	if ( ($7 == 0) ){ goto $label$17 }
	if ( (CALL $112($7, $13, $8) == 0) ){ goto $label$16 }
	$2 = ($7 + [1])
	$7 = ($10 - $2)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = $10
	
.LABEL $label$16
	$2 = ( [-1] ? ($7 - $11) : ((int_32)$7 == (int_32)$10) )
	
.LABEL $label$15
	CALL eosio_assert((((int_32)$9 != (int_32)[-1]) & ((int_32)$2 != (int_32)[-1])), [17143])
	*(($4 + [296])) = [0]
	*($4 + [280]) = (int_64)-1
	*($4 + [288]) = (int_64)0
	$5 = *($0 + [8])
	*($4 + [264]) = $5
	*($4 + [272]) = $5
	$2 = CALL $79(($4 + [248]), $3, ($9 + [1]), [-1], $3)
	$7 = *([0] + [8192])
	$7 = ( *([0] + [8196]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$8 = *($3)
	if ( ($8 & [1]) ){ goto $label$20 }
	$8 = uint_32($8 >> [1])
	goto $label$19 
	
.LABEL $label$20
	$8 = *($3 + [4])
	
.LABEL $label$19
	$8 = CALL $78(($4 + [184]), $2)
	$8 = *($4 + [248])
	$10 = CALL $79(($4 + [232]), $3, $7, ((($8 + [-1]) - $7) - ( *($2 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )), $3)
	$7 = CALL $78(($4 + [200]), $10)
	CALL $6(($4 + [216]), $7, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$21
	if ( ((*($7) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$22
	$7 = [1]
	$8 = *($4 + [216])
	$3 = CALL $113([17164])
	if ( ((int_32)$3 != (int_32)( *($4 + [220]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$23 }
	$7 = ((int_32)CALL $87(($4 + [216]), [0], [-1], [17164], $3) != (int_32)[0])
	
.LABEL $label$23
	CALL eosio_assert($7, [17166])
	$7 = *($4 + [232])
	$8 = ($7 & [1])
	*($4 + [168]) = ( *($10 + [8]) ? ($10 + [1]) : $8 )
	*($4 + [172]) = ( *($10 + [4]) ? uint_32($7 >> [1]) : $8 )
	*($4 + [40]) = *($4 + [168])
	CALL $8(($4 + [176]), ($4 + [264]), *(CALL $7(($4 + [304]), ($4 + [40]))))
	CALL eosio_assert(((int_32)*($4 + [180]) != (int_32)[0]), [17196])
	$7 = *($4 + [180])
	CALL $9(($4 + [160]), ((int_64)((uint_64)CALL $fimport$8() / (uint_64)(int_64)1000000) & (int_64)4294967295), ($4 + [304]))
	*($4 + [160]) = *($4 + [316 align=4])
	$8 = CALL $78(($4 + [136]), ($7 + [16]))
	CALL $10(($4 + [152]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$24
	$8 = CALL $78(($4 + [112]), ($7 + [28]))
	CALL $10(($4 + [128]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$25
	$5 = *($4 + [152])
	*($4 + [104]) = $5
	$14 = *($4 + [128])
	*($4 + [96]) = $14
	*($4 + [32]) = $5
	*($4 + [24]) = $14
	$8 = CALL $11(($4 + [160]), ($4 + [32]), ($4 + [24]))
	CALL $12(($4 + [304]), $7, [17217])
	CALL eosio_assert($8, ( *($4 + [312]) ? (($4 + [304]) | [1]) : (*($4 + [304]) & [1]) ))
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($4 + [312])))
	
.LABEL $label$26
	$5 = ((int_64)$6 / (int_64)*($7 + [12]))
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 $5) > (int_32)[0]), [17239])
	$14 = (int_64)((int_64)$5 << (int_64)32) >> (int_64)32)
	$7 = CALL $113([17266])
	if ( ($7 <= [8]) ){ goto $label$30 }
	CALL eosio_assert([0], [17865])
	goto $label$29 
	
.LABEL $label$30
	if ( ($7 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	$6 = (int_64)0
	
.LOOP $label$31:
	$8 = *(($7 + [17265]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$32 }
	CALL eosio_assert([0], [17910])
	
.LABEL $label$32
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$31 }
	goto $label$27 
	
.LABEL $label$28
	$6 = (int_64)0
	
.LABEL $label$27
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17963])
	$5 = ((int_64)$6 & (int_64)72057594037927935)
	$15 = ((int_64)$6 << (int_64)8)
	$7 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$5 = $6
	$8 = [1]
	$3 = $7
	$7 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	$5 = $6
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$3 = ($7 + [1])
	$7 = $3
	if ( $8 ){ goto $label$37 }
	$8 = [1]
	$7 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$8 = [0]
	
.LABEL $label$33
	CALL eosio_assert($8, [17035])
	*($4 + [88]) = $15
	*($4 + [80]) = $14
	$7 = CALL $78(($4 + [64]), ($4 + [216]))
	$8 = CALL $78(($4 + [48]), $2)
	*(($4 + [16])) = *($4 + [88])
	*($4 + [8]) = *($4 + [80])
	CALL $13($0, $1, ($4 + [8]), $7, $8)
	if ( (*($8) & [1]) ){ goto $label$46 }
	if ( (*($7) & [1]) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$44 }
	
.LABEL $label$45
	CALL _ZdlPv(*($7 + [8]))
	$7 = [1]
	if ( ((*($4 + [216]) & [1]) == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$7 = [1]
	if ( (*($4 + [216]) & [1]) ){ goto $label$42 }
	
.LABEL $label$43
	if ( (*($4 + [232]) & $7) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	CALL _ZdlPv(*($4 + [224]))
	if ( ((*($4 + [232]) & $7) == 0) ){ goto $label$40 }
	
.LABEL $label$41
	CALL _ZdlPv(*(($10 + [8])))
	if ( (*($4 + [248]) & [1]) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	if ( ((*($4 + [248]) & [1]) == 0) ){ goto $label$38 }
	
.LABEL $label$39
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$38
	CALL $14(($4 + [288]))
	$global$0 = ($4 + [352])
}

void .FUNC $2 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$1($1), [16914])
	if ( (*($2) & [1]) ){ goto $label$5 }
	$4 = ($2 + [1])
	$2 = CALL $113($4)
	if ( ((uint_32)$2 >= (uint_32)[8]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($2 + [8])
	$2 = CALL $113($4)
	if ( ($2 <= [8]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [17865])
	goto $label$2 
	
.LABEL $label$3
	if ( $2 ){ goto $label$2 }
	$5 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = (($4 + $2) + [-1])
	$7 = *($6)
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17910])
	$7 = *($6)
	
.LABEL $label$7
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$1
	CALL eosio_assert([1], [17963])
	$8 = ((int_64)$5 << (int_64)8)
	$2 = [0]
	$9 = ((int_64)$5 & (int_64)72057594037927935)
	$5 = $9
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$5 = $10
	$7 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$5 = $10
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [17035])
	$2 = [0]
	$5 = $9
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$5 = $10
	$7 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$5 = $10
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $7 ){ goto $label$17 }
	$7 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	
.LABEL $label$13
	CALL eosio_assert($7, [17035])
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = [0]
	$5 = *($0)
	*($3) = $5
	*($3 + [8]) = $9
	$2 = [1]
	$7 = CALL db_find_i64($5, $9, (int_64)-4157508551318700032, $9)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*(CALL $3($3, $7) + [24]) == (int_32)$3), [18506])
	$2 = [0]
	
.LABEL $label$18
	CALL eosio_assert($2, [17055])
	$5 = *($0)
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$4()), [18585])
	*(($2 = CALL _Znwj([40])) + [24]) = $3
	*($2 + [8]) = $8
	*($2) = (int_64)0
	*($2 + [16]) = $1
	CALL eosio_assert([1], [18481])
	CALL memcpy(($3 + [48]), $2, [8])
	*($3 + [72]) = *($2 + [8])
	CALL eosio_assert([1], [18481])
	CALL memcpy((($3 + [48]) | [8]), ($3 + [72]), [8])
	CALL eosio_assert([1], [18481])
	$7 = ($2 + [16])
	CALL memcpy((($3 + [48]) + [16]), $7, [8])
	$10 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$6 = ($3 + [8])
	*($2 + [28]) = CALL db_store_i64(*($6), (int_64)-4157508551318700032, $5, $10), ($3 + [48]), [24])
	$4 = ($3 + [16])
	if ( (uint_64)($10 <= *($4)) ){ goto $label$19 }
	*($4) = ((int_64)$10 + (int_64)1)
	
.LABEL $label$19
	$4 = ($2 + [8])
	$10 = *($4)
	$9 = *($6)
	*($3 + [72]) = *($7)
	*($2 + [32]) = CALL db_idx64_store($9, (int_64)-4157508551318700032, $5, (uint_64)$10 >> (uint_64)(int_64)8), ($3 + [72]))
	*($3 + [72]) = $2
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8
	*($3 + [48]) = $5)
	$6 = *(($2 + [28]))
	*($3 + [44]) = $6
	$4 = ($3 + [28])
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)*(($3 + [32]))) ){ goto $label$22 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($3 + [72]) = [0]
	*($7) = $2
	*($4) = ($7 + [24])
	$2 = *($3 + [72])
	*($3 + [72]) = [0]
	if ( $2 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL $4(($3 + [24]), ($3 + [72]), ($3 + [48]), ($3 + [44]))
	$2 = *($3 + [72])
	*($3 + [72]) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv($2)
	
.LABEL $label$20
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$23 }
	$4 = ($3 + [28])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$25 }
	
.LOOP $label$26:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$27 }
	CALL _ZdlPv($7)
	
.LABEL $label$27
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$26 }
	$2 = *(($3 + [24]))
	goto $label$24 
	
.LABEL $label$25
	$2 = $6
	
.LABEL $label$24
	*($4) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$23
	$global$0 = ($3 + [80])
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18557])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $118($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18580])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [18580])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	*($5 + [8]) = *($3 + [24])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [18580])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [32]) = [-1]
	*($5 + [28]) = $1
	*($3 + [16]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [24]) = $7)
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [16]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $4(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $122($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC memory ()
{
	CALL $68()
}

void .FUNC $1 (int_32 $0)
{
	if ( ((*([0] + [8192]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8200]))
	
.LABEL $label$1
}

int_32 .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [36])))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [24])))
	if ( (*($3) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18557])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $118($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([52])) + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = $0
	CALL $50(($3 + [16]), $5)
	CALL eosio_assert(((uint_32)(*($3 + [24]) - *($3 + [20])) > (uint_32)[3]), [18580])
	CALL memcpy(($5 + [12]), *($3 + [20]), [4])
	*($3 + [20]) = (*($3 + [20]) + [4])
	CALL $50(($3 + [16]), ($5 + [16]))
	CALL $50(($3 + [16]), ($5 + [28]))
	*($5 + [44]) = $1
	*($3 + [8]) = $5
	$1 = *($5)
	if ( ($1 & [1]) ){ goto $label$7 }
	$1 = uint_32($1 >> [1])
	$6 = ($5 + [1])
	goto $label$6 
	
.LABEL $label$7
	$1 = *(($5 + [4]))
	$6 = *(($5 + [8]))
	
.LABEL $label$6
	*($3 + [36]) = $1
	*($3 + [32]) = $6
	*($3) = *($3 + [32])
	$7 = *(CALL $7(($3 + [40]), $3))
	*($3 + [40]) = $7
	$6 = *($5 + [44])
	*($3 + [32]) = $6
	$8 = ($0 + [28])
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($1 + [8]) = $7
	*($1 + [16]) = $6
	*($3 + [8]) = [0]
	*($1) = $5
	*($8) = ($1 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $35(($0 + [24]), ($3 + [8]), ($3 + [40]), ($3 + [32]))
	if ( ($4 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $122($2)
	
.LABEL $label$8
	$1 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	if ( (*($1 + [28]) & [1]) ){ goto $label$16 }
	if ( (*($1 + [16]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($1 + [36])))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [24])))
	if ( (*($1) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( ((*($1) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	if ( ($3 & [1]) ){ goto $label$2 }
	$4 = uint_32($3 >> [1])
	$5 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [4])
	$5 = *($1 + [8])
	
.LABEL $label$1
	$6 = [0]
	$3 = CALL $113([18443])
	if ( ($3 == 0) ){ goto $label$4 }
	$7 = [0]
	if ( ((int_32)$4 < (int_32)$3) ){ goto $label$3 }
	$8 = ($5 + $4)
	$6 = $5
	
.LOOP $label$5:
	$4 = (($4 - $3) + [1])
	if ( ($4 == 0) ){ goto $label$3 }
	$4 = CALL $111($6, [46], $4)
	if ( ($4 == 0) ){ goto $label$3 }
	if ( (CALL $112($4, [18443], $3) == 0) ){ goto $label$6 }
	$6 = ($4 + [1])
	$4 = ($8 - $6)
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$3 }
	$6 = ($4 - $5)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($2)
	$6 = ($4 & [1])
	$5 = ($9 + [1])
	$9 = CALL $79($2, $1, [0], $6, $1)
	$3 = ( *($9 + [8]) ? $5 : $6 )
	$8 = uint_32($4 >> [1])
	$1 = *($9 + [4])
	if ( (( $1 ? $8 : $6 ) == 0) ){ goto $label$10 }
	$7 = ($9 + [4])
	$10 = ($9 + [8])
	
.LOOP $label$11:
	if ( (CALL $96(*($3)) == 0) ){ goto $label$9 }
	$8 = uint_32($4 >> [1])
	$1 = *($7)
	$4 = *($2)
	$6 = ($4 & [1])
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)(( *($10) ? $5 : $6 ) + ( $1 ? $8 : $6 ))) ){ goto $label$11 }
	
.LABEL $label$10
	$7 = [0]
	$1 = ( $1 ? $8 : $6 )
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$7 = [0]
	$6 = ($4 & [1])
	$4 = *($2)
	$1 = ( *(($9 + [4])) ? uint_32($4 >> [1]) : $6 )
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)(( *(($9 + [8])) ? $5 : $6 ) + $1)) ){ goto $label$7 }
	$7 = CALL $89($9, [0], [10])
	$4 = *($2)
	
.LABEL $label$7
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($9 + [8])))
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $7
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	if ( ($3 & [1]) ){ goto $label$2 }
	$4 = uint_32($3 >> [1])
	$5 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [4])
	$5 = *($1 + [8])
	
.LABEL $label$1
	$6 = [0]
	$3 = CALL $113([18443])
	if ( ($3 == 0) ){ goto $label$4 }
	$7 = [0]
	if ( ((int_32)$4 < (int_32)$3) ){ goto $label$3 }
	$8 = ($5 + $4)
	$6 = $5
	
.LOOP $label$5:
	$4 = (($4 - $3) + [1])
	if ( ($4 == 0) ){ goto $label$3 }
	$4 = CALL $111($6, [46], $4)
	if ( ($4 == 0) ){ goto $label$3 }
	if ( (CALL $112($4, [18443], $3) == 0) ){ goto $label$6 }
	$6 = ($4 + [1])
	$4 = ($8 - $6)
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$3 }
	$6 = ($4 - $5)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	$9 = CALL $79(($2 + [16]), $1, [0], $6, $1)
	$4 = *($2)
	$6 = ($4 & [1])
	$5 = ($10 + [1])
	$10 = CALL $79($2, $1, ($6 + [1]), [-1], $1)
	$3 = ( *($10 + [8]) ? $5 : $6 )
	$8 = uint_32($4 >> [1])
	$1 = *($10 + [4])
	if ( (( $1 ? $8 : $6 ) == 0) ){ goto $label$10 }
	$7 = ($10 + [4])
	$11 = ($10 + [8])
	
.LOOP $label$11:
	if ( (CALL $96(*($3)) == 0) ){ goto $label$9 }
	$8 = uint_32($4 >> [1])
	$1 = *($7)
	$4 = *($2)
	$6 = ($4 & [1])
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)(( *($11) ? $5 : $6 ) + ( $1 ? $8 : $6 ))) ){ goto $label$11 }
	
.LABEL $label$10
	$7 = [0]
	$1 = ( $1 ? $8 : $6 )
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$7 = [0]
	$6 = ($4 & [1])
	$4 = *($2)
	$1 = ( *(($10 + [4])) ? uint_32($4 >> [1]) : $6 )
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)(( *(($10 + [8])) ? $5 : $6 ) + $1)) ){ goto $label$7 }
	$7 = CALL $89($10, [0], [10])
	$4 = *($2)
	
.LABEL $label$7
	if ( (($4 & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($10 + [8])))
	
.LABEL $label$12
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [32])
	return $7
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $78(($2 + [16]), $1)
	*($0) = CALL $16($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$1
	$1 = CALL $78($2, $1)
	*($0 + [4]) = CALL $17($0, $1)
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [96])
	$global$0 = $3
	$5 = *($2 + [4])
	$4 = *($1 + [4])
	if ( ((int_32)$4 > (int_32)$5) ){ goto $label$4 }
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$5 }
	if ( ((int_32)*($1) > (int_32)*($2)) ){ goto $label$4 }
	
.LABEL $label$5
	$6 = *($1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	$4 = *($0 + [4])
	if ( ((int_32)$4 > (int_32)$5)) ){ goto $label$6 }
	$1 = [0]
	if ( ((int_32)$4 < (int_32)$5) ){ goto $label$3 }
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$6 }
	if ( ((int_32)*($0) < (int_32)(CASTING uint_32)(uint_64 $6)) ){ goto $label$3 }
	
.LABEL $label$6
	$1 = [0]
	$6 = *($2)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	if ( ((int_32)$4 > (int_32)$2)) ){ goto $label$3 }
	$1 = [1]
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$3 }
	$1 = *($0)
	$global$0 = ($3 + [96])
	return ((int_32)$1 <= (int_32)(CASTING uint_32)(uint_64 $6))
	
.LABEL $label$4
	*(($3 + [72])) = [0]
	*($3 + [64]) = (int_64)0
	*($3 + [88]) = *($1)
	$1 = CALL $113([18445])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$9 }
	*($3 + [64]) = ($1 << [1])
	$4 = (($3 + [64]) | [1])
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($3 + [64]) = ($5 | [1])
	*($3 + [72]) = $4
	*($3 + [68]) = $1
	
.LABEL $label$8
	CALL memcpy($4, [18445], $1)
	
.LABEL $label$7
	*(($4 + $1)) = [0]
	$1 = CALL $10(($3 + [80]), ($3 + [64]))
	*($3 + [24]) = *($3 + [88])
	*($3 + [16]) = *($1)
	$1 = [1]
	if ( CALL $11($0, ($3 + [24]), ($3 + [16])) ){ goto $label$10 }
	*(($3 + [48])) = [0]
	*($3 + [40]) = (int_64)0
	$1 = CALL $113([18451])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$13 }
	*($3 + [40]) = ($1 << [1])
	$4 = (($3 + [40]) | [1])
	if ( $1 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$5 = (($1 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($3 + [40]) = ($5 | [1])
	*($3 + [48]) = $4
	*($3 + [44]) = $1
	
.LABEL $label$12
	CALL memcpy($4, [18451], $1)
	
.LABEL $label$11
	*(($4 + $1)) = [0]
	$1 = CALL $10(($3 + [56]), ($3 + [40]))
	$6 = *($2)
	*($3 + [32]) = $6
	*($3 + [8]) = *($1)
	*($3) = $6
	$1 = CALL $11($0, ($3 + [8]), $3)
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($3 + [48]))
	
.LABEL $label$10
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($3 + [72]))
	
.LABEL $label$3
	$global$0 = ($3 + [96])
	return $1
	
.LABEL $label$2
	CALL $77(($3 + [64]))
	
.LABEL $label$1
	CALL $77(($3 + [40]))
	(unreachable)
	return (unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $113($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL $86($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $77($0)
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	$5 = ($global$0 - [160])
	$global$0 = $5
	CALL eosio_assert(CALL $fimport$1($1), [17275])
	$6 = [0]
	$7 = *($2 + [8])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	$9 = $8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $10
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$5 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [17035])
	CALL eosio_assert((((CASTING uint_32)(uint_64 $7) & [255]) == 0), [17301])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$7 }
	$6 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$6 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($6 <= [257]), [17333])
	$6 = *($3)
	if ( ($6 & [1]) ){ goto $label$9 }
	$6 = uint_32($6 >> [1])
	goto $label$8 
	
.LABEL $label$9
	$6 = *($3 + [4])
	
.LABEL $label$8
	CALL eosio_assert(($6 <= [33]), [17362])
	$12 = *($3)
	$11 = ($12 & [1])
	$13 = ($3 + [1])
	$6 = ( *($3 + [8]) ? $13 : $11 )
	$12 = uint_32($12 >> [1])
	$14 = ($3 + [4])
	$4 = *($14)
	if ( (( $4 ? $12 : $11 ) == 0) ){ goto $label$13 }
	$15 = ($3 + [8])
	
.LOOP $label$14:
	if ( (CALL $96(*($6)) == 0) ){ goto $label$12 }
	$12 = uint_32($12 >> [1])
	$4 = *($14)
	$12 = *($3)
	$11 = ($12 & [1])
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)(( *($15) ? $13 : $11 ) + ( $4 ? $12 : $11 ))) ){ goto $label$14 }
	
.LABEL $label$13
	$14 = [0]
	$15 = [0]
	$12 = ( $4 ? $12 : $11 )
	if ( ($12 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	$14 = [0]
	$15 = [0]
	$11 = ($11 & [1])
	$11 = *($3)
	$12 = ( *(($3 + [4])) ? uint_32($11 >> [1]) : $11 )
	if ( ($12 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$15 = ((int_32)$6 == (int_32)(( *(($3 + [8])) ? $13 : $11 ) + $12))
	
.LABEL $label$10
	CALL eosio_assert($15, [17390])
	CALL current_time()
	*(($5 + [152])) = $14
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	*($5 + [156]) = $14
	$9 = *($0)
	*($5 + [120]) = $9
	*($5 + [128]) = $8
	$6 = CALL db_find_i64($9, $8, (int_64)-4157508551318700032, $8)
	if ( ((int_32)$6 < (int_32)$14) ){ goto $label$15 }
	$14 = CALL $3(($5 + [120]), $6)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)($5 + [120])), [18506])
	
.LABEL $label$15
	$11 = [0]
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [17408])
	CALL require_auth(*($14 + [16]))
	$16 = *($2)
	if ( ((uint_64)((int_64)$16 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$16 }
	$6 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$8 = $9
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$8 = $9
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$20 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$11 = [0]
	
.LABEL $label$16
	CALL eosio_assert($11, [17468])
	CALL eosio_assert(((int_64)$16 > (int_64)0), [17485])
	CALL eosio_assert(((int_64)$7 == (int_64)*($14 + [8])), [17521])
	$15 = ($2 + [8])
	$8 = *($15)
	*((($5 + [104]) + [8])) = $8
	$9 = *($2)
	*((($5 + [40]) + [8])) = $8
	*($5 + [40]) = $9
	*($5 + [104]) = $9
	CALL $18($0, ($5 + [40]))
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$21 }
	$13 = ($14 + [16])
	$4 = (($5 + [88]) + [8])
	$10 = (int_64)0
	
.LOOP $label$22:
	$17 = *($13)
	*($4) = $7
	*($5 + [88]) = (int_64)1
	CALL eosio_assert([1], [17963])
	$9 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$8 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$9 = $8
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$9 = $8
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$27 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$11 = [0]
	
.LABEL $label$23
	CALL eosio_assert($11, [17035])
	$6 = CALL $78(($5 + [72]), $3)
	*((($5 + [24]) + [8])) = *($4)
	*($5 + [24]) = *($5 + [88])
	CALL $19($0, $1, $17, ($5 + [24]), $6)
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*((($5 + [72]) + [8])))
	
.LABEL $label$28
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)$16) ){ goto $label$22 }
	
.LABEL $label$21
	$9 = *($15)
	*((($5 + [56]) + [8])) = $9
	$8 = *($2)
	*($5 + [56]) = $8
	$10 = *(($14 + [16]))
	*((($5 + [8]) + [8])) = $9
	*($5 + [8]) = $8
	CALL $20($0, $1, ($5 + [8]), $10)
	$12 = *($5 + [144])
	if ( ($12 == 0) ){ goto $label$29 }
	$4 = ($5 + [148])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$31 }
	
.LOOP $label$32:
	$6 = ($6 + [-24])
	$11 = *($6)
	*($6) = [0]
	if ( ($11 == 0) ){ goto $label$33 }
	CALL _ZdlPv($11)
	
.LABEL $label$33
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$32 }
	$6 = *(($5 + [144]))
	goto $label$30 
	
.LABEL $label$31
	$6 = $12
	
.LABEL $label$30
	*($4) = $12
	CALL _ZdlPv($6)
	
.LABEL $label$29
	$global$0 = ($5 + [160])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $122($0)
	
.LABEL $label$1
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($1 + [8])
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	$4 = *($0)
	*($2 + [8]) = $4
	$5 = (uint_64)$3 >> (uint_64)(int_64)8
	*($2 + [16]) = $5)
	$0 = [0]
	$6 = CALL db_find_i64($4, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $3(($2 + [8]), $6)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($2 + [8])), [18506])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [18640])
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)($2 + [8])), [18675])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$4()), [18721])
	$6 = ($0 + [16])
	*($2 + [72]) = *($6)
	$5 = *($0 + [8])
	CALL eosio_assert(((int_64)$3 == (int_64)$5), [19224])
	$3 = ((int_64)*($0) + (int_64)*($1))
	*($0) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [19267])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [19286])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$3) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [18772])
	CALL eosio_assert([1], [18481])
	CALL memcpy(($2 + [48]), $0, [8])
	*($2 + [88]) = *($0 + [8])
	CALL eosio_assert([1], [18481])
	CALL memcpy((($2 + [48]) | [8]), ($2 + [88]), [8])
	CALL eosio_assert([1], [18481])
	CALL memcpy((($2 + [48]) + [16]), $6, [8])
	CALL db_update_i64(*($0 + [28]), (int_64)0, ($2 + [48]), [24])
	$1 = (($2 + [8]) + [16])
	if ( (uint_64)($3 <= *($1)) ){ goto $label$2 }
	*($1) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$2
	*($2 + [88]) = *($6)
	if ( (CALL $112(($2 + [72]), ($2 + [88]), [8]) == 0) ){ goto $label$3 }
	$1 = ($0 + [32])
	$0 = *($1)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($2 + [8]), *(($2 + [16])), (int_64)-4157508551318700032, ($2 + [80]), $3)
	*($1) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, (int_64)0, ($2 + [88]))
	
.LABEL $label$3
	$6 = *($2 + [32])
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ($2 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($2 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($2 + [96])
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$5 = ($global$0 - [176])
	$global$0 = $5
	*($5 + [80]) = $1
	*($5 + [72]) = [0]
	*($5 + [64]) = (int_64)0
	*($5 + [112]) = $0
	*($5 + [120]) = $4
	*($5 + [128]) = $3
	*($5 + [116]) = ($5 + [64])
	*($5 + [124]) = ($5 + [80])
	*($5 + [104]) = $2
	CALL eosio_assert(((int_64)*($0 + [32]) == (int_64)CALL $fimport$4()), [18585])
	$6 = ($0 + [32])
	*($5 + [160]) = $6
	*($5 + [164]) = ($5 + [112])
	*($5 + [168]) = ($5 + [104])
	*(($4 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32 align=4]) = (int_64)0
	*($4 + [40]) = [0]
	*($4 + [44]) = $6
	CALL $21(($5 + [160]), $4)
	*($5 + [96]) = $4
	$1 = *($4)
	*($5 + [160]) = $1
	$7 = *($4 + [48])
	*($5 + [92]) = $7
	$8 = ($0 + [60])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [64]))) ){ goto $label$3 }
	*($6 + [8]) = $1
	*($6 + [16]) = $7
	*($5 + [96]) = [0]
	*($6) = $4
	*($8) = ($6 + [24])
	$4 = *($5 + [96])
	$6 = [0]
	*($5 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL $22(($0 + [56]), ($5 + [96]), ($5 + [160]), ($5 + [92]))
	$4 = *($5 + [96])
	$6 = [0]
	*($5 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($4 + [40])))
	
.LABEL $label$4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$1 = *($0)
	*($5 + [164]) = [6]
	*($5 + [160]) = [18455]
	*($5 + [8]) = *($5 + [160])
	$9 = *(CALL $7(($5 + [112]), ($5 + [8])))
	*(($0 = (($5 + [16]) + [24]))) = *(($3 + [8]))
	*($5 + [16]) = $2
	*($5 + [24]) = *($5 + [80])
	*($5 + [32]) = *($3)
	CALL $78(($5 + [48]), ($5 + [64]))
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $9
	*((($5 + [112]) + [24])) = *($0)
	$0 = (($5 + [16]) + [40])
	*(($3 = (($5 + [112]) + [40]))) = *($0)
	*($0) = $6
	*($5 + [160]) = $4
	$4 = ($4 + [16])
	*($5 + [168]) = $4
	*($5 + [164]) = $4
	*($5 + [112]) = *($5 + [16])
	*($5 + [120]) = *($5 + [24])
	*($5 + [128]) = *($5 + [32])
	*($5 + [144]) = *($5 + [48])
	*($5 + [48]) = (int_64)0
	CALL $23($1, (int_64)8516769944371724288, ($5 + [160]), ($5 + [112]))
	if ( ((*($5 + [144]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3))
	
.LABEL $label$5
	$4 = *($5 + [160])
	if ( ($4 == 0) ){ goto $label$6 }
	*($5 + [164]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( (*(($5 + [48])) & [1]) ){ goto $label$9 }
	if ( (*($5 + [64]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($5 + [56])))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($5 + [72])))
	$global$0 = ($5 + [176])
	return 
	
.LABEL $label$7
	$global$0 = ($5 + [176])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18481])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18481])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18481])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18481])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18481])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $60($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $82($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $82($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $77($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18580])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18580])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18580])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), ($0 + [24]))
	CALL $50(*($1), ($0 + [36]))
	$global$0 = ($2 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [128])
	$global$0 = $2
	*(($3 = (($2 + [48]) + [8]))) = *(($1 + [16]))
	*($2 + [48]) = *($1 + [8])
	$4 = *($1)
	$5 = CALL $78(($2 + [32]), ($1 + [24]))
	$1 = CALL $78(($2 + [16]), ($1 + [36]))
	*((($2 + [64]) + [8])) = *($3)
	*($2 + [64]) = *($2 + [48])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [112]) + [8]))) = *((($2 + [64]) + [8]))
	*($2 + [112]) = *($2 + [64])
	$6 = CALL $78(($2 + [96]), $5)
	$8 = CALL $78(($2 + [80]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [112])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $6), (int_32 $8), (int_32 $0))
	if ( (*($2 + [80]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [96]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($5) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($5) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [128])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [128])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $78(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $78(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	$1 = CALL $78($2, ($1 + [28]))
	$4 = CALL $78(($2 + [16]), ($1 + [16]))
	$3 = CALL $78(($2 + [32]), $1)
	CALL $67($0, $3, *($1 + [12]), $4, $1)
	if ( (*($1) & [1]) ){ goto $label$5 }
	if ( (*($4) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($3) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [48])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	CALL $80($1, *($4))
	*($1 + [12]) = *(*($4 + [4]))
	$5 = ($1 + [16])
	CALL $80($5, *($4 + [8]))
	$6 = ($1 + [28])
	CALL $80($6, *($4 + [12]))
	*(($4 = $2) + [32]) = [0]
	*($4 + [40]) = ($4 + [32])
	$7 = ($1 + [12])
	*($4 + [20]) = $7
	*($4 + [16]) = $1
	*($4 + [24]) = $5
	*($4 + [28]) = $6
	CALL $64(($4 + [16]), ($4 + [40]))
	$8 = *($4 + [32])
	if ( ($8 <= [513]) ){ goto $label$2 }
	$2 = CALL $118($8)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = ($2 + $8)
	CALL $40(($4 + [16]), $1)
	CALL eosio_assert(((int_32)(*($4 + [24]) - *($4 + [20])) > (int_32)[3]), [18481])
	CALL memcpy(*($4 + [20]), $7, [4])
	*($4 + [20]) = (*($4 + [20]) + [4])
	CALL $40(($4 + [16]), $5)
	CALL $40(($4 + [16]), $6)
	$5 = *($1)
	$6 = ($5 & [1])
	*($4 + [32]) = ( *($1 + [8]) ? ($1 + [1]) : $6 )
	*($4 + [36]) = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	*($4 + [8]) = *($4 + [32])
	$5 = CALL $7(($4 + [40]), ($4 + [8]))
	$9 = *($5)
	*($1 + [44]) = CALL db_store_i64(*($3 + [8]), (int_64)6256974190071513088, *(*($0 + [8])), $9, $2, $8)
	if ( ((uint_32)$8 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$9 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $122($2)
	if ( (uint_64)($9 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $78(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $78(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $78($2, ($1 + [24]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$6 = CALL $78(($2 + [16]), $1)
	CALL void $7((int_32 $5), (int_64 $4), (int_64 $3), (int_64 $6), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $97())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $117($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $118($1)
	
.LABEL $label$2
	*(CALL $97()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $118(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $122($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $114 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $61(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $113 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $107($3, (int_64)0)
	$4 = CALL $109($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $118 (int_32 $0)
{
	return CALL $119([8500], $0)
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $120($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16949])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $29 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$5 = *($2)
	$4 = *($2 + [8])
	$0 = CALL $30(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8), [17823]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$5), [17847])
	if ( ((int_64)$5 != (int_64)*($0)) ){ goto $label$3 }
	CALL $31(($3 + [8]), $0)
	$6 = *($3 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [18675])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$4()), [18721])
	$7 = *($0 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$7), [19133])
	$5 = (int_64)
	*($0) = $5(*($0) - $5))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [19181])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [19203])
	$5 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [18772])
	CALL eosio_assert([1], [18481])
	CALL memcpy(($3 + [48]), $0, [8])
	*($3 + [72]) = *($0 + [8])
	CALL eosio_assert([1], [18481])
	CALL memcpy((($3 + [48]) | [8]), ($3 + [72]), [8])
	CALL db_update_i64(*($0 + [20]), $1, ($3 + [48]), [16])
	$0 = (($3 + [8]) + [16])
	if ( (uint_64)($5 <= *($0)) ){ goto $label$4 }
	*($0) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$4
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL _ZdlPv($2)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($3 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $6
	
.LABEL $label$5
	*($8) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [18675])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18721])
	$6 = ($1 + [8])
	*(($5 = $4) + [24]) = *($6)
	*($5 + [32]) = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	*($6) = *(*($3))
	$7 = *($1)
	CALL eosio_assert([1], [18772])
	$3 = *($1 + [32])
	$6 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [32])
	$8 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [32])
	$9 = (($5 + [24]) + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $118($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	*($5 + [40]) = ($5 + [8])
	*($5 + [60]) = $6
	*($5 + [48]) = $1
	*($5 + [52]) = ($1 + [8])
	*($5 + [56]) = ($1 + [16])
	CALL $63(($5 + [48]), ($5 + [40]))
	CALL db_update_i64(*($1 + [48]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $122($4)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [48]) = *(($1 + [8]))
	if ( (CALL $112(($5 + [24]), ($5 + [48]), [8]) == 0) ){ goto $label$6 }
	$3 = *($1 + [52])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675712, ($5 + [40]), $7)
	*(($1 + [52])) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $2, ($5 + [48]))
	
.LABEL $label$6
	*($5 + [48]) = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	if ( (CALL $112($9, ($5 + [48]), [8]) == 0) ){ goto $label$8 }
	$1 = ($1 + [56])
	$3 = *($1)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$9 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3665743729458675711, ($5 + [40]), $7)
	*($1) = $3
	
.LABEL $label$9
	CALL db_idx64_update($3, $2, ($5 + [48]))
	
.LABEL $label$8
	$global$0 = ($5 + [64])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18580])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18580])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18580])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18580])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $107 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $106 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $105($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [48])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [32])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [40])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $27($9, $10)
	*($3 + [36]) = [0]
	*($3 + [32]) = $9
	$8 = *(*(CALL $65(($3 + [32])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [48])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18831])
	$8 = *($7)
	*($1) = $8
	CALL $92(($3 + [8]), $8)
	$6 = CALL $85(($3 + [8]), [17141])
	$7 = ($6 + [8])
	*((($3 + [32]) + [8])) = *($7)
	*($3 + [32]) = *($6)
	*($6) = (int_64)0
	*($7) = [0]
	$7 = *($6)
	$9 = ($7 & [1])
	$6 = *($5 + [8])
	$6 = CALL $86(($3 + [32]), ( *($6 + [8]) ? ($6 + [1]) : $9 ), ( *($6 + [4]) ? uint_32($7 >> [1]) : $9 ))
	$7 = *($6 + [4])
	$9 = *($6)
	*($6) = (int_64)0
	$10 = *($6 + [8])
	*($6 + [8]) = [0]
	$6 = *($5 + [4])
	if ( (*($6) & [1]) ){ goto $label$4 }
	*($6) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*($6 + [8])) = [0]
	*($6 + [4]) = [0]
	
.LABEL $label$3
	CALL $82($6, [0])
	*(($6 + [4])) = $7
	*($6) = $9
	*(($6 + [8])) = $10
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$5
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$6
	*($1 + [8]) = *(*($5 + [12]))
	$6 = *($5 + [16])
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	$7 = ($1 + [32])
	CALL $80($7, *(($5 + [8])))
	$6 = *($1 + [32])
	$5 = ( *(($1 + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [32])
	$8 = (CASTING uint_64)(uint_32 $5)
	$9 = ($1 + [16])
	
.LOOP $label$7:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	if ( ($6 <= [513]) ){ goto $label$9 }
	$5 = CALL $118($6)
	goto $label$8 
	
.LABEL $label$9
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$8
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $9
	*($3 + [44]) = $7
	CALL $63(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($4 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), $8, $5, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL $122($5)
	
.LABEL $label$10
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$11 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$6 = ($4 + [8])
	$8 = *($6)
	$5 = *(($0 + [8]))
	$11 = *($5)
	$12 = *($1)
	*($3 + [32]) = *(($1 + [8]))
	*($1 + [52]) = CALL db_idx64_store($8, (int_64)-3665743729458675712, $11, $12, ($3 + [32]))
	$8 = *($5)
	$11 = *($6)
	$12 = *($1)
	*($3 + [32]) = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	*(($1 + [56])) = CALL db_idx64_store($11, (int_64)-3665743729458675711, $8, $12, ($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($2 + [8])
	*($4 + [16]) = $1
	$7 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$7) < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $24(($4 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [8])), [18506])
	$5 = *($0)
	CALL eosio_assert([1], [18640])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($4 + [8])), [18675])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$4()), [18721])
	$1 = *($7 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$1), [19224])
	$6 = ((int_64)*($7) + (int_64)*($2))
	*($7) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [19267])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [19286])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($7 + [8]) >> (uint_64)(int_64)8)), [18772])
	CALL eosio_assert([1], [18481])
	CALL memcpy(($4 + [48]), $7, [8])
	*($4 + [72]) = *($7 + [8])
	CALL eosio_assert([1], [18481])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	CALL db_update_i64(*($7 + [20]), $5, ($4 + [48]), [16])
	$7 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$3 }
	*($7) = ((int_64)$1 + (int_64)1)
	$0 = *($4 + [32])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$4()), [18585])
	*(($7 = CALL _Znwj([32])) + [16]) = ($4 + [8])
	*($7 + [8]) = *(($2 + [8]))
	*($7) = *($2)
	CALL eosio_assert([1], [18481])
	CALL memcpy(($4 + [48]), $7, [8])
	*($4 + [72]) = *($7 + [8])
	CALL eosio_assert([1], [18481])
	CALL memcpy((($4 + [48]) | [8]), ($4 + [72]), [8])
	$1 = (uint_64)*($7 + [8]) >> (uint_64)(int_64)8
	$0 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [48]), [16]
	*($7 + [20]) = $0)
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$5 }
	*($2) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$5
	*($4 + [72]) = $7
	$1 = (uint_64)*(($7 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $1)
	*($4 + [68]) = $0
	$8 = ($4 + [36])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($4 + [40]))) ){ goto $label$7 }
	*($2 + [8]) = $1
	*($2 + [16]) = $0
	*($4 + [72]) = [0]
	*($2) = $7
	*($8) = ($2 + [24])
	$7 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( $7 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $25(($4 + [32]), ($4 + [72]), ($4 + [48]), ($4 + [68]))
	$7 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$0 = *($4 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$10 }
	$7 = *(($4 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$7 = $0
	
.LABEL $label$8
	*($8) = $0
	CALL _ZdlPv($7)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $23 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $39($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $66(($4 + [72]), ($4 + [64]))
	CALL $41(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $95(($4 + [8]))
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $95($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18557])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $118($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18580])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18580])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $25(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $122($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18557])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $118($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40]) = [0]
	*($5 + [44]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	CALL $62(($3 + [32]), ($3 + [24]))
	*($5 + [48]) = $1
	*($5 + [52 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $22(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $122($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [40])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [80])
	$global$0 = $5
	*($5 + [72]) = $2
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [17547])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$1($2), [17275])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$2 }
	$4 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($4 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($4 <= [257]), [17333])
	$7 = ($0 + [32])
	$6 = *(($0 + [60]))
	$8 = *(($0 + [56]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($6 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$5 }
	$6 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$7), [18506])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$4 = CALL db_find_i64(*($7), *(($0 + [40])), (int_64)-3665743729458675712, $3)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $27($7, $4)
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$7), [18506])
	
.LABEL $label$3
	$4 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($4, [17571])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)$1), [17626])
	CALL require_recipient($1)
	CALL require_recipient($2)
	*($5 + [64]) = ($5 + [72])
	CALL eosio_assert($4, [18640])
	CALL $28($7, $9, $1, ($5 + [64]))
	$4 = ($9 + [24])
	$2 = *($4)
	*((($5 + [48]) + [8])) = $2
	$3 = *($9 + [16])
	*((($5 + [16]) + [8])) = $2
	*($5 + [16]) = $3
	*($5 + [48]) = $3
	CALL $29($0, $1, ($5 + [16]))
	$3 = *($9 + [16])
	$2 = *($4)
	*(($5 + [8])) = $2
	*((($5 + [32]) + [8])) = $2
	*($5) = $3
	*($5 + [32]) = $3
	CALL $20($0, *($5 + [72]), $5, $1)
	$global$0 = ($5 + [80])
}

int_64 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $108($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $97()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $108($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19393]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $107($0, (int_64)0)
	*(CALL $97()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $108($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $108($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $108($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $108($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19393])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19393]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19393]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $108($0)
	$5 = *(($6 + [19393]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $108($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19393]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [16905]))
	$8 = (int_64)0
	$5 = *(($6 + [19393]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19393]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $108($0)
	$5 = *(($6 + [19393]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $108($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19393]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $107($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19393]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19393]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $108($0) + [19393]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $97()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $97()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $97()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $118($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $118($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $68 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8192 align=4]) = (int_64)0
	*([0] + [8200]) = [0]
	$0 = CALL $113([16896])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*([0] + [8192]) = ($0 << [1])
	$1 = [8193]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8192]) = ($2 | [1])
	*([0] + [8200]) = $1
	*([0] + [8196]) = $0
	
.LABEL $label$3
	CALL memcpy($1, [16896], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL $99([7], [0], [8192])
	return (unreachable)
	
.LABEL $label$1
	CALL $77([8192])
}

int_32 .FUNC $108 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $106($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [48]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18937])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3665743729458675712)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18883])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18883])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $27(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = *($2)
	$2 = *($0)
	$4 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($1)
	$1 = *($3)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($3) = $1
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	$1 = ($2 + $1)
	*($3) = $1
	
.LABEL $label$2
	$1 = ($1 + [4])
	*($3) = $1
	$5 = *($2)
	$2 = *($0 + [8])
	$4 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($3) = $1
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	$1 = ($2 + $1)
	*($3) = $1
	
.LABEL $label$4
	$2 = *($0)
	$0 = *($0 + [12])
	$4 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($3) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($3) = ($0 + $1)
	
.LABEL $label$6
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = ($global$0 - [48])
	$global$0 = $5
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$4 = CALL $78($5, $4)
	$3 = CALL $78(($5 + [16]), $3)
	$1 = CALL $78(($5 + [32]), $1)
	CALL void $7((int_32 $1), (int_32 $2), (int_32 $3), (int_32 $4), (int_32 $0))
	if ( (*($4) & [1]) ){ goto $label$6 }
	if ( (*($3) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($1) & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$2
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($5 + [48])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18481])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18481])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18481])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [18481])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $40(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [28]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($1 + [36])))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [24])))
	if ( (*($1) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18636])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $39($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18580])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18481])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18481])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [18481])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [18481])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $40(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18580])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18580])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18580])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18580])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $50(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [8] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $102($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $102($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19312]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $102($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $100([9], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $113([16944])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [16944], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $97())
	*(CALL $97()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $110($4, ($3 + [12]), $2)
	$5 = CALL $97()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $90($3)
	
.LABEL $label$1
	CALL $91($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $113($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$3 = uint_32($3 >> [1])
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( $4 ){ goto $label$6 }
	$0 = ($0 + [1])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$0 = CALL $112($0, $1, $4)
	if ( ($0 == 0) ){ goto $label$1 }
	return $0
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $5 : ($3 <= $2) )
}

int_32 .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $112(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $81($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $113($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $81($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $84($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $81($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $116(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8204])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $116(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $122($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $77 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $95($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	CALL require_auth(*($0))
}

void .FUNC $37 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [176])
	$global$0 = $2
	CALL $38(($2 + [104]))
	$3 = *($2 + [104])
	CALL eosio_assert(CALL $fimport$1($3), [17275])
	$4 = *($2 + [136])
	$5 = ($2 + [137])
	$6 = ($2 + [144])
	$7 = *($6)
	$8 = *(($2 + [140]))
	$9 = [0]
	$10 = [0]
	$11 = CALL $113([17141])
	if ( ($11 == 0) ){ goto $label$1 }
	$4 = ( $8 ? uint_32($4 >> [1]) : $12 )
	$12 = ($4 & [1])
	$10 = ( $7 ? $5 : $12 )
	$8 = ($10 + $4)
	if ( ((int_32)$4 < (int_32)$11) ){ goto $label$3 }
	$7 = $10
	
.LOOP $label$4:
	$4 = (($4 - $11) + [1])
	if ( ($4 == 0) ){ goto $label$3 }
	$4 = CALL $111($7, [58], $4)
	if ( ($4 == 0) ){ goto $label$3 }
	if ( (CALL $112($4, [17141], $11) == 0) ){ goto $label$2 }
	$7 = ($4 + [1])
	$4 = ($8 - $7)
	if ( ((int_32)$4 >= (int_32)$11) ){ goto $label$4 }
	
.LABEL $label$3
	$4 = $8
	
.LABEL $label$2
	$10 = ( [-1] ? ($4 - $10) : ((int_32)$4 == (int_32)$8) )
	
.LABEL $label$1
	$12 = ($2 + [136])
	$7 = ($4 & [1])
	$4 = *([0] + [8192])
	$11 = ( *([0] + [8196]) ? uint_32($4 >> [1]) : $7 )
	if ( ($11 == 0) ){ goto $label$5 }
	$4 = ( *(($2 + [140])) ? uint_32($4 >> [1]) : $8 )
	$4 = *($12)
	$8 = ($4 & [1])
	$6 = ( *($6) ? $5 : $8 )
	$8 = ($6 + $4)
	if ( ((int_32)$4 < (int_32)$11) ){ goto $label$7 }
	$9 = ( *([0] + [8200]) ? [8193] : $7 )
	$5 = *($9)
	$7 = $6
	
.LOOP $label$8:
	$4 = (($4 - $11) + [1])
	if ( ($4 == 0) ){ goto $label$7 }
	$4 = CALL $111($7, $5, $4)
	if ( ($4 == 0) ){ goto $label$7 }
	if ( (CALL $112($4, $9, $11) == 0) ){ goto $label$6 }
	$7 = ($4 + [1])
	$4 = ($8 - $7)
	if ( ((int_32)$4 >= (int_32)$11) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = $8
	
.LABEL $label$6
	$9 = (((int_32)$4 == (int_32)$8) | ((int_32)($4 - $6) == (int_32)[-1]))
	
.LABEL $label$5
	if ( ((int_64)$3 == (int_64)$0) ){ goto $label$9 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$9 }
	if ( $9 ){ goto $label$9 }
	*($2 + [28]) = [6]
	*($2 + [24]) = [18455]
	*($2 + [16]) = *($2 + [24])
	$13 = *(CALL $7(($2 + [64]), ($2 + [16])))
	*($2 + [28]) = [12]
	*($2 + [24]) = [18461]
	*($2 + [8]) = *($2 + [24])
	$14 = *(CALL $7(($2 + [64]), ($2 + [8])))
	*($2 + [28]) = [8]
	*($2 + [24]) = [18473]
	*($2) = *($2 + [24])
	$15 = *(CALL $7(($2 + [64]), $2))
	*((($2 + [24]) + [16])) = *((($2 + [104]) + [24]))
	*($2 + [24]) = $3
	*($2 + [32]) = *($2 + [120])
	$11 = CALL $78((($2 + [24]) + [24]), $12)
	*($2 + [72]) = $15
	*($2 + [64]) = $14
	*(($4 = CALL _Znwj([16]))) = $0
	*($4 + [8]) = $13
	*(($2 + [100])) = [0]
	$7 = ($4 + [16])
	*((($2 + [64]) + [24])) = $7
	*(($2 + [84])) = $7
	*($2 + [80]) = $4
	*($2 + [92 align=4]) = (int_64)0
	$4 = *($11)
	$7 = ( *((($2 + [24]) + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [24])
	$0 = (CASTING uint_64)(uint_32 $7)
	$7 = (($2 + [64]) + [28])
	
.LOOP $label$10:
	$4 = ($4 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $39($7, $4)
	$7 = *(($2 + [96]))
	$4 = *(($2 + [92]))
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	$4 = [0]
	
.LABEL $label$11
	*($2 + [152]) = $4
	*($2 + [160]) = $7
	$7 = ($7 - $4)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [18481])
	CALL memcpy($4, ($2 + [24]), [8])
	CALL eosio_assert(((int_32)($7 + [-8]) > (int_32)[7]), [18481])
	CALL memcpy(($4 + [8]), (($2 + [24]) + [8]), [8])
	*($2 + [168]) = *((($2 + [24]) + [16]))
	CALL eosio_assert(((int_32)($7 + [-16]) > (int_32)[7]), [18481])
	CALL memcpy(($4 + [16]), ($2 + [168]), [8])
	*($2 + [156]) = ($4 + [24])
	CALL $40(($2 + [152]), $11)
	CALL $41(($2 + [152]), ($2 + [64]))
	$4 = *($2 + [152])
	CALL send_inline($4, (*($2 + [156]) - $4))
	$4 = *($2 + [152])
	if ( ($4 == 0) ){ goto $label$13 }
	*($2 + [156]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = *($2 + [92])
	if ( ($4 == 0) ){ goto $label$14 }
	*(($2 + [96])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$4 = *($2 + [80])
	if ( ($4 == 0) ){ goto $label$15 }
	*(($2 + [84])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$9
	if ( ((*(($2 + [136])) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($2 + [144])))
	
.LABEL $label$16
	$global$0 = ($2 + [176])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$5 = ($global$0 - [192])
	$global$0 = $5
	*($5 + [148]) = $2
	CALL require_auth(*($0))
	$6 = [0]
	CALL eosio_assert(((int_32)$2 > (int_32)[0]), [17685])
	$7 = CALL $78(($5 + [120]), $3)
	$2 = CALL $10(($5 + [136]), $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$1
	$7 = *($2)
	if ( ((uint_32)($7 + [-1]) > (uint_32)[30]) ){ goto $label$2 }
	$2 = *($2 + [4])
	if ( ((uint_32)($2 + [-1]) > (uint_32)[11]) ){ goto $label$2 }
	$6 = [1]
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$2 }
	if ( ((([1] << $2) & [2640]) == 0) ){ goto $label$3 }
	$6 = ((int_32)$7 < (int_32)[31])
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$2 != (int_32)[2]) ){ goto $label$2 }
	$6 = ((int_32)$7 < (int_32)[29])
	
.LABEL $label$2
	CALL eosio_assert($6, [17719])
	$2 = CALL $78(($5 + [96]), $4)
	$6 = CALL $10(($5 + [112]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$4
	$2 = [0]
	$7 = *($6)
	if ( ((uint_32)($7 + [-1]) > (uint_32)[30]) ){ goto $label$5 }
	$2 = [0]
	$6 = *($6 + [4])
	if ( ((uint_32)($6 + [-1]) > (uint_32)[11]) ){ goto $label$5 }
	$2 = [1]
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	if ( ((([1] << $6) & [2640]) == 0) ){ goto $label$6 }
	$2 = ((int_32)$7 < (int_32)[31])
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)[2]) ){ goto $label$5 }
	$2 = ((int_32)$7 < (int_32)[29])
	
.LABEL $label$5
	CALL eosio_assert($2, [17772])
	*(($5 + [88])) = [0]
	*($5 + [72]) = (int_64)-1
	*($5 + [80]) = (int_64)0
	$8 = *($0 + [8])
	*($5 + [56]) = $8
	*($5 + [64]) = $8
	$2 = *($1)
	if ( ($2 & [1]) ){ goto $label$8 }
	$2 = uint_32($2 >> [1])
	$6 = ($1 + [1])
	goto $label$7 
	
.LABEL $label$8
	$2 = *($1 + [4])
	$6 = *($1 + [8])
	
.LABEL $label$7
	*($5 + [44]) = $2
	*($5 + [40]) = $6
	*($5 + [16]) = *($5 + [40])
	CALL $8(($5 + [48]), ($5 + [56]), *(CALL $7(($5 + [24]), ($5 + [16]))))
	$2 = *($5 + [52])
	if ( ($2 == 0) ){ goto $label$10 }
	$8 = *($0)
	*($5 + [24]) = $1
	*($5 + [32]) = $3
	*($5 + [36]) = $4
	*($5 + [28]) = ($5 + [148])
	CALL eosio_assert([1], [18640])
	CALL $33(($5 + [56]), $2, $8, ($5 + [24]))
	goto $label$9 
	
.LABEL $label$10
	$8 = *(($0 + [8]))
	*($5 + [24]) = $1
	*($5 + [32]) = $3
	*($5 + [36]) = $4
	*($5 + [28]) = ($5 + [148])
	*($5 + [176]) = $8
	CALL eosio_assert(((int_64)*($5 + [56]) == (int_64)CALL $fimport$4()), [18585])
	*($5 + [156]) = ($5 + [24])
	*($5 + [152]) = ($5 + [56])
	*($5 + [160]) = ($5 + [176])
	*(($1 = CALL _Znwj([52])) + [8]) = [0]
	*($1) = (int_64)0
	*($1 + [16 align=4]) = (int_64)0
	*($1 + [24 align=4]) = (int_64)0
	*($1 + [32 align=4]) = (int_64)0
	*($1 + [40]) = ($5 + [56])
	CALL $34(($5 + [152]), $1)
	*($5 + [168]) = $1
	$0 = *($1)
	if ( ($0 & [1]) ){ goto $label$12 }
	$0 = uint_32($0 >> [1])
	$2 = ($1 + [1])
	goto $label$11 
	
.LABEL $label$12
	$0 = *(($1 + [4]))
	$2 = *(($1 + [8]))
	
.LABEL $label$11
	*($5 + [188]) = $0
	*($5 + [184]) = $2
	*($5 + [8]) = *($5 + [184])
	$8 = *(CALL $7(($5 + [152]), ($5 + [8])))
	*($5 + [152]) = $8
	$2 = *($1 + [44])
	*($5 + [184]) = $2
	$4 = ($5 + [84])
	$0 = *($4)
	if ( ((uint_32)$0 >= (uint_32)*(($5 + [88]))) ){ goto $label$14 }
	*($0 + [8]) = $8
	*($0 + [16]) = $2
	*($5 + [168]) = [0]
	*($0) = $1
	*($4) = ($0 + [24])
	$1 = *($5 + [168])
	*($5 + [168]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	goto $label$13 
	
.LABEL $label$14
	CALL $35(($5 + [80]), ($5 + [168]), ($5 + [152]), ($5 + [184]))
	$1 = *($5 + [168])
	*($5 + [168]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	
.LABEL $label$13
	if ( (*($1 + [28]) & [1]) ){ goto $label$19 }
	if ( (*($1 + [16]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($1 + [36])))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($1 + [24])))
	if ( (*($1) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$15
	CALL _ZdlPv($1)
	
.LABEL $label$9
	CALL $14(($5 + [80]))
	$global$0 = ($5 + [192])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [18675])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [18721])
	$7 = *($1)
	$8 = ($7 & [1])
	$6 = ($1 + [1])
	*(($5 = $4) + [16]) = ( *($1 + [8]) ? $6 : $8 )
	*($5 + [20]) = ( *($1 + [4]) ? uint_32($7 >> [1]) : $8 )
	*($5 + [8]) = *($5 + [16])
	$9 = *(CALL $7(($5 + [32]), ($5 + [8])))
	CALL $80($1, *($3))
	*($1 + [12]) = *(*($3 + [4]))
	$7 = ($1 + [16])
	CALL $80($7, *($3 + [8]))
	$8 = ($1 + [28])
	CALL $80($8, *($3 + [12]))
	$3 = *($1)
	$10 = ($3 & [1])
	*($5 + [16]) = ( *($1 + [8]) ? $6 : $10 )
	*($5 + [20]) = ( *($1 + [4]) ? uint_32($3 >> [1]) : $10 )
	*($5) = *($5 + [16])
	CALL eosio_assert(((int_64)$9 == (int_64)*(CALL $7(($5 + [32]), $5))), [18772])
	*($5 + [24]) = [0]
	*($5 + [16]) = ($5 + [24])
	$10 = ($1 + [12])
	*($5 + [36]) = $10
	*($5 + [32]) = $1
	*($5 + [40]) = $7
	*($5 + [44]) = $8
	CALL $64(($5 + [32]), ($5 + [16]))
	$6 = *($5 + [24])
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $118($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [36]) = $3
	*($5 + [32]) = $3
	*($5 + [40]) = ($3 + $6)
	CALL $40(($5 + [32]), $1)
	CALL eosio_assert(((int_32)(*($5 + [40]) - *($5 + [36])) > (int_32)[3]), [18481])
	CALL memcpy(*($5 + [36]), $10, [4])
	*($5 + [36]) = (*($5 + [36]) + [4])
	CALL $40(($5 + [32]), $7)
	CALL $40(($5 + [32]), $8)
	CALL db_update_i64(*(($1 + [44])), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$9 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $122($3)
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$3
	$global$0 = ($5 + [48])
}

int_32 .FUNC $30 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [18506])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $24($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [18506])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18985])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [19030])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19080])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}