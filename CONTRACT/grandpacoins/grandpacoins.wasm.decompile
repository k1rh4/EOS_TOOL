(data (i32.const 8192) "invalid symbol name\00")
(data (i32.const 8212) "invalid supply\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8313) "max-supply must be positive\00")
(data (i32.const 8341) "token with symbol already exists\00")
(data (i32.const 8374) "token with symbol does not exist, create token before update\00")
(data (i32.const 8435) "max-supply cannot be less than available supply\00")
(data (i32.const 8483) "symbol precision mismatch\00")
(data (i32.const 8509) "memo has more than 256 bytes\00")
(data (i32.const 8538) "token with symbol does not exist, create token before issue\00")
(data (i32.const 8598) "invalid quantity\00")
(data (i32.const 8615) "must issue positive quantity\00")
(data (i32.const 8644) "quantity exceeds available supply\00")
(data (i32.const 8678) "game is suspended while we make improvements. existing rewards are being paid.\00")
(data (i32.const 8757) "cannot transfer to self\00")
(data (i32.const 8781) "myeostoolkit\00")
(data (i32.const 8794) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8845) "error reading iterator\00")
(data (i32.const 8868) "read\00")
(data (i32.const 8873) "get\00")
(data (i32.const 8877) "singleton does not exist\00")
(data (i32.const 8902) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8951) "cannot pass end iterator to modify\00")
(data (i32.const 8986) "object passed to modify is not in multi_index\00")
(data (i32.const 9032) "cannot modify objects in table of another contract\00")
(data (i32.const 9083) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9142) "write\00")
(data (i32.const 9148) "cannot create objects in table of another contract\00")
(data (i32.const 9199) "attempt to add asset with different symbol\00")
(data (i32.const 9242) "addition underflow\00")
(data (i32.const 9261) "addition overflow\00")
(data (i32.const 9279) "cannot pass end iterator to erase\00")
(data (i32.const 9313) "cannot increment end iterator\00")
(data (i32.const 9343) "object passed to erase is not in multi_index\00")
(data (i32.const 9388) "cannot erase objects in table of another contract\00")
(data (i32.const 9438) "attempt to remove object that was not in multi_index\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_update_i64" (func $fimport$4 (param i32 i64 i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$7 (param i32)))
(import "env" "printn" (func $fimport$8 (param i64)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "action_data_size" (func $fimport$10 (result i32)))
(import "env" "read_action_data" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$13 (param i64)))
(import "env" "prints_l" (func $fimport$14 (param i32 i32)))
(import "env" "printui" (func $fimport$15 (param i64)))
(import "env" "abort" (func $fimport$16))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$19 (param i32 i32)))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "memset" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$31 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$32 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$33 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$34 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$37 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$39 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$40 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$41 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $36))
(export "_Znwj" (func $73))
(export "_ZdlPv" (func $75))
(export "_Znaj" (func $74))
(export "_ZdaPv" (func $76))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $8 $1 $3 $19 $20 $11 $21)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17900))
(global $global$2 i32 (i32.const 17900))


void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$0), [8794])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-7807364337756012544, (int_64)-7807364337756012544)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $39($0, $4)
	CALL eosio_assert(((int_32)*($4 + [56]) == (int_32)$0), [8794])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [8951])
	CALL $48($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $49($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [9148])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [8902])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8192])
	*($5 + [48]) = [0]
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [56]) = $1
	CALL $50(($4 + [16]), $5)
	*($4 + [32]) = $5
	*($4 + [16]) = (int_64)-7807364337756012544
	$7 = *($5 + [60])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = (int_64)-7807364337756012544
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $42(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( (*(($3 + [48])) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [8986])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9032])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [32])) = *(($3 + [32]))
	*(($1 + [24])) = *(($3 + [24]))
	*(($1 + [16])) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$6 = *($3 + [40])
	CALL $51(($1 + [40]), $6, ($6 + ((int_32)*(($3 + [44])) * (int_32)[40])), [0])
	
.LABEL $label$1
	CALL eosio_assert([1], [9083])
	$6 = *(($1 + [44]))
	$7 = (CASTING uint_64)(uint_32 $6)
	$3 = [40]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($6 == 0) ){ goto $label$3 }
	$3 = ((((int_32)((uint_32)(((int_32)$6 * (int_32)[40]) + [-40]) / (uint_32)[40]) * (int_32)[40]) + $3) + [40])
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$6 = CALL $82($3)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($6 + $3)
	*($5 + [16]) = $5
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [24])
	*($5 + [36]) = ($1 + [32])
	*($5 + [40]) = ($1 + [40])
	CALL $52(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [60]), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)-7807364337756012544) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $85($6)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-7807364337756012544) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = (int_64)-7807364337756012543
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [48])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8868])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $44(*($1), *($0 + [16]))
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( (*(($1 + [48])) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [40]))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [8902])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8192])
	*(($0 + [48])) = [0]
	*($0 + [40 align=4]) = (int_64)0
	*($0 + [56]) = $1
	*($3) = *($2 + [4])
	*($3 + [12]) = ($0 + [8])
	*($3 + [8]) = $0
	*($3 + [16]) = ($0 + [24])
	*($3 + [20]) = ($0 + [32])
	*($3 + [24]) = ($0 + [40])
	CALL $43(($3 + [8]), $3)
	*($0 + [60]) = *(*($2 + [8]))
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$3 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$1), [8794])
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	$2 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-7807364337756012544, (int_64)-7807364337756012544)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $39($1, $2)
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$1), [8794])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8877])
	*($0 + [40]) = [0]
	*(($0 + [48])) = [0]
	*(($0 + [32])) = *(($3 + [32]))
	*(($0 + [24])) = *(($3 + [24]))
	*(($0 + [16])) = *(($3 + [16]))
	*(($0 + [8])) = *(($3 + [8]))
	*($0) = *($3)
	$2 = *(($3 + [44]))
	*(($0 + [44])) = $2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[107374183]) ){ goto $label$3 }
	$1 = CALL _Znwj(((int_32)$2 * (int_32)[40]))
	*(($0 + [48])) = $2
	*(($0 + [40])) = $1
	$2 = *(($3 + [44]))
	if ( ($2 == 0) ){ goto $label$4 }
	$0 = *($3 + [40])
	
.LOOP $label$5:
	*($1) = *($0)
	*(($1 + [32])) = *(($0 + [32]))
	*(($1 + [24])) = *(($0 + [24]))
	*(($1 + [16])) = *(($0 + [16]))
	*(($1 + [8])) = *(($0 + [8]))
	$1 = ($1 + [40])
	$0 = ($0 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL abort()
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = *($2)
	$6 = ((int_32)($5 - *($1)) / (int_32)[40])
	$7 = *($1 + [4])
	$2 = *($1 + [8])
	if ( (([107374182] - $2) <= (($3 - $2) + $7)) ){ goto $label$1 }
	if ( ((uint_32)$2 > (uint_32)[536870911]) ){ goto $label$3 }
	$2 = ((uint_32)($2 << [3]) / (uint_32)[5])
	goto $label$2 
	
.LABEL $label$3
	$2 = ( [-1] ? ($2 << [3]) : ((uint_32)$2 > (uint_32)[-1610612737]) )
	
.LABEL $label$2
	$2 = ( $2 ? [107374182] : ($2 <= [107374182]) )
	$7 = ($7 + $3)
	$8 = ( $7 ? $2 : ((uint_32)$7 > (uint_32)$2) )
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$1 }
	$9 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	$2 = $9
	$10 = *($1)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$4 }
	$2 = $9
	if ( ($10 == 0) ){ goto $label$4 }
	$7 = $10
	$2 = $9
	
.LOOP $label$5:
	*($2) = *($7)
	*(($2 + [32])) = *(($7 + [32]))
	*(($2 + [24])) = *(($7 + [24]))
	*(($2 + [16])) = *(($7 + [16]))
	*(($2 + [8])) = *(($7 + [8]))
	$2 = ($2 + [40])
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	*($2) = *($4)
	*(($2 + [32])) = *(($4 + [32]))
	*(($2 + [24])) = *(($4 + [24]))
	*(($2 + [16])) = *(($4 + [16]))
	*($2 + [8]) = *($4 + [8])
	$2 = ($2 + ((int_32)$3 * (int_32)[40]))
	if ( ($10 == 0) ){ goto $label$6 }
	$7 = ($10 + ((int_32)*(($1 + [4])) * (int_32)[40]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	*($2) = *($5)
	*(($2 + [32])) = *(($5 + [32]))
	*(($2 + [24])) = *(($5 + [24]))
	*(($2 + [16])) = *(($5 + [16]))
	*(($2 + [8])) = *(($5 + [8]))
	$2 = ($2 + [40])
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	CALL _ZdlPv(*($1))
	
.LABEL $label$6
	*($1) = $9
	*(($1 + [8])) = $8
	*(($1 + [4])) = ((int_32)($2 - $9) / (int_32)[40])
	*($0) = ($9 + ((int_32)$6 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [4]) = [0]
	*($0) = [0]
	$5 = *($1 + [4])
	$6 = ((int_32)$5 * (int_32)[40])
	$4 = *($1)
	$7 = ($4 + $6)
	if ( ($6 == 0) ){ goto $label$4 }
	$8 = ((int_32)$6 / (int_32)[40])
	$9 = *($2)
	$6 = $4
	
.LOOP $label$5:
	$11 = (uint_64)(*($11) <= $9)
	$10 = uint_32($8 >> [1])
	$11 = ($6 + ((int_32)$10 * (int_32)[40]))
	$6 = ( ($11 + [40]) ? $6 : $11 )
	$8 = ( (($8 + [-1]) - $10) ? $10 : $11 )
	if ( $8 ){ goto $label$5 }
	$8 = ((int_32)$7 != (int_32)$6)
	if ( ($8 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = $4
	$8 = ((int_32)$7 != (int_32)$6)
	if ( $8 ){ goto $label$2 }
	
.LABEL $label$3
	*(($0 + [4])) = [1]
	goto $label$1 
	
.LABEL $label$2
	$12 = *($6)
	$9 = *($2)
	*(($0 + [4])) = (uint_64)($9 <= $12)
	if ( (uint_64)($9 <= $12) ){ goto $label$1 }
	$6 = ($4 + ((int_32)((int_32)($6 - $4) / (int_32)[40]) * (int_32)[40]))
	*($0) = $6
	*($3) = $6
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $6
	if ( ((int_32)*($1 + [8]) != (int_32)$5) ){ goto $label$6 }
	CALL $47($3, $1, ($3 + [8]), [1], $2)
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$11 = ((int_32)($6 - $4) / (int_32)[40])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($8 = ($4 + ((int_32)$5 * (int_32)[40]))) + [8]) = *(($7 + [-32]))
	*(($8 + [32])) = *(($7 + [-8]))
	*(($8 + [24])) = *(($7 + [-16]))
	*(($8 + [16])) = *(($7 + [-24]))
	$8 = ($7 + [-40])
	*($7) = *($8)
	*(($10 = ($1 + [4]))) = (*($10) + [1])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$10 = ($8 + [-40])
	*($8) = *($10)
	*(($8 + [8])) = *(($8 + [-32]))
	*(($8 + [16])) = *(($8 + [-24]))
	*(($8 + [24])) = *(($8 + [-16]))
	*(($8 + [32])) = *(($8 + [-8]))
	$8 = $10
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$9
	*($6) = *($2)
	*(($6 + [32])) = *(($2 + [32]))
	*(($6 + [24])) = *(($2 + [24]))
	*(($6 + [16])) = *(($2 + [16]))
	*($6 + [8]) = *($2 + [8])
	goto $label$7 
	
.LABEL $label$8
	*($7) = *($2)
	*((($6 = ($4 + ((int_32)$5 * (int_32)[40]))) + [32])) = *(($2 + [32]))
	*(($6 + [24])) = *(($2 + [24]))
	*(($6 + [16])) = *(($2 + [16]))
	*($6 + [8]) = *($2 + [8])
	*(($6 = ($1 + [4]))) = (*($6) + [1])
	
.LABEL $label$7
	$6 = (*($1) + ((int_32)$11 * (int_32)[40]))
	*($3) = $6
	*($0) = $6
	$global$0 = ($3 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = [0]
	*($1 + [4]) = [0]
	$4 = *($0 + [4])
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($6)), [8873])
	$4 = *($7)
	$8 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$3 = ($3 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	if ( ($8 == 0) ){ goto $label$2 }
	$9 = ($8 + [-1])
	$8 = (($2 + [56]) + [8])
	$7 = (($2 + [8]) + [24])
	$6 = (($2 + [8]) + [16])
	$10 = (($2 + [8]) + [8])
	$3 = ($0 + [4])
	$11 = ($2 + [68])
	
.LOOP $label$3:
	*($10) = (int_64)0
	*($6) = (int_64)0
	*($7) = (int_64)0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]), [8868])
	CALL memcpy(($2 + [40]), *($3), [8])
	*($3) = (*($3) + [8])
	*($2 + [48]) = $0
	*($8) = $6
	*($11) = $7
	*($2 + [60]) = $10
	*($2 + [56]) = ($2 + [8])
	CALL $45(($2 + [56]), ($2 + [48]))
	*($8) = *($2 + [8])
	*(($8 + [8])) = *($10)
	*(($8 + [16])) = *($6)
	*(($8 + [24])) = *($7)
	*($2 + [56]) = *($2 + [40])
	CALL $46(($2 + [48]), $1, ($2 + [56]))
	if ( ($9 == 0) ){ goto $label$2 }
	$9 = ($9 + [-1])
	$4 = *($3)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
	return $0
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $1
	CALL require_auth(*($0))
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$1 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8192])
	$10 = [0]
	$8 = [0]
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$1 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$10 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [8212])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8313])
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1 = *($0)
	*($3 + [16]) = $1
	*($3 + [24]) = $6
	$4 = CALL db_find_i64($1, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	$10 = CALL $4(($3 + [16]), $4)
	CALL eosio_assert(((int_32)*($10 + [72]) == (int_32)($3 + [16])), [8794])
	$5 = *(($2 + [8]))
	$11 = *($2)
	
.LABEL $label$11
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8374])
	CALL eosio_assert(((int_64)*($10) <= (int_64)$11), [8435])
	CALL eosio_assert(((int_64)$5 == (int_64)*($10 + [8])), [8483])
	*($3 + [8]) = $2
	*($3 + [12]) = ($3 + [56])
	CALL $9(($3 + [16]), $10, ($3 + [8]))
	$9 = *($3 + [40])
	if ( ($9 == 0) ){ goto $label$12 }
	$10 = ($3 + [44])
	$8 = *($10)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$14 }
	
.LOOP $label$15:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	if ( (*(($4 + [68])) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($4 + [60]))
	
.LABEL $label$17
	if ( (*(($4 + [56])) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($4 + [48]))
	
.LABEL $label$18
	CALL _ZdlPv($4)
	
.LABEL $label$16
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$15 }
	$4 = *(($3 + [40]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $9
	
.LABEL $label$13
	*($10) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$global$0 = ($3 + [64])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [8986])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9032])
	$5 = *($2)
	*($1 + [16]) = *($5)
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [32]) = *(*($2 + [4]))
	$6 = *($1 + [8])
	CALL eosio_assert([1], [9083])
	$7 = ($1 + [32])
	$8 = ($1 + [16])
	$5 = *(($1 + [52]))
	$9 = (CASTING uint_64)(uint_32 $5)
	$2 = [48]
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($5 == 0) ){ goto $label$2 }
	$2 = ((((int_32)((uint_32)(((int_32)$5 * (int_32)[24]) + [-24]) / (uint_32)[24]) * (int_32)[24]) + $2) + [24])
	
.LABEL $label$2
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = *(($1 + [64]))
	$9 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ($5 == 0) ){ goto $label$4 }
	$2 = ((((int_32)((uint_32)(((int_32)$5 * (int_32)[24]) + [-24]) / (uint_32)[24]) * (int_32)[24]) + $2) + [24])
	
.LABEL $label$4
	if ( ($2 <= [513]) ){ goto $label$6 }
	$5 = CALL $82($2)
	goto $label$5 
	
.LABEL $label$6
	$5 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$5
	*($4 + [4]) = $5
	*($4) = $5
	*($4 + [8]) = ($5 + $2)
	*($4 + [16]) = $4
	*($4 + [28]) = $8
	*($4 + [32]) = $7
	*($4 + [24]) = $1
	*($4 + [36]) = ($1 + [40])
	*($4 + [40]) = ($1 + [48])
	*($4 + [44]) = ($1 + [60])
	CALL $10(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [76]), (int_64)0, $5, $2)
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $85($5)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$7
	$global$0 = ($4 + [48])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1 + [8]) = *($5 + [8])
	$6 = *($0)
	*(($1 + [24])) = *($5 + [8])
	*($1 + [16]) = *($5)
	*($1 + [32]) = *(*($4 + [4]))
	$7 = ($1 + [32])
	$8 = ($1 + [16])
	$4 = *(($1 + [52]))
	$9 = (CASTING uint_64)(uint_32 $4)
	$5 = [48]
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ((((int_32)((uint_32)(((int_32)$4 * (int_32)[24]) + [-24]) / (uint_32)[24]) * (int_32)[24]) + $5) + [24])
	
.LABEL $label$2
	$4 = *(($1 + [64]))
	$9 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ((((int_32)((uint_32)(((int_32)$4 * (int_32)[24]) + [-24]) / (uint_32)[24]) * (int_32)[24]) + $5) + [24])
	
.LABEL $label$4
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL $82($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $8
	*($3 + [24]) = $1
	*($3 + [32]) = $7
	*($3 + [36]) = ($1 + [40])
	*($3 + [40]) = ($1 + [48])
	*($3 + [44]) = ($1 + [60])
	CALL $10(($3 + [24]), ($3 + [16]))
	$9 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8
	*($1 + [76]) = CALL db_store_i64(*($6 + [8]), (int_64)-4157508551318700032, *(*($0 + [8])), $9), $4, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$9 >= (uint_64)*($6 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $85($4)
	if ( (uint_64)($9 <= *($6 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($6 + [16])) = ((int_64)$9 + (int_64)1)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [48])
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( (*(($1 + [68])) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [60]))
	
.LABEL $label$11
	if ( (*(($1 + [56])) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($1 + [48]))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8845])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $82($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([88])
	CALL $5($5)
	*($5 + [72]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [60])
	CALL $55(($3 + [40]), ($3 + [32]))
	*($5 + [76]) = $1
	*($3 + [32]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [40]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $7(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $85($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*(($1 + [68])) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($1 + [60]))
	
.LABEL $label$10
	if ( (*(($1 + [56])) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [48]))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $5 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [8902])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8192])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [8902])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8192])
	*($0 + [48 align=4]) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = (int_64)0
	return $0
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [16])
	$global$0 = $4
	$6 = *($1 + [4])
	$5 = *($1)
	$7 = ($5 + ((int_32)$6 * (int_32)[40]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$8 = *($3)
	if ( ((uint_64)$8 >= (uint_64)*($2)) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$8 = *($3)
	$9 = ($2 + [-40])
	$10 = *($9)
	if ( (uint_64)($10 <= $8) ){ goto $label$4 }
	if ( ((uint_64)$8 >= (uint_64)$10) ){ goto $label$3 }
	$11 = ($9 - $5)
	if ( ($11 == 0) ){ goto $label$6 }
	$11 = ((int_32)$11 / (int_32)[40])
	$2 = $5
	
.LOOP $label$9:
	$13 = (uint_64)(*($13) <= $8)
	$12 = uint_32($11 >> [1])
	$13 = ($2 + ((int_32)$12 * (int_32)[40]))
	$2 = ( ($13 + [40]) ? $2 : $13 )
	$11 = ( (($11 + [-1]) - $12) ? $12 : $13 )
	if ( $11 ){ goto $label$9 }
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$7
	$11 = ($7 - $2)
	if ( ($11 == 0) ){ goto $label$10 }
	$11 = ((int_32)$11 / (int_32)[40])
	
.LOOP $label$11:
	$13 = (uint_64)(*($13) <= $8)
	$12 = uint_32($11 >> [1])
	$13 = ($2 + ((int_32)$12 * (int_32)[40]))
	$2 = ( ($13 + [40]) ? $2 : $13 )
	$11 = ( (($11 + [-1]) - $12) ? $12 : $13 )
	if ( $11 ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$9 = $2
	if ( ((uint_64)$8 >= (uint_64)*($2)) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	$2 = $5
	if ( ((int_32)$9 == (int_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	$9 = $2
	if ( ((uint_64)$8 >= (uint_64)*($2)) ){ goto $label$3 }
	
.LABEL $label$4
	*($4 + [8]) = $2
	if ( ((int_32)*($1 + [8]) != (int_32)$6) ){ goto $label$12 }
	CALL $47($0, $1, ($4 + [8]), [1], $3)
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$12
	$13 = ((int_32)($2 - $5) / (int_32)[40])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	*(($11 = ($5 + ((int_32)$6 * (int_32)[40]))) + [8]) = *(($7 + [-32]))
	*(($11 + [32])) = *(($7 + [-8]))
	*(($11 + [24])) = *(($7 + [-16]))
	*(($11 + [16])) = *(($7 + [-24]))
	$11 = ($7 + [-40])
	*($7) = *($11)
	*(($12 = ($1 + [4]))) = (*($12) + [1])
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$12 = ($11 + [-40])
	*($11) = *($12)
	*(($11 + [8])) = *(($11 + [-32]))
	*(($11 + [16])) = *(($11 + [-24]))
	*(($11 + [24])) = *(($11 + [-16]))
	*(($11 + [32])) = *(($11 + [-8]))
	$11 = $12
	if ( ((int_32)$2 != (int_32)$12) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = *($3)
	*(($2 + [32])) = *(($3 + [32]))
	*(($2 + [24])) = *(($3 + [24]))
	*(($2 + [16])) = *(($3 + [16]))
	*($2 + [8]) = *($3 + [8])
	goto $label$1 
	
.LABEL $label$3
	*($0) = ($5 + ((int_32)((int_32)($9 - $5) / (int_32)[40]) * (int_32)[40]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$2
	*($7) = *($3)
	*((($11 = ($5 + ((int_32)$6 * (int_32)[40]))) + [32])) = *(($3 + [32]))
	*(($11 + [24])) = *(($3 + [24]))
	*(($11 + [16])) = *(($3 + [16]))
	*($11 + [8]) = *($3 + [8])
	*(($11 = ($1 + [4]))) = (*($11) + [1])
	
.LABEL $label$1
	*($0) = (*($1) + ((int_32)$13 * (int_32)[40]))
	$global$0 = ($4 + [16])
}

void .FUNC $3 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [48]) = $1
	CALL require_auth(*($0))
	$4 = [0]
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$1 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8192])
	$7 = [0]
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$1 = $5
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [8212])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8313])
	*(($8 = ($3 + [40]))) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$1 = *($0)
	*($3 + [8]) = $1
	*($3 + [16]) = $5
	$4 = CALL db_find_i64($1, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $4(($3 + [8]), $4) + [72]) == (int_32)($3 + [8])), [8794])
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	
.LABEL $label$11
	CALL eosio_assert($4, [8341])
	$1 = *($0)
	*($3) = $2
	*($3 + [4]) = ($3 + [48])
	*($3 + [88]) = $1
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [9148])
	*($3 + [68]) = $3
	*($3 + [64]) = ($3 + [8])
	*($3 + [72]) = ($3 + [88])
	$4 = CALL _Znwj([88])
	CALL $5($4)
	*($4 + [72]) = ($3 + [8])
	CALL $6(($3 + [64]), $4)
	*($3 + [80]) = $4
	$1 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($3 + [64]) = $1)
	$2 = *($4 + [76])
	*($3 + [60]) = $2
	$0 = ($3 + [36])
	$7 = *($0)
	if ( ((uint_32)$7 >= (uint_32)*($8)) ){ goto $label$17 }
	*($7 + [8]) = $1
	*($7 + [16]) = $2
	*($3 + [80]) = [0]
	*($7) = $4
	*($0) = ($7 + [24])
	$4 = *($3 + [80])
	*($3 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL $7(($3 + [32]), ($3 + [80]), ($3 + [64]), ($3 + [60]))
	$4 = *($3 + [80])
	*($3 + [80]) = [0]
	if ( $4 ){ goto $label$15 }
	
.LABEL $label$16
	$8 = *($3 + [32])
	if ( ($8 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( (*(($4 + [68])) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($4 + [60]))
	
.LABEL $label$18
	if ( (*(($4 + [56])) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*($4 + [48]))
	
.LABEL $label$19
	CALL _ZdlPv($4)
	$8 = *($3 + [32])
	if ( $8 ){ goto $label$13 }
	
.LABEL $label$14
	$global$0 = ($3 + [96])
	return 
	
.LABEL $label$13
	$2 = ($3 + [36])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$21 }
	
.LOOP $label$22:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	if ( (*(($4 + [68])) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($4 + [60]))
	
.LABEL $label$24
	if ( (*(($4 + [56])) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*($4 + [48]))
	
.LABEL $label$25
	CALL _ZdlPv($4)
	
.LABEL $label$23
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$22 }
	$4 = *(($3 + [32]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $8
	
.LABEL $label$20
	*($2) = $8
	CALL _ZdlPv($4)
	$global$0 = ($3 + [96])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($0 + [80])) = $1
	*(($0 + [56])) = *($2)
	*(($0 + [64])) = *(($2 + [8]))
	$2 = ((int_32)*(($0 + [92])) * (int_32)[40])
	$5 = ($0 + [88])
	$6 = *($5)
	$7 = ($6 + $2)
	if ( ($2 == 0) ){ goto $label$1 }
	$2 = ((int_32)$2 / (int_32)[40])
	$8 = $6
	
.LOOP $label$2:
	$10 = (uint_64)(*($10) <= $1)
	$9 = uint_32($2 >> [1])
	$10 = ($8 + ((int_32)$9 * (int_32)[40]))
	$11 = ($10 + [40])
	$8 = ( $11 ? $8 : $10 )
	$6 = ( $11 ? $6 : $10 )
	$2 = ( (($2 + [-1]) - $9) ? $9 : $10 )
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	if ( ((uint_64)*($6) <= (uint_64)$1) ){ goto $label$3 }
	
.LABEL $label$4
	*(($4 + [16])) = (int_64)0
	*(($4 + [24])) = (int_64)0
	*(($4 + [32])) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4) = $1
	CALL $2(($4 + [40]), $5, $6, $4)
	$6 = *($4 + [40])
	
.LABEL $label$3
	*($6 + [8]) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$2 = ((int_32)*(($0 + [92])) * (int_32)[40])
	$6 = *(($0 + [88]))
	$0 = ($6 + $2)
	if ( ($2 == 0) ){ goto $label$5 }
	$2 = ((int_32)$2 / (int_32)[40])
	$8 = $6
	
.LOOP $label$6:
	$10 = (uint_64)(*($10) <= $1)
	$9 = uint_32($2 >> [1])
	$10 = ($8 + ((int_32)$9 * (int_32)[40]))
	$11 = ($10 + [40])
	$8 = ( $11 ? $8 : $10 )
	$6 = ( $11 ? $6 : $10 )
	$2 = ( (($2 + [-1]) - $9) ? $9 : $10 )
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$8 }
	if ( ((uint_64)*($6) <= (uint_64)$1) ){ goto $label$7 }
	
.LABEL $label$8
	*(($4 + [16])) = (int_64)0
	*(($4 + [24])) = (int_64)0
	*(($4 + [32])) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4) = $1
	CALL $2(($4 + [40]), $5, $6, $4)
	$6 = *($4 + [40])
	
.LABEL $label$7
	*(($6 + [32])) = $3
	$global$0 = ($4 + [48])
}

void .FUNC $14 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $60($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $61(($4 + [72]), ($4 + [64]))
	CALL $62(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $80(($4 + [8]))
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8845])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $82($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([64])
	$6 = CALL $66($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [56])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $18(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $85($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( (*(($5 + [48])) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($5 + [40]))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [8986])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9032])
	$5 = *($1 + [8])
	$2 = *($2)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$5), [9199])
	$6 = ((int_64)*($1) + (int_64)*($2))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9242])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9261])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$6) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9083])
	$7 = *(($1 + [44]))
	$5 = (CASTING uint_64)(uint_32 $7)
	$2 = [33]
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$2 }
	$2 = ((((int_32)((uint_32)(((int_32)$7 * (int_32)[24]) + [-24]) / (uint_32)[24]) * (int_32)[24]) + $2) + [24])
	
.LABEL $label$2
	if ( ($2 <= [513]) ){ goto $label$4 }
	$7 = CALL $82($2)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$3
	*($4 + [4]) = $7
	*($4) = $7
	*($4 + [8]) = ($7 + $2)
	*($4 + [16]) = $4
	*($4 + [24]) = $1
	*($4 + [28]) = ($1 + [16])
	*($4 + [32]) = ($1 + [24])
	*($4 + [36]) = ($1 + [32])
	*($4 + [40]) = ($1 + [40])
	CALL $23(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [56]), (int_64)0, $7, $2)
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $85($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	*($1) = *($6)
	*(($1 + [8])) = *(($6 + [8]))
	*($1 + [16]) = *(*($5 + [4]))
	$7 = ($1 + [16])
	$6 = *(($1 + [44]))
	$8 = (CASTING uint_64)(uint_32 $6)
	$5 = [33]
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($6 == 0) ){ goto $label$2 }
	$5 = ((((int_32)((uint_32)(((int_32)$6 * (int_32)[24]) + [-24]) / (uint_32)[24]) * (int_32)[24]) + $5) + [24])
	
.LABEL $label$2
	if ( ($5 <= [513]) ){ goto $label$4 }
	$6 = CALL $82($5)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$3
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [24])
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = ($1 + [40])
	CALL $23(($3 + [24]), ($3 + [16]))
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [56]) = CALL db_store_i64(*($4 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $8), $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $85($6)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ((int_64)$8 + (int_64)1)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [48])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $59(*($1), *($0 + [16]))
	CALL $59(*($1), *($0 + [20]))
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8192])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [8509])
	$9 = [0]
	*(($4 + [120])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$7 = *($0)
	*($4 + [88]) = $7
	*($4 + [96]) = $6
	$11 = [0]
	$5 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $4(($4 + [88]), $5)
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)($4 + [88])), [8794])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8538])
	CALL require_auth(*($11 + [32]))
	$12 = ($2 + [8])
	$13 = *($12)
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$7 = (uint_64)$13 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$13 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$9
	CALL eosio_assert($9, [8598])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [8615])
	CALL eosio_assert(((int_64)$13 == (int_64)*($11 + [8])), [8483])
	CALL eosio_assert(((int_64)$6 <= (int_64))(*($11 + [16]) - *($11))), [8644])
	*($4 + [128]) = $2
	CALL $12(($4 + [88]), $11, ($4 + [128]))
	$5 = ($11 + [32])
	$7 = *($5)
	*(($9 = (($4 + [72]) + [8]))) = *($12)
	$8 = *($2)
	*((($4 + [8]) + [8])) = *($9)
	*($4 + [72]) = $8
	*($4 + [8]) = *($4 + [72])
	CALL $13($0, $7, ($4 + [8]), $7, [1])
	$8 = *($5)
	if ( ((int_64)$8 == (int_64)$1) ){ goto $label$14 }
	$6 = *($0)
	$7 = (int_64)6
	
.LOOP $label$15:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$15 }
	*(($9 = (($4 + [24]) + [24]))) = *(($2 + [8]))
	*($4 + [32]) = $1
	*($4 + [24]) = $8
	*($4 + [40]) = *($2)
	CALL $78(($4 + [56]), $3)
	*(($5 = CALL _Znwj([16]))) = $8
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [128]) + [24])) = *($9)
	$9 = (($4 + [24]) + [40])
	*(($10 = (($4 + [128]) + [40]))) = *($9)
	*($9) = [0]
	*($4 + [176]) = $5
	$5 = ($5 + [16])
	*($4 + [184]) = $5
	*($4 + [180]) = $5
	*($4 + [128]) = *($4 + [24])
	*($4 + [136]) = *($4 + [32])
	*($4 + [144]) = *($4 + [40])
	*($4 + [160]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $14($6, (int_64)-3617168760277827584, ($4 + [176]), ($4 + [128]))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$16
	$5 = *($4 + [176])
	if ( ($5 == 0) ){ goto $label$17 }
	*($4 + [180]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$14
	$10 = *($4 + [112])
	if ( ($10 == 0) ){ goto $label$18 }
	$11 = ($4 + [116])
	$9 = *($11)
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$20 }
	
.LOOP $label$21:
	$9 = ($9 + [-24])
	$5 = *($9)
	*($9) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	if ( (*(($5 + [68])) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*($5 + [60]))
	
.LABEL $label$23
	if ( (*(($5 + [56])) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($5 + [48]))
	
.LABEL $label$24
	CALL _ZdlPv($5)
	
.LABEL $label$22
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$21 }
	$5 = *(($4 + [112]))
	goto $label$19 
	
.LABEL $label$20
	$5 = $10
	
.LABEL $label$19
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$18
	$global$0 = ($4 + [192])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [8986])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9032])
	$5 = *($1 + [8])
	$2 = *($2)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$5), [9199])
	$6 = ((int_64)*($1) + (int_64)*($2))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9242])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9261])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$6) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9083])
	$7 = *(($1 + [52]))
	$5 = (CASTING uint_64)(uint_32 $7)
	$2 = [48]
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$2 }
	$2 = ((((int_32)((uint_32)(((int_32)$7 * (int_32)[24]) + [-24]) / (uint_32)[24]) * (int_32)[24]) + $2) + [24])
	
.LABEL $label$2
	$7 = *(($1 + [64]))
	$5 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($7 == 0) ){ goto $label$4 }
	$2 = ((((int_32)((uint_32)(((int_32)$7 * (int_32)[24]) + [-24]) / (uint_32)[24]) * (int_32)[24]) + $2) + [24])
	
.LABEL $label$4
	if ( ($2 <= [513]) ){ goto $label$6 }
	$7 = CALL $82($2)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$5
	*($4 + [4]) = $7
	*($4) = $7
	*($4 + [8]) = ($7 + $2)
	*($4 + [16]) = $4
	*($4 + [24]) = $1
	*($4 + [28]) = ($1 + [16])
	*($4 + [32]) = ($1 + [32])
	*($4 + [36]) = ($1 + [40])
	*($4 + [40]) = ($1 + [48])
	*($4 + [44]) = ($1 + [60])
	CALL $10(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [76]), (int_64)0, $7, $2)
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $85($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$7
	$global$0 = ($4 + [48])
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$5 = ($global$0 - [96])
	$global$0 = $5
	*($5 + [59]) = $4
	$4 = [0]
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$6 = *($0)
	*($5 + [16]) = $6
	$7 = *($2 + [8])
	*($5 + [24]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $15(($5 + [16]), $0)
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)($5 + [16])), [8794])
	*($5 + [64]) = $2
	CALL eosio_assert([1], [8951])
	CALL $16(($5 + [16]), $4, ($5 + [64]))
	$0 = *($5 + [40])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($5 + [8]) = $2
	*($5 + [12]) = ($5 + [59])
	*($5 + [88]) = $3
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$3()), [9148])
	*($5 + [68]) = ($5 + [8])
	*($5 + [64]) = ($5 + [16])
	*($5 + [72]) = ($5 + [88])
	*(($8 = CALL _Znwj([64])) + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [8902])
	$1 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$1 = $6
	$2 = [1]
	$0 = $4
	$4 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$1 = $6
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$2 = ((int_32)$4 < (int_32)[6])
	$0 = ($4 + [1])
	$4 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$4 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8192])
	*($8 + [24]) = (int_64)0
	*($8 + [16]) = [0]
	*($8 + [32]) = (int_64)0
	*($8 + [40 align=4]) = (int_64)0
	*($8 + [48]) = [0]
	*($8 + [52]) = ($5 + [16])
	CALL $17(($5 + [64]), $8)
	*($5 + [80]) = $8
	$1 = (uint_64)*(($8 + [8])) >> (uint_64)(int_64)8
	*($5 + [64]) = $1)
	$2 = *($8 + [56])
	*($5 + [60]) = $2
	$0 = ($5 + [44])
	$4 = *($0)
	if ( ((uint_32)$4 >= (uint_32)*(($5 + [48]))) ){ goto $label$11 }
	*($4 + [8]) = $1
	*($4 + [16]) = $2
	*($5 + [80]) = [0]
	*($4) = $8
	*($0) = ($4 + [24])
	$4 = *($5 + [80])
	*($5 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $18(($5 + [40]), ($5 + [80]), ($5 + [64]), ($5 + [60]))
	$4 = *($5 + [80])
	*($5 + [80]) = [0]
	if ( $4 ){ goto $label$9 }
	
.LABEL $label$10
	$0 = *($5 + [40])
	if ( ($0 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$9
	if ( (*(($4 + [48])) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($4 + [40]))
	
.LABEL $label$12
	CALL _ZdlPv($4)
	$0 = *($5 + [40])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($5 + [44])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$16 }
	if ( (*(($2 + [48])) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($2 + [40]))
	
.LABEL $label$17
	CALL _ZdlPv($2)
	
.LABEL $label$16
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($5 + [40]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $0
	
.LABEL $label$13
	*($8) = $0
	CALL _ZdlPv($4)
	$global$0 = ($5 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [96])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $85($0)
	
.LABEL $label$1
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( (*(($1 + [48])) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [40]))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	CALL eosio_assert([0], [8678])
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [8757])
	CALL require_auth($1)
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = *($2)
	$6 = ((int_32)($5 - *($1)) / (int_32)[24])
	$7 = *($1 + [4])
	$2 = *($1 + [8])
	if ( (([178956970] - $2) <= (($3 - $2) + $7)) ){ goto $label$1 }
	if ( ((uint_32)$2 > (uint_32)[536870911]) ){ goto $label$3 }
	$2 = ((uint_32)($2 << [3]) / (uint_32)[5])
	goto $label$2 
	
.LABEL $label$3
	$2 = ( [-1] ? ($2 << [3]) : ((uint_32)$2 > (uint_32)[-1610612737]) )
	
.LABEL $label$2
	$2 = ( $2 ? [178956970] : ($2 <= [178956970]) )
	$7 = ($7 + $3)
	$8 = ( $7 ? $2 : ((uint_32)$7 > (uint_32)$2) )
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$1 }
	$9 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	$2 = $9
	$10 = *($1)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$4 }
	$2 = $9
	if ( ($10 == 0) ){ goto $label$4 }
	$7 = $10
	$2 = $9
	
.LOOP $label$5:
	*($2) = *($7)
	*(($2 + [16])) = *(($7 + [16]))
	*(($2 + [8])) = *(($7 + [8]))
	$2 = ($2 + [24])
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	*($2) = *($4)
	*(($2 + [16])) = *(($4 + [16]))
	*($2 + [8]) = *($4 + [8])
	$2 = ($2 + ((int_32)$3 * (int_32)[24]))
	if ( ($10 == 0) ){ goto $label$6 }
	$7 = ($10 + ((int_32)*(($1 + [4])) * (int_32)[24]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	*($2) = *($5)
	*(($2 + [16])) = *(($5 + [16]))
	*(($2 + [8])) = *(($5 + [8]))
	$2 = ($2 + [24])
	$5 = ($5 + [24])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	CALL _ZdlPv(*($1))
	
.LABEL $label$6
	*($1) = $9
	*(($1 + [8])) = $8
	*(($1 + [4])) = ((int_32)($2 - $9) / (int_32)[24])
	*($0) = ($9 + ((int_32)$6 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [9142])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$6 = *(($1 + [4]))
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = *($1)
	$5 = ($7 + ((int_32)$6 * (int_32)[24]))
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $3) > (int_32)[7]), [9142])
	CALL memcpy(*($6), $7, [8])
	$3 = (*($6) + [8])
	*($6) = $3
	CALL eosio_assert(((int_32)(*($8) - $3) > (int_32)[7]), [9142])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$3 = (*($6) + [8])
	*($6) = $3
	CALL eosio_assert(((int_32)(*($8) - $3) > (int_32)[7]), [9142])
	CALL memcpy(*($6), ($7 + [16]), [8])
	$3 = (*($6) + [8])
	*($6) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [32])) = *(($5 + [32]))
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$1 }
	$6 = *($5 + [40])
	CALL $51(($1 + [40]), $6, ($6 + ((int_32)*(($5 + [44])) * (int_32)[40])), [0])
	
.LABEL $label$1
	$6 = *(($1 + [44]))
	$7 = (CASTING uint_64)(uint_32 $6)
	$5 = [40]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	if ( ($6 == 0) ){ goto $label$3 }
	$5 = ((((int_32)((uint_32)(((int_32)$6 * (int_32)[40]) + [-40]) / (uint_32)[40]) * (int_32)[40]) + $5) + [40])
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$5 }
	$6 = CALL $82($5)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [24])
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = ($1 + [40])
	CALL $52(($3 + [24]), ($3 + [16]))
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)-7807364337756012544, *(*($0 + [8])), (int_64)-7807364337756012544, $6, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)-7807364337756012544) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $85($6)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)-7807364337756012544) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = (int_64)-7807364337756012543
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [48])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($2 - $1)
	$5 = ((int_32)$4 / (int_32)[40])
	if ( ((uint_32)$5 <= (uint_32)*($0 + [8])) ){ goto $label$5 }
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$1 }
	$6 = CALL _Znwj($4)
	$7 = *($0)
	if ( ($7 == 0) ){ goto $label$6 }
	*(($0 + [4])) = [0]
	CALL _ZdlPv($7)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [8])) = $5
	$4 = [0]
	*(($5 = ($0 + [4]))) = [0]
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$7 = $6
	
.LOOP $label$7:
	*($7) = *($1)
	*(($7 + [8])) = *(($1 + [8]))
	*(($7 + [16])) = *(($1 + [16]))
	*(($7 + [24])) = *(($1 + [24]))
	*(($7 + [32])) = *(($1 + [32]))
	$7 = ($7 + [40])
	$1 = ($1 + [40])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	$4 = *(($0 + [4]))
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	$7 = *($0)
	$6 = ((int_32)*($0 + [4]) * (int_32)[40])
	$4 = ($4 + [-40])
	
.LOOP $label$9:
	if ( ($6 == 0) ){ goto $label$2 }
	*($7) = *($1)
	*(($7 + [32])) = *(($1 + [32]))
	*(($7 + [24])) = *(($1 + [24]))
	*(($7 + [16])) = *(($1 + [16]))
	*($7 + [8]) = *(($1 + [8]))
	$6 = ($6 + [-40])
	$4 = ($4 + [-40])
	$7 = ($7 + [40])
	$1 = ($1 + [40])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	*(($0 + [4])) = $5
	return 
	
.LABEL $label$4
	$7 = $6
	
.LABEL $label$3
	*($5) = (((int_32)($7 - $6) / (int_32)[40]) + $4)
	return 
	
.LABEL $label$2
	$5 = (*($0) + ((int_32)*(($0 + [4])) * (int_32)[40]))
	$7 = [0]
	
.LOOP $label$10:
	$6 = ($1 + $7)
	*(($2 = ($5 + $7))) = *($6)
	*(($2 + [32])) = *(($6 + [32]))
	*(($2 + [24])) = *(($6 + [24]))
	*(($2 + [16])) = *(($6 + [16]))
	*(($2 + [8])) = *(($6 + [8]))
	$2 = ((int_32)$4 != (int_32)$7)
	$6 = ($7 + [40])
	$7 = $6
	if ( $2 ){ goto $label$10 }
	*(($1 = ($0 + [4]))) = (*($1) + ((int_32)$6 / (int_32)[40]))
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $53(*($1), *($0 + [16]))
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [16]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [9142])
	CALL memcpy(*($6), ($2 + [16]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	if ( ($7 == 0) ){ goto $label$2 }
	$6 = *($1)
	$8 = ($6 + ((int_32)$7 * (int_32)[40]))
	$7 = ($0 + [4])
	$5 = ($2 + [28])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $3) > (int_32)[7]), [9142])
	CALL memcpy(*($7), $6, [8])
	*($7) = (*($7) + [8])
	*($2 + [8]) = $0
	*((($2 + [16]) + [8])) = ($6 + [24])
	*($5) = ($6 + [32])
	*($2 + [20]) = ($6 + [16])
	*($2 + [16]) = ($6 + [8])
	CALL $54(($2 + [16]), ($2 + [8]))
	$6 = ($6 + [40])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$3 = *($7)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [8868])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $31(*($1), ($0 + [32]))
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = [0]
	*($1 + [4]) = [0]
	$4 = *($0 + [4])
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($6)), [8873])
	$4 = *($7)
	$8 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$3 = ($3 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	if ( ($8 == 0) ){ goto $label$2 }
	$6 = ($8 + [-1])
	$9 = (($2 + [40]) + [8])
	$3 = (($2 + [8]) + [8])
	$8 = ($0 + [4])
	
.LOOP $label$3:
	*($3) = (int_64)0
	*($2 + [8]) = (int_64)0
	$7 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8868])
	CALL memcpy(($2 + [24]), *($8), [8])
	$4 = (*($8) + [8])
	*($8) = $4
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8868])
	CALL memcpy(($2 + [8]), *($8), [8])
	$4 = (*($8) + [8])
	*($8) = $4
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8868])
	CALL memcpy($3, *($8), [8])
	*($8) = (*($8) + [8])
	*($9) = *($2 + [8])
	*(($9 + [8])) = *($3)
	*($2 + [40]) = *($2 + [24])
	CALL $57(($2 + [32]), $1, ($2 + [40]))
	if ( ($6 == 0) ){ goto $label$2 }
	$6 = ($6 + [-1])
	$4 = *($8)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [4]) = [0]
	*($0) = [0]
	$5 = *($1 + [4])
	$6 = ((int_32)$5 * (int_32)[24])
	$4 = *($1)
	$7 = ($4 + $6)
	if ( ($6 == 0) ){ goto $label$4 }
	$8 = ((int_32)$6 / (int_32)[24])
	$9 = *($2)
	$6 = $4
	
.LOOP $label$5:
	$11 = (uint_64)(*($11) <= $9)
	$10 = uint_32($8 >> [1])
	$11 = ($6 + ((int_32)$10 * (int_32)[24]))
	$6 = ( ($11 + [24]) ? $6 : $11 )
	$8 = ( (($8 + [-1]) - $10) ? $10 : $11 )
	if ( $8 ){ goto $label$5 }
	$8 = ((int_32)$7 != (int_32)$6)
	if ( ($8 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = $4
	$8 = ((int_32)$7 != (int_32)$6)
	if ( $8 ){ goto $label$2 }
	
.LABEL $label$3
	*(($0 + [4])) = [1]
	goto $label$1 
	
.LABEL $label$2
	$12 = *($6)
	$9 = *($2)
	*(($0 + [4])) = (uint_64)($9 <= $12)
	if ( (uint_64)($9 <= $12) ){ goto $label$1 }
	$6 = ($4 + ((int_32)((int_32)($6 - $4) / (int_32)[24]) * (int_32)[24]))
	*($0) = $6
	*($3) = $6
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $6
	if ( ((int_32)*($1 + [8]) != (int_32)$5) ){ goto $label$6 }
	CALL $58($3, $1, ($3 + [8]), [1], $2)
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$11 = ((int_32)($6 - $4) / (int_32)[24])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($8 = ($4 + ((int_32)$5 * (int_32)[24]))) + [8]) = *(($7 + [-16]))
	*(($8 + [16])) = *(($7 + [-8]))
	$8 = ($7 + [-24])
	*($7) = *($8)
	*(($10 = ($1 + [4]))) = (*($10) + [1])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$10 = ($8 + [-24])
	*($8) = *($10)
	*(($8 + [8])) = *(($8 + [-16]))
	*(($8 + [16])) = *(($8 + [-8]))
	$8 = $10
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$9
	*($6) = *($2)
	*(($6 + [16])) = *(($2 + [16]))
	*($6 + [8]) = *($2 + [8])
	goto $label$7 
	
.LABEL $label$8
	*($7) = *($2)
	*((($6 = ($4 + ((int_32)$5 * (int_32)[24]))) + [16])) = *(($2 + [16]))
	*($6 + [8]) = *($2 + [8])
	*(($6 = ($1 + [4]))) = (*($6) + [1])
	
.LABEL $label$7
	$6 = (*($1) + ((int_32)$11 * (int_32)[24]))
	*($3) = $6
	*($0) = $6
	$global$0 = ($3 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $78(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $78(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $82($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [8902])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8192])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [72]) = ($4 + $5)
	*($3 + [64]) = $4
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8868])
	CALL memcpy(($3 + [8]), $4, [8])
	$1 = ($5 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [8868])
	CALL memcpy((($3 + [8]) + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [8868])
	CALL memcpy((($3 + [8]) + [16]), ($4 + [16]), [8])
	*($3 + [68]) = ($4 + [24])
	CALL $31(($3 + [64]), (($3 + [8]) + [24]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $85($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $32(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [8868])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8868])
	CALL memcpy((($3 + [8]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8868])
	$6 = (($3 + [8]) + [16])
	CALL memcpy($6, ($2 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $85($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3 + [16])
	$9 = *($3 + [8])
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $9), (int_64 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [32])
	return [1]
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8868])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [8868])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $56(*($1), *($0 + [16]))
	CALL $56(*($1), *($0 + [20]))
}

void .FUNC $21 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth($1)
	*(($2 + [32])) = [0]
	*($2 + [8]) = $1
	*($2 + [16]) = (int_64)-1
	$3 = *($0)
	*($2) = $3
	*($2 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($3, $1, (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $15($2, $0)
	
.LOOP $label$2:
	CALL eosio_assert([1], [9279])
	CALL eosio_assert([1], [9313])
	$0 = [0]
	$5 = CALL db_next_i64(*($4 + [56]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $15($2, $5)
	
.LABEL $label$3
	CALL $22($2, $4)
	$4 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	if ( (*(($4 + [48])) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($4 + [40]))
	
.LABEL $label$9
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($2 + [48])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	CALL eosio_assert([0], [8678])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9142])
	CALL memcpy(*($4 + [4]), ($3 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [4]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9142])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $71(*($1), *($0 + [16]))
	$global$0 = ($2 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9343])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [9388])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9438])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( (*(($3 + [48])) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( (*(($5 + [48])) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($5 + [40]))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [56]))
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $82($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [8902])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8192])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8868])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [8868])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [8868])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $85($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $24 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [112])
	$global$0 = $3
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$5 }
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-3075276126730321920) ){ goto $label$5 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [1]
	*($3 + [8]) = *($3 + [96])
	CALL $25($0, ($3 + [8]))
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-7807376982139731968) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-5287912057788694528) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-4812882902415048704) ){ goto $label$5 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [2]
	*($3 + [32]) = *($3 + [72])
	CALL $26($0, ($3 + [32]))
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$5 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [3]
	*($3) = *($3 + [104])
	CALL $25($0, $3)
	
.LABEL $label$5
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$4
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [40]) = *($3 + [64])
	CALL $27($0, ($3 + [40]))
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$3
	*($3 + [84]) = [0]
	*($3 + [80]) = [5]
	*($3 + [24]) = *($3 + [80])
	CALL $28($0, ($3 + [24]))
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$2
	*($3 + [92]) = [0]
	*($3 + [88]) = [6]
	*($3 + [16]) = *($3 + [88])
	CALL $29($0, ($3 + [16]))
	$global$0 = ($3 + [112])
	return 
	
.LABEL $label$1
	*($3 + [60]) = [0]
	*($3 + [56]) = [7]
	*($3 + [48]) = *($3 + [56])
	CALL $30($0, ($3 + [48]))
	$global$0 = ($3 + [112])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $82($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [8902])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8192])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $34(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $85($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $35(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $82($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)1398362884
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [8902])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8192])
	*($3 + [40]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = ($3 + [16])
	CALL $33(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $85($6)
	
.LABEL $label$8
	*(($1 = (($3 + [48]) + [8]))) = *(($3 + [32]))
	*($3 + [48]) = *($3 + [24])
	$8 = *(($3 + [40]))
	$10 = *($3 + [16])
	*((($3 + [64]) + [8])) = *($1)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$12 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $12
	*(($3 + [8])) = $12
	$12 = *($3 + [64])
	*($3) = $12
	*($3 + [80]) = $12
	CALL void $1((int_32 $10), (int_64 $3), (int_32 $8), (int_64 $5))
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [4]) = [0]
	*($0) = [0]
	$5 = *($1 + [4])
	$6 = ((int_32)$5 * (int_32)[24])
	$4 = *($1)
	$7 = ($4 + $6)
	if ( ($6 == 0) ){ goto $label$4 }
	$8 = ((int_32)$6 / (int_32)[24])
	$9 = *($2)
	$6 = $4
	
.LOOP $label$5:
	$11 = (uint_64)(*($11) <= $9)
	$10 = uint_32($8 >> [1])
	$11 = ($6 + ((int_32)$10 * (int_32)[24]))
	$6 = ( ($11 + [24]) ? $6 : $11 )
	$8 = ( (($8 + [-1]) - $10) ? $10 : $11 )
	if ( $8 ){ goto $label$5 }
	$8 = ((int_32)$7 != (int_32)$6)
	if ( ($8 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = $4
	$8 = ((int_32)$7 != (int_32)$6)
	if ( $8 ){ goto $label$2 }
	
.LABEL $label$3
	*(($0 + [4])) = [1]
	goto $label$1 
	
.LABEL $label$2
	$12 = *($6)
	$9 = *($2)
	*(($0 + [4])) = (uint_64)($9 <= $12)
	if ( (uint_64)($9 <= $12) ){ goto $label$1 }
	$6 = ($4 + ((int_32)((int_32)($6 - $4) / (int_32)[24]) * (int_32)[24]))
	*($0) = $6
	*($3) = $6
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $6
	if ( ((int_32)*($1 + [8]) != (int_32)$5) ){ goto $label$6 }
	CALL $70($3, $1, ($3 + [8]), [1], $2)
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$11 = ((int_32)($6 - $4) / (int_32)[24])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($8 = ($4 + ((int_32)$5 * (int_32)[24]))) + [8]) = *(($7 + [-16]))
	*(($8 + [16])) = *(($7 + [-8]))
	$8 = ($7 + [-24])
	*($7) = *($8)
	*(($10 = ($1 + [4]))) = (*($10) + [1])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$9 }
	
.LOOP $label$10:
	$10 = ($8 + [-24])
	*($8) = *($10)
	*(($8 + [8])) = *(($8 + [-16]))
	*(($8 + [16])) = *(($8 + [-8]))
	$8 = $10
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$9
	*($6) = *($2)
	*(($6 + [16])) = *(($2 + [16]))
	*($6 + [8]) = *($2 + [8])
	goto $label$7 
	
.LABEL $label$8
	*($7) = *($2)
	*((($6 = ($4 + ((int_32)$5 * (int_32)[24]))) + [16])) = *(($2 + [16]))
	*($6 + [8]) = *($2 + [8])
	*(($6 = ($1 + [4]))) = (*($6) + [1])
	
.LABEL $label$7
	$6 = (*($1) + ((int_32)$11 * (int_32)[24]))
	*($3) = $6
	*($0) = $6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = [0]
	*($1 + [4]) = [0]
	$4 = *($0 + [4])
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *($6)), [8873])
	$4 = *($7)
	$8 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$3 = ($3 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	if ( ($8 == 0) ){ goto $label$2 }
	$6 = ($8 + [-1])
	$9 = (($2 + [40]) + [8])
	$3 = (($2 + [8]) + [8])
	$8 = ($0 + [4])
	
.LOOP $label$3:
	*($3) = (int_64)0
	*($2 + [8]) = (int_64)0
	$7 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8868])
	CALL memcpy(($2 + [24]), *($8), [8])
	$4 = (*($8) + [8])
	*($8) = $4
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8868])
	CALL memcpy(($2 + [8]), *($8), [8])
	$4 = (*($8) + [8])
	*($8) = $4
	CALL eosio_assert(((uint_32)(*($7) - $4) > (uint_32)[7]), [8868])
	CALL memcpy($3, *($8), [8])
	*($8) = (*($8) + [8])
	*($9) = *($2 + [8])
	*(($9 + [8])) = *($3)
	*($2 + [40]) = *($2 + [24])
	CALL $69(($2 + [32]), $1, ($2 + [40]))
	if ( ($6 == 0) ){ goto $label$2 }
	$6 = ($6 + [-1])
	$4 = *($8)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
	return $0
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9142])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9142])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9142])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9142])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9142])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8868])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8868])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $68(*($1), *($0 + [16]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [8902])
	$4 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8192])
	*($0 + [24]) = (int_64)0
	*($0 + [16]) = [0]
	*($0 + [32]) = (int_64)0
	*($0 + [40 align=4]) = (int_64)0
	*(($0 + [48])) = [0]
	*($0 + [52]) = $1
	*($3) = *($2 + [4])
	*($3 + [12]) = ($0 + [16])
	*($3 + [8]) = $0
	*($3 + [16]) = ($0 + [24])
	*($3 + [20]) = ($0 + [32])
	*($3 + [24]) = ($0 + [40])
	CALL $67(($3 + [8]), $3)
	*($0 + [56]) = *(*($2 + [8]))
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9142])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $63(*($1), ($0 + [32]))
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $80($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9142])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9142])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $60($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9142])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9142])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $65(CALL $64($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $85 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17888])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17696]
	$3 = (((int_32)$1 * (int_32)[12]) + [17696])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9496]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9500])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9496]) = [1]
	$2 = ($2 << [16])
	*([0] + [9500]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9500])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9500]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9496]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9496]) = [1]
	$3 = ($3 << [16])
	*([0] + [9500]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9500])
	
.LABEL $label$10
	*([0] + [9500]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $84($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8227])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $82 (int_32 $0)
{
	return CALL $83([9504], $0)
}

void .FUNC $81 (int_32 $0)
{
}

void .FUNC $80 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8873])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $60($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8868])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $82($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9492])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $82($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = *($2)
	$6 = ((int_32)($5 - *($1)) / (int_32)[24])
	$7 = *($1 + [4])
	$2 = *($1 + [8])
	if ( (([178956970] - $2) <= (($3 - $2) + $7)) ){ goto $label$1 }
	if ( ((uint_32)$2 > (uint_32)[536870911]) ){ goto $label$3 }
	$2 = ((uint_32)($2 << [3]) / (uint_32)[5])
	goto $label$2 
	
.LABEL $label$3
	$2 = ( [-1] ? ($2 << [3]) : ((uint_32)$2 > (uint_32)[-1610612737]) )
	
.LABEL $label$2
	$2 = ( $2 ? [178956970] : ($2 <= [178956970]) )
	$7 = ($7 + $3)
	$8 = ( $7 ? $2 : ((uint_32)$7 > (uint_32)$2) )
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$1 }
	$9 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	$2 = $9
	$10 = *($1)
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$4 }
	$2 = $9
	if ( ($10 == 0) ){ goto $label$4 }
	$7 = $10
	$2 = $9
	
.LOOP $label$5:
	*($2) = *($7)
	*(($2 + [16])) = *(($7 + [16]))
	*(($2 + [8])) = *(($7 + [8]))
	$2 = ($2 + [24])
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	*($2) = *($4)
	*(($2 + [16])) = *(($4 + [16]))
	*($2 + [8]) = *($4 + [8])
	$2 = ($2 + ((int_32)$3 * (int_32)[24]))
	if ( ($10 == 0) ){ goto $label$6 }
	$7 = ($10 + ((int_32)*(($1 + [4])) * (int_32)[24]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	*($2) = *($5)
	*(($2 + [16])) = *(($5 + [16]))
	*(($2 + [8])) = *(($5 + [8]))
	$2 = ($2 + [24])
	$5 = ($5 + [24])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	CALL _ZdlPv(*($1))
	
.LABEL $label$6
	*($1) = $9
	*(($1 + [8])) = $8
	*(($1 + [4])) = ((int_32)($2 - $9) / (int_32)[24])
	*($0) = ($9 + ((int_32)$6 * (int_32)[24]))
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($1 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $3) > (int_32)[0]), [9142])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$6 = *(($1 + [4]))
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = *($1)
	$5 = ($7 + ((int_32)$6 * (int_32)[24]))
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $3) > (int_32)[7]), [9142])
	CALL memcpy(*($6), $7, [8])
	$3 = (*($6) + [8])
	*($6) = $3
	CALL eosio_assert(((int_32)(*($8) - $3) > (int_32)[7]), [9142])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$3 = (*($6) + [8])
	*($6) = $3
	CALL eosio_assert(((int_32)(*($8) - $3) > (int_32)[7]), [9142])
	CALL memcpy(*($6), ($7 + [16]), [8])
	$3 = (*($6) + [8])
	*($6) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $77 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8845])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $82($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([72])
	$6 = CALL $41($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	*($3 + [8]) = (int_64)-7807364337756012544
	$7 = *($1 + [60])
	*($3 + [4]) = $7
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = (int_64)-7807364337756012544
	*($2 + [16]) = $7
	*($3 + [24]) = [0]
	*($2) = $1
	*($8) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $85($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	if ( (*(($5 + [48])) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($5 + [40]))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL memory()
	$4 = CALL $37(($3 + [8]), $0)
	CALL $24($4, $1, $2)
	CALL $38(($4 + [8]), ($4 + [48]), *($4))
	if ( (*(($4 + [96])) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$1
	$5 = *(($4 + [32]))
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($4 + [36])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$6 }
	if ( (*(($8 + [48])) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($8 + [40]))
	
.LABEL $label$7
	CALL _ZdlPv($8)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	$7 = *(($4 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$7 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($7)
	
.LABEL $label$2
	CALL $81([0])
	$global$0 = ($3 + [112])
}

int_32 .FUNC $37 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($0 + [8]) = $1
	*($0) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($0 + [32])) = (int_64)0
	$3 = [0]
	*(($0 + [40])) = [0]
	*(($0 + [56])) = (int_64)0
	*(($4 = ($0 + [64]))) = (int_64)1398362884
	CALL eosio_assert([1], [8902])
	$5 = ($0 + [48])
	$6 = ($0 + [8])
	$1 = (uint_64)*($4) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $7
	$4 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8192])
	*(($0 + [96])) = [0]
	*(($0 + [88])) = (int_64)0
	$3 = *(($0 + [36]))
	if ( ((int_32)$3 == (int_32)*(($0 + [32]))) ){ goto $label$9 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$6), [8794])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-7807364337756012544, (int_64)-7807364337756012544)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $39($6, $3) + [56]) == (int_32)$6), [8794])
	
.LABEL $label$8
	CALL $40(($2 + [8]), $6)
	$6 = *(($2 + [56]))
	$3 = *(($2 + [52]))
	$8 = *($2 + [48])
	goto $label$6 
	
.LABEL $label$7
	$1 = (int_64)0
	$7 = (int_64)59
	$3 = [8781]
	$9 = (int_64)0
	
.LOOP $label$10:
	$10 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$11 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$4 = ($4 + [-91])
	goto $label$12 
	
.LABEL $label$13
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$11
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$10 }
	*(($2 + [24])) = (int_64)1397703940
	*($2 + [16]) = (int_64)10000
	*($2 + [8]) = $9
	CALL eosio_assert([1], [8902])
	$1 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$1 = $7
	$4 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$1 = $7
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $4 ){ goto $label$18 }
	$4 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$4 = [0]
	
.LABEL $label$14
	CALL eosio_assert($4, [8192])
	$1 = CALL current_time()
	$6 = [0]
	*(($2 + [56])) = [0]
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = $1
	*($2 + [48]) = (int_64)0
	$3 = [0]
	$8 = [0]
	
.LABEL $label$6
	*($5) = *($2 + [8])
	*(($0 + [92])) = $3
	*(($2 + [52])) = [0]
	*(($5 + [32])) = *((($2 + [8]) + [32]))
	*(($5 + [24])) = *((($2 + [8]) + [24]))
	*(($5 + [16])) = *((($2 + [8]) + [16]))
	*(($5 + [8])) = *((($2 + [8]) + [8]))
	$3 = ($0 + [88])
	$4 = *($3)
	*($3) = $8
	*(($2 + [48])) = $4
	$8 = ($0 + [96])
	$3 = *($8)
	*($8) = $6
	*(($2 + [56])) = $3
	if ( ($3 == 0) ){ goto $label$19 }
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$global$0 = ($2 + [64])
	return $0
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $78(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $78(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [8868])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8868])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [8868])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $85($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $72($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $79($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $79($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $77($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}