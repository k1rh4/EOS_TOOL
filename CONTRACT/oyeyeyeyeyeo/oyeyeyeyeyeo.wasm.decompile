(data (i32.const 4) "\a0f\00\00")
(data (i32.const 16) "oyeyeyeyeyeo\00")
(data (i32.const 32) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 96) "not exist!\00")
(data (i32.const 112) "cannot pass end iterator to erase\00")
(data (i32.const 160) "cannot increment end iterator\00")
(data (i32.const 192) "object passed to erase is not in multi_index\00")
(data (i32.const 240) "cannot erase objects in table of another contract\00")
(data (i32.const 304) "attempt to remove object that was not in multi_index\00")
(data (i32.const 368) "error reading iterator\00")
(data (i32.const 400) "read\00")
(data (i32.const 416) "closed\00")
(data (i32.const 432) "cannot pass end iterator to modify\00")
(data (i32.const 480) "object passed to modify is not in multi_index\00")
(data (i32.const 528) "cannot modify objects in table of another contract\00")
(data (i32.const 592) "updater cannot change primary key when modifying an object\00")
(data (i32.const 656) "write\00")
(data (i32.const 672) "..\00")
(data (i32.const 688) "eosio.token\00")
(data (i32.const 704) "bntbntbntbnt\00")
(data (i32.const 720) "bnt2eoscnvrt\00")
(data (i32.const 736) "unable to find key\00")
(data (i32.const 768) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 832) "invalid symbol name\00")
(data (i32.const 864) "1,bnt2eoscnvrt BNT \00")
(data (i32.const 896) " \00")
(data (i32.const 912) ",\00")
(data (i32.const 928) ",oyeyeyeyeyeo\00")
(data (i32.const 944) "active\00")
(data (i32.const 960) "transfer\00")
(data (i32.const 976) "thisisbancor\00")
(data (i32.const 992) "1,\00")
(data (i32.const 1008) " BNT bnt2eoscnvrt EOS,0.0001,oyeyeyeyeyeo\00")
(data (i32.const 1056) "0.\00")
(data (i32.const 1060) "0\04\00\00")
(data (i32.const 1072) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1120) ".\00")
(data (i32.const 1136) "{\"type\":\"sell-limit\",\"symbol\":\"\00")
(data (i32.const 1168) "-\00")
(data (i32.const 1184) "-eos\",\"price\":\"\00")
(data (i32.const 1200) "\",\"count\":\"\00")
(data (i32.const 1216) "\",\"amount\":\"\00")
(data (i32.const 1232) "\",\"channel\":\"web\",\"ref\":\"Scatter-Desktop\"}\00")
(data (i32.const 1280) "newdexpocket\00")
(data (i32.const 1296) "cannot create objects in table of another contract\00")
(data (i32.const 9744) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 9840) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 9856) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 9872) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$17 (param i32 i64 i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN8banzhuan3addEN5eosio4nameEhyhhhyyh" (func $6))
(export "_ZN8banzhuan3setEN5eosio4nameEyhhh" (func $8))
(export "_ZN8banzhuan4idexEyN5eosio4nameEy" (func $10))
(export "_ZN8banzhuan4ibanEyN5eosio4nameEy" (func $12))
(export "_ZN8banzhuan5eraseEyN5eosio4nameEy" (func $13))
(export "_ZN8banzhuan7updatetEv" (func $19))
(export "_ZN8banzhuan10iban_checkEy" (func $20))
(export "_Z13uint64_stringyi" (func $23))
(export "_ZN8banzhuan10idex_checkEyN5eosio4nameEy" (func $43))
(export "malloc" (func $47))
(export "free" (func $50))
(export "toupper" (func $62))
(export "pow" (func $63))
(export "sqrt" (func $64))
(export "fabs" (func $65))
(export "scalbn" (func $66))
(export "memcmp" (func $67))
(export "strlen" (func $68))
(table $0 6 6 anyfunc)
(elem (i32.const 0) $69 $10 $6 $13 $12 $8)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [368])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $51([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [400])
	CALL memcpy($5, $6, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [400])
	CALL memcpy(($5 + [8]), ($6 + [8]), [4])
	CALL eosio_assert(((int_32)$4 != (int_32)[12]), [400])
	CALL memcpy(($5 + [12]), ($6 + [12]), [1])
	*($5 + [20]) = $1
	*($7 + [8]) = $5
	*($7 + [4]) = [0]
	$6 = *($5 + [20])
	*($7) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = $6
	*($7 + [8]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($7 + [8]), ($7 + [4]), $7)
	
.LABEL $label$7
	$4 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $52($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
	return $5
}

int_32 .FUNC toupper (int_32 $0)
{
	return ( ($0 & [95]) ? $0 : (($0 + [-97]) <= [26]) )
}

void .FUNC _ZN8banzhuan7updatetEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	float_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	float_64 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_32 $26
	$26 = (*([0] + [4]) - [80])
	*([0] + [4]) = $26
	*($26 + [8]) = [0]
	$24 = (int_64)0
	*($26) = (int_64)0
	$25 = (int_64)59
	$21 = [688]
	$17 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$24 > (uint_64)(int_64)10) ){ goto $label$6 }
	$22 = *($21)
	if ( ((uint_32)(($22 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$22 = ($22 + [165])
	goto $label$4 
	
.LABEL $label$6
	$23 = (int_64)0
	if ( ((int_64)$24 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$22 = ( ($22 + [208]) ? [0] : ((($22 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $22) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$2
	$21 = ($21 + [1])
	$25 = ((int_64)$25 + (int_64)-5)
	$17 = ((int_64)$23 | (int_64)$17)
	$24 = ((int_64)$24 + (int_64)1)
	if ( ((int_64)$24 != (int_64)13) ){ goto $label$1 }
	$24 = (int_64)0
	$23 = (int_64)59
	$21 = [704]
	$18 = (int_64)0
	
.LOOP $label$7:
	$25 = (int_64)0
	if ( ((uint_64)$24 > (uint_64)(int_64)11) ){ goto $label$8 }
	$22 = *($21)
	if ( ((uint_32)(($22 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$22 = ($22 + [165])
	goto $label$9 
	
.LABEL $label$10
	$22 = ( ($22 + [208]) ? [0] : ((($22 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$25 = ((int_64)(CASTING uint_64)(uint_32 ($22 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$8
	$21 = ($21 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$18 = ((int_64)$25 | (int_64)$18)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$7 }
	$24 = (int_64)0
	$23 = (int_64)59
	$21 = [720]
	$19 = (int_64)0
	
.LOOP $label$11:
	$25 = (int_64)0
	if ( ((uint_64)$24 > (uint_64)(int_64)11) ){ goto $label$12 }
	$22 = *($21)
	if ( ((uint_32)(($22 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$22 = ($22 + [165])
	goto $label$13 
	
.LABEL $label$14
	$22 = ( ($22 + [208]) ? [0] : ((($22 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$25 = ((int_64)(CASTING uint_64)(uint_32 ($22 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$12
	$21 = ($21 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$19 = ((int_64)$25 | (int_64)$19)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$11 }
	*(($26 + [64])) = [0]
	*($26 + [40]) = $19
	*($26 + [32]) = $17
	*($26 + [48]) = (int_64)-1
	$24 = (int_64)0
	*($26 + [56]) = (int_64)0
	$19 = *(CALL $22(($26 + [32]), (int_64)5459781, [736]))
	$20 = *($26 + [56])
	if ( ($20 == 0) ){ goto $label$15 }
	$9 = ($26 + [60])
	$21 = *($9)
	if ( ((int_32)$21 == (int_32)$20) ){ goto $label$17 }
	
.LOOP $label$18:
	$21 = ($21 + [-24])
	$22 = *($21)
	*($21) = [0]
	if ( ($22 == 0) ){ goto $label$19 }
	CALL $52($22)
	
.LABEL $label$19
	if ( ((int_32)$20 != (int_32)$21) ){ goto $label$18 }
	$21 = *(($26 + [56]))
	goto $label$16 
	
.LABEL $label$17
	$21 = $20
	
.LABEL $label$16
	*($9) = $20
	CALL $52($21)
	
.LABEL $label$15
	$23 = (int_64)59
	$21 = [720]
	$17 = (int_64)0
	
.LOOP $label$20:
	$25 = (int_64)0
	if ( ((uint_64)$24 > (uint_64)(int_64)11) ){ goto $label$21 }
	$22 = *($21)
	if ( ((uint_32)(($22 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$22 = ($22 + [165])
	goto $label$22 
	
.LABEL $label$23
	$22 = ( ($22 + [208]) ? [0] : ((($22 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$25 = ((int_64)(CASTING uint_64)(uint_32 ($22 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$21
	$21 = ($21 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$17 = ((int_64)$25 | (int_64)$17)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$20 }
	*(($26 + [64])) = [0]
	*($26 + [40]) = $17
	*($26 + [32]) = $18
	*($26 + [48]) = (int_64)-1
	*($26 + [56]) = (int_64)0
	$24 = *(CALL $22(($26 + [32]), (int_64)5525058, [736]))
	$20 = *($26 + [56])
	if ( ($20 == 0) ){ goto $label$24 }
	$9 = ($26 + [60])
	$21 = *($9)
	if ( ((int_32)$21 == (int_32)$20) ){ goto $label$26 }
	
.LOOP $label$27:
	$21 = ($21 + [-24])
	$22 = *($21)
	*($21) = [0]
	if ( ($22 == 0) ){ goto $label$28 }
	CALL $52($22)
	
.LABEL $label$28
	if ( ((int_32)$20 != (int_32)$21) ){ goto $label$27 }
	$21 = *(($26 + [56]))
	goto $label$25 
	
.LABEL $label$26
	$21 = $20
	
.LABEL $label$25
	*($9) = $20
	CALL $52($21)
	
.LABEL $label$24
	$21 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4980189539499769856, (int_64)0)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$29 }
	$1 = ($0 + [48])
	$5 = CALL $14($1, $21)
	$3 = ((float_64)(CASTING float_64)(int_64 $19) / (float_64)(CASTING float_64)(int_64 $24))
	$4 = (($26 + [32]) + [37])
	$2 = ($26 | [1])
	$11 = (($26 + [32]) + [16])
	$12 = ($26 + [56])
	$13 = ($26 + [64])
	$16 = ($0 + [64])
	$14 = ($26 + [60])
	
.LOOP $label$30:
	if ( ((int_32)*($5 + [43]) != (int_32)[2]) ){ goto $label$31 }
	$21 = *($5 + [24])
	CALL $21(($26 + [32]), $5)
	$6 = ((uint_32)((uint_32)$21 / (uint_32)[10]) % (uint_32)[10])
	if ( (*($26) & [1]) ){ goto $label$33 }
	*($26) = [0]
	goto $label$32 
	
.LABEL $label$33
	*(*(($26 + [8]))) = [0]
	*($26 + [4]) = [0]
	
.LABEL $label$32
	CALL $54($26, [0])
	$10 = (($26 + [32]) + [8])
	$20 = *($10)
	*(($0 = ($26 + [8]))) = $20
	*($26) = *($26 + [32])
	$21 = *($26 + [36])
	*($26 + [4]) = $21
	$9 = ($22 & [1])
	$22 = *($26)
	$22 = ( $21 ? uint_32($22 >> [1]) : $9 )
	if ( ($22 == 0) ){ goto $label$34 }
	$21 = ( $20 ? $2 : $9 )
	
.LOOP $label$35:
	*($21) = CALL toupper(*($21))
	$21 = ($21 + [1])
	$22 = ($22 + [-1])
	if ( $22 ){ goto $label$35 }
	
.LABEL $label$34
	$19 = *($5 + [8])
	*($10) = *($5 + [16])
	*($11) = (int_64)-1
	*($12) = (int_64)0
	*($13) = [0]
	*($26 + [32]) = $18
	$17 = *(CALL $22(($26 + [32]), (int_64)5525058, [736]))
	$20 = *($12)
	if ( ($20 == 0) ){ goto $label$36 }
	$21 = *($14)
	if ( ((int_32)$21 == (int_32)$20) ){ goto $label$38 }
	
.LOOP $label$39:
	$21 = ($21 + [-24])
	$22 = *($21)
	*($21) = [0]
	if ( ($22 == 0) ){ goto $label$40 }
	CALL $52($22)
	
.LABEL $label$40
	if ( ((int_32)$20 != (int_32)$21) ){ goto $label$39 }
	$21 = *($12)
	goto $label$37 
	
.LABEL $label$38
	$21 = $20
	
.LABEL $label$37
	*($14) = $20
	CALL $52($21)
	
.LABEL $label$36
	$22 = ( *($0) ? $2 : (*($26) & [1]) )
	$7 = *(($5 + [16]))
	$21 = [-1]
	$20 = [0]
	
.LOOP $label$41:
	$8 = $20
	$20 = ($8 + [1])
	$0 = ($22 + $21)
	$9 = ($21 + [1])
	$21 = $9
	if ( *(($0 + [1])) ){ goto $label$41 }
	if ( ($9 == 0) ){ goto $label$43 }
	$23 = (CASTING uint_64)(uint_32 $8)
	$25 = (int_64)0
	$24 = (int_64)8
	
.LOOP $label$44:
	$21 = *($22)
	if ( ((uint_32)(($21 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$25 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$24 & (int_64)4294967288)) | (int_64)$25)
	
.LABEL $label$45
	$22 = ($22 + [1])
	$24 = ((int_64)$24 + (int_64)8)
	$23 = ((int_64)$23 + (int_64)-1)
	if ( ((int_64)$23 != (int_64)0) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	$25 = (int_64)0
	
.LABEL $label$42
	*($10) = $7
	*($11) = (int_64)-1
	*($12) = (int_64)0
	*($13) = [0]
	*($26 + [32]) = $19
	$24 = *(CALL $22(($26 + [32]), (uint_64)$25 >> (uint_64)(int_64)8), [736]))
	$20 = *($12)
	if ( ($20 == 0) ){ goto $label$46 }
	$21 = *($14)
	if ( ((int_32)$21 != (int_32)$20) ){ goto $label$48 }
	$21 = $20
	goto $label$47 
	
.LABEL $label$48
	
.LOOP $label$49:
	$21 = ($21 + [-24])
	$22 = *($21)
	*($21) = [0]
	if ( ($22 == 0) ){ goto $label$50 }
	CALL $52($22)
	
.LABEL $label$50
	if ( ((int_32)$20 != (int_32)$21) ){ goto $label$49 }
	$21 = *($12)
	
.LABEL $label$47
	*($14) = $20
	CALL $52($21)
	
.LABEL $label$46
	$15 = CALL pow((float_64)10, (CASTING float_64)(uint_32 ($6 & [255])))
	CALL eosio_assert([1], [432])
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)$1), [480])
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [528])
	*($5 + [32]) = (Rounds 0)(((float_64)$15 * (float_64)((float_64)((float_64)$3 * (float_64)(CASTING float_64)(int_64 $17)) / (float_64)(CASTING float_64)(int_64 $24))))
	$24 = *($5)
	CALL eosio_assert([1], [592])
	*((($26 + [16]) + [8])) = $4
	*($26 + [20]) = ($26 + [32])
	*($26 + [16]) = ($26 + [32])
	CALL $29(($26 + [16]), $5)
	CALL db_update_i64(*($5 + [48]), (int_64)0, ($26 + [32]), [37])
	if ( (uint_64)($24 <= *($16)) ){ goto $label$31 }
	*($16) = ( (int_64)-2 ? ((int_64)$24 + (int_64)1) : ((uint_64)$24 > (uint_64)(int_64)-3) )
	
.LABEL $label$31
	CALL eosio_assert([1], [160])
	$21 = CALL db_next_i64(*(($5 + [48])), ($26 + [32]))
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$29 }
	$5 = CALL $14($1, $21)
	goto $label$30 
	
.LABEL $label$29
	if ( ((*($26) & [1]) == 0) ){ goto $label$51 }
	CALL $52(*(($26 + [8])))
	
.LABEL $label$51
	*([0] + [4]) = ($26 + [80])
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [368])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $51([32])
	$6 = CALL $40($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $41(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $52($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [656])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [656])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [656])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [656])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [656])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [656])
	CALL memcpy(*($0 + [4]), ($1 + [41]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [656])
	CALL memcpy(*($0 + [4]), ($1 + [42]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [656])
	CALL memcpy(*($0 + [4]), ($1 + [43]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $51(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $59($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $51([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $24($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $25(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $52($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $52($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $52($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $51([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1060]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $61($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $54($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC _ZN8banzhuan10iban_checkEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	float_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_32 $31
	$31 = (*([0] + [4]) - [304])
	*([0] + [4]) = $31
	$29 = (int_64)0
	$30 = (int_64)59
	$26 = [688]
	$2 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$29 > (uint_64)(int_64)10) ){ goto $label$6 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$27 = ($27 + [165])
	goto $label$4 
	
.LABEL $label$6
	$28 = (int_64)0
	if ( ((int_64)$29 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$28 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$28 = ((int_64)((int_64)$28 & (int_64)31) << (int_64)((int_64)$30 & (int_64)4294967295))
	
.LABEL $label$2
	$26 = ($26 + [1])
	$30 = ((int_64)$30 + (int_64)-5)
	$2 = ((int_64)$28 | (int_64)$2)
	$29 = ((int_64)$29 + (int_64)1)
	if ( ((int_64)$29 != (int_64)13) ){ goto $label$1 }
	$29 = (int_64)0
	$28 = (int_64)59
	$26 = [704]
	$3 = (int_64)0
	
.LOOP $label$7:
	$30 = (int_64)0
	if ( ((uint_64)$29 > (uint_64)(int_64)11) ){ goto $label$8 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$27 = ($27 + [165])
	goto $label$9 
	
.LABEL $label$10
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$30 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$28 & (int_64)4294967295))
	
.LABEL $label$8
	$26 = ($26 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$3 = ((int_64)$30 | (int_64)$3)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$7 }
	$29 = (int_64)0
	$28 = (int_64)59
	$26 = [720]
	$24 = (int_64)0
	
.LOOP $label$11:
	$30 = (int_64)0
	if ( ((uint_64)$29 > (uint_64)(int_64)11) ){ goto $label$12 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$27 = ($27 + [165])
	goto $label$13 
	
.LABEL $label$14
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$30 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$28 & (int_64)4294967295))
	
.LABEL $label$12
	$26 = ($26 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$24 = ((int_64)$30 | (int_64)$24)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$11 }
	*(($31 + [184])) = [0]
	*($31 + [160]) = $24
	*($31 + [152]) = $2
	*($31 + [168]) = (int_64)-1
	$29 = (int_64)0
	*($31 + [176]) = (int_64)0
	$15 = *(CALL $22(($31 + [152]), (int_64)5459781, [736]))
	$25 = *($31 + [176])
	if ( ($25 == 0) ){ goto $label$15 }
	$21 = ($31 + [180])
	$26 = *($21)
	if ( ((int_32)$26 == (int_32)$25) ){ goto $label$17 }
	
.LOOP $label$18:
	$26 = ($26 + [-24])
	$27 = *($26)
	*($26) = [0]
	if ( ($27 == 0) ){ goto $label$19 }
	CALL $52($27)
	
.LABEL $label$19
	if ( ((int_32)$25 != (int_32)$26) ){ goto $label$18 }
	$26 = *(($31 + [176]))
	goto $label$16 
	
.LABEL $label$17
	$26 = $25
	
.LABEL $label$16
	*($21) = $25
	CALL $52($26)
	
.LABEL $label$15
	$28 = (int_64)59
	$26 = [720]
	$24 = (int_64)0
	
.LOOP $label$20:
	$30 = (int_64)0
	if ( ((uint_64)$29 > (uint_64)(int_64)11) ){ goto $label$21 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$27 = ($27 + [165])
	goto $label$22 
	
.LABEL $label$23
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$30 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$28 & (int_64)4294967295))
	
.LABEL $label$21
	$26 = ($26 + [1])
	$29 = ((int_64)$29 + (int_64)1)
	$24 = ((int_64)$30 | (int_64)$24)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$20 }
	$21 = [0]
	*(($31 + [184])) = [0]
	*($31 + [160]) = $24
	*($31 + [152]) = $3
	*($31 + [168]) = (int_64)-1
	*($31 + [176]) = (int_64)0
	$29 = *(CALL $22(($31 + [152]), (int_64)5525058, [736]))
	$25 = *($31 + [176])
	if ( ($25 == 0) ){ goto $label$24 }
	$12 = ($31 + [180])
	$26 = *($12)
	if ( ((int_32)$26 == (int_32)$25) ){ goto $label$26 }
	
.LOOP $label$27:
	$26 = ($26 + [-24])
	$27 = *($26)
	*($26) = [0]
	if ( ($27 == 0) ){ goto $label$28 }
	CALL $52($27)
	
.LABEL $label$28
	if ( ((int_32)$25 != (int_32)$26) ){ goto $label$27 }
	$26 = *(($31 + [176]))
	goto $label$25 
	
.LABEL $label$26
	$26 = $25
	
.LABEL $label$25
	*($12) = $25
	CALL $52($26)
	
.LABEL $label$24
	$26 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4980189539499769856, (int_64)0)
	if ( ((int_32)$26 < (int_32)[0]) ){ goto $label$31 }
	$4 = ($0 + [48])
	$7 = CALL $14($4, $26)
	$6 = ((float_64)(CASTING float_64)(int_64 $15) / (float_64)(CASTING float_64)(int_64 $29))
	$5 = (($31 + [272]) | [1])
	$16 = (($31 + [272]) + [8])
	$18 = (($31 + [152]) + [16])
	$19 = ($31 + [176])
	$20 = ($31 + [184])
	$22 = ($31 + [180])
	
.LOOP $label$33:
	if ( ((int_32)*($7 + [43]) != (int_32)[2]) ){ goto $label$34 }
	$8 = *($7 + [24])
	CALL $21(($31 + [272]), $7)
	$9 = ((uint_32)((uint_32)$8 / (uint_32)[10]) % (uint_32)[10])
	$26 = ($26 & [1])
	$26 = *($31 + [272])
	$27 = ( *($31 + [276]) ? uint_32($26 >> [1]) : $26 )
	if ( ($27 == 0) ){ goto $label$35 }
	$26 = ( *($16) ? $5 : $26 )
	
.LOOP $label$36:
	*($26) = CALL toupper(*($26))
	$26 = ($26 + [1])
	$27 = ($27 + [-1])
	if ( $27 ){ goto $label$36 }
	
.LABEL $label$35
	$15 = *($7 + [8])
	*(($17 = (($31 + [152]) + [8]))) = *($7 + [16])
	*($18) = (int_64)-1
	*($19) = (int_64)0
	*($20) = [0]
	*($31 + [152]) = $3
	$24 = *(CALL $22(($31 + [152]), (int_64)5525058, [736]))
	$25 = *($19)
	if ( ($25 == 0) ){ goto $label$37 }
	$26 = *($22)
	if ( ((int_32)$26 == (int_32)$25) ){ goto $label$39 }
	
.LOOP $label$40:
	$26 = ($26 + [-24])
	$27 = *($26)
	*($26) = [0]
	if ( ($27 == 0) ){ goto $label$41 }
	CALL $52($27)
	
.LABEL $label$41
	if ( ((int_32)$25 != (int_32)$26) ){ goto $label$40 }
	$26 = *($19)
	goto $label$38 
	
.LABEL $label$39
	$26 = $25
	
.LABEL $label$38
	*($22) = $25
	CALL $52($26)
	
.LABEL $label$37
	$14 = ($7 + [8])
	$27 = ( *($16) ? $5 : (*($31 + [272]) & [1]) )
	$10 = *(($7 + [16]))
	$26 = [-1]
	$25 = [0]
	
.LOOP $label$42:
	$11 = $25
	$25 = ($11 + [1])
	$21 = ($27 + $26)
	$12 = ($26 + [1])
	$26 = $12
	if ( *(($21 + [1])) ){ goto $label$42 }
	if ( ($12 == 0) ){ goto $label$44 }
	$28 = (CASTING uint_64)(uint_32 $11)
	$30 = (int_64)0
	$29 = (int_64)8
	
.LOOP $label$45:
	$26 = *($27)
	if ( ((uint_32)(($26 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$30 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $26) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$29 & (int_64)4294967288)) | (int_64)$30)
	
.LABEL $label$46
	$27 = ($27 + [1])
	$29 = ((int_64)$29 + (int_64)8)
	$28 = ((int_64)$28 + (int_64)-1)
	if ( ((int_64)$28 != (int_64)0) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	$30 = (int_64)0
	
.LABEL $label$43
	*($17) = $10
	*($18) = (int_64)-1
	*($19) = (int_64)0
	*($20) = [0]
	*($31 + [152]) = $15
	$29 = *(CALL $22(($31 + [152]), (uint_64)$30 >> (uint_64)(int_64)8), [736]))
	$25 = *($19)
	if ( ($25 == 0) ){ goto $label$47 }
	$26 = *($22)
	if ( ((int_32)$26 != (int_32)$25) ){ goto $label$49 }
	$26 = $25
	goto $label$48 
	
.LABEL $label$49
	
.LOOP $label$50:
	$26 = ($26 + [-24])
	$27 = *($26)
	*($26) = [0]
	if ( ($27 == 0) ){ goto $label$51 }
	CALL $52($27)
	
.LABEL $label$51
	if ( ((int_32)$25 != (int_32)$26) ){ goto $label$50 }
	$26 = *($19)
	
.LABEL $label$48
	*($22) = $25
	CALL $52($26)
	
.LABEL $label$47
	$23 = CALL pow((float_64)10, (CASTING float_64)(uint_32 ($9 & [255])))
	$29 = (Rounds 0)(((float_64)$23 * (float_64)((float_64)((float_64)$6 * (float_64)(CASTING float_64)(int_64 $24)) / (float_64)(CASTING float_64)(int_64 $29))))
	$28 = *($7 + [32])
	if ( ((uint_64)$28 <= (uint_64)$29) ){ goto $label$52 }
	if ( ((uint_64)((uint_64)((int_64))($28 - $29) * (int_64)1000) / (uint_64)$29) > (uint_64)*($7 + [41])) ){ goto $label$32 }
	
.LABEL $label$52
	if ( ((*($31 + [272]) & [1]) == 0) ){ goto $label$34 }
	CALL $52(*($16))
	
.LABEL $label$34
	CALL eosio_assert([1], [160])
	$26 = CALL db_next_i64(*($7 + [48]), ($31 + [152]))
	if ( ((int_32)$26 < (int_32)[0]) ){ goto $label$53 }
	$7 = CALL $14($4, $26)
	goto $label$33 
	
.LABEL $label$53
	$21 = [0]
	goto $label$31 
	
.LABEL $label$32
	$12 = ((uint_32)$8 % (uint_32)[10])
	$10 = (CASTING uint_64)(uint_32 $12)
	$28 = (int_64)0
	$30 = (int_64)59
	$26 = [16]
	$24 = (int_64)0
	
.LOOP $label$54:
	$3 = (int_64)0
	if ( ((uint_64)$28 > (uint_64)(int_64)11) ){ goto $label$55 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$27 = ($27 + [165])
	goto $label$56 
	
.LABEL $label$57
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$3 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$30 & (int_64)4294967295))
	
.LABEL $label$55
	$26 = ($26 + [1])
	$28 = ((int_64)$28 + (int_64)1)
	$24 = ((int_64)$3 | (int_64)$24)
	$30 = ((int_64)$30 + (int_64)-5)
	if ( ((int_64)$30 != (int_64)-6) ){ goto $label$54 }
	*((($31 + [152]) + [32])) = [0]
	*($31 + [160]) = $24
	*($31 + [152]) = $2
	*($31 + [168]) = (int_64)-1
	*($31 + [176]) = (int_64)0
	$28 = *(CALL $22(($31 + [152]), (int_64)5459781, [736]))
	$25 = *($31 + [176])
	if ( ($25 == 0) ){ goto $label$58 }
	$21 = ($31 + [180])
	$26 = *($21)
	if ( ((int_32)$26 == (int_32)$25) ){ goto $label$60 }
	
.LOOP $label$61:
	$26 = ($26 + [-24])
	$27 = *($26)
	*($26) = [0]
	if ( ($27 == 0) ){ goto $label$62 }
	CALL $52($27)
	
.LABEL $label$62
	if ( ((int_32)$25 != (int_32)$26) ){ goto $label$61 }
	$26 = *(($31 + [176]))
	goto $label$59 
	
.LABEL $label$60
	$26 = $25
	
.LABEL $label$59
	*($21) = $25
	CALL $52($26)
	
.LABEL $label$58
	$30 = *(($7 + [32]))
	$3 = *($7 + [40])
	$15 = ((int_64)((int_64)$3 * (int_64)$28) / (int_64)100)
	$23 = ((float_64)CALL pow((float_64)10, (CASTING float_64)(int_32 ((($9 + $12) & [255]) + [-4]))) * (float_64)((float_64)(CASTING float_64)(int_64 $15) / (float_64)(CASTING float_64)(uint_64 $30)))
	$27 = ( *(($31 + [280])) ? $5 : (*($31 + [272]) & [1]) )
	$26 = [-1]
	
.LOOP $label$63:
	$25 = ($27 + $26)
	$21 = ($26 + [1])
	$26 = $21
	if ( *(($25 + [1])) ){ goto $label$63 }
	$24 = (Rounds 0)($23)
	$3 = (int_64)0
	if ( ($21 == 0) ){ goto $label$64 }
	$30 = (CASTING uint_64)(uint_32 $21)
	$28 = (int_64)8
	$3 = (int_64)0
	
.LOOP $label$65:
	$26 = *($27)
	if ( ((uint_32)(($26 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$3 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $26) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$28 & (int_64)4294967288)) | (int_64)$3)
	
.LABEL $label$66
	$27 = ($27 + [1])
	$28 = ((int_64)$28 + (int_64)8)
	$30 = ((int_64)$30 + (int_64)-1)
	if ( ((int_64)$30 != (int_64)0) ){ goto $label$65 }
	
.LABEL $label$64
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [768])
	$28 = (uint_64)$3 >> (uint_64)(int_64)8)
	$10 = ((int_64)$3 | (int_64)$10)
	$26 = [0]
	
.LOOP $label$69:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $28) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$68 }
	$28 = (uint_64)$28 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$28) & (int_64)255) != (int_64)0) ){ goto $label$70 }
	
.LOOP $label$71:
	$28 = (uint_64)$28 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$28) & (int_64)255) != (int_64)0) ){ goto $label$68 }
	$26 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[7]) ){ goto $label$71 }
	
.LABEL $label$70
	$27 = [1]
	$26 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[7]) ){ goto $label$69 }
	goto $label$67 
	
.LABEL $label$68
	$27 = [0]
	
.LABEL $label$67
	CALL eosio_assert($27, [832])
	*(($31 + [264])) = [0]
	*($31 + [256]) = (int_64)0
	$26 = CALL strlen([864])
	if ( ((uint_32)$26 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$26 >= (uint_32)[11]) ){ goto $label$74 }
	*($31 + [256]) = ($26 << [1])
	$27 = (($31 + [256]) | [1])
	if ( $26 ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	$25 = (($26 + [16]) & [-16])
	$27 = CALL $51($25)
	*($31 + [256]) = ($25 | [1])
	*($31 + [264]) = $27
	*($31 + [260]) = $26
	
.LABEL $label$73
	CALL memcpy($27, [864], $26)
	
.LABEL $label$72
	*(($27 + $26)) = [0]
	*($31 + [248]) = *(($7 + [16]))
	CALL $21(($31 + [232]), ($31 + [248]))
	$26 = *($31 + [232])
	$27 = ($26 & [1])
	$25 = (($31 + [232]) | [1])
	CALL $55(($31 + [256]), ( *($31 + [240]) ? $25 : $27 ), ( *($31 + [236]) ? uint_32($26 >> [1]) : $27 ))
	CALL $57(($31 + [256]), [896])
	$26 = *($31 + [272])
	$27 = ($26 & [1])
	CALL $55(($31 + [256]), ( *(($31 + [280])) ? $5 : $27 ), ( *($31 + [276]) ? uint_32($26 >> [1]) : $27 ))
	CALL _Z13uint64_stringyi(($31 + [216]), $24, $12)
	CALL $57(($31 + [256]), [912])
	$26 = *($31 + [216])
	$27 = ($26 & [1])
	CALL $55(($31 + [256]), ( *($31 + [224]) ? (($31 + [216]) | [1]) : $27 ), ( *($31 + [220]) ? uint_32($26 >> [1]) : $27 ))
	CALL $57(($31 + [256]), [928])
	$28 = CALL current_time()
	*(($31 + [180])) = [0]
	*(($31 + [184])) = [0]
	*($31 + [164]) = [0]
	*($31 + [168]) = [0]
	*($31 + [172]) = [0]
	*($31 + [176]) = [0]
	*($31 + [152]) = ((CASTING uint_32)(uint_64 ((uint_64)$28 / (uint_64)(int_64)1000000)) + [60])
	*($31 + [188]) = [0]
	*(($31 + [192])) = [0]
	*(($31 + [196])) = [0]
	*($31 + [200]) = [0]
	*(($31 + [204])) = [0]
	*(($31 + [208])) = [0]
	$21 = ($31 + [188])
	$13 = *($0)
	$28 = (int_64)0
	$3 = (int_64)59
	$26 = [944]
	$2 = (int_64)0
	
.LOOP $label$75:
	if ( ((uint_64)$28 > (uint_64)(int_64)5) ){ goto $label$80 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$27 = ($27 + [165])
	goto $label$78 
	
.LABEL $label$80
	$30 = (int_64)0
	if ( ((uint_64)$28 <= (uint_64)(int_64)11) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$79
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$30 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$77
	$30 = ((int_64)((int_64)$30 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$76
	$26 = ($26 + [1])
	$28 = ((int_64)$28 + (int_64)1)
	$2 = ((int_64)$30 | (int_64)$2)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$75 }
	*($31 + [8]) = $2
	*($31) = $13
	$28 = (int_64)0
	$3 = (int_64)59
	$26 = [688]
	$2 = (int_64)0
	
.LOOP $label$81:
	if ( ((uint_64)$28 > (uint_64)(int_64)10) ){ goto $label$86 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$85 }
	$27 = ($27 + [165])
	goto $label$84 
	
.LABEL $label$86
	$30 = (int_64)0
	if ( ((int_64)$28 == (int_64)11) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$85
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$84
	$30 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$83
	$30 = ((int_64)((int_64)$30 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$82
	$26 = ($26 + [1])
	$3 = ((int_64)$3 + (int_64)-5)
	$2 = ((int_64)$30 | (int_64)$2)
	$28 = ((int_64)$28 + (int_64)1)
	if ( ((int_64)$28 != (int_64)13) ){ goto $label$81 }
	*($31 + [128]) = $2
	$28 = (int_64)0
	$3 = (int_64)59
	$26 = [960]
	$2 = (int_64)0
	
.LOOP $label$87:
	if ( ((uint_64)$28 > (uint_64)(int_64)7) ){ goto $label$92 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$91 }
	$27 = ($27 + [165])
	goto $label$90 
	
.LABEL $label$92
	$30 = (int_64)0
	if ( ((uint_64)$28 <= (uint_64)(int_64)11) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$91
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$90
	$30 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$89
	$30 = ((int_64)((int_64)$30 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$88
	$26 = ($26 + [1])
	$28 = ((int_64)$28 + (int_64)1)
	$2 = ((int_64)$30 | (int_64)$2)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$87 }
	*($31 + [144]) = $2
	$28 = (int_64)0
	$30 = (int_64)59
	$26 = [976]
	$2 = (int_64)0
	
.LOOP $label$93:
	$3 = (int_64)0
	if ( ((uint_64)$28 > (uint_64)(int_64)11) ){ goto $label$94 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$96 }
	$27 = ($27 + [165])
	goto $label$95 
	
.LABEL $label$96
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$95
	$3 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$30 & (int_64)4294967295))
	
.LABEL $label$94
	$26 = ($26 + [1])
	$28 = ((int_64)$28 + (int_64)1)
	$2 = ((int_64)$3 | (int_64)$2)
	$30 = ((int_64)$30 + (int_64)-5)
	if ( ((int_64)$30 != (int_64)-6) ){ goto $label$93 }
	CALL eosio_assert((uint_64)(((int_64)$15 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [768])
	$28 = (int_64)5459781
	$26 = [0]
	
.LOOP $label$99:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $28) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$98 }
	$28 = (uint_64)$28 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$28) & (int_64)255) != (int_64)0) ){ goto $label$100 }
	
.LOOP $label$101:
	$28 = (uint_64)$28 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$28) & (int_64)255) != (int_64)0) ){ goto $label$98 }
	$26 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[7]) ){ goto $label$101 }
	
.LABEL $label$100
	$27 = [1]
	$26 = ($26 + [1])
	if ( ((int_32)$26 < (int_32)[7]) ){ goto $label$99 }
	goto $label$97 
	
.LABEL $label$98
	$27 = [0]
	
.LABEL $label$97
	CALL eosio_assert($27, [832])
	*((($31 + [64]) + [24])) = (int_64)1397703940
	*($31 + [72]) = $2
	*($31 + [80]) = $15
	*($31 + [64]) = *($0)
	$12 = (($31 + [64]) + [32])
	CALL $60($12, ($31 + [256]))
	$27 = *(($31 + [192]))
	if ( ((uint_32)$27 >= (uint_32)*(($31 + [196]))) ){ goto $label$105 }
	*($27 + [8]) = *($31 + [144])
	*($27) = *($31 + [128])
	*($27 + [16 align=4]) = (int_64)0
	*(($21 = ($27 + [24]))) = [0]
	$26 = CALL $51([16])
	*($27 + [16]) = $26
	$11 = ($26 + [16])
	*($21) = $11
	*(($26 + [8])) = *(($31 + [8]))
	*($26) = *($31)
	*(($27 + [20])) = $11
	*($27 + [28]) = [0]
	*(($27 + [32])) = [0]
	*(($27 + [36])) = [0]
	$26 = *($12)
	$21 = ( *((($31 + [64]) + [36])) ? uint_32($26 >> [1]) : ($26 & [1]) )
	$26 = ($21 + [32])
	$28 = (CASTING uint_64)(uint_32 $21)
	$21 = ($27 + [28])
	
.LOOP $label$106:
	$26 = ($26 + [1])
	$28 = (uint_64)$28 >> (uint_64)(int_64)7
	if ( ((int_64)$28) != (int_64)0) ){ goto $label$106 }
	if ( ($26 == 0) ){ goto $label$104 }
	CALL $24($21, $26)
	$21 = *(($27 + [32]))
	$26 = *(($27 + [28]))
	goto $label$103 
	
.LABEL $label$105
	CALL $26($21, $31, ($31 + [128]), ($31 + [144]), ($31 + [64]))
	goto $label$102 
	
.LABEL $label$104
	$21 = [0]
	$26 = [0]
	
.LABEL $label$103
	*($31 + [52]) = $26
	*($31 + [48]) = $26
	*($31 + [56]) = $21
	*($31 + [288]) = ($31 + [48])
	*($31 + [296]) = ($31 + [64])
	CALL $25(($31 + [296]), ($31 + [288]))
	*(($26 = (($31 + [152]) + [40]))) = (*($26) + [40])
	
.LABEL $label$102
	if ( ((*($31 + [96]) & [1]) == 0) ){ goto $label$107 }
	CALL $52(*(($31 + [104])))
	
.LABEL $label$107
	*($31 + [72]) = (int_64)0
	$28 = *($0)
	*($31 + [64]) = $28
	CALL $27($31, ($31 + [152]))
	$26 = *($31)
	CALL send_deferred(($31 + [64]), $28, $26, (*($31 + [4]) - $26), [1])
	$26 = *($31)
	if ( ($26 == 0) ){ goto $label$108 }
	*($31 + [4]) = $26
	CALL $52($26)
	
.LABEL $label$108
	*(($31 + [136])) = [0]
	*($31 + [128]) = (int_64)0
	$26 = CALL strlen([992])
	if ( ((uint_32)$26 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$26 >= (uint_32)[11]) ){ goto $label$111 }
	*($31 + [128]) = ($26 << [1])
	$27 = (($31 + [128]) | [1])
	if ( $26 ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$111
	$21 = (($26 + [16]) & [-16])
	$27 = CALL $51($21)
	*($31 + [128]) = ($21 | [1])
	*($31 + [136]) = $27
	*($31 + [132]) = $26
	
.LABEL $label$110
	CALL memcpy($27, [992], $26)
	
.LABEL $label$109
	*(($27 + $26)) = [0]
	$26 = *($31 + [232])
	$27 = ($26 & [1])
	CALL $55(($31 + [128]), ( *(($31 + [240])) ? $25 : $27 ), ( *($31 + [236]) ? uint_32($26 >> [1]) : $27 ))
	CALL $57(($31 + [128]), [1008])
	$28 = CALL current_time()
	*(($31 + [92])) = [0]
	*(($31 + [96])) = [0]
	*($31 + [76]) = [0]
	*($31 + [80]) = [0]
	*($31 + [84]) = [0]
	*($31 + [88]) = [0]
	*($31 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$28 / (uint_64)(int_64)1000000)) + [60])
	*($31 + [100]) = [0]
	*(($31 + [104])) = [0]
	*(($31 + [108])) = [0]
	*($31 + [112]) = [0]
	*(($31 + [116])) = [0]
	*(($31 + [120])) = [0]
	$25 = ($31 + [100])
	$15 = *($0)
	$28 = (int_64)0
	$3 = (int_64)59
	$26 = [944]
	$2 = (int_64)0
	
.LOOP $label$112:
	if ( ((uint_64)$28 > (uint_64)(int_64)5) ){ goto $label$117 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$116 }
	$27 = ($27 + [165])
	goto $label$115 
	
.LABEL $label$117
	$30 = (int_64)0
	if ( ((uint_64)$28 <= (uint_64)(int_64)11) ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$116
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$115
	$30 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$114
	$30 = ((int_64)((int_64)$30 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$113
	$26 = ($26 + [1])
	$28 = ((int_64)$28 + (int_64)1)
	$2 = ((int_64)$30 | (int_64)$2)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$112 }
	*($31 + [56]) = $2
	*($31 + [48]) = $15
	$28 = (int_64)0
	$3 = (int_64)59
	$26 = [960]
	$2 = (int_64)0
	
.LOOP $label$118:
	if ( ((uint_64)$28 > (uint_64)(int_64)7) ){ goto $label$123 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$122 }
	$27 = ($27 + [165])
	goto $label$121 
	
.LABEL $label$123
	$30 = (int_64)0
	if ( ((uint_64)$28 <= (uint_64)(int_64)11) ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$122
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$121
	$30 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$120
	$30 = ((int_64)((int_64)$30 & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$119
	$26 = ($26 + [1])
	$28 = ((int_64)$28 + (int_64)1)
	$2 = ((int_64)$30 | (int_64)$2)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$118 }
	*($31 + [144]) = $2
	$28 = (int_64)0
	$30 = (int_64)59
	$26 = [976]
	$2 = (int_64)0
	
.LOOP $label$124:
	$3 = (int_64)0
	if ( ((uint_64)$28 > (uint_64)(int_64)11) ){ goto $label$125 }
	$27 = *($26)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$127 }
	$27 = ($27 + [165])
	goto $label$126 
	
.LABEL $label$127
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$126
	$3 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$30 & (int_64)4294967295))
	
.LABEL $label$125
	$26 = ($26 + [1])
	$28 = ((int_64)$28 + (int_64)1)
	$2 = ((int_64)$3 | (int_64)$2)
	$30 = ((int_64)$30 + (int_64)-5)
	if ( ((int_64)$30 != (int_64)-6) ){ goto $label$124 }
	*(($31 + [24])) = $10
	*($31 + [8]) = $2
	*($31) = $15
	*($31 + [16]) = $24
	CALL $60(($31 + [32]), ($31 + [128]))
	CALL $28($25, ($31 + [48]), $14, ($31 + [144]), $31)
	if ( ((*($31 + [32]) & [1]) == 0) ){ goto $label$128 }
	CALL $52(*(($31 + [40])))
	
.LABEL $label$128
	*(($31 + [84])) = *($7 + [42])
	*($31 + [8]) = (int_64)0
	*($31) = $1
	$28 = *($0)
	CALL $27(($31 + [48]), ($31 + [64]))
	$26 = *($31 + [48])
	CALL send_deferred($31, $28, $26, (*($31 + [52]) - $26), [0])
	$26 = *($31 + [48])
	if ( ($26 == 0) ){ goto $label$129 }
	*($31 + [52]) = $26
	CALL $52($26)
	
.LABEL $label$129
	CALL eosio_assert([1], [432])
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$4), [480])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [528])
	*(($7 + [32])) = $29
	$29 = *($7)
	CALL eosio_assert([1], [592])
	*($31 + [56]) = ($31 + [37])
	*($31 + [52]) = $31
	*($31 + [48]) = $31
	CALL $29(($31 + [48]), $7)
	CALL db_update_i64(*($7 + [48]), (int_64)0, $31, [37])
	$26 = ($0 + [64])
	if ( (uint_64)($29 <= *($26)) ){ goto $label$130 }
	*($26) = ( (int_64)-2 ? ((int_64)$29 + (int_64)1) : ((uint_64)$29 > (uint_64)(int_64)-3) )
	
.LABEL $label$130
	CALL $30(($31 + [64]))
	if ( ((*($31 + [128]) & [1]) == 0) ){ goto $label$131 }
	CALL $52(*($31 + [136]))
	
.LABEL $label$131
	CALL $30(($31 + [152]))
	if ( ((*($31 + [216]) & [1]) == 0) ){ goto $label$132 }
	CALL $52(*(($31 + [224])))
	
.LABEL $label$132
	if ( ((*($31 + [232]) & [1]) == 0) ){ goto $label$133 }
	CALL $52(*(($31 + [240])))
	
.LABEL $label$133
	if ( ((*($31 + [256]) & [1]) == 0) ){ goto $label$134 }
	CALL $52(*($31 + [264]))
	
.LABEL $label$134
	if ( ((*($31 + [272]) & [1]) == 0) ){ goto $label$135 }
	CALL $52(*(($31 + [280])))
	
.LABEL $label$135
	$21 = [1]
	
.LABEL $label$31
	*([0] + [4]) = ($31 + [304])
	return $21
	
.LABEL $label$30
	CALL $53(($31 + [256]))
	
.LABEL $label$29
	CALL $53(($31 + [128]))
	(unreachable)
	return (unreachable)
}

void .FUNC _Z13uint64_stringyi (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$2 = ($2 + [1])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$5 = [46]
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$2 }
	$3 = ((uint_64)$1 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 ((uint_64)$1 % (uint_64)(int_64)10))
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	$5 = ($5 | [48])
	goto $label$3 
	
.LABEL $label$4
	$5 = ($5 + [55])
	
.LABEL $label$3
	$1 = $3
	
.LABEL $label$2
	CALL $38($6, int_32(($5 << [24]) >> [24]), $0)
	if ( (*($0) & [1]) ){ goto $label$6 }
	*($0) = [0]
	goto $label$5 
	
.LABEL $label$6
	*(*(($0 + [8]))) = [0]
	*($4) = [0]
	
.LABEL $label$5
	CALL $54($0, [0])
	*(($0 + [8])) = *(($6 + [8]))
	*($0) = *($6)
	$2 = ($2 + [-1])
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$7 }
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$8 }
	$5 = ($0 + [4])
	
.LOOP $label$9:
	CALL $38($6, [48], $0)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*(($0 + [8]))) = [0]
	*($5) = [0]
	
.LABEL $label$10
	CALL $54($0, [0])
	*(($0 + [8])) = *(($6 + [8]))
	*($0) = *($6)
	$2 = ($2 + [-1])
	if ( ((int_32)$2 > (int_32)[1]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL $58($6, [1056], $0)
	if ( (*($0) & [1]) ){ goto $label$13 }
	*($0) = [0]
	goto $label$12 
	
.LABEL $label$13
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$12
	CALL $54($0, [0])
	*(($0 + [8])) = *(($6 + [8]))
	*($0) = *($6)
	
.LABEL $label$7
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $39($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [32])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [656])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [656])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $37(*($1), ($0 + [32]))
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $51($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $59($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $52($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $31($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $24($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $32($4, $1)
	CALL $34(CALL $33(CALL $33($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $9) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[40])
	if ( ((uint_32)$9 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($9 << [1])
	$7 = ( $6 ? $9 : ($9 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $51(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $59($0)
	
.LABEL $label$1
	*(($9 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($9 + [8]) = *($3)
	*($9 + [16 align=4]) = (int_64)0
	*(($3 = ($9 + [24]))) = [0]
	$2 = CALL $51([16])
	*($9 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($9 + [20])) = $5
	*($9 + [28]) = [0]
	*(($5 = ($9 + [32]))) = [0]
	*(($9 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$8 = (CASTING uint_64)(uint_32 $1)
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$1 = ($9 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $24($1, $2)
	$7 = *($5)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($10 + [4]) = $2
	*($10) = $2
	*($10 + [8]) = $7
	*($10 + [16]) = $10
	*($10 + [24]) = $4
	$5 = ($9 + [40])
	CALL $25(($10 + [24]), ($10 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$10:
	*(($9 + [-32])) = *(($2 + [-12]))
	*(($9 + [-40])) = *(($2 + [-20]))
	*(($1 = ($9 + [-24]))) = (int_64)0
	*(($4 = ($9 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($9 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($9 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($4 = ($9 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($9 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$9 = ($9 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$4 = $2
	
.LABEL $label$8
	*($0) = $9
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$11 }
	$1 = ([0] - $4)
	$9 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($9 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($9 + [16])) = $2
	CALL $52($2)
	
.LABEL $label$13
	$2 = *($9)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($9 + [4])) = $2
	CALL $52($2)
	
.LABEL $label$14
	$9 = ($9 + [-40])
	if ( ((int_32)($9 + $1) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($4 == 0) ){ goto $label$15 }
	CALL $52($4)
	
.LABEL $label$15
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $49 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9830]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9832])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9830]) = [1]
	$7 = ($7 << [16])
	*([0] + [9832]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9832])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9832]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9830]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9830]) = [1]
	$3 = ($3 << [16])
	*([0] + [9832]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9832])
	
.LABEL $label$8
	*([0] + [9832]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $49($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9744])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $69 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC _ZN8banzhuan10idex_checkEyN5eosio4nameEy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	float_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	$24 = (*([0] + [4]) - [256])
	*([0] + [4]) = $24
	$5 = *(($0 + [72]))
	$16 = *(($0 + [76]))
	if ( ((int_32)$16 == (int_32)$5) ){ goto $label$1 }
	$22 = ($16 + [-24])
	$12 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($22)) == (int_64)$2) ){ goto $label$1 }
	$16 = $22
	$23 = ($22 + [-24])
	$22 = $23
	if ( ((int_32)($23 + $12) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [48])
	if ( ((int_32)$16 == (int_32)$5) ){ goto $label$4 }
	$5 = *(($16 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)$4), [32])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$22 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4980189539499769856, $2)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $14($4, $22)
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)$4), [32])
	
.LABEL $label$3
	$22 = *($5 + [24])
	CALL $21(($24 + [208]), $5)
	$8 = (($24 + [208]) | [1])
	$6 = ((uint_32)$22 % (uint_32)[10])
	$7 = ((uint_32)((uint_32)$22 / (uint_32)[10]) % (uint_32)[10])
	$22 = ($22 & [1])
	$22 = *($24 + [208])
	$23 = ( *($24 + [212]) ? uint_32($22 >> [1]) : $22 )
	if ( ($23 == 0) ){ goto $label$5 }
	$22 = ( *($24 + [216]) ? $8 : $22 )
	
.LOOP $label$6:
	*($22) = CALL toupper(*($22))
	$22 = ($22 + [1])
	$23 = ($23 + [-1])
	if ( $23 ){ goto $label$6 }
	
.LABEL $label$5
	$2 = (int_64)0
	$17 = (int_64)59
	$22 = [688]
	$18 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$12 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$23 = ($23 + [165])
	goto $label$10 
	
.LABEL $label$12
	$19 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $23) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$8
	$22 = ($22 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$7 }
	$2 = (int_64)0
	$19 = (int_64)59
	$22 = [704]
	$20 = (int_64)0
	
.LOOP $label$13:
	$17 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$14 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$23 = ($23 + [165])
	goto $label$15 
	
.LABEL $label$16
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($23 & [31])) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$14
	$22 = ($22 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$20 = ((int_64)$17 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$13 }
	$9 = ($5 + [8])
	$10 = *($5 + [8])
	$2 = (int_64)0
	$19 = (int_64)59
	$22 = [720]
	$21 = (int_64)0
	
.LOOP $label$17:
	$17 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$18 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$23 = ($23 + [165])
	goto $label$19 
	
.LABEL $label$20
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($23 & [31])) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$18
	$22 = ($22 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$21 = ((int_64)$17 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$17 }
	*(($24 + [112])) = [0]
	*($24 + [88]) = $21
	*($24 + [80]) = $18
	*($24 + [96]) = (int_64)-1
	$2 = (int_64)0
	*($24 + [104]) = (int_64)0
	$14 = *(CALL $22(($24 + [80]), (int_64)5459781, [736]))
	$16 = *($24 + [104])
	if ( ($16 == 0) ){ goto $label$21 }
	$12 = ($24 + [108])
	$22 = *($12)
	if ( ((int_32)$22 == (int_32)$16) ){ goto $label$23 }
	
.LOOP $label$24:
	$22 = ($22 + [-24])
	$23 = *($22)
	*($22) = [0]
	if ( ($23 == 0) ){ goto $label$25 }
	CALL $52($23)
	
.LABEL $label$25
	if ( ((int_32)$16 != (int_32)$22) ){ goto $label$24 }
	$22 = *(($24 + [104]))
	goto $label$22 
	
.LABEL $label$23
	$22 = $16
	
.LABEL $label$22
	*($12) = $16
	CALL $52($22)
	
.LABEL $label$21
	$19 = (int_64)59
	$22 = [720]
	$21 = (int_64)0
	
.LOOP $label$26:
	$17 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$27 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$23 = ($23 + [165])
	goto $label$28 
	
.LABEL $label$29
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($23 & [31])) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$27
	$22 = ($22 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$21 = ((int_64)$17 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$26 }
	*(($12 = ($24 + [112]))) = [0]
	*($24 + [88]) = $21
	*($24 + [80]) = $20
	*($24 + [96]) = (int_64)-1
	*($24 + [104]) = (int_64)0
	$21 = *(CALL $22(($24 + [80]), (int_64)5525058, [736]))
	$16 = *($24 + [104])
	if ( ($16 == 0) ){ goto $label$30 }
	$15 = ($24 + [108])
	$22 = *($15)
	if ( ((int_32)$22 == (int_32)$16) ){ goto $label$32 }
	
.LOOP $label$33:
	$22 = ($22 + [-24])
	$23 = *($22)
	*($22) = [0]
	if ( ($23 == 0) ){ goto $label$34 }
	CALL $52($23)
	
.LABEL $label$34
	if ( ((int_32)$16 != (int_32)$22) ){ goto $label$33 }
	$22 = *(($24 + [104]))
	goto $label$31 
	
.LABEL $label$32
	$22 = $16
	
.LABEL $label$31
	*($15) = $16
	CALL $52($22)
	
.LABEL $label$30
	$2 = *($5 + [16])
	*($12) = [0]
	*($24 + [88]) = $2
	*($24 + [80]) = $20
	*($24 + [96]) = (int_64)-1
	*($24 + [104]) = (int_64)0
	$20 = *(CALL $22(($24 + [80]), (int_64)5525058, [736]))
	$16 = *($24 + [104])
	if ( ($16 == 0) ){ goto $label$35 }
	$12 = ($24 + [108])
	$22 = *($12)
	if ( ((int_32)$22 == (int_32)$16) ){ goto $label$37 }
	
.LOOP $label$38:
	$22 = ($22 + [-24])
	$23 = *($22)
	*($22) = [0]
	if ( ($23 == 0) ){ goto $label$39 }
	CALL $52($23)
	
.LABEL $label$39
	if ( ((int_32)$16 != (int_32)$22) ){ goto $label$38 }
	$22 = *(($24 + [104]))
	goto $label$36 
	
.LABEL $label$37
	$22 = $16
	
.LABEL $label$36
	*($12) = $16
	CALL $52($22)
	
.LABEL $label$35
	$23 = ( *(($24 + [216])) ? $8 : (*($24 + [208]) & [1]) )
	$11 = *(($5 + [16]))
	$22 = [-1]
	
.LOOP $label$40:
	$16 = ($23 + $22)
	$12 = ($22 + [1])
	$22 = $12
	if ( *(($16 + [1])) ){ goto $label$40 }
	$17 = (int_64)0
	if ( ($12 == 0) ){ goto $label$41 }
	$19 = (CASTING uint_64)(uint_32 $12)
	$2 = (int_64)8
	$17 = (int_64)0
	
.LOOP $label$42:
	$22 = *($23)
	if ( ((uint_32)(($22 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$17 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $22) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$2 & (int_64)4294967288)) | (int_64)$17)
	
.LABEL $label$43
	$23 = ($23 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	$19 = ((int_64)$19 + (int_64)-1)
	if ( ((int_64)$19 != (int_64)0) ){ goto $label$42 }
	
.LABEL $label$41
	*(($24 + [112])) = [0]
	*($24 + [88]) = $11
	*($24 + [80]) = $10
	*($24 + [96]) = (int_64)-1
	*($24 + [104]) = (int_64)0
	$12 = ($6 & [255])
	$2 = *(CALL $22(($24 + [80]), (uint_64)$17 >> (uint_64)(int_64)8), [736]))
	$16 = *($24 + [104])
	if ( ($16 == 0) ){ goto $label$44 }
	$15 = ($24 + [108])
	$22 = *($15)
	if ( ((int_32)$22 == (int_32)$16) ){ goto $label$46 }
	
.LOOP $label$47:
	$22 = ($22 + [-24])
	$23 = *($22)
	*($22) = [0]
	if ( ($23 == 0) ){ goto $label$48 }
	CALL $52($23)
	
.LABEL $label$48
	if ( ((int_32)$16 != (int_32)$22) ){ goto $label$47 }
	$22 = *(($24 + [104]))
	goto $label$45 
	
.LABEL $label$46
	$22 = $16
	
.LABEL $label$45
	*($15) = $16
	CALL $52($22)
	
.LABEL $label$44
	$10 = (CASTING uint_64)(uint_32 $12)
	$21 = (Rounds 0)(((float_64)((float_64)((float_64)((float_64)(CASTING float_64)(int_64 $14) / (float_64)(CASTING float_64)(int_64 $21)) * (float_64)(CASTING float_64)(int_64 $20)) / (float_64)(CASTING float_64)(int_64 $2)) * (float_64)CALL pow((float_64)10, (CASTING float_64)(uint_32 ($7 & [255])))))
	$2 = (int_64)0
	$19 = (int_64)59
	$22 = [16]
	$20 = (int_64)0
	
.LOOP $label$49:
	$17 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$50 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$23 = ($23 + [165])
	goto $label$51 
	
.LABEL $label$52
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($23 & [31])) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$50
	$22 = ($22 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$20 = ((int_64)$17 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$49 }
	$12 = [0]
	*(($24 + [112])) = [0]
	*($24 + [88]) = $20
	*($24 + [80]) = $18
	*($24 + [96]) = (int_64)-1
	*($24 + [104]) = (int_64)0
	$19 = *(CALL $22(($24 + [80]), (int_64)5459781, [736]))
	$16 = *($24 + [104])
	if ( ($16 == 0) ){ goto $label$53 }
	$15 = ($24 + [108])
	$22 = *($15)
	if ( ((int_32)$22 == (int_32)$16) ){ goto $label$55 }
	
.LOOP $label$56:
	$22 = ($22 + [-24])
	$23 = *($22)
	*($22) = [0]
	if ( ($23 == 0) ){ goto $label$57 }
	CALL $52($23)
	
.LABEL $label$57
	if ( ((int_32)$16 != (int_32)$22) ){ goto $label$56 }
	$22 = *(($24 + [104]))
	goto $label$54 
	
.LABEL $label$55
	$22 = $16
	
.LABEL $label$54
	*($15) = $16
	CALL $52($22)
	
.LABEL $label$53
	$2 = *($5 + [32])
	if ( ((uint_64)$2 <= (uint_64)$21) ){ goto $label$60 }
	if ( ((uint_64)((uint_64)((int_64))($2 - $21) * (int_64)1000) / (uint_64)$21) <= (uint_64)*($5 + [41])) ){ goto $label$60 }
	$17 = *($5 + [40])
	$21 = ((int_64)((int_64)$17 * (int_64)$19) / (int_64)100)
	$13 = ((float_64)CALL pow((float_64)10, (CASTING float_64)(int_32 (($6 + $7) + [-4]))) * (float_64)((float_64)(CASTING float_64)(int_64 $21) / (float_64)(CASTING float_64)(uint_64 $2)))
	$23 = ( *(($24 + [216])) ? $8 : (*($24 + [208]) & [1]) )
	$22 = [-1]
	
.LOOP $label$61:
	$16 = ($23 + $22)
	$12 = ($22 + [1])
	$22 = $12
	if ( *(($16 + [1])) ){ goto $label$61 }
	$20 = (Rounds 0)($13)
	$17 = (int_64)0
	if ( ($12 == 0) ){ goto $label$62 }
	$19 = (CASTING uint_64)(uint_32 $12)
	$2 = (int_64)8
	$17 = (int_64)0
	
.LOOP $label$63:
	$22 = *($23)
	if ( ((uint_32)(($22 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$17 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $22) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$2 & (int_64)4294967288)) | (int_64)$17)
	
.LABEL $label$64
	$23 = ($23 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	$19 = ((int_64)$19 + (int_64)-1)
	if ( ((int_64)$19 != (int_64)0) ){ goto $label$63 }
	
.LABEL $label$62
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [768])
	$2 = (uint_64)$17 >> (uint_64)(int_64)8)
	$10 = ((int_64)$17 | (int_64)$10)
	$22 = [0]
	
.LOOP $label$67:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$66 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$68 }
	
.LOOP $label$69:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$66 }
	$22 = ($22 + [1])
	if ( ((int_32)$22 < (int_32)[7]) ){ goto $label$69 }
	
.LABEL $label$68
	$23 = [1]
	$22 = ($22 + [1])
	if ( ((int_32)$22 < (int_32)[7]) ){ goto $label$67 }
	goto $label$65 
	
.LABEL $label$66
	$23 = [0]
	
.LABEL $label$65
	CALL eosio_assert($23, [832])
	*(($24 + [200])) = [0]
	*($24 + [192]) = (int_64)0
	$22 = CALL strlen([864])
	if ( ((uint_32)$22 >= (uint_32)[-16]) ){ goto $label$59 }
	if ( ((uint_32)$22 >= (uint_32)[11]) ){ goto $label$72 }
	*($24 + [192]) = ($22 << [1])
	$23 = (($24 + [192]) | [1])
	if ( $22 ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$72
	$16 = (($22 + [16]) & [-16])
	$23 = CALL $51($16)
	*($24 + [192]) = ($16 | [1])
	*($24 + [200]) = $23
	*($24 + [196]) = $22
	
.LABEL $label$71
	CALL memcpy($23, [864], $22)
	
.LABEL $label$70
	*(($23 + $22)) = [0]
	*($24 + [184]) = *(($5 + [16]))
	CALL $21(($24 + [168]), ($24 + [184]))
	$22 = *($24 + [168])
	$23 = ($22 & [1])
	CALL $55(($24 + [192]), ( *($24 + [176]) ? (($24 + [168]) | [1]) : $23 ), ( *($24 + [172]) ? uint_32($22 >> [1]) : $23 ))
	CALL $57(($24 + [192]), [896])
	$22 = *($24 + [208])
	$23 = ($22 & [1])
	CALL $55(($24 + [192]), ( *(($24 + [216])) ? $8 : $23 ), ( *($24 + [212]) ? uint_32($22 >> [1]) : $23 ))
	CALL _Z13uint64_stringyi(($24 + [152]), $20, $6)
	CALL $57(($24 + [192]), [912])
	$22 = *($24 + [152])
	$23 = ($22 & [1])
	CALL $55(($24 + [192]), ( *($24 + [160]) ? (($24 + [152]) | [1]) : $23 ), ( *($24 + [156]) ? uint_32($22 >> [1]) : $23 ))
	CALL $57(($24 + [192]), [928])
	$2 = CALL current_time()
	*(($24 + [108])) = [0]
	*(($24 + [112])) = [0]
	*($24 + [92]) = [0]
	*($24 + [96]) = [0]
	*($24 + [100]) = [0]
	*($24 + [104]) = [0]
	*($24 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($24 + [116]) = [0]
	*(($24 + [120])) = [0]
	*(($24 + [124])) = [0]
	*($24 + [128]) = [0]
	*(($24 + [132])) = [0]
	*(($24 + [136])) = [0]
	$16 = ($24 + [116])
	$14 = *($0)
	$2 = (int_64)0
	$17 = (int_64)59
	$22 = [944]
	$18 = (int_64)0
	
.LOOP $label$73:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$78 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$23 = ($23 + [165])
	goto $label$76 
	
.LABEL $label$78
	$19 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $23) << (int_64)56) >> (int_64)56)
	
.LABEL $label$75
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$74
	$22 = ($22 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$73 }
	*($24 + [72]) = $18
	*($24 + [64]) = $14
	$2 = (int_64)0
	$17 = (int_64)59
	$22 = [688]
	$18 = (int_64)0
	
.LOOP $label$79:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$84 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$83 }
	$23 = ($23 + [165])
	goto $label$82 
	
.LABEL $label$84
	$19 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$83
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$82
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $23) << (int_64)56) >> (int_64)56)
	
.LABEL $label$81
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$80
	$22 = ($22 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$79 }
	*($24 + [56]) = $18
	$2 = (int_64)0
	$17 = (int_64)59
	$22 = [960]
	$18 = (int_64)0
	
.LOOP $label$85:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$90 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$23 = ($23 + [165])
	goto $label$88 
	
.LABEL $label$90
	$19 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $23) << (int_64)56) >> (int_64)56)
	
.LABEL $label$87
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$86
	$22 = ($22 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$85 }
	*($24 + [48]) = $18
	$2 = (int_64)0
	$19 = (int_64)59
	$22 = [976]
	$18 = (int_64)0
	
.LOOP $label$91:
	$17 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$92 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$94 }
	$23 = ($23 + [165])
	goto $label$93 
	
.LABEL $label$94
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$93
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($23 & [31])) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$92
	$22 = ($22 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$91 }
	CALL eosio_assert((uint_64)(((int_64)$21 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [768])
	$2 = (int_64)5459781
	$22 = [0]
	
.LOOP $label$97:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$96 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$98 }
	
.LOOP $label$99:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$96 }
	$22 = ($22 + [1])
	if ( ((int_32)$22 < (int_32)[7]) ){ goto $label$99 }
	
.LABEL $label$98
	$23 = [1]
	$22 = ($22 + [1])
	if ( ((int_32)$22 < (int_32)[7]) ){ goto $label$97 }
	goto $label$95 
	
.LABEL $label$96
	$23 = [0]
	
.LABEL $label$95
	CALL eosio_assert($23, [832])
	*(($24 + [24])) = (int_64)1397703940
	*($24 + [8]) = $18
	*($24 + [16]) = $21
	*($24) = *($0)
	$12 = ($24 + [32])
	CALL $60($12, ($24 + [192]))
	$23 = *(($24 + [120]))
	if ( ((uint_32)$23 >= (uint_32)*(($24 + [124]))) ){ goto $label$103 }
	*($23 + [8]) = *($24 + [48])
	*($23) = *($24 + [56])
	*($23 + [16 align=4]) = (int_64)0
	*(($16 = ($23 + [24]))) = [0]
	$22 = CALL $51([16])
	*($23 + [16]) = $22
	$8 = ($22 + [16])
	*($16) = $8
	*(($22 + [8])) = *((($24 + [64]) + [8]))
	*($22) = *($24 + [64])
	*(($23 + [20])) = $8
	*($23 + [28]) = [0]
	*(($23 + [32])) = [0]
	*(($23 + [36])) = [0]
	$22 = *($12)
	$16 = ( *(($24 + [36])) ? uint_32($22 >> [1]) : ($22 & [1]) )
	$22 = ($16 + [32])
	$2 = (CASTING uint_64)(uint_32 $16)
	$16 = ($23 + [28])
	
.LOOP $label$104:
	$22 = ($22 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$104 }
	if ( ($22 == 0) ){ goto $label$102 }
	CALL $24($16, $22)
	$16 = *(($23 + [32]))
	$22 = *(($23 + [28]))
	goto $label$101 
	
.LABEL $label$103
	CALL $26($16, ($24 + [64]), ($24 + [56]), ($24 + [48]), $24)
	goto $label$100 
	
.LABEL $label$102
	$16 = [0]
	$22 = [0]
	
.LABEL $label$101
	*($24 + [228]) = $22
	*($24 + [224]) = $22
	*($24 + [232]) = $16
	*($24 + [240]) = ($24 + [224])
	*($24 + [248]) = $24
	CALL $25(($24 + [248]), ($24 + [240]))
	*(($22 = (($24 + [80]) + [40]))) = (*($22) + [40])
	
.LABEL $label$100
	if ( ((*($24 + [32]) & [1]) == 0) ){ goto $label$105 }
	CALL $52(*(($24 + [40])))
	
.LABEL $label$105
	*($24 + [8]) = (int_64)0
	$2 = *($0)
	*($24) = $2
	CALL $27(($24 + [64]), ($24 + [80]))
	$22 = *($24 + [64])
	CALL send_deferred($24, $2, $22, (*($24 + [68]) - $22), [1])
	$22 = *($24 + [64])
	if ( ($22 == 0) ){ goto $label$106 }
	*($24 + [68]) = $22
	CALL $52($22)
	
.LABEL $label$106
	CALL $30(($24 + [80]))
	if ( ((*($24 + [152]) & [1]) == 0) ){ goto $label$107 }
	CALL $52(*(($24 + [160])))
	
.LABEL $label$107
	if ( ((*($24 + [168]) & [1]) == 0) ){ goto $label$108 }
	CALL $52(*(($24 + [176])))
	
.LABEL $label$108
	if ( ((*($24 + [192]) & [1]) == 0) ){ goto $label$109 }
	CALL $52(*($24 + [200]))
	
.LABEL $label$109
	$2 = *(($5 + [32]))
	$13 = CALL pow((float_64)10, (CASTING float_64)(int_32 (([4] - $6) - $7)))
	*(($24 + [232])) = [0]
	*($24 + [224]) = (int_64)0
	$2 = (Rounds 0)(((float_64)$13 * (float_64)((float_64)(CASTING float_64)(uint_64 ((int_64)$2 * (int_64)$20)) * (float_64)(float_64)0.999)))
	$22 = CALL strlen([1136])
	if ( ((uint_32)$22 >= (uint_32)[-16]) ){ goto $label$58 }
	if ( ((uint_32)$22 >= (uint_32)[11]) ){ goto $label$112 }
	*($24 + [224]) = ($22 << [1])
	$23 = (($24 + [224]) | [1])
	if ( $22 ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$112
	$16 = (($22 + [16]) & [-16])
	$23 = CALL $51($16)
	*($24 + [224]) = ($16 | [1])
	*($24 + [232]) = $23
	*($24 + [228]) = $22
	
.LABEL $label$111
	CALL memcpy($23, [1136], $22)
	
.LABEL $label$110
	*(($23 + $22)) = [0]
	*($24 + [184]) = *($9)
	CALL $21(($24 + [80]), ($24 + [184]))
	$23 = *($24 + [80])
	$16 = ($23 & [1])
	$22 = (($24 + [80]) | [1])
	CALL $55(($24 + [224]), ( *($24 + [88]) ? $22 : $16 ), ( *($24 + [84]) ? uint_32($23 >> [1]) : $16 ))
	if ( ((*($24 + [80]) & [1]) == 0) ){ goto $label$113 }
	CALL $52(*(($24 + [88])))
	
.LABEL $label$113
	CALL $57(($24 + [224]), [1168])
	CALL $21(($24 + [80]), $5)
	$23 = *($24 + [80])
	$16 = ($23 & [1])
	CALL $55(($24 + [224]), ( *($24 + [88]) ? $22 : $16 ), ( *($24 + [84]) ? uint_32($23 >> [1]) : $16 ))
	if ( ((*($24 + [80]) & [1]) == 0) ){ goto $label$114 }
	CALL $52(*(($24 + [88])))
	
.LABEL $label$114
	CALL $57(($24 + [224]), [1184])
	CALL _Z13uint64_stringyi(($24 + [192]), (Rounds 0)(((float_64)(CASTING float_64)(uint_64 *(($5 + [32]))) * (float_64)(float_64)0.999)), $7)
	$22 = *($24 + [192])
	$23 = ($22 & [1])
	CALL $55(($24 + [224]), ( *($24 + [200]) ? (($24 + [192]) | [1]) : $23 ), ( *($24 + [196]) ? uint_32($22 >> [1]) : $23 ))
	CALL $57(($24 + [224]), [1200])
	CALL _Z13uint64_stringyi(($24 + [168]), $20, $6)
	$22 = *($24 + [168])
	$23 = ($22 & [1])
	CALL $55(($24 + [224]), ( *($24 + [176]) ? (($24 + [168]) | [1]) : $23 ), ( *($24 + [172]) ? uint_32($22 >> [1]) : $23 ))
	CALL $57(($24 + [224]), [1216])
	CALL _Z13uint64_stringyi(($24 + [152]), $2, [4])
	$22 = *($24 + [152])
	$23 = ($22 & [1])
	CALL $55(($24 + [224]), ( *($24 + [160]) ? (($24 + [152]) | [1]) : $23 ), ( *($24 + [156]) ? uint_32($22 >> [1]) : $23 ))
	CALL $57(($24 + [224]), [1232])
	$2 = CALL current_time()
	*(($24 + [108])) = [0]
	*((($24 + [80]) + [32])) = [0]
	*($24 + [92]) = [0]
	*($24 + [96]) = [0]
	*($24 + [100]) = [0]
	*($24 + [104]) = [0]
	*($24 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($24 + [116]) = [0]
	*(($24 + [120])) = [0]
	*(($24 + [124])) = [0]
	*($24 + [128]) = [0]
	*(($24 + [132])) = [0]
	*(($24 + [136])) = [0]
	$16 = ($24 + [116])
	$21 = *($0)
	$2 = (int_64)0
	$17 = (int_64)59
	$22 = [944]
	$18 = (int_64)0
	
.LOOP $label$115:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$120 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$119 }
	$23 = ($23 + [165])
	goto $label$118 
	
.LABEL $label$120
	$19 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$119
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$118
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $23) << (int_64)56) >> (int_64)56)
	
.LABEL $label$117
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$116
	$22 = ($22 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$115 }
	*($24 + [72]) = $18
	*($24 + [64]) = $21
	$2 = (int_64)0
	$17 = (int_64)59
	$22 = [960]
	$18 = (int_64)0
	
.LOOP $label$121:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$126 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$125 }
	$23 = ($23 + [165])
	goto $label$124 
	
.LABEL $label$126
	$19 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$125
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$124
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $23) << (int_64)56) >> (int_64)56)
	
.LABEL $label$123
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$122
	$22 = ($22 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$121 }
	*($24 + [56]) = $18
	$2 = (int_64)0
	$19 = (int_64)59
	$22 = [1280]
	$18 = (int_64)0
	
.LOOP $label$127:
	$17 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$128 }
	$23 = *($22)
	if ( ((uint_32)(($23 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$130 }
	$23 = ($23 + [165])
	goto $label$129 
	
.LABEL $label$130
	$23 = ( ($23 + [208]) ? [0] : ((($23 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$129
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($23 & [31])) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$128
	$22 = ($22 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$127 }
	*(($24 + [24])) = $10
	*($24 + [8]) = $18
	*($24) = $21
	*($24 + [16]) = $20
	CALL $60(($24 + [32]), ($24 + [224]))
	CALL $28($16, ($24 + [64]), $9, ($24 + [56]), $24)
	if ( ((*($24 + [32]) & [1]) == 0) ){ goto $label$131 }
	CALL $52(*(($24 + [40])))
	
.LABEL $label$131
	*($24 + [8]) = (int_64)0
	*($24) = $1
	$2 = *($0)
	CALL $27(($24 + [64]), ($24 + [80]))
	$22 = *($24 + [64])
	CALL send_deferred($24, $2, $22, (*($24 + [68]) - $22), [0])
	$22 = *($24 + [64])
	if ( ($22 == 0) ){ goto $label$132 }
	*($24 + [68]) = $22
	CALL $52($22)
	
.LABEL $label$132
	CALL $30(($24 + [80]))
	if ( ((*($24 + [152]) & [1]) == 0) ){ goto $label$133 }
	CALL $52(*(($24 + [160])))
	
.LABEL $label$133
	if ( ((*($24 + [168]) & [1]) == 0) ){ goto $label$134 }
	CALL $52(*(($24 + [176])))
	
.LABEL $label$134
	if ( ((*($24 + [192]) & [1]) == 0) ){ goto $label$135 }
	CALL $52(*(($24 + [200])))
	
.LABEL $label$135
	if ( ((*($24 + [224]) & [1]) == 0) ){ goto $label$136 }
	CALL $52(*($24 + [232]))
	
.LABEL $label$136
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [432])
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)$4), [480])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [528])
	*($5 + [42]) = (*($5 + [42]) + [255])
	$2 = *($5)
	$12 = [1]
	CALL eosio_assert([1], [592])
	*($24 + [8]) = (($24 + [80]) + [37])
	*($24 + [4]) = ($24 + [80])
	*($24) = ($24 + [80])
	CALL $29($24, $5)
	CALL db_update_i64(*($5 + [48]), (int_64)0, ($24 + [80]), [37])
	$22 = ($0 + [64])
	if ( (uint_64)($2 <= *($22)) ){ goto $label$60 }
	*($22) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$60
	if ( ((*($24 + [208]) & [1]) == 0) ){ goto $label$137 }
	CALL $52(*(($24 + [216])))
	
.LABEL $label$137
	*([0] + [4]) = ($24 + [256])
	return $12
	
.LABEL $label$59
	CALL $53(($24 + [192]))
	
.LABEL $label$58
	CALL $53(($24 + [224]))
	(unreachable)
	return (unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $51(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $59($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $52($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $52($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $51(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $59($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $52($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $52($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [768])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [832])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [400])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $48([1348], $0)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [400])
	CALL memcpy(($3 + [25]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [400])
	CALL memcpy(($2 + [26]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($2 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($2 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [400])
	CALL memcpy(($2 + [48]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [400])
	CALL memcpy(($2 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [400])
	CALL memcpy(($2 + [24]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4 + [8]) = $2
	CALL $46(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [400])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [400])
	CALL memcpy(($2 + [16]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [400])
	CALL memcpy(($2 + [17]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$1 = *($1)
	CALL eosio_assert(((int_32)*($1 + [8]) != (int_32)*($1 + [4])), [400])
	CALL memcpy(($2 + [18]), *($1 + [4]), [1])
	*($1 + [4]) = (*($1 + [4]) + [1])
}

int_32 .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9836])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $51($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZN8banzhuan3setEN5eosio4nameEyhhh (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [64])
	*([0] + [4]) = $15
	$11 = (int_64)0
	$10 = (int_64)59
	$9 = [16]
	$12 = (int_64)0
	
.LOOP $label$1:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($12)
	$7 = *(($0 + [72]))
	$14 = *(($0 + [76]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$5 }
	$9 = ($14 + [-24])
	$8 = ([0] - $7)
	
.LOOP $label$6:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$5 }
	$14 = $9
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_32)($6 + $8) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [48])
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$8 }
	$9 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$6), [32])
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	$14 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4980189539499769856, $1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $14($6, $14)
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$6), [32])
	
.LABEL $label$7
	$14 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($14, [96])
	CALL eosio_assert($14, [432])
	CALL eosio_assert(((int_32)*($9 + [44]) == (int_32)$6), [480])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [528])
	*($9 + [32]) = $2
	*($9 + [40]) = $3
	*($9 + [42]) = $4
	*($9 + [43]) = $5
	$11 = *($9)
	CALL eosio_assert([1], [592])
	*($15 + [56]) = ($15 + [37])
	*($15 + [52]) = $15
	*($15 + [48]) = $15
	CALL $29(($15 + [48]), $9)
	CALL db_update_i64(*($9 + [48]), (int_64)0, $15, [37])
	$9 = ($0 + [64])
	if ( (uint_64)($11 <= *($9)) ){ goto $label$9 }
	*($9) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($15 + [64])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($7 + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [24]) = [0]
	*($7 + [26]) = [0]
	*($7 + [36]) = $1
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + $3)
	*($7 + [48]) = ($7 + [32])
	*($7 + [56]) = ($7 + [8])
	CALL $44(($7 + [56]), ($7 + [48]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($7 + [26]))
	$8 = *(($7 + [25]))
	$0 = *(($7 + [24]))
	$5 = *(($7 + [16]))
	$4 = *($7 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 $5), (int_64 ($0 & [255])), (int_32 ($8 & [255])), (int_32 ($3 & [255])), (int_32 $6))
	*([0] + [4]) = ($7 + [64])
	return [1]
}

void .FUNC _ZN8banzhuan3addEN5eosio4nameEhyhhhyyh (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5, int_32 _ZN8banzhuan3addEN5eosio4nameEhyhhhyyh, int_64 $7, int_64 $8, int_32 $9)
{
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [64])
	*([0] + [4]) = $19
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [16]
	$16 = (int_64)0
	
.LOOP $label$1:
	$17 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($13)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [165])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$2
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($16)
	$11 = *(($0 + [72]))
	$18 = *(($0 + [76]))
	if ( ((int_32)$18 == (int_32)$11) ){ goto $label$5 }
	$13 = ($18 + [-24])
	$12 = ([0] - $11)
	
.LOOP $label$6:
	if ( ((int_64)*(*($13)) == (int_64)$1) ){ goto $label$5 }
	$18 = $13
	$10 = ($13 + [-24])
	$13 = $10
	if ( ((int_32)($10 + $12) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$10 = ($0 + [48])
	if ( ((int_32)$18 == (int_32)$11) ){ goto $label$10 }
	$13 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [44]) == (int_32)$10), [32])
	if ( $13 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$13 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4980189539499769856, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$8 }
	$13 = CALL $14($10, $13)
	CALL eosio_assert(((int_32)*($13 + [44]) == (int_32)$10), [32])
	
.LABEL $label$9
	CALL eosio_assert([1], [432])
	CALL eosio_assert(((int_32)*($13 + [44]) == (int_32)$10), [480])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [528])
	*($13 + [24]) = $2
	*($13 + [32]) = $3
	*($13 + [40]) = $4
	*($13 + [41]) = $5
	*($13 + [42]) = $6
	$15 = *($13)
	*($13) = $1
	*($13 + [8]) = $7
	*($13 + [16]) = $8
	*($13 + [43]) = $9
	CALL eosio_assert(((int_64)$15 == (int_64)$1), [592])
	*($19 + [56]) = ($19 + [37])
	*($19 + [52]) = $19
	*($19 + [48]) = $19
	CALL $29(($19 + [48]), $13)
	CALL db_update_i64(*($13 + [48]), (int_64)0, $19, [37])
	$13 = ($0 + [64])
	if ( (uint_64)($15 <= *($13)) ){ goto $label$7 }
	*($13) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	goto $label$7 
	
.LABEL $label$8
	$14 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [1296])
	*(($13 = CALL $51([56])) + [44]) = $10
	*($13 + [24]) = $2
	*($13) = $1
	*($13 + [32]) = $3
	*($13 + [40]) = $4
	*($13 + [41]) = $5
	*($13 + [42]) = $6
	*($13 + [8]) = $7
	*($13 + [16]) = $8
	*($13 + [43]) = $9
	*($19 + [56]) = ($19 + [37])
	*($19 + [52]) = $19
	*($19 + [48]) = $19
	CALL $29(($19 + [48]), $13)
	$15 = *($13)
	$18 = CALL db_store_i64(*(($0 + [56])), (int_64)4980189539499769856, $14, $15, $19, [37])
	*($13 + [48]) = $18
	$10 = ($0 + [64])
	if ( (uint_64)($15 <= *($10)) ){ goto $label$11 }
	*($10) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($19 + [48]) = $13
	$15 = *($13)
	*($19) = $15
	*($19 + [44]) = $18
	$12 = ($0 + [76])
	$10 = *($12)
	if ( ((uint_32)$10 >= (uint_32)*(($0 + [80]))) ){ goto $label$13 }
	*($10 + [8]) = $15
	*($10 + [16]) = $18
	*($19 + [48]) = [0]
	*($10) = $13
	*($12) = ($10 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $17(($0 + [72]), ($19 + [48]), $19, ($19 + [44]))
	
.LABEL $label$12
	$13 = *($19 + [48])
	*($19 + [48]) = [0]
	if ( ($13 == 0) ){ goto $label$7 }
	CALL $52($13)
	
.LABEL $label$7
	*([0] + [4]) = ($19 + [64])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	$11 = $12
	*([0] + [4]) = $12
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($12 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($11 + [16]) = [0]
	*($11 + [8]) = (int_64)0
	*($11 + [24]) = (int_64)0
	*($11 + [32]) = [0]
	*($11 + [33]) = [0]
	*($11 + [34]) = [0]
	*($11 + [40]) = (int_64)0
	*($11 + [48]) = (int_64)0
	*($11 + [56]) = [0]
	*($11 + [68]) = $1
	*($11 + [64]) = $1
	*($11 + [72]) = ($1 + $3)
	*($11 + [80]) = ($11 + [64])
	*($11 + [88]) = ($11 + [8])
	CALL $45(($11 + [88]), ($11 + [80]))
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *(($11 + [56]))
	$9 = *(($11 + [48]))
	$8 = *(($11 + [40]))
	$12 = *(($11 + [34]))
	$0 = *(($11 + [33]))
	$7 = *(($11 + [32]))
	$6 = *(($11 + [24]))
	$5 = *(($11 + [16]))
	$4 = *($11 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$10 = *((*($1) + $10))
	
.LABEL $label$5
	CALL void $1((int_32 $4), (int_64 ($5 & [255])), (int_32 $6), (int_64 ($7 & [255])), (int_32 ($0 & [255])), (int_32 ($12 & [255])), (int_32 $8), (int_64 $9), (int_64 ($3 & [255])), (int_32 $10))
	*([0] + [4]) = ($11 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [176])
	*([0] + [4]) = $7
	*(($7 + [104])) = $0
	*(($7 + [112])) = (int_64)-1
	*(($7 + [120])) = (int_64)0
	*(($7 + [128])) = [0]
	*($7 + [96]) = $0
	*($7 + [88]) = $0
	*($7 + [136]) = $0
	*(($7 + [144])) = $0
	*(($7 + [152])) = (int_64)-1
	*(($6 = ($7 + [160]))) = [0]
	*(($7 + [164])) = [0]
	*(($7 + [168])) = [0]
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$3 }
	if ( ((int_64)$2 <= (int_64)6182744098496053247) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)6182744098496053248) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)8200263273069674496) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)8238719791762767872) ){ goto $label$3 }
	*($7 + [68]) = [0]
	*($7 + [64]) = [1]
	*($7 + [24 align=4]) = *($7 + [64])
	CALL $11(($7 + [88]), ($7 + [24]))
	$4 = *($6)
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4417468284497035264) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)3625960649986670592) ){ goto $label$3 }
	*($7 + [84]) = [0]
	*($7 + [80]) = [2]
	*($7 + [8 align=4]) = *($7 + [80])
	CALL $7(($7 + [88]), ($7 + [8]))
	$4 = *($6)
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$6
	*($7 + [52]) = [0]
	*($7 + [48]) = [3]
	*($7 + [40 align=4]) = *($7 + [48])
	CALL $11(($7 + [88]), ($7 + [40]))
	$4 = *($6)
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	*($7 + [60]) = [0]
	*($7 + [56]) = [4]
	*($7 + [32 align=4]) = *($7 + [56])
	CALL $11(($7 + [88]), ($7 + [32]))
	$4 = *($6)
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($7 + [76]) = [0]
	*($7 + [72]) = [5]
	*($7 + [16 align=4]) = *($7 + [72])
	CALL $9(($7 + [88]), ($7 + [16]))
	
.LABEL $label$3
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($7 + [164])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$11 }
	CALL $52($3)
	
.LABEL $label$11
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($7 + [160]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $4
	
.LABEL $label$8
	*($5) = $4
	CALL $52($6)
	
.LABEL $label$1
	$4 = *(($7 + [120]))
	if ( ($4 == 0) ){ goto $label$12 }
	$5 = ($7 + [124])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$14 }
	
.LOOP $label$15:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$16 }
	CALL $52($3)
	
.LABEL $label$16
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$15 }
	$6 = *(($7 + [120]))
	goto $label$13 
	
.LABEL $label$14
	$6 = $4
	
.LABEL $label$13
	*($5) = $4
	CALL $52($6)
	
.LABEL $label$12
	*([0] + [4]) = ($7 + [176])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [368])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $51([56])) + [44]) = $0
	*($6) = (int_64)0
	CALL $16(($8 + [32]), $6)
	*($6 + [48]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [48])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $17(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $52($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [192])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [240])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [304])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $52($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $52($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [400])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [400])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [400])
	CALL memcpy(($1 + [24]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [400])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [400])
	CALL memcpy(($1 + [40]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [400])
	CALL memcpy(($1 + [41]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [400])
	CALL memcpy(($1 + [42]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [400])
	CALL memcpy(($1 + [43]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $51(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $59($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $52($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $52($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN8banzhuan4idexEyN5eosio4nameEy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$6 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)4980189539499769856, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = ($0 + [48])
	$5 = CALL $14($4, $5)
	
.LOOP $label$2:
	$6 = [0]
	if ( ((int_32)*($5 + [43]) != (int_32)[1]) ){ goto $label$3 }
	if ( (*($5 + [42]) == 0) ){ goto $label$3 }
	$6 = CALL _ZN8banzhuan10idex_checkEyN5eosio4nameEy($0, $1, *($5), $1)
	
.LABEL $label$3
	CALL eosio_assert([1], [160])
	$5 = CALL db_next_i64(*($5 + [48]), ($7 + [8]))
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $14($4, $5)
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [1120])
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [400])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [400])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [400])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC _ZN8banzhuan4ibanEyN5eosio4nameEy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = ($0 + [8])
	$6 = [0]
	$5 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $18($4, $5)
	
.LABEL $label$1
	CALL eosio_assert(*($6 + [12]), [416])
	if ( ((uint_64)((int_64)*($6 + [8]) + (int_64)*($6)) <= (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$3 }
	CALL eosio_assert(CALL $20($0, $1), [672])
	goto $label$2 
	
.LABEL $label$3
	CALL _ZN8banzhuan7updatetEv($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [432])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$4), [480])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [528])
	*(($6 + [8])) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [592])
	CALL eosio_assert([1], [656])
	CALL memcpy($7, $6, [8])
	CALL eosio_assert([1], [656])
	CALL memcpy(($7 | [8]), ($6 + [8]), [4])
	CALL eosio_assert([1], [656])
	CALL memcpy(($7 | [12]), ($6 + [12]), [1])
	CALL db_update_i64(*($6 + [20]), (int_64)0, $7, [13])
	$6 = ($0 + [24])
	if ( ((int_64)*($6) != (int_64)0) ){ goto $label$2 }
	*($6) = (int_64)1
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
}

void .FUNC _ZN8banzhuan5eraseEyN5eosio4nameEy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [16])
	*([0] + [4]) = $13
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($10)
	$5 = *(($0 + [72]))
	$12 = *(($0 + [76]))
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$5 }
	$7 = ($12 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$5 }
	$12 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = ($0 + [48])
	if ( ((int_32)$12 == (int_32)$5) ){ goto $label$8 }
	$7 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$4), [32])
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	$12 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4980189539499769856, $2)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	$7 = CALL $14($4, $12)
	CALL eosio_assert(((int_32)*($7 + [44]) == (int_32)$4), [32])
	
.LABEL $label$7
	$12 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($12, [96])
	CALL eosio_assert($12, [112])
	CALL eosio_assert($12, [160])
	$12 = CALL db_next_i64(*($7 + [48]), ($13 + [8]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$9 }
	CALL $14($4, $12)
	
.LABEL $label$9
	CALL $15($4, $7)
	*([0] + [4]) = ($13 + [16])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [656])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [656])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [656])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [656])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [656])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [656])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [656])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $35($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [656])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [656])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [656])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [656])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [656])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [656])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [656])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [656])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [656])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [656])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [656])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $35(CALL $36($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $52($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $52($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $52($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $52($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $52($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $52($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $52($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $52($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = CALL strlen($1)
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$6 = CALL $51($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, $1, $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $55($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $59 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $51($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [9856])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [9840]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [9872]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9732])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9540]
	$1 = (((int_32)$2 * (int_32)[12]) + [9540])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($5 + [15]) = $1
	$1 = *($2)
	$3 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($3 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$4 = (($3 + [17]) & [-16])
	$1 = CALL $51($4)
	*($0) = ($4 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($5 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $55($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $3)
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $53($0)
}

void .FUNC $52 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $53 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $51(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $52($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $56($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $51($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $52($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	return CALL $55($0, $1, CALL $68($1))
}