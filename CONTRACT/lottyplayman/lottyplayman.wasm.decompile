(data (i32.const 4) "\f0g\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 176) "invalid symbol name\00")
(data (i32.const 208) "read\00")
(data (i32.const 224) "get\00")
(data (i32.const 240) "invalid quantity\00")
(data (i32.const 272) "must positive quantity\00")
(data (i32.const 304) "not award\00")
(data (i32.const 320) "cannot pass end iterator to modify\00")
(data (i32.const 368) "active\00")
(data (i32.const 384) "eosio.token\00")
(data (i32.const 400) "transfer\00")
(data (i32.const 416) "eoscrown2222\00")
(data (i32.const 432) "write\00")
(data (i32.const 448) "cannot increment end iterator\00")
(data (i32.const 480) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 544) "error reading iterator\00")
(data (i32.const 576) "object passed to modify is not in multi_index\00")
(data (i32.const 624) "cannot modify objects in table of another contract\00")
(data (i32.const 688) "updater cannot change primary key when modifying an object\00")
(data (i32.const 752) "game\00")
(data (i32.const 768) " | upper_bound gameid: \00")
(data (i32.const 800) "cannot pass end iterator to erase\00")
(data (i32.const 848) "offer\00")
(data (i32.const 864) "reveal\00")
(data (i32.const 880) "object passed to erase is not in multi_index\00")
(data (i32.const 928) "cannot erase objects in table of another contract\00")
(data (i32.const 992) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1056) "it is not admin\00")
(data (i32.const 1072) "already awarded\00")
(data (i32.const 1088) " | mul: \00")
(data (i32.const 1120) " | count: \00")
(data (i32.const 1136) "divide by zero\00")
(data (i32.const 1152) "signed division overflow\00")
(data (i32.const 1184) "multiplication overflow\00")
(data (i32.const 1216) "multiplication underflow\00")
(data (i32.const 1248) "to account does not exist\00")
(data (i32.const 1280) "must deposit positive quantity\00")
(data (i32.const 1312) " bet gameid: \00")
(data (i32.const 1328) "this phase not exist\00")
(data (i32.const 1360) "this phase not start\00")
(data (i32.const 1392) "this phase ended\00")
(data (i32.const 1424) "cannot create objects in table of another contract\00")
(data (i32.const 1488) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1552) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1616) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1664) "this phase already begin or end\00")
(data (i32.const 1696) "that phase already exist\00")
(data (i32.const 10128) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_end_i64" (func $fimport$5 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$9 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$11 (param i32)))
(import "env" "db_idx64_store" (func $fimport$12 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$13 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$19 (param i32 i32)))
(import "env" "is_account" (func $fimport$20 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$23 (param i32)))
(import "env" "printui" (func $fimport$24 (param i64)))
(import "env" "read_action_data" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$26 (param i64)))
(import "env" "require_auth2" (func $fimport$27 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$28 (param i64)))
(import "env" "send_inline" (func $fimport$29 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $82))
(export "free" (func $85))
(export "memcmp" (func $95))
(export "strlen" (func $96))
(table $0 7 7 anyfunc)
(elem (i32.const 0) $97 $11 $6 $15 $8 $9 $13)



int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $86($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $97 ()
{
	(unreachable)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $86($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $87($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $86(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $87($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $93 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $87(*(($2 + [40])))
	
.LABEL $label$4
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL $87(*(($2 + [28])))
	
.LABEL $label$5
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [12])) = $3
	CALL $87($3)
	
.LABEL $label$6
	CALL $87($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $87($2)
	
.LABEL $label$7
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7035924439720001536, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*(($2 + [36])) == (int_32)$4), [480])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)7035924439720001536, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $54($4, $8)
	CALL eosio_assert(((int_32)*($2 + [36]) == (int_32)$4), [480])
	
.LABEL $label$4
	*($2 + [44]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $94($4, ($1 + [8]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $94(($4 + [16]), $4)
	CALL void $1((int_32 $2), (int_64 ($4 + [16])), (int_32 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $87(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $87(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [432])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [432])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $33(CALL $33(CALL $43($0, ($1 + [8])), ($1 + [20])), ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [120])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [432])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*($0) + [8])
	*($0) = $6
	$3 = *($1 + [8])
	$2 = *(($1 + [12]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$2
	*($0) = $6
	$2 = *($1 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	$2 = *(($1 + [20]))
	$2 = ( *(($1 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	$6 = ($2 + $6)
	*($0) = $6
	
.LABEL $label$4
	$2 = *($1 + [32])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($0) = $6
	$1 = *(($1 + [32]))
	$1 = ( *(($1 + [36])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$6 }
	$6 = ($1 + $6)
	*($0) = $6
	
.LABEL $label$6
	*($0) = ($6 + [69])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $86(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $93($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $87($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $87(*(($2 + [40])))
	
.LABEL $label$4
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL $87(*(($2 + [28])))
	
.LABEL $label$5
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [12])) = $3
	CALL $87($3)
	
.LABEL $label$6
	CALL $87($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $87($2)
	
.LABEL $label$7
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $86(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $93($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $47(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $21(CALL $21(CALL $39($0, ($1 + [8])), ($1 + [20])), ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [208])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [208])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [60]) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $86([88])) + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40]) = [0]
	*($6 + [56]) = [0]
	*($6 + [72]) = $0
	CALL $45(($8 + [32]), $6)
	*($6 + [80]) = [-1]
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $46(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $87(*(($4 + [40])))
	
.LABEL $label$10
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL $87(*(($4 + [28])))
	
.LABEL $label$11
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($4 + [12])) = $7
	CALL $87($7)
	
.LABEL $label$12
	CALL $87($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [32])
	*([0] + [4]) = $3
	*($3 + [16]) = $1
	CALL require_auth(*($0))
	*($3 + [8]) = ($0 + [16])
	CALL $49(($3 + [24]), ($3 + [8]), ($3 + [16]))
	$2 = *($3 + [28])
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((int_64)*($3 + [16]) != (int_64)*($2 + [24])) ){ goto $label$2 }
	$1 = *($3 + [24])
	*($3) = $1
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($2) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_64)*($2 + [24]) != (int_64)*($3 + [16])) ){ goto $label$1 }
	CALL prints([1312])
	CALL printui(*(($2 + [24])))
	CALL eosio_assert(((int_32)*($3 + [4]) != (int_32)[0]), [1328])
	CALL eosio_assert(((int_64)*(*($3 + [4]) + [8]) == (int_64)*($0)), [1056])
	CALL eosio_assert(((int_32)*(*($3 + [4]) + [32]) ^ (int_32)[1]), [1664])
	$2 = *($3 + [4])
	*($3 + [24]) = $0
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [320])
	CALL $74(*($3 + [8]), $2, (int_64)0, ($3 + [24]))
	CALL $50($3)
	$2 = *($3 + [4])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($3 + [4]) = [0]
	*($3) = ($3 + [8])
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [32])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6, int_64 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	*($15 + [72]) = $1
	*($15 + [64]) = $6
	*($15 + [56]) = $7
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$20(*($0)), [1248])
	$14 = [0]
	if ( ((uint_64)((int_64)*($5) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$14 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	CALL eosio_assert($14, [240])
	CALL eosio_assert(((int_64)*($5) > (int_64)0), [1280])
	*($15 + [48]) = ($0 + [16])
	CALL $49($15, ($15 + [48]), ($15 + [64]))
	$13 = *($15 + [4])
	if ( ($13 == 0) ){ goto $label$7 }
	if ( ((int_64)*($15 + [64]) != (int_64)*($13 + [24])) ){ goto $label$7 }
	$7 = *($15)
	*($15 + [40]) = $7
	$13 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	if ( ($13) == 0) ){ goto $label$6 }
	$14 = ($0 + [56])
	$8 = ($15 + [8])
	$9 = ($15 + [12])
	$10 = ($15 + [16])
	$11 = ($15 + [20])
	$12 = ($15 + [28])
	
.LOOP $label$8:
	if ( ((int_64)*($13 + [24]) != (int_64)*($15 + [64])) ){ goto $label$6 }
	CALL prints([1312])
	CALL printui(*(($13 + [24])))
	CALL eosio_assert(((int_32)*($15 + [44]) != (int_32)[0]), [1328])
	CALL eosio_assert(*(*($15 + [44]) + [32]), [1360])
	CALL eosio_assert(((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$4() / (uint_64)(int_64)1000000)) <= *(*($15 + [44]) + [20])), [1392])
	$7 = *($0)
	*($8) = $2
	*($9) = $3
	*(($15 + [24])) = $5
	*($15 + [4]) = $4
	*($15) = $0
	*($10) = ($15 + [72])
	*($11) = ($15 + [64])
	*($12) = ($15 + [56])
	CALL $70(($15 + [32]), $14, $7, $15)
	CALL $50(($15 + [40]))
	$13 = *($15 + [44])
	if ( $13 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	*($15 + [44]) = [0]
	*($15 + [40]) = ($15 + [48])
	
.LABEL $label$6
	*([0] + [4]) = ($15 + [80])
}

void .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	*($4 + [32]) = $1
	CALL require_auth(*($0))
	$2 = ($0 + [16])
	*($4 + [24]) = $2
	CALL $49(($4 + [40]), ($4 + [24]), ($4 + [32]))
	$1 = *($4 + [32])
	$3 = *($4 + [44])
	if ( ($3 == 0) ){ goto $label$2 }
	$3 = ( $3 ? [0] : ((int_64)$1 == (int_64)*($3 + [24])) )
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($3 + [24]) != (int_64)$1), [1696])
	$1 = *($0)
	*($4 + [16]) = $0
	*($4 + [20]) = ($4 + [32])
	CALL $76(($4 + [40]), $2, $1, ($4 + [16]))
	$1 = *($0)
	*($4 + [8]) = $0
	*($4 + [12]) = ($4 + [32])
	CALL $77(($4 + [16]), ($0 + [96]), $1, ($4 + [8]))
	*([0] + [4]) = ($4 + [48])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [208])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [272])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($11 + [120])) = $0
	*(($11 + [128])) = (int_64)-1
	*(($11 + [136])) = [0]
	*(($11 + [140])) = [0]
	*($11 + [104]) = [600]
	*($11 + [96]) = $0
	*($11 + [112]) = $0
	*(($11 + [144])) = [0]
	*(($11 + [148])) = [0]
	*($11 + [152]) = $0
	*(($11 + [160])) = $0
	*(($11 + [168])) = (int_64)-1
	*(($11 + [176])) = [0]
	*(($11 + [180])) = [0]
	*(($11 + [184])) = [0]
	*(($11 + [188])) = [0]
	*($11 + [192]) = $0
	*(($11 + [200])) = $0
	*(($11 + [208])) = (int_64)-1
	*(($11 + [216])) = [0]
	*(($11 + [220])) = [0]
	*(($11 + [224])) = [0]
	*(($11 + [228])) = [0]
	*($11 + [232]) = $0
	*(($11 + [240])) = $0
	*(($11 + [248])) = (int_64)-1
	*(($11 + [256])) = [0]
	*(($11 + [260])) = [0]
	*(($11 + [264])) = [0]
	if ( ((int_64)$2 > (int_64)4229443000054317055) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-4497217113437317776) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-4157529991795441664) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)3966954939887910912) ){ goto $label$22 }
	*($11 + [68]) = [0]
	*($11 + [64]) = [1]
	*($11 + [24 align=4]) = *($11 + [64])
	CALL $12(($11 + [96]), ($11 + [24]))
	goto $label$22 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)4229443000054317056) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)4931441591970693120) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$22 }
	*($11 + [92]) = [0]
	*($11 + [88]) = [2]
	*($11) = *($11 + [88])
	CALL $7(($11 + [96]), $11)
	goto $label$22 
	
.LABEL $label$26
	*($11 + [52]) = [0]
	*($11 + [48]) = [3]
	*($11 + [40 align=4]) = *($11 + [48])
	CALL $16(($11 + [96]), ($11 + [40]))
	goto $label$22 
	
.LABEL $label$25
	*($11 + [84]) = [0]
	*($11 + [80]) = [4]
	*($11 + [8 align=4]) = *($11 + [80])
	CALL $7(($11 + [96]), ($11 + [8]))
	goto $label$22 
	
.LABEL $label$24
	*($11 + [76]) = [0]
	*($11 + [72]) = [5]
	*($11 + [16 align=4]) = *($11 + [72])
	CALL $10(($11 + [96]), ($11 + [16]))
	goto $label$22 
	
.LABEL $label$23
	*($11 + [60]) = [0]
	*($11 + [56]) = [6]
	*($11 + [32 align=4]) = *($11 + [56])
	CALL $14(($11 + [96]), ($11 + [32]))
	
.LABEL $label$22
	$4 = *(($11 + [256]))
	if ( ($4 == 0) ){ goto $label$28 }
	$5 = ($11 + [260])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$30 }
	
.LOOP $label$31:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$32 }
	CALL $87($3)
	
.LABEL $label$32
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$31 }
	$6 = *(($11 + [256]))
	goto $label$29 
	
.LABEL $label$30
	$6 = $4
	
.LABEL $label$29
	*($5) = $4
	CALL $87($6)
	
.LABEL $label$28
	CALL $17(($11 + [216]))
	CALL $18(($11 + [176]))
	$4 = *(($11 + [136]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [140])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$34 }
	
.LOOP $label$35:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$36 }
	CALL $87($3)
	
.LABEL $label$36
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$35 }
	$6 = *(($11 + [136]))
	goto $label$33 
	
.LABEL $label$34
	$6 = $4
	
.LABEL $label$33
	*($5) = $4
	CALL $87($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [272])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [208])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $21(($2 + [48]), (($2 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $48(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $87(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [176])
	*([0] + [4]) = $15
	*($15 + [136]) = $1
	CALL require_auth(*($0))
	$6 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [240])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [272])
	*($15 + [128]) = ($0 + [96])
	CALL $24(($15 + [16]), ($15 + [128]), ($15 + [136]))
	$9 = *($15 + [20])
	if ( ($9 == 0) ){ goto $label$7 }
	if ( ((int_64)*($15 + [136]) != (int_64)*($9 + [48])) ){ goto $label$7 }
	$1 = *($15 + [16])
	*($15 + [120]) = $1
	$9 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($9) == 0) ){ goto $label$6 }
	
.LOOP $label$8:
	if ( ((int_64)*($9 + [48]) != (int_64)*($15 + [136])) ){ goto $label$6 }
	CALL eosio_assert(*($9 + [60]), [304])
	CALL $25(($15 + [120]))
	$9 = *($15 + [124])
	if ( $9 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	*($15 + [124]) = [0]
	*($15 + [120]) = ($15 + [128])
	
.LABEL $label$6
	*($15 + [112]) = ($0 + [56])
	CALL $26(($15 + [16]), ($15 + [112]), ($15 + [136]))
	$9 = *($15 + [20])
	if ( ($9 == 0) ){ goto $label$10 }
	if ( ((int_64)*($15 + [136]) != (int_64)*($9 + [80])) ){ goto $label$10 }
	$1 = *($15 + [16])
	*($15 + [104]) = $1
	$9 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($9) == 0) ){ goto $label$9 }
	
.LOOP $label$11:
	if ( ((int_64)*($9 + [80]) != (int_64)*($15 + [136])) ){ goto $label$9 }
	if ( *($9 + [120]) ){ goto $label$9 }
	$9 = *($15 + [108])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [320])
	CALL $27(*($15 + [112]), $9, (int_64)0, ($15 + [16]))
	CALL $28(($15 + [104]))
	$9 = *($15 + [108])
	if ( $9 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	*($15 + [108]) = [0]
	*($15 + [104]) = ($15 + [112])
	
.LABEL $label$9
	CALL require_recipient(*($0))
	CALL require_recipient($2)
	$1 = *($3 + [8])
	if ( ((int_64)$1 != (int_64)1397703940) ){ goto $label$12 }
	$5 = *($0)
	$1 = (int_64)0
	$10 = (int_64)59
	$9 = [368]
	$11 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$18 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$6 = ($6 + [165])
	goto $label$16 
	
.LABEL $label$18
	$12 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$14
	$9 = ($9 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$13 }
	$1 = (int_64)0
	$10 = (int_64)59
	$9 = [384]
	$13 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$24 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$6 = ($6 + [165])
	goto $label$22 
	
.LABEL $label$24
	$12 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$20
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$19 }
	$1 = (int_64)0
	$10 = (int_64)59
	$9 = [400]
	$14 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$30 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$6 = ($6 + [165])
	goto $label$28 
	
.LABEL $label$30
	$12 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$26
	$9 = ($9 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$25 }
	CALL $94($15, $4)
	*((($15 + [16]) + [28])) = *(($3 + [12]))
	*((($15 + [16]) + [24])) = *(($3 + [8]))
	*((($15 + [16]) + [20])) = *(($3 + [4]))
	*($15 + [24]) = $2
	*($15 + [16]) = *($0)
	*($15 + [32]) = *($3)
	$9 = ($15 + [8])
	*(($15 + [56])) = *($9)
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($9) = [0]
	*($15 + [64]) = $13
	*($15 + [72]) = $14
	*($15 + [80]) = [0]
	*(($6 = (($15 + [64]) + [20]))) = [0]
	*(($7 = (($15 + [64]) + [24]))) = [0]
	*(($9 = CALL $86([16]))) = $5
	*($9 + [8]) = $11
	*((($15 + [64]) + [32])) = [0]
	$8 = ($9 + [16])
	*($7) = $8
	*($6) = $8
	*($15 + [80]) = $9
	*($15 + [92]) = [0]
	*((($15 + [64]) + [36])) = [0]
	$9 = *($15 + [48])
	$6 = ( *((($15 + [16]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($6 + [32])
	$1 = (CASTING uint_64)(uint_32 $6)
	$6 = (($15 + [64]) + [28])
	
.LOOP $label$31:
	$9 = ($9 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$31 }
	if ( ($9 == 0) ){ goto $label$33 }
	CALL $23($6, $9)
	$6 = *(($15 + [96]))
	$9 = *(($15 + [92]))
	goto $label$32 
	
.LABEL $label$33
	$6 = [0]
	$9 = [0]
	
.LABEL $label$32
	*($15 + [148]) = $9
	*($15 + [144]) = $9
	*($15 + [152]) = $6
	*($15 + [160]) = ($15 + [144])
	*($15 + [168]) = ($15 + [16])
	CALL $29(($15 + [168]), ($15 + [160]))
	CALL $30(($15 + [144]), ($15 + [64]))
	$9 = *($15 + [144])
	CALL send_inline($9, (*($15 + [148]) - $9))
	$9 = *($15 + [144])
	if ( ($9 == 0) ){ goto $label$34 }
	*($15 + [148]) = $9
	CALL $87($9)
	
.LABEL $label$34
	$9 = *($15 + [92])
	if ( ($9 == 0) ){ goto $label$35 }
	*(($15 + [96])) = $9
	CALL $87($9)
	
.LABEL $label$35
	$9 = *($15 + [80])
	if ( ($9 == 0) ){ goto $label$36 }
	*(($15 + [84])) = $9
	CALL $87($9)
	
.LABEL $label$36
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$37 }
	CALL $87(*(($15 + [56])))
	
.LABEL $label$37
	if ( ((*($15) & [1]) == 0) ){ goto $label$38 }
	CALL $87(*(($15 + [8])))
	
.LABEL $label$38
	$1 = *(($3 + [8]))
	
.LABEL $label$12
	if ( ((int_64)$1 != (int_64)1111967748) ){ goto $label$39 }
	$5 = *($0)
	$1 = (int_64)0
	$10 = (int_64)59
	$9 = [368]
	$11 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$45 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$6 = ($6 + [165])
	goto $label$43 
	
.LABEL $label$45
	$12 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$41
	$9 = ($9 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$40 }
	$1 = (int_64)0
	$12 = (int_64)59
	$9 = [416]
	$13 = (int_64)0
	
.LOOP $label$46:
	$10 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$47 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$6 = ($6 + [165])
	goto $label$48 
	
.LABEL $label$49
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$47
	$9 = ($9 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ((int_64)$10 | (int_64)$13)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$46 }
	$1 = (int_64)0
	$10 = (int_64)59
	$9 = [400]
	$14 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$55 }
	$6 = *($9)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$6 = ($6 + [165])
	goto $label$53 
	
.LABEL $label$55
	$12 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$51
	$9 = ($9 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$50 }
	CALL $94($15, $4)
	*((($15 + [16]) + [28])) = *(($3 + [12]))
	*((($15 + [16]) + [24])) = *(($3 + [8]))
	*((($15 + [16]) + [20])) = *(($3 + [4]))
	*($15 + [24]) = $2
	*($15 + [16]) = *($0)
	*($15 + [32]) = *($3)
	$9 = ($15 + [8])
	*(($15 + [56])) = *($9)
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($9) = [0]
	*($15 + [64]) = $13
	*($15 + [72]) = $14
	*(($9 = CALL $86([16]))) = $5
	*($9 + [8]) = $11
	*((($15 + [64]) + [32])) = [0]
	$6 = ($9 + [16])
	*((($15 + [64]) + [24])) = $6
	*((($15 + [64]) + [20])) = $6
	*($15 + [80]) = $9
	*($15 + [92]) = [0]
	*((($15 + [64]) + [36])) = [0]
	$9 = *($15 + [48])
	$6 = ( *((($15 + [16]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($6 + [32])
	$1 = (CASTING uint_64)(uint_32 $6)
	$6 = (($15 + [64]) + [28])
	
.LOOP $label$56:
	$9 = ($9 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$56 }
	if ( ($9 == 0) ){ goto $label$58 }
	CALL $23($6, $9)
	$6 = *(($15 + [96]))
	$9 = *(($15 + [92]))
	goto $label$57 
	
.LABEL $label$58
	$6 = [0]
	$9 = [0]
	
.LABEL $label$57
	*($15 + [148]) = $9
	*($15 + [144]) = $9
	*($15 + [152]) = $6
	*($15 + [160]) = ($15 + [144])
	*($15 + [168]) = ($15 + [16])
	CALL $29(($15 + [168]), ($15 + [160]))
	CALL $30(($15 + [144]), ($15 + [64]))
	$9 = *($15 + [144])
	CALL send_inline($9, (*($15 + [148]) - $9))
	$9 = *($15 + [144])
	if ( ($9 == 0) ){ goto $label$59 }
	*($15 + [148]) = $9
	CALL $87($9)
	
.LABEL $label$59
	$9 = *($15 + [92])
	if ( ($9 == 0) ){ goto $label$60 }
	*(($15 + [96])) = $9
	CALL $87($9)
	
.LABEL $label$60
	$9 = *($15 + [80])
	if ( ($9 == 0) ){ goto $label$61 }
	*(($15 + [84])) = $9
	CALL $87($9)
	
.LABEL $label$61
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$62 }
	CALL $87(*(($15 + [56])))
	
.LABEL $label$62
	if ( ((*($15) & [1]) == 0) ){ goto $label$39 }
	CALL $87(*(($15 + [8])))
	
.LABEL $label$39
	*([0] + [4]) = ($15 + [176])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1414284548
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [112])
	$3 = (int_64)5524549
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [176])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $19(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $20(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $87(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $87(*(($2 + [40])))
	
.LABEL $label$6
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$7 }
	CALL $87(*(($2 + [28])))
	
.LABEL $label$7
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [12])) = $3
	CALL $87($3)
	
.LABEL $label$8
	CALL $87($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $87($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [112])
	*([0] + [4]) = $2
	*(($3 = $2) + [108]) = $0
	*($3 + [96]) = *($1)
	*($3 + [100]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $66(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [96])
	*($3 + [8]) = ($3 + [108])
	CALL $67(($3 + [8]), ($3 + [16]))
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [52])) = $1
	CALL $87($1)
	
.LABEL $label$6
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$7 }
	CALL $87(*(($3 + [44])))
	
.LABEL $label$7
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL $87(*(($3 + [32])))
	
.LABEL $label$8
	*([0] + [4]) = ($3 + [112])
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	*($8 + [56]) = $4
	CALL require_auth(*($0))
	*($8 + [48]) = ($0 + [96])
	CALL $24(($8 + [8]), ($8 + [48]), ($8 + [56]))
	$7 = *($8 + [12])
	if ( ($7 == 0) ){ goto $label$2 }
	if ( ((int_64)*($8 + [56]) != (int_64)*($7 + [48])) ){ goto $label$2 }
	$4 = *($8 + [8])
	*($8 + [40]) = $4
	$7 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ($7) == 0) ){ goto $label$1 }
	$5 = ($8 + [16])
	
.LOOP $label$3:
	if ( ((int_64)*($7 + [48]) != (int_64)*($8 + [56])) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($7 + [64]) == (int_64)*($0)), [1056])
	CALL eosio_assert(((int_32)*(*($8 + [44]) + [60]) ^ (int_32)[1]), [1072])
	$7 = *($8 + [44])
	*($5) = $3
	*($8 + [12]) = $2
	*($8 + [8]) = $1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [320])
	CALL $59(*($8 + [48]), $7, (int_64)0, ($8 + [8]))
	CALL $25(($8 + [40]))
	$7 = *($8 + [44])
	if ( $7 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($8 + [44]) = [0]
	*($8 + [40]) = ($8 + [48])
	
.LABEL $label$1
	*($8 + [32]) = ($0 + [56])
	CALL $26(($8 + [8]), ($8 + [32]), ($8 + [56]))
	$7 = *($8 + [12])
	if ( ($7 == 0) ){ goto $label$5 }
	if ( ((int_64)*($8 + [56]) != (int_64)*($7 + [80])) ){ goto $label$5 }
	$4 = *($8 + [8])
	*($8 + [24]) = $4
	$7 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ($7) == 0) ){ goto $label$4 }
	$5 = ($8 + [16])
	$6 = ($8 + [20])
	
.LOOP $label$6:
	if ( ((int_64)*($7 + [80]) != (int_64)*($8 + [56])) ){ goto $label$4 }
	$7 = *($8 + [28])
	*($5) = $2
	*($6) = $3
	*($8 + [12]) = $1
	*($8 + [8]) = $0
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [320])
	CALL $60(*($8 + [32]), $7, (int_64)0, ($8 + [8]))
	CALL $28(($8 + [24]))
	$7 = *($8 + [28])
	if ( $7 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	*($8 + [28]) = [0]
	*($8 + [24]) = ($8 + [32])
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [64])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [80])
	*([0] + [4]) = $3
	*(($2 = $3) + [60]) = $0
	*($2 + [48]) = *($1)
	*($2 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = (int_64)0
	*(($2 + [32])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [40]) = (int_64)0
	*($2 + [68]) = $1
	*($2 + [64]) = $1
	*($2 + [72]) = ($1 + $0)
	CALL $21(($2 + [64]), $2)
	CALL $21(($2 + [64]), ($2 + [12]))
	$3 = ($2 + [24])
	CALL $39(($2 + [64]), $3)
	CALL eosio_assert(((uint_32)(*($2 + [72]) - *($2 + [68])) > (uint_32)[7]), [208])
	CALL memcpy(($2 + [40]), *($2 + [68]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [68]) = ($2 + [48])
	*($2 + [64]) = ($2 + [60])
	CALL $57(($2 + [64]), $2)
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [28])) = $1
	CALL $87($1)
	
.LABEL $label$5
	if ( ((*($2 + [12]) & [1]) == 0) ){ goto $label$6 }
	CALL $87(*(($2 + [20])))
	
.LABEL $label$6
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL $87(*(($2 + [8])))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [80])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$6 = *($2)
	$5 = CALL strlen([752])
	if ( ((int_32)$5 != (int_32)( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$1 }
	if ( CALL $92($2, [0], [-1], [752], $5) ){ goto $label$1 }
	*($7 + [16]) = ($0 + [16])
	*($7 + [24]) = (int_64)0
	CALL $49(($7 + [8]), ($7 + [16]), ($7 + [24]))
	$6 = *($7 + [12])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	if ( ((uint_64)*($6 + [24]) >= (uint_64)$1) ){ goto $label$1 }
	CALL prints([768])
	CALL printui(*(($6 + [24])))
	$4 = *($7 + [8])
	*($7 + [24]) = $4
	$6 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [800])
	CALL $50(($7 + [24]))
	CALL $51(*($7 + [16]), $6)
	$4 = *($7 + [24])
	*($7 + [8]) = $4
	$6 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = *($2)
	$5 = ($2 + [4])
	$3 = CALL strlen([848])
	if ( ((int_32)$3 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$3 }
	if ( CALL $92($2, [0], [-1], [848], $3) ){ goto $label$3 }
	*($7 + [16]) = ($0 + [56])
	*($7 + [24]) = (int_64)0
	CALL $26(($7 + [8]), ($7 + [16]), ($7 + [24]))
	$6 = *($7 + [12])
	if ( ($6 == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((uint_64)*($6 + [80]) >= (uint_64)$1) ){ goto $label$3 }
	$4 = *($7 + [8])
	*($7 + [24]) = $4
	$6 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [800])
	CALL $28(($7 + [24]))
	CALL $52(*($7 + [16]), $6)
	$4 = *($7 + [24])
	*($7 + [8]) = $4
	$6 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$4 }
	
.LABEL $label$3
	$6 = *($2)
	$3 = CALL strlen([864])
	if ( ((int_32)$3 != (int_32)( *($5) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$5 }
	if ( CALL $92($2, [0], [-1], [864], $3) ){ goto $label$5 }
	*($7 + [16]) = ($0 + [96])
	*($7 + [24]) = (int_64)0
	CALL $24(($7 + [8]), ($7 + [16]), ($7 + [24]))
	$2 = *($7 + [12])
	if ( ($2 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	if ( ((uint_64)*($2 + [48]) >= (uint_64)$1) ){ goto $label$5 }
	$4 = *($7 + [8])
	*($7 + [24]) = $4
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$2) != (int_32)[0]), [800])
	CALL $25(($7 + [24]))
	CALL $53(*($7 + [16]), $2)
	$4 = *($7 + [24])
	*($7 + [8]) = $4
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( $2) ){ goto $label$6 }
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [32])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [432])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $87(*(($2 + [40])))
	
.LABEL $label$6
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$7 }
	CALL $87(*(($2 + [28])))
	
.LABEL $label$7
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($2 + [12])) = $3
	CALL $87($3)
	
.LABEL $label$8
	CALL $87($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $87($2)
	
.LABEL $label$1
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $21(*($1), ($0 + [32]))
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$5 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	CALL $94(($7 + [32]), $1)
	CALL $94(($7 + [16]), $2)
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	$1 = (*($3 + [4]) - *($3))
	$2 = int_32($1 >> [3])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$2 }
	$1 = CALL $86($1)
	*(($7 + [8])) = ($1 + ($2 << [3]))
	*($7) = $1
	*($7 + [4]) = $1
	$2 = *($3)
	$3 = (*(($3 + [4])) - $2)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($1, $2, $3)
	*($7 + [4]) = (*($7 + [4]) + $3)
	
.LABEL $label$3
	CALL void $5((int_32 ($7 + [32])), (int_32 ($7 + [16])), (int_32 $7), (int_32 $4), (int_64 $0))
	$3 = *($7)
	if ( ($3 == 0) ){ goto $label$4 }
	*($7 + [4]) = $3
	CALL $87($3)
	
.LABEL $label$4
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $87(*($7 + [24]))
	
.LABEL $label$5
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $87(*($7 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $93($7)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [576])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [624])
	*(($7 = $8) + [24]) = *($1 + [48])
	$4 = *($1)
	CALL $89(($1 + [20]), *($3))
	CALL $89(($1 + [32]), *($3 + [4]))
	$3 = *($3 + [8])
	$5 = ($1 + [8])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	CALL $63($5, *($3), *($3 + [4]))
	
.LABEL $label$1
	$6 = CALL current_time()
	*($1 + [60]) = [1]
	*($1 + [56]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [688])
	*($7 + [8]) = [0]
	CALL $64(($7 + [8]), $1)
	$5 = *($7 + [8])
	if ( ($5 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	*($7 + [12]) = $3
	*($7 + [8]) = $3
	*($7 + [16]) = ($3 + $5)
	CALL $65(($7 + [8]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($7 + [40]) = *(($1 + [48]))
	if ( (CALL memcmp(($7 + [24]), ($7 + [40]), [8]) == 0) ){ goto $label$6 }
	$3 = ($1 + [80])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$7 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4992623624440512512, ($7 + [32]), $4)
	*($3) = $1
	
.LABEL $label$7
	CALL db_idx64_update($1, $2, ($7 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [448])
	$8 = *($0 + [4])
	$6 = *($8 + [44])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)7035924439720001536, ($9 + [8]), *($8))
	*(*(($0 + [4])) + [44]) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*(($7 + [36])) == (int_32)$2), [480])
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL $54($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)7035924439720001536, $3))
	CALL eosio_assert(((int_32)*($7 + [36]) == (int_32)$2), [480])
	
.LABEL $label$5
	*($7 + [44]) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*(($1 + [36])) == (int_32)$0), [880])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [928])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [992])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $87($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $87($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
	$7 = *($1 + [44])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001536, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*(($1 + [124])) == (int_32)$0), [880])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [928])
	$3 = *($0 + [24])
	$4 = ($0 + [28])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$5 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$8 = ($6 + [-24])
	$6 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [992])
	$8 = ($7 + [-24])
	$6 = *($4)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = ([0] - $6)
	$6 = $8
	
.LOOP $label$5:
	$8 = ($6 + [24])
	$5 = *($8)
	*($8) = [0]
	$7 = *($6)
	*($6) = $5
	if ( ($7 == 0) ){ goto $label$6 }
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $87(*(($7 + [40])))
	
.LABEL $label$7
	if ( ((*($7 + [20]) & [1]) == 0) ){ goto $label$8 }
	CALL $87(*(($7 + [28])))
	
.LABEL $label$8
	$5 = *($7 + [8])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($7 + [12])) = $5
	CALL $87($5)
	
.LABEL $label$9
	CALL $87($7)
	
.LABEL $label$6
	*(($6 + [16])) = *(($6 + [40]))
	*(($6 + [8])) = *(($6 + [32]))
	$6 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $87(*(($6 + [40])))
	
.LABEL $label$12
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$13 }
	CALL $87(*(($6 + [28])))
	
.LABEL $label$13
	$5 = *($6 + [8])
	if ( ($5 == 0) ){ goto $label$14 }
	*(($6 + [12])) = $5
	CALL $87($5)
	
.LABEL $label$14
	CALL $87($6)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$10 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [128]))
	$6 = *($1 + [132])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$16 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6712989628304982016, ($9 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($6)
	
.LABEL $label$15
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [880])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [928])
	$3 = *($0 + [24])
	$4 = ($0 + [28])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$5 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$8 = ($6 + [-24])
	$6 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [992])
	$8 = ($7 + [-24])
	$6 = *($4)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = ([0] - $6)
	$6 = $8
	
.LOOP $label$5:
	$8 = ($6 + [24])
	$5 = *($8)
	*($8) = [0]
	$7 = *($6)
	*($6) = $5
	if ( ($7 == 0) ){ goto $label$6 }
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $87(*(($7 + [40])))
	
.LABEL $label$7
	if ( ((*($7 + [20]) & [1]) == 0) ){ goto $label$8 }
	CALL $87(*(($7 + [28])))
	
.LABEL $label$8
	$5 = *($7 + [8])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($7 + [12])) = $5
	CALL $87($5)
	
.LABEL $label$9
	CALL $87($7)
	
.LABEL $label$6
	*(($6 + [16])) = *(($6 + [40]))
	*(($6 + [8])) = *(($6 + [32]))
	$6 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $87(*(($6 + [40])))
	
.LABEL $label$12
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$13 }
	CALL $87(*(($6 + [28])))
	
.LABEL $label$13
	$5 = *($6 + [8])
	if ( ($5 == 0) ){ goto $label$14 }
	*(($6 + [12])) = $5
	CALL $87($5)
	
.LABEL $label$14
	CALL $87($6)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$10 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
	$6 = *(($1 + [80]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$16 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4992623624440512512, ($9 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($6)
	
.LABEL $label$15
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $86([48])) + [36]) = $0
	*($6 + [16 align=4]) = (int_64)0
	CALL $55(($8 + [32]), $6)
	*($6 + [44]) = [-1]
	*($6 + [40]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [40])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $56(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $87($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [544])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $86([136])
	$4 = CALL $35($6)
	*($6 + [124]) = $0
	CALL $36(($8 + [32]), $4)
	*($6 + [132]) = [-1]
	*($6 + [128]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [128])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $37(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $87(*(($4 + [40])))
	
.LABEL $label$10
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL $87(*(($4 + [28])))
	
.LABEL $label$11
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($4 + [12])) = $7
	CALL $87($7)
	
.LABEL $label$12
	CALL $87($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $86(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $93($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $87($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $87($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL $94(($5 + [32]), $1)
	CALL $94(($5 + [16]), ($1 + [12]))
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	$3 = (*(($1 + [28])) - *($1 + [24]))
	$2 = int_32($3 >> [3])
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	$3 = CALL $86($3)
	*(($5 + [8])) = ($3 + ($2 << [3]))
	*($5) = $3
	*($5 + [4]) = $3
	$4 = *(($1 + [24]))
	$2 = (*(($1 + [28])) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $4, $2)
	*($5 + [4]) = (*($5 + [4]) + $2)
	
.LABEL $label$2
	CALL $58($0, ($5 + [32]), ($5 + [16]), $5, *($1 + [40]))
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$3 }
	*($5 + [4]) = $1
	CALL $87($1)
	
.LABEL $label$3
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $87(*($5 + [24]))
	
.LABEL $label$4
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $87(*($5 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $93($5)
}

int_32 .FUNC $35 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	$2 = [0]
	*($0 + [56]) = [0]
	*(($0 + [16])) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [40])) = [0]
	*($0 + [64]) = (int_64)0
	*(($3 = ($0 + [72]))) = (int_64)1414284548
	CALL eosio_assert([1], [112])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [176])
	*(($2 = ($0 + [104]))) = (int_64)1414284548
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [112])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [176])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $33(*($1), ($0 + [32]))
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [448])
	$8 = *($0 + [4])
	$6 = *($8 + [132])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-6712989628304982016, ($9 + [8]), *($8))
	*(*(($0 + [4])) + [132]) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*(($7 + [124])) == (int_32)$2), [480])
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL $34($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)-6712989628304982016, $3))
	CALL eosio_assert(((int_32)*($7 + [124]) == (int_32)$2), [480])
	
.LABEL $label$5
	*($7 + [132]) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [208])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [208])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [208])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [32]) = ((int_32)*($3 + [15]) != (int_32)[0])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $22($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $91($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $86($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $91($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $87($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $88($7)
	return (unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*(($5 + [28])) = *(($1 + [28]))
	*(($4 = (($5 + [16]) + [8]))) = *(($1 + [24]))
	*($5 + [16]) = *($1 + [16])
	*($5 + [20]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $94($5, ($1 + [32]))
	*((($5 + [32]) + [8])) = *($4)
	*($5 + [32]) = *($5 + [16])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $94(($5 + [48]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [32])), (int_32 ($5 + [48])), (int_32 $1))
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL $87(*($5 + [56]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $87(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $86($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $93($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $87($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [224])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $23($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [208])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [448])
	$6 = *($0 + [4])
	$7 = *($6 + [80])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-4992623624440512512, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [80]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$2), [480])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $44($2, CALL $fimport$6(*($2), *($2 + [8]), (int_64)-4992623624440512512, $3))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$2), [480])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [80])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-4992623624440512512, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [480])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $44($4, CALL $fimport$6(*($4), *($4 + [8]), (int_64)-4992623624440512512, $5))
	CALL eosio_assert(((int_32)*($2 + [72]) == (int_32)$4), [480])
	
.LABEL $label$4
	*(($2 + [80])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*(($1 + [124])) == (int_32)$0), [576])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [624])
	*($1 + [120]) = [1]
	*(($7 = $6) + [24]) = *($1 + [80])
	$4 = *($1)
	CALL eosio_assert([1], [688])
	*($7 + [8]) = [0]
	CALL $41(($7 + [8]), $1)
	$5 = *($7 + [8])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($7 + [12]) = $6
	*($7 + [8]) = $6
	*($7 + [16]) = ($6 + $5)
	CALL $42(($7 + [8]), $1)
	CALL db_update_i64(*($1 + [128]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($7 + [40]) = *(($1 + [80]))
	if ( (CALL memcmp(($7 + [24]), ($7 + [40]), [8]) == 0) ){ goto $label$5 }
	$6 = *($1 + [132])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$6 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6712989628304982016, ($7 + [32]), $4)
	*(($1 + [132])) = $6
	
.LABEL $label$6
	CALL db_idx64_update($6, $2, ($7 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-6712989628304982016, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*(($2 + [124])) == (int_32)$4), [480])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)-6712989628304982016, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $34($4, $8)
	CALL eosio_assert(((int_32)*($2 + [124]) == (int_32)$4), [480])
	
.LABEL $label$4
	*($2 + [132]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($3 + [48]), *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [208])
	CALL memcpy(($3 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($0 + [64]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($0 + [72]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $68 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6, int_64 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$8 = (*(*($0)) + int_32($9 >> [1]))
	$0 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	CALL $94(($10 + [32]), $2)
	CALL $94(($10 + [16]), $3)
	*($10 + [8]) = [0]
	*($10) = (int_64)0
	$2 = (*($4 + [4]) - *($4))
	$3 = int_32($2 >> [3])
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$2 }
	$2 = CALL $86($2)
	*(($10 + [8])) = ($2 + ($3 << [3]))
	*($10) = $2
	*($10 + [4]) = $2
	$3 = *($4)
	$4 = (*(($4 + [4])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($2, $3, $4)
	*($10 + [4]) = (*($10 + [4]) + $4)
	
.LABEL $label$3
	CALL void $8((int_32 $1), (int_64 ($10 + [32])), (int_32 ($10 + [16])), (int_32 $10), (int_32 $5), (int_32 $6), (int_64 $7), (int_64 $0))
	$4 = *($10)
	if ( ($4 == 0) ){ goto $label$4 }
	*($10 + [4]) = $4
	CALL $87($4)
	
.LABEL $label$4
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $87(*($10 + [24]))
	
.LABEL $label$5
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $87(*($10 + [40]))
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $93($10)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), $1, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $33(CALL $33(CALL $43($0, ($1 + [8])), ($1 + [20])), ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [60])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [432])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [432])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*($0) + [8])
	*($0) = $6
	$3 = *($1 + [8])
	$2 = *(($1 + [12]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-8]) + $6)
	
.LABEL $label$2
	*($0) = $6
	$2 = *($1 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	$2 = *(($1 + [20]))
	$2 = ( *(($1 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	$6 = ($2 + $6)
	*($0) = $6
	
.LABEL $label$4
	$2 = *($1 + [32])
	$5 = (CASTING uint_64)(uint_32 ( *(($1 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($0) = $6
	$1 = *(($1 + [32]))
	$1 = ( *(($1 + [36])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$6 }
	$6 = ($1 + $6)
	*($0) = $6
	
.LABEL $label$6
	*($0) = ($6 + [21])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [80])
	*([0] + [4]) = $10
	$2 = *($1)
	CALL $94(($10 + [64]), ($1 + [8]))
	CALL $94(($10 + [48]), ($1 + [20]))
	*($10 + [40]) = [0]
	*($10 + [32]) = (int_64)0
	$4 = (*(($1 + [36])) - *($1 + [32]))
	$3 = int_32($4 >> [3])
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$4 = CALL $86($4)
	*(($10 + [40])) = ($4 + ($3 << [3]))
	*($10 + [32]) = $4
	*($10 + [36]) = $4
	$5 = *(($1 + [32]))
	$3 = (*(($1 + [36])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($4, $5, $3)
	*($10 + [36]) = (*($10 + [36]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [56]))
	*((($10 + [16]) + [8])) = $6
	$7 = *($1 + [72])
	$8 = *($1 + [64])
	$9 = *($1 + [48])
	*(($10 + [8])) = $6
	*($10 + [16]) = $9
	*($10) = $9
	CALL $68($0, $2, ($10 + [64]), ($10 + [48]), ($10 + [32]), $10, $8, $7)
	$1 = *($10 + [32])
	if ( ($1 == 0) ){ goto $label$3 }
	*($10 + [36]) = $1
	CALL $87($1)
	
.LABEL $label$3
	if ( ((*($10 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $87(*($10 + [56]))
	
.LABEL $label$4
	if ( ((*($10 + [64]) & [1]) == 0) ){ goto $label$5 }
	CALL $87(*($10 + [72]))
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $93(($10 + [32]))
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [24])) = (int_64)0
	$4 = [0]
	*(($0 + [40])) = [0]
	*($0 + [48]) = (int_64)0
	*(($0 + [56])) = (int_64)1414284548
	CALL eosio_assert([1], [112])
	$3 = (int_64)5524549
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [176])
	*($0 + [72]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [208])
	CALL memcpy($0, *($6 + [4]), [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	CALL $21($6, ($0 + [8]))
	CALL $21($6, ($0 + [20]))
	CALL $39($6, ($0 + [32]))
	*($6 + [24]) = $0
	CALL $69(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	$2 = *($0)
	$3 = ($1 + [20])
	CALL $94(($11 + [112]), $3)
	CALL $94(($11 + [96]), *($0 + [4]))
	$4 = ($1 + [32])
	CALL $94(($11 + [80]), $4)
	CALL $94(($11 + [64]), *($0 + [8]))
	*($11 + [48]) = [0]
	*($11 + [52 align=4]) = (int_64)0
	$0 = *($0 + [12])
	$6 = (*($0 + [4]) - *($0))
	$5 = int_32($6 >> [3])
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = CALL $86($6)
	*(($11 + [56])) = ($6 + ($5 << [3]))
	*($11 + [52]) = $6
	*($11 + [48]) = $6
	$5 = *($0)
	$0 = (*(($0 + [4])) - $5)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($6, $5, $0)
	*($11 + [52]) = (*($11 + [52]) + $0)
	
.LABEL $label$4
	*($11 + [40]) = [0]
	*($11 + [32]) = (int_64)0
	$0 = (*(($1 + [12])) - *($1 + [8]))
	$6 = int_32($0 >> [3])
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	$0 = CALL $86($0)
	*((($11 + [32]) + [8])) = ($0 + ($6 << [3]))
	*($11 + [32]) = $0
	*($11 + [36]) = $0
	$5 = *(($1 + [8]))
	$6 = (*(($1 + [12])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($0, $5, $6)
	*($11 + [36]) = (*($11 + [36]) + $6)
	
.LABEL $label$5
	$7 = CALL $62($2, ($11 + [112]), ($11 + [96]), ($11 + [80]), ($11 + [64]), ($11 + [48]), ($11 + [32]), *($1 + [112]))
	$0 = *($11 + [32])
	if ( ($0 == 0) ){ goto $label$6 }
	*($11 + [36]) = $0
	CALL $87($0)
	
.LABEL $label$6
	$0 = *($11 + [48])
	if ( ($0 == 0) ){ goto $label$7 }
	*($11 + [52]) = $0
	CALL $87($0)
	
.LABEL $label$7
	if ( ((*($11 + [64]) & [1]) == 0) ){ goto $label$8 }
	CALL $87(*($11 + [72]))
	
.LABEL $label$8
	if ( ((*($11 + [80]) & [1]) == 0) ){ goto $label$9 }
	CALL $87(*($11 + [88]))
	
.LABEL $label$9
	if ( ((*($11 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL $87(*($11 + [104]))
	
.LABEL $label$10
	if ( ((*($11 + [112]) & [1]) == 0) ){ goto $label$11 }
	CALL $87(*($11 + [120]))
	
.LABEL $label$11
	CALL prints([1088])
	CALL printui($7)
	$0 = *(($1 + [20]))
	$6 = CALL strlen([1104])
	if ( ((int_32)$6 != (int_32)( *(($1 + [24])) ? uint_32($0 >> [1]) : ($0 & [1]) )) ){ goto $label$13 }
	if ( (CALL $92($3, [0], [-1], [1104], $6) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$8 = (int_64)1
	goto $label$1 
	
.LABEL $label$12
	$8 = (int_64)0
	goto $label$1 
	
.LABEL $label$3
	CALL $93(($11 + [48]))
	
.LABEL $label$2
	CALL $93(($11 + [32]))
	
.LABEL $label$1
	$0 = *(($1 + [32]))
	$6 = CALL strlen([1104])
	if ( ((int_32)$6 != (int_32)( *(($1 + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )) ){ goto $label$15 }
	if ( (CALL $92($4, [0], [-1], [1104], $6) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$8 = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$0 = *(($1 + [8]))
	$6 = *(($1 + [12]))
	CALL prints([1120])
	$8 = ((int_64)(CASTING uint_64)(uint_32 int_32(($6 - $0) >> [3])) + (int_64)$8)
	CALL printui($8)
	$9 = *($1 + [64])
	$10 = ((int_64)$9 / (int_64)$8)
	CALL __multi3(($11 + [16]), $10, (int_64)$10 >> (int_64)63), $7, (int_64)$7 >> (int_64)63))
	$7 = *($11 + [16])
	CALL __multi3($11, $7, (int_64)$7 >> (int_64)63), (int_64)98, (int_64)0)
	$10 = *(($1 + [72]))
	CALL eosio_assert(((int_64)$8 != (int_64)0), [1136])
	CALL eosio_assert((((int_64)$9 != (int_64)-9223372036854775808) | ((int_64)$8 != (int_64)-1)), [1152])
	$8 = *((($11 + [16]) + [8]))
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [1184])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [1216])
	$7 = *(($11 + [8]))
	$8 = *($11)
	CALL eosio_assert(( (uint_64)($8 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [1184])
	CALL eosio_assert(( ((uint_64)$8 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [1216])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert([1], [1152])
	*(($1 + [104])) = $10
	*($1 + [96]) = ((int_64)$8 / (int_64)100)
	*([0] + [4]) = ($11 + [128])
	(unreachable)
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*(($1 + [124])) == (int_32)$0), [576])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [624])
	*(($6 = $5) + [24]) = *($1 + [80])
	$4 = *($1)
	CALL $61($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [688])
	*($6 + [8]) = [0]
	CALL $41(($6 + [8]), $1)
	$3 = *($6 + [8])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [12]) = $5
	*($6 + [8]) = $5
	*($6 + [16]) = ($5 + $3)
	CALL $42(($6 + [8]), $1)
	CALL db_update_i64(*($1 + [128]), $2, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($6 + [40]) = *(($1 + [80]))
	if ( (CALL memcmp(($6 + [24]), ($6 + [40]), [8]) == 0) ){ goto $label$5 }
	$5 = *($1 + [132])
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$6 }
	$5 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6712989628304982016, ($6 + [32]), $4)
	*(($1 + [132])) = $5
	
.LABEL $label$6
	CALL db_idx64_update($5, $2, ($6 + [40]))
	
.LABEL $label$5
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $87($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($8 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL $86($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $93($0)
}

int_64 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	$13 = (int_64)1
	$12 = ($12 & [1])
	$12 = *($2)
	$8 = ($12 & [1])
	$12 = *($1)
	$9 = uint_32($12 >> [1])
	$10 = ( *($1 + [4]) ? $9 : $8 )
	if ( ((int_32)$10 != (int_32)( *($2 + [4]) ? uint_32($12 >> [1]) : $12 )) ){ goto $label$1 }
	$2 = ( *($2 + [8]) ? ($2 + [1]) : $12 )
	$12 = ($1 + [1])
	if ( $8 ){ goto $label$3 }
	if ( ($10 == 0) ){ goto $label$2 }
	$1 = ([0] - $9)
	
.LOOP $label$4:
	if ( ((int_32)*($12) != (int_32)*($2)) ){ goto $label$1 }
	$2 = ($2 + [1])
	$12 = ($12 + [1])
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ($10 == 0) ){ goto $label$2 }
	if ( CALL memcmp(( *($1 + [8]) ? $12 : $8 ), $2, $10) ){ goto $label$1 }
	
.LABEL $label$2
	$13 = (int_64)2
	
.LABEL $label$1
	$2 = ($2 & [1])
	$2 = *($4)
	$1 = ($2 & [1])
	$2 = *($3)
	$10 = uint_32($2 >> [1])
	$8 = ( *($3 + [4]) ? $10 : $1 )
	if ( ((int_32)$8 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : $2 )) ){ goto $label$5 }
	$2 = ( *($4 + [8]) ? ($4 + [1]) : $2 )
	$12 = ($3 + [1])
	if ( $1 ){ goto $label$7 }
	if ( ($8 == 0) ){ goto $label$6 }
	$1 = ([0] - $10)
	
.LOOP $label$8:
	if ( ((int_32)*($12) != (int_32)*($2)) ){ goto $label$5 }
	$2 = ($2 + [1])
	$12 = ($12 + [1])
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ($8 == 0) ){ goto $label$6 }
	if ( CALL memcmp(( *($3 + [8]) ? $12 : $1 ), $2, $8) ){ goto $label$5 }
	
.LABEL $label$6
	$13 = ((int_64)$13 << (int_64)1)
	
.LABEL $label$5
	$1 = [0]
	*($14 + [24]) = [0]
	*($14 + [16]) = (int_64)0
	$12 = (*($6 + [4]) - *($6))
	$2 = int_32($12 >> [3])
	if ( ($2 == 0) ){ goto $label$13 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$10 }
	$4 = CALL $86($12)
	*(($14 + [24])) = ($4 + ($2 << [3]))
	*($14 + [16]) = $4
	*($14 + [20]) = $4
	$12 = *($6)
	$2 = (*(($6 + [4])) - $12)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($4, $12, $2)
	$12 = ($4 + $2)
	*($14 + [20]) = $12
	$6 = $4
	goto $label$11 
	
.LABEL $label$13
	$4 = [0]
	$6 = [0]
	$12 = [0]
	goto $label$11 
	
.LABEL $label$12
	$6 = $4
	$12 = $4
	
.LABEL $label$11
	*($14 + [8]) = [0]
	*($14) = (int_64)0
	$3 = (*($5 + [4]) - *($5))
	$2 = int_32($3 >> [3])
	if ( ($2 == 0) ){ goto $label$16 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$9 }
	$1 = CALL $86($3)
	*(($14 + [8])) = ($1 + ($2 << [3]))
	*($14) = $1
	*($14 + [4]) = $1
	$5 = *($5)
	$2 = (*(($5 + [4])) - $5)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($1, $5, $2)
	$2 = ($1 + $2)
	*($14 + [4]) = $2
	goto $label$14 
	
.LABEL $label$16
	$2 = [0]
	goto $label$14 
	
.LABEL $label$15
	$2 = $1
	
.LABEL $label$14
	$11 = (int_64)1
	$5 = int_32(($2 - $1) >> [3])
	if ( ($5 == 0) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)1) ){ goto $label$17 }
	$2 = $12
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$18 }
	$11 = *((($1 + ($5 << [3])) + [-8]))
	$2 = $6
	
.LOOP $label$19:
	if ( ((int_64)*($2) == (int_64)$11) ){ goto $label$18 }
	$2 = ($2 + [8])
	if ( ((int_32)$12 != (int_32)$2) ){ goto $label$19 }
	$2 = $12
	
.LABEL $label$18
	$11 = ( (int_64)1 ? (int_64)10 : ((int_32)$2 == (int_32)$12) )
	
.LABEL $label$17
	if ( ($1 == 0) ){ goto $label$20 }
	*($14 + [4]) = $1
	CALL $87($1)
	
.LABEL $label$20
	if ( ($6 == 0) ){ goto $label$21 }
	*($14 + [20]) = $6
	CALL $87($4)
	
.LABEL $label$21
	*([0] + [4]) = ($14 + [32])
	$11 = ((int_64)$11 * (int_64)$13)
	return ( (int_64)0 ? $11 : ((int_64)$11 == (int_64)1) )
	
.LABEL $label$10
	CALL $93(($14 + [16]))
	
.LABEL $label$9
	CALL $93($14)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $90($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $88 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $87 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10220])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10108])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9916]
	$1 = (((int_32)$2 * (int_32)[12]) + [9916])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10214]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10216])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10214]) = [1]
	$7 = ($7 << [16])
	*([0] + [10216]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10216])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10216]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10214]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10214]) = [1]
	$3 = ($3 << [16])
	*([0] + [10216]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10216])
	
.LABEL $label$8
	*([0] + [10216]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $84($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10128])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $83([1724], $0)
}

int_32 .FUNC $81 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [40]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1616])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035924439720001536)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1552])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1552])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $54(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	$11 = $12
	*([0] + [4]) = $12
	$2 = *($0)
	$3 = *($0 + [4])
	$8 = *($3)
	$7 = ($8 + [32])
	$6 = *($7)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$4 = ($8 + [16])
	$5 = CALL db_lowerbound_i64(*($4), *(($8 + [24])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $54($4, $5)
	*($11 + [12]) = [0]
	*($11 + [8]) = $4
	$6 = *(*(CALL $81(($11 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($8 + [32])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1488])
	*($1) = *($7)
	*($1 + [8]) = *($8)
	$8 = *($3 + [4])
	*($1 + [32]) = [0]
	*($1 + [24]) = *($8)
	$12 = $12
	$8 = ($12 + [-48])
	*([0] + [4]) = $8
	*($11 + [12]) = $8
	*($11 + [8]) = $8
	*($11 + [16]) = ($12 + [-15])
	CALL $75(($11 + [8]), $1)
	$6 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $6, $8, [33])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$6 = *(($2 + [8]))
	$9 = *(*(($0 + [8])))
	$10 = *($1)
	*($11 + [24]) = *(($1 + [24]))
	*($1 + [44]) = CALL db_idx64_store($6, (int_64)7035924439720001536, $9, $10, ($11 + [24]))
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = *($0)
	$5 = ($4 + [72])
	$6 = *($5)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$2 = ($4 + [56])
	$3 = CALL db_lowerbound_i64(*($2), *(($4 + [64])), (int_64)-6712989628304982016, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $34($2, $3)
	*($7 + [12]) = [0]
	*($7 + [8]) = $2
	$6 = *(*(CALL $73(($7 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [72])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1488])
	*($1) = *($5)
	$4 = *($0 + [4])
	$5 = ($1 + [8])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	CALL $63($5, *($4), *($4 + [4]))
	
.LABEL $label$3
	CALL $89(($1 + [20]), *($0 + [8]))
	CALL $89(($1 + [32]), *($0 + [12]))
	*($1 + [48]) = *(*($0 + [16]))
	*($1 + [56]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [80]) = *(*($0 + [20]))
	$4 = *($0 + [24])
	*($1 + [64]) = *($4)
	*(($1 + [72])) = *(($4 + [8]))
	*($1 + [112]) = *(*($0 + [28]))
	*($1 + [120]) = [0]
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [128]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1616])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6712989628304982016)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1552])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1552])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $34(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [1424])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $86([136])
	CALL $35($3)
	*($3 + [124]) = $1
	CALL $71(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [128])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $37(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $87(*(($1 + [40])))
	
.LABEL $label$4
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL $87(*(($1 + [28])))
	
.LABEL $label$5
	$3 = *($1 + [8])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($1 + [12])) = $3
	CALL $87($3)
	
.LABEL $label$6
	CALL $87($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$2 = *($0)
	CALL $72(*($0 + [4]), $1)
	*(($8 = $7) + [8]) = [0]
	CALL $41(($8 + [8]), $1)
	$3 = *($8 + [8])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$7 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$1
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $42(($8 + [8]), $1)
	$4 = *($1)
	*($1 + [128]) = CALL db_store_i64(*($2 + [8]), (int_64)-6712989628304982016, *(*($0 + [8])), $4, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($7)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$4 = *(($2 + [8]))
	$5 = *(*(($0 + [8])))
	$6 = *($1)
	*($8 + [24]) = *($1 + [80])
	*($1 + [132]) = CALL db_idx64_store($4, (int_64)-6712989628304982016, $5, $6, ($8 + [24]))
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [1424])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $86([48])) + [36]) = $1
	*($3 + [16 align=4]) = (int_64)0
	CALL $80(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [40])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $56(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $87($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$3()), [1424])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $86([88])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40]) = [0]
	*($3 + [56]) = [0]
	*($3 + [72]) = $1
	CALL $78(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $46(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $87(*(($3 + [40])))
	
.LABEL $label$4
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$5 }
	CALL $87(*(($3 + [28])))
	
.LABEL $label$5
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [12])) = $1
	CALL $87($1)
	
.LABEL $label$6
	CALL $87($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*(($1 + [36])) == (int_32)$0), [576])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [624])
	*($6 + [56]) = *($1 + [24])
	$4 = *($1)
	$3 = *($3)
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$5 = CALL current_time()
	*($1 + [32]) = [1]
	*($1 + [20]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + *($3 + [8]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [688])
	*($6 + [48]) = ($6 + [33])
	*($6 + [44]) = $6
	*($6 + [40]) = $6
	CALL $75(($6 + [40]), $1)
	CALL db_update_i64(*($1 + [40]), $2, $6, [33])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [72]) = *(($1 + [24]))
	if ( (CALL memcmp(($6 + [56]), ($6 + [72]), [8]) == 0) ){ goto $label$2 }
	$3 = *($1 + [44])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001536, ($6 + [64]), $4)
	*(($1 + [44])) = $3
	
.LABEL $label$3
	CALL db_idx64_update($3, $2, ($6 + [72]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [80])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [224])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $40($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [208])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy($1, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $21(CALL $21(CALL $39($0, ($1 + [8])), ($1 + [20])), ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [208])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [208])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [208])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($1 + [120]) = ((int_32)*($3 + [15]) != (int_32)[0])
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $86(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $93($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $38(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	$11 = $12
	*([0] + [4]) = $12
	$2 = *($0)
	$5 = *($0 + [4])
	$10 = *($5)
	$7 = ($10 + [112])
	$6 = *($7)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$3 = ($10 + [96])
	$4 = CALL db_lowerbound_i64(*($3), *(($10 + [104])), (int_64)-4992623624440512512, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $44($3, $4)
	*($11 + [12]) = [0]
	*($11 + [8]) = $3
	$6 = *(*(CALL $79(($11 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($10 + [112])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1488])
	*($1) = *($7)
	$5 = *($5 + [4])
	*($1 + [60]) = [0]
	*($1 + [48]) = *($5)
	*($1 + [64]) = *($10)
	*($11 + [8]) = [0]
	CALL $64(($11 + [8]), $1)
	$5 = *($11 + [8])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$10 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$10 = ($12 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$3
	*($11 + [12]) = $10
	*($11 + [8]) = $10
	*($11 + [16]) = ($10 + $5)
	CALL $65(($11 + [8]), $1)
	$6 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($2 + [8]), (int_64)-4992623624440512512, *(*($0 + [8])), $6, $10, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($10)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$6 = *(($2 + [8]))
	$8 = *(*(($0 + [8])))
	$9 = *($1)
	*($11 + [24]) = *(($1 + [48]))
	*($1 + [80]) = CALL db_idx64_store($6, (int_64)-4992623624440512512, $8, $9, ($11 + [24]))
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [76]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1616])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4992623624440512512)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1552])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1552])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $44(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [432])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [432])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [432])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [432])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $23($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [432])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [432])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $32(CALL $31($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [432])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [432])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [432])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}