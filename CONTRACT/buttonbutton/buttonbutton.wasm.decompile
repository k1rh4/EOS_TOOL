(data (i32.const 8220) "failed to allocate pages\00\00\01\02\04\07\03\06\05\00invalid quantity\00unexpected asset symbol input\00")
(data (i32.const 8304) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8561) "stoull\00close_market\00")
(data (i32.const 8581) ": no conversion\00eos_quant symbol must not be EOS\00")
(data (i32.const 8630) ": out of range\00at lest 0.1 token\00")
(data (i32.const 8663) "gooooooooooe\00invalid sell\00")
(data (i32.const 8689) "create_market\00invalid conversion\00")
(data (i32.const 8722) "EOS\00magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8775) "open_market\00invalid symbol name\00")
(data (i32.const 8807) "update_market\00")
(data (i32.const 8821) "invalid market_name\00")
(data (i32.const 8841) "invalid token_quant amount\00")
(data (i32.const 8868) "invalid token_quant symbol\00")
(data (i32.const 8895) "token_quant symbol cannot be EOS\00")
(data (i32.const 8928) "invalid eos_quant amount\00")
(data (i32.const 8953) "eos_quant symbol only support EOS\00")
(data (i32.const 8987) "token market already created\00")
(data (i32.const 9016) "token market does not exist\00")
(data (i32.const 9044) "token market not exist\00")
(data (i32.const 9067) "at least 0.1 EOS\00")
(data (i32.const 9084) "eos_quant symbol must be EOS\00")
(data (i32.const 9113) "invalid token_symbol_string\00")
(data (i32.const 9141) "token market does not open\00")
(data (i32.const 9168) "must reserve a positive amount\00")
(data (i32.const 9199) "token_out symbol error\00")
(data (i32.const 9222) "receive token from eosbancor\00")
(data (i32.const 9251) "receive fee from eosbancor\00")
(data (i32.const 9278) "invalid token_symbol\00")
(data (i32.const 9299) "token amount received from selling EOS is too low\00")
(data (i32.const 9349) "receive EOS from bancor\00")
(data (i32.const 9373) "&\00")
(data (i32.const 9375) "=\00")
(data (i32.const 9377) "opt\00")
(data (i32.const 9381) "eos_amount\00")
(data (i32.const 9392) "token_amount\00")
(data (i32.const 9405) "limit\00")
(data (i32.const 9411) "market_name\00")
(data (i32.const 9423) "string is too long to be a valid name\00")
(data (i32.const 9461) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9528) "character is not in allowed character set for names\00")
(data (i32.const 9580) "string is too long to be a valid symbol_code\00")
(data (i32.const 9625) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9678) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9727) "invalid symbol name\00")
(data (i32.const 9747) "write\00")
(data (i32.const 9753) "error reading iterator\00")
(data (i32.const 9776) "read\00")
(data (i32.const 9781) "get\00")
(data (i32.const 9785) "object passed to erase is not in multi_index\00")
(data (i32.const 9830) "cannot erase objects in table of another contract\00")
(data (i32.const 9880) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9933) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9984) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10036) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10090) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10138) "cannot create objects in table of another contract\00")
(data (i32.const 10189) "GOD\00")
(data (i32.const 10193) "object passed to modify is not in multi_index\00")
(data (i32.const 10239) "cannot modify objects in table of another contract\00")
(data (i32.const 10290) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10352) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 10368) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10384) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(data (i32.const 0) "\a0(\00\00")
(import "env" "abort" (func $fimport$0))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$5 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$11 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$16 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$18 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$21 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$23 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$25 (result i64)))
(import "env" "db_next_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$27 (param i32 i64 i32 i32)))
(import "env" "db_idx128_find_primary" (func $fimport$28 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_update" (func $fimport$29 (param i32 i64 i32)))
(import "env" "send_inline" (func $fimport$30 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$31 (result i32)))
(import "env" "read_action_data" (func $fimport$32 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$33 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$35 (param i32)))
(import "env" "db_idx128_remove" (func $fimport$36 (param i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$37 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$38 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_previous_i64" (func $fimport$39 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$40 (param i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$41 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_store" (func $fimport$42 (param i64 i64 i64 i64 i32) (result i32)))
(export "apply" (func $70))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $42 $63)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 10400))
(global $global$2 i32 (i32.const 10400))


void .FUNC $38 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	float_64 $12
	$4 = ($global$0 - [400])
	$global$0 = $4
	if ( ((int_64)*($2) > (int_64)999) ){ goto $label$1 }
	CALL eosio_assert([0], [9067])
	
.LABEL $label$1
	$5 = CALL $15([8722])
	if ( ($5 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9580])
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = *(($5 + [8721]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9625])
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	$6 = ((int_64)$6 << (int_64)8)
	goto $label$2 
	
.LABEL $label$3
	$6 = (int_64)0
	
.LABEL $label$2
	if ( ((int_64)*($2 + [8]) == (int_64)((int_64)$6 | (int_64)4)) ){ goto $label$8 }
	CALL eosio_assert([0], [9084])
	
.LABEL $label$8
	$5 = *($3)
	$7 = ($5 & [1])
	if ( $7 ){ goto $label$12 }
	if ( (uint_32($5 >> [1]) <= [3]) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( (*($3 + [4]) <= [3]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( $7 ){ goto $label$13 }
	if ( ((uint_32)uint_32($5 >> [1]) >= (uint_32)[9]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$13
	if ( (*($3 + [4]) <= [9]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert([0], [9113])
	
.LABEL $label$9
	*(($4 + [392])) = [0]
	*($4 + [376]) = (int_64)-1
	$6 = (int_64)0
	*($4 + [384]) = (int_64)0
	*($4 + [396]) = [0]
	$8 = *($0)
	*($4 + [360]) = $8
	*($4 + [368]) = $8
	*($4 + [352]) = ($4 + [360])
	$9 = CALL $27(($4 + [328]), $3)
	$5 = *($9)
	if ( ($5 & [1]) ){ goto $label$17 }
	$7 = uint_32($5 >> [1])
	if ( ($7 == 0) ){ goto $label$16 }
	$3 = (($4 + [328]) | [1])
	$6 = (int_64)0
	$5 = [0]
	$8 = (int_64)0
	
.LOOP $label$18:
	$10 = ((int_64)$6 << (int_64)8)
	$6 = ((int_64)$10 + (int_64)$8)
	$8 = *(($3 + $5))
	$8 = ((int_64)((int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56)) + (int_64)$8 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($6 <= $10)))
	$5 = ($5 + [1])
	if ( ($5 <= $7) ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$17
	$7 = *($9 + [4])
	if ( ($7 == 0) ){ goto $label$15 }
	$5 = *(($9 + [8]))
	$6 = (int_64)0
	$8 = (int_64)0
	
.LOOP $label$19:
	$10 = ((int_64)$6 << (int_64)8)
	$6 = ((int_64)$10 + (int_64)$8)
	$8 = *($5)
	$8 = ((int_64)((int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56)) + (int_64)$8 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($6 <= $10)))
	$5 = ($5 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$19 }
	goto $label$14 
	
.LABEL $label$16
	$6 = (int_64)0
	
.LABEL $label$15
	$8 = (int_64)0
	
.LABEL $label$14
	*($4 + [176]) = $6
	*($4 + [184]) = $8
	CALL $52(($4 + [344]), ($4 + [352]), ($4 + [176]))
	if ( ((*($9) & [1]) == 0) ){ goto $label$20 }
	CALL $9(*(($9 + [8])))
	
.LABEL $label$20
	$5 = *($4 + [348])
	if ( $5 ){ goto $label$21 }
	CALL eosio_assert([0], [9016])
	$5 = *($4 + [348])
	
.LABEL $label$21
	*((($4 + [176]) + [24])) = *(($5 + [24]))
	*((($4 + [176]) + [16])) = *(($5 + [16]))
	*($4 + [176]) = *($5)
	*($4 + [184]) = *(($5 + [8]))
	$9 = CALL $27((($4 + [176]) + [32]), ($5 + [32]))
	CALL memcpy((($4 + [176]) + [48]), ($5 + [48]), [88])
	if ( *($4 + [240]) ){ goto $label$22 }
	CALL eosio_assert([0], [9141])
	
.LABEL $label$22
	$11 = *($4 + [248])
	$6 = *((($4 + [176]) + [88]))
	*($4 + [168]) = $6
	*($4 + [160]) = $6
	*($4 + [152]) = (int_64)1
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$6 = $8
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$6 = $8
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$3 = ($5 + [1])
	$5 = $3
	if ( $7 ){ goto $label$27 }
	$5 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	CALL eosio_assert([0], [9727])
	
.LABEL $label$23
	$6 = *($0)
	$5 = *($4 + [348])
	*($4 + [52]) = $2
	*($4 + [48]) = ($4 + [152])
	*($4 + [56]) = ($4 + [168])
	CALL $59(($4 + [360]), $5, $6, ($4 + [48]))
	if ( ((int_64)*($4 + [152]) > (int_64)0) ){ goto $label$28 }
	CALL eosio_assert([0], [9168])
	
.LABEL $label$28
	if ( ((int_64)*($4 + [168]) == (int_64)*(($4 + [160]))) ){ goto $label$29 }
	CALL eosio_assert([0], [9199])
	
.LABEL $label$29
	$8 = *($4 + [152])
	$12 = ((float_64)(CASTING float_64)(int_64 $8) * (float_64)(float_64)0.002)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$31 }
	$6 = (int_64)-9223372036854775808
	goto $label$30 
	
.LABEL $label$31
	$6 = (Rounds 0)($12)
	
.LABEL $label$30
	$10 = ( $6 ? (int_64)1 : ((int_64)$6 > (int_64)1) )
	*($4 + [152]) = (int_64))($8 - $10)
	*($4 + [104]) = (int_64)3617214756542218240
	*($4 + [96]) = *($0)
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$5 = CALL $15([9222])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$39 }
	*($4 + [32]) = ($5 << [1])
	$7 = (($4 + [32]) | [1])
	if ( $5 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$3 = (($5 + [16]) & [-16])
	$7 = CALL $7($3)
	*($4 + [32]) = ($3 | [1])
	*($4 + [40]) = $7
	*($4 + [36]) = $5
	
.LABEL $label$38
	CALL memcpy($7, [9222], $5)
	
.LABEL $label$37
	*(($7 + $5)) = [0]
	*(($4 + [72])) = *((($4 + [152]) + [8]))
	$5 = (($4 + [32]) + [8])
	*(($4 + [88])) = *($5)
	*($5) = [0]
	*($4 + [56]) = $1
	*($4 + [48]) = *($0)
	*($4 + [64]) = *($4 + [152])
	*($4 + [80]) = *($4 + [32])
	*($4 + [32]) = (int_64)0
	$5 = CALL $60(($4 + [112]), ($4 + [96]), $11, (int_64)-3617168760277827584, ($4 + [48]))
	CALL $61($5)
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$40 }
	*(($5 + [32])) = $7
	CALL $9($7)
	
.LABEL $label$40
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$41 }
	*(($5 + [20])) = $7
	CALL $9($7)
	
.LABEL $label$41
	if ( (*(($4 + [80])) & [1]) ){ goto $label$43 }
	if ( (*($4 + [32]) & [1]) ){ goto $label$42 }
	goto $label$35 
	
.LABEL $label$43
	CALL $9(*(($4 + [88])))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$35 }
	
.LABEL $label$42
	CALL $9(*(($4 + [40])))
	if ( ((int_64)$10 < (int_64)1) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$36
	CALL $26(($4 + [32]))
	
.LABEL $label$35
	if ( ((int_64)$10 < (int_64)1) ){ goto $label$33 }
	
.LABEL $label$34
	$1 = *($4 + [168])
	if ( (uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$44 }
	CALL eosio_assert([0], [9678])
	
.LABEL $label$44
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$46 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$48 }
	$6 = $8
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$48
	$6 = $8
	
.LOOP $label$49:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$46 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$3 = ($5 + [1])
	$5 = $3
	if ( $7 ){ goto $label$49 }
	$5 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	CALL eosio_assert([0], [9727])
	
.LABEL $label$45
	*($4 + [104]) = (int_64)3617214756542218240
	*($4 + [96]) = *($0)
	*($4 + [16]) = [8663]
	*($4 + [20]) = CALL $15([8663])
	*($4 + [8]) = *($4 + [16])
	$3 = CALL $43(($4 + [24]), ($4 + [8]))
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$5 = CALL $15([9251])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$52 }
	*($4 + [32]) = ($5 << [1])
	$7 = (($4 + [32]) | [1])
	if ( $5 ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	$2 = (($5 + [16]) & [-16])
	$7 = CALL $7($2)
	*($4 + [32]) = ($2 | [1])
	*($4 + [40]) = $7
	*($4 + [36]) = $5
	
.LABEL $label$51
	CALL memcpy($7, [9251], $5)
	
.LABEL $label$50
	*(($7 + $5)) = [0]
	*(($4 + [72])) = $1
	$5 = ($4 + [40])
	*(($4 + [88])) = *($5)
	*($5) = [0]
	*($4 + [64]) = $10
	*($4 + [48]) = *($0)
	*($4 + [56]) = *($3)
	*($4 + [80]) = *($4 + [32])
	*($4 + [32]) = (int_64)0
	$5 = CALL $60(($4 + [112]), ($4 + [96]), $11, (int_64)-3617168760277827584, ($4 + [48]))
	CALL $61($5)
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$53 }
	*(($5 + [32])) = $7
	CALL $9($7)
	
.LABEL $label$53
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$54 }
	*(($5 + [20])) = $7
	CALL $9($7)
	
.LABEL $label$54
	if ( ((*(($4 + [80])) & [1]) == 0) ){ goto $label$55 }
	CALL $9(*(($4 + [88])))
	
.LABEL $label$55
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$33 }
	CALL $9(*(($4 + [40])))
	
.LABEL $label$33
	if ( ((*($9) & [1]) == 0) ){ goto $label$56 }
	CALL $9(*(($4 + [216])))
	
.LABEL $label$56
	$3 = *($4 + [384])
	if ( ($3 == 0) ){ goto $label$57 }
	$0 = ($4 + [388])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$59 }
	
.LOOP $label$60:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$61 }
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$62 }
	CALL $9(*(($7 + [40])))
	
.LABEL $label$62
	CALL $9($7)
	
.LABEL $label$61
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$60 }
	$5 = *(($4 + [384]))
	goto $label$58 
	
.LABEL $label$59
	$5 = $3
	
.LABEL $label$58
	*($0) = $3
	CALL $9($5)
	
.LABEL $label$57
	$global$0 = ($4 + [400])
	return (unreachable)
	
.LABEL $label$32
	CALL $26(($4 + [32]))
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [176])
	$global$0 = $5
	*($5 + [128]) = $3
	$6 = *($1)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$6 }
	if ( (uint_32($6 >> [1]) == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	if ( (*($1 + [4]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	if ( $7 ){ goto $label$7 }
	if ( ((uint_32)uint_32($6 >> [1]) >= (uint_32)[11]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	if ( (*($1 + [4]) <= [11]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [8821])
	$8 = (int_64)0
	if ( ((int_64)*($4) > (int_64)0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$8 = (int_64)0
	if ( ((int_64)*($4) > (int_64)0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8841])
	
.LABEL $label$1
	$9 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)$8) ){ goto $label$11 }
	$9 = $10
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$9 = $10
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)$8) ){ goto $label$9 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $7 ){ goto $label$12 }
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [8868])
	
.LABEL $label$8
	$6 = CALL $15([8722])
	if ( ($6 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [9580])
	goto $label$15 
	
.LABEL $label$16
	if ( ($6 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$9 = (int_64)0
	
.LOOP $label$17:
	$7 = *(($6 + [8721]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [9625])
	
.LABEL $label$18
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$17 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$13 
	
.LABEL $label$14
	$9 = (int_64)0
	
.LABEL $label$13
	if ( ((int_64)*(($4 + [8])) != (int_64)((int_64)$9 | (int_64)4)) ){ goto $label$19 }
	CALL eosio_assert([0], [8895])
	
.LABEL $label$19
	if ( ((int_64)*($2) > (int_64)0) ){ goto $label$20 }
	CALL eosio_assert([0], [8928])
	
.LABEL $label$20
	$6 = CALL $15([8722])
	if ( ($6 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [9580])
	goto $label$23 
	
.LABEL $label$24
	if ( ($6 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$9 = (int_64)0
	
.LOOP $label$25:
	$7 = *(($6 + [8721]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	CALL eosio_assert([0], [9625])
	
.LABEL $label$26
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$25 }
	$9 = ((int_64)$9 << (int_64)8)
	goto $label$21 
	
.LABEL $label$22
	$9 = (int_64)0
	
.LABEL $label$21
	if ( ((int_64)*($2 + [8]) == (int_64)((int_64)$9 | (int_64)4)) ){ goto $label$27 }
	CALL eosio_assert([0], [8953])
	
.LABEL $label$27
	*(($5 + [120])) = [0]
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	*($5 + [124]) = [0]
	$9 = *($0)
	*($5 + [88]) = $9
	*($5 + [96]) = $9
	*($5 + [72]) = $3
	*($5 + [64]) = *(($4 + [8]))
	*($5 + [56]) = ($5 + [88])
	CALL $51($5, ($5 + [56]), ($5 + [64]))
	$6 = *($5 + [4])
	if ( ($6 == 0) ){ goto $label$28 }
	if ( ((int_64)(((int_64)((int_64)*($5 + [64]) ^ (int_64)*($6 + [16])) | (int_64)((int_64)*($5 + [72]) ^ (int_64)*(($6 + [24])))) == 0) == 0) ){ goto $label$28 }
	CALL eosio_assert([0], [8987])
	
.LABEL $label$28
	*($5 + [48]) = ($5 + [88])
	$12 = CALL $27(($5 + [32]), $1)
	$6 = *($12)
	if ( ($6 & [1]) ){ goto $label$31 }
	$7 = uint_32($6 >> [1])
	if ( ($7 == 0) ){ goto $label$30 }
	$11 = (($5 + [32]) | [1])
	$9 = (int_64)0
	$6 = [0]
	$8 = (int_64)0
	
.LOOP $label$32:
	$10 = ((int_64)$9 << (int_64)8)
	$9 = ((int_64)$10 + (int_64)$8)
	$8 = *(($11 + $6))
	$8 = ((int_64)((int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$9 >> (uint_64)(int_64)56)) + (int_64)$8 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($9 <= $10)))
	$6 = ($6 + [1])
	if ( ($6 <= $7) ){ goto $label$32 }
	goto $label$29 
	
.LABEL $label$31
	$7 = *($12 + [4])
	if ( ($7 == 0) ){ goto $label$30 }
	$6 = *(($12 + [8]))
	$9 = (int_64)0
	$8 = (int_64)0
	
.LOOP $label$33:
	$10 = ((int_64)$9 << (int_64)8)
	$9 = ((int_64)$10 + (int_64)$8)
	$8 = *($6)
	$8 = ((int_64)((int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$9 >> (uint_64)(int_64)56)) + (int_64)$8 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($9 <= $10)))
	$6 = ($6 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$33 }
	goto $label$29 
	
.LABEL $label$30
	$9 = (int_64)0
	$8 = (int_64)0
	
.LABEL $label$29
	*($5) = $9
	*($5 + [8]) = $8
	CALL $52(($5 + [144]), ($5 + [48]), $5)
	if ( (*($5 + [148]) == 0) ){ goto $label$34 }
	CALL eosio_assert([0], [8987])
	
.LABEL $label$34
	if ( ((*($12) & [1]) == 0) ){ goto $label$35 }
	CALL $9(*(($12 + [8])))
	
.LABEL $label$35
	$9 = *(($5 + [104]))
	if ( ((int_64)$9 == (int_64)-1) ){ goto $label$39 }
	if ( ((uint_64)$9 >= (uint_64)(int_64)-2) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$39
	$9 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($5 + [88]), *(($5 + [96])), (int_64)-7949128877345865728, (int_64)0)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$37 }
	CALL $53(($5 + [88]), $6)
	*($5 + [4]) = [0]
	*($5) = ($5 + [88])
	$9 = *(*(CALL $54($5) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	*(($5 + [104])) = $9
	if ( (uint_64)($9 <= (int_64)-2) ){ goto $label$36 }
	
.LABEL $label$38
	CALL eosio_assert([0], [9984])
	$9 = *(($5 + [104]))
	goto $label$36 
	
.LABEL $label$37
	*(($5 + [104])) = (int_64)0
	
.LABEL $label$36
	*($5 + [24]) = $9
	$9 = *($0)
	*($5 + [8]) = $1
	*($5 + [16]) = $4
	*($5 + [20]) = $2
	*($5 + [4]) = ($5 + [64])
	*($5) = ($5 + [24])
	*($5 + [12]) = ($5 + [128])
	*($5 + [168]) = $9
	if ( ((int_64)CALL current_receiver() == (int_64)*($5 + [88])) ){ goto $label$40 }
	CALL eosio_assert([0], [10138])
	
.LABEL $label$40
	*($5 + [148]) = $5
	*($5 + [144]) = ($5 + [88])
	*($5 + [152]) = ($5 + [168])
	*(($6 = CALL $7([160])) + [40]) = [0]
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)0
	*($6 + [72]) = (int_64)0
	*($6 + [80]) = (int_64)0
	*($6 + [88]) = (int_64)0
	*($6 + [96]) = (int_64)500
	*($6 + [104]) = (int_64)0
	*($6 + [112]) = (int_64)0
	*($6 + [120]) = (int_64)0
	*($6 + [128]) = (int_64)500
	*($6 + [136]) = ($5 + [88])
	CALL $55(($5 + [144]), $6)
	*($5 + [160]) = $6
	$9 = *($6)
	*($5 + [144]) = $9
	$11 = *($6 + [140])
	*($5 + [140]) = $11
	$4 = ($5 + [116])
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)*(($5 + [120]))) ){ goto $label$45 }
	*($7 + [8]) = $9
	*($7 + [16]) = $11
	*($5 + [160]) = [0]
	*($7) = $6
	*($4) = ($7 + [24])
	$6 = *($5 + [160])
	*($5 + [160]) = [0]
	if ( ($6 == 0) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	CALL $56(($5 + [112]), ($5 + [160]), ($5 + [144]), ($5 + [140]))
	$6 = *($5 + [160])
	*($5 + [160]) = [0]
	if ( $6 ){ goto $label$43 }
	
.LABEL $label$44
	$11 = *($5 + [112])
	if ( ($11 == 0) ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$43
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$46 }
	CALL $9(*(($6 + [40])))
	
.LABEL $label$46
	CALL $9($6)
	$11 = *($5 + [112])
	if ( ($11 == 0) ){ goto $label$41 }
	
.LABEL $label$42
	$4 = ($5 + [116])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$48 }
	
.LOOP $label$49:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$50 }
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$51 }
	CALL $9(*(($7 + [40])))
	
.LABEL $label$51
	CALL $9($7)
	
.LABEL $label$50
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$49 }
	$6 = *(($5 + [112]))
	goto $label$47 
	
.LABEL $label$48
	$6 = $11
	
.LABEL $label$47
	*($4) = $11
	CALL $9($6)
	
.LABEL $label$41
	$global$0 = ($5 + [176])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [9423])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [9528])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9461])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9528])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

void .FUNC $42 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$5 = ($global$0 - [288])
	$global$0 = $5
	CALL require_auth($1)
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $6
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $6
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$6 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [8254])
	
.LABEL $label$2
	*($5 + [272]) = [8663]
	*($5 + [276]) = CALL $15([8663])
	*($5 + [88]) = *($5 + [272])
	if ( ((int_64)*(CALL $43(($5 + [280]), ($5 + [88]))) != (int_64)$1) ){ goto $label$26 }
	*(($5 + [240])) = (int_64)0
	*($5 + [224]) = (int_64)0
	*($5 + [232]) = (int_64)0
	*($5 + [248]) = (int_64)0
	*($5 + [256]) = (int_64)0
	*($5 + [264]) = (int_64)0
	$7 = CALL $27(($5 + [208]), $4)
	CALL $44($7, $7, ($5 + [224]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$27 }
	CALL $9(*($7 + [8]))
	
.LABEL $label$27
	$7 = *($5 + [224])
	$8 = CALL $15([8689])
	if ( ((int_32)$8 != (int_32)( *($5 + [228]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$28 }
	if ( (CALL $32(($5 + [224]), [0], [-1], [8689], $8) == 0) ){ goto $label$25 }
	
.LABEL $label$28
	$7 = *($5 + [224])
	$8 = CALL $15([8775])
	if ( ((int_32)$8 != (int_32)( *($5 + [228]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$29 }
	if ( (CALL $32(($5 + [224]), [0], [-1], [8775], $8) == 0) ){ goto $label$24 }
	
.LABEL $label$29
	$7 = *($5 + [224])
	$8 = CALL $15([8568])
	if ( ((int_32)$8 != (int_32)( *($5 + [228]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$30 }
	if ( (CALL $32(($5 + [224]), [0], [-1], [8568], $8) == 0) ){ goto $label$23 }
	
.LABEL $label$30
	$7 = *($5 + [224])
	$8 = CALL $15([8807])
	if ( ((int_32)$8 != (int_32)( *($5 + [228]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$31 }
	if ( (CALL $32(($5 + [224]), [0], [-1], [8807], $8) == 0) ){ goto $label$22 }
	
.LABEL $label$31
	if ( ((*($5 + [236]) & [1]) == 0) ){ goto $label$32 }
	CALL $9(*(($5 + [244])))
	
.LABEL $label$32
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$1 }
	CALL $9(*(($5 + [232])))
	$global$0 = ($5 + [288])
	return 
	
.LABEL $label$26
	$6 = *($0 + [8])
	if ( ((int_64)$6 != (int_64)6138663591592764928) ){ goto $label$19 }
	$7 = CALL $15([8722])
	if ( ($7 <= [8]) ){ goto $label$34 }
	CALL eosio_assert([0], [9580])
	goto $label$33 
	
.LABEL $label$34
	if ( ($7 == 0) ){ goto $label$21 }
	
.LABEL $label$33
	$2 = (int_64)0
	
.LOOP $label$35:
	$8 = *(($7 + [8721]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$36 }
	CALL eosio_assert([0], [9625])
	
.LABEL $label$36
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$35 }
	if ( ((int_64)*($3 + [8]) != (int_64)((int_64)((int_64)$2 << (int_64)8) | (int_64)4)) ){ goto $label$20 }
	goto $label$7 
	
.LABEL $label$25
	$6 = *(($5 + [248]))
	$7 = CALL $15([8722])
	if ( ($7 <= [8]) ){ goto $label$18 }
	CALL eosio_assert([0], [9580])
	goto $label$17 
	
.LABEL $label$24
	CALL $45($0, *($0 + [8]), *($3 + [8]), [1])
	$7 = [1]
	if ( ((*($5 + [236]) & [1]) == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$23
	CALL $45($0, *($0 + [8]), *($3 + [8]), [0])
	$7 = [1]
	if ( ((*($5 + [236]) & [1]) == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$22
	$6 = *(($5 + [248]))
	$7 = CALL $15([8722])
	if ( ($7 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [9580])
	goto $label$15 
	
.LABEL $label$21
	if ( ((int_64)*($3 + [8]) == (int_64)4) ){ goto $label$7 }
	
.LABEL $label$20
	$6 = *(($0 + [8]))
	
.LABEL $label$19
	$10 = *(($3 + [8]))
	*((($5 + [96]) + [8])) = $10
	$2 = *($3)
	*((($5 + [72]) + [8])) = $10
	*($5 + [96]) = $2
	*($5 + [72]) = $2
	CALL $46($0, $1, $6, ($5 + [72]))
	$global$0 = ($5 + [288])
	return 
	
.LABEL $label$18
	if ( ($7 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	$2 = (int_64)0
	
.LOOP $label$37:
	$8 = *(($7 + [8721]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$38 }
	CALL eosio_assert([0], [9625])
	
.LABEL $label$38
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$37 }
	$11 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$11 
	
.LABEL $label$16
	if ( ($7 == 0) ){ goto $label$13 }
	
.LABEL $label$15
	$2 = (int_64)0
	
.LOOP $label$39:
	$8 = *(($7 + [8721]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$40 }
	CALL eosio_assert([0], [9625])
	
.LABEL $label$40
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$39 }
	$10 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$14
	$11 = (int_64)4
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)4
	
.LABEL $label$12
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$41 }
	CALL eosio_assert([0], [9678])
	
.LABEL $label$41
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$45 }
	$2 = $1
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$2 = $1
	
.LOOP $label$46:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$43 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$46 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	CALL eosio_assert([0], [9727])
	
.LABEL $label$42
	$11 = *($3 + [8])
	$12 = *(($5 + [256]))
	if ( (uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$47 }
	CALL eosio_assert([0], [9678])
	
.LABEL $label$47
	$2 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$50:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$51 }
	$2 = $1
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$51
	$2 = $1
	
.LOOP $label$52:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$49 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$52 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	CALL eosio_assert([0], [9727])
	
.LABEL $label$48
	$2 = *($0 + [8])
	*((($5 + [56]) + [8])) = $10
	*((($5 + [40]) + [8])) = $11
	*($5 + [152]) = $10
	*($5 + [144]) = $6
	*($5 + [128]) = $12
	*($5 + [136]) = $11
	*($5 + [56]) = $6
	*($5 + [40]) = $12
	CALL $47($0, ($5 + [56]), $2, ($5 + [40]))
	$7 = [1]
	if ( ((*($5 + [236]) & [1]) == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( (uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$53 }
	CALL eosio_assert([0], [9678])
	
.LABEL $label$53
	$2 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$56:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$57 }
	$2 = $1
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$57
	$2 = $1
	
.LOOP $label$58:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$55 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$58 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	CALL eosio_assert([0], [9727])
	
.LABEL $label$54
	$10 = *($3 + [8])
	$12 = *(($5 + [256]))
	if ( (uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$59 }
	CALL eosio_assert([0], [9678])
	
.LABEL $label$59
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$63 }
	$2 = $1
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$63
	$2 = $1
	
.LOOP $label$64:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$61 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$64 }
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	CALL eosio_assert([0], [9727])
	
.LABEL $label$60
	$7 = CALL $27(($5 + [192]), ($5 + [236]))
	$2 = *($0 + [8])
	*((($5 + [24]) + [8])) = $11
	*((($5 + [8]) + [8])) = $10
	*($5 + [184]) = $11
	*($5 + [176]) = $6
	*($5 + [160]) = $12
	*($5 + [168]) = $10
	*($5 + [24]) = $6
	*($5 + [8]) = $12
	CALL $48($0, $7, ($5 + [24]), $2, ($5 + [8]))
	if ( (*($7) & [1]) ){ goto $label$65 }
	$7 = [1]
	if ( (*($5 + [236]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$65
	CALL $9(*($7 + [8]))
	$7 = [1]
	if ( ((*($5 + [236]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $9(*(($5 + [244])))
	if ( (*($5 + [224]) & $7) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	if ( ((*($5 + [224]) & $7) == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL $9(*(($5 + [232])))
	goto $label$1 
	
.LABEL $label$7
	$7 = CALL $27(($5 + [112]), $4)
	CALL $49($0, $1, $3, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$1 }
	CALL $9(*($7 + [8]))
	$global$0 = ($5 + [288])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [288])
}

int_32 .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	*(($5 = (($4 = ($global$0 - [32])) + [8]))) = *(($3 + [8]))
	*($4) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [16]) + [8])) = $3
	$2 = *($4)
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [16]) = $2
	return $0
}

void .FUNC $40 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$global$0 = $4
	if ( ((int_64)*($3) > (int_64)0) ){ goto $label$1 }
	CALL eosio_assert([0], [8841])
	
.LABEL $label$1
	$5 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$5 = $7
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $7
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$6 }
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [8868])
	
.LABEL $label$2
	$6 = CALL $15([8722])
	if ( ($6 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9580])
	goto $label$9 
	
.LABEL $label$10
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$5 = (int_64)0
	
.LOOP $label$11:
	$8 = *(($6 + [8721]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9625])
	
.LABEL $label$12
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$11 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$7 
	
.LABEL $label$8
	$5 = (int_64)4
	
.LABEL $label$7
	if ( ((int_64)*(($3 + [8])) != (int_64)$5) ){ goto $label$13 }
	CALL eosio_assert([0], [8895])
	
.LABEL $label$13
	if ( ((int_64)*($1) > (int_64)0) ){ goto $label$14 }
	CALL eosio_assert([0], [8928])
	
.LABEL $label$14
	$6 = CALL $15([8722])
	if ( ($6 <= [8]) ){ goto $label$19 }
	CALL eosio_assert([0], [9580])
	goto $label$18 
	
.LABEL $label$19
	if ( ($6 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$5 = (int_64)0
	
.LOOP $label$20:
	$8 = *(($6 + [8721]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$21 }
	CALL eosio_assert([0], [9625])
	
.LABEL $label$21
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$20 }
	if ( ((int_64)*($1 + [8]) == (int_64)((int_64)((int_64)$5 << (int_64)8) | (int_64)4)) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_64)*($1 + [8]) == (int_64)4) ){ goto $label$15 }
	
.LABEL $label$16
	CALL eosio_assert([0], [8953])
	
.LABEL $label$15
	$8 = [0]
	*(($4 + [64])) = [0]
	*($4 + [48]) = (int_64)-1
	*($4 + [56]) = (int_64)0
	*($4 + [68]) = [0]
	$5 = *($0)
	*($4 + [32]) = $5
	*($4 + [40]) = $5
	*($4 + [24]) = $2
	*($4 + [16]) = *(($3 + [8]))
	*($4 + [8]) = ($4 + [32])
	CALL $51(($4 + [72]), ($4 + [8]), ($4 + [16]))
	$6 = *($4 + [76])
	if ( ($6 == 0) ){ goto $label$23 }
	if ( ((int_64)((int_64)((int_64)*($4 + [16]) ^ (int_64)*($6 + [16])) | (int_64)((int_64)*($4 + [24]) ^ (int_64)*(($6 + [24])))) != (int_64)0) ){ goto $label$23 }
	$8 = $6
	goto $label$22 
	
.LABEL $label$23
	CALL eosio_assert([0], [9016])
	
.LABEL $label$22
	$5 = *($0)
	*($4 + [76]) = $1
	*($4 + [72]) = $3
	CALL $58(($4 + [32]), $8, $5, ($4 + [72]))
	$9 = *($4 + [56])
	if ( ($9 == 0) ){ goto $label$24 }
	$3 = ($4 + [60])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$26 }
	
.LOOP $label$27:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$28 }
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$29 }
	CALL $9(*(($8 + [40])))
	
.LABEL $label$29
	CALL $9($8)
	
.LABEL $label$28
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$27 }
	$6 = *(($4 + [56]))
	goto $label$25 
	
.LABEL $label$26
	$6 = $9
	
.LABEL $label$25
	*($3) = $9
	CALL $9($6)
	
.LABEL $label$24
	$global$0 = ($4 + [80])
}

void .FUNC $46 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	float_64 $13
	$4 = ($global$0 - [400])
	$global$0 = $4
	$5 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $7
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$5 }
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9278])
	
.LABEL $label$1
	$6 = CALL $15([8722])
	if ( ($6 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [9580])
	goto $label$8 
	
.LABEL $label$9
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = (int_64)0
	
.LOOP $label$10:
	$8 = *(($6 + [8721]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [9625])
	
.LABEL $label$11
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$10 }
	$5 = ((int_64)$5 << (int_64)8)
	goto $label$6 
	
.LABEL $label$7
	$5 = (int_64)0
	
.LABEL $label$6
	if ( ((int_64)*(($3 + [8])) != (int_64)((int_64)$5 | (int_64)4)) ){ goto $label$12 }
	CALL eosio_assert([0], [8597])
	
.LABEL $label$12
	if ( ((int_64)*($3) > (int_64)0) ){ goto $label$13 }
	CALL eosio_assert([0], [8645])
	
.LABEL $label$13
	$10 = [0]
	*(($4 + [392])) = [0]
	*($4 + [376]) = (int_64)-1
	*($4 + [384]) = (int_64)0
	*($4 + [396]) = [0]
	$5 = *($0)
	*($4 + [360]) = $5
	*($4 + [368]) = $5
	*($4 + [344]) = $2
	*($4 + [336]) = *(($3 + [8]))
	*($4 + [328]) = ($4 + [360])
	CALL $51(($4 + [176]), ($4 + [328]), ($4 + [336]))
	$6 = *($4 + [180])
	if ( ($6 == 0) ){ goto $label$15 }
	if ( ((int_64)((int_64)((int_64)*($4 + [336]) ^ (int_64)*($6 + [16])) | (int_64)((int_64)*($4 + [344]) ^ (int_64)*(($6 + [24])))) != (int_64)0) ){ goto $label$15 }
	$10 = $6
	goto $label$14 
	
.LABEL $label$15
	CALL eosio_assert([0], [9016])
	
.LABEL $label$14
	*((($4 + [176]) + [24])) = *(($10 + [24]))
	*((($4 + [176]) + [16])) = *(($10 + [16]))
	*($4 + [176]) = *($10)
	*($4 + [184]) = *(($10 + [8]))
	$11 = CALL $27((($4 + [176]) + [32]), ($10 + [32]))
	CALL memcpy((($4 + [176]) + [48]), ($10 + [48]), [88])
	if ( *($4 + [240]) ){ goto $label$16 }
	CALL eosio_assert([0], [9141])
	
.LABEL $label$16
	$12 = *($4 + [280])
	$5 = *(($4 + [296]))
	*($4 + [168]) = $5
	*($4 + [160]) = $5
	*($4 + [152]) = (int_64)0
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$5 = $7
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$5 = $7
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$21 }
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	CALL eosio_assert([0], [9727])
	
.LABEL $label$17
	$5 = *($0)
	*($4 + [52]) = $3
	*($4 + [48]) = ($4 + [152])
	*($4 + [56]) = ($4 + [168])
	CALL $62(($4 + [360]), $10, $5, ($4 + [48]))
	$5 = *($4 + [152])
	if ( ((int_64)$5 > (int_64)0) ){ goto $label$22 }
	CALL eosio_assert([0], [9299])
	$5 = *($4 + [152])
	
.LABEL $label$22
	$13 = ((float_64)(CASTING float_64)(int_64 $5) * (float_64)(float_64)0.002)
	if ( ((float_64)(float_64)|$13| < (float_64)(float_64)9223372036854775808) ){ goto $label$24 }
	$7 = (int_64)-9223372036854775808
	goto $label$23 
	
.LABEL $label$24
	$7 = (Rounds 0)($13)
	
.LABEL $label$23
	$2 = ( $7 ? (int_64)1 : ((int_64)$7 > (int_64)1) )
	*($4 + [152]) = (int_64))($5 - $2)
	*($4 + [104]) = (int_64)3617214756542218240
	*($4 + [96]) = *($0)
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$6 = CALL $15([9349])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$32 }
	*($4 + [32]) = ($6 << [1])
	$8 = (($4 + [32]) | [1])
	if ( $6 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$9 = (($6 + [16]) & [-16])
	$8 = CALL $7($9)
	*($4 + [32]) = ($9 | [1])
	*($4 + [40]) = $8
	*($4 + [36]) = $6
	
.LABEL $label$31
	CALL memcpy($8, [9349], $6)
	
.LABEL $label$30
	*(($8 + $6)) = [0]
	*(($4 + [72])) = *((($4 + [152]) + [8]))
	$6 = (($4 + [32]) + [8])
	*(($4 + [88])) = *($6)
	*($6) = [0]
	*($4 + [56]) = $1
	*($4 + [48]) = *($0)
	*($4 + [64]) = *($4 + [152])
	*($4 + [80]) = *($4 + [32])
	*($4 + [32]) = (int_64)0
	$6 = CALL $60(($4 + [112]), ($4 + [96]), $12, (int_64)-3617168760277827584, ($4 + [48]))
	CALL $61($6)
	$8 = *($6 + [28])
	if ( ($8 == 0) ){ goto $label$33 }
	*(($6 + [32])) = $8
	CALL $9($8)
	
.LABEL $label$33
	$8 = *($6 + [16])
	if ( ($8 == 0) ){ goto $label$34 }
	*(($6 + [20])) = $8
	CALL $9($8)
	
.LABEL $label$34
	if ( (*(($4 + [80])) & [1]) ){ goto $label$36 }
	if ( (*($4 + [32]) & [1]) ){ goto $label$35 }
	goto $label$28 
	
.LABEL $label$36
	CALL $9(*(($4 + [88])))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$28 }
	
.LABEL $label$35
	CALL $9(*(($4 + [40])))
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$29
	CALL $26(($4 + [32]))
	
.LABEL $label$28
	if ( ((int_64)$2 < (int_64)1) ){ goto $label$26 }
	
.LABEL $label$27
	$1 = *($4 + [168])
	if ( (uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$37 }
	CALL eosio_assert([0], [9678])
	
.LABEL $label$37
	$5 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$40:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$41 }
	$5 = $7
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$41
	$5 = $7
	
.LOOP $label$42:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$39 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$42 }
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	CALL eosio_assert([0], [9727])
	
.LABEL $label$38
	*($4 + [104]) = (int_64)3617214756542218240
	*($4 + [96]) = *($0)
	*($4 + [16]) = [8663]
	*($4 + [20]) = CALL $15([8663])
	*($4 + [8]) = *($4 + [16])
	$9 = CALL $43(($4 + [24]), ($4 + [8]))
	*(($4 + [40])) = [0]
	*($4 + [32]) = (int_64)0
	$6 = CALL $15([9251])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$45 }
	*($4 + [32]) = ($6 << [1])
	$8 = (($4 + [32]) | [1])
	if ( $6 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$10 = (($6 + [16]) & [-16])
	$8 = CALL $7($10)
	*($4 + [32]) = ($10 | [1])
	*($4 + [40]) = $8
	*($4 + [36]) = $6
	
.LABEL $label$44
	CALL memcpy($8, [9251], $6)
	
.LABEL $label$43
	*(($8 + $6)) = [0]
	*(($4 + [72])) = $1
	$6 = ($4 + [40])
	*(($4 + [88])) = *($6)
	*($6) = [0]
	*($4 + [64]) = $2
	*($4 + [48]) = *($0)
	*($4 + [56]) = *($9)
	*($4 + [80]) = *($4 + [32])
	*($4 + [32]) = (int_64)0
	$6 = CALL $60(($4 + [112]), ($4 + [96]), $12, (int_64)-3617168760277827584, ($4 + [48]))
	CALL $61($6)
	$8 = *($6 + [28])
	if ( ($8 == 0) ){ goto $label$46 }
	*(($6 + [32])) = $8
	CALL $9($8)
	
.LABEL $label$46
	$8 = *($6 + [16])
	if ( ($8 == 0) ){ goto $label$47 }
	*(($6 + [20])) = $8
	CALL $9($8)
	
.LABEL $label$47
	if ( ((*(($4 + [80])) & [1]) == 0) ){ goto $label$48 }
	CALL $9(*(($4 + [88])))
	
.LABEL $label$48
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$26 }
	CALL $9(*(($4 + [40])))
	
.LABEL $label$26
	if ( ((*($11) & [1]) == 0) ){ goto $label$49 }
	CALL $9(*(($4 + [216])))
	
.LABEL $label$49
	$9 = *($4 + [384])
	if ( ($9 == 0) ){ goto $label$50 }
	$10 = ($4 + [388])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$9) ){ goto $label$52 }
	
.LOOP $label$53:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$54 }
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$55 }
	CALL $9(*(($8 + [40])))
	
.LABEL $label$55
	CALL $9($8)
	
.LABEL $label$54
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$53 }
	$6 = *(($4 + [384]))
	goto $label$51 
	
.LABEL $label$52
	$6 = $9
	
.LABEL $label$51
	*($10) = $9
	CALL $9($6)
	
.LABEL $label$50
	$global$0 = ($4 + [400])
	return (unreachable)
	
.LABEL $label$25
	CALL $26(($4 + [32]))
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [87]) = $3
	$5 = [0]
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	*($4 + [76]) = [0]
	$6 = *($0)
	*($4 + [40]) = $6
	*($4 + [48]) = $6
	*($4 + [24]) = $1
	*($4 + [16]) = $2
	*($4 + [8]) = ($4 + [40])
	CALL $51(($4 + [88]), ($4 + [8]), ($4 + [16]))
	$3 = *($4 + [92])
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_64)((int_64)((int_64)*($4 + [16]) ^ (int_64)*($3 + [16])) | (int_64)((int_64)*($4 + [24]) ^ (int_64)*(($3 + [24])))) != (int_64)0) ){ goto $label$2 }
	$5 = $3
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [9044])
	
.LABEL $label$1
	$2 = *($0)
	*($4 + [88]) = ($4 + [87])
	CALL $57(($4 + [40]), $5, $2, ($4 + [88]))
	$5 = *($4 + [64])
	if ( ($5 == 0) ){ goto $label$3 }
	$7 = ($4 + [68])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $9(*(($3 + [40])))
	
.LABEL $label$8
	CALL $9($3)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [64]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($7) = $5
	CALL $9($0)
	
.LABEL $label$3
	$global$0 = ($4 + [96])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [64])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [32]) = (int_64)0
	$4 = CALL $15([9373])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($3 + [32]) = ($4 << [1])
	$5 = (($3 + [32]) | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $7($6)
	*($3 + [32]) = ($6 | [1])
	*($3 + [40]) = $5
	*($3 + [36]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [9373], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	CALL $50(($3 + [48]), $1, ($3 + [32]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $9(*($3 + [40]))
	
.LABEL $label$5
	$5 = *($3 + [48])
	$4 = *($3 + [52])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	$7 = ($2 + [12])
	$8 = ($3 | [1])
	$9 = ($2 + [24])
	$10 = ($2 + [32])
	$11 = ($2 + [40])
	$6 = [0]
	
.LOOP $label$8:
	*((($3 + [16]) + [8])) = [0]
	*(($1 = ($3 + [8]))) = [0]
	*($3 + [16]) = (int_64)0
	*($3) = (int_64)0
	$4 = CALL $15([9375])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$6 }
	$12 = ($5 + ((int_32)$6 * (int_32)[12]))
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($3) = ($4 << [1])
	$5 = $8
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$13 = (($4 + [16]) & [-16])
	$5 = CALL $7($13)
	*($1) = $5
	*($3) = ($13 | [1])
	*($3 + [4]) = $4
	
.LABEL $label$10
	CALL memcpy($5, [9375], $4)
	
.LABEL $label$9
	*(($5 + $4)) = [0]
	CALL $50(($3 + [16]), $12, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$12 }
	CALL $9(*($1))
	
.LABEL $label$12
	$1 = *($3 + [16])
	if ( (((int_32)(*($3 + [20]) - $1) / (int_32)[12]) <= [2]) ){ goto $label$13 }
	$4 = *($1)
	$5 = CALL $15([9377])
	if ( ((int_32)$5 != (int_32)( *($1 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$19 }
	if ( (CALL $32($1, [0], [-1], [9377], $5) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$4 = *($3 + [16])
	$5 = *($4)
	$1 = CALL $15([9381])
	if ( ((int_32)$1 != (int_32)( *($4 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$20 }
	if ( (CALL $32($4, [0], [-1], [9381], $1) == 0) ){ goto $label$17 }
	
.LABEL $label$20
	$4 = *($3 + [16])
	$5 = *($4)
	$1 = CALL $15([9392])
	if ( ((int_32)$1 != (int_32)( *($4 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$21 }
	if ( (CALL $32($4, [0], [-1], [9392], $1) == 0) ){ goto $label$16 }
	
.LABEL $label$21
	$4 = *($3 + [16])
	$5 = *($4)
	$1 = CALL $15([9405])
	if ( ((int_32)$1 != (int_32)( *($4 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$22 }
	if ( (CALL $32($4, [0], [-1], [9405], $1) == 0) ){ goto $label$15 }
	
.LABEL $label$22
	$4 = *($3 + [16])
	$5 = *($4)
	$1 = CALL $15([9411])
	if ( ((int_32)$1 != (int_32)( *($4 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$14 }
	if ( CALL $32($4, [0], [-1], [9411], $1) ){ goto $label$14 }
	CALL $29($7, (*($3 + [16]) + [12]))
	goto $label$14 
	
.LABEL $label$18
	CALL $29($2, (*($3 + [16]) + [12]))
	goto $label$14 
	
.LABEL $label$17
	*($9) = CALL $35((*($3 + [16]) + [12]), [0], [0])
	goto $label$14 
	
.LABEL $label$16
	*($10) = CALL $35((*($3 + [16]) + [12]), [0], [0])
	goto $label$14 
	
.LABEL $label$15
	*($11) = CALL $35((*($3 + [16]) + [12]), [0], [0])
	
.LABEL $label$14
	$1 = *($3 + [16])
	
.LABEL $label$13
	if ( ($1 == 0) ){ goto $label$23 }
	$5 = *($3 + [20])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$25 }
	
.LOOP $label$26:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$27 }
	CALL $9(*(($5 + [-4])))
	
.LABEL $label$27
	$5 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$26 }
	$4 = *($3 + [16])
	goto $label$24 
	
.LABEL $label$25
	$4 = $1
	
.LABEL $label$24
	*($3 + [20]) = $1
	CALL $9($4)
	
.LABEL $label$23
	$5 = *($3 + [48])
	$4 = *($3 + [52])
	$6 = ($6 + [1])
	if ( ($6 <= ((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($5 == 0) ){ goto $label$28 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$30 }
	
.LOOP $label$31:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$32 }
	CALL $9(*(($4 + [-4])))
	
.LABEL $label$32
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$31 }
	$4 = *($3 + [48])
	goto $label$29 
	
.LABEL $label$30
	$4 = $5
	
.LABEL $label$29
	*($3 + [52]) = $5
	CALL $9($4)
	
.LABEL $label$28
	$global$0 = ($3 + [64])
	return (unreachable)
	
.LABEL $label$6
	CALL $26($3)
	
.LABEL $label$1
	CALL $26(($3 + [32]))
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0)
{
	return CALL $7($0)
}

void .FUNC $9 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

int_32 .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $4())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $5($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $4 ()
{
	return [8208]
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $4()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $2 (int_32 $0)
{
}

void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

void .FUNC $0 ()
{
	CALL $3()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	CALL $13($0, $1)
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $10 (int_32 $0)
{
	CALL $9($0)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $6(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $6(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	return CALL $11($0, $1)
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9747])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [9747])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [9747])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $18($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [136]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10239])
	
.LABEL $label$2
	$6 = *(($1 + [24]))
	$7 = *(($1 + [16]))
	$8 = ($1 + [32])
	$9 = CALL $27(($5 + [16]), $8)
	$10 = *($5 + [16])
	$11 = ($10 & [1])
	if ( $11 ){ goto $label$8 }
	$12 = uint_32($10 >> [1])
	if ( ($12 == 0) ){ goto $label$6 }
	$13 = (($5 + [16]) | [1])
	$14 = (int_64)0
	$10 = [0]
	$15 = (int_64)0
	
.LOOP $label$9:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *(($13 + $10))
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	if ( ($10 <= $12) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$12 = *($9 + [4])
	if ( ($12 == 0) ){ goto $label$5 }
	$10 = *(($9 + [8]))
	$14 = (int_64)0
	$15 = (int_64)0
	
.LOOP $label$10:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *($10)
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$10 }
	
.LABEL $label$7
	if ( $11 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$14 = (int_64)0
	$15 = (int_64)0
	goto $label$3 
	
.LABEL $label$5
	$14 = (int_64)0
	$15 = (int_64)0
	
.LABEL $label$4
	CALL $9(*(($9 + [8])))
	
.LABEL $label$3
	*(($1 + [80])) = *(*($3))
	*($1 + [64]) = [0]
	*(($5 + [40])) = $15
	*(($1 + [112])) = *(*(($3 + [4])))
	*($5 + [32]) = $14
	*($5 + [16]) = $7
	*($5 + [24]) = $6
	$10 = *(($1 + [32]))
	$12 = ( *(($1 + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($12 + [105])
	$14 = (CASTING uint_64)(uint_32 $12)
	$6 = *($1)
	$9 = ($5 + [32])
	
.LOOP $label$11:
	$10 = ($10 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$11 }
	if ( ($10 <= [513]) ){ goto $label$13 }
	$12 = CALL $1($10)
	goto $label$12 
	
.LABEL $label$13
	$12 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$12
	*($5 + [4]) = $12
	*($5) = $12
	*($5 + [8]) = ($12 + $10)
	CALL $65($5, $1)
	CALL db_update_i64(*(($1 + [140])), $2, $12, $10)
	if ( ($10 <= [513]) ){ goto $label$14 }
	CALL $2($12)
	
.LABEL $label$14
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$15 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($5 + [72]) = *(($1 + [24]))
	*($5 + [64]) = *(($1 + [16]))
	if ( (CALL $17(($5 + [16]), ($5 + [64]), [16]) == 0) ){ goto $label$16 }
	$10 = *($1 + [144])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$17 }
	$10 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-7949128877345865728, ($5 + [48]), $6)
	*(($1 + [144])) = $10
	
.LABEL $label$17
	CALL db_idx128_update($10, $2, ($5 + [64]))
	
.LABEL $label$16
	$3 = CALL $27(($5 + [64]), $8)
	$10 = *($5 + [64])
	$4 = ($10 & [1])
	if ( $4 ){ goto $label$23 }
	$12 = uint_32($10 >> [1])
	if ( ($12 == 0) ){ goto $label$21 }
	$13 = (($5 + [64]) | [1])
	$14 = (int_64)0
	$10 = [0]
	$15 = (int_64)0
	
.LOOP $label$24:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *(($13 + $10))
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	if ( ($10 <= $12) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$12 = *($3 + [4])
	if ( ($12 == 0) ){ goto $label$20 }
	$10 = *(($3 + [8]))
	$14 = (int_64)0
	$15 = (int_64)0
	
.LOOP $label$25:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *($10)
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$25 }
	
.LABEL $label$22
	if ( $4 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$14 = (int_64)0
	$15 = (int_64)0
	goto $label$18 
	
.LABEL $label$20
	$14 = (int_64)0
	$15 = (int_64)0
	
.LABEL $label$19
	CALL $9(*(($3 + [8])))
	
.LABEL $label$18
	*($5 + [64]) = $14
	*($5 + [72]) = $15
	if ( (CALL $17($9, ($5 + [64]), [16]) == 0) ){ goto $label$26 }
	$12 = ($1 + [148])
	$10 = *($12)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$27 }
	$10 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-7949128877345865727, ($5 + [48]), $6)
	*($12) = $10
	
.LABEL $label$27
	CALL db_idx128_update($10, $2, ($5 + [64]))
	
.LABEL $label$26
	$global$0 = ($5 + [80])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [136]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10239])
	
.LABEL $label$2
	$6 = *(($1 + [24]))
	$7 = *(($1 + [16]))
	$8 = ($1 + [32])
	$9 = CALL $27(($5 + [32]), $8)
	$10 = *($5 + [32])
	$11 = ($10 & [1])
	if ( $11 ){ goto $label$8 }
	$12 = uint_32($10 >> [1])
	if ( ($12 == 0) ){ goto $label$6 }
	$13 = (($5 + [32]) | [1])
	$14 = (int_64)0
	$10 = [0]
	$15 = (int_64)0
	
.LOOP $label$9:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *(($13 + $10))
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	if ( ($10 <= $12) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$12 = *($9 + [4])
	if ( ($12 == 0) ){ goto $label$5 }
	$10 = *(($9 + [8]))
	$14 = (int_64)0
	$15 = (int_64)0
	
.LOOP $label$10:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *($10)
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$10 }
	
.LABEL $label$7
	if ( $11 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$14 = (int_64)0
	$15 = (int_64)0
	goto $label$3 
	
.LABEL $label$5
	$14 = (int_64)0
	$15 = (int_64)0
	
.LABEL $label$4
	CALL $9(*(($9 + [8])))
	
.LABEL $label$3
	*(($5 + [56])) = $15
	*($5 + [48]) = $14
	*($5 + [32]) = $7
	*($5 + [40]) = $6
	$6 = *($1)
	$10 = *($3 + [4])
	$15 = *(($10 + [8]))
	*((($5 + [64]) + [8])) = $15
	$12 = *($3 + [8])
	$14 = *($10)
	*(($5 + [8])) = $15
	*($5 + [64]) = $14
	*($5) = $14
	CALL $88(($5 + [80]), $1, $5, $12)
	*(($10 = *($3))) = *($5 + [80])
	*(($10 + [8])) = *((($5 + [80]) + [8]))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$11 }
	CALL eosio_assert([0], [10290])
	
.LABEL $label$11
	$9 = ($5 + [48])
	$10 = *(($1 + [32]))
	$12 = ( *(($1 + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($12 + [105])
	$14 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$12:
	$10 = ($10 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$12 }
	if ( ($10 <= [513]) ){ goto $label$14 }
	$12 = CALL $1($10)
	goto $label$13 
	
.LABEL $label$14
	$12 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$13
	*($5 + [20]) = $12
	*($5 + [16]) = $12
	*($5 + [24]) = ($12 + $10)
	CALL $65(($5 + [16]), $1)
	CALL db_update_i64(*(($1 + [140])), $2, $12, $10)
	if ( ($10 <= [513]) ){ goto $label$15 }
	CALL $2($12)
	
.LABEL $label$15
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$16 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($5 + [88]) = *(($1 + [24]))
	*($5 + [80]) = *(($1 + [16]))
	if ( (CALL $17(($5 + [32]), ($5 + [80]), [16]) == 0) ){ goto $label$17 }
	$10 = *($1 + [144])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$18 }
	$10 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-7949128877345865728, ($5 + [64]), $6)
	*(($1 + [144])) = $10
	
.LABEL $label$18
	CALL db_idx128_update($10, $2, ($5 + [80]))
	
.LABEL $label$17
	$3 = CALL $27(($5 + [80]), $8)
	$10 = *($5 + [80])
	$4 = ($10 & [1])
	if ( $4 ){ goto $label$24 }
	$12 = uint_32($10 >> [1])
	if ( ($12 == 0) ){ goto $label$22 }
	$13 = (($5 + [80]) | [1])
	$14 = (int_64)0
	$10 = [0]
	$15 = (int_64)0
	
.LOOP $label$25:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *(($13 + $10))
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	if ( ($10 <= $12) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$12 = *($3 + [4])
	if ( ($12 == 0) ){ goto $label$21 }
	$10 = *(($3 + [8]))
	$14 = (int_64)0
	$15 = (int_64)0
	
.LOOP $label$26:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *($10)
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$26 }
	
.LABEL $label$23
	if ( $4 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$14 = (int_64)0
	$15 = (int_64)0
	goto $label$19 
	
.LABEL $label$21
	$14 = (int_64)0
	$15 = (int_64)0
	
.LABEL $label$20
	CALL $9(*(($3 + [8])))
	
.LABEL $label$19
	*($5 + [80]) = $14
	*($5 + [88]) = $15
	if ( (CALL $17($9, ($5 + [80]), [16]) == 0) ){ goto $label$27 }
	$12 = ($1 + [148])
	$10 = *($12)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$28 }
	$10 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-7949128877345865727, ($5 + [64]), $6)
	*($12) = $10
	
.LABEL $label$28
	CALL db_idx128_update($10, $2, ($5 + [80]))
	
.LABEL $label$27
	$global$0 = ($5 + [96])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = ($4 & [1])
	$4 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($4 >> [1]) : $4 )
	if ( ($5 == 0) ){ goto $label$1 }
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	$6 = ($2 + [1])
	$7 = ($1 + [1])
	$8 = ( *($1 + [8]) ? $7 : $4 )
	$4 = $8
	$10 = ($9 & [1])
	$9 = *($2)
	$9 = ( *($2 + [4]) ? uint_32($9 >> [1]) : $10 )
	if ( ($9 == 0) ){ goto $label$2 }
	$10 = ( *($2 + [8]) ? $6 : $10 )
	$4 = $8
	
.LOOP $label$3:
	if ( (CALL $16($10, *($4), $9) == 0) ){ goto $label$2 }
	$4 = ($4 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - $8)
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$1 }
	
.LOOP $label$4:
	$9 = ($5 & [1])
	$5 = *($1)
	$10 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $9 )
	if ( ($10 <= $4) ){ goto $label$6 }
	$8 = $4
	$12 = ($5 & [1])
	$5 = *($2)
	$11 = ($2 + [4])
	$5 = ( *($11) ? uint_32($5 >> [1]) : $12 )
	if ( ($5 == 0) ){ goto $label$7 }
	$10 = ($13 + $4)
	$13 = ( *(($1 + [8])) ? $7 : $9 )
	$8 = ($13 + $10)
	$9 = ($8 - $10)
	if ( ((int_32)$9 < (int_32)$5) ){ goto $label$6 }
	$14 = ( *(($2 + [8])) ? $6 : $12 )
	$12 = *($14)
	
.LOOP $label$8:
	$9 = (($9 - $5) + [1])
	if ( ($9 == 0) ){ goto $label$6 }
	$9 = CALL $16($10, $12, $9)
	if ( ($9 == 0) ){ goto $label$6 }
	if ( (CALL $17($9, $14, $5) == 0) ){ goto $label$9 }
	$10 = ($9 + [1])
	$9 = ($8 - $10)
	if ( ((int_32)$9 >= (int_32)$5) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$6 }
	$8 = ($9 - $13)
	if ( ((int_32)$8 == (int_32)[-1]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $28($3, $1, $4, ($8 - $4), $1)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$11 }
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	goto $label$10 
	
.LABEL $label$11
	*($3 + [16]) = [0]
	
.LABEL $label$10
	CALL $31(($3 + [16]), [0])
	*((($3 + [16]) + [8])) = *(($3 + [8]))
	*($3 + [16]) = *($3)
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$12 }
	$4 = (uint_32($4 >> [1]) + $8)
	goto $label$5 
	
.LABEL $label$12
	$4 = (*($11) + $8)
	goto $label$5 
	
.LABEL $label$6
	CALL $28($3, $1, $4, [-1], $1)
	if ( (*($3 + [16]) & [1]) ){ goto $label$14 }
	*($3 + [16]) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	
.LABEL $label$13
	CALL $31(($3 + [16]), [0])
	*((($3 + [16]) + [8])) = *(($3 + [8]))
	*($3 + [16]) = *($3)
	$4 = [-1]
	
.LABEL $label$5
	$5 = *($3 + [16])
	if ( (( *($3 + [20]) ? uint_32($5 >> [1]) : ($5 & [1]) ) == 0) ){ goto $label$16 }
	$5 = ($0 + [4])
	$9 = *($5)
	if ( ((int_32)$9 != (int_32)*(($0 + [8]))) ){ goto $label$19 }
	CALL $69($0, ($3 + [16]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	CALL $27($9, ($3 + [16]))
	*($5) = (*($5) + [12])
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$15 
	
.LABEL $label$17
	*($3 + [16]) = [0]
	
.LABEL $label$16
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	
.LABEL $label$15
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $9(*(($3 + [24])))
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-7949128877345865728, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [136]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9933])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $53($7, CALL $fimport$38(*($7), *($7 + [8]), (int_64)-7949128877345865728, $6))
	if ( ((int_32)*($4 + [136]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9933])
	
.LABEL $label$2
	*($4 + [144]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $81(($3 + [8]), $1, $2)
	$4 = *($3 + [12])
	if ( ($4 == 0) ){ goto $label$7 }
	$5 = *(($2 + [8]))
	$6 = *($2)
	$7 = CALL $27(($3 + [16]), ($4 + [32]))
	$2 = *($3 + [16])
	$8 = ($2 & [1])
	if ( $8 ){ goto $label$6 }
	$4 = uint_32($2 >> [1])
	if ( ($4 == 0) ){ goto $label$4 }
	$9 = (($3 + [16]) | [1])
	$10 = (int_64)0
	$2 = [0]
	$11 = (int_64)0
	
.LOOP $label$8:
	$12 = ((int_64)$10 << (int_64)8)
	$10 = ((int_64)$12 + (int_64)$11)
	$11 = *(($9 + $2))
	$11 = ((int_64)((int_64)((int_64)((int_64)$11 << (int_64)8) | (int_64)(uint_64)$10 >> (uint_64)(int_64)56)) + (int_64)$11 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($10 <= $12)))
	$2 = ($2 + [1])
	if ( ($2 <= $4) ){ goto $label$8 }
	goto $label$5 
	
.LABEL $label$7
	*($0 + [4]) = [0]
	*($0) = $1
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$6
	$4 = *($7 + [4])
	if ( ($4 == 0) ){ goto $label$3 }
	$2 = *(($7 + [8]))
	$10 = (int_64)0
	$11 = (int_64)0
	
.LOOP $label$9:
	$12 = ((int_64)$10 << (int_64)8)
	$10 = ((int_64)$12 + (int_64)$11)
	$11 = *($2)
	$11 = ((int_64)((int_64)((int_64)((int_64)$11 << (int_64)8) | (int_64)(uint_64)$10 >> (uint_64)(int_64)56)) + (int_64)$11 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($10 <= $12)))
	$2 = ($2 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$9 }
	
.LABEL $label$5
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$10 = (int_64)0
	$11 = (int_64)0
	goto $label$1 
	
.LABEL $label$3
	$10 = (int_64)0
	$11 = (int_64)0
	
.LABEL $label$2
	CALL $9(*(($7 + [8])))
	
.LABEL $label$1
	if ( ((int_64)(((int_64)((int_64)$6 ^ (int_64)$10) | (int_64)((int_64)$5 ^ (int_64)$11)) == 0) == 0) ){ goto $label$10 }
	*($0) = *($3 + [8])
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$10
	*($0 + [4]) = [0]
	*($0) = $1
	$global$0 = ($3 + [32])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [9753])
	
.LABEL $label$5
	$4 = CALL $1($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $7([160])) + [40]) = [0]
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)500
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = (int_64)0
	*($5 + [128]) = (int_64)500
	*($5 + [136]) = $0
	CALL $77(($3 + [32]), $5)
	*($5 + [140]) = $1
	*($5 + [144 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $56(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [40])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [140]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10090])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-7949128877345865728)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [10036])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [10036])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $53(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $34 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $36($1, $0, [8581])
	CALL $38()
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $7(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $9(*(($1 + [40])))
	
.LABEL $label$11
	CALL $9($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $9($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$4 = ($global$0 - [80])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [136]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10239])
	
.LABEL $label$2
	$6 = *(($1 + [24]))
	$7 = *(($1 + [16]))
	$8 = ($1 + [32])
	$9 = CALL $27(($5 + [16]), $8)
	$10 = *($5 + [16])
	$11 = ($10 & [1])
	if ( $11 ){ goto $label$8 }
	$12 = uint_32($10 >> [1])
	if ( ($12 == 0) ){ goto $label$6 }
	$13 = (($5 + [16]) | [1])
	$14 = (int_64)0
	$10 = [0]
	$15 = (int_64)0
	
.LOOP $label$9:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *(($13 + $10))
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	if ( ($10 <= $12) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$12 = *($9 + [4])
	if ( ($12 == 0) ){ goto $label$5 }
	$10 = *(($9 + [8]))
	$14 = (int_64)0
	$15 = (int_64)0
	
.LOOP $label$10:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *($10)
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$10 }
	
.LABEL $label$7
	if ( $11 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$14 = (int_64)0
	$15 = (int_64)0
	goto $label$3 
	
.LABEL $label$5
	$14 = (int_64)0
	$15 = (int_64)0
	
.LABEL $label$4
	CALL $9(*(($9 + [8])))
	
.LABEL $label$3
	*(($5 + [40])) = $15
	*($1 + [64]) = *(*($3))
	*($5 + [32]) = $14
	*($5 + [16]) = $7
	*($5 + [24]) = $6
	$10 = *(($1 + [32]))
	$12 = ( *(($1 + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($12 + [105])
	$14 = (CASTING uint_64)(uint_32 $12)
	$6 = *($1)
	$9 = ($5 + [32])
	
.LOOP $label$11:
	$10 = ($10 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$11 }
	if ( ($10 <= [513]) ){ goto $label$13 }
	$12 = CALL $1($10)
	goto $label$12 
	
.LABEL $label$13
	$12 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$12
	*($5 + [4]) = $12
	*($5) = $12
	*($5 + [8]) = ($12 + $10)
	CALL $65($5, $1)
	CALL db_update_i64(*(($1 + [140])), $2, $12, $10)
	if ( ($10 <= [513]) ){ goto $label$14 }
	CALL $2($12)
	
.LABEL $label$14
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$15 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($5 + [72]) = *(($1 + [24]))
	*($5 + [64]) = *(($1 + [16]))
	if ( (CALL $17(($5 + [16]), ($5 + [64]), [16]) == 0) ){ goto $label$16 }
	$10 = *($1 + [144])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$17 }
	$10 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-7949128877345865728, ($5 + [48]), $6)
	*(($1 + [144])) = $10
	
.LABEL $label$17
	CALL db_idx128_update($10, $2, ($5 + [64]))
	
.LABEL $label$16
	$4 = CALL $27(($5 + [64]), $8)
	$10 = *($5 + [64])
	$3 = ($10 & [1])
	if ( $3 ){ goto $label$23 }
	$12 = uint_32($10 >> [1])
	if ( ($12 == 0) ){ goto $label$21 }
	$13 = (($5 + [64]) | [1])
	$14 = (int_64)0
	$10 = [0]
	$15 = (int_64)0
	
.LOOP $label$24:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *(($13 + $10))
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	if ( ($10 <= $12) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$12 = *($4 + [4])
	if ( ($12 == 0) ){ goto $label$20 }
	$10 = *(($4 + [8]))
	$14 = (int_64)0
	$15 = (int_64)0
	
.LOOP $label$25:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *($10)
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$25 }
	
.LABEL $label$22
	if ( $3 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$14 = (int_64)0
	$15 = (int_64)0
	goto $label$18 
	
.LABEL $label$20
	$14 = (int_64)0
	$15 = (int_64)0
	
.LABEL $label$19
	CALL $9(*(($4 + [8])))
	
.LABEL $label$18
	*($5 + [64]) = $14
	*($5 + [72]) = $15
	if ( (CALL $17($9, ($5 + [64]), [16]) == 0) ){ goto $label$26 }
	$12 = ($1 + [148])
	$10 = *($12)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$27 }
	$10 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-7949128877345865727, ($5 + [48]), $6)
	*($12) = $10
	
.LABEL $label$27
	CALL db_idx128_update($10, $2, ($5 + [64]))
	
.LABEL $label$26
	$global$0 = ($5 + [80])
}

int_64 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $15([8561])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $7($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8561], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $4())
	*(CALL $4()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $23($4, ($3 + [12]), $2)
	$0 = CALL $4()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $9(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $33($3)
	
.LABEL $label$1
	CALL $34($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $30($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $7($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($4 + [4])
	$6 = *($5)
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [16]) = $6
	$7 = *($0)
	$8 = ($1 + [32])
	CALL $29($8, *($4 + [8]))
	*($1 + [48]) = (int_64)100000000000000
	$5 = CALL $15([10189])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9580])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$9 = *(($5 + [10188]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9625])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)4
	
.LABEL $label$1
	*(($1 + [56])) = $6
	*($1 + [72]) = *(*($4 + [12]))
	$5 = *($4 + [16])
	*(($1 + [80])) = *($5)
	$6 = *($5 + [8])
	*($1 + [104]) = (int_64)6138663591592764928
	*(($1 + [88])) = $6
	$5 = *($4 + [20])
	*(($1 + [112])) = *($5)
	*($1 + [64]) = [0]
	*(($1 + [120])) = *($5 + [8])
	$5 = *(($1 + [32]))
	$9 = ( *(($1 + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($9 + [105])
	$6 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$7:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$7 }
	if ( ($5 <= [513]) ){ goto $label$9 }
	$9 = CALL $1($5)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $9
	
.LABEL $label$8
	*($3 + [4]) = $9
	*($3) = $9
	*($3 + [8]) = ($9 + $5)
	CALL $65($3, $1)
	$6 = *($1)
	*($1 + [140]) = CALL db_store_i64(*($7 + [8]), (int_64)-7949128877345865728, *(*($0 + [8])), $6, $9, $5)
	if ( ($5 <= [513]) ){ goto $label$10 }
	CALL $2($9)
	
.LABEL $label$10
	if ( (uint_64)($6 <= *($7 + [16])) ){ goto $label$11 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$5 = ($7 + [8])
	$6 = *($5)
	$9 = *(($0 + [8]))
	$10 = *($9)
	$11 = *($1)
	*($3 + [24]) = *(($1 + [24]))
	*($3 + [16]) = *(($1 + [16]))
	*($1 + [144]) = CALL db_idx128_store($6, (int_64)-7949128877345865728, $10, $11, ($3 + [16]))
	$12 = *($9)
	$13 = *($5)
	$14 = *($1)
	$0 = CALL $27(($3 + [16]), $8)
	$5 = *($3 + [16])
	$7 = ($5 & [1])
	if ( $7 ){ goto $label$17 }
	$9 = uint_32($5 >> [1])
	if ( ($9 == 0) ){ goto $label$15 }
	$4 = (($3 + [16]) | [1])
	$6 = (int_64)0
	$5 = [0]
	$10 = (int_64)0
	
.LOOP $label$18:
	$11 = ((int_64)$6 << (int_64)8)
	$6 = ((int_64)$11 + (int_64)$10)
	$10 = *(($4 + $5))
	$10 = ((int_64)((int_64)((int_64)((int_64)$10 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56)) + (int_64)$10 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($6 <= $11)))
	$5 = ($5 + [1])
	if ( ($5 <= $9) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$9 = *($0 + [4])
	if ( ($9 == 0) ){ goto $label$14 }
	$5 = *(($0 + [8]))
	$6 = (int_64)0
	$10 = (int_64)0
	
.LOOP $label$19:
	$11 = ((int_64)$6 << (int_64)8)
	$6 = ((int_64)$11 + (int_64)$10)
	$10 = *($5)
	$10 = ((int_64)((int_64)((int_64)((int_64)$10 << (int_64)8) | (int_64)(uint_64)$6 >> (uint_64)(int_64)56)) + (int_64)$10 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($6 <= $11)))
	$5 = ($5 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$19 }
	
.LABEL $label$16
	if ( $7 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$6 = (int_64)0
	$10 = (int_64)0
	goto $label$12 
	
.LABEL $label$14
	$6 = (int_64)0
	$10 = (int_64)0
	
.LABEL $label$13
	CALL $9(*(($0 + [8])))
	
.LABEL $label$12
	*($3 + [16]) = $6
	*($3 + [24]) = $10
	*(($1 + [148])) = CALL db_idx128_store($13, (int_64)-7949128877345865727, $12, $14, ($3 + [16]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $21 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $19($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $20 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_64 .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $20($3, (int_64)0)
	$4 = CALL $22($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

int_64 .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $21($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $4()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $21($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [8305]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $20($0, (int_64)0)
	*(CALL $4()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $21($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $21($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $21($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $21($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [8305])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [8305]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8305]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $21($0)
	$5 = *(($6 + [8305]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $21($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [8305]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8245]))
	$8 = (int_64)0
	$5 = *(($6 + [8305]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [8305]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $21($0)
	$5 = *(($6 + [8305]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $21($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [8305]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $20($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [8305]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [8305]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $21($0) + [8305]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $4()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $4()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $4()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_64 .FUNC $25 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC $24 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $7($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $26 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL $7(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $40($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $27(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $9(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL $9($3)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $76(CALL $75($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9747])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9747])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9747])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [16])
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [9747])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [16])
	*($3) = (*($3) + [16])
	$4 = ($1 + [48])
	$3 = *($0 + [4])
	$0 = CALL $82($0, ($1 + [32]))
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9747])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2) = *(($1 + [56]))
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9747])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, $2, [8])
	*($3) = (*($3) + [8])
	*($2 + [15]) = *($1 + [64])
	$3 = *($3)
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [9747])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [15]), [1])
	*(($3 = ($0 + [4]))) = (*($3) + [1])
	$1 = CALL $83(CALL $83($0, ($1 + [72])), ($1 + [104]))
	$global$0 = ($2 + [16])
	return $1
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ((int_32)*($1 + [136]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [9785])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [9830])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [9880])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$8 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL $9(*(($6 + [40])))
	
.LABEL $label$13
	CALL $9($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$8 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$16 }
	CALL $9(*(($9 + [40])))
	
.LABEL $label$16
	CALL $9($9)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [140])))
	$9 = *($1 + [144])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-7949128877345865728, $2, *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx128_remove($9)
	
.LABEL $label$17
	$9 = *(($1 + [148]))
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$20 }
	$9 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-7949128877345865727, $2, *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx128_remove($9)
	
.LABEL $label$19
	$global$0 = ($2 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9747])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9747])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9747])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9747])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $82(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $7($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $40($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $66($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $68(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $9($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL $7([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $66($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $67(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $63 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [80])
	$global$0 = $1
	*($1 + [56]) = [8663]
	*($1 + [60]) = CALL $15([8663])
	*($1 + [8]) = *($1 + [56])
	CALL require_auth(*(CALL $43(($1 + [64]), ($1 + [8]))))
	*(($1 + [48])) = [0]
	*($1 + [32]) = (int_64)-1
	*($1 + [52]) = [0]
	$2 = *($0)
	*($1 + [16]) = $2
	*($1 + [24]) = $2
	*($1 + [40]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)-7949128877345865728, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $53(($1 + [16]), $0)
	
.LOOP $label$2:
	$0 = [0]
	$4 = CALL db_next_i64(*($3 + [140]), ($1 + [72]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $53(($1 + [16]), $4)
	
.LABEL $label$3
	CALL $64(($1 + [16]), $3)
	$3 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ($1 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $9(*(($3 + [40])))
	
.LABEL $label$9
	CALL $9($3)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($1 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL $9($0)
	
.LABEL $label$4
	$global$0 = ($1 + [80])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [136]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [10193])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [10239])
	
.LABEL $label$2
	$6 = *(($1 + [24]))
	$7 = *(($1 + [16]))
	$8 = ($1 + [32])
	$9 = CALL $27(($5 + [32]), $8)
	$10 = *($5 + [32])
	$11 = ($10 & [1])
	if ( $11 ){ goto $label$8 }
	$12 = uint_32($10 >> [1])
	if ( ($12 == 0) ){ goto $label$6 }
	$13 = (($5 + [32]) | [1])
	$14 = (int_64)0
	$10 = [0]
	$15 = (int_64)0
	
.LOOP $label$9:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *(($13 + $10))
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	if ( ($10 <= $12) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$12 = *($9 + [4])
	if ( ($12 == 0) ){ goto $label$5 }
	$10 = *(($9 + [8]))
	$14 = (int_64)0
	$15 = (int_64)0
	
.LOOP $label$10:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *($10)
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$10 }
	
.LABEL $label$7
	if ( $11 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$14 = (int_64)0
	$15 = (int_64)0
	goto $label$3 
	
.LABEL $label$5
	$14 = (int_64)0
	$15 = (int_64)0
	
.LABEL $label$4
	CALL $9(*(($9 + [8])))
	
.LABEL $label$3
	*(($5 + [56])) = $15
	*($5 + [48]) = $14
	*($5 + [32]) = $7
	*($5 + [40]) = $6
	$6 = *($1)
	$10 = *($3 + [4])
	$15 = *(($10 + [8]))
	*((($5 + [64]) + [8])) = $15
	$12 = *($3 + [8])
	$14 = *($10)
	*(($5 + [8])) = $15
	*($5 + [64]) = $14
	*($5) = $14
	CALL $88(($5 + [80]), $1, $5, $12)
	*(($10 = *($3))) = *($5 + [80])
	*(($10 + [8])) = *((($5 + [80]) + [8]))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$11 }
	CALL eosio_assert([0], [10290])
	
.LABEL $label$11
	$9 = ($5 + [48])
	$10 = *(($1 + [32]))
	$12 = ( *(($1 + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($12 + [105])
	$14 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$12:
	$10 = ($10 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$12 }
	if ( ($10 <= [513]) ){ goto $label$14 }
	$12 = CALL $1($10)
	goto $label$13 
	
.LABEL $label$14
	$12 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $12
	
.LABEL $label$13
	*($5 + [20]) = $12
	*($5 + [16]) = $12
	*($5 + [24]) = ($12 + $10)
	CALL $65(($5 + [16]), $1)
	CALL db_update_i64(*(($1 + [140])), $2, $12, $10)
	if ( ($10 <= [513]) ){ goto $label$15 }
	CALL $2($12)
	
.LABEL $label$15
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$16 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($5 + [88]) = *(($1 + [24]))
	*($5 + [80]) = *(($1 + [16]))
	if ( (CALL $17(($5 + [32]), ($5 + [80]), [16]) == 0) ){ goto $label$17 }
	$10 = *($1 + [144])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$18 }
	$10 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-7949128877345865728, ($5 + [64]), $6)
	*(($1 + [144])) = $10
	
.LABEL $label$18
	CALL db_idx128_update($10, $2, ($5 + [80]))
	
.LABEL $label$17
	$3 = CALL $27(($5 + [80]), $8)
	$10 = *($5 + [80])
	$4 = ($10 & [1])
	if ( $4 ){ goto $label$24 }
	$12 = uint_32($10 >> [1])
	if ( ($12 == 0) ){ goto $label$22 }
	$13 = (($5 + [80]) | [1])
	$14 = (int_64)0
	$10 = [0]
	$15 = (int_64)0
	
.LOOP $label$25:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *(($13 + $10))
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	if ( ($10 <= $12) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$12 = *($3 + [4])
	if ( ($12 == 0) ){ goto $label$21 }
	$10 = *(($3 + [8]))
	$14 = (int_64)0
	$15 = (int_64)0
	
.LOOP $label$26:
	$16 = ((int_64)$14 << (int_64)8)
	$14 = ((int_64)$16 + (int_64)$15)
	$15 = *($10)
	$15 = ((int_64)((int_64)((int_64)((int_64)$15 << (int_64)8) | (int_64)(uint_64)$14 >> (uint_64)(int_64)56)) + (int_64)$15 >> (int_64)63)) + (int_64)(CASTING uint_64)(uint_32 (uint_64)($14 <= $16)))
	$10 = ($10 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$26 }
	
.LABEL $label$23
	if ( $4 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$14 = (int_64)0
	$15 = (int_64)0
	goto $label$19 
	
.LABEL $label$21
	$14 = (int_64)0
	$15 = (int_64)0
	
.LABEL $label$20
	CALL $9(*(($3 + [8])))
	
.LABEL $label$19
	*($5 + [80]) = $14
	*($5 + [88]) = $15
	if ( (CALL $17($9, ($5 + [80]), [16]) == 0) ){ goto $label$27 }
	$12 = ($1 + [148])
	$10 = *($12)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$28 }
	$10 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-7949128877345865727, ($5 + [64]), $6)
	*($12) = $10
	
.LABEL $label$28
	CALL db_idx128_update($10, $2, ($5 + [80]))
	
.LABEL $label$27
	$global$0 = ($5 + [96])
}

void .FUNC $89 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	$4 = ($2 + $4)
	*(($3 + [8])) = $4
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = $4
	*($3) = *($3 + [16])
	CALL $63(CALL $41(($3 + [32]), $0, $1, $3))
	$global$0 = ($3 + [64])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = ($1 + [104])
	$6 = ($1 + [72])
	$7 = *(($1 + [120]))
	$8 = *(($1 + [88]))
	$9 = *($2 + [8])
	if ( ((int_64)$9 != (int_64)*(($1 + [56]))) ){ goto $label$6 }
	$9 = *($3)
	if ( ((int_64)$9 != (int_64)$8) ){ goto $label$5 }
	$5 = ($2 + [8])
	$9 = *($5)
	*((($4 + [80]) + [8])) = $9
	$8 = *($2)
	*((($4 + [16]) + [8])) = $9
	*($4 + [80]) = $8
	*($4 + [16]) = $8
	CALL $87(($4 + [96]), $1, $6, ($4 + [16]))
	*($5) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$9 != (int_64)$8) ){ goto $label$4 }
	CALL $86(($4 + [96]), $1, $6, $2)
	*(($2 + [8])) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$9 != (int_64)$7) ){ goto $label$3 }
	$6 = ($2 + [8])
	$9 = *($6)
	*((($4 + [64]) + [8])) = $9
	$8 = *($2)
	*((($4 + [32]) + [8])) = $9
	*($4 + [64]) = $8
	*($4 + [32]) = $8
	CALL $87(($4 + [96]), $1, $5, ($4 + [32]))
	*($6) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_64)$9 != (int_64)$7) ){ goto $label$2 }
	CALL $86(($4 + [96]), $1, $5, $2)
	*(($2 + [8])) = *((($4 + [96]) + [8]))
	*($2) = *($4 + [96])
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8703])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8676])
	
.LABEL $label$1
	$6 = ($2 + [8])
	if ( ((int_64)*($3) != (int_64)*($6)) ){ goto $label$7 }
	*($0) = *($2)
	*(($0 + [8])) = *($6)
	$global$0 = ($4 + [112])
	return 
	
.LABEL $label$7
	$9 = *($6)
	*((($4 + [48]) + [8])) = $9
	$8 = *($2)
	*(($4 + [8])) = $9
	*($4 + [48]) = $8
	*($4) = $8
	CALL $88($0, $1, $4, $3)
	$global$0 = ($4 + [112])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	float_64 $6
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [56]))) ){ goto $label$1 }
	CALL eosio_assert([0], [8271])
	
.LABEL $label$1
	$4 = *($2 + [8])
	$5 = *($3)
	$6 = CALL $85(((float_64)((float_64)(CASTING float_64)(int_64 $5) / (float_64)(CASTING float_64)(int_64 (int_64))(*($1 + [48]) - $5))) + (float_64)(float_64)1), ((float_64)(float_64)1e3 / (float_64)(CASTING float_64)(uint_64 *($2 + [24]))))
	*($1 + [48]) = (int_64))(*($1 + [48]) - $5)
	$6 = ((float_64)((float_64)$6 + (float_64)(float_64)-1) * (float_64)(CASTING float_64)(int_64 $4))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$5 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$5 = (Rounds 0)($6)
	
.LABEL $label$2
	*($0) = $5
	*($2 + [8]) = (int_64))(*($2 + [8]) - $5)
	$4 = *(($2 + [16]))
	*($0 + [8]) = $4
	if ( (uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$4 }
	CALL eosio_assert([0], [8726])
	
.LABEL $label$4
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$5 = $4
	$1 = $2
	$2 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$5 = $4
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$1 = ((int_32)$2 < (int_32)[6])
	$0 = ($2 + [1])
	$2 = $0
	if ( $1 ){ goto $label$9 }
	$2 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	
.LABEL $label$7
	return 
	
.LABEL $label$5
	CALL eosio_assert([0], [8787])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	float_64 $6
	$4 = *($1 + [48])
	$5 = *($3)
	$6 = !(float_64)((float_64)(float_64))((float_64)1 - CALL $85(((float_64)((float_64)(CASTING float_64)(int_64 $5) / (float_64)(CASTING float_64)(int_64 ((int_64)$5 + (int_64)*($2 + [8])))) + (float_64)(float_64)1), ((float_64)(CASTING float_64)(uint_64 *($2 + [24])) / (float_64)(float_64)1e3))) * (float_64)(CASTING float_64)(int_64 $4)
	if ( ((float_64)(float_64)|$6)| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$4 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$4 = (Rounds 0)($6)
	
.LABEL $label$1
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)$4)
	*($2 + [8]) = ((int_64)*($2 + [8]) + (int_64)*($3))
	*($0) = $4
	$5 = *(($1 + [56]))
	*($0 + [8]) = $5
	if ( (uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$3 }
	CALL eosio_assert([0], [8726])
	
.LABEL $label$3
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$4 = $5
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$4 = $5
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$6
	return 
	
.LABEL $label$4
	CALL eosio_assert([0], [8787])
}

int_64 .FUNC $85 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $84($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $25($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [10368])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [10352]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [10384]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $24($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $84 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9747])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9747])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = *(($1 + [16]))
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9747])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$1 = ($1 + [24])
	if ( ((int_32)(*(($0 + [8])) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9747])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, $1, [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9747])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [9747])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx128_lowerbound(*($2), *($2 + [8]), (int_64)-7949128877345865727, $3, ($3 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [24])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	if ( ((int_32)*($4 + [136]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9933])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $53($7, CALL $fimport$38(*($7), *($7 + [8]), (int_64)-7949128877345865728, $6))
	if ( ((int_32)*($4 + [136]) == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert([0], [9933])
	
.LABEL $label$2
	*(($4 + [148])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [32])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [9781])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $66($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [9776])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

int_32 .FUNC $72 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $2($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9776])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9776])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9776])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $78(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [28]) = [0]
	*($3 + [24]) = [1]
	*($3) = *($3 + [24])
	CALL $71($0, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)4923678490122780672) ){ goto $label$1 }
	*($3 + [20]) = [0]
	*($3 + [16]) = [2]
	*($3 + [8]) = *($3 + [16])
	CALL $72($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $39([0])
	$global$0 = ($3 + [32])
}

int_32 .FUNC $71 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $73(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $74(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $9(*(($4 + [112])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [9747])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [9747])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [16])
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[15]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [16])
	*($3) = (*($3) + [16])
	$4 = ($1 + [48])
	$3 = *($0 + [4])
	$0 = CALL $78($0, ($1 + [32]))
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9776])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($1 + [56])) = *($2)
	*($3) = (*($3) + [8])
	$3 = *($3)
	if ( ((int_32)*($5) != (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [15]), $3, [1])
	*(($3 = ($0 + [4]))) = (*($3) + [1])
	*(($1 + [64])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$1 = CALL $79(CALL $79($0, ($1 + [72])), ($1 + [104]))
	$global$0 = ($2 + [16])
	return $1
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $27(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $27(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $9(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $9(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $39 (int_32 $0)
{
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $15($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL $7($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $30($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $37 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $80($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $7($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $31($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $31($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $26($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $9($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [9776])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [9776])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [9776])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [16])) = *($2 + [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$1 = ($1 + [24])
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [9776])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($1, $4, [8])
	*($3) = (*($3) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $17(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $33 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $36($1, $0, [8630])
	CALL $37()
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $7($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $9($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $7(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $9($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}