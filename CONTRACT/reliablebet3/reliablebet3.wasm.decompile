(data (i32.const 8192) "eosio.token\00")
(data (i32.const 8204) "transfer\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8299) ": \00")
(data (i32.const 8302) ";\00")
(data (i32.const 8304) "-\00")
(data (i32.const 8306) ",\00")
(data (i32.const 8308) "401\00")
(data (i32.const 8312) "t \00\00\8c \00\00\90 \00\00\94 \00\00\98 \00\00")
(data (i32.const 8332) "402\00")
(data (i32.const 8336) "403\00")
(data (i32.const 8340) "404\00")
(data (i32.const 8344) "405\00")
(data (i32.const 17100) "410\00")
(data (i32.const 17104) "411\00")
(data (i32.const 17108) "412\00")
(data (i32.const 17112) "413\00")
(data (i32.const 17116) "414\00")
(data (i32.const 17120) "eos111222345\00")
(data (i32.const 17133) "Invalid token transfer...\00")
(data (i32.const 17159) "EOS\00")
(data (i32.const 17163) "only EOS token is allowed\00")
(data (i32.const 17189) "must buy a positive amount\00")
(data (i32.const 17216) "action\00")
(data (i32.const 17223) "bet\00")
(data (i32.const 17227) "id\00")
(data (i32.const 17230) "option\00")
(data (i32.const 17237) "seed\00")
(data (i32.const 17242) "sign\00")
(data (i32.const 17247) "share\00")
(data (i32.const 17253) "string is too long to be a valid name\00")
(data (i32.const 17291) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17358) "character is not in allowed character set for names\00")
(data (i32.const 17410) "active")
(data (i32.const 17416) "add")
(data (i32.const 17419) "write\00")
(data (i32.const 17425) "updatemoney")
(data (i32.const 17436) "string is too long to be a valid symbol_code\00")
(data (i32.const 17481) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17534) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17583) "invalid symbol name\00")
(data (i32.const 17603) "eosio.token")
(data (i32.const 17614) "transfer")
(data (i32.const 17622) "read\00")
(data (i32.const 17627) "get\00")
(data (i32.const 17631) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17682) "error reading iterator\00")
(data (i32.const 17705) "cannot create objects in table of another contract\00")
(data (i32.const 17756) "next primary key in table is at autoincrement limit\00")
(data (i32.const 17808) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 17862) "cannot decrement iterator at beginning of table\00")
(data (i32.const 17910) "cannot increment end iterator\00")
(data (i32.const 17940) "cannot pass end iterator to modify\00")
(data (i32.const 17975) "object passed to modify is not in multi_index\00")
(data (i32.const 18021) "cannot modify objects in table of another contract\00")
(data (i32.const 18072) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18131) "cannot pass end iterator to erase\00")
(data (i32.const 18165) "object passed to erase is not in multi_index\00")
(data (i32.const 18210) "cannot erase objects in table of another contract\00")
(data (i32.const 18260) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18313) "reliablebetx\00")
(data (i32.const 18326) "reliablebet2\00")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$6 (result i64)))
(import "env" "send_inline" (func $fimport$7 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$12 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$14 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$16 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$17 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$18 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$20 (param i32 i64 i32)))
(import "env" "db_remove_i64" (func $fimport$21 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $57))
(export "_Znwj" (func $55))
(export "_Znaj" (func $56))
(export "_ZdaPv" (func $58))
(export "_ZnwjSt11align_val_t" (func $59))
(export "_ZnajSt11align_val_t" (func $60))
(export "_ZdlPvSt11align_val_t" (func $61))
(export "_ZdaPvSt11align_val_t" (func $62))
(table $0 14 14 anyfunc)
(elem (i32.const 1) $2 $5 $7 $9 $10 $12 $13 $15 $39 $40 $41 $42 $43)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18339))
(global $global$2 i32 (i32.const 18339))


void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [4 align=4]) = (int_64)0
	$3 = ($0 + [4])
	*($0) = $3
	$4 = CALL $69($1, [45], [0])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$1 }
	$5 = ($1 + [1])
	$6 = ($1 + [4])
	$7 = ($1 + [8])
	$8 = [0]
	
.LOOP $label$2:
	$9 = *($1)
	$13 = *($6)
	$11 = *($7)
	$10 = CALL $77([8304])
	$9 = ($9 & [1])
	$13 = ( $13 ? uint_32($9 >> [1]) : $9 )
	if ( ((uint_32)$13 <= (uint_32)$4) ){ goto $label$1 }
	$11 = ( $11 ? $5 : $9 )
	$9 = ($11 + $4)
	if ( ($10 == 0) ){ goto $label$3 }
	$13 = ($13 - $4)
	
.LOOP $label$4:
	if ( (CALL $75([8304], *($9), $10) == 0) ){ goto $label$3 }
	$9 = ($9 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$13 = ($9 - $11)
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$1 }
	$11 = *($1)
	$12 = *($6)
	$14 = *($7)
	$9 = CALL $77([8306])
	$10 = [-1]
	$11 = ($11 & [1])
	$12 = ( $12 ? uint_32($11 >> [1]) : $11 )
	if ( ($12 <= $13) ){ goto $label$5 }
	$10 = $13
	if ( ($9 == 0) ){ goto $label$5 }
	$11 = ($14 + $13)
	$14 = ( $14 ? $5 : $11 )
	$12 = ($14 + $12)
	$10 = ($12 - $11)
	if ( ((int_32)$10 < (int_32)$9) ){ goto $label$7 }
	
.LOOP $label$8:
	$10 = (($10 - $9) + [1])
	if ( ($10 == 0) ){ goto $label$7 }
	$10 = CALL $75($11, [44], $10)
	if ( ($10 == 0) ){ goto $label$7 }
	if ( (CALL $76($10, [8306], $9) == 0) ){ goto $label$6 }
	$11 = ($10 + [1])
	$10 = ($12 - $11)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$8 }
	
.LABEL $label$7
	$10 = $12
	
.LABEL $label$6
	$10 = ( [-1] ? ($10 - $14) : ((int_32)$10 == (int_32)$12) )
	
.LABEL $label$5
	$9 = CALL $65(($2 + [16]), $1, $8, ($4 - $8), $1)
	CALL $65($2, $1, $13, ($10 - $13), $1)
	$13 = CALL $34($0, ($2 + [28]), $9)
	if ( *($13) ){ goto $label$13 }
	*(($9 = CALL _Znwj([40]))) = (int_64)0
	$4 = (($2 + [16]) + [8])
	*(($9 + [24])) = *($4)
	*($9 + [16 align=4]) = *($2 + [16])
	*($9 + [28 align=4]) = *($2)
	$8 = ($2 + [8])
	*(($9 + [36])) = *($8)
	*($9 + [8]) = *($2 + [28])
	*($2) = (int_64)0
	*($13) = $9
	*($4) = [0]
	*($8) = [0]
	*($2 + [16]) = (int_64)0
	$4 = *(*($0))
	if ( ($4 == 0) ){ goto $label$14 }
	*($0) = $4
	$9 = *($13)
	
.LABEL $label$14
	CALL $35(*($3), $9)
	*(($9 = ($0 + [8]))) = (*($9) + [1])
	if ( ((*($2) & [1]) == 0) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((*($2) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($2 + [8])))
	if ( (*($2 + [16]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*((($2 + [16]) + [8])))
	
.LABEL $label$9
	$8 = ( [-1] ? ($10 + [1]) : ((int_32)$10 == (int_32)[-1]) )
	$4 = CALL $69($1, [45], $8)
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [17627])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $24($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17622])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17419])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17419])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $43 (int_32 $0)
{
	if ( ((*([0] + [8396]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8404]))
	
.LABEL $label$1
}

void .FUNC $42 (int_32 $0)
{
	if ( ((*([0] + [8384]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8392]))
	
.LABEL $label$1
}

void .FUNC $41 (int_32 $0)
{
	if ( ((*([0] + [8372]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8380]))
	
.LABEL $label$1
}

void .FUNC $40 (int_32 $0)
{
	if ( ((*([0] + [8360]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8368]))
	
.LABEL $label$1
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17419])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17419])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17419])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17419])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $53(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $71($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [56])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [40])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [48])), (int_64)-3897455725261094912, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $27($9, $10)
	*($3 + [68]) = [0]
	*($3 + [64]) = $9
	$8 = *(*(CALL $50(($3 + [64])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [56])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [17756])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	$6 = *($5 + [12])
	$7 = *($6)
	if ( ($7 & [1]) ){ goto $label$4 }
	$7 = uint_32($7 >> [1])
	$6 = ($6 + [1])
	goto $label$3 
	
.LABEL $label$4
	$7 = *($6 + [4])
	$6 = *($6 + [8])
	
.LABEL $label$3
	*($3 + [36]) = $7
	*($3 + [32]) = $6
	*($3 + [24]) = *($3 + [32])
	if ( ((int_64)*(CALL $4(($3 + [64]), ($3 + [24]))) == (int_64)*(*(($5 + [8])))) ){ goto $label$5 }
	$6 = *(($5 + [12]))
	$7 = *($6)
	if ( ($7 & [1]) ){ goto $label$7 }
	$7 = uint_32($7 >> [1])
	$6 = ($6 + [1])
	goto $label$6 
	
.LABEL $label$7
	$7 = *($6 + [4])
	$6 = *($6 + [8])
	
.LABEL $label$6
	*($3 + [52]) = $7
	*($3 + [48]) = $6
	*($3 + [16]) = *($3 + [48])
	if ( (int_64)(*(CALL $4(($3 + [56]), ($3 + [16]))) == 0) ){ goto $label$5 }
	$6 = *(($5 + [12]))
	$7 = *($6)
	if ( ($7 & [1]) ){ goto $label$9 }
	$7 = uint_32($7 >> [1])
	$6 = ($6 + [1])
	goto $label$8 
	
.LABEL $label$9
	$7 = *($6 + [4])
	$6 = *($6 + [8])
	
.LABEL $label$8
	*($3 + [60]) = $7
	*($3 + [56]) = $6
	*($3 + [8]) = *($3 + [56])
	*($1 + [24]) = *(CALL $4(($3 + [64]), ($3 + [8])))
	
.LABEL $label$5
	$6 = ($1 + [8])
	*($1 + [32]) = *(*($5 + [20]))
	*($1 + [40]) = *(*($5 + [16]))
	*($1 + [80]) = *(*($5 + [28]))
	*($1 + [44]) = *(*($5 + [24]))
	$7 = ($1 + [96])
	CALL $66($7, *($5 + [32]))
	*($1 + [72]) = ((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000)
	$5 = *($1 + [96])
	$9 = ( *(($1 + [100])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($9 + [92])
	$8 = (CASTING uint_64)(uint_32 $9)
	$9 = ($1 + [72])
	$10 = ($1 + [80])
	$11 = ($1 + [44])
	$12 = ($1 + [32])
	$13 = ($1 + [40])
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$10 }
	if ( ($5 <= [513]) ){ goto $label$12 }
	$2 = CALL $82($5)
	goto $label$11 
	
.LABEL $label$12
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$11
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $5)
	*($3 + [56]) = ($3 + [32])
	*($3 + [68]) = $6
	*($3 + [64]) = $1
	*($3 + [72]) = ($1 + [16])
	*($3 + [76]) = ($1 + [24])
	*($3 + [80]) = $12
	*($3 + [84]) = $13
	*($3 + [88]) = $11
	*($3 + [92]) = ($1 + [48])
	*($3 + [96]) = ($1 + [52])
	*($3 + [100]) = ($1 + [56])
	*($3 + [104]) = ($1 + [64])
	*($3 + [108]) = $9
	*($3 + [112]) = $10
	*($3 + [116]) = ($1 + [88])
	*($3 + [120]) = $7
	CALL $51(($3 + [64]), ($3 + [56]))
	$8 = *($1)
	*($1 + [112]) = CALL db_store_i64(*($4 + [8]), (int_64)-3897455725261094912, *(*($0 + [8])), $8, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$13 }
	CALL $86($2)
	
.LABEL $label$13
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$14 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	$5 = ($4 + [8])
	$8 = *($5)
	$2 = *(($0 + [8]))
	$14 = *($2)
	$15 = *($1)
	*($3 + [64]) = *(($1 + [72]))
	*($1 + [116]) = CALL db_idx64_store($8, (int_64)-3897455725261094912, $14, $15, ($3 + [64]))
	$8 = *($2)
	$14 = *($5)
	$15 = *($1)
	*($3 + [64]) = *(($1 + [8]))
	*(($1 + [120])) = CALL db_idx64_store($14, (int_64)-3897455725261094911, $8, $15, ($3 + [64]))
	$global$0 = ($3 + [128])
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $86($2)
	$5 = *(($4 + [112]))
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = *(($4 + [112]))
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *(($4 + [72]))
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = ($4 + [116])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [112]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [76])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($7 + [104])))
	
.LABEL $label$19
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($4 + [72]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $5
	
.LABEL $label$15
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$1 = ($global$0 - [64])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [80])
	$3 = ($0 + [88])
	$4 = CALL db_lowerbound_i64(*($0 + [80]), *($3), (int_64)-3904258391152787456, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $19($2, $4)
	
.LOOP $label$2:
	CALL eosio_assert([1], [18131])
	CALL eosio_assert([1], [17910])
	$4 = [0]
	$6 = CALL db_next_i64(*($5 + [28]), ($1 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $19($2, $6)
	
.LABEL $label$3
	CALL $29($2, $5)
	$5 = $4
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	$7 = *($0)
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$8()), [17705])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = [0]
	*($4) = (int_64)1
	CALL eosio_assert([1], [17419])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17419])
	$5 = (($1 + [16]) | [8])
	CALL memcpy($5, ($4 + [8]), [4])
	CALL eosio_assert([1], [17419])
	$6 = (($1 + [16]) | [12])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*($3), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [20])
	*($4 + [28]) = $9
	$3 = ($0 + [96])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$4 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [108])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [112]))) ){ goto $label$7 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $30(($0 + [104]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)CALL $fimport$8()), [17705])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = [100]
	*($4) = (int_64)2
	CALL eosio_assert([1], [17419])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17419])
	CALL memcpy($5, ($4 + [8]), [4])
	CALL eosio_assert([1], [17419])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*(($0 + [88])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [20])
	*($4 + [28]) = $9
	$3 = ($0 + [96])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$8 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [108])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [112]))) ){ goto $label$11 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	$3 = [0]
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $30(($0 + [104]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	$3 = [0]
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)CALL $fimport$8()), [17705])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [8]) = $3
	*($4) = (int_64)3
	*($1 + [48]) = [18313]
	*($1 + [52]) = CALL $77([18313])
	*($1 + [8]) = *($1 + [48])
	*($4 + [16]) = *(CALL $4(($1 + [56]), ($1 + [8])))
	CALL eosio_assert([1], [17419])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17419])
	CALL memcpy($5, ($4 + [8]), [4])
	CALL eosio_assert([1], [17419])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*(($0 + [88])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [20])
	*($4 + [28]) = $9
	$3 = ($0 + [96])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$12 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [108])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [112]))) ){ goto $label$15 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	$3 = [0]
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $30(($0 + [104]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	$3 = [0]
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)CALL $fimport$8()), [17705])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [8]) = $3
	*($4) = (int_64)4
	*($1 + [48]) = [18326]
	*($1 + [52]) = CALL $77([18326])
	*($1) = *($1 + [48])
	*($4 + [16]) = *(CALL $4(($1 + [56]), $1))
	CALL eosio_assert([1], [17419])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17419])
	CALL memcpy($5, ($4 + [8]), [4])
	CALL eosio_assert([1], [17419])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*(($0 + [88])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [20])
	*($4 + [28]) = $9
	$3 = ($0 + [96])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$16 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [108])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [112]))) ){ goto $label$19 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL $30(($0 + [104]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)CALL $fimport$8()), [17705])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = [10000]
	*($4) = (int_64)5
	CALL eosio_assert([1], [17419])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17419])
	CALL memcpy($5, ($4 + [8]), [4])
	CALL eosio_assert([1], [17419])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*(($0 + [88])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [20])
	*($4 + [28]) = $9
	$3 = ($0 + [96])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$20 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [108])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [112]))) ){ goto $label$23 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL $30(($0 + [104]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv($4)
	
.LABEL $label$21
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)CALL $fimport$8()), [17705])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = [1500000]
	*($4) = (int_64)7
	CALL eosio_assert([1], [17419])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17419])
	CALL memcpy($5, ($4 + [8]), [4])
	CALL eosio_assert([1], [17419])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$9 = CALL db_store_i64(*(($0 + [88])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [20])
	*($4 + [28]) = $9
	$3 = ($0 + [96])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$24 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $9
	$10 = ($0 + [108])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [112]))) ){ goto $label$27 }
	*($3 + [8]) = $8
	*($3 + [16]) = $9
	*($1 + [56]) = [0]
	*($3) = $4
	*($10) = ($3 + [24])
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $4 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	CALL $30(($0 + [104]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$4 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	CALL _ZdlPv($4)
	
.LABEL $label$25
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)CALL $fimport$8()), [17705])
	*(($4 = CALL _Znwj([40])) + [24]) = $2
	*($4 + [16]) = (int_64)0
	*($4 + [8]) = [300000]
	*($4) = (int_64)6
	CALL eosio_assert([1], [17419])
	CALL memcpy(($1 + [16]), $4, [8])
	CALL eosio_assert([1], [17419])
	CALL memcpy($5, ($4 + [8]), [4])
	CALL eosio_assert([1], [17419])
	CALL memcpy($6, ($4 + [16]), [8])
	$8 = *($4)
	$2 = CALL db_store_i64(*(($0 + [88])), (int_64)-3904258391152787456, $7, $8, ($1 + [16]), [20])
	*($4 + [28]) = $2
	$5 = ($0 + [96])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$28 }
	*($5) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$28
	*($1 + [56]) = $4
	$8 = *($4)
	*($1 + [16]) = $8
	*($1 + [48]) = $2
	$6 = ($0 + [108])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [112]))) ){ goto $label$31 }
	*($5 + [8]) = $8
	*($5 + [16]) = $2
	*($1 + [56]) = [0]
	*($5) = $4
	*($6) = ($5 + [24])
	$0 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( $0 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	CALL $30(($0 + [104]), ($1 + [56]), ($1 + [16]), ($1 + [48]))
	$0 = *($1 + [56])
	*($1 + [56]) = [0]
	if ( ($0 == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL _ZdlPv($0)
	
.LABEL $label$29
	$global$0 = ($1 + [64])
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($4 = $3) + [200]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [152]) + [24])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [140]) = $2
	*($4 + [136]) = $2
	*($4 + [144]) = ($2 + $5)
	*($4 + [240]) = ($4 + [136])
	*($4 + [16]) = ($4 + [152])
	CALL $31(($4 + [16]), ($4 + [240]))
	*(($3 = ($4 + [8]))) = *($4 + [144])
	*($4) = *($4 + [136])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($6 = (($4 + [224]) + [8]))) = $3
	$7 = *($4)
	*($4 + [224]) = $7
	*($4 + [208]) = $7
	$3 = *($6)
	*((($4 + [240]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [224])
	*($4 + [32]) = $1
	*($4 + [240]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($3 = ($4 + [120]))) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [56]) = $0
	*($4 + [48]) = $0
	*($4 + [96]) = $0
	*($4 + [244]) = ($4 + [200])
	*($4 + [240]) = ($4 + [16])
	CALL $32(($4 + [240]), ($4 + [152]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $86($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [124])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [120]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$3 = *(($4 + [80]))
	if ( ($3 == 0) ){ goto $label$10 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [104])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [80]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $3
	
.LABEL $label$11
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((*($4 + [184]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [192])))
	
.LABEL $label$16
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = CALL db_lowerbound_i64(*($0 + [40]), *(($0 + [48])), (int_64)-3897455725261094912, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($0 + [40])
	$4 = CALL $27($3, $2)
	
.LOOP $label$2:
	CALL eosio_assert([1], [18131])
	CALL eosio_assert([1], [17910])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [112]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $27($3, $5)
	
.LABEL $label$3
	CALL $28($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	$2 = CALL db_lowerbound_i64(*($0 + [80]), *(($0 + [88])), (int_64)-3904258391152787456, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + [80])
	$4 = CALL $19($3, $2)
	
.LOOP $label$5:
	CALL eosio_assert([1], [18131])
	CALL eosio_assert([1], [17910])
	$2 = [0]
	$5 = CALL db_next_i64(*($4 + [28]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$2 = CALL $19($3, $5)
	
.LABEL $label$6
	CALL $29($3, $4)
	$4 = $2
	if ( $2 ){ goto $label$5 }
	
.LABEL $label$4
	$global$0 = ($1 + [16])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [17253])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [17358])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17291])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17358])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [144])
	$global$0 = $5
	CALL require_auth($1)
	$6 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$6 = [1]
	$10 = $8
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$8 < (int_32)[6])
	$10 = ($8 + [1])
	$8 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$8 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [17133])
	$8 = CALL $77([17159])
	if ( ($8 <= [8]) ){ goto $label$9 }
	CALL eosio_assert([0], [17436])
	goto $label$8 
	
.LABEL $label$9
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$7 = (int_64)0
	
.LOOP $label$10:
	$6 = *(($8 + [17158]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [17481])
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$10 }
	goto $label$6 
	
.LABEL $label$7
	$7 = (int_64)0
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)4)), [17163])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [17189])
	if ( ((int_64)*($0 + [32]) != (int_64)$2) ){ goto $label$12 }
	CALL $33(($5 + [128]), $4)
	*(($5 + [120])) = [0]
	*($5 + [112]) = (int_64)0
	$8 = CALL $77([17216])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$19 }
	*($5 + [112]) = ($8 << [1])
	$6 = (($5 + [112]) | [1])
	if ( $8 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [112]) = ($10 | [1])
	*($5 + [120]) = $6
	*($5 + [116]) = $8
	
.LABEL $label$18
	CALL memcpy($6, [17216], $8)
	
.LABEL $label$17
	$10 = [0]
	*(($6 + $8)) = [0]
	$6 = CALL $34(($5 + [128]), ($5 + [80]), ($5 + [112]))
	$8 = *($6)
	if ( $8 ){ goto $label$20 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$4 = ($5 + [120])
	*(($8 + [24])) = *($4)
	*($8 + [16 align=4]) = *($5 + [112])
	*($8 + [8]) = *($5 + [80])
	*($6) = $8
	*($8 + [36]) = [0]
	*($4) = [0]
	*($5 + [112]) = (int_64)0
	$4 = $8
	$11 = *(*($5 + [128]))
	if ( ($11 == 0) ){ goto $label$21 }
	*($5 + [128]) = $11
	$4 = *($6)
	
.LABEL $label$21
	CALL $35(*($5 + [132]), $4)
	*($5 + [136]) = (*($5 + [136]) + [1])
	
.LABEL $label$20
	$4 = ($8 + [28])
	$8 = *($4)
	$6 = CALL $77([17223])
	if ( ((int_32)$6 != (int_32)( *(($8 + [32])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$23 }
	$10 = (CALL $70($4, [0], [-1], [17223], $6) == 0)
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$22 }
	goto $label$15 
	
.LABEL $label$23
	if ( (*($5 + [112]) & [1]) ){ goto $label$15 }
	
.LABEL $label$22
	if ( ($10 == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$16
	CALL $63(($5 + [112]))
	
.LABEL $label$15
	CALL _ZdlPv(*($5 + [120]))
	if ( ($10 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	*(($5 + [120])) = [0]
	*($5 + [112]) = (int_64)0
	$8 = CALL $77([17227])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$40 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$43 }
	*($5 + [112]) = ($8 << [1])
	$6 = (($5 + [112]) | [1])
	if ( $8 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [112]) = ($10 | [1])
	*($5 + [120]) = $6
	*($5 + [116]) = $8
	
.LABEL $label$42
	CALL memcpy($6, [17227], $8)
	
.LABEL $label$41
	*(($6 + $8)) = [0]
	$6 = CALL $34(($5 + [128]), ($5 + [80]), ($5 + [112]))
	$8 = *($6)
	if ( $8 ){ goto $label$44 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$10 = ($5 + [120])
	*(($8 + [24])) = *($10)
	*($8 + [16 align=4]) = *($5 + [112])
	*($8 + [8]) = *($5 + [80])
	*($6) = $8
	*($8 + [36]) = [0]
	*($10) = [0]
	*($5 + [112]) = (int_64)0
	$10 = $8
	$4 = *(*($5 + [128]))
	if ( ($4 == 0) ){ goto $label$45 }
	*($5 + [128]) = $4
	$10 = *($6)
	
.LABEL $label$45
	CALL $35(*($5 + [132]), $10)
	*($5 + [136]) = (*($5 + [136]) + [1])
	
.LABEL $label$44
	$7 = (int_64)0
	$6 = ($6 & [1])
	$6 = *(($8 + [28]))
	$10 = ( *(($8 + [32])) ? uint_32($6 >> [1]) : $6 )
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$46 }
	$8 = ( *(($8 + [36])) ? ($8 + [29]) : $6 )
	$6 = ($8 + $10)
	$7 = (int_64)0
	
.LOOP $label$47:
	$7 = ((int_64)((int_64)((int_64)$7 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	if ( ($8 <= $6) ){ goto $label$47 }
	
.LABEL $label$46
	*(($5 + [88])) = [0]
	*($5 + [80]) = (int_64)0
	$8 = CALL $77([17230])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$39 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$50 }
	*($5 + [80]) = ($8 << [1])
	$6 = (($5 + [80]) | [1])
	if ( $8 ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$10 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($10)
	*($5 + [80]) = ($10 | [1])
	*($5 + [88]) = $6
	*($5 + [84]) = $8
	
.LABEL $label$49
	CALL memcpy($6, [17230], $8)
	
.LABEL $label$48
	*(($6 + $8)) = [0]
	$6 = CALL $34(($5 + [128]), ($5 + [64]), ($5 + [80]))
	$8 = *($6)
	if ( $8 ){ goto $label$51 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$10 = ($5 + [88])
	*(($8 + [24])) = *($10)
	*($8 + [16 align=4]) = *($5 + [80])
	*($8 + [8]) = *($5 + [64])
	*($6) = $8
	*($8 + [36]) = [0]
	*($10) = [0]
	*($5 + [80]) = (int_64)0
	$10 = $8
	$4 = *(*($5 + [128]))
	if ( ($4 == 0) ){ goto $label$52 }
	*($5 + [128]) = $4
	$10 = *($6)
	
.LABEL $label$52
	CALL $35(*($5 + [132]), $10)
	*($5 + [136]) = (*($5 + [136]) + [1])
	
.LABEL $label$51
	$10 = CALL $64(($5 + [96]), ($8 + [28]))
	$2 = *($3)
	*(($5 + [72])) = [0]
	*($5 + [64]) = (int_64)0
	$8 = CALL $77([17237])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$55 }
	*($5 + [64]) = ($8 << [1])
	$6 = (($5 + [64]) | [1])
	if ( $8 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$3 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($3)
	*($5 + [64]) = ($3 | [1])
	*($5 + [72]) = $6
	*($5 + [68]) = $8
	
.LABEL $label$54
	CALL memcpy($6, [17237], $8)
	
.LABEL $label$53
	*(($6 + $8)) = [0]
	$6 = CALL $34(($5 + [128]), ($5 + [32]), ($5 + [64]))
	$8 = *($6)
	if ( $8 ){ goto $label$56 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$3 = ($5 + [72])
	*(($8 + [24])) = *($3)
	*($8 + [16 align=4]) = *($5 + [64])
	*($8 + [8]) = *($5 + [32])
	*($6) = $8
	*($8 + [36]) = [0]
	*($3) = [0]
	*($5 + [64]) = (int_64)0
	$3 = $8
	$4 = *(*($5 + [128]))
	if ( ($4 == 0) ){ goto $label$57 }
	*($5 + [128]) = $4
	$3 = *($6)
	
.LABEL $label$57
	CALL $35(*($5 + [132]), $3)
	*($5 + [136]) = (*($5 + [136]) + [1])
	
.LABEL $label$56
	$9 = (int_64)0
	$6 = ($6 & [1])
	$6 = *(($8 + [28]))
	$3 = ( *(($8 + [32])) ? uint_32($6 >> [1]) : $6 )
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$58 }
	$8 = ( *(($8 + [36])) ? ($8 + [29]) : $6 )
	$6 = ($8 + $3)
	$9 = (int_64)0
	
.LOOP $label$59:
	$9 = ((int_64)((int_64)((int_64)$9 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	if ( ($8 <= $6) ){ goto $label$59 }
	
.LABEL $label$58
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	$8 = CALL $77([17242])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$62 }
	*($5 + [32]) = ($8 << [1])
	$6 = (($5 + [32]) | [1])
	if ( $8 ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	$3 = (($8 + [16]) & [-16])
	$6 = CALL _Znwj($3)
	*($5 + [32]) = ($3 | [1])
	*($5 + [40]) = $6
	*($5 + [36]) = $8
	
.LABEL $label$61
	CALL memcpy($6, [17242], $8)
	
.LABEL $label$60
	*(($6 + $8)) = [0]
	$6 = CALL $34(($5 + [128]), $5, ($5 + [32]))
	$8 = *($6)
	if ( $8 ){ goto $label$63 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$3 = ($5 + [40])
	*(($8 + [24])) = *($3)
	*($8 + [16 align=4]) = *($5 + [32])
	*($8 + [8]) = *($5)
	*($6) = $8
	*($8 + [36]) = [0]
	*($3) = [0]
	*($5 + [32]) = (int_64)0
	$3 = $8
	$4 = *(*($5 + [128]))
	if ( ($4 == 0) ){ goto $label$64 }
	*($5 + [128]) = $4
	$3 = *($6)
	
.LABEL $label$64
	CALL $35(*($5 + [132]), $3)
	*($5 + [136]) = (*($5 + [136]) + [1])
	
.LABEL $label$63
	$6 = CALL $64(($5 + [48]), ($8 + [28]))
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$8 = CALL $77([17247])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$67 }
	*($5) = ($8 << [1])
	$3 = ($5 | [1])
	if ( $8 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$4 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($5) = ($4 | [1])
	*($5 + [8]) = $3
	*($5 + [4]) = $8
	
.LABEL $label$66
	CALL memcpy($3, [17247], $8)
	
.LABEL $label$65
	*(($3 + $8)) = [0]
	$3 = CALL $34(($5 + [128]), ($5 + [140]), $5)
	$8 = *($3)
	if ( $8 ){ goto $label$68 }
	*(($8 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($8) = (int_64)0
	$4 = ($5 + [8])
	*(($8 + [24])) = *($4)
	*($8 + [16 align=4]) = *($5)
	*($8 + [8]) = *($5 + [140])
	*($3) = $8
	*($8 + [36]) = [0]
	*($4) = [0]
	*($5) = (int_64)0
	$4 = $8
	$11 = *(*($5 + [128]))
	if ( ($11 == 0) ){ goto $label$69 }
	*($5 + [128]) = $11
	$4 = *($3)
	
.LABEL $label$69
	CALL $35(*($5 + [132]), $4)
	*($5 + [136]) = (*($5 + [136]) + [1])
	
.LABEL $label$68
	$8 = CALL $64(($5 + [16]), ($8 + [28]))
	CALL $36($0, $1, $7, $10, $2, $9, $6, $8)
	if ( (*($8) & [1]) ){ goto $label$71 }
	if ( (*($5) & [1]) ){ goto $label$70 }
	goto $label$35 
	
.LABEL $label$71
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$35 }
	
.LABEL $label$70
	CALL _ZdlPv(*($5 + [8]))
	$8 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$40
	CALL $63(($5 + [112]))
	
.LABEL $label$39
	CALL $63(($5 + [80]))
	
.LABEL $label$38
	CALL $63(($5 + [64]))
	
.LABEL $label$37
	CALL $63(($5 + [32]))
	
.LABEL $label$36
	CALL $63($5)
	
.LABEL $label$35
	$8 = [1]
	if ( (*($6) & [1]) ){ goto $label$33 }
	
.LABEL $label$34
	if ( (*($5 + [32]) & $8) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5 + [32]) & $8) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv(*($5 + [40]))
	$8 = [1]
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$8 = [1]
	if ( (*($5 + [64]) & [1]) ){ goto $label$29 }
	
.LABEL $label$30
	if ( (*($10) & $8) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL _ZdlPv(*($5 + [72]))
	if ( ((*($10) & $8) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*($10 + [8]))
	$8 = [1]
	if ( ((*($5 + [80]) & [1]) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$8 = [1]
	if ( (*($5 + [80]) & [1]) ){ goto $label$25 }
	
.LABEL $label$26
	if ( ((*($5 + [112]) & $8) == 0) ){ goto $label$13 }
	goto $label$24 
	
.LABEL $label$25
	CALL _ZdlPv(*($5 + [88]))
	if ( ((*($5 + [112]) & $8) == 0) ){ goto $label$13 }
	
.LABEL $label$24
	CALL _ZdlPv(*($5 + [120]))
	
.LABEL $label$13
	CALL $37(($5 + [128]), *($5 + [132]))
	
.LABEL $label$12
	$global$0 = ($5 + [144])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [80])
	$6 = *(($0 + [108]))
	$5 = *(($0 + [104]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [17631])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [88])), (int_64)-3904258391152787456, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $19($4, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [17631])
	
.LABEL $label$1
	$9 = *($0)
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [17940])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [17975])
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)CALL $fimport$8()), [18021])
	*($8 + [8]) = $2
	$1 = *($8)
	CALL eosio_assert([1], [18072])
	CALL eosio_assert([1], [17419])
	CALL memcpy($3, $8, [8])
	CALL eosio_assert([1], [17419])
	CALL memcpy(($3 | [8]), ($8 + [8]), [4])
	CALL eosio_assert([1], [17419])
	CALL memcpy(($3 | [12]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), $9, $3, [20])
	$7 = ($0 + [96])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$5 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($3 + [32])
}

int_32 .FUNC $3 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [136]) = (int_64)0
	*($4 + [128]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17622])
	CALL memcpy(($4 + [128]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [17622])
	CALL memcpy((($4 + [128]) + [8]), ($2 + [8]), [8])
	*(($4 + [28])) = ($2 + [16])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [84])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [136])
	$1 = *($4 + [128])
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 $1), (int_64 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $86($2)
	$5 = *(($4 + [112]))
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = *(($4 + [112]))
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *(($4 + [72]))
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = ($4 + [116])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [112]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [76])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($7 + [104])))
	
.LABEL $label$19
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($4 + [72]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $5
	
.LABEL $label$15
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC memory ()
{
	CALL $54()
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$8 }
	if ( ((int_64)$2 <= (int_64)-4713111963180204033) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)4923676611399090175) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-4713111963180204032) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-3075276122089661248) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [1]
	*($3 + [16]) = *($3 + [152])
	CALL $3($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [104]) = [8192]
	*($3 + [108]) = CALL $77([8192])
	*($3 + [72]) = *($3 + [104])
	CALL $4(($3 + [112]), ($3 + [72]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [88]) = [8204]
	*($3 + [92]) = CALL $77([8204])
	*($3 + [64]) = *($3 + [88])
	CALL $4(($3 + [96]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [2]
	*($3 + [56]) = *($3 + [80])
	CALL $6($0, (int_64)6138663591592764928, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-6217917475468607488) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-5069194696530591744) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-5002966724954292224) ){ goto $label$1 }
	*($3 + [132]) = [0]
	*($3 + [128]) = [3]
	*($3 + [40]) = *($3 + [128])
	CALL $8($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)4923676611399090176) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [4]
	*($3 + [48]) = *($3 + [120])
	CALL $8($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [164]) = [0]
	*($3 + [160]) = [5]
	*($3 + [8]) = *($3 + [160])
	CALL $11($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [148]) = [0]
	*($3 + [144]) = [6]
	*($3 + [24]) = *($3 + [144])
	CALL $11($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [140]) = [0]
	*($3 + [136]) = [7]
	*($3 + [32]) = *($3 + [136])
	CALL $14($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [172]) = [0]
	*($3 + [168]) = [8]
	*($3) = *($3 + [168])
	CALL $16($1, $1, $3)
	
.LABEL $label$1
	CALL $73([0])
	$global$0 = ($3 + [176])
}

int_32 .FUNC $14 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [120]) + [16]))) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17622])
	CALL memcpy(($4 + [120]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [17622])
	CALL memcpy((($4 + [120]) + [8]), ($2 + [8]), [8])
	*($4) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [17622])
	CALL memcpy($4, ($2 + [16]), [8])
	*($3) = *($4)
	*(($4 + [20])) = ($2 + [24])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*(($8 = (($4 + [144]) + [8]))) = *($3)
	*($4 + [144]) = *($4 + [128])
	$0 = *($4 + [120])
	*((($4 + [160]) + [8])) = *($8)
	*($4 + [160]) = *($4 + [144])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 ($4 + [160])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $86($2)
	
.LABEL $label$5
	$5 = *(($4 + [104]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [108])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [104]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($4 + [68])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($7 + [104])))
	
.LABEL $label$16
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($4 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	$4 = ($global$0 - [208])
	$global$0 = $4
	*($4 + [184]) = $1
	*($4 + [168]) = [17120]
	*($4 + [172]) = CALL $77([17120])
	*($4 + [16]) = *($4 + [168])
	CALL require_auth(*(CALL $4(($4 + [176]), ($4 + [16]))))
	$5 = ($0 + [80])
	$7 = *(($0 + [108]))
	$6 = *(($0 + [104]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)4) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [17631])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [88])), (int_64)-3904258391152787456, (int_64)4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $19($5, $8)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [17631])
	
.LABEL $label$1
	$7 = *(($0 + [108]))
	$6 = *(($0 + [104]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$8:
	$8 = ($7 + [-24])
	$10 = *($8)
	if ( ((int_64)*($10) == (int_64)2) ){ goto $label$7 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$5), [17631])
	goto $label$5 
	
.LABEL $label$6
	$10 = [0]
	$8 = CALL db_find_i64(*(($0 + [80])), *(($0 + [88])), (int_64)-3904258391152787456, (int_64)2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$10 = CALL $19($5, $8)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$5), [17631])
	
.LABEL $label$5
	*($4 + [160]) = ($0 + [40])
	CALL $20(($4 + [48]), ($4 + [160]), ($4 + [184]))
	$8 = *($4 + [52])
	if ( ($8 == 0) ){ goto $label$10 }
	if ( ((int_64)*($4 + [184]) != (int_64)*($8 + [8])) ){ goto $label$10 }
	$1 = *($4 + [48])
	*($4 + [152]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($6) == 0) ){ goto $label$9 }
	$11 = ($3 + [1])
	$12 = ($4 + [76])
	$13 = (($4 + [24]) + [16])
	$14 = (($4 + [24]) + [8])
	$15 = (($4 + [48]) | [1])
	$16 = ($3 + [4])
	$17 = ($4 + [60])
	$18 = ($10 + [8])
	$19 = ($9 + [16])
	$20 = ($4 + [72])
	$21 = ($4 + [84])
	$22 = ($4 + [68])
	
.LOOP $label$11:
	if ( ((int_64)*($6 + [8]) != (int_64)*($4 + [184])) ){ goto $label$9 }
	$7 = ($8 & [1])
	$8 = *($3)
	$9 = ($8 & [1])
	$8 = *($6 + [96])
	$5 = uint_32($8 >> [1])
	$10 = ( *(($6 + [100])) ? $5 : $9 )
	if ( ((int_32)$10 != (int_32)( *($16) ? uint_32($8 >> [1]) : $7 )) ){ goto $label$15 }
	$8 = (($6 + [96]) + [1])
	$7 = ( *(($3 + [8])) ? $11 : $7 )
	if ( $9 ){ goto $label$14 }
	if ( ($10 == 0) ){ goto $label$13 }
	$6 = ([0] - $5)
	
.LOOP $label$16:
	if ( ((int_32)*($8) != (int_32)*($7)) ){ goto $label$15 }
	$9 = [1]
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$15
	$9 = [0]
	goto $label$12 
	
.LABEL $label$14
	if ( ($10 == 0) ){ goto $label$13 }
	$9 = (CALL $76(( *(($6 + [104])) ? $8 : $9 ), $7, $10) == 0)
	goto $label$12 
	
.LABEL $label$13
	$9 = [1]
	
.LABEL $label$12
	CALL eosio_assert($9, *([0] + [8324]))
	CALL eosio_assert((int_64)(*(*($4 + [156]) + [88]) == 0), *([0] + [8324]))
	CALL eosio_assert((uint_64)((int_64))(((int_64)((int_64)((uint_64)CALL $fimport$6() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000) - *(*($4 + [156]) + [72])) <= (int_64)30000), *([0] + [8328]))
	$8 = *($2)
	if ( ($8 & [1]) ){ goto $label$18 }
	$10 = uint_32($8 >> [1])
	goto $label$17 
	
.LABEL $label$18
	$10 = *(($2 + [4]))
	
.LABEL $label$17
	$9 = ((int_32)$10 / (int_32)[3])
	CALL $65(($4 + [48]), $2, [0], $9, $2)
	$6 = (($4 + [48]) + [8])
	$23 = *($6)
	$5 = ($8 & [1])
	$8 = *($4 + [48])
	$7 = ( *($4 + [52]) ? uint_32($8 >> [1]) : $5 )
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$21 }
	$8 = ( $23 ? $15 : $5 )
	$7 = ($8 + $7)
	$1 = (int_64)0
	
.LOOP $label$22:
	$1 = ((int_64)((int_64)((int_64)$1 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	if ( ($8 <= $7) ){ goto $label$22 }
	if ( ($5 == 0) ){ goto $label$19 }
	goto $label$20 
	
.LABEL $label$21
	$1 = (int_64)0
	if ( ($5 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv($23)
	
.LABEL $label$19
	$23 = ($9 << [1])
	CALL $65(($4 + [48]), $2, $9, $23, $2)
	$5 = *($6)
	$9 = ($8 & [1])
	$8 = *($4 + [48])
	$7 = ( *($4 + [52]) ? uint_32($8 >> [1]) : $9 )
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$25 }
	$8 = ( $5 ? $15 : $9 )
	$7 = ($8 + $7)
	$24 = (int_64)0
	
.LOOP $label$26:
	$24 = ((int_64)((int_64)((int_64)$24 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	if ( ($8 <= $7) ){ goto $label$26 }
	if ( ($9 == 0) ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	$24 = (int_64)0
	if ( ($9 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv($5)
	
.LABEL $label$23
	CALL $65(($4 + [48]), $2, $23, $10, $2)
	$10 = *($6)
	$9 = ($8 & [1])
	$8 = *($4 + [48])
	$7 = ( *($4 + [52]) ? uint_32($8 >> [1]) : $9 )
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$29 }
	$8 = ( $10 ? $15 : $9 )
	$7 = ($8 + $7)
	$25 = (int_64)0
	
.LOOP $label$30:
	$25 = ((int_64)((int_64)((int_64)$25 * (int_64)10) + (int_64)*($8)) + (int_64)-48)
	$8 = ($8 + [1])
	if ( ($8 <= $7) ){ goto $label$30 }
	if ( ($9 == 0) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$29
	$25 = (int_64)0
	if ( ($9 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv($10)
	
.LABEL $label$27
	$8 = *($4 + [156])
	$26 = ((int_64)((uint_64)*($8 + [80]) % (uint_64)(int_64)6) + (int_64)1)
	$1 = ((int_64)((uint_64)((int_64)$26 + (int_64)$1) % (uint_64)(int_64)6) + (int_64)1)
	*($4 + [144]) = $1
	$24 = ((int_64)((uint_64)((int_64)$26 + (int_64)$24) % (uint_64)(int_64)6) + (int_64)1)
	*($4 + [136]) = $24
	$25 = ((int_64)((uint_64)((int_64)$26 + (int_64)$25) % (uint_64)(int_64)6) + (int_64)1)
	*($4 + [128]) = $25
	*($4 + [120]) = (int_64)0
	if ( (CALL $21($0, *($8 + [40]), (CASTING uint_32)(uint_64 $1), (CASTING uint_32)(uint_64 $24), (CASTING uint_32)(uint_64 $25)) == 0) ){ goto $label$31 }
	*($4 + [120]) = ((uint_64)((int_64)*($8 + [32]) * (int_64)*($8 + [44])) / (uint_64)(int_64)10000)
	
.LABEL $label$31
	$1 = *($0)
	*($4 + [48]) = $2
	*($6) = ($4 + [136])
	*($17) = ($4 + [128])
	*(($7 = (($4 + [48]) + [16]))) = ($4 + [120])
	*($4 + [52]) = ($4 + [144])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [17940])
	CALL $22(*($4 + [160]), $8, $1, ($4 + [48]))
	$1 = *($4 + [120])
	if ( (int_64)($1 == 0) ){ goto $label$32 }
	$8 = *($4 + [156])
	CALL $23($0, *($8 + [16]), ((int_64)*($8 + [32]) + (int_64)$1), CALL $64(($4 + [104]), [8360]))
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*((($4 + [104]) + [8])))
	
.LABEL $label$32
	$8 = *($4 + [156])
	$1 = *($8 + [24])
	if ( (int_64)($1 == 0) ){ goto $label$33 }
	if ( ((int_64)$1 == (int_64)*($8 + [16])) ){ goto $label$33 }
	$24 = ((uint_64)((int_64)*($8 + [32]) * (int_64)*($18)) / (uint_64)(int_64)10000)
	CALL $23($0, $1, $24, CALL $64(($4 + [88]), [8384]))
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*((($4 + [88]) + [8])))
	
.LABEL $label$34
	$1 = *(($0 + [32]))
	*($4 + [196]) = [6]
	*($4 + [192]) = [17410]
	*($4 + [8]) = *($4 + [192])
	CALL $4(($4 + [24]), ($4 + [8]))
	$25 = *($4 + [24])
	$26 = *($19)
	*($4 + [196]) = [11]
	*($4 + [192]) = [17425]
	*($4) = *($4 + [192])
	CALL $4(($4 + [24]), $4)
	$27 = *($4 + [24])
	*($14) = [2]
	*($13) = $24
	*($6) = $27
	*($7) = (int_64)0
	*($20) = [0]
	*($4 + [48]) = $26
	*($4 + [24]) = *(*($4 + [156]) + [24])
	$8 = CALL _Znwj([16])
	*($7) = $8
	*($8) = $1
	*($8 + [8]) = $25
	*($12) = (int_64)0
	*($21) = [0]
	$8 = ($8 + [16])
	*($20) = $8
	*($22) = $8
	CALL $24($12, [17])
	$8 = *($12)
	$9 = (($4 + [48]) + [32])
	$6 = (*($9) - $8)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [17419])
	CALL memcpy($8, ($4 + [24]), [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[0]), [17419])
	CALL memcpy(($8 + [8]), $14, [1])
	CALL eosio_assert(((int_32)($6 + [-9]) > (int_32)[7]), [17419])
	CALL memcpy(($8 + [9]), $13, [8])
	CALL $25(($4 + [192]), ($4 + [48]))
	$8 = *($4 + [192])
	CALL send_inline($8, (*($4 + [196]) - $8))
	$8 = *($4 + [192])
	if ( ($8 == 0) ){ goto $label$35 }
	*($4 + [196]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$35
	$8 = *($12)
	if ( ($8 == 0) ){ goto $label$36 }
	*($9) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$36
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$33 }
	*($22) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$33
	CALL $26(($4 + [152]))
	$6 = *($4 + [156])
	if ( $6 ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	*($4 + [156]) = [0]
	*($4 + [152]) = ($4 + [160])
	
.LABEL $label$9
	$global$0 = ($4 + [208])
}

int_32 .FUNC $16 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [184]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [168])) = (int_64)0
	*((($4 + [152]) + [24])) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [144]) = ($2 + $5)
	*($4 + [136]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [17622])
	CALL memcpy(($4 + [152]), $2, [8])
	*($4 + [140]) = ($2 + [8])
	CALL $17(($4 + [136]), (($4 + [152]) + [8]))
	CALL $17(($4 + [136]), ($4 + [172]))
	*(($3 = ($4 + [8]))) = *($4 + [144])
	*($4) = *($4 + [136])
	$3 = *($3)
	*((($4 + [192]) + [8])) = $3
	*(($6 = (($4 + [208]) + [8]))) = $3
	$7 = *($4)
	*($4 + [208]) = $7
	*($4 + [192]) = $7
	$3 = *($6)
	*((($4 + [224]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [208])
	*($4 + [32]) = $1
	*($4 + [224]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [92])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($3 = ($4 + [120]))) = (int_64)0
	*(($4 + [128])) = [0]
	*($4 + [56]) = $0
	*($4 + [48]) = $0
	*($4 + [96]) = $0
	*($4 + [228]) = ($4 + [184])
	*($4 + [224]) = ($4 + [16])
	CALL $18(($4 + [224]), ($4 + [152]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $86($2)
	
.LABEL $label$4
	$3 = *($3)
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [124])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [120]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$3 = *(($4 + [80]))
	if ( ($3 == 0) ){ goto $label$10 }
	$6 = ($4 + [84])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	if ( ((*($5 + [96]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [104])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [80]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $3
	
.LABEL $label$11
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$10
	if ( ((*($4 + [172]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($4 + [180])))
	
.LABEL $label$16
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($4 + [168])))
	
.LABEL $label$17
	$global$0 = ($4 + [240])
	return [1]
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $49($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $68($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $68($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $63($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $10 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [32]) = $1
	*($2 + [24]) = ($0 + [40])
	CALL $20(($2 + [40]), ($2 + [24]), ($2 + [32]))
	$3 = *($2 + [44])
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((int_64)*($2 + [32]) != (int_64)*($3 + [8])) ){ goto $label$1 }
	$1 = *($2 + [40])
	*($2 + [16]) = $1
	$3 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ($3) == 0) ){ goto $label$2 }
	$4 = ($2 + [8])
	
.LOOP $label$3:
	if ( ((int_64)*($3 + [8]) != (int_64)*($2 + [32])) ){ goto $label$2 }
	if ( ((int_64)*($3 + [88]) != (int_64)0) ){ goto $label$2 }
	if ( ((uint_64)*($3 + [72]) <= (uint_64)((int_64)((int_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000) + (int_64)30000)) ){ goto $label$2 }
	$3 = *($2 + [20])
	CALL $23($0, *($3 + [16]), *($3 + [32]), CALL $64($2, [8360]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$4
	CALL $26(($2 + [16]))
	$3 = *($2 + [20])
	if ( $3 ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	*($2 + [20]) = [0]
	*($2 + [16]) = ($2 + [24])
	$global$0 = ($2 + [48])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17622])
	CALL memcpy(($4 + [120]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [76])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [120])
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $86($2)
	$5 = *(($4 + [104]))
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = *(($4 + [104]))
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *(($4 + [64]))
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = ($4 + [108])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [104]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [68])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	if ( ((*($7 + [96]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($7 + [104])))
	
.LABEL $label$19
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($4 + [64]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $5
	
.LABEL $label$15
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [80])
	$5 = *(($0 + [108]))
	$4 = *(($0 + [104]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [17631])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [88])), (int_64)-3904258391152787456, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $19($3, $6)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [17631])
	
.LABEL $label$1
	$8 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [17940])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$3), [17975])
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)CALL $fimport$8()), [18021])
	*($7 + [8]) = $1
	$1 = *($7)
	CALL eosio_assert([1], [18072])
	CALL eosio_assert([1], [17419])
	CALL memcpy($2, $7, [8])
	CALL eosio_assert([1], [17419])
	CALL memcpy(($2 | [8]), ($7 + [8]), [4])
	CALL eosio_assert([1], [17419])
	CALL memcpy(($2 | [12]), ($7 + [16]), [8])
	CALL db_update_i64(*($7 + [28]), $8, $2, [20])
	$6 = ($0 + [96])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$5 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($2 + [32])
}

void .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($0))
	$2 = CALL $64($3, [8348])
	CALL $23($0, $1, *($2), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $64(($2 + [16]), ($1 + [8]))
	$1 = CALL $64($2, ($1 + [20]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$7 = CALL $64(($2 + [32]), $1)
	$5 = CALL $64(($2 + [48]), $4)
	CALL void $6((int_32 $3), (int_64 $5), (int_32 $7), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17682])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $82($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17622])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [17622])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	CALL eosio_assert(((uint_32)($4 + [-12]) > (uint_32)[7]), [17622])
	CALL memcpy(($5 + [16]), ($2 + [12]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $30(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $86($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $80(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8408])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $80(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [112]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17862])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3897455725261094912)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17808])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17808])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $27(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17419])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17419])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17419])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17419])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17419])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17419])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $53(*($1), *($0 + [56]))
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17622])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17622])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17622])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17622])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17622])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $17(*($1), *($0 + [56]))
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17419])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17419])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $54 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8348 align=4]) = (int_64)0
	*([0] + [8356]) = [0]
	$0 = CALL $77([17100])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$8 }
	*([0] + [8348]) = ($0 << [1])
	$1 = [8349]
	if ( $0 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8348]) = ($2 | [1])
	*([0] + [8356]) = $1
	*([0] + [8352]) = $0
	
.LABEL $label$7
	CALL memcpy($1, [17100], $0)
	
.LABEL $label$6
	*(($1 + $0)) = [0]
	CALL $74([9], [0], [8192])
	*([0] + [8360 align=4]) = (int_64)0
	*([0] + [8368]) = [0]
	$0 = CALL $77([17104])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$11 }
	*([0] + [8360]) = ($0 << [1])
	$1 = [8361]
	if ( $0 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8360]) = ($2 | [1])
	*([0] + [8368]) = $1
	*([0] + [8364]) = $0
	
.LABEL $label$10
	CALL memcpy($1, [17104], $0)
	
.LABEL $label$9
	*(($1 + $0)) = [0]
	CALL $74([10], [0], [8192])
	*([0] + [8372 align=4]) = (int_64)0
	*([0] + [8380]) = [0]
	$0 = CALL $77([17108])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$14 }
	*([0] + [8372]) = ($0 << [1])
	$1 = [8373]
	if ( $0 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8372]) = ($2 | [1])
	*([0] + [8380]) = $1
	*([0] + [8376]) = $0
	
.LABEL $label$13
	CALL memcpy($1, [17108], $0)
	
.LABEL $label$12
	*(($1 + $0)) = [0]
	CALL $74([11], [0], [8192])
	*([0] + [8384 align=4]) = (int_64)0
	*([0] + [8392]) = [0]
	$0 = CALL $77([17112])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$17 }
	*([0] + [8384]) = ($0 << [1])
	$1 = [8385]
	if ( $0 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8384]) = ($2 | [1])
	*([0] + [8392]) = $1
	*([0] + [8388]) = $0
	
.LABEL $label$16
	CALL memcpy($1, [17112], $0)
	
.LABEL $label$15
	*(($1 + $0)) = [0]
	CALL $74([12], [0], [8192])
	*([0] + [8396 align=4]) = (int_64)0
	*([0] + [8404]) = [0]
	$0 = CALL $77([17116])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$20 }
	*([0] + [8396]) = ($0 << [1])
	$1 = [8397]
	if ( $0 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8396]) = ($2 | [1])
	*([0] + [8404]) = $1
	*([0] + [8400]) = $0
	
.LABEL $label$19
	CALL memcpy($1, [17116], $0)
	
.LABEL $label$18
	*(($1 + $0)) = [0]
	CALL $74([13], [0], [8192])
	return (unreachable)
	
.LABEL $label$5
	CALL $63([8348])
	
.LABEL $label$4
	CALL $63([8360])
	
.LABEL $label$3
	CALL $63([8372])
	
.LABEL $label$2
	CALL $63([8384])
	
.LABEL $label$1
	CALL $63([8396])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	$4 = ($2 + [1])
	$5 = ($2 + [8])
	
.LOOP $label$3:
	$7 = ($0 + [16])
	$12 = ($11 & [1])
	$11 = *($2)
	$10 = ($2 + [4])
	$11 = ( *($10) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($0 + [16])
	$8 = ($0 + [20])
	$6 = ( *($8) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$7 }
	$9 = CALL $76(( *($5) ? $4 : $12 ), ( *(($0 + [24])) ? ($7 + [1]) : $9 ), $13)
	if ( ($9 == 0) ){ goto $label$7 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = *($0)
	if ( $6 ){ goto $label$4 }
	*($1) = $0
	return $0
	
.LABEL $label$5
	$12 = ($11 & [1])
	$11 = *($7)
	$11 = ( *($8) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$9 }
	$7 = CALL $76(( *(($0 + [24])) ? ($7 + [1]) : $12 ), ( *($5) ? $4 : $9 ), $13)
	if ( ($7 == 0) ){ goto $label$9 }
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$2 }
	
.LABEL $label$8
	$3 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$2 }
	$0 = $3
	
.LABEL $label$4
	$3 = $0
	$0 = $6
	goto $label$3 
	
.LABEL $label$2
	*($1) = $0
	return $3
	
.LABEL $label$1
	*($1) = $3
	return $3
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $86($0)
	
.LABEL $label$1
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [18165])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18210])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18260])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [18165])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18210])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [18260])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [104])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [104])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [112]))
	$6 = *($1 + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3897455725261094912, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$6 = *(($1 + [120]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3897455725261094911, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx64_remove($6)
	
.LABEL $label$16
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $82($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8408])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $82($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = [1]
	if ( ((int_64)$1 != (int_64)1) ){ goto $label$2 }
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$2 }
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$2 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)2) ){ goto $label$3 }
	if ( ((int_32)$2 != (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$3 != (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)[2]) ){ goto $label$1 }
	
.LABEL $label$3
	if ( ((int_64)$1 != (int_64)3) ){ goto $label$4 }
	if ( ((int_32)$2 != (int_32)[3]) ){ goto $label$4 }
	if ( ((int_32)$3 != (int_32)[3]) ){ goto $label$4 }
	if ( ((int_32)$4 == (int_32)[3]) ){ goto $label$1 }
	
.LABEL $label$4
	if ( ((int_64)$1 != (int_64)4) ){ goto $label$5 }
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$5 }
	if ( ((int_32)$3 != (int_32)[4]) ){ goto $label$5 }
	if ( ((int_32)$4 == (int_32)[4]) ){ goto $label$1 }
	
.LABEL $label$5
	if ( ((int_64)$1 != (int_64)5) ){ goto $label$6 }
	if ( ((int_32)$2 != (int_32)[5]) ){ goto $label$6 }
	if ( ((int_32)$3 != (int_32)[5]) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)[5]) ){ goto $label$1 }
	
.LABEL $label$6
	if ( ((int_64)$1 != (int_64)6) ){ goto $label$7 }
	if ( ((int_32)$2 != (int_32)[6]) ){ goto $label$7 }
	if ( ((int_32)$3 != (int_32)[6]) ){ goto $label$7 }
	if ( ((int_32)$4 == (int_32)[6]) ){ goto $label$1 }
	
.LABEL $label$7
	$5 = (($3 + $2) + $4)
	if ( ((int_64)$1 != (int_64)7) ){ goto $label$9 }
	if ( ((uint_32)($5 + [-4]) > (uint_32)[6]) ){ goto $label$9 }
	if ( ((((int_32)$2 == (int_32)[4]) & ((int_32)$3 == (int_32)[4])) & ((int_32)$4 == (int_32)[4])) ){ goto $label$8 }
	if ( ((((int_32)$2 == (int_32)[3]) & ((int_32)$3 == (int_32)[3])) & ((int_32)$4 == (int_32)[3])) ){ goto $label$8 }
	if ( ((((int_32)$2 == (int_32)[1]) & ((int_32)$3 == (int_32)[1])) & ((int_32)$4 == (int_32)[1])) ){ goto $label$8 }
	if ( ((((int_32)$2 == (int_32)[2]) & ((int_32)$3 == (int_32)[2])) & ((int_32)$4 == (int_32)[2])) ){ goto $label$8 }
	if ( ((((int_32)$2 == (int_32)[5]) & ((int_32)$3 == (int_32)[5])) & ((int_32)$4 == (int_32)[5])) ){ goto $label$8 }
	$5 = [1]
	if ( (((((int_32)$2 == (int_32)[6]) & ((int_32)$3 == (int_32)[6])) & ((int_32)$4 == (int_32)[6])) == 0) ){ goto $label$1 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_64)$1 != (int_64)8) ){ goto $label$10 }
	if ( ((uint_32)($5 + [-11]) > (uint_32)[6]) ){ goto $label$10 }
	if ( ((((int_32)$2 == (int_32)[4]) & ((int_32)$3 == (int_32)[4])) & ((int_32)$4 == (int_32)[4])) ){ goto $label$8 }
	if ( ((((int_32)$2 == (int_32)[3]) & ((int_32)$3 == (int_32)[3])) & ((int_32)$4 == (int_32)[3])) ){ goto $label$8 }
	if ( ((((int_32)$2 == (int_32)[1]) & ((int_32)$3 == (int_32)[1])) & ((int_32)$4 == (int_32)[1])) ){ goto $label$8 }
	if ( ((((int_32)$2 == (int_32)[2]) & ((int_32)$3 == (int_32)[2])) & ((int_32)$4 == (int_32)[2])) ){ goto $label$8 }
	if ( ((((int_32)$2 == (int_32)[5]) & ((int_32)$3 == (int_32)[5])) & ((int_32)$4 == (int_32)[5])) ){ goto $label$8 }
	$5 = [1]
	if ( (((((int_32)$2 == (int_32)[6]) & ((int_32)$3 == (int_32)[6])) & ((int_32)$4 == (int_32)[6])) == 0) ){ goto $label$1 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((int_64)$1 != (int_64)9) ){ goto $label$8 }
	$5 = [1]
	if ( ((((int_32)$2 == (int_32)[4]) & ((int_32)$3 == (int_32)[4])) & ((int_32)$4 == (int_32)[4])) ){ goto $label$1 }
	if ( ((((int_32)$2 == (int_32)[3]) & ((int_32)$3 == (int_32)[3])) & ((int_32)$4 == (int_32)[3])) ){ goto $label$1 }
	if ( ((((int_32)$2 == (int_32)[1]) & ((int_32)$3 == (int_32)[1])) & ((int_32)$4 == (int_32)[1])) ){ goto $label$1 }
	if ( ((((int_32)$2 == (int_32)[2]) & ((int_32)$3 == (int_32)[2])) & ((int_32)$4 == (int_32)[2])) ){ goto $label$1 }
	if ( ((((int_32)$2 == (int_32)[5]) & ((int_32)$3 == (int_32)[5])) & ((int_32)$4 == (int_32)[5])) ){ goto $label$1 }
	if ( ((((int_32)$2 == (int_32)[6]) & ((int_32)$3 == (int_32)[6])) & ((int_32)$4 == (int_32)[6])) ){ goto $label$1 }
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$1
	return $5
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3897455725261094911, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [108]) == (int_32)$7), [17631])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $27($7, CALL $fimport$5(*($7), *($7 + [8]), (int_64)-3897455725261094912, $6))
	CALL eosio_assert(((int_32)*($4 + [108]) == (int_32)$7), [17631])
	
.LABEL $label$2
	*(($4 + [120])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $23 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$4 = ($global$0 - [144])
	$global$0 = $4
	if ( ((int_64)*($0 + [32]) == (int_64)$1) ){ goto $label$1 }
	$5 = CALL $77([17159])
	if ( ($5 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [17436])
	goto $label$4 
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	
.LOOP $label$6:
	$7 = *(($5 + [17158]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [17481])
	
.LABEL $label$7
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$6 = (int_64)0
	
.LABEL $label$2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17534])
	$8 = ((int_64)$6 & (int_64)72057594037927935)
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$8 = $6
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$8 = $6
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [17583])
	$5 = ($0 + [32])
	$8 = *($5)
	*($4 + [76]) = [6]
	*($4 + [72]) = [17410]
	*($4 + [16]) = *($4 + [72])
	$6 = *(CALL $4(($4 + [24]), ($4 + [16])))
	*($4 + [76]) = [11]
	*($4 + [72]) = [17603]
	*($4 + [8]) = *($4 + [72])
	$11 = *(CALL $4(($4 + [24]), ($4 + [8])))
	*($4 + [76]) = [8]
	*($4 + [72]) = [17614]
	*($4) = *($4 + [72])
	$12 = *(CALL $4(($4 + [24]), $4))
	*((($4 + [24]) + [24])) = $9
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [24]) = *($5)
	$7 = CALL $64((($4 + [24]) + [32]), $3)
	*($4 + [80]) = $12
	*($4 + [72]) = $11
	*(($5 = CALL _Znwj([16]))) = $8
	*($5 + [8]) = $6
	*((($4 + [72]) + [36])) = [0]
	$10 = ($5 + [16])
	*((($4 + [72]) + [24])) = $10
	*(($4 + [92])) = $10
	*($4 + [88]) = $5
	*($4 + [100 align=4]) = (int_64)0
	$5 = *($7)
	$7 = ( *((($4 + [24]) + [36])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($4 + [100])
	
.LOOP $label$13:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$13 }
	if ( ($5 == 0) ){ goto $label$15 }
	CALL $24($7, $5)
	$7 = *(($4 + [104]))
	$5 = *(($4 + [100]))
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	$5 = [0]
	
.LABEL $label$14
	*($4 + [132]) = $5
	*($4 + [128]) = $5
	*($4 + [136]) = $7
	*($4 + [112]) = ($4 + [128])
	*($4 + [120]) = ($4 + [24])
	CALL $46(($4 + [120]), ($4 + [112]))
	CALL $25(($4 + [128]), ($4 + [72]))
	$5 = *($4 + [128])
	CALL send_inline($5, (*($4 + [132]) - $5))
	$5 = *($4 + [128])
	if ( ($5 == 0) ){ goto $label$16 }
	*($4 + [132]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$5 = *($4 + [100])
	if ( ($5 == 0) ){ goto $label$17 }
	*(($4 + [104])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$5 = *($4 + [88])
	if ( ($5 == 0) ){ goto $label$18 }
	*(($4 + [92])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$1
	$global$0 = ($4 + [144])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [17975])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [18021])
	$6 = ($1 + [72])
	*(($5 = $4) + [24]) = *($6)
	$7 = ($1 + [8])
	*($5 + [32]) = *($7)
	$8 = *($1)
	$9 = (int_64)0
	$11 = ($11 & [1])
	$11 = *($10)
	$10 = *($3)
	$12 = ( *($10 + [4]) ? uint_32($11 >> [1]) : $11 )
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$1 }
	$10 = ( *($10 + [8]) ? ($10 + [1]) : $11 )
	$11 = ($10 + $12)
	$9 = (int_64)0
	
.LOOP $label$2:
	$9 = ((int_64)((int_64)((int_64)$9 * (int_64)10) + (int_64)*($10)) + (int_64)-48)
	$10 = ($10 + [1])
	if ( ($10 <= $11) ){ goto $label$2 }
	
.LABEL $label$1
	$12 = (($5 + [24]) + [8])
	*($1 + [88]) = $9
	*($1 + [48]) = *(*($3 + [4]))
	$9 = *(*($3 + [12]))
	$13 = *(*($3 + [8]))
	*($1 + [64]) = *(*($3 + [16]))
	*($1 + [52]) = $13
	*($1 + [56]) = $9
	CALL eosio_assert([1], [18072])
	$10 = *($1 + [96])
	$11 = ( *(($1 + [100])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($11 + [92])
	$9 = (CASTING uint_64)(uint_32 $11)
	$3 = ($1 + [96])
	$14 = ($1 + [64])
	$15 = ($1 + [56])
	$16 = ($1 + [52])
	$17 = ($1 + [48])
	$18 = ($1 + [88])
	
.LOOP $label$3:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ($10 <= [513]) ){ goto $label$5 }
	$11 = CALL $82($10)
	goto $label$4 
	
.LABEL $label$5
	$11 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$4
	*($5 + [12]) = $11
	*($5 + [8]) = $11
	*($5 + [16]) = ($11 + $10)
	*($5 + [40]) = ($5 + [8])
	*($5 + [52]) = $7
	*($5 + [76]) = $17
	*($5 + [80]) = $16
	*($5 + [84]) = $15
	*($5 + [88]) = $14
	*($5 + [92]) = $6
	*($5 + [100]) = $18
	*($5 + [104]) = $3
	*($5 + [48]) = $1
	*($5 + [56]) = ($1 + [16])
	*($5 + [60]) = ($1 + [24])
	*($5 + [64]) = ($1 + [32])
	*($5 + [68]) = ($1 + [40])
	*($5 + [72]) = ($1 + [44])
	*($5 + [96]) = ($1 + [80])
	CALL $51(($5 + [48]), ($5 + [40]))
	CALL db_update_i64(*($1 + [112]), $2, $11, $10)
	if ( ($10 <= [513]) ){ goto $label$6 }
	CALL $86($11)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($5 + [48]) = *($6)
	if ( (CALL $76(($5 + [24]), ($5 + [48]), [8]) == 0) ){ goto $label$8 }
	$10 = *($1 + [116])
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$9 }
	$10 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3897455725261094912, ($5 + [40]), $8)
	*(($1 + [116])) = $10
	
.LABEL $label$9
	CALL db_idx64_update($10, $2, ($5 + [48]))
	
.LABEL $label$8
	*($5 + [48]) = *($7)
	if ( (CALL $76($12, ($5 + [48]), [8]) == 0) ){ goto $label$10 }
	$1 = ($1 + [120])
	$10 = *($1)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$11 }
	$10 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3897455725261094911, ($5 + [40]), $8)
	*($1) = $10
	
.LABEL $label$11
	CALL db_idx64_update($10, $2, ($5 + [48]))
	
.LABEL $label$10
	$global$0 = ($5 + [112])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $24($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17419])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17419])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $48(CALL $47($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $71($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17682])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $82($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([128])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [96 align=4]) = (int_64)0
	*($5 + [104]) = [0]
	*($5 + [108]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [44])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [52])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [72])
	*($3 + [80]) = ($5 + [80])
	*($3 + [84]) = ($5 + [88])
	*($3 + [88]) = ($5 + [96])
	CALL $52(($3 + [32]), ($3 + [24]))
	*($5 + [112]) = $1
	*($5 + [116 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $45(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $86($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [96]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [104])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [17910])
	$3 = *($0 + [4])
	$4 = *(($3 + [120]))
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3897455725261094911, ($1 + [8]), *($3))
	*((*(($0 + [4])) + [120])) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [108]) == (int_32)$7), [17631])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$4 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)-3897455725261094912, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $27($7, $4)
	CALL eosio_assert(((int_32)*($2 + [108]) == (int_32)$7), [17631])
	
.LABEL $label$3
	*(($2 + [120])) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $75(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $67($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $86($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC $63 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17088])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16896]
	$3 = (((int_32)$1 * (int_32)[12]) + [16896])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $83([8704], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8696]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8700])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8696]) = [1]
	$2 = ($2 << [16])
	*([0] + [8700]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8700])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8700]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8696]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8696]) = [1]
	$3 = ($3 << [16])
	*([0] + [8700]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8700])
	
.LABEL $label$10
	*([0] + [8700]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $84($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8213])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $82 (int_32 $0)
{
	return CALL $83([8704], $0)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $82($1)
	
.LABEL $label$2
	*(CALL $72()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $82(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $86($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $72())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $81($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $72 ()
{
	return [8412]
}

void .FUNC $73 (int_32 $0)
{
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $76(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $71 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $77 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $78([8420])
	$3 = *([0] + [8428])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8432])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8436]
	*([0] + [8428]) = [8436]
	$4 = *([0] + [8432])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $85([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8428])
	*([0] + [8428]) = $3
	*([0] + [8432]) = [0]
	
.LABEL $label$2
	*([0] + [8432]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $79([8420])
	return [0]
	
.LABEL $label$1
	CALL $79([8420])
	return [-1]
}

void .FUNC $39 (int_32 $0)
{
	if ( ((*([0] + [8348]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8356]))
	
.LABEL $label$1
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_64 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$8 = ($global$0 - [192])
	$global$0 = $8
	*($8 + [144]) = $2
	*($8 + [152]) = $1
	*($8 + [136]) = $5
	$9 = ($0 + [80])
	$11 = *(($0 + [108]))
	$10 = *(($0 + [104]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$2 }
	
.LOOP $label$4:
	$12 = ($11 + [-24])
	$13 = *($12)
	if ( ((int_64)*($13) == (int_64)1) ){ goto $label$3 }
	$11 = $12
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$9), [17631])
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL $19($9, CALL $fimport$5(*($9), *(($0 + [88])), (int_64)-3904258391152787456, (int_64)1))
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$9), [17631])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($13 + [8]) != (int_32)[1]), *([0] + [8312]))
	CALL $38(($8 + [120]), $3)
	$1 = (int_64)0
	$14 = (($8 + [120]) | [4])
	$11 = *($8 + [120])
	if ( ((int_32)$11 == (int_32)$14) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = (int_64)0
	$12 = ($12 & [1])
	$12 = *($13 + [16])
	$13 = $11
	$11 = ( *($13 + [20]) ? uint_32($12 >> [1]) : $12 )
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$7 }
	$12 = ( *($13 + [24]) ? ($13 + [17]) : $12 )
	$11 = ($12 + $11)
	$5 = (int_64)0
	
.LOOP $label$8:
	$5 = ((int_64)((int_64)((int_64)$5 * (int_64)10) + (int_64)*($12)) + (int_64)-48)
	$12 = ($12 + [1])
	if ( ($12 <= $11) ){ goto $label$8 }
	
.LABEL $label$7
	$10 = (CASTING uint_32)(uint_64 $5)
	$12 = ($12 & [1])
	$12 = *($13 + [28])
	$11 = ( *($13 + [32]) ? uint_32($12 >> [1]) : $12 )
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$10 }
	$12 = ( *($13 + [36]) ? ($13 + [29]) : $12 )
	$11 = ($12 + $11)
	$5 = (int_64)0
	
.LOOP $label$11:
	$5 = ((int_64)((int_64)((int_64)$5 * (int_64)10) + (int_64)*($12)) + (int_64)-48)
	$12 = ($12 + [1])
	if ( ($12 <= $11) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$5 = (int_64)0
	
.LABEL $label$9
	CALL eosio_assert((($10 + [-1]) <= [9]), *([0] + [8316]))
	$12 = *($13 + [4])
	if ( ($12 == 0) ){ goto $label$13 }
	
.LOOP $label$14:
	$11 = $12
	$12 = *($11)
	if ( $12 ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$11 = *($13 + [8])
	if ( ((int_32)*($11) == (int_32)$13) ){ goto $label$12 }
	$13 = ($13 + [8])
	
.LOOP $label$15:
	$12 = *($13)
	$13 = ($12 + [8])
	$11 = *($12 + [8])
	if ( ((int_32)$12 != (int_32)*($11)) ){ goto $label$15 }
	
.LABEL $label$12
	$1 = ((int_64)$5 + (int_64)$1)
	if ( ((int_32)$11 != (int_32)$14) ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert(((int_64)$1 == (int_64)$4), *([0] + [8320]))
	$11 = *($8 + [120])
	if ( ((int_32)$11 == (int_32)$14) ){ goto $label$16 }
	$15 = ($0 + [64])
	$16 = ($0 + [40])
	$17 = ($0 + [108])
	$18 = ($0 + [104])
	$19 = ($0 + [88])
	$20 = ($0 + [80])
	$21 = ($8 + [68])
	$22 = ($8 + [88])
	$23 = ($8 + [72])
	$24 = ($8 + [76])
	$25 = (($8 + [56]) + [24])
	$26 = ($8 + [84])
	$27 = ($0 + [72])
	$28 = ($0 + [68])
	
.LOOP $label$17:
	$5 = (int_64)0
	$12 = ($12 & [1])
	$12 = *($13 + [16])
	$13 = $11
	$11 = ( *($13 + [20]) ? uint_32($12 >> [1]) : $12 )
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$18 }
	$12 = ( *($13 + [24]) ? ($13 + [17]) : $12 )
	$11 = ($12 + $11)
	$5 = (int_64)0
	
.LOOP $label$19:
	$5 = ((int_64)((int_64)((int_64)$5 * (int_64)10) + (int_64)*($12)) + (int_64)-48)
	$12 = ($12 + [1])
	if ( ($12 <= $11) ){ goto $label$19 }
	
.LABEL $label$18
	$10 = (CASTING uint_32)(uint_64 $5)
	*($8 + [116]) = $10
	$12 = ($12 & [1])
	$12 = *($13 + [28])
	$11 = ( *($13 + [32]) ? uint_32($12 >> [1]) : $12 )
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$21 }
	$12 = ( *($13 + [36]) ? ($13 + [29]) : $12 )
	$11 = ($12 + $11)
	$5 = (int_64)0
	
.LOOP $label$22:
	$5 = ((int_64)((int_64)((int_64)$5 * (int_64)10) + (int_64)*($12)) + (int_64)-48)
	$12 = ($12 + [1])
	if ( ($12 <= $11) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$5 = (int_64)0
	
.LABEL $label$20
	*($8 + [104]) = $5
	*($8 + [100]) = [0]
	if ( ((uint_32)($10 + [-1]) > (uint_32)[5]) ){ goto $label$33 }
	$11 = *($17)
	$3 = *($18)
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$31 }
	
.LOOP $label$34:
	$12 = ($11 + [-24])
	$10 = *($12)
	if ( ((int_64)*($10) == (int_64)6) ){ goto $label$32 }
	$11 = $12
	if ( ((int_32)$3 != (int_32)$12) ){ goto $label$34 }
	goto $label$31 
	
.LABEL $label$33
	if ( ((uint_32)($10 + [-7]) > (uint_32)[1]) ){ goto $label$35 }
	$11 = *($17)
	$3 = *($18)
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$28 }
	
.LOOP $label$36:
	$12 = ($11 + [-24])
	$10 = *($12)
	if ( ((int_64)*($10) == (int_64)5) ){ goto $label$29 }
	$11 = $12
	if ( ((int_32)$3 != (int_32)$12) ){ goto $label$36 }
	goto $label$28 
	
.LABEL $label$35
	if ( ((int_32)$10 != (int_32)[9]) ){ goto $label$23 }
	$11 = *($17)
	$3 = *($18)
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$25 }
	
.LOOP $label$37:
	$12 = ($11 + [-24])
	$10 = *($12)
	if ( ((int_64)*($10) == (int_64)7) ){ goto $label$26 }
	$11 = $12
	if ( ((int_32)$3 != (int_32)$12) ){ goto $label$37 }
	goto $label$25 
	
.LABEL $label$32
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$31 }
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$9), [17631])
	goto $label$30 
	
.LABEL $label$31
	$10 = CALL $19($9, CALL $fimport$5(*($20), *($19), (int_64)-3904258391152787456, (int_64)6))
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$9), [17631])
	
.LABEL $label$30
	*($8 + [100]) = *($10 + [8])
	goto $label$23 
	
.LABEL $label$29
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$28 }
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$9), [17631])
	goto $label$27 
	
.LABEL $label$28
	$10 = CALL $19($9, CALL $fimport$5(*($20), *($19), (int_64)-3904258391152787456, (int_64)5))
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$9), [17631])
	
.LABEL $label$27
	*($8 + [100]) = *($10 + [8])
	goto $label$23 
	
.LABEL $label$26
	if ( ((int_32)$3 == (int_32)$11) ){ goto $label$25 }
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$9), [17631])
	goto $label$24 
	
.LABEL $label$25
	$10 = CALL $19($9, CALL $fimport$5(*($20), *($19), (int_64)-3904258391152787456, (int_64)7))
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$9), [17631])
	
.LABEL $label$24
	*($8 + [100]) = *($10 + [8])
	
.LABEL $label$23
	$5 = *($0)
	*($21) = $7
	*($22) = $6
	*($8 + [56]) = $0
	*((($8 + [56]) + [8])) = ($8 + [152])
	*($23) = ($8 + [116])
	*($24) = ($8 + [104])
	*($25) = ($8 + [100])
	*($26) = ($8 + [136])
	*($8 + [60]) = ($8 + [144])
	*($8 + [176]) = $5
	CALL eosio_assert(((int_64)*($16) == (int_64)CALL $fimport$8()), [17705])
	*($8 + [40]) = $16
	*((($8 + [40]) + [8])) = ($8 + [176])
	*($8 + [44]) = ($8 + [56])
	*(($12 = CALL _Znwj([128])) + [24]) = (int_64)0
	*($12 + [16]) = (int_64)0
	*($12 + [96 align=4]) = (int_64)0
	*($12 + [104]) = [0]
	*($12 + [108]) = $16
	CALL $44(($8 + [40]), $12)
	*($8 + [168]) = $12
	$5 = *($12)
	*($8 + [40]) = $5
	$10 = *($12 + [112])
	*($8 + [164]) = $10
	$11 = *($28)
	if ( ((uint_32)$11 >= (uint_32)*($27)) ){ goto $label$43 }
	*($11 + [8]) = $5
	*($11 + [16]) = $10
	*($8 + [168]) = [0]
	*($11) = $12
	*($28) = ($11 + [24])
	$12 = *($8 + [168])
	*($8 + [168]) = [0]
	if ( ($12 == 0) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	CALL $45($15, ($8 + [168]), ($8 + [40]), ($8 + [164]))
	$12 = *($8 + [168])
	*($8 + [168]) = [0]
	if ( $12 ){ goto $label$41 }
	
.LABEL $label$42
	$12 = *($13 + [4])
	if ( ($12 == 0) ){ goto $label$39 }
	goto $label$40 
	
.LABEL $label$41
	if ( ((*($12 + [96]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($12 + [104])))
	
.LABEL $label$44
	CALL _ZdlPv($12)
	$12 = *($13 + [4])
	if ( ($12 == 0) ){ goto $label$39 }
	
.LABEL $label$40
	
.LOOP $label$45:
	$11 = $12
	$12 = *($11)
	if ( $12 ){ goto $label$45 }
	goto $label$38 
	
.LABEL $label$39
	$11 = *($13 + [8])
	if ( ((int_32)*($11) == (int_32)$13) ){ goto $label$38 }
	$13 = ($13 + [8])
	
.LOOP $label$46:
	$12 = *($13)
	$13 = ($12 + [8])
	$11 = *($12 + [8])
	if ( ((int_32)$12 != (int_32)*($11)) ){ goto $label$46 }
	
.LABEL $label$38
	if ( ((int_32)$11 != (int_32)$14) ){ goto $label$17 }
	
.LABEL $label$16
	$11 = *(($0 + [108]))
	$10 = *(($0 + [104]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$48 }
	
.LOOP $label$50:
	$12 = ($11 + [-24])
	$13 = *($12)
	if ( ((int_64)*($13) == (int_64)4) ){ goto $label$49 }
	$11 = $12
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$48 }
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$9), [17631])
	goto $label$47 
	
.LABEL $label$48
	$13 = [0]
	$12 = CALL db_find_i64(*(($0 + [80])), *(($0 + [88])), (int_64)-3904258391152787456, (int_64)4)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$47 }
	$13 = CALL $19($9, $12)
	CALL eosio_assert(((int_32)*($13 + [24]) == (int_32)$9), [17631])
	
.LABEL $label$47
	$5 = *($0 + [32])
	*($8 + [44]) = [6]
	*($8 + [40]) = [17410]
	*($8 + [24]) = *($8 + [40])
	$1 = *(CALL $4(($8 + [56]), ($8 + [24])))
	$4 = *($13 + [16])
	*($8 + [44]) = [3]
	*($8 + [40]) = [17416]
	*($8 + [16]) = *($8 + [40])
	$2 = *(CALL $4(($8 + [56]), ($8 + [16])))
	$12 = *($7)
	if ( ($12 & [1]) ){ goto $label$52 }
	$12 = uint_32($12 >> [1])
	$11 = ($7 + [1])
	goto $label$51 
	
.LABEL $label$52
	$12 = *($7 + [4])
	$11 = *($7 + [8])
	
.LABEL $label$51
	*($8 + [36]) = $12
	*($8 + [32]) = $11
	*($8 + [8]) = *($8 + [32])
	$12 = CALL $4(($8 + [104]), ($8 + [8]))
	*($8 + [56]) = $4
	*($8 + [64]) = $2
	*($8 + [40]) = *($8 + [152])
	*($8 + [48]) = *($12)
	*(($12 = CALL _Znwj([16]))) = $5
	*($12 + [8]) = $1
	*(($8 + [92])) = [0]
	$11 = ($12 + [16])
	*(($8 + [80])) = $11
	*(($8 + [76])) = $11
	*($8 + [72]) = $12
	*($8 + [84 align=4]) = (int_64)0
	CALL $24(($8 + [84]), [16])
	$12 = *($8 + [84])
	$11 = (*(($8 + [88])) - $12)
	CALL eosio_assert(((int_32)$11 > (int_32)[7]), [17419])
	CALL memcpy($12, ($8 + [40]), [8])
	CALL eosio_assert(((int_32)($11 + [-8]) > (int_32)[7]), [17419])
	CALL memcpy(($12 + [8]), (($8 + [40]) + [8]), [8])
	CALL $25(($8 + [176]), ($8 + [56]))
	$12 = *($8 + [176])
	CALL send_inline($12, (*($8 + [180]) - $12))
	$12 = *($8 + [176])
	if ( ($12 == 0) ){ goto $label$53 }
	*($8 + [180]) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$53
	$12 = *($8 + [84])
	if ( ($12 == 0) ){ goto $label$54 }
	*(($8 + [88])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$54
	$12 = *($8 + [72])
	if ( ($12 == 0) ){ goto $label$55 }
	*(($8 + [76])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$55
	CALL $37(($8 + [120]), *($8 + [124]))
	$global$0 = ($8 + [192])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $37($0, *($1))
	CALL $37($0, *($1 + [4]))
	if ( ((*(($1 + [28])) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($1 + [36])))
	
.LABEL $label$2
	if ( ((*(($1 + [16])) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$3
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $78 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $79 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = (($2 + [16]) + [8]))) = *(($1 + [24]))
	*($2 + [16]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $64($2, ($1 + [32]))
	*((($2 + [32]) + [8])) = *($3)
	*($2 + [32]) = *($2 + [16])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	$6 = CALL $64(($2 + [48]), $1)
	CALL void $3((int_32 $5), (int_64 $4), (int_64 ($2 + [32])), (int_32 $6), (int_32 $0))
	if ( (*($2 + [48]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($0 + [4 align=4]) = (int_64)0
	$3 = ($0 + [4])
	*($0) = $3
	$4 = CALL $69($1, [58], [0])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$1 }
	$5 = ($1 + [1])
	$6 = ($1 + [4])
	$7 = ($1 + [8])
	$8 = [0]
	
.LOOP $label$2:
	$9 = *($1)
	$13 = *($6)
	$11 = *($7)
	$10 = CALL $77([8299])
	$9 = ($9 & [1])
	$13 = ( $13 ? uint_32($9 >> [1]) : $9 )
	if ( ((uint_32)$13 <= (uint_32)$4) ){ goto $label$1 }
	$11 = ( $11 ? $5 : $9 )
	$9 = ($11 + $4)
	if ( ($10 == 0) ){ goto $label$3 }
	$13 = ($13 - $4)
	
.LOOP $label$4:
	if ( (CALL $75([8299], *($9), $10) == 0) ){ goto $label$3 }
	$9 = ($9 + [1])
	$13 = ($13 + [-1])
	if ( $13 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$13 = ($9 - $11)
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$1 }
	$11 = *($1)
	$12 = *($6)
	$14 = *($7)
	$9 = CALL $77([8302])
	$10 = [-1]
	$11 = ($11 & [1])
	$12 = ( $12 ? uint_32($11 >> [1]) : $11 )
	if ( ($12 <= $13) ){ goto $label$5 }
	$10 = $13
	if ( ($9 == 0) ){ goto $label$5 }
	$11 = ($14 + $13)
	$14 = ( $14 ? $5 : $11 )
	$12 = ($14 + $12)
	$10 = ($12 - $11)
	if ( ((int_32)$10 < (int_32)$9) ){ goto $label$7 }
	
.LOOP $label$8:
	$10 = (($10 - $9) + [1])
	if ( ($10 == 0) ){ goto $label$7 }
	$10 = CALL $75($11, [59], $10)
	if ( ($10 == 0) ){ goto $label$7 }
	if ( (CALL $76($10, [8302], $9) == 0) ){ goto $label$6 }
	$11 = ($10 + [1])
	$10 = ($12 - $11)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$8 }
	
.LABEL $label$7
	$10 = $12
	
.LABEL $label$6
	$10 = ( [-1] ? ($10 - $14) : ((int_32)$10 == (int_32)$12) )
	
.LABEL $label$5
	$9 = CALL $65(($2 + [16]), $1, $8, ($4 - $8), $1)
	CALL $65($2, $1, $13, ($10 - $13), $1)
	$13 = CALL $34($0, ($2 + [28]), $9)
	if ( *($13) ){ goto $label$13 }
	*(($9 = CALL _Znwj([40]))) = (int_64)0
	$4 = (($2 + [16]) + [8])
	*(($9 + [24])) = *($4)
	*($9 + [16 align=4]) = *($2 + [16])
	*($9 + [28 align=4]) = *($2)
	$8 = ($2 + [8])
	*(($9 + [36])) = *($8)
	*($9 + [8]) = *($2 + [28])
	*($2) = (int_64)0
	*($13) = $9
	*($4) = [0]
	*($8) = [0]
	*($2 + [16]) = (int_64)0
	$4 = *(*($0))
	if ( ($4 == 0) ){ goto $label$14 }
	*($0) = $4
	$9 = *($13)
	
.LABEL $label$14
	CALL $35(*($3), $9)
	*(($9 = ($0 + [8]))) = (*($9) + [1])
	if ( ((*($2) & [1]) == 0) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((*($2) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($2 + [8])))
	if ( (*($2 + [16]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*((($2 + [16]) + [8])))
	
.LABEL $label$9
	$8 = ( [-1] ? ($10 + [1]) : ((int_32)$10 == (int_32)[-1]) )
	$4 = CALL $69($1, [58], $8)
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $71($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17622])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17622])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $17(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}