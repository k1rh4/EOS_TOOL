(data (i32.const 8192) "code = \00")
(data (i32.const 8200) "  \00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8289) "action= \00")
(data (i32.const 8298) "coinidcoinid\00")
(data (i32.const 8311) " account not exist \00")
(data (i32.const 8331) " account exist \00")
(data (i32.const 8347) "transfer\00")
(data (i32.const 8356) "eosio.token\00")
(data (i32.const 8368) "\e8\bf\99\e4\b8\aa\e8\b4\a6\e5\8f\b7\e7\94\a8\e4\ba\8e\e5\88\9b\e5\bb\baEOS\e6\97\b6\e4\bd\bf\e7\94\a8\ef\bc\8c\e7\a6\81\e6\ad\a2\e8\bd\ac\e8\b4\a6EOS\e7\bb\99\e5\85\b6\e4\bb\96\e7\9a\84\e8\b4\a6\e6\88\b7\e3\80\82\e5\8f\af\e4\bb\a5\e8\bd\ac\e8\b4\a6\e4\bb\a3\e5\b8\81\ef\bc\81\00")
(data (i32.const 8465) "read\00")
(data (i32.const 8470) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8519) "invalid symbol name\00")
(data (i32.const 8539) "get\00")
(data (i32.const 8543) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8594) "error reading iterator\00")
(data (i32.const 8617) "cannot pass end iterator to erase\00")
(data (i32.const 8651) "cannot increment end iterator\00")
(data (i32.const 8681) "object passed to erase is not in multi_index\00")
(data (i32.const 8726) "cannot erase objects in table of another contract\00")
(data (i32.const 8776) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8829) "cannot create objects in table of another contract\00")
(data (i32.const 8880) "write\00")
(import "env" "eosio_exit" (func $fimport$0 (param i32)))
(import "env" "prints" (func $fimport$1 (param i32)))
(import "env" "printn" (func $fimport$2 (param i64)))
(import "env" "printui" (func $fimport$3 (param i64)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$11 (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$14 (param i32)))
(import "env" "abort" (func $fimport$15))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$25 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$28 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$29 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$32 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$34 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$35 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$36 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $17))
(export "_Znwj" (func $15))
(export "_Znaj" (func $16))
(export "_ZdaPv" (func $18))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $4 $6)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17296))
(global $global$2 i32 (i32.const 17296))


void .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17284])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17092]
	$3 = (((int_32)$1 * (int_32)[12]) + [17092])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8892]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8896])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8892]) = [1]
	$2 = ($2 << [16])
	*([0] + [8896]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8896])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8896]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8892]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8892]) = [1]
	$3 = ($3 << [16])
	*([0] + [8896]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8896])
	
.LABEL $label$10
	*([0] + [8896]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8594])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $22($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8465])
	CALL memcpy($5, $2, [8])
	*($5 + [12]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $10(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $25($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [8681])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [8726])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8776])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [12]))
}

void .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8298]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	$9 = ($0 + [8])
	$8 = *(($0 + [36]))
	$10 = *(($0 + [32]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$9:
	$5 = ($8 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$8 }
	$8 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($11 + [8]) == (int_32)$9), [8543])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8311])
	if ( $11 ){ goto $label$6 }
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$7
	$5 = CALL db_find_i64(*($9), *(($0 + [16])), (int_64)-8384316215655022592, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$5 }
	$11 = CALL $8($9, $5)
	CALL eosio_assert(((int_32)*($11 + [8]) == (int_32)$9), [8543])
	CALL eosio_assert([1], [8311])
	
.LABEL $label$6
	CALL eosio_assert([1], [8617])
	CALL eosio_assert([1], [8651])
	$5 = CALL db_next_i64(*($11 + [12]), ($2 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	CALL $8($9, $5)
	
.LABEL $label$10
	CALL $9($9, $11)
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$5
	CALL eosio_assert([0], [8311])
	$global$0 = ($2 + [16])
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $22($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	CALL read_action_data($4, $3)
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [8470])
	$5 = (int_64)5459781
	$1 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $6
	$7 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $6
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [8519])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($2 + [4]) = $4
	*($2) = $4
	*($2 + [8]) = ($4 + $3)
	CALL $11($2, $0)
	$global$0 = ($2 + [16])
}

void .FUNC $4 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8298]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	$9 = ($0 + [8])
	$8 = *(($0 + [36]))
	$10 = *(($0 + [32]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$8:
	$5 = ($8 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$7 }
	$8 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($11 + [8]) == (int_32)$9), [8543])
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	$5 = CALL db_find_i64(*($9), *(($0 + [16])), (int_64)-8384316215655022592, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$11 = CALL $8($9, $5)
	CALL eosio_assert(((int_32)*($11 + [8]) == (int_32)$9), [8543])
	
.LABEL $label$5
	CALL eosio_assert(($11 == 0), [8331])
	$4 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$8()), [8829])
	*(($5 = CALL _Znwj([24])) + [8]) = $9
	*($5) = $1
	CALL eosio_assert([1], [8880])
	CALL memcpy(($2 + [16]), $5, [8])
	$3 = *($5)
	$11 = CALL db_store_i64(*(($0 + [16])), (int_64)-8384316215655022592, $4, $3, ($2 + [16]), [8])
	*($5 + [12]) = $11
	$8 = ($0 + [24])
	if ( (uint_64)($3 <= *($8)) ){ goto $label$9 }
	*($8) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($2 + [8]) = $5
	$3 = *($5)
	*($2 + [16]) = $3
	*($2 + [4]) = $11
	$10 = ($0 + [36])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [40]))) ){ goto $label$12 }
	*($8 + [8]) = $3
	*($8 + [16]) = $11
	*($2 + [8]) = [0]
	*($8) = $5
	*($10) = ($8 + [24])
	$5 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $5 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $10(($0 + [32]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$5 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$global$0 = ($2 + [32])
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $22($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [8465])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $25($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	CALL prints($0)
	CALL printn(*($1))
	CALL prints($2)
	CALL prints($3)
	CALL printui(*($4))
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [80])
	$global$0 = $4
	if ( ((int_64)$3 == (int_64)-4863887597560135680) ){ goto $label$2 }
	if ( ((int_64)$3 != (int_64)3625960649986670592) ){ goto $label$1 }
	*($4 + [76]) = [0]
	*($4 + [72]) = [1]
	*($4) = *($4 + [72])
	CALL $5($0, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [68]) = [0]
	*($4 + [64]) = [2]
	*($4 + [8]) = *($4 + [64])
	CALL $5($0, ($4 + [8]))
	
.LABEL $label$1
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [8347]
	$8 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$8 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ($9 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$10 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$4
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$10 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$3 }
	if ( ((int_64)$8 != (int_64)$3) ){ goto $label$9 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [8356]
	$8 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$15 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$9 = ($9 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$10 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$11
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)4294967291)
	$8 = ((int_64)$10 | (int_64)$8)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$10 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$9 }
	CALL $7(($4 + [16]))
	$5 = *($4 + [24])
	if ( ((int_64)$5 == (int_64)$1) ){ goto $label$16 }
	$11 = ($0 + [8])
	$9 = *(($0 + [36]))
	$12 = *(($0 + [32]))
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$18 }
	
.LOOP $label$20:
	$7 = ($9 + [-24])
	$13 = *($7)
	if ( ((int_64)*($13) == (int_64)$5) ){ goto $label$19 }
	$9 = $7
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*($13 + [8]) == (int_32)$11), [8543])
	goto $label$17 
	
.LABEL $label$18
	$13 = [0]
	$7 = CALL db_find_i64(*($11), *(($0 + [16])), (int_64)-8384316215655022592, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$17 }
	$13 = CALL $8($11, $7)
	CALL eosio_assert(((int_32)*($13 + [8]) == (int_32)$11), [8543])
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [8368])
	
.LABEL $label$16
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$9
	$global$0 = ($4 + [80])
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL memory()
	*($3 + [56]) = $2
	*($3 + [8]) = $1
	CALL $2([8192], ($3 + [8]), [8200], [8289], ($3 + [56]))
	*(($3 + [24])) = $0
	*(($3 + [32])) = (int_64)-1
	*(($3 + [40])) = (int_64)0
	*(($3 + [48])) = [0]
	*($3 + [16]) = $0
	*($3 + [8]) = $0
	CALL $3(($3 + [8]), $0, $1, *($3 + [56]))
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $21($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $22($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8888])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $22($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $25($0)
	
.LABEL $label$1
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $21($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $12($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8465])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8465])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8465])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8465])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $13($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $20($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $20($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $19($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8539])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $14($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8465])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $21 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $24($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8203])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $22 (int_32 $0)
{
	return CALL $23([8900], $0)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $19 (int_32 $0)
{
	CALL abort()
	(unreachable)
}