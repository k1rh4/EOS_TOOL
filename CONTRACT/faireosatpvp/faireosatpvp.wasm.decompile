(data (i32.const 4) "\a0i\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "transfer\00")
(data (i32.const 144) "cannot increment end iterator\00")
(data (i32.const 176) "cannot pass end iterator to erase\00")
(data (i32.const 224) "object passed to erase is not in multi_index\00")
(data (i32.const 272) "cannot erase objects in table of another contract\00")
(data (i32.const 336) "attempt to remove object that was not in multi_index\00")
(data (i32.const 400) "error reading iterator\00")
(data (i32.const 432) "read\00")
(data (i32.const 448) "get\00")
(data (i32.const 464) "invalid symbol name\00")
(data (i32.const 496) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 560) "no pay info\00")
(data (i32.const 576) "active\00")
(data (i32.const 592) "\e6\9d\a5\e8\87\aaFairEOS\e7\9a\84\e9\80\80\e5\b8\81-Refund From FairEOS\00")
(data (i32.const 640) "cannot pass end iterator to modify\00")
(data (i32.const 688) "object passed to modify is not in multi_index\00")
(data (i32.const 736) "cannot modify objects in table of another contract\00")
(data (i32.const 800) "updater cannot change primary key when modifying an object\00")
(data (i32.const 864) "write\00")
(data (i32.const 880) "global config info not exist\00")
(data (i32.const 912) "The game has not yet been initialized\00")
(data (i32.const 960) "The game has not yet been activated\00")
(data (i32.const 1008) "the game is over\00")
(data (i32.const 1040) "Invalid number of players\00")
(data (i32.const 1072) "Tie\00")
(data (i32.const 1088) "Invalid winner point\00")
(data (i32.const 1120) "\02\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\n\00\00\00\00\00\00\00")
(data (i32.const 1184) "faireoslucky\00")
(data (i32.const 1200) "faireosthank\00")
(data (i32.const 1216) "faireosblack\00")
(data (i32.const 1232) "You Win\00")
(data (i32.const 1248) "faireosgiver\00")
(data (i32.const 1264) "You Lose\00")
(data (i32.const 1280) "faireostoken\00")
(data (i32.const 1296) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 1360) "winner info not exist\00")
(data (i32.const 1392) "signature invalid\00")
(data (i32.const 1424) "player info not exist\00")
(data (i32.const 1456) "the game info is exist\00")
(data (i32.const 1488) "cannot create objects in table of another contract\00")
(data (i32.const 1552) "invalid token type\00")
(data (i32.const 1584) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1648) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1712) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1760) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1824) "poker:\00")
(data (i32.const 1840) "divide by zero\00")
(data (i32.const 1856) "signed division overflow\00")
(data (i32.const 1888) "@\00")
(data (i32.const 1904) "player seed length invalid\00")
(data (i32.const 1936) "player seed invalid\00")
(data (i32.const 1968) "inviter account does not exist\00")
(data (i32.const 2000) "referer invalid\00")
(data (i32.const 2016) "need complete the current game\00")
(data (i32.const 2048) "do not transfer money multiple times\00")
(data (i32.const 2096) "invalide token type\00")
(data (i32.const 2128) "Betting type not supported\00")
(data (i32.const 10560) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$9 (param i32)))
(import "env" "db_idx64_store" (func $fimport$10 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$11 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$15 (param i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$17 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$18 (param i32 i32)))
(import "env" "is_account" (func $fimport$19 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$24 (param i64)))
(import "env" "require_auth2" (func $fimport$25 (param i64 i64)))
(import "env" "send_inline" (func $fimport$26 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN9blackjack8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $6))
(export "_ZN9blackjack8setparamEN5eosio5assetE" (func $8))
(export "_ZN9blackjack8activateEb" (func $10))
(export "_ZN9blackjack9startgameEyN5eosio5assetENSt3__16vectorINS_11playerinialENS2_9allocatorIS4_EEEE" (func $12))
(export "_ZN9blackjack7endgameEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorINS_12playerresultENS4_IS8_EEEE" (func $14))
(export "_ZN9blackjack12setpublickeyENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $16))
(export "_ZN9blackjack6refundEy" (func $18))
(export "_ZN9blackjack11clearrecordEv" (func $20))
(export "malloc" (func $92))
(export "free" (func $95))
(export "memcmp" (func $107))
(export "strlen" (func $108))
(export "memchr" (func $109))
(table $0 9 9 anyfunc)
(elem (i32.const 0) $110 $8 $10 $12 $14 $18 $6 $16 $20)



void .FUNC $98 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $100($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10646]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10648])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10646]) = [1]
	$7 = ($7 << [16])
	*([0] + [10648]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10648])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10648]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10646]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10646]) = [1]
	$3 = ($3 << [16])
	*([0] + [10648]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10648])
	
.LABEL $label$8
	*([0] + [10648]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10540])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10348]
	$1 = (((int_32)$2 * (int_32)[12]) + [10348])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10652])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $97 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$7 = [0]
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	$5 = *($0)
	*($8 + [8]) = $5
	*($8 + [16]) = $5
	*($8 + [32]) = (int_64)0
	$0 = CALL db_lowerbound_i64($5, $5, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = *(($4 + [28]))
	$4 = CALL $46(($8 + [8]), $0)
	$0 = *($4 + [24])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	$3 = *($1)
	$2 = *($1 + [8])
	$7 = [0]
	
.LOOP $label$3:
	$5 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)$2), [1760])
	$1 = ((int_64)$5 == (int_64)$3)
	$7 = ( [1] ? $7 : $1 )
	if ( $1 ){ goto $label$2 }
	$0 = ($0 + [16])
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$7 = ($7 & [1])
	
.LABEL $label$1
	CALL eosio_assert($7, [2128])
	$4 = *($8 + [32])
	if ( ($4 == 0) ){ goto $label$4 }
	$6 = (($8 + [8]) + [28])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$9 }
	*(($0 + [28])) = $1
	CALL $97($1)
	
.LABEL $label$9
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$10 }
	CALL $97(*(($0 + [20])))
	
.LABEL $label$10
	CALL $97($0)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$7 }
	$0 = *(($8 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($6) = $4
	CALL $97($0)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [48])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$6 = *($3)
	$5 = *($6 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)5093222948379033600, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $36($6, $4)
	*($7 + [28]) = [0]
	*($7 + [24]) = $6
	$5 = *(*(CALL $79(($7 + [24])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [1584])
	$5 = *(($6 + [16]))
	*($1 + [8]) = (int_64)0
	*($1) = $5
	*($1 + [16]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$6 = *($3 + [4])
	*($1 + [24]) = *($6)
	$5 = *(($6 + [8]))
	*($1 + [40]) = [0]
	*(($1 + [32])) = $5
	$8 = $8
	$6 = ($8 + [-48])
	*([0] + [4]) = $6
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($8 + [-11])
	*($7 + [16]) = $7
	*($7 + [28]) = ($1 + [8])
	*($7 + [24]) = $1
	*($7 + [32]) = ($1 + [16])
	*($7 + [36]) = ($1 + [24])
	*($7 + [40]) = ($1 + [40])
	CALL $39(($7 + [24]), ($7 + [16]))
	$5 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($2 + [8]), (int_64)5093222948379033600, *(*($0 + [8])), $5, $6, [37])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $93([2156], $0)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $94($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10560])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $32($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [864])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [864])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $41(CALL $40($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [448])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $51($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [432])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [432])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [864])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [864])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [864])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [864])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [864])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [864])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $43(*($1), ($0 + [32]))
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [864])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [864])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [864])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [864])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [864])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$3 = *($1)
	$4 = ($1 + [12])
	CALL $99($4, *($2))
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [800])
	$2 = *($1 + [12])
	$7 = ( *(($1 + [16])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($7 + [9])
	$9 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$7 = ($1 + [24])
	$6 = *($1 + [24])
	$5 = *(($1 + [28]))
	$8 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$3 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$3
	if ( ($2 <= [513]) ){ goto $label$5 }
	$10 = CALL malloc($2)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($10 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$4
	*($11) = $10
	$5 = ($10 + $2)
	*($11 + [8]) = $5
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [864])
	CALL memcpy($10, $1, [8])
	*($11 + [15]) = *($1 + [8])
	$6 = ($10 + [8])
	CALL eosio_assert(((int_32)($5 - $6) > (int_32)[0]), [864])
	CALL memcpy($6, ($11 + [15]), [1])
	*($11 + [4]) = ($10 + [9])
	CALL $43($11, $4)
	CALL $48($11, $7)
	CALL db_update_i64(*($1 + [40]), (int_64)0, $10, $2)
	if ( ($2 <= [513]) ){ goto $label$6 }
	CALL free($10)
	
.LABEL $label$6
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [400])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $96([48])) + [12 align=4]) = (int_64)0
	*($6 + [20 align=4]) = (int_64)0
	*($6 + [28 align=4]) = (int_64)0
	*($6 + [36]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [432])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [432])
	CALL memcpy(($8 + [16]), $3, [1])
	*($6 + [8]) = ((int_32)*($8 + [16]) != (int_32)[0])
	*($8 + [36]) = ($4 + [9])
	CALL $30(($8 + [32]), ($6 + [12]))
	CALL $49(($8 + [32]), ($6 + [24]))
	*($6 + [40]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [40])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $50(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [24])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [28])) = $7
	CALL $97($7)
	
.LABEL $label$10
	if ( ((*($4 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL $97(*(($4 + [20])))
	
.LABEL $label$11
	CALL $97($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $96(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $104($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $97($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $97($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [432])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [432])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [432])
	CALL memcpy($0, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
}

void .FUNC _ZN9blackjack8setparamEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	*(($3 = ($7 + [48]))) = [0]
	*($7 + [32]) = (int_64)-1
	$2 = *($0)
	*($7 + [16]) = $2
	*($7 + [24]) = $2
	*($7 + [40]) = (int_64)0
	$4 = CALL db_lowerbound_i64($2, $2, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$0 = CALL $46(($7 + [16]), $4)
	*($7 + [64]) = $1
	CALL eosio_assert([1], [640])
	CALL $86(($7 + [16]), $0, ($7 + [64]))
	$3 = *($7 + [40])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($7 + [8]) = $1
	*($7 + [88]) = $5
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$2()), [1488])
	*($7 + [68]) = ($7 + [8])
	*($7 + [64]) = ($7 + [16])
	*($7 + [72]) = ($7 + [88])
	*(($0 = CALL $96([48])) + [12 align=4]) = (int_64)0
	*($0 + [20 align=4]) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*($0 + [36]) = ($7 + [16])
	CALL $85(($7 + [64]), $0)
	*($7 + [80]) = $0
	$2 = *($0)
	*($7 + [64]) = $2
	$4 = *($0 + [40])
	*($7 + [60]) = $4
	$6 = ($7 + [44])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*($3)) ){ goto $label$5 }
	*($1 + [8]) = $2
	*($1 + [16]) = $4
	*($7 + [80]) = [0]
	*($1) = $0
	*($6) = ($1 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $50(($7 + [40]), ($7 + [80]), ($7 + [64]), ($7 + [60]))
	
.LABEL $label$4
	$0 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$7 }
	*(($0 + [28])) = $1
	CALL $97($1)
	
.LABEL $label$7
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$8 }
	CALL $97(*(($0 + [20])))
	
.LABEL $label$8
	CALL $97($0)
	
.LABEL $label$6
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = (($7 + [16]) + [28])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	$4 = *($0 + [24])
	if ( ($4 == 0) ){ goto $label$13 }
	*(($0 + [28])) = $4
	CALL $97($4)
	
.LABEL $label$13
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$14 }
	CALL $97(*(($0 + [20])))
	
.LABEL $label$14
	CALL $97($0)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$11 }
	$0 = *(($7 + [40]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $3
	
.LABEL $label$9
	*($6) = $3
	CALL $97($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [80])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	CALL $84(($6 + [16]), $4, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*(($1 = (($6 + [32]) + [8]))) = *((($6 + [16]) + [8]))
	*($6 + [32]) = *($6 + [16])
	*((($6 + [48]) + [8])) = *($1)
	*($6 + [48]) = *($6 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$3 = *((($6 + [48]) + [8]))
	*((($6 + [64]) + [8])) = $3
	*(($6 + [8])) = $3
	$3 = *($6 + [48])
	*($6 + [64]) = $3
	*($6) = $3
	CALL void $1((int_32 $6), (int_32 $5))
	*([0] + [4]) = ($6 + [80])
	return [1]
}

void .FUNC _ZN9blackjack8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [352])
	*([0] + [4]) = $17
	$13 = *($0)
	if ( ((int_64)$13 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$13 != (int_64)$2) ){ goto $label$2 }
	CALL $106(($17 + [320]), $4, [0], [6], $4)
	$12 = *($17 + [320])
	$8 = CALL strlen([1824])
	if ( ((int_32)$8 != (int_32)( *($17 + [324]) ? uint_32($12 >> [1]) : ($12 & [1]) )) ){ goto $label$3 }
	if ( CALL $103(($17 + [320]), [0], [-1], [1824], $8) ){ goto $label$3 }
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1397703940), [2096])
	*(($17 + [312])) = [0]
	*($17 + [296]) = (int_64)-1
	$2 = *($0)
	*($17 + [280]) = $2
	*($17 + [288]) = $2
	*($17 + [304]) = (int_64)0
	$12 = [0]
	$8 = CALL db_lowerbound_i64($2, $2, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$12 = CALL $46(($17 + [280]), $8)
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [960])
	CALL eosio_assert(*($12 + [8]), [960])
	*(($12 = (($17 + [264]) + [8]))) = *(($3 + [8]))
	*($17 + [264]) = *($3)
	CALL eosio_assert([1], [1840])
	$2 = *($17 + [264])
	CALL eosio_assert([1], [1856])
	*(($17 + [8])) = *($12)
	$2 = ((int_64)$2 / (int_64)10)
	*($17 + [264]) = $2
	*($17) = $2
	CALL $90($0, $17)
	$12 = *($4)
	if ( ($12 & [1]) ){ goto $label$6 }
	$6 = uint_32($12 >> [1])
	$10 = ($4 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($4 + [4])
	$10 = *($4 + [8])
	
.LABEL $label$5
	$8 = CALL strlen([1824])
	if ( ($8 == 0) ){ goto $label$8 }
	$5 = ($10 + $6)
	$12 = $5
	if ( ((int_32)$6 < (int_32)$8) ){ goto $label$9 }
	$12 = $10
	
.LOOP $label$11:
	$6 = (($6 - $8) + [1])
	if ( ($6 == 0) ){ goto $label$10 }
	$12 = CALL memchr($12, [112], $6)
	if ( ($12 == 0) ){ goto $label$10 }
	if ( (CALL memcmp($12, [1824], $8) == 0) ){ goto $label$9 }
	$12 = ($12 + [1])
	$6 = ($5 - $12)
	if ( ((int_32)$6 >= (int_32)$8) ){ goto $label$11 }
	
.LABEL $label$10
	$12 = $5
	
.LABEL $label$9
	$10 = ( [-1] ? ($12 - $10) : ((int_32)$12 == (int_32)$5) )
	goto $label$7 
	
.LABEL $label$8
	$10 = [0]
	
.LABEL $label$7
	$12 = *($4)
	if ( ($12 & [1]) ){ goto $label$13 }
	$8 = uint_32($12 >> [1])
	$11 = ($4 + [1])
	goto $label$12 
	
.LABEL $label$13
	$8 = *($4 + [4])
	$11 = *($4 + [8])
	
.LABEL $label$12
	$6 = [0]
	$12 = CALL strlen([1888])
	if ( ($12 == 0) ){ goto $label$14 }
	if ( ((int_32)$8 < (int_32)$12) ){ goto $label$15 }
	$5 = ($11 + $8)
	$6 = $11
	
.LOOP $label$16:
	$8 = (($8 - $12) + [1])
	if ( ($8 == 0) ){ goto $label$15 }
	$8 = CALL memchr($6, [64], $8)
	if ( ($8 == 0) ){ goto $label$15 }
	if ( (CALL memcmp($8, [1888], $12) == 0) ){ goto $label$17 }
	$6 = ($8 + [1])
	$8 = ($5 - $6)
	if ( ((int_32)$8 >= (int_32)$12) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$15 }
	$6 = ($8 - $11)
	goto $label$14 
	
.LABEL $label$15
	$6 = [-1]
	
.LABEL $label$14
	*($17 + [256]) = [0]
	*($17 + [248]) = (int_64)0
	*($17 + [240]) = [0]
	*($17 + [232]) = (int_64)0
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$23 }
	CALL $106(($17 + [32]), $4, ($10 + [6]), (([-6] - $10) + $6), $4)
	if ( (*($17 + [248]) & [1]) ){ goto $label$22 }
	*($17 + [248]) = [0]
	goto $label$21 
	
.LABEL $label$23
	CALL $106(($17 + [32]), $4, ($10 + [6]), [-1], $4)
	if ( (*($17 + [248]) & [1]) ){ goto $label$20 }
	*($17 + [248]) = [0]
	goto $label$19 
	
.LABEL $label$22
	*(*(($17 + [256]))) = [0]
	*($17 + [252]) = [0]
	
.LABEL $label$21
	CALL $101(($17 + [248]), [0])
	*((($17 + [248]) + [8])) = *((($17 + [32]) + [8]))
	*($17 + [248]) = *($17 + [32])
	CALL $106(($17 + [32]), $4, ($6 + [1]), [-1], $4)
	if ( (*($17 + [232]) & [1]) ){ goto $label$25 }
	*($17 + [232]) = [0]
	goto $label$24 
	
.LABEL $label$25
	*(*((($17 + [232]) + [8]))) = [0]
	*($17 + [236]) = [0]
	
.LABEL $label$24
	CALL $101(($17 + [232]), [0])
	*((($17 + [232]) + [8])) = *((($17 + [32]) + [8]))
	*($17 + [232]) = *($17 + [32])
	goto $label$18 
	
.LABEL $label$20
	*(*(($17 + [256]))) = [0]
	*($17 + [252]) = [0]
	
.LABEL $label$19
	CALL $101(($17 + [248]), [0])
	*((($17 + [248]) + [8])) = *((($17 + [32]) + [8]))
	*($17 + [248]) = *($17 + [32])
	CALL $102(($17 + [232]), [1168])
	
.LABEL $label$18
	$4 = *($17 + [248])
	CALL eosio_assert(((( *($17 + [252]) ? uint_32($4 >> [1]) : ($4 & [1]) ) + [-10]) <= [23]), [1904])
	$4 = ($4 & [1])
	$4 = *($17 + [248])
	$8 = (( *($17 + [252]) ? uint_32($4 >> [1]) : $4 ) & [255])
	if ( ($8 == 0) ){ goto $label$26 }
	$5 = (($17 + [248]) | [1])
	$6 = ($17 + [256])
	CALL eosio_assert(((int_32)*(( *($6) ? $5 : $4 )) != (int_32)[32]), [1936])
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$26 }
	$4 = [1]
	$12 = [1]
	
.LOOP $label$27:
	CALL eosio_assert(((int_32)*((( *($6) ? $5 : (*($17 + [248]) & [1]) ) + $4)) != (int_32)[32]), [1936])
	$12 = ($12 + [1])
	$4 = ($12 & [255])
	if ( ($4 <= $8) ){ goto $label$27 }
	
.LABEL $label$26
	$4 = ($4 & [1])
	$4 = *($17 + [232])
	if ( (( *($17 + [236]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$28 }
	$5 = (($17 + [232]) | [1])
	$4 = ( *(($17 + [240])) ? $5 : $4 )
	$12 = [-1]
	
.LOOP $label$29:
	$8 = ($4 + $12)
	$6 = ($12 + [1])
	$12 = $6
	if ( *(($8 + [1])) ){ goto $label$29 }
	$7 = (CASTING uint_64)(uint_32 $6)
	$2 = (int_64)0
	$13 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$30:
	$15 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$7) ){ goto $label$31 }
	$12 = *($4)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$12 = ($12 + [165])
	goto $label$32 
	
.LABEL $label$33
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$35 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$34 
	
.LABEL $label$35
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$34
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$30 }
	CALL eosio_assert(CALL $fimport$19($14), [1968])
	$4 = ( *(($17 + [240])) ? $5 : (*($17 + [232]) & [1]) )
	$12 = [-1]
	
.LOOP $label$36:
	$8 = ($4 + $12)
	$6 = ($12 + [1])
	$12 = $6
	if ( *(($8 + [1])) ){ goto $label$36 }
	$7 = (CASTING uint_64)(uint_32 $6)
	$2 = (int_64)0
	$13 = (int_64)59
	$14 = (int_64)0
	
.LOOP $label$37:
	$15 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$7) ){ goto $label$38 }
	$12 = *($4)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$12 = ($12 + [165])
	goto $label$39 
	
.LABEL $label$40
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$42 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	goto $label$41 
	
.LABEL $label$42
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$41
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$37 }
	CALL eosio_assert(((int_64)$14 != (int_64)$1), [2000])
	
.LABEL $label$28
	$4 = [0]
	*((($17 + [192]) + [32])) = [0]
	*($17 + [208]) = (int_64)-1
	$2 = *($0)
	*($17 + [192]) = $2
	*($17 + [200]) = $1
	*($17 + [216]) = (int_64)0
	$12 = CALL db_lowerbound_i64($2, $1, (int_64)5093222948379033600, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$48 }
	$8 = CALL $36(($17 + [192]), $12)
	*((($17 + [152]) + [32])) = [0]
	*($17 + [168]) = (int_64)-1
	*($17 + [176]) = (int_64)0
	$2 = *($0)
	*($17 + [152]) = $2
	*($17 + [160]) = $2
	*($17 + [188]) = [0]
	*($17 + [144]) = ($17 + [152])
	$10 = ($8 + [8])
	CALL $57(($17 + [32]), ($17 + [144]), $10)
	$4 = *($17 + [36])
	if ( ($4 == 0) ){ goto $label$46 }
	if ( ((int_64)*($10) != (int_64)*($4 + [8])) ){ goto $label$46 }
	if ( ($4 == 0) ){ goto $label$46 }
	if ( (*($4 + [80]) == 0) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$2 = *($0)
	*($17 + [108]) = $3
	*($17 + [104]) = ($17 + [192])
	*($17 + [152]) = $2
	CALL eosio_assert(((int_64)*($17 + [192]) == (int_64)CALL $fimport$2()), [1488])
	*($17 + [36]) = ($17 + [104])
	*($17 + [32]) = ($17 + [192])
	*($17 + [40]) = ($17 + [152])
	*(($8 = CALL $96([56])) + [32]) = (int_64)1398362884
	*($8 + [24]) = (int_64)0
	CALL eosio_assert([1], [496])
	$2 = (int_64)5462355
	
.LOOP $label$50:
	$12 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$51 }
	
.LOOP $label$52:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$52 }
	
.LABEL $label$51
	$12 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$50 }
	
.LABEL $label$49
	CALL eosio_assert($12, [464])
	*($8 + [44]) = ($17 + [192])
	CALL $91(($17 + [32]), $8)
	*($17 + [88]) = $8
	$2 = *($8)
	*($17 + [32]) = $2
	$12 = *($8 + [48])
	*($17 + [336]) = $12
	$0 = ($17 + [220])
	$4 = *($0)
	if ( ((uint_32)$4 >= (uint_32)*(($17 + [224]))) ){ goto $label$54 }
	*($4 + [8]) = $2
	*($4 + [16]) = $12
	*($17 + [88]) = [0]
	*($4) = $8
	*($0) = ($4 + [24])
	goto $label$53 
	
.LABEL $label$54
	CALL $45(($17 + [216]), ($17 + [88]), ($17 + [32]), ($17 + [336]))
	
.LABEL $label$53
	$4 = *($17 + [88])
	*($17 + [88]) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	CALL $97($4)
	$8 = *($17 + [216])
	if ( $8 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$47
	$4 = *($4 + [48])
	$12 = (*(($4 + [52])) - $4)
	$6 = ((int_32)$12 / (int_32)[56])
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$46 }
	$12 = [0]
	
.LOOP $label$56:
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$55 }
	$4 = ($4 + [56])
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)$6) ){ goto $label$56 }
	goto $label$46 
	
.LABEL $label$55
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$46 }
	CALL eosio_assert([0], [2016])
	
.LABEL $label$46
	$6 = ($8 + [40])
	$11 = ($8 + [16])
	$5 = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) - *($8 + [16]))
	$4 = *($8 + [40])
	if ( $4 ){ goto $label$57 }
	if ( ($5 <= [60]) ){ goto $label$57 }
	$7 = *($0)
	$2 = (int_64)0
	$15 = (int_64)59
	$4 = [576]
	$14 = (int_64)0
	
.LOOP $label$58:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$63 }
	$12 = *($4)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$12 = ($12 + [165])
	goto $label$61 
	
.LABEL $label$63
	$13 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$62
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$60
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$59
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$13 | (int_64)$14)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$58 }
	*($17 + [96]) = $14
	*($17 + [88]) = $7
	$2 = (int_64)0
	$15 = (int_64)59
	$4 = [112]
	$14 = (int_64)0
	
.LOOP $label$64:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$69 }
	$12 = *($4)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$68 }
	$12 = ($12 + [165])
	goto $label$67 
	
.LABEL $label$69
	$13 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$68
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$67
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$66
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$65
	$4 = ($4 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$14 = ((int_64)$13 | (int_64)$14)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$64 }
	$2 = (int_64)0
	$15 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$70:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$75 }
	$12 = *($4)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$74 }
	$12 = ($12 + [165])
	goto $label$73 
	
.LABEL $label$75
	$13 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$74
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$73
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$72
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$71
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$7 = ((int_64)$13 | (int_64)$7)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$70 }
	*(($17 + [24])) = [0]
	*($17 + [16]) = (int_64)0
	$12 = CALL strlen([592])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$1 }
	$4 = ($8 + [24])
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$78 }
	*($17 + [16]) = ($12 << [1])
	$16 = (($17 + [16]) | [1])
	if ( $12 ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	$9 = (($12 + [16]) & [-16])
	$16 = CALL $96($9)
	*($17 + [16]) = ($9 | [1])
	*($17 + [24]) = $16
	*($17 + [20]) = $12
	
.LABEL $label$77
	CALL memcpy($16, [592], $12)
	
.LABEL $label$76
	*(($16 + $12)) = [0]
	*(($17 + [60])) = *(($4 + [12]))
	*(($17 + [56])) = *(($4 + [8]))
	*(($17 + [52])) = *(($4 + [4]))
	*($17 + [40]) = $1
	*($17 + [32]) = *($0)
	*($17 + [48]) = *($4)
	$12 = (($17 + [16]) + [8])
	*(($17 + [72])) = *($12)
	*($17 + [64]) = *($17 + [16])
	*($17 + [16]) = [0]
	*($17 + [20]) = [0]
	*($12) = [0]
	$12 = CALL $37(($17 + [104]), ($17 + [88]), $14, $7, ($17 + [32]))
	CALL $38(($17 + [336]), $12)
	$0 = *($17 + [336])
	CALL send_inline($0, (*($17 + [340]) - $0))
	$0 = *($17 + [336])
	if ( ($0 == 0) ){ goto $label$79 }
	*($17 + [340]) = $0
	CALL $97($0)
	
.LABEL $label$79
	$0 = *($12 + [28])
	if ( ($0 == 0) ){ goto $label$80 }
	*(($12 + [32])) = $0
	CALL $97($0)
	
.LABEL $label$80
	$0 = *($12 + [16])
	if ( ($0 == 0) ){ goto $label$81 }
	*(($12 + [20])) = $0
	CALL $97($0)
	
.LABEL $label$81
	if ( ((*(($17 + [64])) & [1]) == 0) ){ goto $label$82 }
	CALL $97(*(($17 + [72])))
	
.LABEL $label$82
	if ( ((*($17 + [16]) & [1]) == 0) ){ goto $label$83 }
	CALL $97(*(($17 + [24])))
	
.LABEL $label$83
	CALL eosio_assert([1], [640])
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)($17 + [192])), [688])
	CALL eosio_assert(((int_64)*($17 + [192]) == (int_64)CALL $fimport$2()), [736])
	$2 = *($8)
	*(($8 + [16])) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*(($4 + [8])) = *(($3 + [8]))
	*($4) = *($3)
	*(($8 + [40])) = [0]
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [800])
	*($17 + [96]) = (($17 + [32]) + [37])
	*($17 + [92]) = ($17 + [32])
	*($17 + [88]) = ($17 + [32])
	*($17 + [336]) = ($17 + [88])
	*($17 + [108]) = $10
	*($17 + [104]) = $8
	*($17 + [112]) = $11
	*($17 + [116]) = $4
	*($17 + [120]) = $6
	CALL $39(($17 + [104]), ($17 + [336]))
	CALL db_update_i64(*($8 + [48]), (int_64)0, ($17 + [32]), [37])
	$4 = (($17 + [192]) + [16])
	if ( (uint_64)($2 <= *($4)) ){ goto $label$84 }
	*($4) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$84
	$4 = *($6)
	
.LABEL $label$57
	if ( ((uint_32)$5 > (uint_32)[59]) ){ goto $label$85 }
	if ( ($4 & [255]) ){ goto $label$85 }
	CALL eosio_assert([0], [2048])
	$4 = *($6)
	
.LABEL $label$85
	if ( ((int_32)($4 & [255]) != (int_32)[1]) ){ goto $label$86 }
	CALL eosio_assert([1], [640])
	CALL eosio_assert(((int_32)*($8 + [44]) == (int_32)($17 + [192])), [688])
	CALL eosio_assert(((int_64)*($17 + [192]) == (int_64)CALL $fimport$2()), [736])
	*(($8 + [40])) = [0]
	$2 = *($8)
	*(($8 + [16])) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*(($8 + [36])) = *(($3 + [12]))
	*(($8 + [32])) = *(($3 + [8]))
	*(($8 + [28])) = *(($3 + [4]))
	*($8 + [24]) = *($3)
	CALL eosio_assert(((int_64)$2 == (int_64)*($8)), [800])
	*($17 + [96]) = (($17 + [32]) + [37])
	*($17 + [92]) = ($17 + [32])
	*($17 + [88]) = ($17 + [32])
	*($17 + [336]) = ($17 + [88])
	*($17 + [108]) = $10
	*($17 + [104]) = $8
	*($17 + [112]) = $11
	*($17 + [116]) = ($8 + [24])
	*($17 + [120]) = $6
	CALL $39(($17 + [104]), ($17 + [336]))
	CALL db_update_i64(*($8 + [48]), (int_64)0, ($17 + [32]), [37])
	$4 = (($17 + [192]) + [16])
	if ( (uint_64)($2 <= *($4)) ){ goto $label$86 }
	*($4) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$86
	$8 = *($17 + [176])
	if ( ($8 == 0) ){ goto $label$45 }
	$0 = ($17 + [180])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$88 }
	
.LOOP $label$89:
	$4 = ($4 + [-24])
	$12 = *($4)
	*($4) = [0]
	if ( ($12 == 0) ){ goto $label$90 }
	CALL $24($12)
	CALL $97($12)
	
.LABEL $label$90
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$89 }
	$4 = *(($17 + [176]))
	goto $label$87 
	
.LABEL $label$88
	$4 = $8
	
.LABEL $label$87
	*($0) = $8
	CALL $97($4)
	
.LABEL $label$45
	$8 = *($17 + [216])
	if ( ($8 == 0) ){ goto $label$43 }
	
.LABEL $label$44
	$0 = ($17 + [220])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$92 }
	
.LOOP $label$93:
	$4 = ($4 + [-24])
	$12 = *($4)
	*($4) = [0]
	if ( ($12 == 0) ){ goto $label$94 }
	CALL $97($12)
	
.LABEL $label$94
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$93 }
	$4 = *(($17 + [216]))
	goto $label$91 
	
.LABEL $label$92
	$4 = $8
	
.LABEL $label$91
	*($0) = $8
	CALL $97($4)
	
.LABEL $label$43
	if ( ((*($17 + [232]) & [1]) == 0) ){ goto $label$95 }
	CALL $97(*(($17 + [240])))
	
.LABEL $label$95
	if ( ((*($17 + [248]) & [1]) == 0) ){ goto $label$96 }
	CALL $97(*(($17 + [256])))
	
.LABEL $label$96
	$0 = *($17 + [304])
	if ( ($0 == 0) ){ goto $label$3 }
	$6 = (($17 + [280]) + [28])
	$12 = *($6)
	if ( ((int_32)$12 == (int_32)$0) ){ goto $label$98 }
	
.LOOP $label$99:
	$12 = ($12 + [-24])
	$4 = *($12)
	*($12) = [0]
	if ( ($4 == 0) ){ goto $label$100 }
	$8 = *($4 + [24])
	if ( ($8 == 0) ){ goto $label$101 }
	*(($4 + [28])) = $8
	CALL $97($8)
	
.LABEL $label$101
	if ( ((*($4 + [12]) & [1]) == 0) ){ goto $label$102 }
	CALL $97(*(($4 + [20])))
	
.LABEL $label$102
	CALL $97($4)
	
.LABEL $label$100
	if ( ((int_32)$0 != (int_32)$12) ){ goto $label$99 }
	$4 = *(($17 + [304]))
	goto $label$97 
	
.LABEL $label$98
	$4 = $0
	
.LABEL $label$97
	*($6) = $0
	CALL $97($4)
	
.LABEL $label$3
	if ( ((*($17 + [320]) & [1]) == 0) ){ goto $label$2 }
	CALL $97(*($17 + [328]))
	
.LABEL $label$2
	*([0] + [4]) = ($17 + [352])
	return (unreachable)
	
.LABEL $label$1
	CALL $98(($17 + [16]))
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [464])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $88(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $89(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $97(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [144])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$22 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	*($9 + [136]) = $0
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$41 }
	if ( ((int_64)$2 > (int_64)-4417084425313708577) ){ goto $label$40 }
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$38 }
	if ( ((int_64)$2 != (int_64)-4417095151395012608) ){ goto $label$20 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [1]
	*($9 + [16 align=4]) = *($9 + [120])
	CALL $9(($9 + [136]), ($9 + [16]))
	goto $label$20 
	
.LABEL $label$41
	if ( ((int_64)$2 > (int_64)4923678890773565951) ){ goto $label$39 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$37 }
	if ( ((int_64)$2 != (int_64)3617214701412286464) ){ goto $label$20 }
	*($9 + [116]) = [0]
	*($9 + [112]) = [2]
	*($9 + [24 align=4]) = *($9 + [112])
	CALL $11(($9 + [136]), ($9 + [24]))
	goto $label$20 
	
.LABEL $label$40
	if ( ((int_64)$2 == (int_64)-4417084425313708576) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)-4157529782108553216) ){ goto $label$20 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [3]
	*($9 + [32 align=4]) = *($9 + [104])
	CALL $13(($9 + [136]), ($9 + [32]))
	goto $label$20 
	
.LABEL $label$39
	if ( ((int_64)$2 == (int_64)4923678890773565952) ){ goto $label$35 }
	if ( ((int_64)$2 != (int_64)6112162363668955136) ){ goto $label$20 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [4]
	*($9 + [40 align=4]) = *($9 + [96])
	CALL $15(($9 + [136]), ($9 + [40]))
	goto $label$20 
	
.LABEL $label$38
	*($9 + [84]) = [0]
	*($9 + [80]) = [5]
	*($9 + [56 align=4]) = *($9 + [80])
	CALL $19(($9 + [136]), ($9 + [56]))
	goto $label$20 
	
.LABEL $label$37
	*($9 + [132]) = [0]
	*($9 + [128]) = [6]
	*($9 + [8 align=4]) = *($9 + [128])
	CALL $7(($9 + [136]), ($9 + [8]))
	goto $label$20 
	
.LABEL $label$36
	*($9 + [92]) = [0]
	*($9 + [88]) = [7]
	*($9 + [48 align=4]) = *($9 + [88])
	CALL $17(($9 + [136]), ($9 + [48]))
	goto $label$20 
	
.LABEL $label$35
	*($9 + [76]) = [0]
	*($9 + [72]) = [8]
	*($9 + [64 align=4]) = *($9 + [72])
	CALL $21(($9 + [136]), ($9 + [64]))
	
.LABEL $label$20
	*([0] + [4]) = ($9 + [144])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN9blackjack7endgameEyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_NS0_6vectorINS_12playerresultENS4_IS8_EEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	float_64 $6
	int_32 $7
	int_32 $8
	float_64 $9
	float_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [512])
	*([0] + [4]) = $20
	*($20 + [504]) = $1
	*($20 + [496]) = $2
	CALL require_auth(*($0))
	*((($20 + [456]) + [32])) = [0]
	*($20 + [472]) = (int_64)-1
	$2 = *($0)
	*($20 + [456]) = $2
	*($20 + [464]) = $2
	*($20 + [480]) = (int_64)0
	$17 = [0]
	$7 = CALL db_lowerbound_i64($2, $2, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$17 = CALL $46(($20 + [456]), $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$17 != (int_32)[0]), [912])
	CALL eosio_assert(*($17 + [8]), [960])
	*((($20 + [416]) + [32])) = [0]
	*($20 + [432]) = (int_64)-1
	*($20 + [440]) = (int_64)0
	$2 = *($0)
	*($20 + [416]) = $2
	*($20 + [424]) = $2
	*($20 + [452]) = [0]
	*($20 + [408]) = ($20 + [416])
	CALL $57(($20 + [384]), ($20 + [408]), ($20 + [504]))
	$19 = *($20 + [388])
	if ( ($19 == 0) ){ goto $label$3 }
	if ( ((int_64)*($20 + [504]) != (int_64)*($19 + [8])) ){ goto $label$3 }
	if ( ($19 == 0) ){ goto $label$3 }
	$18 = [1]
	$17 = ((int_32)*($19 + [80]) ^ (int_32)[1])
	goto $label$2 
	
.LABEL $label$3
	$18 = [0]
	$19 = [0]
	$17 = [0]
	
.LABEL $label$2
	CALL eosio_assert($17, [1008])
	CALL eosio_assert(((int_32)(*($5 + [4]) - *($5)) == (int_32)[80]), [1040])
	*($20 + [388]) = $0
	*($20 + [392]) = $3
	*($20 + [396]) = $4
	*($20 + [400]) = $5
	*($20 + [384]) = ($20 + [496])
	CALL eosio_assert($18, [640])
	CALL $58(*($20 + [408]), $19, ($20 + [384]))
	*($20 + [376]) = [0]
	*($20 + [368]) = (int_64)0
	CALL eosio_assert([1], [496])
	$2 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$17 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$17 = [0]
	
.LABEL $label$4
	CALL eosio_assert($17, [464])
	CALL eosio_assert([1], [496])
	$2 = (int_64)1380532550
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$17 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$17 = [0]
	
.LABEL $label$9
	CALL eosio_assert($17, [464])
	*($20 + [392]) = (int_64)1397703940
	*($20 + [384]) = (int_64)0
	CALL eosio_assert([1], [496])
	$2 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$17 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$17 = [0]
	
.LABEL $label$14
	CALL eosio_assert($17, [464])
	$12 = (int_64)0
	if ( ((int_64)*($20 + [496]) == (int_64)0) ){ goto $label$28 }
	$6 = CALL $60($0)
	$13 = [0]
	$14 = [0]
	$17 = [0]
	$7 = *($19 + [48])
	$5 = *(($19 + [52]))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$29 }
	$8 = ((int_32)($5 - $7) / (int_32)[56])
	$2 = (int_64)0
	$3 = [0]
	$1 = *($20 + [496])
	$5 = [0]
	$4 = [0]
	$14 = [0]
	$13 = [0]
	
.LOOP $label$30:
	$17 = $5
	$3 = ($7 + ((int_32)$3 * (int_32)[56]))
	$12 = *($3)
	if ( ((int_64)$12 != (int_64)$1) ){ goto $label$31 }
	$13 = *($3 + [52])
	$12 = $2
	$14 = $5
	$17 = $4
	
.LABEL $label$31
	$4 = $17
	$2 = $12
	$5 = ($5 + [1])
	$3 = ($5 & [255])
	if ( ($3 <= $8) ){ goto $label$30 }
	
.LABEL $label$29
	CALL eosio_assert(((($13 + [-1]) & [255]) <= [21]), [1088])
	$2 = (int_64)1
	$5 = ($13 + [-17])
	if ( ((uint_32)($5 & [255]) >= (uint_32)[5]) ){ goto $label$32 }
	$2 = *(((int_32(($5 << [24]) >> [24]) << [3]) + [1120]))
	
.LABEL $label$32
	$1 = *($19 + [16])
	*($20 + [384]) = ((int_64)$1 * (int_64)$2)
	$11 = ((int_64)$1 * (int_64)10)
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$2 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$36 }
	
.LOOP $label$37:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$37 }
	
.LABEL $label$36
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$3 = [0]
	
.LABEL $label$33
	CALL eosio_assert($3, [464])
	CALL $102(($20 + [368]), [1168])
	$2 = (int_64)0
	$1 = (int_64)59
	$5 = [1184]
	$15 = (int_64)0
	
.LOOP $label$38:
	$16 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$39 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$41 }
	$3 = ($3 + [165])
	goto $label$40 
	
.LABEL $label$41
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$40
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$39
	$5 = ($5 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$38 }
	*($20 + [344]) = (int_64)1397703940
	$2 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 *($20 + [384])) * (float_64)(float_64)0.02) * (float_64)(float_64)0.2))
	*($20 + [336]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$2 = (uint_64)*($20 + [344]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$44:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$45 }
	
.LOOP $label$46:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$43 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$46 }
	
.LABEL $label$45
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$43
	$3 = [0]
	
.LABEL $label$42
	CALL eosio_assert($3, [464])
	*((($20 + [168]) + [8])) = *((($20 + [336]) + [8]))
	*($20 + [168]) = *($20 + [336])
	CALL $59($0, [0], $15, ($20 + [168]), ($20 + [368]))
	$2 = (int_64)0
	$1 = (int_64)59
	$5 = [1200]
	$15 = (int_64)0
	
.LOOP $label$47:
	$16 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$48 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$3 = ($3 + [165])
	goto $label$49 
	
.LABEL $label$50
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$48
	$5 = ($5 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$47 }
	*($20 + [328]) = (int_64)1397703940
	$2 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 *($20 + [384])) * (float_64)(float_64)0.02) * (float_64)(float_64)0.2))
	*($20 + [320]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$2 = (uint_64)*($20 + [328]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	
.LOOP $label$55:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$55 }
	
.LABEL $label$54
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$3 = [0]
	
.LABEL $label$51
	CALL eosio_assert($3, [464])
	*((($20 + [152]) + [8])) = *((($20 + [320]) + [8]))
	*($20 + [152]) = *($20 + [320])
	CALL $59($0, [0], $15, ($20 + [152]), ($20 + [368]))
	$2 = (int_64)0
	$1 = (int_64)59
	$5 = [1216]
	$15 = (int_64)0
	
.LOOP $label$56:
	$16 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$57 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$3 = ($3 + [165])
	goto $label$58 
	
.LABEL $label$59
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$57
	$5 = ($5 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$56 }
	*($20 + [312]) = (int_64)1397703940
	$2 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 *($20 + [384])) * (float_64)(float_64)0.02) * (float_64)(float_64)0.2))
	*($20 + [304]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$2 = (uint_64)*($20 + [312]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$61 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$63 }
	
.LOOP $label$64:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$61 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$64 }
	
.LABEL $label$63
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$62 }
	goto $label$60 
	
.LABEL $label$61
	$3 = [0]
	
.LABEL $label$60
	CALL eosio_assert($3, [464])
	*((($20 + [136]) + [8])) = *((($20 + [304]) + [8]))
	*($20 + [136]) = *($20 + [304])
	CALL $59($0, [0], $15, ($20 + [136]), ($20 + [368]))
	CALL $102(($20 + [368]), [1232])
	*($20 + [296]) = (int_64)1397703940
	$1 = *($20 + [496])
	$2 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $11) + (float_64)((float_64)(CASTING float_64)(int_64 *($20 + [384])) * (float_64)(float_64)0.98)))
	*($20 + [288]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$2 = (uint_64)*($20 + [296]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$67:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$66 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$68 }
	
.LOOP $label$69:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$66 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$69 }
	
.LABEL $label$68
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$67 }
	goto $label$65 
	
.LABEL $label$66
	$3 = [0]
	
.LABEL $label$65
	CALL eosio_assert($3, [464])
	*((($20 + [120]) + [8])) = *((($20 + [288]) + [8]))
	*($20 + [120]) = *($20 + [288])
	CALL $59($0, [0], $1, ($20 + [120]), ($20 + [368]))
	CALL $102(($20 + [368]), [1168])
	$2 = *(($19 + [16]))
	*($20 + [280]) = (int_64)353416332804
	*((($20 + [104]) + [8])) = *($20 + [280])
	$1 = *($20 + [496])
	*($20 + [272]) = (Rounds 0)(((float_64)$6 * (float_64)(CASTING float_64)(int_64 $2)))
	*($20 + [104]) = *($20 + [272])
	CALL $59($0, [1], $1, ($20 + [104]), ($20 + [368]))
	$7 = ($14 & [255])
	$4 = CALL is_account(*((*(($19 + [48])) + ((int_32)$7 * (int_32)[56])) + [8]))
	$2 = (int_64)0
	$1 = (int_64)59
	$5 = [1248]
	$15 = (int_64)0
	
.LOOP $label$70:
	$16 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$71 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$73 }
	$3 = ($3 + [165])
	goto $label$72 
	
.LABEL $label$73
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$72
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$71
	$5 = ($5 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$70 }
	$9 = (CASTING float_64)(int_64 *($20 + [384]))
	$10 = ((float_64)((float_64)$9 * (float_64)(float_64)0.02) * (float_64)(float_64)0.4)
	if ( ($4 == 0) ){ goto $label$27 }
	*($20 + [264]) = (int_64)1397703940
	$2 = (Rounds 0)(((float_64)$10 + (float_64)((float_64)$9 * (float_64)(float_64)-0.002)))
	*($20 + [256]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$2 = (uint_64)*($20 + [264]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$74:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$75 }
	
.LOOP $label$76:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$76 }
	
.LABEL $label$75
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$74 }
	goto $label$25 
	
.LABEL $label$28
	CALL $102(($20 + [368]), [1072])
	$5 = *($19 + [48])
	$4 = ($19 + [52])
	if ( ((int_32)*($4) == (int_32)$5) ){ goto $label$19 }
	$2 = ((int_64)*($19 + [16]) * (int_64)10)
	$7 = ($19 + [48])
	$17 = [0]
	$3 = [0]
	
.LOOP $label$77:
	$1 = *(($5 + ((int_32)$17 * (int_32)[56])))
	*((($20 + [352]) + [8])) = (int_64)1397703940
	*((($20 + [8]) + [8])) = (int_64)1397703940
	*($20 + [352]) = $2
	*($20 + [8]) = $2
	CALL $59($0, [0], $1, ($20 + [8]), ($20 + [368]))
	$5 = *($7)
	$3 = ($3 + [1])
	$17 = ($3 & [255])
	if ( ($17 <= ((int_32)(*($4) - $5) / (int_32)[56])) ){ goto $label$77 }
	goto $label$19 
	
.LABEL $label$27
	*($20 + [232]) = (int_64)1397703940
	$2 = (Rounds 0)($10)
	*($20 + [224]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$2 = (uint_64)*($20 + [232]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$78:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$79 }
	
.LOOP $label$80:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$80 }
	
.LABEL $label$79
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$78 }
	goto $label$23 
	
.LABEL $label$26
	$3 = [0]
	
.LABEL $label$25
	CALL eosio_assert($3, [464])
	*((($20 + [72]) + [8])) = *((($20 + [256]) + [8]))
	*($20 + [72]) = *($20 + [256])
	CALL $59($0, [0], $15, ($20 + [72]), ($20 + [368]))
	$1 = *((*(($19 + [48])) + ((int_32)$7 * (int_32)[56])) + [8])
	*($20 + [248]) = (int_64)1397703940
	$2 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($20 + [384])) * (float_64)(float_64)0.002))
	*($20 + [240]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$2 = (uint_64)*($20 + [248]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$81:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$82 }
	
.LOOP $label$83:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$83 }
	
.LABEL $label$82
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$81 }
	goto $label$21 
	
.LABEL $label$24
	$3 = [0]
	
.LABEL $label$23
	CALL eosio_assert($3, [464])
	*((($20 + [88]) + [8])) = *((($20 + [224]) + [8]))
	*($20 + [88]) = *($20 + [224])
	CALL $59($0, [0], $15, ($20 + [88]), ($20 + [368]))
	goto $label$20 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [464])
	*((($20 + [56]) + [8])) = *((($20 + [240]) + [8]))
	*($20 + [56]) = *($20 + [240])
	CALL $59($0, [0], $1, ($20 + [56]), ($20 + [368]))
	
.LABEL $label$20
	CALL $102(($20 + [368]), [1264])
	*($20 + [216]) = (int_64)1397703940
	$2 = (int_64)
	*($20 + [208]) = $2($11 - *($20 + [384])))
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [496])
	$2 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$86:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$85 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$87 }
	
.LOOP $label$88:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$85 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$88 }
	
.LABEL $label$87
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$86 }
	goto $label$84 
	
.LABEL $label$85
	$3 = [0]
	
.LABEL $label$84
	CALL eosio_assert($3, [464])
	*((($20 + [40]) + [8])) = *((($20 + [208]) + [8]))
	*($20 + [40]) = *($20 + [208])
	CALL $59($0, [0], $12, ($20 + [40]), ($20 + [368]))
	CALL $102(($20 + [368]), [1168])
	*($20 + [200]) = (int_64)353416332804
	*((($20 + [24]) + [8])) = (int_64)353416332804
	*($20 + [192]) = (Rounds 0)(((float_64)$6 * (float_64)(CASTING float_64)(int_64 *($20 + [384]))))
	*($20 + [24]) = *($20 + [192])
	CALL $59($0, [1], $12, ($20 + [24]), ($20 + [368]))
	CALL is_account(*((*(($19 + [48])) + ((int_32)($17 & [255]) * (int_32)[56])) + [8]))
	
.LABEL $label$19
	*($20 + [184]) = ($20 + [384])
	CALL eosio_assert($18, [640])
	CALL $61(*($20 + [408]), $19, ($20 + [184]))
	if ( ((*($20 + [368]) & [1]) == 0) ){ goto $label$89 }
	CALL $97(*(($20 + [376])))
	
.LABEL $label$89
	$3 = *($20 + [440])
	if ( ($3 == 0) ){ goto $label$90 }
	$0 = ($20 + [444])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$92 }
	
.LOOP $label$93:
	$5 = ($5 + [-24])
	$17 = *($5)
	*($5) = [0]
	if ( ($17 == 0) ){ goto $label$94 }
	CALL $24($17)
	CALL $97($17)
	
.LABEL $label$94
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$93 }
	$5 = *(($20 + [440]))
	goto $label$91 
	
.LABEL $label$92
	$5 = $3
	
.LABEL $label$91
	*($0) = $3
	CALL $97($5)
	
.LABEL $label$90
	$0 = *($20 + [480])
	if ( ($0 == 0) ){ goto $label$95 }
	$4 = (($20 + [456]) + [28])
	$17 = *($4)
	if ( ((int_32)$17 == (int_32)$0) ){ goto $label$97 }
	
.LOOP $label$98:
	$17 = ($17 + [-24])
	$5 = *($17)
	*($17) = [0]
	if ( ($5 == 0) ){ goto $label$99 }
	$3 = *($5 + [24])
	if ( ($3 == 0) ){ goto $label$100 }
	*(($5 + [28])) = $3
	CALL $97($3)
	
.LABEL $label$100
	if ( ((*($5 + [12]) & [1]) == 0) ){ goto $label$101 }
	CALL $97(*(($5 + [20])))
	
.LABEL $label$101
	CALL $97($5)
	
.LABEL $label$99
	if ( ((int_32)$0 != (int_32)$17) ){ goto $label$98 }
	$5 = *(($20 + [480]))
	goto $label$96 
	
.LABEL $label$97
	$5 = $0
	
.LABEL $label$96
	*($4) = $0
	CALL $97($5)
	
.LABEL $label$95
	*([0] + [4]) = ($20 + [512])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($5 = $3) + [76]) = $0
	*($5 + [64]) = *($1)
	*($5 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($5 + [32])) = (int_64)0
	*(($5 + [40])) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [48]) = [0]
	*(($5 + [52])) = [0]
	*(($5 + [56])) = [0]
	*($5 + [80]) = $1
	$3 = ($1 + $0)
	*($5 + [88]) = $3
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [432])
	CALL memcpy(($5 + [8]), $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($3 - $2) > (uint_32)[7]), [432])
	CALL memcpy((($5 + [8]) + [8]), $2, [8])
	*($5 + [84]) = ($1 + [16])
	CALL $30(($5 + [80]), (($5 + [8]) + [16]))
	CALL $30(($5 + [80]), ($5 + [36]))
	CALL $52(($5 + [80]), ($5 + [48]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($5 + [84]) = ($5 + [64])
	*($5 + [80]) = ($5 + [76])
	CALL $53(($5 + [80]), ($5 + [8]))
	$2 = *($5 + [48])
	if ( ($2 == 0) ){ goto $label$5 }
	$4 = ($5 + [52])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$7 }
	$3 = ([0] - $2)
	$1 = ($1 + [-32])
	
.LOOP $label$8:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$9 }
	CALL $97(*(($1 + [20])))
	
.LABEL $label$9
	$0 = *($1)
	if ( ($0 == 0) ){ goto $label$10 }
	*(($1 + [4])) = $0
	CALL $97($0)
	
.LABEL $label$10
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $3) != (int_32)[-32]) ){ goto $label$8 }
	$1 = *(($5 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*($4) = $2
	CALL $97($1)
	
.LABEL $label$5
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL $97(*(($5 + [44])))
	
.LABEL $label$11
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $97(*(($5 + [32])))
	
.LABEL $label$12
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN9blackjack12setpublickeyENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	$4 = *($0)
	*($6 + [8]) = $4
	*($6 + [16]) = $4
	*($6 + [32]) = (int_64)0
	$0 = [0]
	$3 = CALL db_lowerbound_i64($4, $4, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $46(($6 + [8]), $3)
	
.LABEL $label$1
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [880])
	*($6) = $1
	CALL eosio_assert($3, [640])
	CALL $47(($6 + [8]), $0, $6)
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = (($6 + [8]) + [28])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$3 = *($0 + [24])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($0 + [28])) = $3
	CALL $97($3)
	
.LABEL $label$7
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$8 }
	CALL $97(*(($0 + [20])))
	
.LABEL $label$8
	CALL $97($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$5 }
	$0 = *(($6 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($5) = $2
	CALL $97($0)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [48])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $30(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $105(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $105(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $97(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $97(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $97(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC _ZN9blackjack8activateEb (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [96])
	*([0] + [4]) = $7
	*($7 + [59]) = $1
	CALL require_auth(*($0))
	*(($4 = ($7 + [48]))) = [0]
	*($7 + [32]) = (int_64)-1
	$2 = *($0)
	*($7 + [16]) = $2
	*($7 + [24]) = $2
	*($7 + [40]) = (int_64)0
	$1 = CALL db_lowerbound_i64($2, $2, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$3 }
	$0 = CALL $46(($7 + [16]), $1)
	*($7 + [64]) = ($7 + [59])
	CALL eosio_assert([1], [640])
	CALL $83(($7 + [16]), $0, ($7 + [64]))
	$3 = *($7 + [40])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0)
	*($7 + [8]) = ($7 + [59])
	*($7 + [88]) = $5
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$2()), [1488])
	*($7 + [68]) = ($7 + [8])
	*($7 + [64]) = ($7 + [16])
	*($7 + [72]) = ($7 + [88])
	*(($0 = CALL $96([48])) + [12 align=4]) = (int_64)0
	*($0 + [20 align=4]) = (int_64)0
	*($0 + [28 align=4]) = (int_64)0
	*($0 + [36]) = ($7 + [16])
	CALL $82(($7 + [64]), $0)
	*($7 + [80]) = $0
	$2 = *($0)
	*($7 + [64]) = $2
	$3 = *($0 + [40])
	*($7 + [60]) = $3
	$6 = ($7 + [44])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*($4)) ){ goto $label$5 }
	*($1 + [8]) = $2
	*($1 + [16]) = $3
	*($7 + [80]) = [0]
	*($1) = $0
	*($6) = ($1 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $50(($7 + [40]), ($7 + [80]), ($7 + [64]), ($7 + [60]))
	
.LABEL $label$4
	$0 = *($7 + [80])
	*($7 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$7 }
	*(($0 + [28])) = $1
	CALL $97($1)
	
.LABEL $label$7
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$8 }
	CALL $97(*(($0 + [20])))
	
.LABEL $label$8
	CALL $97($0)
	
.LABEL $label$6
	$3 = *($7 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = (($7 + [16]) + [28])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	$4 = *($0 + [24])
	if ( ($4 == 0) ){ goto $label$13 }
	*(($0 + [28])) = $4
	CALL $97($4)
	
.LABEL $label$13
	if ( ((*($0 + [12]) & [1]) == 0) ){ goto $label$14 }
	CALL $97(*(($0 + [20])))
	
.LABEL $label$14
	CALL $97($0)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$11 }
	$0 = *(($7 + [40]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $3
	
.LABEL $label$9
	*($6) = $3
	CALL $97($0)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [96])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [432])
	CALL memcpy(($5 + [15]), $3, [1])
	$6 = *($5 + [15])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($6 & [255]) != (int_32)[0])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC _ZN9blackjack9startgameEyN5eosio5assetENSt3__16vectorINS_11playerinialENS2_9allocatorIS4_EEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [272])
	*([0] + [4]) = $14
	*($14 + [168]) = $1
	CALL require_auth(*($0))
	*((($14 + [128]) + [32])) = [0]
	*($14 + [144]) = (int_64)-1
	$1 = *($0)
	*($14 + [128]) = $1
	*($14 + [136]) = $1
	*($14 + [152]) = (int_64)0
	$13 = [0]
	$12 = CALL db_lowerbound_i64($1, $1, (int_64)7235159550150574080, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$13 = CALL $46(($14 + [128]), $12)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [912])
	CALL eosio_assert(*($13 + [8]), [960])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [1552])
	*((($14 + [88]) + [32])) = [0]
	*($14 + [104]) = (int_64)-1
	*($14 + [112]) = (int_64)0
	$1 = *($0)
	*($14 + [88]) = $1
	*($14 + [96]) = $1
	*($14 + [124]) = [0]
	*($14 + [80]) = ($14 + [88])
	CALL $57(($14 + [8]), ($14 + [80]), ($14 + [168]))
	$13 = *($14 + [12])
	if ( ($13 == 0) ){ goto $label$3 }
	$13 = (($13 == 0) | ((int_64)*($14 + [168]) != (int_64)*($13 + [8])))
	goto $label$2 
	
.LABEL $label$3
	$13 = [1]
	
.LABEL $label$2
	CALL eosio_assert($13, [1456])
	$1 = *($0)
	*($14 + [16]) = $2
	*($14 + [20]) = $3
	*($14 + [12]) = ($14 + [168])
	*($14 + [8]) = ($14 + [88])
	*($14 + [48]) = $1
	CALL eosio_assert(((int_64)*($14 + [88]) == (int_64)CALL $fimport$2()), [1488])
	*($14 + [180]) = ($14 + [8])
	*($14 + [176]) = ($14 + [88])
	*($14 + [184]) = ($14 + [48])
	$13 = CALL $96([120])
	CALL $25($13)
	*($13 + [108]) = ($14 + [88])
	CALL $77(($14 + [176]), $13)
	*($14 + [240]) = $13
	$1 = *($13)
	*($14 + [176]) = $1
	$12 = *($13 + [112])
	*($14 + [224]) = $12
	$9 = ($14 + [116])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($14 + [120]))) ){ goto $label$5 }
	*($2 + [8]) = $1
	*($2 + [16]) = $12
	*($14 + [240]) = [0]
	*($2) = $13
	*($9) = ($2 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $27(($14 + [112]), ($14 + [240]), ($14 + [176]), ($14 + [224]))
	
.LABEL $label$4
	$13 = *($14 + [240])
	*($14 + [240]) = [0]
	if ( ($13 == 0) ){ goto $label$6 }
	CALL $24($13)
	CALL $97($13)
	
.LABEL $label$6
	$4 = *($3 + [4])
	$12 = *($3)
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$7 }
	$7 = (($14 + [176]) + [37])
	$6 = (($14 + [8]) + [24])
	$5 = (($14 + [48]) + [16])
	$9 = ($14 + [36])
	$10 = (($14 + [8]) + [32])
	$11 = ($14 + [252])
	
.LOOP $label$8:
	*((($14 + [48]) + [8])) = *(($12 + [8]))
	*($14 + [48]) = *($12)
	CALL $105($5, ($12 + [16]))
	*(($3 = (($14 + [8]) + [16]))) = (int_64)-1
	*($6) = [0]
	$1 = *($14 + [48])
	*((($14 + [8]) + [8])) = $1
	$8 = *($0)
	*($14 + [8]) = $8
	*($9) = [0]
	*($10) = [0]
	$13 = CALL db_lowerbound_i64($8, $1, (int_64)5093222948379033600, (int_64)0)
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$12 }
	$13 = CALL $36(($14 + [8]), $13)
	CALL eosio_assert([1], [640])
	CALL eosio_assert(((int_32)*($13 + [44]) == (int_32)($14 + [8])), [688])
	CALL eosio_assert(((int_64)*($14 + [8]) == (int_64)CALL $fimport$2()), [736])
	*($13 + [40]) = [1]
	*($13 + [8]) = *($14 + [168])
	$1 = *($13)
	CALL eosio_assert([1], [800])
	*((($14 + [224]) + [8])) = $7
	*($14 + [228]) = ($14 + [176])
	*($14 + [224]) = ($14 + [176])
	*($14 + [264]) = ($14 + [224])
	*((($14 + [240]) + [8])) = ($13 + [16])
	*($11) = ($13 + [24])
	*((($14 + [240]) + [16])) = ($13 + [40])
	*($14 + [244]) = ($13 + [8])
	*($14 + [240]) = $13
	CALL $39(($14 + [240]), ($14 + [264]))
	CALL db_update_i64(*($13 + [48]), (int_64)0, ($14 + [176]), [37])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$11 }
	*($3) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$2 = *($6)
	if ( $2 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$1 = *($0)
	*($14 + [228]) = ($14 + [168])
	*($14 + [224]) = ($14 + [8])
	*($14 + [240]) = $1
	CALL eosio_assert(((int_64)*($14 + [8]) == (int_64)CALL $fimport$2()), [1488])
	*((($14 + [176]) + [8])) = ($14 + [240])
	*($14 + [180]) = ($14 + [224])
	*($14 + [176]) = ($14 + [8])
	*(($3 = CALL $96([56])) + [32]) = (int_64)1398362884
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (int_64)5462355
	$13 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$2 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$2 = [0]
	
.LABEL $label$13
	CALL eosio_assert($2, [464])
	*($3 + [44]) = ($14 + [8])
	CALL $78(($14 + [176]), $3)
	*($14 + [264]) = $3
	$1 = *($3)
	*($14 + [176]) = $1
	$2 = *($3 + [48])
	*($14 + [260]) = $2
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($10)) ){ goto $label$19 }
	*($13 + [8]) = $1
	*($13 + [16]) = $2
	*($14 + [264]) = [0]
	*($13) = $3
	*($9) = ($13 + [24])
	goto $label$18 
	
.LABEL $label$19
	CALL $45($6, ($14 + [264]), ($14 + [176]), ($14 + [260]))
	
.LABEL $label$18
	$13 = *($14 + [264])
	*($14 + [264]) = [0]
	if ( ($13 == 0) ){ goto $label$11 }
	CALL $97($13)
	
.LABEL $label$11
	$2 = *($6)
	if ( ($2 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$13 = *($9)
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$21 }
	
.LOOP $label$22:
	$13 = ($13 + [-24])
	$3 = *($13)
	*($13) = [0]
	if ( ($3 == 0) ){ goto $label$23 }
	CALL $97($3)
	
.LABEL $label$23
	if ( ((int_32)$2 != (int_32)$13) ){ goto $label$22 }
	$13 = *($6)
	goto $label$20 
	
.LABEL $label$21
	$13 = $2
	
.LABEL $label$20
	*($9) = $2
	CALL $97($13)
	
.LABEL $label$9
	if ( ((*($5) & [1]) == 0) ){ goto $label$24 }
	CALL $97(*((($14 + [48]) + [24])))
	
.LABEL $label$24
	$12 = ($12 + [32])
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$2 = *($14 + [112])
	if ( ($2 == 0) ){ goto $label$25 }
	$12 = ($14 + [116])
	$13 = *($12)
	if ( ((int_32)$13 == (int_32)$2) ){ goto $label$27 }
	
.LOOP $label$28:
	$13 = ($13 + [-24])
	$3 = *($13)
	*($13) = [0]
	if ( ($3 == 0) ){ goto $label$29 }
	CALL $24($3)
	CALL $97($3)
	
.LABEL $label$29
	if ( ((int_32)$2 != (int_32)$13) ){ goto $label$28 }
	$13 = *(($14 + [112]))
	goto $label$26 
	
.LABEL $label$27
	$13 = $2
	
.LABEL $label$26
	*($12) = $2
	CALL $97($13)
	
.LABEL $label$25
	$12 = *($14 + [152])
	if ( ($12 == 0) ){ goto $label$30 }
	$9 = (($14 + [128]) + [28])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$12) ){ goto $label$32 }
	
.LOOP $label$33:
	$3 = ($3 + [-24])
	$13 = *($3)
	*($3) = [0]
	if ( ($13 == 0) ){ goto $label$34 }
	$2 = *($13 + [24])
	if ( ($2 == 0) ){ goto $label$35 }
	*(($13 + [28])) = $2
	CALL $97($2)
	
.LABEL $label$35
	if ( ((*($13 + [12]) & [1]) == 0) ){ goto $label$36 }
	CALL $97(*(($13 + [20])))
	
.LABEL $label$36
	CALL $97($13)
	
.LABEL $label$34
	if ( ((int_32)$12 != (int_32)$3) ){ goto $label$33 }
	$13 = *(($14 + [152]))
	goto $label$31 
	
.LABEL $label$32
	$13 = $12
	
.LABEL $label$31
	*($9) = $12
	CALL $97($13)
	
.LABEL $label$30
	*([0] + [4]) = ($14 + [272])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [464])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	$1 = ($0 + $2)
	*($5 + [72]) = $1
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [432])
	CALL memcpy(($5 + [8]), $0, [8])
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [432])
	CALL memcpy((($5 + [8]) + [8]), $4, [8])
	$4 = ($0 + [16])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [432])
	CALL memcpy((($5 + [8]) + [16]), $4, [8])
	*($5 + [68]) = ($0 + [24])
	CALL $73(($5 + [64]), (($5 + [8]) + [24]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $74(($5 + [64]), ($5 + [8]))
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$10 }
	$4 = ($5 + [36])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$12 }
	$0 = ([0] - $2)
	$1 = ($1 + [-16])
	
.LOOP $label$13:
	if ( ((*($1) & [1]) == 0) ){ goto $label$14 }
	CALL $97(*(($1 + [8])))
	
.LABEL $label$14
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $0) != (int_32)[-16]) ){ goto $label$13 }
	$1 = *(($5 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $2
	
.LABEL $label$11
	*($4) = $2
	CALL $97($1)
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [80])
	return [1]
}

void .FUNC $75 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$4 = (*(*($0)) + int_32($5 >> [1]))
	$6 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$6 = *((*($4) + $6))
	
.LABEL $label$1
	*(($5 = (($7 + [32]) + [8]))) = *(($2 + [8]))
	*($7 + [32]) = *($2)
	*($7 + [20]) = [0]
	*($7 + [16]) = [0]
	*($7 + [24]) = [0]
	$2 = (*($3 + [4]) - *($3))
	$0 = int_32($2 >> [5])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$0 >= (uint_32)[134217728]) ){ goto $label$2 }
	$2 = CALL $96($2)
	*((($7 + [16]) + [8])) = ($2 + ($0 << [5]))
	*($7 + [16]) = $2
	*($7 + [20]) = $2
	$3 = *(($3 + [4]))
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	*($2) = *($0)
	*(($2 + [8])) = *(($0 + [8]))
	CALL $105(($2 + [16]), ($0 + [16]))
	$2 = ($2 + [32])
	$0 = ($0 + [32])
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$4 }
	*($7 + [20]) = $2
	
.LABEL $label$3
	*(($7 + [8])) = *($5)
	*($7) = *($7 + [32])
	CALL void $4((int_32 $1), (int_64 $7), (int_32 ($7 + [16])), (int_32 $6))
	$3 = *($7 + [16])
	if ( ($3 == 0) ){ goto $label$5 }
	$2 = *($7 + [20])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	$0 = ([0] - $3)
	$2 = ($2 + [-16])
	
.LOOP $label$8:
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL $97(*(($2 + [8])))
	
.LABEL $label$9
	$2 = ($2 + [-32])
	if ( ((int_32)($2 + $0) != (int_32)[-16]) ){ goto $label$8 }
	$2 = *($7 + [16])
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($7 + [20]) = $3
	CALL $97($2)
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $104(($7 + [16]))
}

void .FUNC _ZN9blackjack6refundEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [176])
	*([0] + [4]) = $14
	CALL require_auth(*($0))
	*(($14 + [152])) = [0]
	*($14 + [128]) = $1
	*($14 + [136]) = (int_64)-1
	$11 = *($0)
	*($14 + [120]) = $11
	$9 = (int_64)0
	*($14 + [144]) = (int_64)0
	$7 = CALL db_lowerbound_i64($11, $1, (int_64)5093222948379033600, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $36(($14 + [120]), $7)
	$7 = (*($6 + [40]) == 0)
	$5 = [1]
	$3 = $6
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$6 = [0]
	$3 = [0]
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [560])
	$12 = *($0)
	$8 = (int_64)59
	$7 = [576]
	$10 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$8 }
	$2 = *($7)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$2 = ($2 + [165])
	goto $label$6 
	
.LABEL $label$8
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$4
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$3 }
	*($14 + [72]) = $10
	*($14 + [64]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [112]
	$10 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$14 }
	$2 = *($7)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$2 = ($2 + [165])
	goto $label$12 
	
.LABEL $label$14
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$9 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [128]
	$12 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$20 }
	$2 = *($7)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$2 = ($2 + [165])
	goto $label$18 
	
.LABEL $label$20
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$16
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$15 }
	*(($14 + [8])) = [0]
	*($14) = (int_64)0
	$7 = CALL strlen([592])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$21 }
	$2 = ($6 + [24])
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$24 }
	*($14) = ($7 << [1])
	$13 = ($14 | [1])
	if ( $7 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$4 = (($7 + [16]) & [-16])
	$13 = CALL $96($4)
	*($14) = ($4 | [1])
	*($14 + [8]) = $13
	*($14 + [4]) = $7
	
.LABEL $label$23
	CALL memcpy($13, [592], $7)
	
.LABEL $label$22
	*(($13 + $7)) = [0]
	*(($14 + [44])) = *(($2 + [12]))
	*(($14 + [40])) = *(($2 + [8]))
	*(($14 + [36])) = *(($2 + [4]))
	*($14 + [24]) = $1
	*($14 + [16]) = *($0)
	*($14 + [32]) = *($2)
	$7 = ($14 + [8])
	*(($14 + [56])) = *($7)
	*($14 + [48]) = *($14)
	*($14) = [0]
	*($14 + [4]) = [0]
	*($7) = [0]
	$7 = CALL $37(($14 + [80]), ($14 + [64]), $10, $12, ($14 + [16]))
	CALL $38(($14 + [160]), $7)
	$2 = *($14 + [160])
	CALL send_inline($2, (*($14 + [164]) - $2))
	$2 = *($14 + [160])
	if ( ($2 == 0) ){ goto $label$25 }
	*($14 + [164]) = $2
	CALL $97($2)
	
.LABEL $label$25
	$2 = *($7 + [28])
	if ( ($2 == 0) ){ goto $label$26 }
	*(($7 + [32])) = $2
	CALL $97($2)
	
.LABEL $label$26
	$2 = *($7 + [16])
	if ( ($2 == 0) ){ goto $label$27 }
	*(($7 + [20])) = $2
	CALL $97($2)
	
.LABEL $label$27
	if ( ((*(($14 + [48])) & [1]) == 0) ){ goto $label$28 }
	CALL $97(*(($14 + [56])))
	
.LABEL $label$28
	if ( ((*($14) & [1]) == 0) ){ goto $label$29 }
	CALL $97(*(($14 + [8])))
	
.LABEL $label$29
	CALL eosio_assert($5, [640])
	CALL eosio_assert(((int_32)*($3 + [44]) == (int_32)($14 + [120])), [688])
	CALL eosio_assert(((int_64)*($14 + [120]) == (int_64)CALL $fimport$2()), [736])
	*($3 + [40]) = [1]
	$9 = *($3)
	CALL eosio_assert([1], [800])
	*($14 + [72]) = (($14 + [16]) + [37])
	*($14 + [68]) = ($14 + [16])
	*($14 + [64]) = ($14 + [16])
	*($14 + [160]) = ($14 + [64])
	*($14 + [84]) = ($3 + [8])
	*($14 + [80]) = $6
	*($14 + [88]) = ($3 + [16])
	*($14 + [92]) = ($3 + [24])
	*($14 + [96]) = ($3 + [40])
	CALL $39(($14 + [80]), ($14 + [160]))
	CALL db_update_i64(*($3 + [48]), (int_64)0, ($14 + [16]), [37])
	$7 = (($14 + [120]) + [16])
	if ( (uint_64)($9 <= *($7)) ){ goto $label$30 }
	*($7) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$30
	$3 = *($14 + [144])
	if ( ($3 == 0) ){ goto $label$31 }
	$0 = ($14 + [148])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$33 }
	
.LOOP $label$34:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$35 }
	CALL $97($2)
	
.LABEL $label$35
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$34 }
	$7 = *(($14 + [144]))
	goto $label$32 
	
.LABEL $label$33
	$7 = $3
	
.LABEL $label$32
	*($0) = $3
	CALL $97($7)
	
.LABEL $label$31
	*([0] + [4]) = ($14 + [176])
	return (unreachable)
	
.LABEL $label$21
	CALL $98($14)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [432])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [80])
	*([0] + [4]) = $21
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$3 = ($1 + [8])
	*(($20 = $21) + [16]) = *($3)
	$4 = *($1)
	*($1 + [76]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [64]) = *(*($2))
	if ( (CALL is_account(*(*($2))) == 0) ){ goto $label$1 }
	$16 = *($1 + [48])
	$17 = (*(($1 + [52])) - $16)
	$15 = ((int_32)$17 / (int_32)[56])
	$8 = [-1]
	if ( ((int_32)$17 < (int_32)[1]) ){ goto $label$2 }
	$10 = *(*($2))
	$17 = [0]
	
.LOOP $label$4:
	if ( ((int_64)*($16) == (int_64)$10) ){ goto $label$3 }
	$16 = ($16 + [56])
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)$15) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = $17
	
.LABEL $label$2
	CALL eosio_assert(((int_32)uint_32($8 >> [31]) ^ (int_32)[1]), [1360])
	
.LABEL $label$1
	*($1 + [80]) = [1]
	$5 = ($1 + [84])
	CALL $99($5, *($2 + [8]))
	$6 = ($1 + [96])
	CALL $99($6, *($2 + [12]))
	$16 = *($2 + [12])
	$17 = *($16)
	if ( ($17 & [1]) ){ goto $label$6 }
	$16 = uint_32($17 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$16 = *($16 + [4])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1392])
	$7 = *($16 + [4])
	$16 = *($2 + [16])
	$15 = *($16)
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$9 }
	$19 = ($1 + [48])
	$9 = (($20 + [32]) + [20])
	$8 = (($20 + [32]) + [8])
	$13 = ($20 + [64])
	$14 = ($1 + [52])
	$12 = ($20 + [48])
	
.LOOP $label$10:
	*(($11 = (($20 + [32]) + [12]))) = (int_64)0
	*($8) = [0]
	*($20 + [32]) = *($15)
	$2 = ($15 + [12])
	$16 = (*($2) - *($15 + [8]))
	if ( ($16 == 0) ){ goto $label$11 }
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$7 }
	$17 = CALL $96($16)
	*($8) = $17
	*($12) = ($17 + $16)
	*($11) = $17
	$2 = *(($15 + [8]))
	$16 = (*($2) - $2)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($17, $2, $16)
	*($11) = (*($11) + $16)
	
.LABEL $label$11
	CALL $105($9, ($15 + [20]))
	*($13) = *($15 + [32])
	$16 = *(($1 + [48]))
	$17 = (*($14) - $16)
	$2 = ((int_32)$17 / (int_32)[56])
	$18 = [-1]
	if ( ((int_32)$17 < (int_32)[1]) ){ goto $label$12 }
	$17 = [0]
	$10 = *($20 + [32])
	
.LOOP $label$14:
	if ( ((int_64)*($16) == (int_64)$10) ){ goto $label$13 }
	$16 = ($16 + [56])
	$17 = ($17 + [1])
	if ( ((int_32)$17 < (int_32)$2) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$18 = $17
	
.LABEL $label$12
	CALL eosio_assert(((int_32)uint_32($18 >> [31]) ^ (int_32)[1]), [1424])
	$16 = ((int_32)$18 * (int_32)[56])
	$17 = *($19)
	$2 = (($17 + $16) + [28])
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$15 }
	CALL $72($2, *($8), *($11))
	$17 = *($19)
	
.LABEL $label$15
	CALL $99((($17 + $16) + [40]), $9)
	*((*($19) + $16) + [52]) = *($13)
	if ( ((*($9) & [1]) == 0) ){ goto $label$16 }
	CALL $97(*((($20 + [32]) + [28])))
	
.LABEL $label$16
	$16 = *($8)
	if ( ($16 == 0) ){ goto $label$17 }
	*($11) = $16
	CALL $97($16)
	
.LABEL $label$17
	$15 = ($15 + [40])
	if ( ((int_32)$15 != (int_32)$7) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$19 = ($1 + [48])
	
.LABEL $label$8
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [800])
	*($20 + [24]) = [0]
	*($20) = ($20 + [24])
	*($20 + [36]) = $3
	*($20 + [32]) = $1
	$2 = ($1 + [16])
	*($20 + [40]) = $2
	$15 = ($1 + [32])
	*($20 + [44]) = $15
	*($20 + [48]) = $19
	$8 = ($1 + [64])
	*($20 + [52]) = $8
	$11 = ($1 + [72])
	*($20 + [56]) = $11
	$18 = ($1 + [76])
	*($20 + [60]) = $18
	$9 = ($1 + [80])
	*($20 + [64]) = $9
	*($20 + [68]) = $5
	*($20 + [72]) = $6
	CALL $62(($20 + [32]), $20)
	$17 = *($20 + [24])
	if ( ($17 <= [513]) ){ goto $label$19 }
	$16 = CALL malloc($17)
	goto $label$18 
	
.LABEL $label$19
	$16 = ($21 - (($17 + [15]) & [-16]))
	*([0] + [4]) = $16
	
.LABEL $label$18
	*($20 + [4]) = $16
	*($20) = $16
	*($20 + [8]) = ($16 + $17)
	*($20 + [24]) = $20
	*($20 + [36]) = $3
	*($20 + [40]) = $2
	*($20 + [44]) = $15
	*($20 + [48]) = $19
	*($20 + [52]) = $8
	*($20 + [56]) = $11
	*($20 + [32]) = $1
	*($20 + [60]) = $18
	*($20 + [64]) = $9
	*($20 + [68]) = $5
	*($20 + [72]) = $6
	CALL $63(($20 + [32]), ($20 + [24]))
	CALL db_update_i64(*($1 + [112]), (int_64)0, $16, $17)
	if ( ($17 <= [513]) ){ goto $label$20 }
	CALL free($16)
	
.LABEL $label$20
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$21 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	*($20 + [32]) = *($3)
	if ( (CALL memcmp(($20 + [16]), ($20 + [32]), [8]) == 0) ){ goto $label$22 }
	$16 = *($1 + [116])
	if ( ((int_32)$16 > (int_32)[-1]) ){ goto $label$23 }
	$16 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($20 + [24]), $4)
	*(($1 + [116])) = $16
	
.LABEL $label$23
	CALL db_idx64_update($16, (int_64)0, ($20 + [32]))
	
.LABEL $label$22
	*([0] + [4]) = ($20 + [80])
	return (unreachable)
	
.LABEL $label$7
	CALL $104($8)
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [128])
	*([0] + [4]) = $11
	if ( ((int_64)*($3) < (int_64)1) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$2 }
	$7 = (int_64)0
	$9 = (int_64)59
	$1 = [1280]
	$5 = (int_64)0
	
.LOOP $label$3:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$4 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$0 = ($0 + [165])
	goto $label$5 
	
.LABEL $label$6
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($0 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$4
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$3 }
	$7 = (int_64)0
	$6 = (int_64)59
	$1 = [576]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$12 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$0 = ($0 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	*($11 + [64]) = $8
	*($11 + [56]) = $5
	$7 = (int_64)0
	$9 = (int_64)59
	$1 = [1280]
	$5 = (int_64)0
	
.LOOP $label$13:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$14 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$0 = ($0 + [165])
	goto $label$15 
	
.LABEL $label$16
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($0 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$14
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$13 }
	$7 = (int_64)0
	$6 = (int_64)59
	$1 = [128]
	$8 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$22 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$0 = ($0 + [165])
	goto $label$20 
	
.LABEL $label$22
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$18
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$17 }
	$7 = (int_64)0
	$9 = (int_64)59
	$1 = [1280]
	$10 = (int_64)0
	
.LOOP $label$23:
	$6 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$24 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$0 = ($0 + [165])
	goto $label$25 
	
.LABEL $label$26
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($0 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$24
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$6 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$23 }
	*(($11 + [36])) = *(($3 + [12]))
	*(($11 + [32])) = *(($3 + [8]))
	*(($11 + [28])) = *(($3 + [4]))
	*($11 + [16]) = $2
	*($11 + [8]) = $10
	*($11 + [24]) = *($3)
	CALL $105(($11 + [40]), $4)
	$1 = CALL $37(($11 + [72]), ($11 + [56]), $5, $8, ($11 + [8]))
	CALL $38(($11 + [112]), $1)
	$0 = *($11 + [112])
	CALL send_inline($0, (*($11 + [116]) - $0))
	$0 = *($11 + [112])
	if ( ($0 == 0) ){ goto $label$27 }
	*($11 + [116]) = $0
	CALL $97($0)
	
.LABEL $label$27
	$0 = *($1 + [28])
	if ( ($0 == 0) ){ goto $label$28 }
	*(($1 + [32])) = $0
	CALL $97($0)
	
.LABEL $label$28
	$0 = *($1 + [16])
	if ( ($0 == 0) ){ goto $label$29 }
	*(($1 + [20])) = $0
	CALL $97($0)
	
.LABEL $label$29
	if ( ((*($11 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL $97(*(($11 + [48])))
	goto $label$1 
	
.LABEL $label$2
	$10 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$1 = [576]
	$5 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$35 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$0 = ($0 + [165])
	goto $label$33 
	
.LABEL $label$35
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$31
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$5 = ((int_64)$9 | (int_64)$5)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$30 }
	*($11 + [64]) = $5
	*($11 + [56]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$1 = [112]
	$5 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$41 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$0 = ($0 + [165])
	goto $label$39 
	
.LABEL $label$41
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$37
	$1 = ($1 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$5 = ((int_64)$9 | (int_64)$5)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$36 }
	$7 = (int_64)0
	$6 = (int_64)59
	$1 = [128]
	$8 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$47 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$0 = ($0 + [165])
	goto $label$45 
	
.LABEL $label$47
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$43
	$1 = ($1 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$42 }
	*(($11 + [36])) = *(($3 + [12]))
	*(($11 + [32])) = *(($3 + [8]))
	*(($11 + [28])) = *(($3 + [4]))
	*($11 + [16]) = $2
	*($11 + [8]) = $10
	*($11 + [24]) = *($3)
	CALL $105(($11 + [40]), $4)
	$1 = CALL $37(($11 + [72]), ($11 + [56]), $5, $8, ($11 + [8]))
	CALL $38(($11 + [112]), $1)
	$0 = *($11 + [112])
	CALL send_inline($0, (*($11 + [116]) - $0))
	$0 = *($11 + [112])
	if ( ($0 == 0) ){ goto $label$48 }
	*($11 + [116]) = $0
	CALL $97($0)
	
.LABEL $label$48
	$0 = *($1 + [28])
	if ( ($0 == 0) ){ goto $label$49 }
	*(($1 + [32])) = $0
	CALL $97($0)
	
.LABEL $label$49
	$0 = *($1 + [16])
	if ( ($0 == 0) ){ goto $label$50 }
	*(($1 + [20])) = $0
	CALL $97($0)
	
.LABEL $label$50
	if ( ((*($11 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL $97(*(($11 + [48])))
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [128])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $96(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $104($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [24])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [28])) = $6
	CALL $97($6)
	
.LABEL $label$11
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$12 }
	CALL $97(*(($1 + [20])))
	
.LABEL $label$12
	CALL $97($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $97($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$8 = *($0)
	$2 = int_32(($6 - $8) >> [4])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$7 = ($7 - $8)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($7 >> [3])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $96(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	*($6 + [8]) = (int_64)1398362884
	*($6) = (int_64)0
	CALL eosio_assert([1], [496])
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [464])
	$6 = (*($8) + [16])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $104($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [4]))
	$2 = ($7 + ($2 << [4]))
	$8 = $2
	
.LOOP $label$14:
	*($8 + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [496])
	$5 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [464])
	$8 = ($8 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$20
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $97($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [448])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = ((int_32)($2 - $6) / (int_32)[40])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $56($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[40])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$6 = (([0] - $6) - $4)
	$4 = ($2 + [-32])
	
.LOOP $label$5:
	if ( ((*(($4 + [12])) & [1]) == 0) ){ goto $label$6 }
	CALL $97(*(($4 + [20])))
	
.LABEL $label$6
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [4])) = $7
	CALL $97($7)
	
.LABEL $label$7
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-32]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$9:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [432])
	CALL memcpy($7, *($4), [8])
	*($4) = (*($4) + [8])
	CALL $33($0, ($7 + [8]))
	CALL $30($0, ($7 + [20]))
	CALL eosio_assert(((int_32)*($3) != (int_32)*($4)), [432])
	CALL memcpy(($7 + [32]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $105(($6 + [32]), ($1 + [16]))
	CALL $105(($6 + [16]), ($1 + [28]))
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	$4 = (*(($1 + [44])) - *($1 + [40]))
	$5 = ((int_32)$4 / (int_32)[40])
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$1 }
	$4 = CALL $96($4)
	*(($6 + [8])) = ($4 + ((int_32)$5 * (int_32)[40]))
	*($6) = $4
	*($6 + [4]) = $4
	CALL $54($6, *(($1 + [40])), *(($1 + [44])), $5)
	
.LABEL $label$2
	CALL $55($0, $2, $3, ($6 + [32]), ($6 + [16]), $6)
	$0 = *($6)
	if ( ($0 == 0) ){ goto $label$3 }
	$1 = *($6 + [4])
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$5 }
	$4 = ([0] - $0)
	$1 = ($1 + [-32])
	
.LOOP $label$6:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$7 }
	CALL $97(*(($1 + [20])))
	
.LABEL $label$7
	$5 = *($1)
	if ( ($5 == 0) ){ goto $label$8 }
	*(($1 + [4])) = $5
	CALL $97($5)
	
.LABEL $label$8
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $4) != (int_32)[-32]) ){ goto $label$6 }
	$1 = *($6)
	goto $label$4 
	
.LABEL $label$5
	$1 = $0
	
.LABEL $label$4
	*($6 + [4]) = $0
	CALL $97($1)
	
.LABEL $label$3
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL $97(*($6 + [24]))
	
.LABEL $label$9
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $97(*($6 + [40]))
	
.LABEL $label$10
	*([0] + [4]) = ($6 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $104($6)
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	$0 = *($7)
	
.LOOP $label$3:
	*($0 + [8]) = [0]
	*(($8 = ($0 + [12]))) = (int_64)0
	*($0) = *($1)
	$9 = ($1 + [8])
	$10 = ($1 + [12])
	$5 = (*($10) - *($9))
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [8])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = CALL $96($5)
	*($4) = $6
	*(($0 + [16])) = ($6 + $5)
	*($8) = $6
	$10 = *($9)
	$5 = (*($10) - $10)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($6, $10, $5)
	*($8) = (*($8) + $5)
	
.LABEL $label$4
	CALL $105(($0 + [20]), ($1 + [20]))
	*($0 + [32]) = *(($1 + [32]))
	$0 = (*($7) + [40])
	*($7) = $0
	$1 = ($1 + [40])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $104($4)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $96($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $104($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $97($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $8) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$6 = ((int_32)($8 - $5) / (int_32)[40])
	$7 = ($6 + $1)
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$3 }
	$8 = [107374182]
	$2 = ((int_32)($2 - $5) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$8 = ($2 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $96(((int_32)$8 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($8 = CALL memset($8, [0], [40])) + [8 align=4]) = (int_64)0
	*(($8 + [16])) = (int_64)0
	*(($8 + [24])) = (int_64)0
	$8 = (*($2) + [40])
	*($2) = $8
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$8 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $104($0)
	
.LABEL $label$2
	$3 = ($2 + ((int_32)$8 * (int_32)[40]))
	$8 = ($2 + ((int_32)$6 * (int_32)[40]))
	$2 = $8
	
.LOOP $label$8:
	*(($2 = CALL memset($2, [0], [40])) + [8 align=4]) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*(($2 + [24])) = (int_64)0
	$2 = ($2 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$10 }
	$4 = ([0] - $1)
	$1 = ($5 + [-20])
	
.LOOP $label$11:
	*(($5 = ($8 + [-32]))) = (int_64)0
	*(($6 = ($8 + [-24]))) = [0]
	$7 = ($1 + [-12])
	*($5) = *($7)
	*(($8 + [-28])) = *(($1 + [-8]))
	$5 = ($1 + [-4])
	*($6) = *($5)
	*(($8 + [-40])) = *(($1 + [-20]))
	*($5) = [0]
	*($7) = (int_64)0
	$5 = ($1 + [8])
	*(($8 + [-12])) = *($5)
	*(($8 + [-20])) = *($1)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($5) = [0]
	*(($8 + [-8])) = *(($1 + [12]))
	$8 = ($8 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $4) != (int_32)[-20]) ){ goto $label$11 }
	$1 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $1
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $2
	*(($0 + [8])) = $3
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$12 }
	$2 = ([0] - $5)
	$1 = ($1 + [-32])
	
.LOOP $label$13:
	if ( ((*(($1 + [12])) & [1]) == 0) ){ goto $label$14 }
	CALL $97(*(($1 + [20])))
	
.LABEL $label$14
	$8 = *($1)
	if ( ($8 == 0) ){ goto $label$15 }
	*(($1 + [4])) = $8
	CALL $97($8)
	
.LABEL $label$15
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $2) != (int_32)[-32]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $97($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7035937633859534848, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [108]) == (int_32)$4), [1296])
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$8 = CALL db_find_i64(*($4), *($4 + [8]), (int_64)7035937633859534848, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $22($4, $8)
	CALL eosio_assert(((int_32)*($2 + [108]) == (int_32)$4), [1296])
	
.LABEL $label$4
	*($2 + [116]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[56]) >= (uint_32)$1) ){ goto $label$5 }
	$6 = *($0)
	$4 = ((int_32)($7 - $6) / (int_32)[56])
	$5 = ($4 + $1)
	if ( ((uint_32)$5 >= (uint_32)[76695845]) ){ goto $label$3 }
	$7 = [76695844]
	$8 = ((int_32)($8 - $6) / (int_32)[56])
	if ( ((uint_32)$8 > (uint_32)[38347921]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $96(((int_32)$7 * (int_32)[56]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*(($7 = CALL memset($7, [0], [56])) + [16 align=4]) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	*($7 + [40 align=4]) = (int_64)0
	*(($7 + [48])) = [0]
	$7 = (*($8) + [56])
	*($8) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $104($0)
	
.LABEL $label$2
	$2 = ($8 + ((int_32)$7 * (int_32)[56]))
	$8 = ($8 + ((int_32)$4 * (int_32)[56]))
	$6 = $8
	
.LOOP $label$8:
	*(($7 = CALL memset($6, [0], [56])) + [16 align=4]) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	*($7 + [40 align=4]) = (int_64)0
	*(($7 + [48])) = [0]
	$6 = ($7 + [56])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$10 }
	$3 = ([0] - $7)
	$7 = ($1 + [-28])
	
.LOOP $label$11:
	*(($8 + [-48])) = *(($7 + [-20]))
	*(($8 + [-56])) = *(($7 + [-28]))
	$1 = ($7 + [-12])
	*(($8 + [-40])) = *($1)
	$4 = ($7 + [-4])
	*(($8 + [-32])) = *($4)
	*($1) = [0]
	*(($7 + [-8])) = [0]
	*($4) = [0]
	*(($1 = ($8 + [-28]))) = [0]
	*(($4 = ($8 + [-24]))) = [0]
	*(($5 = ($8 + [-20]))) = [0]
	*($1) = *($7)
	*($4) = *(($7 + [4]))
	$1 = ($7 + [8])
	*($5) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$1 = ($7 + [20])
	*(($8 + [-8])) = *($1)
	$4 = ($7 + [12])
	*(($8 + [-16])) = *($4)
	*($4) = [0]
	*(($7 + [16])) = [0]
	*($1) = [0]
	*(($8 + [-4])) = *(($7 + [24]))
	$8 = ($8 + [-56])
	$7 = ($7 + [-56])
	if ( ((int_32)($7 + $3) != (int_32)[-28]) ){ goto $label$11 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$4 = $7
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $2
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$12 }
	$1 = ([0] - $4)
	$7 = ($7 + [-40])
	
.LOOP $label$13:
	if ( ((*(($7 + [24])) & [1]) == 0) ){ goto $label$14 }
	CALL $97(*(($7 + [32])))
	
.LABEL $label$14
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$15 }
	*(($7 + [16])) = $8
	CALL $97($8)
	
.LABEL $label$15
	if ( ((*($7) & [1]) == 0) ){ goto $label$16 }
	CALL $97(*(($7 + [8])))
	
.LABEL $label$16
	$7 = ($7 + [-56])
	if ( ((int_32)($7 + $1) != (int_32)[-40]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$1 }
	CALL $97($4)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $110 ()
{
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $30(*($1), *($0 + [8]))
	CALL $33(*($1), *($0 + [12]))
	CALL $30(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [432])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$2 = *($0 + [4])
	$5 = ((int_32)($2 - $4) / (int_32)[56])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$1 }
	CALL $35($0, ($1 - $5))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$5 <= (uint_32)$1) ){ goto $label$2 }
	$1 = ((int_32)$1 * (int_32)[56])
	$3 = ($4 + $1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	$4 = (([0] - $4) - $1)
	$1 = ($2 + [-40])
	
.LOOP $label$4:
	if ( ((*(($1 + [24])) & [1]) == 0) ){ goto $label$5 }
	CALL $97(*(($1 + [32])))
	
.LABEL $label$5
	$5 = *(($1 + [12]))
	if ( ($5 == 0) ){ goto $label$6 }
	*(($1 + [16])) = $5
	CALL $97($5)
	
.LABEL $label$6
	if ( ((*($1) & [1]) == 0) ){ goto $label$7 }
	CALL $97(*(($1 + [8])))
	
.LABEL $label$7
	$1 = ($1 + [-56])
	if ( ((int_32)($1 + $4) != (int_32)[-40]) ){ goto $label$4 }
	
.LABEL $label$3
	*(($0 + [4])) = $3
	
.LABEL $label$2
}

void .FUNC $55 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$6 = (*(*($0)) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	CALL $105(($8 + [32]), $3)
	CALL $105(($8 + [16]), $4)
	*($8 + [8]) = [0]
	*($8) = (int_64)0
	$4 = (*($5 + [4]) - *($5))
	$3 = ((int_32)$4 / (int_32)[40])
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$2 }
	$4 = CALL $96($4)
	*(($8 + [8])) = ($4 + ((int_32)$3 * (int_32)[40]))
	*($8) = $4
	*($8 + [4]) = $4
	CALL $54($8, *($5), *(($5 + [4])), $3)
	
.LABEL $label$3
	CALL void $6((int_32 $1), (int_64 $2), (int_64 ($8 + [32])), (int_32 ($8 + [16])), (int_32 $8), (int_32 $0))
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = *($8 + [4])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	$3 = ([0] - $4)
	$5 = ($5 + [-32])
	
.LOOP $label$7:
	if ( ((*(($5 + [12])) & [1]) == 0) ){ goto $label$8 }
	CALL $97(*(($5 + [20])))
	
.LABEL $label$8
	$0 = *($5)
	if ( ($0 == 0) ){ goto $label$9 }
	*(($5 + [4])) = $0
	CALL $97($0)
	
.LABEL $label$9
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $3) != (int_32)[-32]) ){ goto $label$7 }
	$5 = *($8)
	goto $label$5 
	
.LABEL $label$6
	$5 = $4
	
.LABEL $label$5
	*($8 + [4]) = $4
	CALL $97($5)
	
.LABEL $label$4
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL $97(*($8 + [24]))
	
.LABEL $label$10
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $97(*($8 + [40]))
	
.LABEL $label$11
	*([0] + [4]) = ($8 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $104($8)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $96($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN9blackjack11clearrecordEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	$3 = *($0)
	*($5) = $3
	*($5 + [8]) = $3
	*($5 + [24]) = (int_64)0
	*($5 + [36]) = [0]
	$0 = CALL db_lowerbound_i64($3, $3, (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $22($5, $0)
	$4 = ($5 + [8])
	$2 = [0]
	
.LOOP $label$2:
	if ( *($0 + [80]) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL eosio_assert([1], [144])
	$0 = CALL db_next_i64(*($0 + [112]), ($5 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $22($5, $0)
	if ( (*($0 + [80]) == 0) ){ goto $label$4 }
	
.LABEL $label$3
	CALL eosio_assert([1], [176])
	CALL eosio_assert([1], [144])
	$1 = CALL db_next_i64(*($0 + [112]), ($5 + [40]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	CALL $22($5, $1)
	
.LABEL $label$5
	CALL $23($5, $0)
	$0 = CALL db_lowerbound_i64(*($5), *($4), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $22($5, $0)
	$2 = int_32((($2 << [24]) + [16777216]) >> [24])
	if ( ((int_32)$2 < (int_32)[101]) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($5 + [24])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($5 + [28])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $24($2)
	CALL $97($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($5 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $97($0)
	
.LABEL $label$6
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [224])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [272])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [336])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $24($4)
	CALL $97($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $24($4)
	CALL $97($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [112]))
	$7 = *($1 + [116])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [400])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $96([120])
	CALL $25($6)
	*($6 + [108]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = ($6 + [8])
	*($8 + [32]) = $6
	*($8 + [40]) = ($6 + [16])
	*($8 + [44]) = ($6 + [32])
	*($8 + [48]) = ($6 + [48])
	*($8 + [52]) = ($6 + [64])
	*($8 + [56]) = ($6 + [72])
	*($8 + [60]) = ($6 + [76])
	*($8 + [64]) = ($6 + [80])
	*($8 + [68]) = ($6 + [84])
	*($8 + [72]) = ($6 + [96])
	CALL $26(($8 + [32]), ($8 + [24]))
	*($6 + [116]) = [-1]
	*($6 + [112]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [32]) = $5
	$7 = *($6 + [112])
	*($8 + [4]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $24($4)
	CALL $97($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [80])
	return $6
}

int_32 .FUNC $25 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [464])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [496])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [464])
	*(($0 + [56])) = [0]
	*($0 + [48 align=4]) = (int_64)0
	*($0 + [84]) = [0]
	*(($0 + [88])) = [0]
	*(($0 + [92])) = [0]
	*($0 + [96]) = [0]
	*(($0 + [100])) = [0]
	*(($0 + [104])) = [0]
	return $0
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((*($0 + [96]) & [1]) == 0) ){ goto $label$1 }
	CALL $97(*(($0 + [104])))
	
.LABEL $label$1
	if ( ((*($0 + [84]) & [1]) == 0) ){ goto $label$2 }
	CALL $97(*(($0 + [92])))
	
.LABEL $label$2
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$5 }
	$2 = ([0] - $1)
	$5 = ($5 + [-40])
	
.LOOP $label$6:
	if ( ((*(($5 + [24])) & [1]) == 0) ){ goto $label$7 }
	CALL $97(*(($5 + [32])))
	
.LABEL $label$7
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$8 }
	*(($5 + [16])) = $3
	CALL $97($3)
	
.LABEL $label$8
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	CALL $97(*(($5 + [8])))
	
.LABEL $label$9
	$5 = ($5 + [-56])
	if ( ((int_32)($5 + $2) != (int_32)[-40]) ){ goto $label$6 }
	$5 = *(($0 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$5 = $1
	
.LABEL $label$4
	*($4) = $1
	CALL $97($5)
	
.LABEL $label$3
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $96(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $104($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $24($1)
	CALL $97($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $97($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$5 = *($0)
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($5, *($8 + [4]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	$5 = *($0 + [4])
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($5, *($8 + [4]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	$5 = *($0 + [8])
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($5, *($8 + [4]), [8])
	$7 = (*($8 + [4]) + [8])
	*($8 + [4]) = $7
	CALL eosio_assert(((uint_32)(*($8 + [8]) - $7) > (uint_32)[7]), [432])
	CALL memcpy(($5 + [8]), *($8 + [4]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	$5 = *($0 + [12])
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($5, *($8 + [4]), [8])
	$7 = (*($8 + [4]) + [8])
	*($8 + [4]) = $7
	CALL eosio_assert(((uint_32)(*($8 + [8]) - $7) > (uint_32)[7]), [432])
	CALL memcpy(($5 + [8]), *($8 + [4]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	$5 = *($3 + [4])
	$7 = [0]
	$6 = (int_64)0
	$4 = ($3 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *(($3 + [8]))), [448])
	$5 = *($4)
	$8 = *($5)
	$5 = ($5 + [1])
	*($4) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($8 >> [7]) ){ goto $label$1 }
	CALL $28($2, (CASTING uint_32)(uint_64 $6))
	$5 = *($2 + [4])
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$2 }
	$7 = ($9 + [20])
	$4 = ($9 + [28])
	
.LOOP $label$3:
	*($9) = $3
	*($9 + [8]) = $8
	*((($9 + [8]) + [8])) = ($8 + [16])
	*($7) = ($8 + [28])
	*((($9 + [8]) + [16])) = ($8 + [40])
	*($4) = ($8 + [52])
	*($9 + [12]) = ($8 + [8])
	CALL $29(($9 + [8]), $9)
	$8 = ($8 + [56])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = *($0 + [20])
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($5, *($8 + [4]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	$5 = *($0 + [24])
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[3]), [432])
	CALL memcpy($5, *($8 + [4]), [4])
	*($8 + [4]) = (*($8 + [4]) + [4])
	$5 = *($0 + [28])
	$8 = *($1)
	CALL eosio_assert(((uint_32)(*($8 + [8]) - *($8 + [4])) > (uint_32)[3]), [432])
	CALL memcpy($5, *($8 + [4]), [4])
	*($8 + [4]) = (*($8 + [4]) + [4])
	$5 = *($0 + [32])
	$8 = *($1)
	CALL eosio_assert(((int_32)*($8 + [8]) != (int_32)*($8 + [4])), [432])
	CALL memcpy(($9 + [8]), *($8 + [4]), [1])
	*($8 + [4]) = (*($8 + [4]) + [1])
	*($5) = ((int_32)*($9 + [8]) != (int_32)[0])
	CALL $30(*($1), *($0 + [36]))
	CALL $30(*($1), *($0 + [40]))
	*([0] + [4]) = ($9 + [32])
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [400])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $96([32])
	$6 = CALL $70($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $71(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $97($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$9 = [0]
	*(($10 + [40])) = [0]
	*($10 + [24]) = (int_64)-1
	*($10 + [32]) = (int_64)0
	$7 = *($1)
	*($10 + [8]) = $7
	*($10 + [16]) = $2
	$8 = (uint_64)$3 >> (uint_64)(int_64)8
	$1 = CALL db_find_i64($7, $2, (int_64)3607749779137757184, $8)
	if ( ((int_32)$1) < (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(CALL $69(($10 + [8]), $1) + [16]) == (int_32)($10 + [8])), [1296])
	$4 = *(($10 + [32]))
	$6 = *(($10 + [36]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$6 }
	$9 = ($6 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)(uint_64)*(*($9) + [8]) >> (uint_64)(int_64)8) == (int_64)$8) ){ goto $label$6 }
	$6 = $9
	$1 = ($9 + [-24])
	$9 = $1
	if ( ((int_32)($1 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$9 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [1296])
	goto $label$3 
	
.LABEL $label$5
	*($0 + [8]) = $3
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	
.LOOP $label$9:
	$1 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$1 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($1, [464])
	$6 = *($10 + [32])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$9 = [0]
	$1 = CALL db_find_i64(*($10 + [8]), *(($10 + [16])), (int_64)3607749779137757184, $8)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $69(($10 + [8]), $1)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)($10 + [8])), [1296])
	
.LABEL $label$3
	*($0) = *($9)
	*(($0 + [8])) = *(($9 + [8]))
	$6 = *($10 + [32])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($10 + [36])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$9 = ($9 + [-24])
	$1 = *($9)
	*($9) = [0]
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $97($1)
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$14 }
	$9 = *(($10 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$9 = $6
	
.LABEL $label$12
	*($5) = $6
	CALL $97($9)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $43(*($1), *($0 + [8]))
	CALL $66(*($1), *($0 + [12]))
	CALL $43(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [864])
	CALL memcpy(*($0 + [4]), $2, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[56]))
	$5 = *($0 + [4])
	$4 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [8]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $5) > (int_32)[0]), [864])
	CALL memcpy(*($7), ($8 + [8]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$2 = ($8 + [20])
	$3 = ($8 + [28])
	
.LOOP $label$3:
	*($8) = $0
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [16])
	*($2) = ($7 + [28])
	*((($8 + [8]) + [16])) = ($7 + [40])
	*($3) = ($7 + [52])
	*($8 + [12]) = ($7 + [8])
	CALL $65(($8 + [8]), $8)
	$7 = ($7 + [56])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [8])
	$7 = *($2)
	$2 = *($0 + [8])
	$6 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$3 = *($1)
	$7 = *($3)
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($3) = $7
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $7)
	
.LABEL $label$2
	$3 = *($7)
	$7 = *($0 + [12])
	$2 = *($7 + [4])
	$5 = ($2 - $3)
	$6 = (CASTING uint_64)(uint_32 $5)
	$4 = *($1)
	$7 = *($4)
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	*($4) = ( $7 ? ($5 + $7) : ((int_32)$3 == (int_32)$2) )
	$7 = *($0)
	$0 = *($0 + [16])
	$6 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$2 = *($1)
	$7 = *($2)
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	*($2) = $7
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$5 }
	*($2) = ($0 + $7)
	
.LABEL $label$5
	*(($7 = *($1))) = (*($7) + [1])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [864])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [864])
	CALL memcpy(*($2), $5, [1])
	$7 = (*($2) + [1])
	*($2) = $7
	$5 = ($5 + [1])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [80])
	*([0] + [4]) = $15
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$2 = *($2)
	*($1 + [32]) = *($2)
	*(($1 + [44])) = *(($2 + [12]))
	*(($1 + [40])) = *(($2 + [8]))
	*(($1 + [36])) = *(($2 + [4]))
	$3 = ($1 + [8])
	*(($2 = $15) + [16]) = *($3)
	$4 = *($1)
	*($1 + [32]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *($1 + [32])) * (float_64)(float_64)0.98))
	CALL eosio_assert([1], [800])
	*($2 + [24]) = [0]
	*($2) = ($2 + [24])
	*($2 + [36]) = $3
	*($2 + [32]) = $1
	$6 = ($1 + [16])
	*($2 + [40]) = $6
	$5 = ($1 + [32])
	*($2 + [44]) = $5
	$7 = ($1 + [48])
	*($2 + [48]) = $7
	$8 = ($1 + [64])
	*($2 + [52]) = $8
	$9 = ($1 + [72])
	*($2 + [56]) = $9
	$10 = ($1 + [76])
	*($2 + [60]) = $10
	$11 = ($1 + [80])
	*($2 + [64]) = $11
	$12 = ($1 + [84])
	*($2 + [68]) = $12
	$13 = ($1 + [96])
	*($2 + [72]) = $13
	CALL $62(($2 + [32]), $2)
	$14 = *($2 + [24])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$15 = CALL malloc($14)
	goto $label$1 
	
.LABEL $label$2
	$15 = ($15 - (($14 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$1
	*($2 + [4]) = $15
	*($2) = $15
	*($2 + [8]) = ($15 + $14)
	*($2 + [24]) = $2
	*($2 + [36]) = $3
	*($2 + [40]) = $6
	*($2 + [44]) = $5
	*($2 + [48]) = $7
	*($2 + [52]) = $8
	*($2 + [56]) = $9
	*($2 + [32]) = $1
	*($2 + [60]) = $10
	*($2 + [64]) = $11
	*($2 + [68]) = $12
	*($2 + [72]) = $13
	CALL $63(($2 + [32]), ($2 + [24]))
	CALL db_update_i64(*($1 + [112]), (int_64)0, $15, $14)
	if ( ($14 <= [513]) ){ goto $label$3 }
	CALL free($15)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($2 + [32]) = *($3)
	if ( (CALL memcmp(($2 + [16]), ($2 + [32]), [8]) == 0) ){ goto $label$5 }
	$15 = *($1 + [116])
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$6 }
	$15 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($2 + [24]), $4)
	*(($1 + [116])) = $15
	
.LABEL $label$6
	CALL db_idx64_update($15, (int_64)0, ($2 + [32]))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [80])
}

int_64 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	float_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [1280]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$1 }
	*($8 + [8]) = $5
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [1280]
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$6 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$1 = ($1 + [165])
	goto $label$7 
	
.LABEL $label$8
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$6
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$5 }
	CALL $68(($8 + [16]), ($8 + [8]), $5, (int_64)353416332804)
	$7 = (float_64)800
	$4 = (int_64)
	if ( (uint_64)($4((int_64)88000000000000 - *($8 + [16]))) <= (int_64)4400000000001) ){ goto $label$9 }
	$7 = (float_64)400
	if ( (uint_64)(((int_64)$4 + (int_64)-4400000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)200
	if ( (uint_64)(((int_64)$4 + (int_64)-8800000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)100
	if ( (uint_64)(((int_64)$4 + (int_64)-13200000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)50
	if ( (uint_64)(((int_64)$4 + (int_64)-17600000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)25
	if ( (uint_64)(((int_64)$4 + (int_64)-22000000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)12.5
	if ( (uint_64)(((int_64)$4 + (int_64)-26400000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)6.25
	if ( (uint_64)(((int_64)$4 + (int_64)-30800000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)3.125
	if ( (uint_64)(((int_64)$4 + (int_64)-35200000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)1.5625
	if ( (uint_64)(((int_64)$4 + (int_64)-39600000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)0.7813
	if ( (uint_64)(((int_64)$4 + (int_64)-44000000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)0.3906
	if ( (uint_64)(((int_64)$4 + (int_64)-48400000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)0.1953
	if ( (uint_64)(((int_64)$4 + (int_64)-52800000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)0.0977
	if ( (uint_64)(((int_64)$4 + (int_64)-57200000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)0.0488
	if ( (uint_64)(((int_64)$4 + (int_64)-61600000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)0.0244
	if ( (uint_64)(((int_64)$4 + (int_64)-66000000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)0.0122
	if ( (uint_64)(((int_64)$4 + (int_64)-70400000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = (float_64)0.0061
	if ( (uint_64)(((int_64)$4 + (int_64)-74800000000001) <= (int_64)4400000000000) ){ goto $label$9 }
	$7 = ( (float_64)0.0031 ? (float_64)0.0015 : (uint_64)(((int_64)$4 + (int_64)-79200000000001) <= (int_64)4400000000000) )
	
.LABEL $label$9
	*([0] + [4]) = ($8 + [32])
	return $7
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $64(*($1), *($0 + [16]))
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [864])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [864])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$2 = *($1)
	*($5 + [15]) = *(*($0 + [32]))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [864])
	CALL memcpy(*($2 + [4]), ($5 + [15]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	CALL $43(*($1), *($0 + [36]))
	CALL $43(*($1), *($0 + [40]))
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [16])
	*(($7 = *($1))) = (*($7) + [16])
	$7 = *($7)
	$7 = *($0 + [16])
	$3 = *($7 + [4])
	$6 = (CASTING uint_64)(uint_32 ((int_32)($3 - $7) / (int_32)[56]))
	$2 = *($1)
	$5 = *($2)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($2) = $5
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$5 = ($8 + [20])
	$4 = ($8 + [28])
	
.LOOP $label$3:
	*($8) = $2
	*($8 + [8]) = $7
	*((($8 + [8]) + [8])) = ($7 + [16])
	*($5) = ($7 + [28])
	*((($8 + [8]) + [16])) = ($7 + [40])
	*($4) = ($7 + [52])
	*($8 + [12]) = ($7 + [8])
	CALL $67(($8 + [8]), $8)
	$7 = ($7 + [56])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*(($7 = *($1))) = (*($7) + [8])
	*(($7 = *($1))) = (*($7) + [4])
	*(($7 = *($1))) = (*($7) + [4])
	*(($7 = *($1))) = (*($7) + [1])
	$7 = *($5)
	$5 = *($0 + [36])
	$6 = (CASTING uint_64)(uint_32 ( *($5 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$3 = *($1)
	$7 = *($3)
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	*($3) = $7
	$5 = *($5)
	$5 = ( *(($5 + [4])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$5 }
	*($3) = ($5 + $7)
	
.LABEL $label$5
	$7 = *($5)
	$5 = *($0 + [40])
	$6 = (CASTING uint_64)(uint_32 ( *($5 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ))
	$3 = *($1)
	$7 = *($3)
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	*($3) = $7
	$5 = *($5)
	$5 = ( *(($5 + [4])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$7 }
	*($3) = ($5 + $7)
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $96(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $97($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $96($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $97($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $100($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $96($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $104 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $105(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $105(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $97(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $97(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [432])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [432])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [432])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $30(*($1), ($0 + [32]))
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $96(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $104($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $97($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	$4 = ($1 + [24])
	$3 = *($1)
	$5 = *(($1 + [28]))
	$10 = *($1 + [24])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$2 }
	$8 = [0]
	
.LOOP $label$4:
	$9 = *($10)
	$7 = *($2)
	CALL eosio_assert(((int_64)*(($10 + [8])) == (int_64)*($7 + [8])), [1760])
	$6 = *($7)
	$8 = ($8 | ((int_64)$9 == (int_64)$6))
	$10 = ($10 + [16])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$3 }
	if ( ((int_64)$9 != (int_64)$6) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($8 & [1]) ){ goto $label$1 }
	$10 = *(($1 + [28]))
	
.LABEL $label$2
	$8 = *($2)
	if ( ((int_32)$10 == (int_32)*(($1 + [32]))) ){ goto $label$5 }
	*($10) = *($8)
	*(($10 + [8])) = *(($8 + [8]))
	*(($10 = ($1 + [28]))) = (*($10) + [16])
	goto $label$1 
	
.LABEL $label$5
	CALL $87($4, $8)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [800])
	$10 = *($1 + [12])
	$8 = ( *(($1 + [16])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($8 + [9])
	$9 = (CASTING uint_64)(uint_32 $8)
	$7 = ($1 + [12])
	
.LOOP $label$6:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	$2 = *(($1 + [24]))
	$8 = *(($1 + [28]))
	$5 = ($8 - $2)
	$9 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$7:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$8 }
	$10 = (($5 & [-16]) + $10)
	
.LABEL $label$8
	if ( ($10 <= [513]) ){ goto $label$10 }
	$8 = CALL malloc($10)
	goto $label$9 
	
.LABEL $label$10
	$8 = ($12 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$9
	*($11) = $8
	$2 = ($8 + $10)
	*($11 + [8]) = $2
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [864])
	CALL memcpy($8, $1, [8])
	*($11 + [15]) = *($1 + [8])
	$5 = ($8 + [8])
	CALL eosio_assert(((int_32)($2 - $5) > (int_32)[0]), [864])
	CALL memcpy($5, ($11 + [15]), [1])
	*($11 + [4]) = ($8 + [9])
	CALL $43($11, $7)
	CALL $48($11, $4)
	CALL db_update_i64(*($1 + [40]), (int_64)0, $8, $10)
	if ( ($10 <= [513]) ){ goto $label$11 }
	CALL free($8)
	
.LABEL $label$11
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$9 = *(*($0 + [4]))
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)*(($1 + [32]))) ){ goto $label$2 }
	*($3) = *($9)
	*(($3 + [8])) = *(($9 + [8]))
	*($6) = (*($6) + [16])
	goto $label$1 
	
.LABEL $label$2
	CALL $87(($1 + [24]), $9)
	
.LABEL $label$1
	$9 = *($1 + [12])
	$6 = ( *(($1 + [16])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($6 + [9])
	$8 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [12])
	
.LOOP $label$3:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$3 = ($1 + [24])
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$7 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$4:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$5 }
	$9 = (($7 & [-16]) + $9)
	
.LABEL $label$5
	if ( ($9 <= [513]) ){ goto $label$7 }
	$10 = CALL malloc($9)
	goto $label$6 
	
.LABEL $label$7
	$10 = ($10 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$6
	*($11) = $10
	$4 = ($10 + $9)
	*($11 + [8]) = $4
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [864])
	CALL memcpy($10, $1, [8])
	*($11 + [15]) = *($1 + [8])
	$5 = ($10 + [8])
	CALL eosio_assert(((int_32)($4 - $5) > (int_32)[0]), [864])
	CALL memcpy($5, ($11 + [15]), [1])
	*($11 + [4]) = ($10 + [9])
	CALL $43($11, $6)
	CALL $48($11, $3)
	$8 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)7235159550150574080, *(*($0 + [8])), $8, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$8 }
	CALL free($10)
	
.LABEL $label$8
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [464])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [432])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [432])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [688])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [736])
	*($1 + [8]) = *(*($2))
	$3 = *($1)
	CALL eosio_assert([1], [800])
	$2 = *($1 + [12])
	$7 = ( *(($1 + [16])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($7 + [9])
	$9 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$4 = ($1 + [24])
	$6 = *($1 + [24])
	$5 = *(($1 + [28]))
	$8 = ($5 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$3 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$3
	if ( ($2 <= [513]) ){ goto $label$5 }
	$10 = CALL malloc($2)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($10 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$4
	*($11) = $10
	$5 = ($10 + $2)
	*($11 + [8]) = $5
	CALL eosio_assert(((int_32)$2 > (int_32)[7]), [864])
	CALL memcpy($10, $1, [8])
	*($11 + [15]) = *(($1 + [8]))
	$6 = ($10 + [8])
	CALL eosio_assert(((int_32)($5 - $6) > (int_32)[0]), [864])
	CALL memcpy($6, ($11 + [15]), [1])
	*($11 + [4]) = ($10 + [9])
	CALL $43($11, $7)
	CALL $48($11, $4)
	CALL db_update_i64(*($1 + [40]), (int_64)0, $10, $2)
	if ( ($2 <= [513]) ){ goto $label$6 }
	CALL free($10)
	
.LABEL $label$6
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [16])
	$11 = $10
	*([0] + [4]) = $10
	*($1 + [8]) = *(*(*($0 + [4])))
	$9 = *($1 + [12])
	$2 = ( *(($1 + [16])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($2 + [9])
	$8 = (CASTING uint_64)(uint_32 $2)
	$3 = ($1 + [12])
	$2 = *($0)
	
.LOOP $label$1:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$4 = ($1 + [24])
	$6 = *($1 + [24])
	$5 = *(($1 + [28]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$2:
	$9 = ($9 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$3 }
	$9 = (($7 & [-16]) + $9)
	
.LABEL $label$3
	if ( ($9 <= [513]) ){ goto $label$5 }
	$10 = CALL malloc($9)
	goto $label$4 
	
.LABEL $label$5
	$10 = ($10 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$4
	*($11) = $10
	$5 = ($10 + $9)
	*($11 + [8]) = $5
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [864])
	CALL memcpy($10, $1, [8])
	*($11 + [15]) = *(($1 + [8]))
	$6 = ($10 + [8])
	CALL eosio_assert(((int_32)($5 - $6) > (int_32)[0]), [864])
	CALL memcpy($6, ($11 + [15]), [1])
	*($11 + [4]) = ($10 + [9])
	CALL $43($11, $3)
	CALL $48($11, $4)
	$8 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)7235159550150574080, *(*($0 + [8])), $8, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$6 }
	CALL free($10)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[56])
	$6 = ($7 + [1])
	if ( ((uint_32)$6 >= (uint_32)[76695845]) ){ goto $label$2 }
	$5 = [76695844]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[56])
	if ( ((uint_32)$8 > (uint_32)[38347921]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$5 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $96(((int_32)$5 * (int_32)[56]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $104($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$7 * (int_32)[56])))) = *($1)
	*(($8 + [8])) = *(($1 + [8]))
	CALL $105(($8 + [16]), ($1 + [16]))
	*(($2 = ($8 + [36]))) = [0]
	*($8 + [28 align=4]) = (int_64)0
	$7 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($7 == 0) ){ goto $label$6 }
	$3 = ($8 + [28])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$4 = CALL $96($7)
	*($3) = $4
	*(($3 = ($8 + [32]))) = $4
	*($2) = ($4 + $7)
	$2 = *(($1 + [28]))
	$7 = (*(($1 + [32])) - $2)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($4, $2, $7)
	*($3) = (*($3) + $7)
	
.LABEL $label$6
	$2 = ($6 + ((int_32)$5 * (int_32)[56]))
	CALL $105(($8 + [40]), ($1 + [40]))
	*($8 + [52]) = *($1 + [52])
	$3 = ($8 + [56])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$4 = ([0] - $1)
	$1 = ($5 + [-28])
	
.LOOP $label$9:
	*(($8 + [-48])) = *(($1 + [-20]))
	*(($8 + [-56])) = *(($1 + [-28]))
	$5 = ($1 + [-12])
	*(($8 + [-40])) = *($5)
	$6 = ($1 + [-4])
	*(($8 + [-32])) = *($6)
	*($5) = [0]
	*(($1 + [-8])) = [0]
	*($6) = [0]
	*(($5 = ($8 + [-28]))) = [0]
	*(($6 = ($8 + [-24]))) = [0]
	*(($7 = ($8 + [-20]))) = [0]
	*($5) = *($1)
	*($6) = *(($1 + [4]))
	$5 = ($1 + [8])
	*($7) = *($5)
	*($5) = [0]
	*($1) = (int_64)0
	$5 = ($1 + [20])
	*(($8 + [-8])) = *($5)
	$6 = ($1 + [12])
	*(($8 + [-16])) = *($6)
	*($6) = [0]
	*(($1 + [16])) = [0]
	*($5) = [0]
	*(($8 + [-4])) = *(($1 + [24]))
	$8 = ($8 + [-56])
	$1 = ($1 + [-56])
	if ( ((int_32)($1 + $4) != (int_32)[-28]) ){ goto $label$9 }
	$1 = *(($0 + [4]))
	$6 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$6 = $1
	
.LABEL $label$7
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$10 }
	$5 = ([0] - $6)
	$1 = ($1 + [-40])
	
.LOOP $label$11:
	if ( ((*(($1 + [24])) & [1]) == 0) ){ goto $label$12 }
	CALL $97(*(($1 + [32])))
	
.LABEL $label$12
	$8 = *(($1 + [12]))
	if ( ($8 == 0) ){ goto $label$13 }
	*(($1 + [16])) = $8
	CALL $97($8)
	
.LABEL $label$13
	if ( ((*($1) & [1]) == 0) ){ goto $label$14 }
	CALL $97(*(($1 + [8])))
	
.LABEL $label$14
	$1 = ($1 + [-56])
	if ( ((int_32)($1 + $5) != (int_32)[-40]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($6 == 0) ){ goto $label$15 }
	CALL $97($6)
	
.LABEL $label$15
	return (unreachable)
	
.LABEL $label$5
	CALL $104($3)
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [112]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1712])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035937633859534848)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1648])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1648])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $22(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$7 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($7 - $4)) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL $97($4)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($7 << [1])
	$2 = ( $3 ? $4 : ($4 <= $3) )
	
.LABEL $label$6
	$4 = CALL $96($2)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $2)
	CALL memcpy($4, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$7 = (*($0 + [4]) - $4)
	$5 = ( ($1 + $7) ? $2 : ((uint_32)$3 > (uint_32)$7) )
	$6 = ($5 - $1)
	if ( ($6 == 0) ){ goto $label$7 }
	CALL memmove($4, $1, $6)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$8 }
	$0 = ($2 - $5)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $5, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($4 + $6)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $104($0)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [448])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = int_32(($2 - $6) >> [5])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $76($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ($4 << [5])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$7 = (([0] - $6) - $4)
	$4 = ($2 + [-16])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $97(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-32])
	if ( ((int_32)($4 + $7) != (int_32)[-16]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$7 }
	$4 = ($0 + [4])
	
.LOOP $label$8:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($4)) > (uint_32)[7]), [432])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [432])
	CALL memcpy(($7 + [8]), *($4), [8])
	*($4) = (*($4) + [8])
	CALL $30($0, ($7 + [16]))
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [464])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [432])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [432])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $96(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $104($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $97($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $97($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$2 = int_32(($6 - $4) >> [5])
	$5 = ($2 + $1)
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$7 = ($7 - $4)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($7 >> [4])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $96(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$7 = ($0 + [4])
	
.LOOP $label$8:
	*(($4 = ($6 + [16]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($6 + [24]))) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*($4) = [0]
	*(($6 + [20])) = [0]
	*($5) = [0]
	$6 = (*($7) + [32])
	*($7) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $104($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [5]))
	$7 = ($7 + ($2 << [5]))
	$6 = $7
	
.LOOP $label$9:
	*(($4 = ($6 + [24]))) = (int_64)0
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*($4) = [0]
	$6 = ($6 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$11 }
	$5 = ([0] - $4)
	$1 = ($1 + [-16])
	
.LOOP $label$12:
	*(($7 + [-24])) = *(($1 + [-8]))
	*(($7 + [-32])) = *(($1 + [-16]))
	*(($7 + [-16])) = *($1)
	$4 = ($1 + [8])
	*(($7 + [-8])) = *($4)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($4) = [0]
	$7 = ($7 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $5) != (int_32)[-16]) ){ goto $label$12 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$5 = $4
	
.LABEL $label$10
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	$1 = ([0] - $5)
	$6 = ($4 + [-16])
	
.LOOP $label$14:
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $97(*(($6 + [8])))
	
.LABEL $label$15
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $1) != (int_32)[-16]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $97($5)
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [96])
	$22 = $23
	*([0] + [4]) = $23
	$2 = *($0)
	$9 = *($0 + [4])
	$4 = *($9)
	$11 = *($4 + [16])
	if ( ((int_64)$11 != (int_64)-1) ){ goto $label$1 }
	$11 = (int_64)0
	$16 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$2 }
	CALL $22($4, $16)
	*($22 + [36]) = [0]
	*($22 + [32]) = $4
	$11 = *(*(CALL $80(($22 + [32])) + [4]))
	$11 = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $11
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($11 <= (int_64)-2), [1584])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *(*($9 + [4]))
	$4 = *($9 + [8])
	*($1 + [16]) = *($4)
	*(($1 + [24])) = *(($4 + [8]))
	$4 = *($9 + [8])
	*($1 + [32]) = *($4)
	*(($1 + [40])) = *(($4 + [8]))
	*($1 + [32]) = (int_64)0
	$11 = CALL current_time()
	*($1 + [80]) = [0]
	*($1 + [72]) = ((uint_64)$11 / (uint_64)(int_64)1000000)
	*((($22 + [32]) + [24])) = (int_64)0
	*(($12 = (($22 + [32]) + [32]))) = (int_64)0
	*((($22 + [32]) + [48])) = [0]
	*($22 + [48]) = (int_64)0
	*($22 + [72]) = (int_64)0
	$3 = *($4 + [4])
	$4 = *($9 + [12])
	$9 = *($4)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$4 }
	$6 = ($1 + [48])
	$7 = (($22 + [32]) + [40])
	$5 = (($22 + [32]) + [16])
	$4 = ($22 + [16])
	$15 = ($1 + [56])
	$16 = ($1 + [52])
	$19 = ($22 + [24])
	
.LOOP $label$5:
	*(($13 = ($22 + [8]))) = *(($9 + [8]))
	*($22) = *($9)
	$8 = ($9 + [16])
	CALL $105($4, $8)
	*(($14 = (($22 + [32]) + [8]))) = *($13)
	*($22 + [32]) = *($22)
	CALL $99($5, $4)
	$9 = *($16)
	if ( ((int_32)$9 == (int_32)*($15)) ){ goto $label$7 }
	*($9) = *($22 + [32])
	*(($9 + [8])) = *($14)
	CALL $105(($9 + [16]), $5)
	*($9 + [28 align=4]) = (int_64)0
	*(($17 = ($9 + [36]))) = [0]
	$18 = (($22 + [32]) + [28])
	$13 = (*($12) - *($18))
	if ( ($13 == 0) ){ goto $label$8 }
	$10 = ($9 + [28])
	if ( ((int_32)$13 <= (int_32)[-1]) ){ goto $label$3 }
	$14 = CALL $96($13)
	*($10) = $14
	*($17) = ($14 + $13)
	*(($13 = ($9 + [32]))) = $14
	$18 = *($18)
	$17 = (*($12) - $18)
	if ( ((int_32)$17 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($14, $18, $17)
	*($13) = (*($13) + $17)
	
.LABEL $label$8
	CALL $105(($9 + [40]), $7)
	*($9 + [52]) = *((($22 + [32]) + [52]))
	*($16) = (*($16) + [56])
	goto $label$6 
	
.LABEL $label$7
	CALL $81($6, ($22 + [32]))
	
.LABEL $label$6
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL $97(*($19))
	
.LABEL $label$9
	$9 = ($8 + [16])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$5 }
	if ( ((*(($22 + [72])) & [1]) == 0) ){ goto $label$4 }
	CALL $97(*(($22 + [80])))
	
.LABEL $label$4
	$9 = *(($22 + [60]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($22 + [64])) = $9
	CALL $97($9)
	
.LABEL $label$10
	$16 = ($1 + [80])
	$13 = ($1 + [72])
	$8 = ($1 + [32])
	$5 = ($1 + [16])
	$14 = ($1 + [8])
	if ( ((*($22 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $97(*(($22 + [56])))
	
.LABEL $label$11
	*($22 + [88]) = [0]
	*($22) = ($22 + [88])
	*($22 + [36]) = $14
	*($22 + [40]) = $5
	*($22 + [44]) = $8
	*($22 + [56]) = $13
	*($22 + [32]) = $1
	$12 = ($1 + [48])
	*($22 + [48]) = $12
	$3 = ($1 + [64])
	*($22 + [52]) = $3
	$15 = ($1 + [76])
	*($22 + [60]) = $15
	*($22 + [64]) = $16
	$17 = ($1 + [84])
	*($22 + [68]) = $17
	$18 = ($1 + [96])
	*($22 + [72]) = $18
	CALL $62(($22 + [32]), $22)
	$4 = *($22 + [88])
	if ( ($4 <= [513]) ){ goto $label$13 }
	$9 = CALL malloc($4)
	goto $label$12 
	
.LABEL $label$13
	$9 = ($23 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$12
	*($22 + [4]) = $9
	*($22) = $9
	*($22 + [8]) = ($9 + $4)
	*($22 + [88]) = $22
	*($22 + [36]) = $14
	*($22 + [32]) = $1
	*($22 + [40]) = $5
	*($22 + [44]) = $8
	*($22 + [48]) = $12
	*($22 + [52]) = $3
	*($22 + [56]) = $13
	*($22 + [60]) = $15
	*($22 + [64]) = $16
	*($22 + [68]) = $17
	*($22 + [72]) = $18
	CALL $63(($22 + [32]), ($22 + [88]))
	$11 = *($1)
	*($1 + [112]) = CALL db_store_i64(*($2 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $11, $9, $4)
	if ( ($4 <= [513]) ){ goto $label$14 }
	CALL free($9)
	
.LABEL $label$14
	if ( (uint_64)($11 <= *($2 + [16])) ){ goto $label$15 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$11 = *(($2 + [8]))
	$20 = *(*(($0 + [8])))
	$21 = *($1)
	*($22 + [32]) = *(($1 + [8]))
	*($1 + [116]) = CALL db_idx64_store($11, (int_64)7035937633859534848, $20, $21, ($22 + [32]))
	*([0] + [4]) = ($22 + [96])
	return (unreachable)
	
.LABEL $label$3
	CALL $104($10)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*((($6 + [32]) + [12])) = *(($1 + [20]))
	*(($3 = (($6 + [32]) + [8]))) = *(($1 + [16]))
	*($6 + [32]) = *($1 + [8])
	*($6 + [36]) = *(($1 + [12]))
	$2 = *($1)
	*($6 + [16]) = [0]
	*($6 + [20]) = [0]
	*($6 + [24]) = [0]
	$4 = (*(($1 + [28])) - *($1 + [24]))
	$5 = int_32($4 >> [5])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$1 }
	$4 = CALL $96($4)
	*((($6 + [16]) + [8])) = ($4 + ($5 << [5]))
	*($6 + [16]) = $4
	*($6 + [20]) = $4
	$1 = *(($1 + [28]))
	$5 = *(($1 + [24]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	*($4) = *($5)
	*(($4 + [8])) = *(($5 + [8]))
	CALL $105(($4 + [16]), ($5 + [16]))
	$4 = ($4 + [32])
	$5 = ($5 + [32])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$3 }
	*($6 + [20]) = $4
	
.LABEL $label$2
	*(($6 + [8])) = *($3)
	*($6) = *($6 + [32])
	CALL $75($0, $2, $6, ($6 + [16]))
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	$4 = *($6 + [20])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$6 }
	$5 = ([0] - $1)
	$4 = ($4 + [-16])
	
.LOOP $label$7:
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL $97(*(($4 + [8])))
	
.LABEL $label$8
	$4 = ($4 + [-32])
	if ( ((int_32)($4 + $5) != (int_32)[-16]) ){ goto $label$7 }
	$4 = *($6 + [16])
	goto $label$5 
	
.LABEL $label$6
	$4 = $1
	
.LABEL $label$5
	*($6 + [20]) = $1
	CALL $97($4)
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $104(($6 + [16]))
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [864])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [864])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [864])
	CALL memcpy(*($2 + [4]), $0, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [400])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $96([56])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [496])
	$3 = ($4 + [24])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [464])
	*($4 + [44]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($4 + [8])
	*($8 + [40]) = $4
	*($8 + [48]) = ($4 + [16])
	*($8 + [52]) = $3
	*($8 + [56]) = ($4 + [40])
	CALL $44(($8 + [40]), ($8 + [32]))
	*($4 + [48]) = $1
	*($8 + [32]) = $4
	$7 = *($4)
	*($8 + [40]) = $7
	$6 = *($4 + [48])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [32]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $45($2, ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $97($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $4
}

int_32 .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $96([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $32($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $42(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$6 = *($3)
	$5 = *($6 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)5093222948379033600, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $36($6, $4)
	*($7 + [28]) = [0]
	*($7 + [24]) = $6
	$5 = *(*(CALL $79(($7 + [24])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [1584])
	*($1) = *(($6 + [16]))
	$6 = *($3 + [4])
	*($1 + [40]) = [1]
	*($1 + [8]) = *($6)
	$8 = $8
	$6 = ($8 + [-48])
	*([0] + [4]) = $6
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($8 + [-11])
	*($7 + [16]) = $7
	*($7 + [28]) = ($1 + [8])
	*($7 + [24]) = $1
	*($7 + [32]) = ($1 + [16])
	*($7 + [36]) = ($1 + [24])
	*($7 + [40]) = ($1 + [40])
	CALL $39(($7 + [24]), ($7 + [16]))
	$5 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($2 + [8]), (int_64)5093222948379033600, *(*($0 + [8])), $5, $6, [37])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [48]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1712])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)5093222948379033600)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1648])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1648])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $36(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $96($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $104($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $97($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [448])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = ($3 - $4)
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $34($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + $5)
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((int_32)*($2) != (int_32)$7), [432])
	CALL memcpy($4, *($5), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	$4 = ($4 + [1])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $31($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $101($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $96($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $101($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $97($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $98($7)
	return (unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [448])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $32($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [432])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}