(data (i32.const 4) "\10i\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "read\00")
(data (i32.const 128) "get\00")
(data (i32.const 144) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 208) "invalid symbol name\00")
(data (i32.const 240) "\n---log------------------------\n\00")
(data (i32.const 288) "1 sell: \00")
(data (i32.const 304) "@\00")
(data (i32.const 320) "\n------------------------------\n\00")
(data (i32.const 368) "invalid base_deposit\00")
(data (i32.const 400) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 464) "-- sell: [\00")
(data (i32.const 480) "][\00")
(data (i32.const 496) "]\00")
(data (i32.const 512) "creator service charge\00")
(data (i32.const 544) "active\00")
(data (i32.const 560) "transaction\00")
(data (i32.const 576) "cannot pass end iterator to modify\00")
(data (i32.const 624) "2 sell: [\00")
(data (i32.const 640) "\n===assert=====================\n\00")
(data (i32.const 688) "market not exists\00")
(data (i32.const 720) "\n==============================\n\n\n\n\n\00")
(data (i32.const 768) ".\00")
(data (i32.const 784) " \00")
(data (i32.const 800) "object passed to modify is not in multi_index\00")
(data (i32.const 848) "cannot modify objects in table of another contract\00")
(data (i32.const 912) "updater cannot change primary key when modifying an object\00")
(data (i32.const 976) "write\00")
(data (i32.const 992) "transfer\00")
(data (i32.const 1008) "error reading iterator\00")
(data (i32.const 1040) ",\00")
(data (i32.const 1056) "1 buy: \00")
(data (i32.const 1072) "2 buy: \00")
(data (i32.const 1088) "3 buy: \00")
(data (i32.const 1104) "4 buy: \00")
(data (i32.const 1120) "5 buy: \00")
(data (i32.const 1136) "6 buy: \00")
(data (i32.const 1152) "6.1 buy: \00")
(data (i32.const 1168) "6.1.4 buy: \00")
(data (i32.const 1184) "6.2 buy: \00")
(data (i32.const 1200) "-- buy: [\00")
(data (i32.const 1216) "2 buy: [\00")
(data (i32.const 1232) "7 buy: \00")
(data (i32.const 1248) "1 createnew\00")
(data (i32.const 1264) "10 createnew\00")
(data (i32.const 1280) "you don\'t have authority for create\00")
(data (i32.const 1328) "11 createnew\00")
(data (i32.const 1344) "existing->base.balance.amount:\00")
(data (i32.const 1376) "existing->quote.balance.amount:\00")
(data (i32.const 1408) "name:\00")
(data (i32.const 1424) "market already exists\00")
(data (i32.const 1456) "2 base: \00")
(data (i32.const 1472) "2 quote: \00")
(data (i32.const 1488) "deposit\00")
(data (i32.const 1504) "cannot create objects in table of another contract\00")
(data (i32.const 1568) "exstates.emplace: 0 \00")
(data (i32.const 1600) "exstates.emplace:\00")
(data (i32.const 1632) "2 createnew\00")
(data (i32.const 1648) "3 createnew\00")
(data (i32.const 1664) "4 createnew\00")
(data (i32.const 1680) "5 createnew\00")
(data (i32.const 1696) "6 createnew\00")
(data (i32.const 1712) "1 price: \00")
(data (i32.const 1728) "begin.removeauth:\00")
(data (i32.const 1760) "not.exist:\00")
(data (i32.const 1772) "\f0\06\00\00")
(data (i32.const 1776) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1824) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1888) "removeauth.succeed:\00")
(data (i32.const 1920) "begin.addauth:\00")
(data (i32.const 1936) "addauth.succeed0:\00")
(data (i32.const 1968) "addauth.succeed1:\00")
(data (i32.const 2000) "\nHello, \00")
(data (i32.const 2016) "\n\00")
(data (i32.const 10416) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$8 (param i32 i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$12 (param i64)))
(import "env" "printn" (func $fimport$13 (param i64)))
(import "env" "prints" (func $fimport$14 (param i32)))
(import "env" "prints_l" (func $fimport$15 (param i32 i32)))
(import "env" "printui" (func $fimport$16 (param i64)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$18 (param i64)))
(import "env" "require_auth2" (func $fimport$19 (param i64 i64)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z22ebtrade_string_to_namePKc" (func $5))
(export "apply" (func $6))
(export "malloc" (func $86))
(export "free" (func $89))
(export "memcmp" (func $100))
(export "strlen" (func $101))
(table $0 22 22 anyfunc)
(elem (i32.const 0) $102 $32 $17 $20 $29 $7 $24 $14 $21 $22 $9 $13 $15 $16 $18 $23 $11 $27 $25 $30 $12 $19)



int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $90($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $90($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	return CALL $95($0, $1, CALL $101($1))
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $96($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $90($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $91($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $97 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10508])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $91 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $92 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $90(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $91($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $38 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [112])
	*([0] + [4]) = $12
	$0 = *($0 + [4])
	$11 = *($0 + [4])
	$9 = (*(*($0)) + int_32($11 >> [1]))
	$10 = *($0)
	if ( (($11 & [1]) == 0) ){ goto $label$1 }
	$10 = *((*($9) + $10))
	
.LABEL $label$1
	*($12 + [104]) = [0]
	*($12 + [96]) = (int_64)0
	$0 = (*($2 + [4]) - *($2))
	$11 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$9 }
	if ( ((uint_32)$11 >= (uint_32)[357913942]) ){ goto $label$8 }
	$0 = CALL $90($0)
	*(($12 + [104])) = ($0 + ((int_32)$11 * (int_32)[12]))
	*($12 + [96]) = $0
	*($12 + [100]) = $0
	$2 = *(($2 + [4]))
	$11 = *($2)
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $98($0, $11)
	$0 = ($0 + [12])
	$11 = ($11 + [12])
	if ( ((int_32)$2 != (int_32)$11) ){ goto $label$10 }
	*($12 + [100]) = $0
	
.LABEL $label$9
	*($12 + [88]) = [0]
	*($12 + [80]) = (int_64)0
	$0 = (*($3 + [4]) - *($3))
	$11 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$11 }
	if ( ((uint_32)$11 >= (uint_32)[178956971]) ){ goto $label$7 }
	$0 = CALL $90($0)
	*(($12 + [88])) = ($0 + ((int_32)$11 * (int_32)[24]))
	*($12 + [80]) = $0
	*($12 + [84]) = $0
	$2 = *($3)
	$11 = (*(($3 + [4])) - $2)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($0, $2, $11)
	*($12 + [84]) = ($0 + ((int_32)((uint_32)$11 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$11
	*($12 + [72]) = [0]
	*($12 + [64]) = (int_64)0
	$0 = (*($4 + [4]) - *($4))
	$11 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$12 }
	if ( ((uint_32)$11 >= (uint_32)[178956971]) ){ goto $label$6 }
	$0 = CALL $90($0)
	*(($12 + [72])) = ($0 + ((int_32)$11 * (int_32)[24]))
	*($12 + [64]) = $0
	*($12 + [68]) = $0
	$2 = *($4)
	$11 = (*(($4 + [4])) - $2)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($0, $2, $11)
	*($12 + [68]) = ($0 + ((int_32)((uint_32)$11 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$12
	*($12 + [56]) = [0]
	*($12 + [48]) = (int_64)0
	$0 = (*($5 + [4]) - *($5))
	$11 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$13 }
	if ( ((uint_32)$11 >= (uint_32)[178956971]) ){ goto $label$5 }
	$0 = CALL $90($0)
	*(($12 + [56])) = ($0 + ((int_32)$11 * (int_32)[24]))
	*($12 + [48]) = $0
	*($12 + [52]) = $0
	$2 = *($5)
	$11 = (*(($5 + [4])) - $2)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($0, $2, $11)
	*($12 + [52]) = ($0 + ((int_32)((uint_32)$11 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$13
	*($12 + [40]) = [0]
	*($12 + [32]) = (int_64)0
	$0 = (*($6 + [4]) - *($6))
	$11 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$14 }
	if ( ((uint_32)$11 >= (uint_32)[178956971]) ){ goto $label$4 }
	$0 = CALL $90($0)
	*(($12 + [40])) = ($0 + ((int_32)$11 * (int_32)[24]))
	*($12 + [32]) = $0
	*($12 + [36]) = $0
	$2 = *($6)
	$11 = (*(($6 + [4])) - $2)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($0, $2, $11)
	*($12 + [36]) = ($0 + ((int_32)((uint_32)$11 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$14
	*($12 + [24]) = [0]
	*($12 + [16]) = (int_64)0
	$0 = (*($7 + [4]) - *($7))
	$11 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$15 }
	if ( ((uint_32)$11 >= (uint_32)[178956971]) ){ goto $label$3 }
	$0 = CALL $90($0)
	*(($12 + [24])) = ($0 + ((int_32)$11 * (int_32)[24]))
	*($12 + [16]) = $0
	*($12 + [20]) = $0
	$2 = *($7)
	$11 = (*(($7 + [4])) - $2)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($0, $2, $11)
	*($12 + [20]) = ($0 + ((int_32)((uint_32)$11 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$15
	*($12 + [8]) = [0]
	*($12) = (int_64)0
	$0 = (*($8 + [4]) - *($8))
	$11 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$16 }
	if ( ((uint_32)$11 >= (uint_32)[178956971]) ){ goto $label$2 }
	$0 = CALL $90($0)
	*(($12 + [8])) = ($0 + ((int_32)$11 * (int_32)[24]))
	*($12) = $0
	*($12 + [4]) = $0
	$2 = *($8)
	$11 = (*(($8 + [4])) - $2)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($0, $2, $11)
	*($12 + [4]) = ($0 + ((int_32)((uint_32)$11 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$16
	CALL void $9((int_32 $1), (int_64 ($12 + [96])), (int_32 ($12 + [80])), (int_32 ($12 + [64])), (int_32 ($12 + [48])), (int_32 ($12 + [32])), (int_32 ($12 + [16])), (int_32 $12), (int_32 $10))
	$0 = *($12)
	if ( ($0 == 0) ){ goto $label$17 }
	*($12 + [4]) = $0
	CALL $91($0)
	
.LABEL $label$17
	$0 = *($12 + [16])
	if ( ($0 == 0) ){ goto $label$18 }
	*($12 + [20]) = $0
	CALL $91($0)
	
.LABEL $label$18
	$0 = *($12 + [32])
	if ( ($0 == 0) ){ goto $label$19 }
	*($12 + [36]) = $0
	CALL $91($0)
	
.LABEL $label$19
	$0 = *($12 + [48])
	if ( ($0 == 0) ){ goto $label$20 }
	*($12 + [52]) = $0
	CALL $91($0)
	
.LABEL $label$20
	$0 = *($12 + [64])
	if ( ($0 == 0) ){ goto $label$21 }
	*($12 + [68]) = $0
	CALL $91($0)
	
.LABEL $label$21
	$0 = *($12 + [80])
	if ( ($0 == 0) ){ goto $label$22 }
	*($12 + [84]) = $0
	CALL $91($0)
	
.LABEL $label$22
	$2 = *($12 + [96])
	if ( ($2 == 0) ){ goto $label$23 }
	$0 = *($12 + [100])
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$25 }
	$11 = ([0] - $2)
	$0 = ($0 + [-12])
	
.LOOP $label$26:
	if ( ((*($0) & [1]) == 0) ){ goto $label$27 }
	CALL $91(*(($0 + [8])))
	
.LABEL $label$27
	$0 = ($0 + [-12])
	if ( ((int_32)($0 + $11) != (int_32)[-12]) ){ goto $label$26 }
	$0 = *($12 + [96])
	goto $label$24 
	
.LABEL $label$25
	$0 = $2
	
.LABEL $label$24
	*($12 + [100]) = $2
	CALL $91($0)
	
.LABEL $label$23
	*([0] + [4]) = ($12 + [112])
	return (unreachable)
	
.LABEL $label$8
	CALL $97(($12 + [96]))
	
.LABEL $label$7
	CALL $97(($12 + [80]))
	
.LABEL $label$6
	CALL $97(($12 + [64]))
	
.LABEL $label$5
	CALL $97(($12 + [48]))
	
.LABEL $label$4
	CALL $97(($12 + [32]))
	
.LABEL $label$3
	CALL $97(($12 + [16]))
	
.LABEL $label$2
	CALL $97($12)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $49 (int_64 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [112])
	*([0] + [4]) = $12
	$5 = *($2 + [16])
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [992]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$6 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	*((($12 + [8]) + [28])) = *(($2 + [12]))
	*((($12 + [8]) + [24])) = *(($2 + [8]))
	*((($12 + [8]) + [20])) = *(($2 + [4]))
	*($12 + [16]) = $1
	*($12 + [8]) = $0
	*($12 + [24]) = *($2)
	CALL $98((($12 + [8]) + [32]), $3)
	*($12 + [64]) = $10
	*($12 + [56]) = $5
	*(($7 = CALL $90([16]))) = $0
	*($7 + [8]) = $4
	*((($12 + [56]) + [32])) = [0]
	$6 = ($7 + [16])
	*((($12 + [56]) + [24])) = $6
	*((($12 + [56]) + [20])) = $6
	*($12 + [72]) = $7
	*($12 + [84]) = [0]
	*((($12 + [56]) + [36])) = [0]
	$7 = *($12 + [40])
	$6 = ( *((($12 + [8]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($6 + [32])
	$9 = (CASTING uint_64)(uint_32 $6)
	$6 = (($12 + [56]) + [28])
	
.LOOP $label$7:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$7 }
	if ( ($7 == 0) ){ goto $label$9 }
	CALL $43($6, $7)
	$6 = *(($12 + [88]))
	$7 = *(($12 + [84]))
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	$7 = [0]
	
.LABEL $label$8
	*($12 + [100]) = $7
	*($12 + [96]) = $7
	*($12 + [104]) = $6
	CALL $53(($12 + [96]), ($12 + [8]))
	if ( ((*(($12 + [40])) & [1]) == 0) ){ goto $label$10 }
	CALL $91(*(($12 + [48])))
	
.LABEL $label$10
	CALL $54(($12 + [8]), ($12 + [56]))
	$7 = *($12 + [8])
	CALL send_inline($7, (*($12 + [12]) - $7))
	$7 = *($12 + [8])
	if ( ($7 == 0) ){ goto $label$11 }
	*($12 + [12]) = $7
	CALL $91($7)
	
.LABEL $label$11
	$7 = *($12 + [84])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($12 + [88])) = $7
	CALL $91($7)
	
.LABEL $label$12
	$7 = *($12 + [72])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($12 + [76])) = $7
	CALL $91($7)
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [112])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1008])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $90([120])
	$4 = CALL $58($6)
	*($6 + [104]) = $0
	CALL $59(($8 + [32]), $4)
	*($6 + [108]) = $1
	*($8 + [24]) = $6
	$5 = (uint_64)*($6 + [80]) >> (uint_64)(int_64)8
	*($8 + [16]) = $5)
	$7 = *($6 + [108])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $60(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $91($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $90($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $97($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $91($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [128])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $43($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [112])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $42($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $93($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $90($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $93($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $91($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $92($7)
	return (unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$2 = *($0)
	$5 = ((int_32)($5 - $2) / (int_32)[12])
	$3 = ($5 + $1)
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$4 = [357913941]
	$6 = ((int_32)($6 - $2) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$5 }
	$4 = ($6 << [1])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$6 = CALL $90(((int_32)$4 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	$6 = $1
	
.LOOP $label$6:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	*(($0 + [4])) = ($5 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$4 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $97($0)
	
.LABEL $label$1
	$2 = ($6 + ((int_32)$4 * (int_32)[12]))
	$6 = ($6 + ((int_32)$5 * (int_32)[12]))
	$4 = $6
	$5 = $1
	
.LOOP $label$7:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$3 = ($6 + ((int_32)$1 * (int_32)[12]))
	$4 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$9 }
	$1 = ([0] - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$10:
	*(($6 + [-12])) = *($4)
	$5 = ($4 + [8])
	*(($6 + [-4])) = *($5)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($5) = [0]
	$6 = ($6 + [-12])
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $1) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$5 = $4
	
.LABEL $label$8
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$11 }
	$6 = ([0] - $5)
	$4 = ($4 + [-12])
	
.LOOP $label$12:
	if ( ((*($4) & [1]) == 0) ){ goto $label$13 }
	CALL $91(*(($4 + [8])))
	
.LABEL $label$13
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $6) != (int_32)[-12]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $91($5)
	
.LABEL $label$14
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([1040])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [112])
	CALL memcpy(($3 + [72]), *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [112])
	CALL memcpy(($3 + [80]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [88]), *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [96]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [112])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [56]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [64]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($4 + [8]) = $0
	CALL $46(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*($0 + [32]) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [40])) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [208])
	*(($0 + [64])) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [208])
	*(($0 + [80])) = (int_64)1398362884
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$5 = [0]
	
.LABEL $label$16
	CALL eosio_assert($5, [208])
	*(($0 + [96])) = (int_64)1398362884
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$5 = [0]
	
.LABEL $label$21
	CALL eosio_assert($5, [208])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $45(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [112])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $79($0, $5, [115])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [352])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*($9 + [344]) = $0
	if ( ((int_64)$2 <= (int_64)3626080933330812927) ){ goto $label$41 }
	if ( ((int_64)$2 <= (int_64)3626080933414699007) ){ goto $label$40 }
	if ( ((int_64)$2 > (int_64)4520488125973135359) ){ goto $label$38 }
	if ( ((int_64)$2 == (int_64)3626080933414699008) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)3626080933632802816) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)3941441322321182720) ){ goto $label$14 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [1]
	*($9 + [168 align=4]) = *($9 + [176])
	CALL $33(($9 + [344]), ($9 + [168]))
	goto $label$14 
	
.LABEL $label$41
	if ( ((int_64)$2 > (int_64)-4997502823877094913) ){ goto $label$39 }
	if ( ((int_64)$2 <= (int_64)-4997502823877096449) ){ goto $label$37 }
	if ( ((int_64)$2 == (int_64)-4997502823877096448) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)-4997502823877095936) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)-4997502823877095424) ){ goto $label$14 }
	*($9 + [276]) = [0]
	*($9 + [272]) = [2]
	*($9 + [72 align=4]) = *($9 + [272])
	CALL $10(($9 + [344]), ($9 + [72]))
	goto $label$14 
	
.LABEL $label$40
	if ( ((int_64)$2 <= (int_64)3626080933364367359) ){ goto $label$36 }
	if ( ((int_64)$2 == (int_64)3626080933364367360) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)3626080933381144576) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)3626080933397921792) ){ goto $label$14 }
	*($9 + [252]) = [0]
	*($9 + [248]) = [3]
	*($9 + [96 align=4]) = *($9 + [248])
	CALL $10(($9 + [344]), ($9 + [96]))
	goto $label$14 
	
.LABEL $label$39
	if ( ((int_64)$2 <= (int_64)-4997502823877093889) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)-4997502823877093888) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)-4997502823877087232) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)-4421672816961650688) ){ goto $label$14 }
	*($9 + [196]) = [0]
	*($9 + [192]) = [4]
	*($9 + [152 align=4]) = *($9 + [192])
	CALL $28(($9 + [344]), ($9 + [152]))
	goto $label$14 
	
.LABEL $label$38
	if ( ((int_64)$2 == (int_64)4520488125973135360) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)5031766162872991744) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)7746191359077253120) ){ goto $label$14 }
	*($9 + [340]) = [0]
	*($9 + [336]) = [5]
	*($9 + [8 align=4]) = *($9 + [336])
	CALL $8(($9 + [344]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$37
	if ( ((int_64)$2 == (int_64)-7949128890230767616) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)-5918709575225180160) ){ goto $label$14 }
	*($9 + [220]) = [0]
	*($9 + [216]) = [6]
	*($9 + [128 align=4]) = *($9 + [216])
	CALL $10(($9 + [344]), ($9 + [128]))
	goto $label$14 
	
.LABEL $label$36
	if ( ((int_64)$2 == (int_64)3626080933330812928) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)3626080933347590144) ){ goto $label$14 }
	*($9 + [300]) = [0]
	*($9 + [296]) = [7]
	*($9 + [48 align=4]) = *($9 + [296])
	CALL $10(($9 + [344]), ($9 + [48]))
	goto $label$14 
	
.LABEL $label$35
	if ( ((int_64)$2 == (int_64)-4997502823877094912) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)-4997502823877094400) ){ goto $label$14 }
	*($9 + [244]) = [0]
	*($9 + [240]) = [8]
	*($9 + [104 align=4]) = *($9 + [240])
	CALL $10(($9 + [344]), ($9 + [104]))
	goto $label$14 
	
.LABEL $label$34
	*($9 + [236]) = [0]
	*($9 + [232]) = [9]
	*($9 + [112 align=4]) = *($9 + [232])
	CALL $10(($9 + [344]), ($9 + [112]))
	goto $label$14 
	
.LABEL $label$33
	*($9 + [332]) = [0]
	*($9 + [328]) = [10]
	*($9 + [16 align=4]) = *($9 + [328])
	CALL $10(($9 + [344]), ($9 + [16]))
	goto $label$14 
	
.LABEL $label$32
	*($9 + [308]) = [0]
	*($9 + [304]) = [11]
	*($9 + [40 align=4]) = *($9 + [304])
	CALL $10(($9 + [344]), ($9 + [40]))
	goto $label$14 
	
.LABEL $label$31
	*($9 + [292]) = [0]
	*($9 + [288]) = [12]
	*($9 + [56 align=4]) = *($9 + [288])
	CALL $10(($9 + [344]), ($9 + [56]))
	goto $label$14 
	
.LABEL $label$30
	*($9 + [284]) = [0]
	*($9 + [280]) = [13]
	*($9 + [64 align=4]) = *($9 + [280])
	CALL $10(($9 + [344]), ($9 + [64]))
	goto $label$14 
	
.LABEL $label$29
	*($9 + [268]) = [0]
	*($9 + [264]) = [14]
	*($9 + [80 align=4]) = *($9 + [264])
	CALL $10(($9 + [344]), ($9 + [80]))
	goto $label$14 
	
.LABEL $label$28
	*($9 + [228]) = [0]
	*($9 + [224]) = [15]
	*($9 + [120 align=4]) = *($9 + [224])
	CALL $10(($9 + [344]), ($9 + [120]))
	goto $label$14 
	
.LABEL $label$27
	*($9 + [324]) = [0]
	*($9 + [320]) = [16]
	*($9 + [24 align=4]) = *($9 + [320])
	CALL $10(($9 + [344]), ($9 + [24]))
	goto $label$14 
	
.LABEL $label$26
	*($9 + [204]) = [0]
	*($9 + [200]) = [17]
	*($9 + [144 align=4]) = *($9 + [200])
	CALL $28(($9 + [344]), ($9 + [144]))
	goto $label$14 
	
.LABEL $label$25
	*($9 + [212]) = [0]
	*($9 + [208]) = [18]
	*($9 + [136 align=4]) = *($9 + [208])
	CALL $26(($9 + [344]), ($9 + [136]))
	goto $label$14 
	
.LABEL $label$24
	*($9 + [188]) = [0]
	*($9 + [184]) = [19]
	*($9 + [160 align=4]) = *($9 + [184])
	CALL $31(($9 + [344]), ($9 + [160]))
	goto $label$14 
	
.LABEL $label$23
	*($9 + [316]) = [0]
	*($9 + [312]) = [20]
	*($9 + [32 align=4]) = *($9 + [312])
	CALL $10(($9 + [344]), ($9 + [32]))
	goto $label$14 
	
.LABEL $label$22
	*($9 + [260]) = [0]
	*($9 + [256]) = [21]
	*($9 + [88 align=4]) = *($9 + [256])
	CALL $10(($9 + [344]), ($9 + [88]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [352])
}

void .FUNC $7 (int_32 $0, int_64 $1)
{
	CALL prints([2000])
	CALL printn($1)
	CALL prints([2016])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _Z22ebtrade_string_to_namePKc (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$4 = *($0)
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = (int_64)0
	$3 = [59]
	$2 = [1]
	
.LOOP $label$5:
	$1 = int_32(($4 << [24]) >> [24])
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$4 = ($1 + [165])
	goto $label$6 
	
.LABEL $label$7
	$4 = ( ($1 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$1 = ($3 + [-5])
	$5 = ((int_64)(CASTING int_64)(int_32 (($4 & [31]) << $3)) | (int_64)$5)
	if ( ((int_32)$2 > (int_32)[11]) ){ goto $label$8 }
	$4 = ($0 + $2)
	$2 = ($2 + [1])
	$3 = $1
	$4 = *($4)
	if ( ($4 & [255]) ){ goto $label$5 }
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)[-1]) ){ goto $label$1 }
	$2 = *($0 + [12])
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$3 }
	$2 = ($2 + [165])
	goto $label$2 
	
.LABEL $label$4
	return (int_64)0
	
.LABEL $label$3
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$2
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [15])) | (int_64)$5)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $79($0, $5, [98])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $72($0, $5, [98])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $79($0, $5, [99])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $72($0, $5, [99])
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [128])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*($10 + [32]) = (int_64)0
	*($10 + [48]) = (int_64)0
	*($10 + [40]) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$4 = ($10 + [48])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [208])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [112])
	CALL memcpy(($10 + [32]), $6, [8])
	$1 = ($3 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [112])
	$8 = (($10 + [32]) + [8])
	CALL memcpy($8, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [112])
	CALL memcpy($4, ($6 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	*(($1 = (($10 + [56]) + [16]))) = *((($10 + [32]) + [16]))
	*(($3 = (($10 + [56]) + [8]))) = *($8)
	*($10 + [56]) = *($10 + [32])
	*((($10 + [80]) + [16])) = *($1)
	*((($10 + [80]) + [8])) = *($3)
	*($10 + [80]) = *($10 + [56])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$7 = *((($10 + [80]) + [16]))
	*((($10 + [104]) + [16])) = $7
	$5 = *((($10 + [80]) + [8]))
	*((($10 + [104]) + [8])) = $5
	*((($10 + [8]) + [16])) = $7
	*((($10 + [8]) + [8])) = $5
	$7 = *($10 + [80])
	*($10 + [104]) = $7
	*($10 + [8]) = $7
	CALL void $1((int_32 ($10 + [8])), (int_32 $9))
	*([0] + [4]) = ($10 + [128])
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $72($0, $5, [115])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $79($0, $5, [97])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $72($0, $5, [97])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*(*($0)) + [-97])
	if ( ((uint_32)$5 > (uint_32)[5]) ){ goto $label$1 }
	goto $label$8 
	
.LABEL $label$8
	$4 = ($1 + [20])
	goto $label$2 
	
.LABEL $label$7
	$4 = ($1 + [32])
	goto $label$2 
	
.LABEL $label$6
	$4 = ($1 + [44])
	goto $label$2 
	
.LABEL $label$5
	$4 = ($1 + [56])
	goto $label$2 
	
.LABEL $label$4
	$4 = ($1 + [68])
	goto $label$2 
	
.LABEL $label$3
	$4 = ($1 + [80])
	
.LABEL $label$2
	$5 = (*($4) + [-24])
	$2 = ($4 + [4])
	
.LOOP $label$9:
	$1 = ($5 + [24])
	if ( ((uint_32)$1 >= (uint_32)*($2)) ){ goto $label$1 }
	$3 = *(($0 + [4]))
	CALL eosio_assert(((int_64)*(($5 + [32])) == (int_64)*($3 + [8])), [1824])
	$5 = $1
	if ( ((int_64)*($1) != (int_64)*($3)) ){ goto $label$9 }
	$4 = ($1 + [24])
	$3 = ($4 + [4])
	$5 = (*($3) - $4)
	$2 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$10 }
	CALL memmove($1, $4, $5)
	
.LABEL $label$10
	*($3) = ($1 + ((int_32)$2 * (int_32)[24]))
	CALL prints([240])
	$1 = *(($0 + [4]))
	CALL prints([1888])
	CALL $51($1)
	CALL prints([304])
	CALL printn(*($1 + [16]))
	CALL prints([320])
	
.LABEL $label$1
	$5
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $79($0, $5, [100])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $72($0, $5, [100])
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $58 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [80]))) = (int_64)1398362884
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [208])
	*(($2 = ($0 + [96]))) = (int_64)1398362884
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [144])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [208])
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [112])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [848])
	$4 = (int_64)
	*($1 + [56]) = $4(*($1 + [56]) - *(*($3))))
	$5 = ((int_64)*($1 + [72]) + (int_64)*(*($3 + [4])))
	*($1 + [72]) = $5
	$3 = ($1 + [80])
	$6 = *($3)
	*($1 + [88]) = $5
	*(($1 + [96])) = *($3)
	*($1 + [88]) = (Rounds 0)(((float_64)((float_64)(PROMOTE float_64)(float_32 (CASTING float_32)(int_64 $5)) * (float_64)(float_64)1e4) / (float_64)(PROMOTE float_64)(float_32 (CASTING float_32)(int_64 $4))))
	CALL eosio_assert([1], [912])
	*($7 + [120]) = ($7 + [104])
	*($7 + [116]) = $7
	*($7 + [112]) = $7
	CALL $52(($7 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $7, [104])
	$5 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( (uint_64)($5) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [128])
}

void .FUNC $51 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([768])
	CALL prints_l($2, $3)
	CALL prints([784])
	CALL $47($1, [0])
	*([0] + [4]) = $10
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $57($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $43($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [976])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [976])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $56(CALL $55($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [128])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[12])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $40($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[12])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $91(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $7) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $41($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [976])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [976])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [976])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [976])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [128])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $39($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [112])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [112])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [112])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $29 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	float_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	$16 = (*([0] + [4]) - [352])
	*([0] + [4]) = $16
	$4 = *($2 + [16])
	CALL require_auth($1)
	CALL prints([240])
	$13 = *($3 + [8])
	*($16 + [312]) = $13
	*($16 + [320]) = *($3 + [16])
	CALL prints([288])
	CALL $47(($16 + [312]), [1])
	CALL prints([304])
	CALL printn(*($16 + [320]))
	CALL prints([320])
	$8 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [368])
	*(($16 + [344])) = [0]
	*($16 + [328]) = (int_64)-1
	*($16 + [336]) = (int_64)0
	$13 = *($0)
	*($16 + [312]) = $13
	*($16 + [320]) = $4
	$11 = CALL db_find_i64($13, $4, (int_64)-7949128877345865728, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$11) < (int_32)[0]) ){ goto $label$14 }
	$5 = CALL $48(($16 + [312]), $11)
	CALL eosio_assert(((int_32)*($5 + [104]) == (int_32)($16 + [312])), [400])
	$15 = *($2)
	if ( ((int_64)$15 < (int_64)10001) ){ goto $label$13 }
	$11 = [99]
	$8 = ($5 + [56])
	$9 = ($5 + [72])
	$13 = (int_64)0
	
.LOOP $label$16:
	$12 = *($8)
	$14 = *($9)
	CALL prints([240])
	CALL prints([464])
	$10 = ((float_32)(CASTING float_32)(uint_64 $14) / (float_32)(CASTING float_32)(uint_64 ((int_64)$12 + (int_64)$13)))
	CALL printi((CASTING int_64)(int_32 (CASTING int_32)(float_32 ((float_32)$10 * (float_32)(float_32)1e4))))
	CALL prints([480])
	CALL printui((int_64)0)
	CALL prints([496])
	CALL prints([320])
	$13 = (Rounds 0)(((float_32)(CASTING float_32)(uint_64 $13) + (float_32)((float_32)(CASTING float_32)(int_64 ((int_64)$15 / (int_64)100)) / (float_32)$10)))
	if ( ($11 == 0) ){ goto $label$15 }
	$11 = ($11 + [-1])
	$15 = *($2)
	goto $label$16 
	
.LABEL $label$15
	*($3) = $13
	goto $label$12 
	
.LABEL $label$14
	CALL prints([640])
	CALL prints([688])
	CALL prints([720])
	CALL eosio_assert([0], [688])
	$2 = *($16 + [336])
	if ( $2 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$13 = *(($5 + [72]))
	$12 = *($5 + [56])
	CALL prints([240])
	CALL prints([464])
	$10 = ((float_32)(CASTING float_32)(uint_64 $13) / (float_32)(CASTING float_32)(uint_64 $12))
	CALL printi((CASTING int_64)(int_32 (CASTING int_32)(float_32 ((float_32)$10 * (float_32)(float_32)1e4))))
	CALL prints([480])
	CALL printui((Rounds 0)(((float_32)((float_32)(CASTING float_32)(int_64 $15) / (float_32)$10) + (float_32)(float_32)0)))
	CALL prints([496])
	CALL prints([320])
	$13 = *($3)
	
.LABEL $label$12
	$8 = ($3 + [16])
	*(($11 = (($16 + [296]) + [8]))) = *($8)
	*($16 + [296]) = *($3 + [8])
	$6 = ((int_64)$13 / (int_64)1000)
	*($3) = (int_64))($13 - ((int_64)$6 << (int_64)1))
	*((($16 + [280]) + [8])) = *($8)
	*($16 + [280]) = *($3 + [8])
	*($16 + [256]) = $6
	$7 = *($0)
	*((($16 + [256]) + [16])) = *($11)
	*($16 + [264]) = *($16 + [296])
	*((($16 + [240]) + [8])) = [0]
	*($16 + [240]) = (int_64)0
	$11 = CALL strlen([512])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$19 }
	*($16 + [240]) = ($11 << [1])
	$8 = (($16 + [240]) | [1])
	if ( $11 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$9 = (($11 + [16]) & [-16])
	$8 = CALL $90($9)
	*($16 + [240]) = ($9 | [1])
	*($16 + [248]) = $8
	*($16 + [244]) = $11
	
.LABEL $label$18
	CALL memcpy($8, [512], $11)
	
.LABEL $label$17
	*(($8 + $11)) = [0]
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [544]
	$14 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$25 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$8 = ($8 + [165])
	goto $label$23 
	
.LABEL $label$25
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$21
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$20 }
	*((($16 + [80]) + [16])) = *((($16 + [256]) + [16]))
	*((($16 + [80]) + [8])) = *((($16 + [256]) + [8]))
	*($16 + [80]) = *($16 + [256])
	CALL $49($1, $7, ($16 + [80]), ($16 + [240]), $14)
	if ( ((*($16 + [240]) & [1]) == 0) ){ goto $label$26 }
	CALL $91(*($16 + [248]))
	
.LABEL $label$26
	*((($16 + [216]) + [12])) = *($16 + [284])
	*(($16 + [236])) = *((($16 + [280]) + [12]))
	*((($16 + [216]) + [16])) = *((($16 + [280]) + [8]))
	*($16 + [216]) = $6
	*($16 + [224]) = *($16 + [280])
	*((($16 + [200]) + [8])) = [0]
	*($16 + [200]) = (int_64)0
	$11 = CALL strlen([512])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$29 }
	*($16 + [200]) = ($11 << [1])
	$8 = (($16 + [200]) | [1])
	if ( $11 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$9 = (($11 + [16]) & [-16])
	$8 = CALL $90($9)
	*($16 + [200]) = ($9 | [1])
	*($16 + [208]) = $8
	*($16 + [204]) = $11
	
.LABEL $label$28
	CALL memcpy($8, [512], $11)
	
.LABEL $label$27
	*(($8 + $11)) = [0]
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [544]
	$14 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$35 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$8 = ($8 + [165])
	goto $label$33 
	
.LABEL $label$35
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$31
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$30 }
	*((($16 + [56]) + [16])) = *((($16 + [216]) + [16]))
	*((($16 + [56]) + [8])) = *((($16 + [216]) + [8]))
	*($16 + [56]) = *($16 + [216])
	CALL $49($1, $4, ($16 + [56]), ($16 + [200]), $14)
	if ( ((*($16 + [200]) & [1]) == 0) ){ goto $label$36 }
	CALL $91(*($16 + [208]))
	
.LABEL $label$36
	*((($16 + [176]) + [20])) = *(($2 + [20]))
	*((($16 + [176]) + [16])) = *(($2 + [16]))
	*((($16 + [176]) + [12])) = *(($2 + [12]))
	*((($16 + [176]) + [8])) = *(($2 + [8]))
	*($16 + [176]) = *($2)
	*($16 + [180]) = *(($2 + [4]))
	$4 = *($0)
	*((($16 + [160]) + [8])) = [0]
	*($16 + [160]) = (int_64)0
	$11 = CALL strlen([560])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$39 }
	*($16 + [160]) = ($11 << [1])
	$8 = (($16 + [160]) | [1])
	if ( $11 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$9 = (($11 + [16]) & [-16])
	$8 = CALL $90($9)
	*($16 + [160]) = ($9 | [1])
	*($16 + [168]) = $8
	*($16 + [164]) = $11
	
.LABEL $label$38
	CALL memcpy($8, [560], $11)
	
.LABEL $label$37
	*(($8 + $11)) = [0]
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [544]
	$14 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$45 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$8 = ($8 + [165])
	goto $label$43 
	
.LABEL $label$45
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$41
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$40 }
	*((($16 + [32]) + [16])) = *((($16 + [176]) + [16]))
	*((($16 + [32]) + [8])) = *((($16 + [176]) + [8]))
	*($16 + [32]) = *($16 + [176])
	CALL $49($1, $4, ($16 + [32]), ($16 + [160]), $14)
	if ( ((*($16 + [160]) & [1]) == 0) ){ goto $label$46 }
	CALL $91(*($16 + [168]))
	
.LABEL $label$46
	*((($16 + [136]) + [20])) = *(($3 + [20]))
	*((($16 + [136]) + [16])) = *(($3 + [16]))
	*((($16 + [136]) + [12])) = *(($3 + [12]))
	*((($16 + [136]) + [8])) = *(($3 + [8]))
	*($16 + [136]) = *($3)
	*($16 + [140]) = *(($3 + [4]))
	$4 = *($0)
	*((($16 + [120]) + [8])) = [0]
	*($16 + [120]) = (int_64)0
	$11 = CALL strlen([560])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$49 }
	*($16 + [120]) = ($11 << [1])
	$8 = (($16 + [120]) | [1])
	if ( $11 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$9 = (($11 + [16]) & [-16])
	$8 = CALL $90($9)
	*($16 + [120]) = ($9 | [1])
	*($16 + [128]) = $8
	*($16 + [124]) = $11
	
.LABEL $label$48
	CALL memcpy($8, [560], $11)
	
.LABEL $label$47
	*(($8 + $11)) = [0]
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [544]
	$14 = (int_64)0
	
.LOOP $label$50:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$55 }
	$8 = *($11)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$8 = ($8 + [165])
	goto $label$53 
	
.LABEL $label$55
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$51
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$50 }
	*((($16 + [8]) + [16])) = *((($16 + [136]) + [16]))
	*((($16 + [8]) + [8])) = *((($16 + [136]) + [8]))
	*($16 + [8]) = *($16 + [136])
	CALL $49($4, $1, ($16 + [8]), ($16 + [120]), $14)
	if ( ((*($16 + [120]) & [1]) == 0) ){ goto $label$56 }
	CALL $91(*($16 + [128]))
	
.LABEL $label$56
	*($16 + [108]) = $2
	*($16 + [104]) = $3
	*($16 + [112]) = $0
	CALL eosio_assert([1], [576])
	CALL $50(($16 + [312]), $5, (int_64)0, ($16 + [104]))
	CALL prints([240])
	CALL prints([624])
	CALL $51($3)
	CALL prints([304])
	CALL printn(*(($3 + [16])))
	CALL prints([480])
	CALL $51($2)
	CALL prints([304])
	CALL printn(*(($2 + [16])))
	CALL prints([496])
	CALL prints([320])
	$2 = *($16 + [336])
	if ( ($2 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$3 = ($16 + [340])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$58 }
	
.LOOP $label$59:
	$11 = ($11 + [-24])
	$8 = *($11)
	*($11) = [0]
	if ( ($8 == 0) ){ goto $label$60 }
	CALL $91($8)
	
.LABEL $label$60
	if ( ((int_32)$2 != (int_32)$11) ){ goto $label$59 }
	$11 = *(($16 + [336]))
	goto $label$57 
	
.LABEL $label$58
	$11 = $2
	
.LABEL $label$57
	*($3) = $2
	CALL $91($11)
	
.LABEL $label$10
	*([0] + [4]) = ($16 + [352])
	return (unreachable)
	
.LABEL $label$9
	CALL $92(($16 + [240]))
	
.LABEL $label$8
	CALL $92(($16 + [200]))
	
.LABEL $label$7
	CALL $92(($16 + [160]))
	
.LABEL $label$6
	CALL $92(($16 + [120]))
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [256])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	CALL $61(($8 + [56]), $6, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	*(($1 = (($8 + [136]) + [16]))) = *(($8 + [80]))
	*(($6 = (($8 + [136]) + [8]))) = *((($8 + [56]) + [16]))
	$3 = *($8 + [56])
	*($8 + [136]) = *($8 + [64])
	*(($4 = (($8 + [112]) + [16]))) = *(($8 + [104]))
	*(($5 = (($8 + [112]) + [8]))) = *(($8 + [96]))
	*($8 + [112]) = *($8 + [88])
	*((($8 + [184]) + [16])) = *($4)
	*((($8 + [184]) + [8])) = *($5)
	*((($8 + [160]) + [16])) = *($1)
	*((($8 + [160]) + [8])) = *($6)
	*($8 + [184]) = *($8 + [112])
	*($8 + [160]) = *($8 + [136])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	*(($6 = (($8 + [232]) + [16]))) = *((($8 + [160]) + [16]))
	*(($2 = (($8 + [232]) + [8]))) = *((($8 + [160]) + [8]))
	*(($0 = (($8 + [208]) + [16]))) = *((($8 + [184]) + [16]))
	*(($4 = (($8 + [208]) + [8]))) = *((($8 + [184]) + [8]))
	*($8 + [232]) = *($8 + [160])
	*($8 + [208]) = *($8 + [184])
	*((($8 + [32]) + [16])) = *($6)
	*((($8 + [32]) + [8])) = *($2)
	*($8 + [32]) = *($8 + [232])
	*((($8 + [8]) + [16])) = *($0)
	*((($8 + [8]) + [8])) = *($4)
	*($8 + [8]) = *($8 + [208])
	CALL void $1((int_32 $3), (int_64 ($8 + [32])), (int_32 ($8 + [8])), (int_32 $7))
	*([0] + [4]) = ($8 + [256])
	return [1]
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [976])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [976])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [976])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $72($0, $5, [101])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $79($0, $5, [101])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $72($0, $5, [102])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *(($1 + [16]))
	*((($5 + [24]) + [16])) = $2
	$3 = *(($1 + [8]))
	*((($5 + [24]) + [8])) = $3
	$4 = *($1)
	*(($5 + [16])) = $2
	*(($5 + [8])) = $3
	*($5 + [24]) = $4
	*($5) = $4
	CALL $79($0, $5, [102])
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [256])
	*([0] + [4]) = $11
	$8 = *($2 + [16])
	*($11 + [248]) = $8
	CALL require_auth($8)
	CALL prints([240])
	CALL prints([1248])
	CALL prints([320])
	$10 = *($2 + [16])
	*((($11 + [224]) + [16])) = $10
	$7 = *(($2 + [8]))
	*((($11 + [224]) + [8])) = $7
	$8 = *($2)
	*((($11 + [48]) + [16])) = $10
	*((($11 + [48]) + [8])) = $7
	*($11 + [224]) = $8
	*($11 + [48]) = $8
	$6 = CALL $66($0, ($11 + [48]))
	CALL prints([240])
	CALL prints([1264])
	*($11 + [184]) = $6
	CALL prints_l(($11 + [184]), [1])
	CALL prints([320])
	if ( $6 ){ goto $label$1 }
	CALL prints([640])
	CALL prints([1280])
	CALL prints([720])
	CALL eosio_assert([0], [1280])
	
.LABEL $label$1
	CALL prints([240])
	CALL prints([1328])
	CALL prints([320])
	*($11 + [200]) = (int_64)-1
	*($11 + [208]) = [0]
	$8 = *($11 + [248])
	$10 = *($0)
	*($11 + [184]) = $10
	*($11 + [192]) = $8
	*(($11 + [212])) = [0]
	*(($11 + [216])) = [0]
	$6 = CALL db_find_i64($10, $8, (int_64)-7949128877345865728, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	if ( ((int_32)$6) <= (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL $48(($11 + [184]), $6)
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)($11 + [184])), [400])
	CALL prints([240])
	CALL prints([1344])
	CALL printi(*($6 + [56]))
	CALL prints([320])
	CALL prints([240])
	CALL prints([1376])
	CALL printi(*($6 + [72]))
	CALL prints([320])
	CALL prints([240])
	$8 = *($6)
	CALL prints([1408])
	CALL printn($8)
	CALL prints([320])
	CALL prints([640])
	CALL prints([1424])
	CALL prints([720])
	CALL eosio_assert([0], [1424])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($11 + [248])
	*($11 + [164]) = $1
	*($11 + [168]) = $3
	*($11 + [172]) = $2
	*($11 + [176]) = $0
	*($11 + [160]) = ($11 + [248])
	CALL $67(($11 + [152]), ($11 + [184]), $8, ($11 + [160]))
	
.LABEL $label$2
	CALL prints([240])
	*($11 + [160]) = *($1 + [8])
	*($11 + [168]) = *($1 + [16])
	CALL prints([1456])
	CALL $47(($11 + [160]), [1])
	CALL prints([304])
	CALL printn(*($11 + [168]))
	CALL prints([320])
	CALL prints([240])
	*($11 + [160]) = *(($2 + [8]))
	*($11 + [168]) = *(($2 + [16]))
	CALL prints([1472])
	CALL $47(($11 + [160]), [1])
	CALL prints([304])
	CALL printn(*($11 + [168]))
	CALL prints([320])
	*((($11 + [128]) + [20])) = *(($1 + [20]))
	*((($11 + [128]) + [16])) = *($1 + [16])
	*((($11 + [128]) + [12])) = *(($1 + [12]))
	*((($11 + [128]) + [8])) = *($1 + [8])
	*($11 + [132]) = *(($1 + [4]))
	$4 = *($11 + [248])
	*($11 + [128]) = *($1)
	$5 = *($0)
	*((($11 + [112]) + [8])) = [0]
	*($11 + [112]) = (int_64)0
	$1 = CALL strlen([1488])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$8 }
	*($11 + [112]) = ($1 << [1])
	$6 = (($11 + [112]) | [1])
	if ( $1 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$3 = (($1 + [16]) & [-16])
	$6 = CALL $90($3)
	*($11 + [112]) = ($3 | [1])
	*($11 + [120]) = $6
	*($11 + [116]) = $1
	
.LABEL $label$7
	CALL memcpy($6, [1488], $1)
	
.LABEL $label$6
	*(($6 + $1)) = [0]
	$8 = (int_64)0
	$7 = (int_64)59
	$1 = [544]
	$9 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$14 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$6 = ($6 + [165])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$9 }
	*((($11 + [24]) + [16])) = *((($11 + [128]) + [16]))
	*((($11 + [24]) + [8])) = *((($11 + [128]) + [8]))
	*($11 + [24]) = *($11 + [128])
	CALL $49($4, $5, ($11 + [24]), ($11 + [112]), $9)
	if ( ((*($11 + [112]) & [1]) == 0) ){ goto $label$15 }
	CALL $91(*($11 + [120]))
	
.LABEL $label$15
	*((($11 + [88]) + [20])) = *(($2 + [20]))
	*((($11 + [88]) + [16])) = *(($2 + [16]))
	*((($11 + [88]) + [12])) = *(($2 + [12]))
	*((($11 + [88]) + [8])) = *(($2 + [8]))
	$4 = *($11 + [248])
	*($11 + [88]) = *($2)
	*($11 + [92]) = *(($2 + [4]))
	$5 = *($0)
	*((($11 + [72]) + [8])) = [0]
	*($11 + [72]) = (int_64)0
	$1 = CALL strlen([1488])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$18 }
	*($11 + [72]) = ($1 << [1])
	$6 = (($11 + [72]) | [1])
	if ( $1 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$2 = (($1 + [16]) & [-16])
	$6 = CALL $90($2)
	*($11 + [72]) = ($2 | [1])
	*($11 + [80]) = $6
	*($11 + [76]) = $1
	
.LABEL $label$17
	CALL memcpy($6, [1488], $1)
	
.LABEL $label$16
	*(($6 + $1)) = [0]
	$8 = (int_64)0
	$7 = (int_64)59
	$1 = [544]
	$9 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$24 }
	$6 = *($1)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$6 = ($6 + [165])
	goto $label$22 
	
.LABEL $label$24
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$20
	$1 = ($1 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$19 }
	*(($11 + [16])) = *((($11 + [88]) + [16]))
	*(($11 + [8])) = *((($11 + [88]) + [8]))
	*($11) = *($11 + [88])
	CALL $49($4, $5, $11, ($11 + [72]), $9)
	if ( ((*($11 + [72]) & [1]) == 0) ){ goto $label$25 }
	CALL $91(*($11 + [80]))
	
.LABEL $label$25
	$2 = *($11 + [208])
	if ( ($2 == 0) ){ goto $label$26 }
	$0 = ($11 + [212])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$28 }
	
.LOOP $label$29:
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$30 }
	CALL $91($6)
	
.LABEL $label$30
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$29 }
	$1 = *(($11 + [208]))
	goto $label$27 
	
.LABEL $label$28
	$1 = $2
	
.LABEL $label$27
	*($0) = $2
	CALL $91($1)
	
.LABEL $label$26
	*([0] + [4]) = ($11 + [256])
	return (unreachable)
	
.LABEL $label$5
	CALL $92(($11 + [112]))
	
.LABEL $label$4
	CALL $92(($11 + [72]))
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	CALL prints([240])
	$2 = *($1 + [8])
	*($4) = $2
	$3 = *($1 + [16])
	*($4 + [8]) = $3
	CALL prints([1712])
	CALL $47($4, [1])
	CALL prints([304])
	CALL printn(*($4 + [8]))
	CALL prints([320])
	CALL prints([240])
	*($4 + [8]) = $3
	*($4) = $2
	CALL prints([1712])
	CALL $47($4, [1])
	CALL prints([304])
	CALL printn(*($4 + [8]))
	CALL prints([320])
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $27 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	float_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [352])
	*([0] + [4]) = $17
	$4 = *($3 + [16])
	CALL require_auth($1)
	CALL prints([240])
	$16 = *($2 + [8])
	*($17 + [280]) = $16
	$13 = *($2 + [16])
	*($17 + [288]) = $13
	CALL prints([1056])
	CALL $47(($17 + [280]), [1])
	CALL prints([304])
	CALL printn(*($17 + [288]))
	CALL prints([320])
	$9 = [0]
	$15 = *($2)
	if ( ((uint_64)((int_64)$15 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$14 = (uint_64)$16 >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [368])
	$12 = ($2 + [16])
	*((($17 + [336]) + [8])) = *($12)
	*($17 + [336]) = *($2 + [8])
	CALL prints([240])
	*($17 + [288]) = $13
	*($17 + [280]) = $16
	CALL prints([1072])
	CALL $47(($17 + [280]), [1])
	CALL prints([304])
	CALL printn(*($17 + [288]))
	CALL prints([320])
	*((($17 + [320]) + [8])) = *($12)
	*($17 + [320]) = *($2 + [8])
	CALL prints([240])
	*($17 + [288]) = $13
	*($17 + [280]) = $16
	CALL prints([1088])
	CALL $47(($17 + [280]), [1])
	CALL prints([304])
	CALL printn(*($17 + [288]))
	CALL prints([320])
	$5 = ((int_64)$15 / (int_64)1000)
	*($2) = (int_64))($15 - ((int_64)$5 << (int_64)1))
	CALL prints([240])
	*($17 + [288]) = $13
	*($17 + [280]) = $16
	CALL prints([1104])
	CALL $47(($17 + [280]), [1])
	CALL prints([304])
	CALL printn(*($17 + [288]))
	CALL prints([320])
	*(($17 + [312])) = [0]
	*($17 + [288]) = $4
	*($17 + [296]) = (int_64)-1
	*($17 + [304]) = (int_64)0
	*($17 + [280]) = *($0)
	CALL prints([240])
	*($17 + [272]) = $13
	*($17 + [264]) = $16
	CALL prints([1120])
	CALL $47(($17 + [264]), [1])
	CALL prints([304])
	CALL printn(*($17 + [272]))
	CALL prints([320])
	$14 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$6 = *($17 + [304])
	$11 = *(($17 + [308]))
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$6 }
	$12 = ($11 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$7:
	if ( ((int_64)(uint_64)*((*($12) + [80])) >> (uint_64)(int_64)8) == (int_64)$14) ){ goto $label$6 }
	$11 = $12
	$9 = ($12 + [-24])
	$12 = $9
	if ( ((int_32)($9 + $7) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$11 == (int_32)$6) ){ goto $label$17 }
	$7 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)($17 + [280])), [400])
	CALL prints([240])
	if ( $7 ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$12 = CALL db_find_i64(*($17 + [280]), *(($17 + [288])), (int_64)-7949128877345865728, $14)
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$15 }
	$7 = CALL $48(($17 + [280]), $12)
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)($17 + [280])), [400])
	CALL prints([240])
	
.LABEL $label$16
	$14 = *(($2 + [8]))
	*($17 + [264]) = $14
	$16 = *(($2 + [16]))
	*($17 + [272]) = $16
	CALL prints([1136])
	CALL $47(($17 + [264]), [1])
	CALL prints([304])
	CALL printn(*($17 + [272]))
	CALL prints([320])
	$13 = *($2)
	CALL prints([240])
	if ( ((int_64)$13 < (int_64)1001) ){ goto $label$19 }
	*($17 + [272]) = $16
	*($17 + [264]) = $14
	CALL prints([1152])
	CALL $47(($17 + [264]), [1])
	CALL prints([304])
	CALL printn(*($17 + [272]))
	CALL prints([320])
	$14 = (int_64)0
	$12 = [100]
	$9 = ($7 + [72])
	$11 = ($7 + [56])
	
.LOOP $label$20:
	$16 = *($9)
	$13 = *($11)
	$15 = *($2)
	CALL prints([240])
	CALL prints([1168])
	$10 = ((float_32)(CASTING float_32)(uint_64 (int_64))($16 - $14)) / (float_32)(CASTING float_32)(uint_64 $13)
	CALL printi((Rounds 0)(((float_32)$10) * (float_32)(float_32)1e4)))
	CALL prints([320])
	$14 = (Rounds 0)(((float_32)(CASTING float_32)(uint_64 $14) + (float_32)((float_32)(CASTING float_32)(int_64 ((int_64)$15 / (int_64)100)) * (float_32)$10)))
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	*($17 + [272]) = $16
	*($17 + [264]) = $14
	CALL prints([1184])
	CALL $47(($17 + [264]), [1])
	CALL prints([304])
	CALL printn(*($17 + [272]))
	CALL prints([320])
	$14 = *($2)
	$16 = *($7 + [72])
	$13 = *($7 + [56])
	CALL prints([240])
	CALL prints([1200])
	$10 = ((float_32)(CASTING float_32)(uint_64 $16) / (float_32)(CASTING float_32)(uint_64 $13))
	CALL printi((CASTING int_64)(int_32 (CASTING int_32)(float_32 ((float_32)$10 * (float_32)(float_32)1e4))))
	CALL prints([480])
	$14 = (Rounds 0)(((float_32)((float_32)(CASTING float_32)(int_64 $14) * (float_32)$10) + (float_32)(float_32)0))
	CALL printui($14)
	CALL prints([496])
	CALL prints([320])
	
.LABEL $label$18
	*($3) = $14
	*((($17 + [240]) + [12])) = *($17 + [340])
	*(($17 + [260])) = *((($17 + [336]) + [12]))
	*(($17 + [256])) = *((($17 + [336]) + [8]))
	*($17 + [240]) = $5
	*($17 + [248]) = *($17 + [336])
	$8 = *($0)
	*((($17 + [224]) + [8])) = [0]
	*($17 + [224]) = (int_64)0
	$12 = CALL strlen([512])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$23 }
	*($17 + [224]) = ($12 << [1])
	$9 = (($17 + [224]) | [1])
	if ( $12 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$11 = (($12 + [16]) & [-16])
	$9 = CALL $90($11)
	*($17 + [224]) = ($11 | [1])
	*($17 + [232]) = $9
	*($17 + [228]) = $12
	
.LABEL $label$22
	CALL memcpy($9, [512], $12)
	
.LABEL $label$21
	*(($9 + $12)) = [0]
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [544]
	$15 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$29 }
	$9 = *($12)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$9 = ($9 + [165])
	goto $label$27 
	
.LABEL $label$29
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$25
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$24 }
	*((($17 + [80]) + [16])) = *((($17 + [240]) + [16]))
	*((($17 + [80]) + [8])) = *((($17 + [240]) + [8]))
	*($17 + [80]) = *($17 + [240])
	CALL $49($1, $8, ($17 + [80]), ($17 + [224]), $15)
	if ( ((*($17 + [224]) & [1]) == 0) ){ goto $label$30 }
	CALL $91(*($17 + [232]))
	
.LABEL $label$30
	*((($17 + [200]) + [12])) = *($17 + [324])
	*(($17 + [220])) = *((($17 + [320]) + [12]))
	*((($17 + [200]) + [16])) = *((($17 + [320]) + [8]))
	*($17 + [200]) = $5
	*($17 + [208]) = *($17 + [320])
	*((($17 + [184]) + [8])) = [0]
	*($17 + [184]) = (int_64)0
	$12 = CALL strlen([512])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$33 }
	*($17 + [184]) = ($12 << [1])
	$9 = (($17 + [184]) | [1])
	if ( $12 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$11 = (($12 + [16]) & [-16])
	$9 = CALL $90($11)
	*($17 + [184]) = ($11 | [1])
	*($17 + [192]) = $9
	*($17 + [188]) = $12
	
.LABEL $label$32
	CALL memcpy($9, [512], $12)
	
.LABEL $label$31
	*(($9 + $12)) = [0]
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [544]
	$15 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$39 }
	$9 = *($12)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$9 = ($9 + [165])
	goto $label$37 
	
.LABEL $label$39
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$35
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$34 }
	*((($17 + [56]) + [16])) = *((($17 + [200]) + [16]))
	*((($17 + [56]) + [8])) = *((($17 + [200]) + [8]))
	*($17 + [56]) = *($17 + [200])
	CALL $49($1, $4, ($17 + [56]), ($17 + [184]), $15)
	if ( ((*($17 + [184]) & [1]) == 0) ){ goto $label$40 }
	CALL $91(*($17 + [192]))
	
.LABEL $label$40
	*((($17 + [160]) + [20])) = *(($2 + [20]))
	*((($17 + [160]) + [16])) = *(($2 + [16]))
	*((($17 + [160]) + [12])) = *(($2 + [12]))
	*((($17 + [160]) + [8])) = *(($2 + [8]))
	*($17 + [160]) = *($2)
	*($17 + [164]) = *(($2 + [4]))
	$4 = *($0)
	*((($17 + [144]) + [8])) = [0]
	*($17 + [144]) = (int_64)0
	$12 = CALL strlen([560])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$43 }
	*($17 + [144]) = ($12 << [1])
	$9 = (($17 + [144]) | [1])
	if ( $12 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	$11 = (($12 + [16]) & [-16])
	$9 = CALL $90($11)
	*($17 + [144]) = ($11 | [1])
	*($17 + [152]) = $9
	*($17 + [148]) = $12
	
.LABEL $label$42
	CALL memcpy($9, [560], $12)
	
.LABEL $label$41
	*(($9 + $12)) = [0]
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [544]
	$15 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$49 }
	$9 = *($12)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$9 = ($9 + [165])
	goto $label$47 
	
.LABEL $label$49
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$45
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$44 }
	*((($17 + [32]) + [16])) = *((($17 + [160]) + [16]))
	*((($17 + [32]) + [8])) = *((($17 + [160]) + [8]))
	*($17 + [32]) = *($17 + [160])
	CALL $49($1, $4, ($17 + [32]), ($17 + [144]), $15)
	if ( ((*($17 + [144]) & [1]) == 0) ){ goto $label$50 }
	CALL $91(*($17 + [152]))
	
.LABEL $label$50
	*((($17 + [120]) + [20])) = *(($3 + [20]))
	*((($17 + [120]) + [16])) = *(($3 + [16]))
	*((($17 + [120]) + [12])) = *(($3 + [12]))
	*((($17 + [120]) + [8])) = *(($3 + [8]))
	*($17 + [120]) = *($3)
	*($17 + [124]) = *(($3 + [4]))
	$4 = *($0)
	*((($17 + [104]) + [8])) = [0]
	*($17 + [104]) = (int_64)0
	$12 = CALL strlen([560])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$53 }
	*($17 + [104]) = ($12 << [1])
	$9 = (($17 + [104]) | [1])
	if ( $12 ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$53
	$11 = (($12 + [16]) & [-16])
	$9 = CALL $90($11)
	*($17 + [104]) = ($11 | [1])
	*($17 + [112]) = $9
	*($17 + [108]) = $12
	
.LABEL $label$52
	CALL memcpy($9, [560], $12)
	
.LABEL $label$51
	*(($9 + $12)) = [0]
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [544]
	$15 = (int_64)0
	
.LOOP $label$54:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$59 }
	$9 = *($12)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$58 }
	$9 = ($9 + [165])
	goto $label$57 
	
.LABEL $label$59
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$58
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$57
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$56
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$55
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$54 }
	*((($17 + [8]) + [16])) = *((($17 + [120]) + [16]))
	*((($17 + [8]) + [8])) = *((($17 + [120]) + [8]))
	*($17 + [8]) = *($17 + [120])
	CALL $49($4, $1, ($17 + [8]), ($17 + [104]), $15)
	if ( ((*($17 + [104]) & [1]) == 0) ){ goto $label$60 }
	CALL $91(*($17 + [112]))
	
.LABEL $label$60
	*($17 + [268]) = $3
	*($17 + [264]) = $2
	*($17 + [272]) = $0
	CALL eosio_assert([1], [576])
	CALL $63(($17 + [280]), $7, (int_64)0, ($17 + [264]))
	CALL prints([240])
	CALL prints([1216])
	CALL $51($2)
	CALL prints([304])
	CALL printn(*(($2 + [16])))
	CALL prints([480])
	CALL $51($3)
	CALL prints([304])
	CALL printn(*(($3 + [16])))
	CALL prints([496])
	CALL prints([320])
	$9 = *($17 + [304])
	if ( $9 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	CALL prints([240])
	
.LABEL $label$14
	*($17 + [264]) = *(($2 + [8]))
	*($17 + [272]) = *(($2 + [16]))
	CALL prints([1232])
	CALL $47(($17 + [264]), [1])
	CALL prints([304])
	CALL printn(*($17 + [272]))
	CALL prints([320])
	CALL prints([640])
	CALL prints([688])
	CALL prints([720])
	CALL eosio_assert([0], [688])
	$9 = *($17 + [304])
	if ( ($9 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$11 = ($17 + [308])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$62 }
	
.LOOP $label$63:
	$12 = ($12 + [-24])
	$2 = *($12)
	*($12) = [0]
	if ( ($2 == 0) ){ goto $label$64 }
	CALL $91($2)
	
.LABEL $label$64
	if ( ((int_32)$9 != (int_32)$12) ){ goto $label$63 }
	$12 = *(($17 + [304]))
	goto $label$61 
	
.LABEL $label$62
	$12 = $9
	
.LABEL $label$61
	*($11) = $9
	CALL $91($12)
	
.LABEL $label$12
	*([0] + [4]) = ($17 + [352])
	return (unreachable)
	
.LABEL $label$11
	CALL $92(($17 + [224]))
	
.LABEL $label$10
	CALL $92(($17 + [184]))
	
.LABEL $label$9
	CALL $92(($17 + [144]))
	
.LABEL $label$8
	CALL $92(($17 + [104]))
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [368])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	$7 = ($7 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $1)
	
.LABEL $label$1
	CALL $64(($9 + [80]), $7, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	*(($1 = (($9 + [200]) + [16]))) = *((($9 + [80]) + [16]))
	*(($7 = (($9 + [200]) + [8]))) = *((($9 + [80]) + [8]))
	*($9 + [200]) = *($9 + [80])
	*(($3 = (($9 + [176]) + [16]))) = *(($9 + [120]))
	*(($4 = (($9 + [176]) + [8]))) = *(($9 + [112]))
	*($9 + [176]) = *($9 + [104])
	*(($5 = (($9 + [152]) + [16]))) = *(($9 + [144]))
	*(($6 = (($9 + [152]) + [8]))) = *(($9 + [136]))
	*($9 + [152]) = *($9 + [128])
	*((($9 + [272]) + [16])) = *($5)
	*((($9 + [272]) + [8])) = *($6)
	*((($9 + [248]) + [16])) = *($3)
	*((($9 + [248]) + [8])) = *($4)
	*($9 + [272]) = *($9 + [152])
	*($9 + [248]) = *($9 + [176])
	*((($9 + [224]) + [16])) = *($1)
	*((($9 + [224]) + [8])) = *($7)
	*($9 + [224]) = *($9 + [200])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	*(($7 = (($9 + [344]) + [16]))) = *((($9 + [224]) + [16]))
	*(($2 = (($9 + [344]) + [8]))) = *((($9 + [224]) + [8]))
	*(($0 = (($9 + [320]) + [16]))) = *((($9 + [248]) + [16]))
	*(($3 = (($9 + [320]) + [8]))) = *((($9 + [248]) + [8]))
	*($9 + [344]) = *($9 + [224])
	*($9 + [320]) = *($9 + [248])
	*(($4 = (($9 + [296]) + [16]))) = *((($9 + [272]) + [16]))
	*(($5 = (($9 + [296]) + [8]))) = *((($9 + [272]) + [8]))
	*($9 + [296]) = *($9 + [272])
	*((($9 + [56]) + [16])) = *($7)
	*((($9 + [56]) + [8])) = *($2)
	*($9 + [56]) = *($9 + [344])
	*((($9 + [32]) + [16])) = *($0)
	*((($9 + [32]) + [8])) = *($3)
	*($9 + [32]) = *($9 + [320])
	*((($9 + [8]) + [16])) = *($4)
	*((($9 + [8]) + [8])) = *($5)
	*($9 + [8]) = *($9 + [296])
	CALL void $1((int_32 ($9 + [56])), (int_32 ($9 + [32])), (int_32 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [368])
	return [1]
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1008])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $90([104])) + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [48]) = [0]
	*($6 + [52]) = [0]
	*($6 + [56]) = [0]
	*($6 + [60]) = [0]
	*($6 + [64]) = [0]
	*($6 + [68]) = [0]
	*($6 + [72]) = [0]
	*($6 + [76]) = [0]
	*($6 + [80]) = [0]
	*($6 + [84]) = [0]
	*($6 + [88]) = [0]
	*($6 + [92]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [112])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $35(CALL $35(CALL $35(CALL $35(CALL $35(CALL $35(CALL $34(($8 + [32]), ($6 + [8])), ($6 + [20])), ($6 + [32])), ($6 + [44])), ($6 + [56])), ($6 + [68])), ($6 + [80]))
	*($6 + [96]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [96])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $71(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $70($4)
	CALL $91($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	$2 = *($0)
	$4 = *($0 + [4])
	CALL prints([240])
	CALL prints([1568])
	CALL prints([320])
	*($1) = *(*($4))
	$5 = *($4 + [4])
	*($1 + [8]) = *($5)
	*(($1 + [24])) = *(($5 + [16]))
	*(($1 + [16])) = *(($5 + [8]))
	$5 = *($4 + [8])
	*($1 + [32]) = *($5)
	*(($1 + [48])) = *(($5 + [16]))
	*(($1 + [40])) = *(($5 + [8]))
	$5 = *($4 + [4])
	*($1 + [56]) = *($5)
	*(($1 + [64])) = *(($5 + [8]))
	$5 = *($4 + [12])
	*($1 + [72]) = *($5)
	*(($4 = ($1 + [80]))) = *(($5 + [8]))
	*($1 + [88]) = *($1 + [72])
	*(($1 + [96])) = *($4)
	*($1 + [88]) = (Rounds 0)(((float_64)((float_64)(PROMOTE float_64)(float_32 (CASTING float_32)(int_64 *($1 + [72]))) * (float_64)(float_64)1e4) / (float_64)(PROMOTE float_64)(float_32 (CASTING float_32)(int_64 *($1 + [56])))))
	CALL prints([240])
	$3 = *($1)
	CALL prints([1600])
	CALL printn($3)
	CALL prints([320])
	*($6 + [120]) = ($6 + [104])
	*($6 + [116]) = $6
	*($6 + [112]) = $6
	CALL $52(($6 + [112]), $1)
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8
	*($1 + [108]) = CALL db_store_i64(*($2 + [8]), (int_64)-7949128877345865728, *(*($0 + [8])), $3), $6, [104])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [112])
	CALL memcpy($0, *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [24]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [32]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [40]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [48]), *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [56]), *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [64]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [8]) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*($0 + [24]) = (int_64)0
	*(($0 + [40])) = (int_64)0
	*(($0 + [32])) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [208])
	*($0 + [48]) = (int_64)0
	*(($0 + [64])) = (int_64)0
	*(($0 + [56])) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [0]
	
.LABEL $label$11
	CALL eosio_assert($5, [208])
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	CALL $65($0, ($6 + [24]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1504])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $90([120])
	CALL $58($3)
	*($3 + [104]) = $1
	CALL $68(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = (uint_64)*($3 + [80]) >> (uint_64)(int_64)8
	*($7 + [16]) = $2)
	$4 = *($3 + [108])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $60(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $91($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	CALL prints([240])
	CALL prints([1632])
	CALL prints([320])
	$4 = [0]
	*(($7 + [40])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$2 = *($0)
	*($7 + [8]) = $2
	*($7 + [16]) = $2
	CALL prints([240])
	CALL prints([1648])
	CALL prints([320])
	$0 = CALL db_find_i64($2, $2, (int_64)3941454516460716032, *($0))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $69(($7 + [8]), $0)
	CALL eosio_assert(((int_32)*($4 + [92]) == (int_32)($7 + [8])), [400])
	
.LABEL $label$1
	CALL prints([240])
	CALL prints([1664])
	CALL prints([320])
	CALL prints([240])
	if ( ($4 == 0) ){ goto $label$3 }
	CALL prints([1696])
	CALL prints([320])
	$6 = [97]
	$4 = *(($4 + [24]))
	$0 = *($4 + [20])
	if ( ((uint_32)$0 >= (uint_32)$4) ){ goto $label$2 }
	$3 = *($1 + [16])
	$2 = *($1 + [8])
	
.LOOP $label$4:
	if ( ((int_64)*(($0 + [8])) != (int_64)$2) ){ goto $label$5 }
	if ( ((int_64)*(($0 + [16])) == (int_64)$3) ){ goto $label$2 }
	
.LABEL $label$5
	$0 = ($0 + [24])
	if ( ($0 <= $4) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	CALL prints([1680])
	CALL prints([320])
	$6 = [0]
	
.LABEL $label$2
	$1 = *($7 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	$5 = ($7 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL $70($4)
	CALL $91($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($7 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $1
	
.LABEL $label$7
	*($5) = $1
	CALL $91($0)
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [48])
	return $6
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0) = (int_64)0
	*($0 + [8]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [208])
	*($0 + [32]) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [40])) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [208])
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	CALL $62($0, ($6 + [24]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $97($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $91($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [848])
	$4 = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	*($1 + [56]) = $4
	$5 = (int_64)
	*($1 + [72]) = $5(*($1 + [72]) - *(*($3 + [4]))))
	$3 = ($1 + [80])
	$6 = *($3)
	*($1 + [88]) = $5
	*(($1 + [96])) = *($3)
	*($1 + [88]) = (Rounds 0)(((float_64)((float_64)(PROMOTE float_64)(float_32 (CASTING float_32)(int_64 $5)) * (float_64)(float_64)1e4) / (float_64)(PROMOTE float_64)(float_32 (CASTING float_32)(int_64 $4))))
	CALL eosio_assert([1], [912])
	*($7 + [120]) = ($7 + [104])
	*($7 + [116]) = $7
	*($7 + [112]) = $7
	CALL $52(($7 + [112]), $1)
	CALL db_update_i64(*($1 + [108]), $2, $7, [104])
	$5 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( (uint_64)($5) <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [128])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [112])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [32]), *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [40]), *($2 + [4]), [8])
	$1 = (*($2 + [4]) + [8])
	*($2 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $1) > (uint_32)[7]), [112])
	CALL memcpy(($0 + [48]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $102 ()
{
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10404])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10212]
	$1 = (((int_32)$2 * (int_32)[12]) + [10212])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $88 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10502]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10504])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10502]) = [1]
	$7 = ($7 << [16])
	*([0] + [10504]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10504])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10504]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10502]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10502]) = [1]
	$3 = ($3 << [16])
	*([0] + [10504]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10504])
	
.LABEL $label$8
	*([0] + [10504]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $88($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10416])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $87([2020], $0)
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*(*($0)) + [-97])
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$14
	$4 = ($0 + [4])
	$0 = *($0 + [4])
	$3 = ($1 + [24])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [28]))) ){ goto $label$7 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$13
	$4 = ($0 + [4])
	goto $label$1 
	
.LABEL $label$12
	$4 = ($0 + [4])
	$0 = *($0 + [4])
	$3 = ($1 + [36])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [40]))) ){ goto $label$6 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$11
	$4 = ($0 + [4])
	$0 = *($0 + [4])
	$3 = ($1 + [48])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [52]))) ){ goto $label$5 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$10
	$4 = ($0 + [4])
	$0 = *($0 + [4])
	$3 = ($1 + [60])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [64]))) ){ goto $label$4 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$9
	$4 = ($0 + [4])
	$0 = *($0 + [4])
	$3 = ($1 + [72])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [76]))) ){ goto $label$3 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$8
	$4 = ($0 + [4])
	$0 = *($0 + [4])
	$3 = ($1 + [84])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [88]))) ){ goto $label$2 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$7
	CALL $84(($1 + [20]), $0)
	goto $label$1 
	
.LABEL $label$6
	CALL $84(($1 + [32]), $0)
	goto $label$1 
	
.LABEL $label$5
	CALL $84(($1 + [44]), $0)
	goto $label$1 
	
.LABEL $label$4
	CALL $84(($1 + [56]), $0)
	goto $label$1 
	
.LABEL $label$3
	CALL $84(($1 + [68]), $0)
	goto $label$1 
	
.LABEL $label$2
	CALL $84(($1 + [80]), $0)
	
.LABEL $label$1
	CALL prints([240])
	$0 = *($4)
	CALL prints([1968])
	CALL $51($0)
	CALL prints([304])
	CALL printn(*($0 + [16]))
	CALL prints([320])
	$4
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $90(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $97($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $91($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($1) = *(*($0))
	$4 = (*(*($0 + [4])) + [-97])
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$14
	$4 = ($0 + [8])
	$0 = *($0 + [8])
	$3 = ($1 + [24])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [28]))) ){ goto $label$7 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$13
	$4 = ($0 + [8])
	goto $label$1 
	
.LABEL $label$12
	$4 = ($0 + [8])
	$0 = *($0 + [8])
	$3 = ($1 + [36])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [40]))) ){ goto $label$6 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$11
	$4 = ($0 + [8])
	$0 = *($0 + [8])
	$3 = ($1 + [48])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [52]))) ){ goto $label$5 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$10
	$4 = ($0 + [8])
	$0 = *($0 + [8])
	$3 = ($1 + [60])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [64]))) ){ goto $label$4 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$9
	$4 = ($0 + [8])
	$0 = *($0 + [8])
	$3 = ($1 + [72])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [76]))) ){ goto $label$3 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$8
	$4 = ($0 + [8])
	$0 = *($0 + [8])
	$3 = ($1 + [84])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)*(($1 + [88]))) ){ goto $label$2 }
	*($2) = *($0)
	*(($2 + [16])) = *(($0 + [16]))
	*(($2 + [8])) = *(($0 + [8]))
	*($3) = (*($3) + [24])
	goto $label$1 
	
.LABEL $label$7
	CALL $84(($1 + [20]), $0)
	goto $label$1 
	
.LABEL $label$6
	CALL $84(($1 + [32]), $0)
	goto $label$1 
	
.LABEL $label$5
	CALL $84(($1 + [44]), $0)
	goto $label$1 
	
.LABEL $label$4
	CALL $84(($1 + [56]), $0)
	goto $label$1 
	
.LABEL $label$3
	CALL $84(($1 + [68]), $0)
	goto $label$1 
	
.LABEL $label$2
	CALL $84(($1 + [80]), $0)
	
.LABEL $label$1
	CALL prints([240])
	$0 = *($4)
	CALL prints([1936])
	CALL $51($0)
	CALL prints([304])
	CALL printn(*($0 + [16]))
	CALL prints([320])
	$4
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$2 = *($0)
	CALL $83(*($0 + [4]), $1)
	*(($6 = $5)) = [0]
	CALL $76($6, $1)
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [4]) = $5
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL $77($6, $1)
	$4 = *($1)
	*($1 + [96]) = CALL db_store_i64(*($2 + [8]), (int_64)3941454516460716032, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1504])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $90([104])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [52]) = [0]
	*($3 + [56]) = [0]
	*($3 + [60]) = [0]
	*($3 + [64]) = [0]
	*($3 + [68]) = [0]
	*($3 + [72]) = [0]
	*($3 + [76]) = [0]
	*($3 + [80]) = [0]
	*($3 + [84]) = [0]
	*($3 + [88]) = [0]
	*($3 + [92]) = $1
	CALL $82(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [96])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $71(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $70($3)
	CALL $91($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [848])
	$4 = *($1)
	CALL $85($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [912])
	*(($3 = $6)) = [0]
	CALL $76($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $77($3, $1)
	CALL db_update_i64(*($1 + [96]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*($5 + [95]) = $2
	CALL require_auth(*($0))
	CALL prints([240])
	CALL prints([1728])
	CALL $51($1)
	CALL prints([304])
	CALL printn(*($1 + [16]))
	CALL prints([320])
	*(($5 + [80])) = [0]
	*($5 + [64]) = (int_64)-1
	*($5 + [72]) = (int_64)0
	$3 = *($0)
	*($5 + [48]) = $3
	*($5 + [56]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)3941454516460716032, $3)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $69(($5 + [48]), $0)
	CALL eosio_assert(((int_32)*($0 + [92]) == (int_32)($5 + [48])), [400])
	*($5 + [36]) = $1
	*($5 + [32]) = ($5 + [95])
	CALL eosio_assert([1], [576])
	CALL $73(($5 + [48]), $0, (int_64)0, ($5 + [32]))
	$2 = *($5 + [72])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL prints([640])
	*($5 + [8]) = *(($1 + [16]))
	CALL $74(($5 + [16]), ($5 + [8]))
	$0 = CALL $94(($5 + [16]), [1760])
	$4 = ($0 + [8])
	*(($2 = (($5 + [32]) + [8]))) = *($4)
	*($5 + [32]) = *($0)
	*($0) = [0]
	*(($0 + [4])) = [0]
	*($4) = [0]
	CALL prints(( *($2) ? (($5 + [32]) | [1]) : (*($5 + [32]) & [1]) ))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $91(*($2))
	
.LABEL $label$4
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $91(*($5 + [24]))
	
.LABEL $label$5
	CALL prints([720])
	*($5 + [8]) = *(($1 + [16]))
	CALL $74(($5 + [16]), ($5 + [8]))
	$1 = CALL $94(($5 + [16]), [1760])
	$2 = ($1 + [8])
	*(($0 = (($5 + [32]) + [8]))) = *($2)
	*($5 + [32]) = *($1)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($2) = [0]
	CALL eosio_assert([0], ( *($0) ? (($5 + [32]) | [1]) : (*($5 + [32]) & [1]) ))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $91(*($0))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $91(*($5 + [24]))
	
.LABEL $label$7
	$2 = *($5 + [72])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($5 + [76])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $70($0)
	CALL $91($0)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$10 }
	$1 = *(($5 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($4) = $2
	CALL $91($1)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [92]) == (int_32)$0), [800])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [848])
	$4 = *($1)
	CALL $75($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [912])
	*(($3 = $6)) = [0]
	CALL $76($3, $1)
	$5 = *($3)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($5)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $5)
	CALL $77($3, $1)
	CALL db_update_i64(*($1 + [96]), $2, $6, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0 + [80])
	if ( ($4 == 0) ){ goto $label$1 }
	*(($0 + [84])) = $4
	CALL $91($4)
	
.LABEL $label$1
	$4 = *($0 + [68])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($0 + [72])) = $4
	CALL $91($4)
	
.LABEL $label$2
	$4 = *($0 + [56])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($0 + [60])) = $4
	CALL $91($4)
	
.LABEL $label$3
	$4 = *($0 + [44])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($0 + [48])) = $4
	CALL $91($4)
	
.LABEL $label$4
	$4 = *($0 + [32])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($0 + [36])) = $4
	CALL $91($4)
	
.LABEL $label$5
	$4 = *($0 + [20])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($0 + [24])) = $4
	CALL $91($4)
	
.LABEL $label$6
	$1 = *($0 + [8])
	if ( ($1 == 0) ){ goto $label$7 }
	$3 = ($0 + [12])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$10:
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($4 + [8])))
	
.LABEL $label$11
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [8]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $1
	
.LABEL $label$8
	*($3) = $1
	CALL $91($4)
	
.LABEL $label$7
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $90(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $97($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $70($1)
	CALL $91($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $91($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = (*($0) + [8])
	*($0) = $4
	$5 = *($1 + [8])
	$2 = *(($1 + [12]))
	$6 = (CASTING uint_64)(uint_32 ((int_32)($2 - $5) / (int_32)[12]))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	*($0) = $4
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	$3 = *($5)
	$6 = (CASTING uint_64)(uint_32 ( *($5 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$4:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$4 }
	*($0) = $4
	$3 = *($5)
	$3 = ( *(($5 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = ($3 + $4)
	*($0) = $4
	
.LABEL $label$5
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = *($1 + [20])
	$5 = *(($1 + [24]))
	$2 = ($5 - $3)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$2 / (int_32)[24]))
	
.LOOP $label$6:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$7 }
	$5 = ($2 + [-24])
	$4 = ((($5 - ((uint_32)$5 % (uint_32)[24])) + $4) + [24])
	
.LABEL $label$7
	*($0) = $4
	$3 = *($1 + [32])
	$5 = *(($1 + [36]))
	$2 = ($5 - $3)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$2 / (int_32)[24]))
	
.LOOP $label$8:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$9 }
	$5 = ($2 + [-24])
	$4 = ((($5 - ((uint_32)$5 % (uint_32)[24])) + $4) + [24])
	
.LABEL $label$9
	*($0) = $4
	$3 = *($1 + [44])
	$5 = *(($1 + [48]))
	$2 = ($5 - $3)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$2 / (int_32)[24]))
	
.LOOP $label$10:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$10 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$11 }
	$5 = ($2 + [-24])
	$4 = ((($5 - ((uint_32)$5 % (uint_32)[24])) + $4) + [24])
	
.LABEL $label$11
	*($0) = $4
	$3 = *($1 + [56])
	$5 = *(($1 + [60]))
	$2 = ($5 - $3)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$2 / (int_32)[24]))
	
.LOOP $label$12:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$13 }
	$5 = ($2 + [-24])
	$4 = ((($5 - ((uint_32)$5 % (uint_32)[24])) + $4) + [24])
	
.LABEL $label$13
	*($0) = $4
	$3 = *($1 + [68])
	$5 = *(($1 + [72]))
	$2 = ($5 - $3)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$2 / (int_32)[24]))
	
.LOOP $label$14:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$14 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$15 }
	$5 = ($2 + [-24])
	$4 = ((($5 - ((uint_32)$5 % (uint_32)[24])) + $4) + [24])
	
.LABEL $label$15
	*($0) = $4
	$3 = *($1 + [80])
	$5 = *(($1 + [84]))
	$2 = ($5 - $3)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$2 / (int_32)[24]))
	
.LOOP $label$16:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$16 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$17 }
	$5 = ($2 + [-24])
	$4 = ((($5 - ((uint_32)$5 % (uint_32)[24])) + $4) + [24])
	
.LABEL $label$17
	*($0) = $4
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [976])
	CALL memcpy(*($0 + [4]), $1, [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *($1 + [8])) / (int_32)[12]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [976])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [12]))
	$4 = *(($1 + [8]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $57($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$4 = CALL $78(CALL $78(CALL $78(CALL $78(CALL $78(CALL $78($0, ($1 + [20])), ($1 + [32])), ($1 + [44])), ($1 + [56])), ($1 + [68])), ($1 + [80]))
	*([0] + [4]) = ($7 + [16])
	return $4
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $90([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1772]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $99($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $93($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[24])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $8) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $90(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [8]) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [208])
	$6 = (*($8) + [24])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $97($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[24]))
	$2 = ($7 + ((int_32)$2 * (int_32)[24]))
	$7 = $2
	
.LOOP $label$13:
	*($7) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7 + [8]) = (int_64)1398362884
	CALL eosio_assert([1], [144])
	$5 = (uint_64)*($7 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$8 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$8 = [0]
	
.LABEL $label$14
	CALL eosio_assert($8, [208])
	$7 = ($7 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$8 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$8 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $8)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $7
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $91($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [112])
	*([0] + [4]) = $6
	*($6 + [96]) = (int_64)0
	*($6 + [104]) = [0]
	$5 = (*(($1 + [12])) - *($1 + [8]))
	$4 = ((int_32)$5 / (int_32)[12])
	$2 = *($1)
	if ( ($5 == 0) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$7 }
	$5 = CALL $90($5)
	*((($6 + [96]) + [8])) = ($5 + ((int_32)$4 * (int_32)[12]))
	*($6 + [96]) = $5
	*($6 + [100]) = $5
	$3 = *(($1 + [12]))
	$4 = *(($1 + [8]))
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL $98($5, $4)
	$5 = ($5 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$9 }
	*($6 + [100]) = $5
	
.LABEL $label$8
	*($6 + [88]) = [0]
	*($6 + [80]) = (int_64)0
	$5 = (*(($1 + [24])) - *($1 + [20]))
	$4 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$6 }
	$5 = CALL $90($5)
	*(($6 + [88])) = ($5 + ((int_32)$4 * (int_32)[24]))
	*($6 + [80]) = $5
	*($6 + [84]) = $5
	$3 = *(($1 + [20]))
	$4 = (*(($1 + [24])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $3, $4)
	*($6 + [84]) = ($5 + ((int_32)((uint_32)$4 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$10
	*($6 + [72]) = [0]
	*($6 + [64]) = (int_64)0
	$5 = (*(($1 + [36])) - *($1 + [32]))
	$4 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$5 }
	$5 = CALL $90($5)
	*(($6 + [72])) = ($5 + ((int_32)$4 * (int_32)[24]))
	*($6 + [64]) = $5
	*($6 + [68]) = $5
	$3 = *(($1 + [32]))
	$4 = (*(($1 + [36])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($5, $3, $4)
	*($6 + [68]) = ($5 + ((int_32)((uint_32)$4 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$11
	*($6 + [56]) = [0]
	*($6 + [48]) = (int_64)0
	$5 = (*(($1 + [48])) - *($1 + [44]))
	$4 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$4 }
	$5 = CALL $90($5)
	*(($6 + [56])) = ($5 + ((int_32)$4 * (int_32)[24]))
	*($6 + [48]) = $5
	*($6 + [52]) = $5
	$3 = *(($1 + [44]))
	$4 = (*(($1 + [48])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($5, $3, $4)
	*($6 + [52]) = ($5 + ((int_32)((uint_32)$4 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$12
	*($6 + [40]) = [0]
	*($6 + [32]) = (int_64)0
	$5 = (*(($1 + [60])) - *($1 + [56]))
	$4 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$3 }
	$5 = CALL $90($5)
	*(($6 + [40])) = ($5 + ((int_32)$4 * (int_32)[24]))
	*($6 + [32]) = $5
	*($6 + [36]) = $5
	$3 = *(($1 + [56]))
	$4 = (*(($1 + [60])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($5, $3, $4)
	*($6 + [36]) = ($5 + ((int_32)((uint_32)$4 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$13
	*($6 + [24]) = [0]
	*($6 + [16]) = (int_64)0
	$5 = (*(($1 + [72])) - *($1 + [68]))
	$4 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$14 }
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = CALL $90($5)
	*(($6 + [24])) = ($5 + ((int_32)$4 * (int_32)[24]))
	*($6 + [16]) = $5
	*($6 + [20]) = $5
	$3 = *(($1 + [68]))
	$4 = (*(($1 + [72])) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($5, $3, $4)
	*($6 + [20]) = ($5 + ((int_32)((uint_32)$4 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$14
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	$5 = (*(($1 + [84])) - *($1 + [80]))
	$4 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$15 }
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = CALL $90($5)
	*(($6 + [8])) = ($5 + ((int_32)$4 * (int_32)[24]))
	*($6) = $5
	*($6 + [4]) = $5
	$1 = *(($1 + [80]))
	$4 = (*(($1 + [84])) - $1)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($5, $1, $4)
	*($6 + [4]) = ($5 + ((int_32)((uint_32)$4 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$15
	CALL $38($0, $2, ($6 + [96]), ($6 + [80]), ($6 + [64]), ($6 + [48]), ($6 + [32]), ($6 + [16]), $6)
	$5 = *($6)
	if ( ($5 == 0) ){ goto $label$16 }
	*($6 + [4]) = $5
	CALL $91($5)
	
.LABEL $label$16
	$5 = *($6 + [16])
	if ( ($5 == 0) ){ goto $label$17 }
	*($6 + [20]) = $5
	CALL $91($5)
	
.LABEL $label$17
	$5 = *($6 + [32])
	if ( ($5 == 0) ){ goto $label$18 }
	*($6 + [36]) = $5
	CALL $91($5)
	
.LABEL $label$18
	$5 = *($6 + [48])
	if ( ($5 == 0) ){ goto $label$19 }
	*($6 + [52]) = $5
	CALL $91($5)
	
.LABEL $label$19
	$5 = *($6 + [64])
	if ( ($5 == 0) ){ goto $label$20 }
	*($6 + [68]) = $5
	CALL $91($5)
	
.LABEL $label$20
	$5 = *($6 + [80])
	if ( ($5 == 0) ){ goto $label$21 }
	*($6 + [84]) = $5
	CALL $91($5)
	
.LABEL $label$21
	$1 = *($6 + [96])
	if ( ($1 == 0) ){ goto $label$22 }
	$5 = *($6 + [100])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$24 }
	$4 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$25:
	if ( ((*($5) & [1]) == 0) ){ goto $label$26 }
	CALL $91(*(($5 + [8])))
	
.LABEL $label$26
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $4) != (int_32)[-12]) ){ goto $label$25 }
	$5 = *($6 + [96])
	goto $label$23 
	
.LABEL $label$24
	$5 = $1
	
.LABEL $label$23
	*($6 + [100]) = $1
	CALL $91($5)
	
.LABEL $label$22
	*([0] + [4]) = ($6 + [112])
	return (unreachable)
	
.LABEL $label$7
	CALL $97(($6 + [96]))
	
.LABEL $label$6
	CALL $97(($6 + [80]))
	
.LABEL $label$5
	CALL $97(($6 + [64]))
	
.LABEL $label$4
	CALL $97(($6 + [48]))
	
.LABEL $label$3
	CALL $97(($6 + [32]))
	
.LABEL $label$2
	CALL $97(($6 + [16]))
	
.LABEL $label$1
	CALL $97($6)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0 + [80])
	if ( ($4 == 0) ){ goto $label$1 }
	*(($0 + [84])) = $4
	CALL $91($4)
	
.LABEL $label$1
	$4 = *($0 + [68])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($0 + [72])) = $4
	CALL $91($4)
	
.LABEL $label$2
	$4 = *($0 + [56])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($0 + [60])) = $4
	CALL $91($4)
	
.LABEL $label$3
	$4 = *($0 + [44])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($0 + [48])) = $4
	CALL $91($4)
	
.LABEL $label$4
	$4 = *($0 + [32])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($0 + [36])) = $4
	CALL $91($4)
	
.LABEL $label$5
	$4 = *($0 + [20])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($0 + [24])) = $4
	CALL $91($4)
	
.LABEL $label$6
	$1 = *($0 + [8])
	if ( ($1 == 0) ){ goto $label$7 }
	$3 = ($0 + [12])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$10:
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL $91(*(($4 + [8])))
	
.LABEL $label$11
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [8]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $1
	
.LABEL $label$8
	*($3) = $1
	CALL $91($4)
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [976])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [976])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [976])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [976])
	CALL memcpy(*($4), ($7 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*($5 + [79]) = $2
	CALL require_auth(*($0))
	CALL prints([240])
	CALL prints([1920])
	CALL $51($1)
	CALL prints([304])
	CALL printn(*($1 + [16]))
	CALL prints([320])
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	$3 = *($0)
	*($5 + [32]) = $3
	*($5 + [40]) = $3
	$2 = CALL db_find_i64($3, $3, (int_64)3941454516460716032, $3)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $69(($5 + [32]), $2)
	CALL eosio_assert(((int_32)*($0 + [92]) == (int_32)($5 + [32])), [400])
	*($5 + [20]) = $1
	*($5 + [16]) = ($5 + [79])
	CALL eosio_assert([1], [576])
	CALL $80(($5 + [32]), $0, (int_64)0, ($5 + [16]))
	$2 = *($5 + [56])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = *($0)
	*($5 + [16]) = $0
	*($5 + [24]) = $1
	*($5 + [20]) = ($5 + [79])
	CALL $81(($5 + [8]), ($5 + [32]), $3, ($5 + [16]))
	$2 = *($5 + [56])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($5 + [60])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $70($0)
	CALL $91($0)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($5 + [56]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $91($1)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [128])
	*([0] + [4]) = $3
	*(($2 = $3) + [108]) = $0
	*($2 + [96]) = *($1)
	*($2 + [100]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = (int_64)0
	*(($2 + [24])) = (int_64)0
	*(($2 + [40])) = [0]
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*($2 + [44]) = [0]
	*(($2 + [48])) = [0]
	*(($2 + [52])) = [0]
	*($2 + [56]) = [0]
	*(($2 + [60])) = [0]
	*(($2 + [64])) = [0]
	*($2 + [68]) = [0]
	*(($2 + [72])) = [0]
	*(($2 + [76])) = [0]
	*($2 + [80]) = [0]
	*(($2 + [84])) = [0]
	*(($2 + [88])) = [0]
	*($2 + [120]) = ($1 + $0)
	*($2 + [112]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [112])
	CALL memcpy($2, $1, [8])
	*($2 + [116]) = ($1 + [8])
	CALL $34(($2 + [112]), ($2 + [8]))
	CALL $35(($2 + [112]), ($2 + [20]))
	CALL $35(($2 + [112]), ($2 + [32]))
	CALL $35(($2 + [112]), ($2 + [44]))
	CALL $35(($2 + [112]), ($2 + [56]))
	CALL $35(($2 + [112]), ($2 + [68]))
	CALL $35(($2 + [112]), ($2 + [80]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [116]) = ($2 + [96])
	*($2 + [112]) = ($2 + [108])
	CALL $36(($2 + [112]), $2)
	CALL $37($2)
	*([0] + [4]) = ($2 + [128])
	return [1]
}

void .FUNC $30 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$9 = (*([0] + [4]) - [496])
	$11 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$9 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$9 = [0]
	goto $label$1 
	
.LABEL $label$3
	$9 = ($9 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$2
	CALL read_action_data($9, $1)
	
.LABEL $label$1
	CALL $44(($11 + [104]), $9, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($9)
	
.LABEL $label$5
	*(($1 = (($11 + [280]) + [16]))) = *(($11 + [128]))
	*(($9 = (($11 + [280]) + [8]))) = *((($11 + [104]) + [16]))
	$3 = *($11 + [104])
	*($11 + [280]) = *($11 + [112])
	*(($4 = (($11 + [256]) + [16]))) = *(($11 + [152]))
	*(($5 = (($11 + [256]) + [8]))) = *(($11 + [144]))
	*($11 + [256]) = *($11 + [136])
	*(($6 = (($11 + [240]) + [8]))) = *(($11 + [168]))
	*($11 + [240]) = *($11 + [160])
	*(($7 = (($11 + [224]) + [8]))) = *(($11 + [184]))
	*($11 + [224]) = *($11 + [176])
	*(($8 = (($11 + [208]) + [8]))) = *(($11 + [200]))
	*($11 + [208]) = *($11 + [192])
	*((($11 + [384]) + [8])) = *($8)
	*((($11 + [368]) + [8])) = *($7)
	*($11 + [384]) = *($11 + [208])
	*($11 + [368]) = *($11 + [224])
	*((($11 + [352]) + [8])) = *($6)
	*($11 + [352]) = *($11 + [240])
	*((($11 + [328]) + [16])) = *($4)
	*((($11 + [328]) + [8])) = *($5)
	*($11 + [328]) = *($11 + [256])
	*((($11 + [304]) + [16])) = *($1)
	*((($11 + [304]) + [8])) = *($9)
	*($11 + [304]) = *($11 + [280])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$10 = *((*($1) + $10))
	
.LABEL $label$6
	*(($9 = (($11 + [472]) + [16]))) = *((($11 + [304]) + [16]))
	*(($2 = (($11 + [472]) + [8]))) = *((($11 + [304]) + [8]))
	*(($0 = (($11 + [448]) + [16]))) = *((($11 + [328]) + [16]))
	*(($4 = (($11 + [448]) + [8]))) = *((($11 + [328]) + [8]))
	*($11 + [472]) = *($11 + [304])
	*($11 + [448]) = *($11 + [328])
	*(($5 = (($11 + [432]) + [8]))) = *((($11 + [352]) + [8]))
	*($11 + [432]) = *($11 + [352])
	*(($6 = (($11 + [416]) + [8]))) = *((($11 + [368]) + [8]))
	*($11 + [416]) = *($11 + [368])
	*(($7 = (($11 + [400]) + [8]))) = *((($11 + [384]) + [8]))
	*($11 + [400]) = *($11 + [384])
	*((($11 + [80]) + [16])) = *($9)
	*((($11 + [80]) + [8])) = *($2)
	*($11 + [80]) = *($11 + [472])
	*((($11 + [56]) + [16])) = *($0)
	*((($11 + [56]) + [8])) = *($4)
	*($11 + [56]) = *($11 + [448])
	*((($11 + [40]) + [8])) = *($5)
	*($11 + [40]) = *($11 + [432])
	*((($11 + [24]) + [8])) = *($6)
	*($11 + [24]) = *($11 + [416])
	*((($11 + [8]) + [8])) = *($7)
	*($11 + [8]) = *($11 + [400])
	CALL void $1((int_32 $3), (int_64 ($11 + [80])), (int_32 ($11 + [56])), (int_32 ($11 + [40])), (int_32 ($11 + [24])), (int_32 ($11 + [8])), (int_32 $10))
	*([0] + [4]) = ($11 + [496])
	return [1]
}