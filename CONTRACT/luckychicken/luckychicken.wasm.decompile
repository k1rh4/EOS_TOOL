(data (i32.const 4) " g\00\00")
(data (i32.const 16) "luckybancor1\00")
(data (i32.const 32) "luckyopex111\00")
(data (i32.const 48) "luckymine111\00")
(data (i32.const 64) "cannot create objects in table of another contract\00")
(data (i32.const 128) "write\00")
(data (i32.const 144) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 208) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 272) "invalid symbol name\00")
(data (i32.const 304) "error reading iterator\00")
(data (i32.const 336) "read\00")
(data (i32.const 352) "get\00")
(data (i32.const 368) "must buy a positive amount\00")
(data (i32.const 416) "unable to find key\00")
(data (i32.const 448) "The game have been over\00")
(data (i32.const 480) "multiplication overflow\00")
(data (i32.const 512) "need at least buy one key\00")
(data (i32.const 544) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 608) "big error! can not buy these bullet amount\00")
(data (i32.const 656) "active\00")
(data (i32.const 672) "eosio.token\00")
(data (i32.const 688) "transfer\00")
(data (i32.const 704) "flow to opex pool\00")
(data (i32.const 736) "flowtoquote\00")
(data (i32.const 752) "flow to bancor pool\00")
(data (i32.const 784) "object passed to modify is not in multi_index\00")
(data (i32.const 832) "cannot modify objects in table of another contract\00")
(data (i32.const 896) "attempt to add asset with different symbol\00")
(data (i32.const 944) "addition underflow\00")
(data (i32.const 976) "addition overflow\00")
(data (i32.const 1008) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1072) "luckytoken11\00")
(data (i32.const 1088) "mined token\00")
(data (i32.const 1104) "user not found\00")
(data (i32.const 1120) "withdraw dividend\00")
(data (i32.const 1152) "reward inviter\00")
(data (i32.const 1168) "congratulations!\00")
(data (i32.const 1200) "claim airdrop\00")
(data (i32.const 1216) "attempt to subtract asset with different symbol\00")
(data (i32.const 1264) "subtraction underflow\00")
(data (i32.const 1296) "subtraction overflow\00")
(data (i32.const 1328) "The game not over yet\00")
(data (i32.const 1360) "The game have been finished\00")
(data (i32.const 1392) "onerror\00")
(data (i32.const 1408) "eosio\00")
(data (i32.const 1424) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 1488) "finish\00")
(data (i32.const 1504) "withdraw\00")
(data (i32.const 9920) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__multi3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$1))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "current_time" (func $fimport$4 (result i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "memcpy" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$13 (param i64)))
(import "env" "require_auth2" (func $fimport$14 (param i64 i64)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN7chickenC2Ey" (func $5))
(export "_ZN7chicken8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $18))
(export "_ZN7chicken3buyEyN5eosio5assetEy" (func $19))
(export "_ZN7chicken14handle_airdropEyRKNS_11game_statusERKy" (func $30))
(export "_ZN7chicken17get_bullet_amountEN5eosio5assetEy" (func $48))
(export "_ZN7chicken10calc_rangeEyy" (func $49))
(export "_ZN7chicken8safe_mulEyy" (func $50))
(export "_ZN7chicken12get_add_timeERKNS_11game_statusEy" (func $51))
(export "_ZN7chicken8withdrawEy" (func $52))
(export "_ZN7chicken5claimEy" (func $54))
(export "_ZN7chicken9get_stageEy" (func $59))
(export "_ZN7chicken6finishEv" (func $60))
(export "apply" (func $62))
(export "malloc" (func $70))
(export "free" (func $73))
(export "memcmp" (func $81))
(export "strlen" (func $82))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $83 $18 $60 $52)



void .FUNC $79 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZN7chicken8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	*([0] + [4]) = $12
	$9 = *($0)
	if ( ((int_64)$9 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [368])
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$7 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [272])
	$8 = *($4)
	$7 = CALL strlen([400])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$8 }
	$11 = $1
	if ( (CALL $78($4, [0], [-1], [400], $7) == 0) ){ goto $label$7 }
	$8 = *($4)
	
.LABEL $label$8
	if ( ($8 & [1]) ){ goto $label$10 }
	$8 = ($4 + [1])
	goto $label$9 
	
.LABEL $label$10
	$8 = *($4 + [8])
	
.LABEL $label$9
	$4 = [-1]
	
.LOOP $label$11:
	$7 = ($8 + $4)
	$5 = ($4 + [1])
	$4 = $5
	if ( *(($7 + [1])) ){ goto $label$11 }
	$6 = (CASTING uint_64)(uint_32 $5)
	$2 = (int_64)0
	$9 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$12:
	$10 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$6) ){ goto $label$13 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$4 = ($4 + [165])
	goto $label$14 
	
.LABEL $label$15
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$17 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$16 
	
.LABEL $label$17
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$16
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$12 }
	
.LABEL $label$7
	$2 = *(($3 + [8]))
	*((($12 + [16]) + [8])) = $2
	$9 = *($3)
	*(($12 + [8])) = $2
	*($12 + [16]) = $9
	*($12 + [4]) = *($12 + [20])
	*($12) = *($12 + [16])
	CALL _ZN7chicken3buyEyN5eosio5assetEy($0, $1, $12, $11)
	
.LABEL $label$1
	*([0] + [4]) = ($12 + [32])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [432])
	*([0] + [4]) = $13
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1392]
	$11 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$10 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($8)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$11 != (int_64)$2) ){ goto $label$7 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1408]
	$11 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$10 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($8)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$9
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$11 == (int_64)$1), [1424])
	
.LABEL $label$7
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [672]
	$11 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$19 }
	$3 = *($8)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$15
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$14 }
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$22 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [688]
	$11 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$28 }
	$3 = *($8)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$24
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$21 }
	
.LABEL $label$22
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$20 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1488]
	$11 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$34 }
	$3 = *($8)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$30
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$21 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1504]
	$11 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$40 }
	$3 = *($8)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$36
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$11 != (int_64)$2) ){ goto $label$20 }
	
.LABEL $label$21
	$4 = CALL _ZN7chickenC2Ey(($13 + [48]), $0)
	if ( ((int_64)$2 == (int_64)6604225611667865600) ){ goto $label$43 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$41 }
	*($13 + [44]) = [0]
	*($13 + [40]) = [1]
	*($13) = *($13 + [40])
	CALL $63($4, $13)
	goto $label$41 
	
.LABEL $label$43
	*($13 + [28]) = [0]
	*($13 + [24]) = [2]
	*($13 + [16 align=4]) = *($13 + [24])
	CALL $65($4, ($13 + [16]))
	goto $label$41 
	
.LABEL $label$42
	*($13 + [36]) = [0]
	*($13 + [32]) = [3]
	*($13 + [8 align=4]) = *($13 + [32])
	CALL $64($4, ($13 + [8]))
	
.LABEL $label$41
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$44 }
	$7 = ($4 + [76])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$46 }
	
.LOOP $label$47:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$48 }
	$6 = *($3 + [104])
	if ( ($6 == 0) ){ goto $label$49 }
	*(($3 + [108])) = $6
	CALL $75($6)
	
.LABEL $label$49
	CALL $75($3)
	
.LABEL $label$48
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$47 }
	$8 = *(($4 + [72]))
	goto $label$45 
	
.LABEL $label$46
	$8 = $5
	
.LABEL $label$45
	*($7) = $5
	CALL $75($8)
	
.LABEL $label$44
	$6 = *(($4 + [32]))
	if ( ($6 == 0) ){ goto $label$20 }
	$5 = ($4 + [36])
	$8 = *($5)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$51 }
	
.LOOP $label$52:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$53 }
	CALL $75($3)
	
.LABEL $label$53
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$52 }
	$8 = *(($4 + [32]))
	goto $label$50 
	
.LABEL $label$51
	$8 = $6
	
.LABEL $label$50
	*($5) = $6
	CALL $75($8)
	
.LABEL $label$20
	*([0] + [4]) = ($13 + [432])
}

void .FUNC _ZN7chicken3buyEyN5eosio5assetEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	int_64 $25
	int_32 $26
	$26 = (*([0] + [4]) - [320])
	*([0] + [4]) = $26
	*($26 + [248]) = $1
	CALL require_auth($1)
	$25 = (int_64)0
	$4 = ($0 + [8])
	$5 = CALL $20($4, (int_64)0, [416])
	$6 = ($0 + [48])
	$8 = CALL $21($6, *($5 + [8]), [416])
	CALL eosio_assert(((uint_64)CALL $fimport$4() <= (uint_64)*($8 + [16])), [448])
	$20 = *($2)
	CALL __multi3(($26 + [64]), $20, (int_64)$20 >> (int_64)63), (int_64)10000, (int_64)0)
	$9 = *($8 + [8])
	$22 = $9
	$23 = ((int_64)$9 + (int_64)1)
	if ( ((uint_64)$23 > (uint_64)(int_64)499999999) ){ goto $label$1 }
	$11 = *((($26 + [64]) + [8]))
	$10 = *($26 + [64])
	$12 = (int_64))((int_64)1 - $23)
	$13 = (int_64))((int_64)0 - (CASTING uint_64)(uint_32 ((uint_64)$23 > (uint_64)(int_64)1)))
	$19 = (int_64)500000000
	$16 = (($26 + [48]) + [8])
	$22 = $9
	
.LOOP $label$2:
	$21 = (int_64)0
	$20 = (uint_64)((int_64)$22 + (int_64)$19) >> (uint_64)(int_64)1
	if ( ((uint_64)$23 > (uint_64)$20)) ){ goto $label$3 }
	$21 = ((int_64)$20 + (int_64)$23)
	$21 = ((int_64)$12 + (int_64)$20)
	CALL __multi3(($26 + [48]), $21, ((int_64)$13 + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($21 <= $12)) : (uint_64)($21 <= $20) )), $21, ( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($21 <= $20)) : (uint_64)($21 <= $23) ))
	$17 = *($16)
	$21 = *($26 + [48])
	CALL eosio_assert(( ((int_64)$21 > (int_64)-1) ? [0] : (int_64)($17 == 0) ), [480])
	$21 = ((int_64)(uint_64)$21 >> (uint_64)(int_64)1) | (int_64)((int_64)$17 << (int_64)63))
	
.LABEL $label$3
	$19 = ( $20 ? $19 : $24 )
	$24 = ( ((uint_64)$21 > (uint_64)$10) ? [0] : (int_64)($11 == 0) )
	$22 = ( $22 ? $20 : $24 )
	if ( (uint_64)(((int_64)$22 + (int_64)1) <= $19) ){ goto $label$2 }
	
.LABEL $label$1
	$20 = (int_64)
	*($26 + [240]) = $20($22 - $9))
	CALL eosio_assert(((int_64)$20 != (int_64)0), [512])
	$20 = ((int_64)$20 + (int_64)$19)
	$19 = *(($8 + [8]))
	$22 = ((int_64)$19 + (int_64)1)
	if ( ((uint_64)$22 > (uint_64)$20) ){ goto $label$4 }
	$19 = ((int_64)$20 + (int_64)$22)
	$21 = (int_64)
	$19 = ((int_64)$21((int_64)1 - $22)) + (int_64)$20
	CALL __multi3(($26 + [32]), $19), (int_64))(( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($19 <= $21)) : (uint_64)($19 <= $20) ) - (CASTING uint_64)(uint_32 ((uint_64)$22 > (uint_64)(int_64)1))), $19, ( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($19 <= $20)) : (uint_64)($19 <= $22) ))
	$22 = *(($26 + [40]))
	$20 = *($26 + [32])
	CALL eosio_assert(( ((int_64)$20 > (int_64)-1) ? [0] : (int_64)($22 == 0) ), [480])
	$25 = ((int_64)(uint_64)$20 >> (uint_64)(int_64)1) | (int_64)((int_64)$22 << (int_64)63))
	
.LABEL $label$4
	$7 = ($5 + [8])
	CALL eosio_assert([1], [208])
	$22 = ((uint_64)$25 / (uint_64)(int_64)10000)
	$20 = (int_64)5459781
	$24 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$16 = [0]
	
.LABEL $label$5
	CALL eosio_assert($16, [272])
	CALL eosio_assert(((int_64)1397703940 == (int_64)*(($2 + [8]))), [544])
	CALL eosio_assert(((int_64)$22 <= (int_64)*($2)), [608])
	$24 = [0]
	*(($26 + [232])) = [0]
	*($26 + [216]) = (int_64)-1
	$20 = *($0)
	*($26 + [200]) = $20
	*($26 + [208]) = $1
	*($26 + [224]) = (int_64)0
	$16 = CALL db_lowerbound_i64($20, $1, (int_64)-3020376800875249664, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$11 }
	CALL $22(($26 + [200]), $16)
	goto $label$10 
	
.LABEL $label$11
	*($26 + [152]) = $5
	*($26 + [112]) = $1
	CALL eosio_assert(((int_64)$20 == (int_64)CALL $fimport$3()), [64])
	*($26 + [260]) = ($26 + [152])
	*($26 + [256]) = ($26 + [200])
	*($26 + [264]) = ($26 + [112])
	*(($18 = CALL $74([64])) + [40]) = (int_64)1397703940
	*($18 + [32]) = (int_64)0
	CALL eosio_assert([1], [208])
	$20 = (int_64)5459781
	
.LOOP $label$13:
	$16 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	CALL eosio_assert($16, [272])
	*($18 + [48]) = ($26 + [200])
	CALL $23(($26 + [256]), $18)
	*($26 + [184]) = $18
	$20 = *($18)
	*($26 + [256]) = $20
	$16 = *($18 + [52])
	*($26 + [168]) = $16
	$14 = ($26 + [228])
	$24 = *($14)
	if ( ((uint_32)$24 >= (uint_32)*(($26 + [232]))) ){ goto $label$17 }
	*($24 + [8]) = $20
	*($24 + [16]) = $16
	*($26 + [184]) = [0]
	*($24) = $18
	*($14) = ($24 + [24])
	goto $label$16 
	
.LABEL $label$17
	CALL $24(($26 + [224]), ($26 + [184]), ($26 + [256]), ($26 + [168]))
	
.LABEL $label$16
	$24 = *($26 + [184])
	*($26 + [184]) = [0]
	if ( ($24 == 0) ){ goto $label$10 }
	CALL $75($24)
	
.LABEL $label$10
	$14 = CALL $25(($26 + [200]), *($7), [416])
	if ( ((int_64)*($26 + [248]) != (int_64)$3) ){ goto $label$19 }
	$21 = (int_64)0
	goto $label$18 
	
.LABEL $label$19
	*(($26 + [288])) = [0]
	*($26 + [272]) = (int_64)-1
	$20 = *($0)
	*($26 + [256]) = $20
	*($26 + [264]) = $3
	$21 = (int_64)0
	*($26 + [280]) = (int_64)0
	$24 = CALL db_lowerbound_i64($20, $3, (int_64)-3020376800875249664, (int_64)0)
	if ( ((int_32)$24 <= (int_32)[-1]) ){ goto $label$21 }
	$21 = *(CALL $22(($26 + [256]), $24) + [24])
	$18 = *($26 + [280])
	if ( $18 ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$3 = *($26 + [248])
	$18 = *($26 + [280])
	if ( ($18 == 0) ){ goto $label$18 }
	
.LABEL $label$20
	$15 = ($26 + [284])
	$24 = *($15)
	if ( ((int_32)$24 == (int_32)$18) ){ goto $label$23 }
	
.LOOP $label$24:
	$24 = ($24 + [-24])
	$16 = *($24)
	*($24) = [0]
	if ( ($16 == 0) ){ goto $label$25 }
	CALL $75($16)
	
.LABEL $label$25
	if ( ((int_32)$18 != (int_32)$24) ){ goto $label$24 }
	$24 = *(($26 + [280]))
	goto $label$22 
	
.LABEL $label$23
	$24 = $18
	
.LABEL $label$22
	*($15) = $18
	CALL $75($24)
	
.LABEL $label$18
	*($26 + [192]) = (int_64)1397703940
	$22 = *($2)
	$20 = ((int_64)((int_64)$22 * (int_64)53) / (int_64)100)
	*($26 + [184]) = $20
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$20 = (int_64)5459781
	$24 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$16 = [0]
	
.LABEL $label$26
	CALL eosio_assert($16, [272])
	*($26 + [176]) = (int_64)1397703940
	$20 = ((int_64)$22 / (int_64)25)
	*($26 + [168]) = $20
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$20 = (int_64)5459781
	$24 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$16 = [0]
	
.LABEL $label$31
	CALL eosio_assert($16, [272])
	CALL eosio_assert([1], [208])
	$20 = (int_64)5459781
	$24 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$16 = [0]
	
.LABEL $label$36
	CALL eosio_assert($16, [272])
	CALL eosio_assert([1], [208])
	$20 = (int_64)5459781
	$19 = (int_64)1397703936
	$24 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	
.LOOP $label$45:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$42 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$45 }
	
.LABEL $label$44
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$16 = [0]
	
.LABEL $label$41
	CALL eosio_assert($16, [272])
	if ( ((int_64)$3 != (int_64)*($26 + [248])) ){ goto $label$58 }
	$17 = ((int_64)((int_64)$22 * (int_64)30) / (int_64)100)
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$20 = (int_64)5459781
	$21 = (int_64)1397703936
	$24 = [0]
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$60 }
	
.LOOP $label$61:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$57 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$61 }
	
.LABEL $label$60
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$59 }
	goto $label$56 
	
.LABEL $label$58
	if ( ((uint_64)$21 <= (uint_64)(int_64)499999) ){ goto $label$55 }
	$17 = ((int_64)$22 / (int_64)5)
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$20 = (int_64)5459781
	$21 = (int_64)1397703936
	$24 = [0]
	
.LOOP $label$62:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$54 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$63 }
	
.LOOP $label$64:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$64 }
	
.LABEL $label$63
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$62 }
	goto $label$53 
	
.LABEL $label$57
	$16 = [0]
	
.LABEL $label$56
	CALL eosio_assert($16, [272])
	$11 = (int_64)0
	goto $label$46 
	
.LABEL $label$55
	$17 = ((int_64)$22 / (int_64)4)
	CALL eosio_assert((uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$20 = (int_64)5459781
	$21 = (int_64)1397703936
	$24 = [0]
	
.LOOP $label$65:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$66 }
	
.LOOP $label$67:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$67 }
	
.LABEL $label$66
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$65 }
	goto $label$51 
	
.LABEL $label$54
	$16 = [0]
	
.LABEL $label$53
	CALL eosio_assert($16, [272])
	$11 = ((int_64)*($2) / (int_64)10)
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$20 = (int_64)5459781
	$19 = (int_64)1397703936
	$24 = [0]
	
.LOOP $label$68:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$69 }
	
.LOOP $label$70:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$50 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$70 }
	
.LABEL $label$69
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$68 }
	goto $label$49 
	
.LABEL $label$52
	$16 = [0]
	
.LABEL $label$51
	CALL eosio_assert($16, [272])
	$11 = ((int_64)*($2) / (int_64)20)
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$20 = (int_64)5459781
	$19 = (int_64)1397703936
	$24 = [0]
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$72 }
	
.LOOP $label$73:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$48 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$73 }
	
.LABEL $label$72
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$71 }
	goto $label$47 
	
.LABEL $label$50
	$16 = [0]
	
.LABEL $label$49
	CALL eosio_assert($16, [272])
	goto $label$46 
	
.LABEL $label$48
	$16 = [0]
	
.LABEL $label$47
	CALL eosio_assert($16, [272])
	
.LABEL $label$46
	$22 = *($2)
	$10 = ((int_64)$22 / (int_64)20)
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$13 = ((int_64)$19 | (int_64)4)
	$12 = ((int_64)$21 | (int_64)4)
	$20 = (int_64)5459781
	$24 = [0]
	
.LOOP $label$76:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$75 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$77 }
	
.LOOP $label$78:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$75 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$78 }
	
.LABEL $label$77
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$76 }
	goto $label$74 
	
.LABEL $label$75
	$16 = [0]
	
.LABEL $label$74
	CALL eosio_assert($16, [272])
	*($26 + [160]) = (int_64)1397703940
	$20 = ((int_64)((int_64)$22 << (int_64)3) / (int_64)100)
	*($26 + [152]) = $20
	CALL eosio_assert((uint_64)(((int_64)$20 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$20 = (int_64)5459781
	$24 = [0]
	
.LOOP $label$81:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$80 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$82 }
	
.LOOP $label$83:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$80 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$83 }
	
.LABEL $label$82
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$81 }
	goto $label$79 
	
.LABEL $label$80
	$16 = [0]
	
.LABEL $label$79
	CALL eosio_assert($16, [272])
	$23 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$24 = [656]
	$21 = (int_64)0
	
.LOOP $label$84:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$89 }
	$16 = *($24)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$88 }
	$16 = ($16 + [165])
	goto $label$87 
	
.LABEL $label$89
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$88
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$87
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$86
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$85
	$24 = ($24 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$84 }
	*($26 + [104]) = $21
	*($26 + [96]) = $23
	$20 = (int_64)0
	$19 = (int_64)59
	$24 = [672]
	$21 = (int_64)0
	
.LOOP $label$90:
	if ( ((uint_64)$20 > (uint_64)(int_64)10) ){ goto $label$95 }
	$16 = *($24)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$94 }
	$16 = ($16 + [165])
	goto $label$93 
	
.LABEL $label$95
	$22 = (int_64)0
	if ( ((int_64)$20 == (int_64)11) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$94
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$93
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$92
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$91
	$24 = ($24 + [1])
	$19 = ((int_64)$19 + (int_64)-5)
	$21 = ((int_64)$22 | (int_64)$21)
	$20 = ((int_64)$20 + (int_64)1)
	if ( ((int_64)$20 != (int_64)13) ){ goto $label$90 }
	$20 = (int_64)0
	$19 = (int_64)59
	$24 = [688]
	$23 = (int_64)0
	
.LOOP $label$96:
	if ( ((uint_64)$20 > (uint_64)(int_64)7) ){ goto $label$101 }
	$16 = *($24)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$100 }
	$16 = ($16 + [165])
	goto $label$99 
	
.LABEL $label$101
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$100
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$99
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$98
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$97
	$24 = ($24 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$23 = ((int_64)$22 | (int_64)$23)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$96 }
	*(($26 + [88])) = [0]
	*($26 + [80]) = (int_64)0
	$24 = CALL strlen([704])
	if ( ((uint_32)$24 >= (uint_32)[-16]) ){ goto $label$104 }
	if ( ((uint_32)$24 >= (uint_32)[11]) ){ goto $label$107 }
	*($26 + [80]) = ($24 << [1])
	$16 = (($26 + [80]) | [1])
	if ( $24 ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$107
	$18 = (($24 + [16]) & [-16])
	$16 = CALL $74($18)
	*($26 + [80]) = ($18 | [1])
	*($26 + [88]) = $16
	*($26 + [84]) = $24
	
.LABEL $label$106
	CALL memcpy($16, [704], $24)
	
.LABEL $label$105
	*(($16 + $24)) = [0]
	*(($26 + [280])) = (int_64)1397703940
	*($26 + [264]) = *(($0 + [368]))
	$24 = ($26 + [88])
	*(($26 + [296])) = *($24)
	*($26 + [256]) = *($0)
	*($26 + [272]) = $10
	*($26 + [288]) = *($26 + [80])
	*($26 + [80]) = [0]
	*($26 + [84]) = [0]
	*($24) = [0]
	$24 = CALL $26(($26 + [112]), ($26 + [96]), $21, $23, ($26 + [256]))
	CALL $27(($26 + [304]), $24)
	$16 = *($26 + [304])
	CALL send_inline($16, (*($26 + [308]) - $16))
	$16 = *($26 + [304])
	if ( ($16 == 0) ){ goto $label$108 }
	*($26 + [308]) = $16
	CALL $75($16)
	
.LABEL $label$108
	$16 = *($24 + [28])
	if ( ($16 == 0) ){ goto $label$109 }
	*(($24 + [32])) = $16
	CALL $75($16)
	
.LABEL $label$109
	$16 = *($24 + [16])
	if ( ($16 == 0) ){ goto $label$110 }
	*(($24 + [20])) = $16
	CALL $75($16)
	
.LABEL $label$110
	if ( ((*(($26 + [288])) & [1]) == 0) ){ goto $label$111 }
	CALL $75(*(($26 + [296])))
	
.LABEL $label$111
	if ( ((*($26 + [80]) & [1]) == 0) ){ goto $label$112 }
	CALL $75(*(($26 + [88])))
	
.LABEL $label$112
	$23 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$24 = [656]
	$21 = (int_64)0
	
.LOOP $label$113:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$118 }
	$16 = *($24)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$117 }
	$16 = ($16 + [165])
	goto $label$116 
	
.LABEL $label$118
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$115 }
	goto $label$114 
	
.LABEL $label$117
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$116
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$115
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$114
	$24 = ($24 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$113 }
	*($26 + [104]) = $21
	*($26 + [96]) = $23
	$23 = *($0 + [360])
	$20 = (int_64)0
	$19 = (int_64)59
	$24 = [736]
	$21 = (int_64)0
	
.LOOP $label$119:
	if ( ((uint_64)$20 > (uint_64)(int_64)10) ){ goto $label$124 }
	$16 = *($24)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$123 }
	$16 = ($16 + [165])
	goto $label$122 
	
.LABEL $label$124
	$22 = (int_64)0
	if ( ((int_64)$20 == (int_64)11) ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$123
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$122
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$121
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$120
	$24 = ($24 + [1])
	$19 = ((int_64)$19 + (int_64)-5)
	$21 = ((int_64)$22 | (int_64)$21)
	$20 = ((int_64)$20 + (int_64)1)
	if ( ((int_64)$20 != (int_64)13) ){ goto $label$119 }
	*(($26 + [88])) = [0]
	*($26 + [80]) = (int_64)0
	$24 = CALL strlen([752])
	if ( ((uint_32)$24 >= (uint_32)[-16]) ){ goto $label$103 }
	if ( ((uint_32)$24 >= (uint_32)[11]) ){ goto $label$127 }
	*($26 + [80]) = ($24 << [1])
	$16 = (($26 + [80]) | [1])
	if ( $24 ){ goto $label$126 }
	goto $label$125 
	
.LABEL $label$127
	$18 = (($24 + [16]) & [-16])
	$16 = CALL $74($18)
	*($26 + [80]) = ($18 | [1])
	*($26 + [88]) = $16
	*($26 + [84]) = $24
	
.LABEL $label$126
	CALL memcpy($16, [752], $24)
	
.LABEL $label$125
	*(($16 + $24)) = [0]
	*(($26 + [128])) = $12
	*(($26 + [140])) = *($26 + [84])
	*($26 + [120]) = $17
	$24 = ($26 + [88])
	*(($26 + [144])) = *($24)
	*($26 + [112]) = *($0)
	*($26 + [136]) = *($26 + [80])
	*($26 + [80]) = [0]
	*($26 + [84]) = [0]
	*($24) = [0]
	$24 = CALL $28(($26 + [256]), ($26 + [96]), $23, $21, ($26 + [112]))
	CALL $27(($26 + [304]), $24)
	$16 = *($26 + [304])
	CALL send_inline($16, (*($26 + [308]) - $16))
	$16 = *($26 + [304])
	if ( ($16 == 0) ){ goto $label$128 }
	*($26 + [308]) = $16
	CALL $75($16)
	
.LABEL $label$128
	$16 = *($24 + [28])
	if ( ($16 == 0) ){ goto $label$129 }
	*(($24 + [32])) = $16
	CALL $75($16)
	
.LABEL $label$129
	$16 = *($24 + [16])
	if ( ($16 == 0) ){ goto $label$130 }
	*(($24 + [20])) = $16
	CALL $75($16)
	
.LABEL $label$130
	if ( ((*(($26 + [136])) & [1]) == 0) ){ goto $label$131 }
	CALL $75(*(($26 + [144])))
	
.LABEL $label$131
	if ( ((*($26 + [80]) & [1]) == 0) ){ goto $label$132 }
	CALL $75(*(($26 + [88])))
	
.LABEL $label$132
	if ( ((int_64)$11 < (int_64)1) ){ goto $label$133 }
	$24 = [0]
	*(($26 + [144])) = [0]
	*($26 + [128]) = (int_64)-1
	$20 = *($0)
	*($26 + [112]) = $20
	*($26 + [120]) = $3
	*($26 + [136]) = (int_64)0
	$16 = CALL db_lowerbound_i64($20, $3, (int_64)-3020376800875249664, (int_64)0)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$134 }
	$24 = CALL $22(($26 + [112]), $16)
	
.LABEL $label$134
	CALL eosio_assert(((int_32)*($24 + [48]) == (int_32)($26 + [112])), [784])
	CALL eosio_assert(((int_64)*($26 + [112]) == (int_64)CALL $fimport$3()), [832])
	$20 = *($24)
	CALL eosio_assert(((int_64)$13 == (int_64)*(($24 + [40]))), [896])
	$22 = ((int_64)*($24 + [32]) + (int_64)$11)
	*($24 + [32]) = $22
	CALL eosio_assert(((int_64)$22 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($24 + [32]) < (int_64)4611686018427387904), [976])
	*($24 + [24]) = ((int_64)*($24 + [24]) + (int_64)*($26 + [240]))
	CALL eosio_assert(((int_64)$20 == (int_64)*($24)), [1008])
	*($26 + [104]) = (($26 + [256]) + [48])
	*($26 + [100]) = ($26 + [256])
	*($26 + [96]) = ($26 + [256])
	CALL $29(($26 + [96]), $24)
	CALL db_update_i64(*($24 + [52]), (int_64)0, ($26 + [256]), [48])
	$24 = ($26 + [128])
	if ( (uint_64)($20 <= *($24)) ){ goto $label$135 }
	*($24) = ( (int_64)-2 ? ((int_64)$20 + (int_64)1) : ((uint_64)$20 > (uint_64)(int_64)-3) )
	
.LABEL $label$135
	$18 = *($26 + [136])
	if ( ($18 == 0) ){ goto $label$133 }
	$15 = ($26 + [140])
	$24 = *($15)
	if ( ((int_32)$24 == (int_32)$18) ){ goto $label$137 }
	
.LOOP $label$138:
	$24 = ($24 + [-24])
	$16 = *($24)
	*($24) = [0]
	if ( ($16 == 0) ){ goto $label$139 }
	CALL $75($16)
	
.LABEL $label$139
	if ( ((int_32)$18 != (int_32)$24) ){ goto $label$138 }
	$24 = *(($26 + [136]))
	goto $label$136 
	
.LABEL $label$137
	$24 = $18
	
.LABEL $label$136
	*($15) = $18
	CALL $75($24)
	
.LABEL $label$133
	CALL _ZN7chicken14handle_airdropEyRKNS_11game_statusERKy($0, *($26 + [248]), $8, ($26 + [240]))
	$20 = (int_64)
	$19 = *($26 + [240])
	$11 = ( $19 ? $20((int_64)100000000 - *($5 + [16]))) : (uint_64)($19 <= $20) 
	if ( (int_64)($11) == 0) ){ goto $label$140 }
	CALL __multi3(($26 + [16]), $11, (int_64)0, (int_64)10000, (int_64)0)
	$10 = *($26 + [16])
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? [0] : (int_64)(*(($26 + [24])) == 0) ), [480])
	$12 = *($0 + [96])
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$20 = (uint_64)$12 >> (uint_64)(int_64)8)
	$24 = [0]
	
.LOOP $label$143:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$142 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$144 }
	
.LOOP $label$145:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$142 }
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$145 }
	
.LABEL $label$144
	$16 = [1]
	$24 = ($24 + [1])
	if ( ((int_32)$24 < (int_32)[7]) ){ goto $label$143 }
	goto $label$141 
	
.LABEL $label$142
	$16 = [0]
	
.LABEL $label$141
	CALL eosio_assert($16, [272])
	$23 = *($0 + [376])
	$20 = (int_64)0
	$19 = (int_64)59
	$24 = [656]
	$21 = (int_64)0
	
.LOOP $label$146:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$151 }
	$16 = *($24)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$150 }
	$16 = ($16 + [165])
	goto $label$149 
	
.LABEL $label$151
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$148 }
	goto $label$147 
	
.LABEL $label$150
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$149
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$148
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$147
	$24 = ($24 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$146 }
	*($26 + [104]) = $21
	*($26 + [96]) = $23
	$20 = (int_64)0
	$22 = (int_64)59
	$24 = [1072]
	$21 = (int_64)0
	
.LOOP $label$152:
	$19 = (int_64)0
	if ( ((uint_64)$20 > (uint_64)(int_64)11) ){ goto $label$153 }
	$16 = *($24)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$155 }
	$16 = ($16 + [165])
	goto $label$154 
	
.LABEL $label$155
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$154
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$153
	$24 = ($24 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$19 | (int_64)$21)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$152 }
	$20 = (int_64)0
	$19 = (int_64)59
	$24 = [688]
	$23 = (int_64)0
	
.LOOP $label$156:
	if ( ((uint_64)$20 > (uint_64)(int_64)7) ){ goto $label$161 }
	$16 = *($24)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$160 }
	$16 = ($16 + [165])
	goto $label$159 
	
.LABEL $label$161
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$158 }
	goto $label$157 
	
.LABEL $label$160
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$159
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$158
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$157
	$24 = ($24 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$23 = ((int_64)$22 | (int_64)$23)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$156 }
	*(($26 + [88])) = [0]
	*($26 + [80]) = (int_64)0
	$24 = CALL strlen([1088])
	if ( ((uint_32)$24 >= (uint_32)[-16]) ){ goto $label$102 }
	if ( ((uint_32)$24 >= (uint_32)[11]) ){ goto $label$164 }
	*($26 + [80]) = ($24 << [1])
	$16 = (($26 + [80]) | [1])
	if ( $24 ){ goto $label$163 }
	goto $label$162 
	
.LABEL $label$164
	$18 = (($24 + [16]) & [-16])
	$16 = CALL $74($18)
	*($26 + [80]) = ($18 | [1])
	*($26 + [88]) = $16
	*($26 + [84]) = $24
	
.LABEL $label$163
	CALL memcpy($16, [1088], $24)
	
.LABEL $label$162
	*(($16 + $24)) = [0]
	*(($26 + [280])) = $12
	*($26 + [256]) = *(($0 + [376]))
	*($26 + [264]) = *($26 + [248])
	$24 = ($26 + [88])
	*(($26 + [296])) = *($24)
	*($26 + [272]) = $10
	*($26 + [288]) = *($26 + [80])
	*($26 + [80]) = [0]
	*($26 + [84]) = [0]
	*($24) = [0]
	$24 = CALL $26(($26 + [112]), ($26 + [96]), $21, $23, ($26 + [256]))
	CALL $27(($26 + [304]), $24)
	$16 = *($26 + [304])
	CALL send_inline($16, (*($26 + [308]) - $16))
	$16 = *($26 + [304])
	if ( ($16 == 0) ){ goto $label$165 }
	*($26 + [308]) = $16
	CALL $75($16)
	
.LABEL $label$165
	$16 = *($24 + [28])
	if ( ($16 == 0) ){ goto $label$166 }
	*(($24 + [32])) = $16
	CALL $75($16)
	
.LABEL $label$166
	$16 = *($24 + [16])
	if ( ($16 == 0) ){ goto $label$167 }
	*(($24 + [20])) = $16
	CALL $75($16)
	
.LABEL $label$167
	if ( ((*(($26 + [288])) & [1]) == 0) ){ goto $label$168 }
	CALL $75(*(($26 + [296])))
	
.LABEL $label$168
	if ( ((*($26 + [80]) & [1]) == 0) ){ goto $label$169 }
	CALL $75(*(($26 + [88])))
	
.LABEL $label$169
	$19 = *($26 + [240])
	
.LABEL $label$140
	$15 = ($5 + [16])
	$24 = ($0 + [192])
	$22 = ((int_64)*(($8 + [8])) + (int_64)1)
	$20 = (int_64)0
	
.LOOP $label$171:
	$16 = ($24 + [8])
	if ( ((uint_64)$20 > (uint_64)(int_64)4) ){ goto $label$170 }
	$20 = ((int_64)$20 + (int_64)1)
	$18 = ($24 + [-80])
	$24 = $16
	if ( (uint_64)(*($18) <= $22) ){ goto $label$171 }
	
.LABEL $label$170
	CALL __multi3($26, *($16), (int_64)0, $19, (int_64)0)
	$20 = *($26)
	CALL eosio_assert(( (uint_64)($20 <= (int_64)4611686018427387904) ? [0] : (int_64)(*(($26 + [8])) == 0) ), [480])
	*($26 + [112]) = $20
	*($26 + [260]) = $8
	*($26 + [256]) = $0
	*($26 + [264]) = ($26 + [240])
	CALL $31(($26 + [200]), $14, ($26 + [256]))
	*($26 + [260]) = $0
	*($26 + [280]) = $2
	*($26 + [256]) = ($26 + [240])
	*($26 + [264]) = ($26 + [112])
	*($26 + [268]) = ($26 + [184])
	*($26 + [272]) = ($26 + [168])
	*($26 + [276]) = ($26 + [152])
	*($26 + [284]) = ($26 + [248])
	CALL $32($6, $8, ($26 + [256]))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [784])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [832])
	*(($24 = ($5 + [16]))) = ((int_64)*($24) + (int_64)$11)
	$20 = *($5)
	CALL eosio_assert([1], [1008])
	CALL eosio_assert([1], [128])
	CALL memcpy(($26 + [256]), $5, [8])
	CALL eosio_assert([1], [128])
	CALL memcpy((($26 + [256]) | [8]), $7, [8])
	CALL eosio_assert([1], [128])
	CALL memcpy((($26 + [256]) + [16]), $15, [8])
	CALL db_update_i64(*($5 + [28]), (int_64)0, ($26 + [256]), [24])
	$24 = ($0 + [24])
	if ( (uint_64)($20 <= *($24)) ){ goto $label$172 }
	*($24) = ( (int_64)-2 ? ((int_64)$20 + (int_64)1) : ((uint_64)$20 > (uint_64)(int_64)-3) )
	
.LABEL $label$172
	$18 = *($26 + [224])
	if ( ($18 == 0) ){ goto $label$173 }
	$0 = ($26 + [228])
	$24 = *($0)
	if ( ((int_32)$24 == (int_32)$18) ){ goto $label$175 }
	
.LOOP $label$176:
	$24 = ($24 + [-24])
	$16 = *($24)
	*($24) = [0]
	if ( ($16 == 0) ){ goto $label$177 }
	CALL $75($16)
	
.LABEL $label$177
	if ( ((int_32)$18 != (int_32)$24) ){ goto $label$176 }
	$24 = *(($26 + [224]))
	goto $label$174 
	
.LABEL $label$175
	$24 = $18
	
.LABEL $label$174
	*($0) = $18
	CALL $75($24)
	
.LABEL $label$173
	*([0] + [4]) = ($26 + [320])
	return (unreachable)
	
.LABEL $label$104
	CALL $76(($26 + [80]))
	
.LABEL $label$103
	CALL $76(($26 + [80]))
	
.LABEL $label$102
	CALL $76(($26 + [80]))
	(unreachable)
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $74(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $75($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $76 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $68(*($1), ($0 + [32]))
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [128])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [128])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [128])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [128])
	CALL memcpy(*($4), ($7 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9900])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9708]
	$1 = (((int_32)$2 * (int_32)[12]) + [9708])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $80(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $80(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $75(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $75(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $74([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $42($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [128])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [128])
	CALL memcpy($6, ($4 + [8]), [8])
	$6 = ($8 + [16])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [128])
	CALL memcpy($6, ($4 + [16]), [8])
	*($9 + [4]) = ($8 + [24])
	CALL $43($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$0), [144])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4831559083021479936, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $8($0, $5)
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$0), [144])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [144])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159550573573504, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $6($0, $5)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$0), [144])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	$4 = *(*($0 + [4]))
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1) = *(($4 + [8]))
	$2 = *($0)
	CALL eosio_assert([1], [208])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [272])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)0
	$5 = $7
	$4 = ($5 + [-48])
	*([0] + [4]) = $4
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = $5
	CALL $29($6, $1)
	$3 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-3020376800875249664, *(*($0 + [8])), $3, $4, [48])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [304])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $74([64])) + [40]) = (int_64)1397703940
	*($4 + [32]) = (int_64)0
	CALL eosio_assert([1], [208])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [272])
	*($4 + [48]) = $0
	CALL $47(($8 + [32]), $4)
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $24($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $75($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $25 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [144])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3020376800875249664, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $22($0, $5)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$0), [144])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $75($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $42($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [128])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [128])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $45(CALL $44($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $74([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $42($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $46(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10012])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_64 .FUNC _ZN7chicken10calc_rangeEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$4 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)$2) ){ goto $label$1 }
	$4 = ((int_64)$2 + (int_64)$1)
	$3 = (int_64)
	$4 = ((int_64)$3((int_64)1 - $1)) + (int_64)$2
	CALL __multi3($5, $4), (int_64))(( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($4 <= $3)) : (uint_64)($4 <= $2) ) - (CASTING uint_64)(uint_32 ((uint_64)$1 > (uint_64)(int_64)1))), $4, ( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($4 <= $2)) : (uint_64)($4 <= $1) ))
	$2 = *(($5 + [8]))
	$1 = *($5)
	CALL eosio_assert(( ((int_64)$1 > (int_64)-1) ? [0] : (int_64)($2 == 0) ), [480])
	$4 = ((int_64)(uint_64)$1 >> (uint_64)(int_64)1) | (int_64)((int_64)$2 << (int_64)63))
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
	return $4
}

int_64 .FUNC _ZN7chicken17get_bullet_amountEN5eosio5assetEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	$7 = *($1)
	CALL __multi3(($14 + [16]), $7, (int_64)$7 >> (int_64)63), (int_64)10000, (int_64)0)
	$13 = $2
	$4 = ((int_64)$2 + (int_64)1)
	if ( ((uint_64)$4 > (uint_64)(int_64)499999999) ){ goto $label$1 }
	$3 = *($14 + [16])
	$5 = (int_64))((int_64)1 - $4)
	$6 = (int_64))((int_64)0 - (CASTING uint_64)(uint_32 ((uint_64)$4 > (uint_64)(int_64)1)))
	$11 = (int_64)500000000
	$10 = (int_64)(*((($14 + [16]) + [8])) == 0)
	$8 = ($14 + [8])
	$13 = $2
	
.LOOP $label$2:
	$12 = (int_64)0
	$7 = (uint_64)((int_64)$11 + (int_64)$13) >> (uint_64)(int_64)1
	if ( ((uint_64)$4 > (uint_64)$7)) ){ goto $label$3 }
	$12 = ((int_64)$7 + (int_64)$4)
	$12 = ((int_64)$5 + (int_64)$7)
	CALL __multi3($14, $12, ((int_64)$6 + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($12 <= $5)) : (uint_64)($12 <= $7) )), $12, ( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($12 <= $7)) : (uint_64)($12 <= $4) ))
	$9 = *($8)
	$12 = *($14)
	CALL eosio_assert(( ((int_64)$12 > (int_64)-1) ? [0] : (int_64)($9 == 0) ), [480])
	$12 = ((int_64)(uint_64)$12 >> (uint_64)(int_64)1) | (int_64)((int_64)$9 << (int_64)63))
	
.LABEL $label$3
	$11 = ( $7 ? $11 : $1 )
	$1 = ( ((uint_64)$12 > (uint_64)$3) ? [0] : $10 )
	$13 = ( $13 ? $7 : $1 )
	if ( (uint_64)(((int_64)$13 + (int_64)1) <= $11) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [32])
	return (int_64))($13 - $2)
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [352])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $42($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [336])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $69($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $77($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $74($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $77($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $75($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $76($7)
	return (unreachable)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $74($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [128])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [128])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $74($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $79($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $75($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ((int_32)($6 - $5) / (int_32)[24])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$2 = ((int_32)($2 - $5) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $74(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [24])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $79($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$6 * (int_32)[24]))
	$5 = ($2 + ((int_32)$3 * (int_32)[24]))
	$6 = $5
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $75($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [352])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $41($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [336])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [336])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [336])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [128])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [128])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [128])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [128])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $43(*($1), ($0 + [32]))
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [128])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [128])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [128])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [128])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [128])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10006]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10008])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10006]) = [1]
	$7 = ($7 << [16])
	*([0] + [10008]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10008])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10008]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10006]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10006]) = [1]
	$3 = ($3 << [16])
	*([0] + [10008]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10008])
	
.LABEL $label$8
	*([0] + [10008]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_64 .FUNC _ZN7chicken12get_add_timeERKNS_11game_statusEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$0 = ($0 + [192])
	$3 = ((int_64)*($1 + [8]) + (int_64)1)
	$5 = (int_64)0
	
.LOOP $label$2:
	$1 = ($0 + [8])
	if ( ((uint_64)$5 > (uint_64)(int_64)4) ){ goto $label$1 }
	$5 = ((int_64)$5 + (int_64)1)
	$4 = ($0 + [-80])
	$0 = $1
	if ( (uint_64)(*($4) <= $3) ){ goto $label$2 }
	
.LABEL $label$1
	CALL __multi3($6, *($1), (int_64)0, $2, (int_64)0)
	$5 = *($6)
	CALL eosio_assert(( (uint_64)($5 <= (int_64)4611686018427387904) ? [0] : (int_64)(*(($6 + [8])) == 0) ), [480])
	*([0] + [4]) = ($6 + [16])
	return $5
}

void .FUNC $83 ()
{
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $71([1516], $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $75 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC _ZN7chicken6finishEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [176])
	*([0] + [4]) = $12
	$1 = ($0 + [48])
	$2 = CALL $21($1, *(CALL $20(($0 + [8]), (int_64)0, [416]) + [8]), [416])
	CALL eosio_assert(((uint_64)CALL $fimport$4() > (uint_64)*($2 + [16])), [1328])
	CALL eosio_assert((int_64)(*($2 + [128]) == 0), [1360])
	$8 = *($2 + [8])
	$7 = ($0 + [112])
	$9 = (int_64)-1
	
.LOOP $label$2:
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$1 }
	$11 = *($7)
	$7 = ($7 + [8])
	if ( (uint_64)($11 <= $8) ){ goto $label$2 }
	
.LABEL $label$1
	$11 = (int_64)0
	*($12 + [152]) = (int_64)0
	$10 = ( (int_64)0 ? (int_64)320000000 : (int_64)($9 == 0) )
	$10 = ( ((int_64)$10 + (int_64)320000000) ? $10 : ((uint_64)$9 > (uint_64)(int_64)1) )
	$10 = ( ((int_64)$10 + (int_64)320000000) ? $10 : ((uint_64)$9 > (uint_64)(int_64)2) )
	$10 = ( ((int_64)$10 + (int_64)320000000) ? $10 : ((uint_64)$9 > (uint_64)(int_64)3) )
	if ( (uint_64)($9 <= (int_64)5) ){ goto $label$3 }
	$10 = ((int_64)$10 + (int_64)320000000)
	$9 = (int_64)0
	$8 = (int_64)
	if ( (uint_64)($8($8 - ((uint_64)$8 % (uint_64)(int_64)100000))) <= (int_64)31000001) ){ goto $label$4 }
	$9 = ((int_64)$8 + (int_64)31000001)
	$9 = ((int_64)$8 + (int_64)-31000000)
	CALL __multi3(($12 + [24]), $9, ((int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($9 <= $8)) : (uint_64)($9 <= (int_64)-31000000) ) + (int_64)-1), $9, ( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($9 <= $8)) : (uint_64)($9 <= (int_64)31000001) ))
	$8 = *(($12 + [32]))
	$9 = *($12 + [24])
	CALL eosio_assert(( ((int_64)$9 > (int_64)-1) ? [0] : (int_64)($8 == 0) ), [480])
	$9 = ((int_64)(uint_64)$9 >> (uint_64)(int_64)1) | (int_64)((int_64)$8 << (int_64)63))
	
.LABEL $label$4
	CALL eosio_assert((uint_64)($9 <= (int_64)1152921504606846976), [480])
	$10 = ((int_64)$10 + (int_64)((uint_64)((int_64)$9 << (int_64)2) / (uint_64)(int_64)1000000))
	$8 = *(($2 + [8]))
	
.LABEL $label$3
	if ( (int_64)($8 == 0) ){ goto $label$5 }
	$9 = ((int_64)$8 + (int_64)1)
	CALL __multi3(($12 + [8]), $9, ( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($9 <= $8)) : (int_64)($9 == 0) ), $8, (int_64)0)
	$11 = *(($12 + [16]))
	$9 = *($12 + [8])
	CALL eosio_assert(( ((int_64)$9 > (int_64)-1) ? [0] : (int_64)($11 == 0) ), [480])
	$11 = ((int_64)(uint_64)$9 >> (uint_64)(int_64)1) | (int_64)((int_64)$11 << (int_64)63))
	
.LABEL $label$5
	CALL eosio_assert((uint_64)($11 <= (int_64)1152921504606846976), [480])
	$3 = (int_64)
	*($12 + [152]) = $3(((uint_64)((int_64)$11 << (int_64)2) / (uint_64)(int_64)1000000) - $10))
	$4 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [656]
	$10 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$11 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$5 = ($5 + [165])
	goto $label$9 
	
.LABEL $label$11
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$7
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$6 }
	*($12 + [104]) = $10
	*($12 + [96]) = $4
	$4 = *($0 + [360])
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [736]
	$10 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$17 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$5 = ($5 + [165])
	goto $label$15 
	
.LABEL $label$17
	$11 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$13
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$12 }
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$9 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	
.LOOP $label$22:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$22 }
	
.LABEL $label$21
	$5 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$5 = [0]
	
.LABEL $label$18
	CALL eosio_assert($5, [272])
	*(($12 + [48])) = [0]
	*($12 + [40]) = (int_64)0
	$7 = CALL strlen([752])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$26 }
	*($12 + [40]) = ($7 << [1])
	$5 = (($12 + [40]) | [1])
	if ( $7 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$6 = (($7 + [16]) & [-16])
	$5 = CALL $74($6)
	*($12 + [40]) = ($6 | [1])
	*($12 + [48]) = $5
	*($12 + [44]) = $7
	
.LABEL $label$25
	CALL memcpy($5, [752], $7)
	
.LABEL $label$24
	*(($5 + $7)) = [0]
	*(($12 + [72])) = (int_64)1397703940
	*(($12 + [84])) = *($12 + [44])
	*($12 + [64]) = $3
	$7 = ($12 + [48])
	*(($12 + [88])) = *($7)
	*($12 + [56]) = *($0)
	*($12 + [80]) = *($12 + [40])
	*($12 + [40]) = [0]
	*($12 + [44]) = [0]
	*($7) = [0]
	$7 = CALL $28(($12 + [112]), ($12 + [96]), $4, $10, ($12 + [56]))
	CALL $27(($12 + [160]), $7)
	$5 = *($12 + [160])
	CALL send_inline($5, (*($12 + [164]) - $5))
	$5 = *($12 + [160])
	if ( ($5 == 0) ){ goto $label$27 }
	*($12 + [164]) = $5
	CALL $75($5)
	
.LABEL $label$27
	$5 = *($7 + [28])
	if ( ($5 == 0) ){ goto $label$28 }
	*(($7 + [32])) = $5
	CALL $75($5)
	
.LABEL $label$28
	$5 = *($7 + [16])
	if ( ($5 == 0) ){ goto $label$29 }
	*(($7 + [20])) = $5
	CALL $75($5)
	
.LABEL $label$29
	if ( ((*(($12 + [80])) & [1]) == 0) ){ goto $label$30 }
	CALL $75(*(($12 + [88])))
	
.LABEL $label$30
	if ( ((*($12 + [40]) & [1]) == 0) ){ goto $label$31 }
	CALL $75(*(($12 + [48])))
	
.LABEL $label$31
	*($12 + [112]) = ($12 + [152])
	CALL $61($1, $2, ($12 + [112]))
	*([0] + [4]) = ($12 + [176])
	return (unreachable)
	
.LABEL $label$23
	CALL $76(($12 + [40]))
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $72($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9920])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [304])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $74([152])
	$4 = CALL $9($6)
	*($6 + [136]) = $0
	CALL $14(($8 + [32]), $4)
	*($6 + [140]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [140])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $11(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [104])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [108])) = $7
	CALL $75($7)
	
.LABEL $label$10
	CALL $75($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $9 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [32]) = (int_64)0
	*(($2 = ($0 + [40]))) = (int_64)1397703940
	CALL eosio_assert([1], [208])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [272])
	*(($2 = ($0 + [56]))) = (int_64)1397703940
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [208])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [272])
	*(($2 = ($0 + [72]))) = (int_64)1397703940
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [208])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [272])
	*(($2 = ($0 + [96]))) = (int_64)1397703940
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [208])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [272])
	*(($0 + [112])) = [0]
	*($0 + [104 align=4]) = (int_64)0
	return $0
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [304])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $74([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [336])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [336])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [336])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $7(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $75($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $75($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _ZN7chickenC2Ey (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	*($0 + [8]) = $1
	*($0) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	$8 = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = [0]
	*($0 + [48]) = $1
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = [0]
	*(($0 + [76])) = [0]
	*(($0 + [80])) = [0]
	*($0 + [88]) = (int_64)23720092044182016
	*($0 + [96]) = (int_64)1414220804
	*($0 + [104]) = (int_64)1
	*($0 + [112]) = (int_64)16000000
	*(($0 + [120])) = (int_64)24000000
	*(($0 + [128])) = (int_64)28000000
	*(($0 + [136])) = (int_64)30000000
	*(($0 + [144])) = (int_64)31000000
	*($0 + [152]) = (int_64)2000000
	*(($0 + [160])) = (int_64)4000000
	*(($0 + [168])) = (int_64)8000000
	*(($0 + [176])) = (int_64)16000000
	*(($0 + [184])) = (int_64)32000000
	*($0 + [192]) = (int_64)100000
	*($0 + [200]) = (int_64)32000000
	*(($0 + [208])) = (int_64)16000000
	*(($0 + [216])) = (int_64)8000000
	*(($0 + [224])) = (int_64)4000000
	*(($0 + [232])) = (int_64)2000000
	*(($0 + [240])) = (int_64)1000000
	*($0 + [248]) = (int_64)0
	*(($0 + [256])) = (int_64)160
	*(($0 + [264])) = (int_64)240
	*(($0 + [272])) = (int_64)280
	*(($0 + [280])) = (int_64)300
	*(($0 + [288])) = (int_64)310
	*($0 + [296]) = (int_64)1
	*(($0 + [304])) = (int_64)2
	*(($0 + [312])) = (int_64)2
	*(($0 + [320])) = (int_64)2
	*(($0 + [328])) = (int_64)2
	*(($0 + [336])) = (int_64)2
	*($0 + [344]) = (int_64)38000000
	*($0 + [352]) = (int_64)86400000000
	$2 = ($0 + [48])
	$11 = ($0 + [8])
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	*(($0 + [360])) = $9
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$5:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$3 = ($3 + [165])
	goto $label$7 
	
.LABEL $label$8
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$5 }
	*(($0 + [368])) = $9
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [48]
	$9 = (int_64)0
	
.LOOP $label$9:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$10 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$9 }
	*(($0 + [376])) = $9
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)7235159550573573504, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	*($12 + [20]) = CALL $6($11, $6)
	*($12 + [16]) = $11
	$3 = (($12 + [16]) | [4])
	goto $label$13 
	
.LABEL $label$14
	*($12 + [20]) = [0]
	*($12 + [16]) = $11
	$7 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$3()), [64])
	*(($6 = CALL $74([40])) + [24]) = $11
	*($6) = (int_64)0
	*($6 + [8]) = (int_64)0
	CALL eosio_assert([1], [128])
	CALL memcpy(($12 + [48]), $6, [8])
	CALL eosio_assert([1], [128])
	CALL memcpy((($12 + [48]) | [8]), ($6 + [8]), [8])
	CALL eosio_assert([1], [128])
	CALL memcpy((($12 + [48]) + [16]), ($6 + [16]), [8])
	$8 = *($6)
	$5 = CALL db_store_i64(*(($0 + [16])), (int_64)7235159550573573504, $7, $8, ($12 + [48]), [24])
	*($6 + [28]) = $5
	$3 = ($0 + [24])
	if ( (uint_64)($8 <= *($3)) ){ goto $label$15 }
	*($3) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	*($12 + [40]) = $6
	$8 = *($6)
	*($12 + [48]) = $8
	*($12 + [8]) = $5
	$4 = ($0 + [36])
	$3 = *($4)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [40]))) ){ goto $label$17 }
	*($3 + [8]) = $8
	*($3 + [16]) = $5
	*($12 + [40]) = [0]
	*($3) = $6
	*($4) = ($3 + [24])
	goto $label$16 
	
.LABEL $label$17
	CALL $7(($0 + [32]), ($12 + [40]), ($12 + [48]), ($12 + [8]))
	
.LABEL $label$16
	$3 = *($12 + [40])
	*($12 + [40]) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	CALL $75($3)
	
.LABEL $label$18
	$3 = (($12 + [16]) | [4])
	*($12 + [20]) = $6
	*($12 + [16]) = $11
	
.LABEL $label$13
	$8 = *(*($3) + [8])
	$4 = *(($0 + [72]))
	$11 = *(($0 + [76]))
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$19 }
	$6 = ($11 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$20:
	if ( ((int_64)*(*($6)) == (int_64)$8) ){ goto $label$19 }
	$11 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$20 }
	
.LABEL $label$19
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$23 }
	$6 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$2), [144])
	if ( $6 ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	$6 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4831559083021479936, $8)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$22 }
	CALL eosio_assert(((int_32)*(CALL $8($2, $6) + [136]) == (int_32)$2), [144])
	goto $label$21 
	
.LABEL $label$22
	$8 = *($0)
	*($12 + [12]) = $0
	*($12 + [8]) = ($12 + [16])
	*($12 + [40]) = $8
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$3()), [64])
	*($12 + [48]) = $2
	*($12 + [52]) = ($12 + [8])
	*($12 + [56]) = ($12 + [40])
	$6 = CALL $74([152])
	CALL $9($6)
	*($6 + [136]) = $2
	CALL $10(($12 + [48]), $6)
	*($12 + [32]) = $6
	$8 = *($6)
	*($12 + [48]) = $8
	$11 = *($6 + [140])
	*($12 + [28]) = $11
	$5 = ($0 + [76])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [80]))) ){ goto $label$25 }
	*($3 + [8]) = $8
	*($3 + [16]) = $11
	*($12 + [32]) = [0]
	*($3) = $6
	*($5) = ($3 + [24])
	goto $label$24 
	
.LABEL $label$25
	CALL $11(($0 + [72]), ($12 + [32]), ($12 + [48]), ($12 + [28]))
	
.LABEL $label$24
	$6 = *($12 + [32])
	*($12 + [32]) = [0]
	if ( ($6 == 0) ){ goto $label$21 }
	$3 = *($6 + [104])
	if ( ($3 == 0) ){ goto $label$26 }
	*(($6 + [108])) = $3
	CALL $75($3)
	
.LABEL $label$26
	CALL $75($6)
	
.LABEL $label$21
	*([0] + [4]) = ($12 + [80])
	return $0
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $15($0, ($1 + [104]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [352])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $4) >> [5])
	$7 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$4 }
	CALL $16($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$5 }
	$5 = ($4 + ($7 << [5]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $17($0, $4)
	$4 = ($4 + [32])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$8 = *($0)
	$2 = int_32(($6 - $8) >> [5])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$7 = ($7 - $8)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($7 >> [4])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $74(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	*(($7 = ($6 + [16]))) = (int_64)0
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*($7) = (int_64)1397703940
	CALL eosio_assert([1], [208])
	$5 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [272])
	$6 = (*($8) + [32])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $79($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [5]))
	$2 = ($7 + ($2 << [5]))
	$7 = $2
	
.LOOP $label$14:
	*(($6 = ($7 + [16]))) = (int_64)0
	*($7) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*($6) = (int_64)1397703940
	CALL eosio_assert([1], [208])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$8 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$8 = [0]
	
.LABEL $label$15
	CALL eosio_assert($8, [272])
	$7 = ($7 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$6 = *($0)
	$4 = ($0 + [4])
	$8 = (*($4) - $6)
	$1 = ($2 - $8)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($1, $6, $8)
	$6 = *($0)
	
.LABEL $label$20
	*($0) = $1
	*($4) = $7
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $75($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [336])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [336])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$5 = *($0 + [4])
	$7 = *($5)
	*($1 + [8]) = (int_64)0
	*($1) = *(*($7 + [4]) + [8])
	$5 = *(($5 + [4]))
	$2 = *($0)
	*($1 + [16]) = ((int_64)CALL current_time() + (int_64)*($5 + [352]))
	CALL eosio_assert([1], [208])
	$6 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [272])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)0
	CALL eosio_assert([1], [208])
	$6 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$7 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [272])
	*(($1 + [56])) = (int_64)1397703940
	*($1 + [48]) = (int_64)0
	CALL eosio_assert([1], [208])
	$6 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$7 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [272])
	*(($1 + [72])) = (int_64)1397703940
	*($1 + [64]) = (int_64)0
	*($1 + [120]) = (int_64)0
	*($1 + [80]) = (int_64)0
	*($1 + [128]) = (int_64)0
	$3 = *($1 + [104])
	$7 = *(($1 + [108]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [5]))
	$5 = [104]
	
.LOOP $label$16:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$16 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$17 }
	$5 = (($4 & [-32]) + $5)
	
.LABEL $label$17
	$7 = ($5 + [16])
	if ( ($7 <= [513]) ){ goto $label$19 }
	$5 = CALL malloc($7)
	goto $label$18 
	
.LABEL $label$19
	$5 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$18
	*($8 + [4]) = $5
	*($8) = $5
	*($8 + [8]) = ($5 + $7)
	CALL $12($8, $1)
	$6 = *($1)
	*($1 + [140]) = CALL db_store_i64(*($2 + [8]), (int_64)4831559083021479936, *(*($0 + [8])), $6, $5, $7)
	if ( ($7 <= [513]) ){ goto $label$20 }
	CALL free($5)
	
.LABEL $label$20
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$21 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [104])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [108])) = $6
	CALL $75($6)
	
.LABEL $label$11
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $75($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$6 = (*($0 + [4]) + [8])
	*($0 + [4]) = $6
	$5 = (CASTING uint_64)(uint_32 int_32((*(($1 + [108])) - *($1 + [104])) >> [5]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$3 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) > (int_32)[0]), [128])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *(($1 + [108]))
	$4 = *(($1 + [104]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $13($0, $4)
	$4 = ($4 + [32])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$3 }
	$6 = *(($0 + [4]))
	
.LABEL $label$2
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [128])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [120]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [128])
	CALL memcpy(*($4), ($1 + [128]), [8])
	*($4) = (*($4) + [8])
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [128])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [304])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $74([40])) + [8]) = [0]
	*($6) = (int_64)0
	*($6 + [24]) = $0
	$4 = CALL $40(($8 + [32]), $6)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [336])
	CALL memcpy(($6 + [16]), *($4 + [4]), [8])
	*($6 + [28]) = $1
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($8 + [24]) = $6
	$5 = *($6 + [16])
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $35(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [4]) = $7
	CALL $75($7)
	
.LABEL $label$10
	CALL $75($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$3 = ($1 + [16])
	$4 = *($1 + [16])
	$10 = *(*($2))
	if ( ((uint_64)$10 >= (uint_64)*(*($2 + [4]))) ){ goto $label$2 }
	$8 = ($1 + [4])
	$7 = (($11 + [8]) + [16])
	
.LOOP $label$3:
	$5 = *(*(($2 + [8])))
	*(($6 = (($11 + [8]) + [8]))) = (int_64)1
	*($7) = $10
	*($11 + [8]) = $5
	$9 = *(($1 + [4]))
	if ( ((uint_32)$9 >= (uint_32)*(($1 + [8]))) ){ goto $label$5 }
	*($9) = *($11 + [8])
	*(($9 + [16])) = *($7)
	*(($9 + [8])) = *($6)
	*($8) = (*($8) + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $38($1, ($11 + [8]))
	
.LABEL $label$4
	$10 = ((int_64)$10 + (int_64)1)
	if ( (uint_64)($10 <= *(*(($2 + [4])))) ){ goto $label$3 }
	$10 = *($3)
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [4])
	$10 = $4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [1008])
	$7 = *($1)
	$2 = *($8)
	$6 = ($2 - $7)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	$9 = [0]
	
.LOOP $label$6:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$7 }
	$2 = ($6 + [-24])
	$9 = ((($2 - ((uint_32)$2 % (uint_32)[24])) + $9) + [24])
	
.LABEL $label$7
	$2 = ($9 + [8])
	if ( ($2 <= [513]) ){ goto $label$9 }
	$9 = CALL malloc($2)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($12 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$8
	*($11 + [12]) = $9
	*($11 + [8]) = $9
	*($11 + [16]) = ($9 + $2)
	$7 = CALL $39(($11 + [8]), $1)
	CALL eosio_assert(((int_32)(*($7 + [8]) - *($7 + [4])) > (int_32)[7]), [128])
	CALL memcpy(*($7 + [4]), $3, [8])
	*($7 + [4]) = (*($7 + [4]) + [8])
	CALL db_update_i64(*(($1 + [28])), (int_64)0, $9, $2)
	if ( ($2 <= [513]) ){ goto $label$10 }
	CALL free($9)
	
.LABEL $label$10
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	$3 = *($0 + [4])
	*($1 + [16]) = (int_64)0
	$2 = *($0)
	$9 = *(*($3))
	if ( ((uint_64)$9 >= (uint_64)*(*($3 + [4]))) ){ goto $label$2 }
	$7 = ($1 + [4])
	$6 = (($10 + [8]) + [16])
	
.LOOP $label$3:
	$4 = *(*(($3 + [8])))
	*(($5 = (($10 + [8]) + [8]))) = (int_64)1
	*($6) = $9
	*($10 + [8]) = $4
	$8 = *(($1 + [4]))
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [8]))) ){ goto $label$5 }
	*($8) = *($10 + [8])
	*(($8 + [16])) = *($6)
	*(($8 + [8])) = *($5)
	*($7) = (*($7) + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $38($1, ($10 + [8]))
	
.LABEL $label$4
	$9 = ((int_64)$9 + (int_64)1)
	if ( (uint_64)($9 <= *(*(($3 + [4])))) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [4])
	
.LABEL $label$1
	$5 = ($1 + [16])
	$6 = *($1)
	$3 = *($7)
	$7 = ($3 - $6)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[24]))
	$8 = [0]
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$7 }
	$3 = ($7 + [-24])
	$8 = ((($3 - ((uint_32)$3 % (uint_32)[24])) + $8) + [24])
	
.LABEL $label$7
	$3 = ($8 + [8])
	if ( ($3 <= [513]) ){ goto $label$9 }
	$8 = CALL malloc($3)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$8
	*($10 + [12]) = $8
	*($10 + [8]) = $8
	*($10 + [16]) = ($8 + $3)
	$6 = CALL $39(($10 + [8]), $1)
	CALL eosio_assert(((int_32)(*($6 + [8]) - *($6 + [4])) > (int_32)[7]), [128])
	CALL memcpy(*($6 + [4]), $5, [8])
	*($6 + [4]) = (*($6 + [4]) + [8])
	$9 = *(($1 + [16]))
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)3724085270811770880, *(*($0 + [8])), $9, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$10 }
	CALL free($8)
	
.LABEL $label$10
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$11 }
	*($1 + [4]) = $6
	CALL $75($6)
	
.LABEL $label$11
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $75($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$3 = *($1)
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($2)))
	$9 = *($2 + [4])
	$8 = CALL current_time()
	$8 = ((int_64)$8 + (int_64)*($9 + [352]))
	$6 = ((int_64)*(*($2 + [8])) + (int_64)*($1 + [16]))
	*($1 + [16]) = ( $6 ? $8 : (uint_64)($6 <= $8) )
	$9 = *($2 + [12])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)*(($1 + [56]))), [896])
	$8 = ((int_64)*($1 + [48]) + (int_64)*($9))
	*($1 + [48]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [976])
	$9 = *($2 + [16])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)*(($1 + [40]))), [896])
	$8 = ((int_64)*($1 + [32]) + (int_64)*($9))
	*($1 + [32]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [976])
	$9 = *($2 + [20])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)*(($1 + [72]))), [896])
	$8 = ((int_64)*($1 + [64]) + (int_64)*($9))
	*($1 + [64]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [976])
	$9 = *($2 + [24])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)*(($1 + [96]))), [896])
	$8 = ((int_64)*($1 + [88]) + (int_64)*($9))
	*($1 + [88]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($1 + [88]) < (int_64)4611686018427387904), [976])
	*($1 + [24]) = *(*($2 + [28]))
	$8 = *(*($2 + [28]))
	$2 = *($2 + [24])
	*(($5 = (($9 = $10) + [8]))) = *(($2 + [8]))
	*($9) = *($2)
	$6 = CALL current_time()
	*(($9 + [36])) = *(($9 + [12]))
	*(($4 = (($9 + [16]) + [16]))) = *($5)
	*($9 + [16]) = $8
	*($9 + [24]) = *($9)
	*($9 + [40]) = $6
	$5 = *($1 + [104])
	$2 = *(($1 + [108]))
	if ( ((uint_32)int_32(($2 - $5) >> [5]) > (uint_32)[9]) ){ goto $label$3 }
	if ( ((int_32)$2 == (int_32)*(($1 + [112]))) ){ goto $label$2 }
	*($2) = *($9 + [16])
	*(($2 + [24])) = *((($9 + [16]) + [24]))
	*(($2 + [16])) = *((($9 + [16]) + [16]))
	*(($2 + [8])) = *((($9 + [16]) + [8]))
	*(($2 = ($1 + [108]))) = (*($2) + [32])
	goto $label$1 
	
.LABEL $label$3
	*(($2 = ($5 + (*($1 + [120]) << [5])))) = *($9 + [16])
	*(($2 + [24])) = *((($9 + [16]) + [24]))
	*(($2 + [16])) = *($4)
	*(($2 + [8])) = *((($9 + [16]) + [8]))
	goto $label$1 
	
.LABEL $label$2
	CALL $33(($1 + [104]), ($9 + [16]))
	
.LABEL $label$1
	*($1 + [120]) = ((uint_64)((int_64)*($1 + [120]) + (int_64)1) % (uint_64)(int_64)10)
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [1008])
	$2 = [104]
	$4 = *(($1 + [104]))
	$5 = *(($1 + [108]))
	$7 = ($5 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [5]))
	
.LOOP $label$4:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	$2 = (($7 & [-32]) + $2)
	
.LABEL $label$5
	$5 = ($2 + [16])
	if ( ($5 <= [513]) ){ goto $label$7 }
	$2 = CALL malloc($5)
	goto $label$6 
	
.LABEL $label$7
	$2 = ($10 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$6
	*($9 + [20]) = $2
	*($9 + [16]) = $2
	*($9 + [24]) = ($2 + $5)
	CALL $12(($9 + [16]), $1)
	CALL db_update_i64(*($1 + [140]), (int_64)0, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [5])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	$4 = [134217727]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$4 = int_32($7 >> [4])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $74(($4 << [5]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $79($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [5])))) = *($1)
	*(($3 + [24])) = *(($1 + [24]))
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [5]))
	$3 = ($3 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $75($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC _ZN7chicken14handle_airdropEyRKNS_11game_statusERKy (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [128])
	*([0] + [4]) = $10
	*($10 + [80]) = $1
	$5 = *($3)
	$7 = *($0 + [192])
	$6 = *($2 + [8])
	$8 = ((uint_64)$6 / (uint_64)$7)
	*($10 + [72]) = $8
	$5 = ((uint_64)((int_64)$5 + (int_64)$6) / (uint_64)$7)
	*($10 + [64]) = $5
	if ( ((uint_64)$8 >= (uint_64)$5) ){ goto $label$1 }
	*(($3 = ($10 + [56]))) = [0]
	*($10 + [40]) = (int_64)-1
	$5 = *($0)
	*($10 + [24]) = $5
	*($10 + [32]) = $1
	*($10 + [48]) = (int_64)0
	$2 = CALL db_lowerbound_i64($5, $1, (int_64)3724085270811770880, (int_64)0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$0 = CALL $36(($10 + [24]), $2)
	*($10 + [100]) = ($10 + [64])
	*($10 + [96]) = ($10 + [72])
	*($10 + [104]) = ($10 + [80])
	CALL $37(($10 + [24]), $0, ($10 + [96]))
	$4 = *($10 + [48])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($10 + [12]) = ($10 + [64])
	*($10 + [8]) = ($10 + [72])
	*($10 + [16]) = ($10 + [80])
	*($10 + [120]) = $1
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [64])
	*($10 + [100]) = ($10 + [8])
	*($10 + [96]) = ($10 + [24])
	*($10 + [104]) = ($10 + [120])
	*(($0 = CALL $74([40])) + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [24]) = ($10 + [24])
	CALL $34(($10 + [96]), $0)
	*($10 + [112]) = $0
	$1 = *($0 + [16])
	*($10 + [96]) = $1
	$4 = *($0 + [28])
	*($10 + [92]) = $4
	$9 = ($10 + [52])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*($3)) ){ goto $label$5 }
	*($2 + [8]) = $1
	*($2 + [16]) = $4
	*($10 + [112]) = [0]
	*($2) = $0
	*($9) = ($2 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $35(($10 + [48]), ($10 + [112]), ($10 + [96]), ($10 + [92]))
	
.LABEL $label$4
	$0 = *($10 + [112])
	*($10 + [112]) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$7 }
	*($0 + [4]) = $2
	CALL $75($2)
	
.LABEL $label$7
	CALL $75($0)
	
.LABEL $label$6
	$4 = *($10 + [48])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = ($10 + [52])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$12 }
	*($2 + [4]) = $3
	CALL $75($3)
	
.LABEL $label$12
	CALL $75($2)
	
.LABEL $label$11
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$10 }
	$0 = *(($10 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $4
	
.LABEL $label$8
	*($9) = $4
	CALL $75($0)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [128])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$3 = *($1)
	$6 = $3
	$7 = (int_64)0
	$5 = ((int_64)((int_64)$4 + (int_64)*(*($2 + [8]))) + (int_64)-1)
	$4 = *(*($2 + [4]) + [8])
	if ( ((uint_64)$4 > (uint_64)$5) ){ goto $label$1 }
	$6 = ((int_64)$5 + (int_64)$4)
	$7 = (int_64)
	$6 = ((int_64)$7((int_64)1 - $4)) + (int_64)$5
	CALL __multi3($8, $6), (int_64))(( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($6 <= $7)) : (uint_64)($6 <= $5) ) - (CASTING uint_64)(uint_32 ((uint_64)$4 > (uint_64)(int_64)1))), $6, ( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($6 <= $5)) : (uint_64)($6 <= $4) ))
	$5 = *(($8 + [8]))
	$4 = *($8)
	CALL eosio_assert(( ((int_64)$4 > (int_64)-1) ? [0] : (int_64)($5 == 0) ), [480])
	$7 = ((int_64)(uint_64)$4 >> (uint_64)(int_64)1) | (int_64)((int_64)$5 << (int_64)63))
	$6 = *($1)
	
.LABEL $label$1
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)$7)
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*(($2 + [8]))))
	CALL eosio_assert(((int_64)$3 == (int_64)$6), [1008])
	$9 = $9
	$2 = ($9 + [-48])
	*([0] + [4]) = $2
	*($8 + [20]) = $2
	*($8 + [16]) = $2
	*($8 + [24]) = $9
	CALL $29(($8 + [16]), $1)
	CALL db_update_i64(*($1 + [52]), (int_64)0, $2, [48])
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$3 = *($1)
	$2 = *($2)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [40]))), [1216])
	$7 = (int_64)
	*($1 + [32]) = $7(*($1 + [32]) - *($2)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [1008])
	$4 = *($1 + [104])
	$5 = *(($1 + [108]))
	$6 = ($5 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	$2 = [104]
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$2 = (($6 & [-32]) + $2)
	
.LABEL $label$2
	$5 = ($2 + [16])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$2 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$3
	*($8 + [4]) = $2
	*($8) = $2
	*($8 + [8]) = ($2 + $5)
	CALL $12($8, $1)
	CALL db_update_i64(*($1 + [140]), (int_64)0, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

int_64 .FUNC _ZN7chicken9get_stageEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	$0 = ($0 + [112])
	$3 = (int_64)-1
	
.LOOP $label$2:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((uint_64)$3 > (uint_64)(int_64)4) ){ goto $label$1 }
	$2 = *($0)
	$0 = ($0 + [8])
	if ( (uint_64)($2 <= $1) ){ goto $label$2 }
	
.LABEL $label$1
	return $3
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*($1 + [128]) = (int_64)1
	$3 = *($1)
	$4 = *(*($2))
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [208])
	$8 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$7 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [272])
	CALL eosio_assert(((int_64)*(($1 + [40])) == (int_64)1397703940), [1216])
	$8 = (int_64)
	*($1 + [32]) = $8(*($1 + [32]) - $4))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [1008])
	$5 = *($1 + [104])
	$7 = *(($1 + [108]))
	$6 = ($7 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	$2 = [104]
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	$2 = (($6 & [-32]) + $2)
	
.LABEL $label$7
	$7 = ($2 + [16])
	if ( ($7 <= [513]) ){ goto $label$9 }
	$2 = CALL malloc($7)
	goto $label$8 
	
.LABEL $label$9
	$2 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$8
	*($9 + [4]) = $2
	*($9) = $2
	*($9 + [8]) = ($2 + $7)
	CALL $12($9, $1)
	CALL db_update_i64(*($1 + [140]), (int_64)0, $2, $7)
	if ( ($7 <= [513]) ){ goto $label$10 }
	CALL free($2)
	
.LABEL $label$10
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [208])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [272])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $66(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $67(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $75(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [336])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_64 .FUNC _ZN7chicken8safe_mulEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL __multi3($3, $2, (int_64)0, $1, (int_64)0)
	$2 = *($3)
	CALL eosio_assert(( (uint_64)($2 <= (int_64)4611686018427387904) ? [0] : (int_64)(*(($3 + [8])) == 0) ), [480])
	*([0] + [4]) = ($3 + [16])
	return $2
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $74(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $75($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC _ZN7chicken8withdrawEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [224])
	*([0] + [4]) = $14
	CALL require_auth($1)
	$6 = CALL $20(($0 + [8]), (int_64)0, [416])
	$2 = ($0 + [48])
	$3 = CALL $21($2, *($6 + [8]), [416])
	$8 = [0]
	*(($14 + [152])) = [0]
	*($14 + [144]) = (int_64)0
	*($14 + [128]) = $1
	*($14 + [136]) = (int_64)-1
	*($14 + [120]) = *($0)
	$5 = CALL $25(($14 + [120]), *($6 + [8]), [1104])
	CALL eosio_assert(((int_32)*($5 + [48]) == (int_32)($14 + [120])), [784])
	CALL eosio_assert(((int_64)*($14 + [120]) == (int_64)CALL $fimport$3()), [832])
	CALL __multi3(($14 + [16]), *($5 + [8]), (int_64)0, *($3 + [8]), (int_64)0)
	$10 = *($5)
	$12 = *($14 + [16])
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? [0] : (int_64)(*((($14 + [16]) + [8])) == 0) ), [480])
	$9 = *($5 + [16])
	*($5 + [16]) = $12
	CALL eosio_assert(((int_64)$10 == (int_64)*($5)), [1008])
	*($14 + [72]) = (($14 + [160]) + [48])
	*($14 + [68]) = ($14 + [160])
	*($14 + [64]) = ($14 + [160])
	CALL $29(($14 + [64]), $5)
	CALL db_update_i64(*($5 + [52]), (int_64)0, ($14 + [160]), [48])
	$12 = (int_64))($12 - $9)
	if ( (uint_64)($10 <= *($14 + [136])) ){ goto $label$1 }
	*(($14 + [136])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	CALL __multi3($14, $12, (int_64)0, (int_64)53, (int_64)0)
	$10 = *($14)
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? [0] : (int_64)(*(($14 + [8])) == 0) ), [480])
	*($14 + [112]) = (int_64)1397703940
	*($14 + [104]) = ((uint_64)$10 / (uint_64)(int_64)1000000)
	CALL eosio_assert([1], [208])
	$10 = (uint_64)*($14 + [112]) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($6, [272])
	if ( ((int_64)*($14 + [104]) < (int_64)1) ){ goto $label$9 }
	*($14 + [160]) = ($14 + [104])
	CALL $53($2, $3, ($14 + [160]))
	$13 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [656]
	$11 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$15 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$6 = ($6 + [165])
	goto $label$13 
	
.LABEL $label$15
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$11
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$10 }
	*($14 + [56]) = $11
	*($14 + [48]) = $13
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [672]
	$11 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$21 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$6 = ($6 + [165])
	goto $label$19 
	
.LABEL $label$21
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$17
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$16 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [688]
	$13 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$27 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$6 = ($6 + [165])
	goto $label$25 
	
.LABEL $label$27
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$23
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$22 }
	*(($14 + [40])) = [0]
	*($14 + [32]) = (int_64)0
	$8 = CALL strlen([1120])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$30 }
	*($14 + [32]) = ($8 << [1])
	$6 = (($14 + [32]) | [1])
	if ( $8 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$4 = (($8 + [16]) & [-16])
	$6 = CALL $74($4)
	*($14 + [32]) = ($4 | [1])
	*($14 + [40]) = $6
	*($14 + [36]) = $8
	
.LABEL $label$29
	CALL memcpy($6, [1120], $8)
	
.LABEL $label$28
	*(($6 + $8)) = [0]
	*(($14 + [180])) = *($14 + [108])
	*($14 + [168]) = $1
	*(($14 + [188])) = *(($14 + [116]))
	*(($14 + [184])) = *((($14 + [104]) + [8]))
	*($14 + [160]) = *($0)
	*($14 + [176]) = *($14 + [104])
	$8 = (($14 + [32]) + [8])
	*(($14 + [200])) = *($8)
	*($14 + [192]) = *($14 + [32])
	*($14 + [32]) = [0]
	*($14 + [36]) = [0]
	*($8) = [0]
	$8 = CALL $26(($14 + [64]), ($14 + [48]), $11, $13, ($14 + [160]))
	CALL $27(($14 + [208]), $8)
	$6 = *($14 + [208])
	CALL send_inline($6, (*($14 + [212]) - $6))
	$6 = *($14 + [208])
	if ( ($6 == 0) ){ goto $label$31 }
	*($14 + [212]) = $6
	CALL $75($6)
	
.LABEL $label$31
	$6 = *($8 + [28])
	if ( ($6 == 0) ){ goto $label$32 }
	*(($8 + [32])) = $6
	CALL $75($6)
	
.LABEL $label$32
	$6 = *($8 + [16])
	if ( ($6 == 0) ){ goto $label$33 }
	*(($8 + [20])) = $6
	CALL $75($6)
	
.LABEL $label$33
	if ( ((*(($14 + [192])) & [1]) == 0) ){ goto $label$34 }
	CALL $75(*(($14 + [200])))
	
.LABEL $label$34
	if ( ((*($14 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $75(*(($14 + [40])))
	
.LABEL $label$9
	CALL _ZN7chicken5claimEy($0, $1)
	if ( ((int_64)*($5 + [32]) < (int_64)1) ){ goto $label$35 }
	$4 = ($5 + [32])
	$13 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [656]
	$11 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$41 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$6 = ($6 + [165])
	goto $label$39 
	
.LABEL $label$41
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$36 }
	*($14 + [56]) = $11
	*($14 + [48]) = $13
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [672]
	$11 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$47 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$6 = ($6 + [165])
	goto $label$45 
	
.LABEL $label$47
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$43
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$42 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [688]
	$13 = (int_64)0
	
.LOOP $label$48:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$53 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$6 = ($6 + [165])
	goto $label$51 
	
.LABEL $label$53
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$52
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$50
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$49
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$48 }
	*(($14 + [40])) = [0]
	*($14 + [32]) = (int_64)0
	$8 = CALL strlen([1152])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$56 }
	*($14 + [32]) = ($8 << [1])
	$6 = (($14 + [32]) | [1])
	if ( $8 ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	$7 = (($8 + [16]) & [-16])
	$6 = CALL $74($7)
	*($14 + [32]) = ($7 | [1])
	*($14 + [40]) = $6
	*($14 + [36]) = $8
	
.LABEL $label$55
	CALL memcpy($6, [1152], $8)
	
.LABEL $label$54
	*(($6 + $8)) = [0]
	*(($14 + [188])) = *(($4 + [12]))
	*(($14 + [184])) = *(($4 + [8]))
	*(($14 + [180])) = *(($4 + [4]))
	*($14 + [168]) = $1
	*($14 + [160]) = *($0)
	*($14 + [176]) = *($4)
	$8 = (($14 + [32]) + [8])
	*(($14 + [200])) = *($8)
	*($14 + [192]) = *($14 + [32])
	*($14 + [32]) = [0]
	*($14 + [36]) = [0]
	*($8) = [0]
	$8 = CALL $26(($14 + [64]), ($14 + [48]), $11, $13, ($14 + [160]))
	CALL $27(($14 + [208]), $8)
	$6 = *($14 + [208])
	CALL send_inline($6, (*($14 + [212]) - $6))
	$6 = *($14 + [208])
	if ( ($6 == 0) ){ goto $label$57 }
	*($14 + [212]) = $6
	CALL $75($6)
	
.LABEL $label$57
	$6 = *($8 + [28])
	if ( ($6 == 0) ){ goto $label$58 }
	*(($8 + [32])) = $6
	CALL $75($6)
	
.LABEL $label$58
	$6 = *($8 + [16])
	if ( ($6 == 0) ){ goto $label$59 }
	*(($8 + [20])) = $6
	CALL $75($6)
	
.LABEL $label$59
	if ( ((*(($14 + [192])) & [1]) == 0) ){ goto $label$60 }
	CALL $75(*(($14 + [200])))
	
.LABEL $label$60
	if ( ((*($14 + [32]) & [1]) == 0) ){ goto $label$61 }
	CALL $75(*(($14 + [40])))
	
.LABEL $label$61
	CALL $55(($14 + [120]), $5)
	
.LABEL $label$35
	if ( ((uint_64)CALL current_time() <= (uint_64)*($3 + [16])) ){ goto $label$62 }
	if ( ((int_64)*($3 + [24]) != (int_64)$1) ){ goto $label$62 }
	$10 = (int_64)0
	if ( ((int_64)*($3 + [80]) != (int_64)0) ){ goto $label$62 }
	CALL $56($2, $3)
	$13 = *($0)
	$9 = (int_64)59
	$8 = [656]
	$11 = (int_64)0
	
.LOOP $label$63:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$68 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$67 }
	$6 = ($6 + [165])
	goto $label$66 
	
.LABEL $label$68
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$67
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$66
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$65
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$64
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$63 }
	*($14 + [56]) = $11
	*($14 + [48]) = $13
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [672]
	$11 = (int_64)0
	
.LOOP $label$69:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$74 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$73 }
	$6 = ($6 + [165])
	goto $label$72 
	
.LABEL $label$74
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$71 }
	goto $label$70 
	
.LABEL $label$73
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$72
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$71
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$70
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$69 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [688]
	$13 = (int_64)0
	
.LOOP $label$75:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$80 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$6 = ($6 + [165])
	goto $label$78 
	
.LABEL $label$80
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$79
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$77
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$76
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$13 = ((int_64)$12 | (int_64)$13)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$75 }
	*(($14 + [40])) = [0]
	*($14 + [32]) = (int_64)0
	$8 = CALL strlen([1168])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$6 }
	$6 = ($3 + [64])
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$83 }
	*($14 + [32]) = ($8 << [1])
	$5 = (($14 + [32]) | [1])
	if ( $8 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$83
	$3 = (($8 + [16]) & [-16])
	$5 = CALL $74($3)
	*($14 + [32]) = ($3 | [1])
	*($14 + [40]) = $5
	*($14 + [36]) = $8
	
.LABEL $label$82
	CALL memcpy($5, [1168], $8)
	
.LABEL $label$81
	*(($5 + $8)) = [0]
	*(($14 + [188])) = *(($6 + [12]))
	*(($14 + [184])) = *(($6 + [8]))
	*(($14 + [180])) = *(($6 + [4]))
	*($14 + [168]) = $1
	*($14 + [160]) = *($0)
	*($14 + [176]) = *($6)
	$8 = (($14 + [32]) + [8])
	*(($14 + [200])) = *($8)
	*($14 + [192]) = *($14 + [32])
	*($14 + [32]) = [0]
	*($14 + [36]) = [0]
	*($8) = [0]
	$8 = CALL $26(($14 + [64]), ($14 + [48]), $11, $13, ($14 + [160]))
	CALL $27(($14 + [208]), $8)
	$6 = *($14 + [208])
	CALL send_inline($6, (*($14 + [212]) - $6))
	$6 = *($14 + [208])
	if ( ($6 == 0) ){ goto $label$84 }
	*($14 + [212]) = $6
	CALL $75($6)
	
.LABEL $label$84
	$6 = *($8 + [28])
	if ( ($6 == 0) ){ goto $label$85 }
	*(($8 + [32])) = $6
	CALL $75($6)
	
.LABEL $label$85
	$6 = *($8 + [16])
	if ( ($6 == 0) ){ goto $label$86 }
	*(($8 + [20])) = $6
	CALL $75($6)
	
.LABEL $label$86
	if ( ((*(($14 + [192])) & [1]) == 0) ){ goto $label$87 }
	CALL $75(*(($14 + [200])))
	
.LABEL $label$87
	if ( ((*($14 + [32]) & [1]) == 0) ){ goto $label$62 }
	CALL $75(*(($14 + [40])))
	
.LABEL $label$62
	$5 = *($14 + [144])
	if ( ($5 == 0) ){ goto $label$88 }
	$0 = ($14 + [148])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$90 }
	
.LOOP $label$91:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$92 }
	CALL $75($6)
	
.LABEL $label$92
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$91 }
	$8 = *(($14 + [144]))
	goto $label$89 
	
.LABEL $label$90
	$8 = $5
	
.LABEL $label$89
	*($0) = $5
	CALL $75($8)
	
.LABEL $label$88
	*([0] + [4]) = ($14 + [224])
	return (unreachable)
	
.LABEL $label$8
	CALL $76(($14 + [32]))
	
.LABEL $label$7
	CALL $76(($14 + [32]))
	
.LABEL $label$6
	CALL $76(($14 + [32]))
	(unreachable)
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$3 = *($1)
	$2 = *($2)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*(($1 + [56]))), [1216])
	$7 = (int_64)
	*($1 + [48]) = $7(*($1 + [48]) - *($2)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [1264])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [1296])
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [1008])
	$4 = *($1 + [104])
	$5 = *(($1 + [108]))
	$6 = ($5 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	$2 = [104]
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$2 = (($6 & [-32]) + $2)
	
.LABEL $label$2
	$5 = ($2 + [16])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$2 = CALL malloc($5)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$3
	*($8 + [4]) = $2
	*($8) = $2
	*($8 + [8]) = ($2 + $5)
	CALL $12($8, $1)
	CALL db_update_i64(*($1 + [140]), (int_64)0, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC _ZN7chicken5claimEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [256])
	*([0] + [4]) = $11
	*($11 + [232]) = $1
	CALL require_auth($1)
	$4 = CALL $20(($0 + [8]), (int_64)0, [416])
	$2 = ($0 + [48])
	$3 = CALL $21($2, *($4 + [8]), [416])
	$6 = [0]
	*(($11 + [224])) = [0]
	*($11 + [216]) = (int_64)0
	*($11 + [200]) = $1
	*($11 + [208]) = (int_64)-1
	*($11 + [192]) = *($0)
	CALL $25(($11 + [192]), *($4 + [8]), [1104])
	*($11 + [184]) = (int_64)1397703940
	*($11 + [176]) = (int_64)0
	CALL eosio_assert([1], [208])
	$1 = (uint_64)*($11 + [184]) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [272])
	$6 = ($0 + [240])
	$9 = *($3 + [8])
	$1 = (int_64)0
	
.LOOP $label$7:
	$4 = ($6 + [8])
	if ( ((uint_64)$1 > (uint_64)(int_64)4) ){ goto $label$6 }
	$1 = ((int_64)$1 + (int_64)1)
	$5 = ($6 + [-128])
	$6 = $4
	if ( (uint_64)(*($5) <= $9) ){ goto $label$7 }
	
.LABEL $label$6
	*($11 + [168]) = ( ((uint_64)$9 / (uint_64)(int_64)100000) ? *($4) : ((uint_64)$9 > (uint_64)(int_64)31000000) )
	*($11 + [144]) = (int_64)-1
	*($11 + [152]) = [0]
	$1 = *($11 + [232])
	$9 = *($0)
	*($11 + [128]) = $9
	*($11 + [136]) = $1
	*(($11 + [156])) = [0]
	*(($11 + [160])) = [0]
	$6 = CALL db_lowerbound_i64($9, $1, (int_64)3724085270811770880, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $36(($11 + [128]), $6)
	*($11 + [36]) = $0
	*($11 + [28]) = ($11 + [168])
	*($11 + [24]) = ($11 + [232])
	*($11 + [32]) = ($11 + [176])
	CALL $57(($11 + [128]), $6, ($11 + [24]))
	
.LABEL $label$8
	if ( ((int_64)*($11 + [176]) < (int_64)1) ){ goto $label$10 }
	*($11 + [24]) = ($11 + [176])
	CALL $58($2, $3, ($11 + [24]))
	$10 = *($0)
	$1 = (int_64)0
	$7 = (int_64)59
	$6 = [656]
	$8 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$16 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$4 = ($4 + [165])
	goto $label$14 
	
.LABEL $label$16
	$9 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$12
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$11 }
	*($11 + [80]) = $8
	*($11 + [72]) = $10
	$1 = (int_64)0
	$7 = (int_64)59
	$6 = [672]
	$8 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$22 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$4 = ($4 + [165])
	goto $label$20 
	
.LABEL $label$22
	$9 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$18
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$17 }
	$1 = (int_64)0
	$7 = (int_64)59
	$6 = [688]
	$10 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$28 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$4 = ($4 + [165])
	goto $label$26 
	
.LABEL $label$28
	$9 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$24
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$23 }
	*(($11 + [16])) = [0]
	*($11 + [8]) = (int_64)0
	$6 = CALL strlen([1200])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$31 }
	*($11 + [8]) = ($6 << [1])
	$4 = (($11 + [8]) | [1])
	if ( $6 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$5 = (($6 + [16]) & [-16])
	$4 = CALL $74($5)
	*($11 + [8]) = ($5 | [1])
	*($11 + [16]) = $4
	*($11 + [12]) = $6
	
.LABEL $label$30
	CALL memcpy($4, [1200], $6)
	
.LABEL $label$29
	*(($4 + $6)) = [0]
	*(($11 + [44])) = *($11 + [180])
	*($11 + [24]) = *($0)
	*($11 + [32]) = *($11 + [232])
	*(($11 + [52])) = *(($11 + [188]))
	*(($11 + [48])) = *((($11 + [176]) + [8]))
	*($11 + [40]) = *($11 + [176])
	$6 = (($11 + [8]) + [8])
	*(($11 + [64])) = *($6)
	*($11 + [56]) = *($11 + [8])
	*($11 + [8]) = [0]
	*($11 + [12]) = [0]
	*($6) = [0]
	$6 = CALL $26(($11 + [88]), ($11 + [72]), $8, $10, ($11 + [24]))
	CALL $27(($11 + [240]), $6)
	$4 = *($11 + [240])
	CALL send_inline($4, (*($11 + [244]) - $4))
	$4 = *($11 + [240])
	if ( ($4 == 0) ){ goto $label$32 }
	*($11 + [244]) = $4
	CALL $75($4)
	
.LABEL $label$32
	$4 = *($6 + [28])
	if ( ($4 == 0) ){ goto $label$33 }
	*(($6 + [32])) = $4
	CALL $75($4)
	
.LABEL $label$33
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$34 }
	*(($6 + [20])) = $4
	CALL $75($4)
	
.LABEL $label$34
	if ( ((*(($11 + [56])) & [1]) == 0) ){ goto $label$35 }
	CALL $75(*(($11 + [64])))
	
.LABEL $label$35
	if ( ((*($11 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $75(*(($11 + [16])))
	
.LABEL $label$10
	$0 = *($11 + [152])
	if ( ($0 == 0) ){ goto $label$36 }
	$3 = ($11 + [156])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$38 }
	
.LOOP $label$39:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$40 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$41 }
	*($4 + [4]) = $5
	CALL $75($5)
	
.LABEL $label$41
	CALL $75($4)
	
.LABEL $label$40
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$39 }
	$6 = *(($11 + [152]))
	goto $label$37 
	
.LABEL $label$38
	$6 = $0
	
.LABEL $label$37
	*($3) = $0
	CALL $75($6)
	
.LABEL $label$36
	$5 = *($11 + [216])
	if ( ($5 == 0) ){ goto $label$42 }
	$0 = ($11 + [220])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$44 }
	
.LOOP $label$45:
	$6 = ($6 + [-24])
	$4 = *($6)
	*($6) = [0]
	if ( ($4 == 0) ){ goto $label$46 }
	CALL $75($4)
	
.LABEL $label$46
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$45 }
	$6 = *(($11 + [216]))
	goto $label$43 
	
.LABEL $label$44
	$6 = $5
	
.LABEL $label$43
	*($0) = $5
	CALL $75($6)
	
.LABEL $label$42
	*([0] + [4]) = ($11 + [256])
	return (unreachable)
	
.LABEL $label$9
	CALL $76(($11 + [8]))
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	$6 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$2 = *($1)
	CALL eosio_assert([1], [208])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [272])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)0
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [1008])
	$5 = $7
	$4 = ($5 + [-48])
	*([0] + [4]) = $4
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = $5
	CALL $29($6, $1)
	CALL db_update_i64(*($1 + [52]), (int_64)0, $4, [48])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	*($1 + [80]) = (int_64)1
	$2 = *($1)
	CALL eosio_assert([1], [1008])
	$3 = *($1 + [104])
	$4 = *(($1 + [108]))
	$5 = ($4 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [5]))
	$6 = [104]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$6 = (($5 & [-32]) + $6)
	
.LABEL $label$2
	$4 = ($6 + [16])
	if ( ($4 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($4)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $4)
	CALL $12($8, $1)
	CALL db_update_i64(*($1 + [140]), (int_64)0, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [32])
	$14 = $15
	*([0] + [4]) = $15
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [832])
	$3 = ($1 + [16])
	$4 = *($1 + [16])
	$13 = $4
	$12 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$12) ){ goto $label$1 }
	$6 = ($2 + [4])
	$10 = [0]
	$8 = (int_64)0
	
.LOOP $label$3:
	$12 = ($12 + ((int_32)(CASTING uint_32)(uint_64 $8) * (int_32)[24]))
	if ( ((int_64)*($12) != (int_64)*(*($2))) ){ goto $label$4 }
	if ( ((int_64)*($12 + [8]) != (int_64)1) ){ goto $label$4 }
	$13 = *($12 + [16])
	if ( ((uint_64)$13 >= (uint_64)*(*($6))) ){ goto $label$4 }
	if ( ((int_32)$10 == (int_32)[100]) ){ goto $label$2 }
	*(($12 + [8])) = (int_64)0
	$10 = ($10 + [1])
	if ( ((uint_64)$13 >= (uint_64)(int_64)160) ){ goto $label$21 }
	CALL eosio_assert([1], [208])
	$13 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	
.LOOP $label$24:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$24 }
	
.LABEL $label$23
	$9 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((uint_64)$13 >= (uint_64)(int_64)240) ){ goto $label$18 }
	CALL eosio_assert([1], [208])
	$13 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$9 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$25 }
	goto $label$16 
	
.LABEL $label$20
	$9 = [0]
	
.LABEL $label$19
	CALL eosio_assert($9, [272])
	$12 = *(($2 + [8]))
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)1397703940), [896])
	$13 = ((int_64)*($12) + (int_64)2000000)
	*($12) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($12) < (int_64)4611686018427387904), [976])
	goto $label$4 
	
.LABEL $label$18
	if ( ((uint_64)$13 >= (uint_64)(int_64)280) ){ goto $label$15 }
	CALL eosio_assert([1], [208])
	$13 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$9 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$28 }
	goto $label$13 
	
.LABEL $label$17
	$9 = [0]
	
.LABEL $label$16
	CALL eosio_assert($9, [272])
	$12 = *(($2 + [8]))
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)1397703940), [896])
	$13 = ((int_64)*($12) + (int_64)4000000)
	*($12) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($12) < (int_64)4611686018427387904), [976])
	goto $label$4 
	
.LABEL $label$15
	if ( ((uint_64)$13 >= (uint_64)(int_64)300) ){ goto $label$12 }
	CALL eosio_assert([1], [208])
	$13 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	
.LOOP $label$33:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$33 }
	
.LABEL $label$32
	$9 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$31 }
	goto $label$10 
	
.LABEL $label$14
	$9 = [0]
	
.LABEL $label$13
	CALL eosio_assert($9, [272])
	$12 = *(($2 + [8]))
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)1397703940), [896])
	$13 = ((int_64)*($12) + (int_64)8000000)
	*($12) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($12) < (int_64)4611686018427387904), [976])
	goto $label$4 
	
.LABEL $label$12
	if ( ((uint_64)$13 >= (uint_64)(int_64)310) ){ goto $label$9 }
	CALL eosio_assert([1], [208])
	$13 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$35 }
	
.LOOP $label$36:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$36 }
	
.LABEL $label$35
	$9 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$34 }
	goto $label$7 
	
.LABEL $label$11
	$9 = [0]
	
.LABEL $label$10
	CALL eosio_assert($9, [272])
	$12 = *(($2 + [8]))
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)1397703940), [896])
	$13 = ((int_64)*($12) + (int_64)16000000)
	*($12) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($12) < (int_64)4611686018427387904), [976])
	goto $label$4 
	
.LABEL $label$9
	$11 = (int_64)0
	$5 = ((int_64)$5 + (int_64)100000)
	$5 = ((int_64)$13 * (int_64)100000)
	$13 = ((int_64)$5 | (int_64)1)
	if ( ((uint_64)$13 > (uint_64)$5) ){ goto $label$37 }
	$11 = ((int_64)$5 + (int_64)$13)
	$7 = (int_64)
	$11 = ((int_64)$7((int_64)1 - $13)) + (int_64)$5
	CALL __multi3($14, $11), (int_64))(( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($11 <= $7)) : (uint_64)($11 <= $5) ) - (CASTING uint_64)(uint_32 ((uint_64)$13 > (uint_64)(int_64)1))), $11, ( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($11 <= $5)) : (uint_64)($11 <= $13) ))
	$11 = *(($14 + [8]))
	$13 = *($14)
	CALL eosio_assert(( ((int_64)$13 > (int_64)-1) ? [0] : (int_64)($11 == 0) ), [480])
	$11 = ((int_64)(uint_64)$13 >> (uint_64)(int_64)1) | (int_64)((int_64)$11 << (int_64)63))
	
.LABEL $label$37
	CALL eosio_assert((uint_64)($11 <= (int_64)1152921504606846976), [480])
	CALL eosio_assert([1], [208])
	$11 = ((uint_64)((int_64)$11 << (int_64)2) / (uint_64)(int_64)1000000)
	$13 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$9 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$38 }
	goto $label$5 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [272])
	$12 = *(($2 + [8]))
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)1397703940), [896])
	$13 = ((int_64)*($12) + (int_64)32000000)
	*($12) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($12) < (int_64)4611686018427387904), [976])
	goto $label$4 
	
.LABEL $label$6
	$9 = [0]
	
.LABEL $label$5
	CALL eosio_assert($9, [272])
	$12 = *(($2 + [8]))
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)1397703940), [896])
	$13 = ((int_64)*($12) + (int_64)$11)
	*($12) = $13
	CALL eosio_assert(((int_64)$13 > (int_64)-4611686018427387904), [944])
	CALL eosio_assert(((int_64)*($12) < (int_64)4611686018427387904), [976])
	
.LABEL $label$4
	$12 = *($1)
	$8 = ((int_64)$8 + (int_64)1)
	if ( (uint_64)($8 <= (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [4])) - $12) / (int_32)[24]))) ){ goto $label$3 }
	
.LABEL $label$2
	$13 = *($3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$13), [1008])
	$10 = *($1)
	$2 = *(($1 + [4]))
	$9 = ($2 - $10)
	$13 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[24]))
	$12 = [0]
	
.LOOP $label$41:
	$12 = ($12 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$41 }
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$42 }
	$2 = ($9 + [-24])
	$12 = ((($2 - ((uint_32)$2 % (uint_32)[24])) + $12) + [24])
	
.LABEL $label$42
	$2 = ($12 + [8])
	if ( ($2 <= [513]) ){ goto $label$44 }
	$12 = CALL malloc($2)
	goto $label$43 
	
.LABEL $label$44
	$12 = ($15 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $12
	
.LABEL $label$43
	*($14 + [20]) = $12
	*($14 + [16]) = $12
	*($14 + [24]) = ($12 + $2)
	$10 = CALL $39(($14 + [16]), $1)
	CALL eosio_assert(((int_32)(*($10 + [8]) - *($10 + [4])) > (int_32)[7]), [128])
	CALL memcpy(*($10 + [4]), $3, [8])
	*($10 + [4]) = (*($10 + [4]) + [8])
	CALL db_update_i64(*(($1 + [28])), (int_64)0, $12, $2)
	if ( ($2 <= [513]) ){ goto $label$45 }
	CALL free($12)
	
.LABEL $label$45
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$46 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$46
	*([0] + [4]) = ($14 + [32])
}