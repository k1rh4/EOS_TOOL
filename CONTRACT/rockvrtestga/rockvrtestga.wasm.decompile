(data (i32.const 8192) "Invalid hex character\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8223) "0123456789abcdef\00stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8331) "invalid sha256\00")
(data (i32.const 8346) "invalid sha1\00")
(data (i32.const 8359) "invalid first pos\00")
(data (i32.const 8377) "parse memo error\00stoull\00")
(data (i32.const 8416) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8672) "No delimiter in signature\00")
(data (i32.const 8698) "SIG\00")
(data (i32.const 8702) "Signature Key has invalid prefix\00")
(data (i32.const 8735) "No curve in signature\00")
(data (i32.const 8757) "K1\00")
(data (i32.const 8760) "R1\00")
(data (i32.const 8763) "Incorrect curve\00")
(data (i32.const 8779) "Signature has no data\00")
(data (i32.const 8801) "Decode signature failed\00")
(data (i32.const 8825) "Invalid signature\00")
(data (i32.const 8843) "Signature checksum mismatch\00")
(data (i32.const 8871) "EOS\00")
(data (i32.const 8875) "Decode public key failed\00")
(data (i32.const 8900) "Invalid public key\00")
(data (i32.const 8919) "Public key checksum mismatch\00")
(data (i32.const 17652) "EOS551PbTy4MUuQPiFVRBtGEVBgZJFFSQDGZNQbEgeudm6rkHSfUM\00")
(data (i32.const 17706) "eosio.token\00")
(data (i32.const 17718) "transfer\00")
(data (i32.const 17727) "ha4dmmjwguge\00")
(data (i32.const 17740) "rockvrtestlo\00: out of range\00")
(data (i32.const 17768) "referrer can not be self\00")
(data (i32.const 17793) "bet not found\00")
(data (i32.const 17807) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17858) "error reading iterator\00")
(data (i32.const 17881) "read\00")
(data (i32.const 17886) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17935) "invalid symbol name\00")
(data (i32.const 17955) "cannot create objects in table of another contract\00")
(data (i32.const 18006) "write\00")
(data (i32.const 18012) "attempt to add asset with different symbol\00")
(data (i32.const 18055) "addition underflow\00")
(data (i32.const 18074) "addition overflow\00")
(data (i32.const 18092) "cannot pass end iterator to modify\00")
(data (i32.const 18127) "object passed to modify is not in multi_index\00")
(data (i32.const 18173) "cannot modify objects in table of another contract\00")
(data (i32.const 18224) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18283) "attempt to subtract asset with different symbol\00")
(data (i32.const 18331) "subtraction underflow\00")
(data (i32.const 18353) "subtraction overflow\00")
(data (i32.const 18374) "bet id:\00")
(data (i32.const 18382) " player: \00")
(data (i32.const 18392) " winner! - trustdice.win\00")
(data (i32.const 18420) "\f8G\00\00")
(data (i32.const 18424) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 18457) " payout: \00")
(data (i32.const 18467) " jackpot winner! - trustdice.win\00")
(data (i32.const 18500) "fund unlock error\00")
(data (i32.const 18518) "divide by zero\00")
(data (i32.const 18533) "signed division overflow\00")
(data (i32.const 18558) " referral reward! - trustdice.win\00")
(data (i32.const 18592) "object passed to erase is not in multi_index\00")
(data (i32.const 18637) "cannot erase objects in table of another contract\00")
(data (i32.const 18687) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18740) "invalid memo\00")
(data (i32.const 18753) "no roll under\00")
(data (i32.const 18767) "no seed hash\00")
(data (i32.const 18780) "no user seed hash\00")
(data (i32.const 18798) "no expiration\00")
(data (i32.const 18812) "no referrer\00")
(data (i32.const 18824) "no signature\00")
(data (i32.const 18837) "only EOS token allowed\00")
(data (i32.const 18860) "quantity invalid\00")
(data (i32.const 18877) "transfer quantity must be greater than 0.1\00")
(data (i32.const 18920) "transfer quantity must be smaller than 100\00")
(data (i32.const 18963) "roll under overflow, must be greater than 3 and less than 96\00")
(data (i32.const 19024) "offered overflow, expected earning is greater than the maximum bonus\00")
(data (i32.const 19093) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 19152) "fund pool overdraw\00")
(data (i32.const 19171) "unable to find key\00")
(data (i32.const 19190) "seed hash expired\00")
(data (i32.const 19208) "hash duplicate\00")
(data (i32.const 19223) "cannot pass end iterator to erase\00")
(data (i32.const 19257) "cannot increment end iterator\00")
(data (i32.const 19287) "-\00")
(data (i32.const 19289) "next primary key in table is at autoincrement limit\00")
(data (i32.const 19341) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 19395) "cannot decrement iterator at beginning of table\00")
(data (i32.const 19443) "get\00")
(data (i32.const 19447) ": no conversion\00")
(data (i32.const 19472) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "sha256" (func $fimport$2 (param i32 i32 i32)))
(import "env" "memset" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$5 (param i32 i32 i32)))
(import "env" "eosio_exit" (func $fimport$6 (param i32)))
(import "env" "action_data_size" (func $fimport$7 (result i32)))
(import "env" "read_action_data" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "require_auth" (func $fimport$11 (param i64)))
(import "env" "db_find_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "assert_sha256" (func $fimport$13 (param i32 i32 i32)))
(import "env" "send_deferred" (func $fimport$14 (param i32 i64 i32 i32 i32)))
(import "env" "db_idx64_upperbound" (func $fimport$15 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$16 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$17 (param i32 i32 i32 i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$20 (result i64)))
(import "env" "db_store_i64" (func $fimport$21 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$23 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$24 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$26 (param i32)))
(import "env" "db_idx64_store" (func $fimport$27 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$29 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$30))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$41 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$45 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$47 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$48 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$49 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $12))
(export "_Znwj" (func $101))
(export "_ZdlPv" (func $103))
(export "_Znaj" (func $102))
(export "_ZdaPv" (func $104))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $13 $16 $18 $11)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19729))
(global $global$2 i32 (i32.const 19729))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18006])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [18006])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $72($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18006])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18006])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [18006])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [18006])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[19]), [18006])
	CALL memcpy(*($3 + [4]), $2, [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($0 + [4]), $3, [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [18006])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18006])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18006])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [18006])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [18006])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18006])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [18006])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18006])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [18006])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18006])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18006])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [18006])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $72(CALL $71($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [17886])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [17935])
	*($0 + [120]) = $1
	$7 = *($2 + [4])
	$4 = *($7)
	*($0 + [16]) = *($4 + [16])
	*($0 + [8]) = *($4 + [8])
	*($0) = *($4)
	$8 = *($2)
	*(($0 + [32])) = *(($4 + [32]))
	*($0 + [24]) = *($4 + [24])
	$4 = *($7)
	*($0 + [40]) = *($4 + [40])
	*(($0 + [72])) = *(($4 + [72]))
	*(($0 + [64])) = *(($4 + [64]))
	*(($0 + [56])) = *(($4 + [56]))
	*($0 + [48]) = *($4 + [48])
	$4 = *($7)
	*($0 + [80]) = *($4 + [80])
	*(($0 + [104])) = *(($4 + [104]))
	*(($0 + [96])) = *(($4 + [96]))
	*(($0 + [88])) = *(($4 + [88]))
	*($0 + [112]) = *(*($7) + [112])
	*($3 + [112]) = ($3 + [101])
	*($3 + [108]) = $3
	*($3 + [104]) = $3
	*($3 + [120]) = ($3 + [104])
	*($3 + [132]) = ($0 + [8])
	*($3 + [128]) = $0
	*($3 + [136]) = ($0 + [16])
	*($3 + [140]) = ($0 + [24])
	*($3 + [144]) = ($0 + [40])
	*($3 + [148]) = ($0 + [48])
	*($3 + [152]) = ($0 + [80])
	*($3 + [156]) = ($0 + [112])
	CALL $31(($3 + [128]), ($3 + [120]))
	$5 = *($0)
	*($0 + [124]) = CALL db_store_i64(*($8 + [8]), (int_64)4229865212519383040, *(*($2 + [8])), $5, $3, [101])
	if ( (uint_64)($5 <= *($8 + [16])) ){ goto $label$6 }
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($3 + [160])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $93($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $109($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $109($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $105($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19443])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $30($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17881])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $123 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $136(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $122 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $129($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $131 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $132 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $130($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_64 .FUNC $133 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $132($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $126()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $132($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19473]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $131($0, (int_64)0)
	*(CALL $126()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $132($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $132($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $132($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $132($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19473])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19473]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19473]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $132($0)
	$5 = *(($6 + [19473]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $132($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19473]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8214]))
	$8 = (int_64)0
	$5 = *(($6 + [19473]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19473]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $132($0)
	$5 = *(($6 + [19473]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $132($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19473]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $131($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19473]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19473]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $132($0) + [19473]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $126()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $126()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $126()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_64 .FUNC $134 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $131($3, (int_64)0)
	$4 = CALL $133($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $138($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $108($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_64 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $138([8394])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8394], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $126())
	*(CALL $126()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $134($4, ($3 + [12]), $2)
	$0 = CALL $126()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $118($3)
	
.LABEL $label$1
	CALL $119($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [17807])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)8759794652466717184, (int_64)8759794652466717184)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $66($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [17807])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18092])
	CALL $67($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $68($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $126 ()
{
	return [8964]
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [18420])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $107($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $109($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [17858])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $141($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([144])
	$6 = CALL $62($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [124])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $63(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $125 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $138([18374])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$6
	CALL memcpy($6, [18374], $5)
	
.LABEL $label$5
	*(($6 + $5)) = [0]
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = [0]
	$6 = (($4 + [16]) | [1])
	$8 = *($2)
	
.LOOP $label$8:
	$9 = ((uint_64)$8 / (uint_64)(int_64)10)
	$5 = (CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$9 * (int_64)10))
	CALL $2(($4 + [32]), int_32((( ($5) | [48]) ? ($5 + [55]) : ($5 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$10 }
	*($4 + [16]) = [0]
	goto $label$9 
	
.LABEL $label$10
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$9
	CALL $109(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [32]) + [8]))
	*($4 + [16]) = *($4 + [32])
	$5 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $9
	if ( $5 ){ goto $label$8 }
	$5 = *($4 + [16])
	$7 = ($5 & [1])
	CALL $113($0, ( *((($4 + [16]) + [8])) ? $6 : $7 ), ( *($4 + [20]) ? uint_32($5 >> [1]) : $7 ))
	CALL $111($0, [18382])
	*($4) = *($2 + [8])
	CALL $49(($4 + [32]), $4)
	$5 = *($4 + [32])
	$6 = ($5 & [1])
	CALL $113($0, ( *($4 + [40]) ? (($4 + [32]) | [1]) : $6 ), ( *($4 + [36]) ? uint_32($5 >> [1]) : $6 ))
	CALL $1($4, $3)
	CALL $111($0, [18457])
	$5 = *($4)
	$6 = ($5 & [1])
	CALL $113($0, ( *($4 + [8]) ? ($4 | [1]) : $6 ), ( *($4 + [4]) ? uint_32($5 >> [1]) : $6 ))
	CALL $111($0, [18467])
	if ( (*($4) & [1]) ){ goto $label$12 }
	if ( (*($4 + [32]) & [1]) ){ goto $label$11 }
	goto $label$3 
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [40])))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $105($0)
	
.LABEL $label$3
	if ( (*($4 + [16]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$1
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [48])
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL $37(($2 + [16]), $1)
	*($2 + [8]) = (int_64)1397703940
	*($2) = (int_64)0
	CALL eosio_assert([1], [17886])
	$3 = [0]
	$4 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [17935])
	CALL $38(($1 + [168]), $2, *($1))
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $30($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $50(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $138([18374])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [18374], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = [0]
	$5 = (($3 + [16]) | [1])
	$7 = *($2)
	
.LOOP $label$6:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $2(($3 + [32]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), ($3 + [16]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$8 }
	*($3 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	
.LABEL $label$7
	CALL $109(($3 + [16]), [0])
	*((($3 + [16]) + [8])) = *((($3 + [32]) + [8]))
	*($3 + [16]) = *($3 + [32])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$6 }
	$4 = *($3 + [16])
	$6 = ($4 & [1])
	CALL $113($0, ( *((($3 + [16]) + [8])) ? $5 : $6 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $6 ))
	CALL $111($0, [18382])
	*($3 + [8]) = *($2 + [8])
	CALL $49(($3 + [32]), ($3 + [8]))
	$4 = *($3 + [32])
	$5 = ($4 & [1])
	CALL $113($0, ( *($3 + [40]) ? (($3 + [32]) | [1]) : $5 ), ( *($3 + [36]) ? uint_32($4 >> [1]) : $5 ))
	CALL $111($0, [18392])
	if ( (*($3 + [32]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$10
	CALL _ZdlPv(*((($3 + [32]) + [8])))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [24])))
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $105($0)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [44])) = (int_64)0
	*(($5 + [60])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $54(($5 + [52]), $1, $2, $3, $4)
	$6 = CALL $26($0)
	*($5 + [8]) = (int_64)0
	*($5) = $6
	$6 = *($0)
	CALL $52(($5 + [80]), ($5 + [16]))
	$0 = *($5 + [80])
	CALL send_deferred($5, $6, $0, (*($5 + [84]) - $0), [0])
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $53(($5 + [16]))
	$global$0 = ($5 + [96])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [120]) == (int_32)$0), [18592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$20()), [18637])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18687])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [124])))
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = CALL current_time()
	*(($5 + [44])) = (int_64)0
	*(($5 + [60])) = (int_64)0
	*(($5 + [68])) = (int_64)0
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [52 align=4]) = (int_64)0
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	CALL $51(($5 + [52]), $1, $2, $3, $4)
	$6 = CALL $26($0)
	*($5 + [8]) = (int_64)0
	*($5) = $6
	$6 = *($0)
	CALL $52(($5 + [80]), ($5 + [16]))
	$0 = *($5 + [80])
	CALL send_deferred($5, $6, $0, (*($5 + [84]) - $0), [0])
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [84]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	CALL $53(($5 + [16]))
	$global$0 = ($5 + [96])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $138([18374])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [18374], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = [0]
	$5 = (($3 + [16]) | [1])
	$7 = *($2)
	
.LOOP $label$6:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $2(($3 + [32]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), ($3 + [16]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$8 }
	*($3 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($3 + [16]) + [8]))) = [0]
	*($3 + [20]) = [0]
	
.LABEL $label$7
	CALL $109(($3 + [16]), [0])
	*((($3 + [16]) + [8])) = *((($3 + [32]) + [8]))
	*($3 + [16]) = *($3 + [32])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$6 }
	$4 = *($3 + [16])
	$6 = ($4 & [1])
	CALL $113($0, ( *((($3 + [16]) + [8])) ? $5 : $6 ), ( *($3 + [20]) ? uint_32($4 >> [1]) : $6 ))
	CALL $111($0, [18382])
	*($3 + [8]) = *($2 + [8])
	CALL $49(($3 + [32]), ($3 + [8]))
	$4 = *($3 + [32])
	$5 = ($4 & [1])
	CALL $113($0, ( *($3 + [40]) ? (($3 + [32]) | [1]) : $5 ), ( *($3 + [36]) ? uint_32($4 >> [1]) : $5 ))
	CALL $111($0, [18558])
	if ( (*($3 + [32]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [16]) & [1]) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$10
	CALL _ZdlPv(*((($3 + [32]) + [8])))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [24])))
	$global$0 = ($3 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $105($0)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $124 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $139([8972])
	$3 = *([0] + [8980])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8984])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8988]
	*([0] + [8980]) = [8988]
	$4 = *([0] + [8984])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $144([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8980])
	*([0] + [8980]) = $3
	*([0] + [8984]) = [0]
	
.LABEL $label$2
	*([0] + [8984]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $140([8972])
	return [0]
	
.LABEL $label$1
	CALL $140([8972])
	return [-1]
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [176])
	$global$0 = $3
	$4 = [0]
	$5 = CALL $115($1, [95], [0])
	CALL eosio_assert(((int_32)$5 != (int_32)[-1]), [8672])
	$6 = CALL $107(($3 + [160]), $1, [0], $5, $1)
	$8 = *($3 + [160])
	$7 = CALL $138([8698])
	if ( ((int_32)$7 != (int_32)( *($6 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$1 }
	$4 = (CALL $116($6, [0], [-1], [8698], $7) == 0)
	
.LABEL $label$1
	CALL eosio_assert($4, [8702])
	$4 = ($5 + [1])
	$8 = CALL $115($1, [95], $4)
	CALL eosio_assert(((int_32)$8 != (int_32)[-1]), [8735])
	$4 = CALL $107(($3 + [144]), $1, $4, ($8 + ((int_32)$5 ^ (int_32)[-1])), $1)
	$5 = *($3 + [144])
	$7 = CALL $138([8757])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )) ){ goto $label$4 }
	if ( (CALL $116($4, [0], [-1], [8757], $7) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = [0]
	$7 = *($3 + [144])
	$9 = CALL $138([8760])
	if ( ((int_32)$9 != (int_32)( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	$5 = (CALL $116($4, [0], [-1], [8760], $9) == 0)
	goto $label$2 
	
.LABEL $label$3
	$5 = [1]
	
.LABEL $label$2
	CALL eosio_assert($5, [8763])
	$5 = [0]
	$7 = *($3 + [144])
	$9 = CALL $138([8757])
	if ( ((int_32)$9 != (int_32)( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$5 }
	$5 = (CALL $116($4, [0], [-1], [8757], $9) == 0)
	
.LABEL $label$5
	$1 = *($3 + [128])
	$8 = CALL $107(($3 + [128]), $1, ($8 + [1]), [-1], $1)
	CALL eosio_assert(((int_32)( *($8 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) ) != (int_32)[0]), [8779])
	*($3 + [120]) = [0]
	*($3 + [112]) = (int_64)0
	CALL eosio_assert(CALL $6(( *($8 + [8]) ? ($8 + [1]) : (*($3 + [128]) & [1]) ), ($3 + [112])), [8801])
	CALL eosio_assert(((int_32)(*($3 + [116]) - *($3 + [112])) == (int_32)[69]), [8825])
	if ( (*($2) == 0) ){ goto $label$6 }
	CALL memmove(($3 + [40]), *($3 + [112]), [65])
	*($3 + [106]) = [49]
	*($3 + [105]) = ( [75] ? [82] : $5 )
	CALL ripemd160(($3 + [40]), [67], $3)
	CALL eosio_assert((CALL $137($3, (*($3 + [116]) + [-4]), [4]) == 0), [8843])
	
.LABEL $label$6
	*($0) = ((int_32)$5 ^ (int_32)[1])
	$0 = ($0 + [1])
	$1 = [0]
	$5 = *($3 + [112])
	
.LOOP $label$7:
	*(($0 + $1)) = *(($5 + $1))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[65]) ){ goto $label$7 }
	*($3 + [116]) = $5
	CALL _ZdlPv($5)
	if ( (*($3 + [128]) & [1]) ){ goto $label$12 }
	if ( (*($3 + [144]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($8 + [8])))
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3 + [160]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($3 + [160]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($3 + [176])
	return 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($3 + [176])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL $125(int_32(($3 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$3 = *($0 + [1])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$4 }
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$4 = [0]
	
.LOOP $label$5:
	$3 = ($0 + $4)
	$5 = ($4 + [1])
	$4 = $5
	if ( ((int_32)*(($3 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$4 = ($0 + $5)
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$4 = $0
	
.LABEL $label$1
	$6 = ((uint_32)((int_32)CALL $138($4) * (int_32)[733]) / (uint_32)[1000])
	$7 = ($6 + [1])
	$8 = CALL _Znwj($7)
	$9 = ($8 + $6)
	$0 = [0]
	
.LOOP $label$6:
	*(($8 + $0)) = [0]
	$0 = ($0 + [1])
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$6 }
	$10 = ($8 + $7)
	$11 = [0]
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$15 }
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$14 }
	$0 = [0]
	
.LOOP $label$16:
	$11 = $0
	$12 = $4
	if ( CALL $125(int_32(($3 << [24]) >> [24])) ){ goto $label$12 }
	$0 = *($12)
	$13 = *(($0 + [8416]))
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$13 }
	if ( ((int_32)$0 != (int_32)[49]) ){ goto $label$18 }
	$0 = [0]
	if ( ($11 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$4 = [0]
	$3 = $8
	
.LOOP $label$19:
	$14 = (((int_32)*($0) * (int_32)[58]) + $13)
	*(($0 = ($3 + $6))) = $14
	$0 = ($4 + [1])
	$13 = ((int_32)$14 / (int_32)[256])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$17 }
	$3 = ($3 + [-1])
	$4 = $0
	if ( (((uint_32)($14 + [255]) > (uint_32)[510]) | ($0 <= $11)) ){ goto $label$19 }
	
.LABEL $label$17
	$4 = ($12 + [1])
	$3 = *($12 + [1])
	if ( $3 ){ goto $label$16 }
	$13 = $10
	$11 = $0
	goto $label$10 
	
.LABEL $label$15
	$13 = $10
	goto $label$10 
	
.LABEL $label$14
	
.LOOP $label$20:
	if ( CALL $125(int_32(($3 << [24]) >> [24])) ){ goto $label$11 }
	if ( ((int_32)*((*($4) + [8416])) == (int_32)[255]) ){ goto $label$13 }
	$3 = *($4 + [1])
	$12 = ($4 + [1])
	$4 = $12
	if ( $3 ){ goto $label$20 }
	$11 = [0]
	$13 = $8
	goto $label$9 
	
.LABEL $label$13
	$4 = [0]
	if ( $8 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$12
	$13 = $10
	goto $label$9 
	
.LABEL $label$11
	$13 = $8
	
.LABEL $label$10
	$12 = $4
	
.LABEL $label$9
	$0 = ($12 + [-1])
	
.LOOP $label$21:
	$0 = ($0 + [1])
	if ( CALL $125(*($0)) ){ goto $label$21 }
	$4 = [0]
	if ( *($0) ){ goto $label$22 }
	$4 = ($8 + ($7 - $11))
	if ( ((int_32)$4 == (int_32)$13) ){ goto $label$25 }
	$0 = $4
	if ( *($4) ){ goto $label$23 }
	$14 = ([0] - $11)
	$0 = [-1]
	$3 = $9
	
.LOOP $label$26:
	$4 = $3
	if ( ((int_32)$14 == (int_32)$0) ){ goto $label$24 }
	$0 = ($0 + [-1])
	$3 = ($4 + [1])
	if ( (*((($4 + $14) + [2])) == 0) ){ goto $label$26 }
	$0 = (($4 - $11) + [2])
	$4 = (($3 - $11) + [1])
	goto $label$23 
	
.LABEL $label$25
	$0 = $13
	goto $label$23 
	
.LABEL $label$24
	$0 = (($4 - $11) + [2])
	$4 = $0
	
.LABEL $label$23
	$4 = (($10 - $4) + $5)
	$3 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) >= (uint_32)$4) ){ goto $label$27 }
	$14 = *($1 + [4])
	$3 = *($1)
	$14 = (*($1 + [4]) - $3)
	$11 = CALL _Znwj($4)
	$7 = ($11 + ($14 - $3))
	$6 = ($7 - $14)
	$4 = ($11 + $4)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($6, $3, $14)
	$3 = *($1)
	
.LABEL $label$28
	*($1) = $6
	*(($1 + [4])) = $7
	*(($1 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$27 }
	CALL _ZdlPv($3)
	
.LABEL $label$27
	*($2 + [15]) = [0]
	CALL $7($1, $5, ($2 + [15]))
	if ( ((int_32)$0 == (int_32)$13) ){ goto $label$29 }
	$6 = ($9 + [1])
	$13 = ($1 + [8])
	$3 = ($1 + [4])
	
.LOOP $label$30:
	$4 = ($0 + [1])
	$14 = *($3)
	if ( ((int_32)$14 == (int_32)*($13)) ){ goto $label$31 }
	*($14) = *($0)
	*($3) = (*($3) + [1])
	$0 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	CALL $8($1, $0)
	$0 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$30 }
	
.LABEL $label$29
	$4 = [1]
	
.LABEL $label$22
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($8)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	return $4
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL _ZdlPv($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $4)
	$5 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($4) + [1])
	*($4) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $124($0)
}

int_64 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_64 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_64 $35
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = *($0)
	$3 = ($2 & [1])
	CALL sha256(( *($0 + [8]) ? ($0 + [1]) : $3 ), ( *($0 + [4]) ? uint_32($2 >> [1]) : $3 ), $1)
	$4 = *($1)
	$5 = *($1 + [1])
	$6 = *($1 + [2])
	$7 = *($1 + [3])
	$8 = *($1 + [4])
	$9 = *($1 + [5])
	$10 = *($1 + [6])
	$11 = *($1 + [7])
	$12 = *($1 + [8])
	$13 = *($1 + [9])
	$14 = *($1 + [10])
	$15 = *($1 + [11])
	$16 = *($1 + [12])
	$17 = *($1 + [13])
	$18 = *($1 + [14])
	$19 = *($1 + [15])
	$20 = *($1 + [16])
	$21 = *($1 + [17])
	$22 = *($1 + [18])
	$23 = *($1 + [19])
	$24 = *($1 + [20])
	$25 = *($1 + [21])
	$26 = *($1 + [22])
	$27 = *($1 + [23])
	$28 = *($1 + [24])
	$29 = *($1 + [25])
	$30 = *($1 + [26])
	$31 = *($1 + [27])
	$32 = *($1 + [28])
	$33 = *($1 + [29])
	$34 = *($1 + [30])
	$35 = *($1 + [31])
	$global$0 = ($1 + [32])
	return ((uint_64)((int_64)$35 | (int_64)((int_64)((uint_64)((int_64)$34 | (int_64)((int_64)((uint_64)((int_64)$33 | (int_64)((int_64)((uint_64)((int_64)$32 | (int_64)((int_64)((uint_64)((int_64)$31 | (int_64)((int_64)((uint_64)((int_64)$30 | (int_64)((int_64)((uint_64)((int_64)$29 | (int_64)((int_64)((uint_64)((int_64)$28 | (int_64)((int_64)((uint_64)((int_64)$27 | (int_64)((int_64)((uint_64)((int_64)$26 | (int_64)((int_64)((uint_64)((int_64)$25 | (int_64)((int_64)((uint_64)((int_64)$24 | (int_64)((int_64)((uint_64)((int_64)$23 | (int_64)((int_64)((uint_64)((int_64)$22 | (int_64)((int_64)((uint_64)((int_64)$21 | (int_64)((int_64)((uint_64)((int_64)$20 | (int_64)((int_64)((uint_64)((int_64)$19 | (int_64)((int_64)((uint_64)((int_64)$18 | (int_64)((int_64)((uint_64)((int_64)$17 | (int_64)((int_64)((uint_64)((int_64)$16 | (int_64)((int_64)((uint_64)((int_64)$15 | (int_64)((int_64)((uint_64)((int_64)$14 | (int_64)((int_64)((uint_64)((int_64)$13 | (int_64)((int_64)((uint_64)((int_64)$12 | (int_64)((int_64)((uint_64)((int_64)$11 | (int_64)((int_64)((uint_64)((int_64)$10 | (int_64)((int_64)((uint_64)((int_64)$9 | (int_64)((int_64)((uint_64)((int_64)$8 | (int_64)((int_64)((uint_64)((int_64)$7 | (int_64)((int_64)((uint_64)((int_64)$6 | (int_64)((int_64)((uint_64)((int_64)$5 | (int_64)((int_64)$4 << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007) << (int_64)8)) % (uint_64)(int_64)1000000007)
}

int_32 .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL eosio_assert(((int_32)*($3) != (int_32)[-1]), [8359])
	$2 = CALL $115($0, *($2), *($3))
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	$3 = *($3)
	CALL $107($5, $0, $3, ($2 - $3), $0)
	if ( (*($1) & [1]) ){ goto $label$2 }
	*($1) = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)*($4) ^ (int_32)[1]), [8377])
	$global$0 = ($5 + [16])
	return $2
	
.LABEL $label$2
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$1
	CALL $109($1, [0])
	*(($1 + [8])) = *(($5 + [8]))
	*($1) = *($5)
	$global$0 = ($5 + [16])
	return $2
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $113($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $105($0)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8192])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8192])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

void .FUNC memory ()
{
	CALL $100()
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = ($0 + [4])
	$4 = *($1)
	$5 = ((int_64)$4 / (int_64)10000)
	$6 = $5
	
.LOOP $label$1:
	$7 = ((uint_64)$6 / (uint_64)(int_64)10)
	CALL $2($2, (int_32(((CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$7 * (int_64)10))) << [24]) >> [24]) | [48]), $0)
	if ( (*($0) & [1]) ){ goto $label$3 }
	*($0) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*(($0 + [8]))) = [0]
	*($3) = [0]
	
.LABEL $label$2
	CALL $109($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	$8 = ((uint_64)$6 > (uint_64)(int_64)9)
	$6 = $7
	if ( $8 ){ goto $label$1 }
	CALL $112($0, [46])
	$6 = (int_64)
	CALL $112($0, int_32((((CASTING uint_32)(uint_64 ((uint_64)$6($4 - ((int_64)$5 * (int_64)10000))) / (uint_64)(int_64)1000)) << [24]) + [805306368]) >> [24]))
	CALL $112($0, ((CASTING uint_32)(uint_64 ((uint_64)((uint_64)$6 / (uint_64)(int_64)100) % (uint_64)(int_64)10)) | [48]))
	$7 = ((uint_64)$6 / (uint_64)(int_64)10)
	CALL $112($0, ((CASTING uint_32)(uint_64 ((uint_64)$7 % (uint_64)(int_64)10)) | [48]))
	CALL $112($0, (int_32(((CASTING uint_32)(uint_64 (int_64))($6 - ((int_64)$7 * (int_64)10))) << [24]) >> [24]) | [48]))
	CALL $112($0, [32])
	$6 = *($1 + [8])
	$8 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)8)
	if ( (($8) & [255]) == 0) ){ goto $label$4 }
	CALL $112($0, int_32(($8 << [24]) >> [24]))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)16)
	if ( (($8) & [255]) == 0) ){ goto $label$4 }
	CALL $112($0, int_32(($8 << [24]) >> [24]))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)24)
	if ( (($8) & [255]) == 0) ){ goto $label$4 }
	CALL $112($0, int_32(($8 << [24]) >> [24]))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	if ( (($8) & [255]) == 0) ){ goto $label$4 }
	CALL $112($0, int_32(($8 << [24]) >> [24]))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)40)
	if ( (($8) & [255]) == 0) ){ goto $label$4 }
	CALL $112($0, int_32(($8 << [24]) >> [24]))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)48)
	if ( (($8) & [255]) == 0) ){ goto $label$4 }
	CALL $112($0, int_32(($8 << [24]) >> [24]))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)56)
	if ( ($8) == 0) ){ goto $label$4 }
	CALL $112($0, int_32(($8 << [24]) >> [24]))
	
.LABEL $label$4
	$global$0 = ($2 + [16])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $141($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [17886])
	$8 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [17935])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = $3
	CALL $20(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $145($6)
	
.LABEL $label$9
	*(($2 = (($3 + [64]) + [8]))) = *(($3 + [24]))
	*($3 + [64]) = *($3 + [16])
	$8 = *(($3 + [8]))
	$9 = *($3)
	$1 = CALL $106(($3 + [48]), ($3 + [32]))
	*((($3 + [80]) + [8])) = *($2)
	*($3 + [104]) = $9
	*($3 + [96]) = $8
	*($3 + [80]) = *($3 + [64])
	$2 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($2) + $5))
	
.LABEL $label$10
	CALL void $2((int_32 ($3 + [104])), (int_32 ($3 + [96])), (int_32 ($3 + [80])), (int_32 $1), (int_32 $5))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$11
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$12
	$global$0 = ($3 + [112])
	return [1]
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [196])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [192]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [152]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [112]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [72]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [32]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [384])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ($1 <= [513]) ){ goto $label$4 }
	$2 = CALL $141($1)
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL $33($3, [0], $1)
	if ( ((uint_32)$1 >= (uint_32)[513]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	CALL read_action_data($2, $1)
	CALL $33($3, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $145($2)
	
.LABEL $label$1
	CALL memcpy(($3 + [128]), $3, [128])
	CALL memcpy(($3 + [256]), ($3 + [128]), [128])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($3 + [256])), (int_32 $5))
	$global$0 = ($3 + [384])
	return [1]
}

void .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [128])
	$global$0 = $3
	*(($3 + [120])) = [0]
	*($3 + [112]) = (int_64)0
	$4 = CALL $138([8871])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [112]) = ($4 << [1])
	$5 = (($3 + [112]) | [1])
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3 + [112]) = ($6 | [1])
	*($3 + [120]) = $5
	*($3 + [116]) = $4
	
.LABEL $label$4
	CALL memcpy($5, [8871], $4)
	
.LABEL $label$3
	*(($5 + $4)) = [0]
	$4 = *($3 + [112])
	$5 = CALL $107(($3 + [96]), $1, ( *($3 + [116]) ? uint_32($4 >> [1]) : ($4 & [1]) ), [-1], $1)
	*($3 + [88]) = [0]
	*($3 + [80]) = (int_64)0
	CALL eosio_assert(CALL $6(( *($5 + [8]) ? ($5 + [1]) : (*($3 + [96]) & [1]) ), ($3 + [80])), [8875])
	CALL eosio_assert(((int_32)(*($3 + [84]) - *($3 + [80])) == (int_32)[37]), [8900])
	if ( (*($2) == 0) ){ goto $label$6 }
	CALL memmove(($3 + [40]), *($3 + [80]), [33])
	CALL ripemd160(($3 + [40]), [33], $3)
	CALL eosio_assert((CALL $137($3, (*($3 + [84]) + [-4]), [4]) == 0), [8919])
	
.LABEL $label$6
	*($0) = [0]
	$4 = *($3 + [80])
	*($0 + [1 align=1]) = *($4)
	*($0 + [9 align=1]) = *($4 + [8 align=1])
	*($0 + [13 align=1]) = *($4 + [12 align=1])
	*($0 + [21 align=1]) = *($4 + [20 align=1])
	*($0 + [29 align=1]) = *($4 + [28 align=1])
	*($0 + [33]) = *($4 + [32])
	if ( ($4 == 0) ){ goto $label$7 }
	*($3 + [84]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( (*($3 + [96]) & [1]) ){ goto $label$9 }
	if ( (*($3 + [112]) & [1]) ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL _ZdlPv(*(($5 + [8])))
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv(*($3 + [120]))
	$global$0 = ($3 + [128])
	return (unreachable)
	
.LABEL $label$2
	CALL $105(($3 + [112]))
	
.LABEL $label$1
	$global$0 = ($3 + [128])
}

void .FUNC $11 (int_32 $0)
{
	if ( ((*([0] + [8948]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8956]))
	
.LABEL $label$1
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL memory()
	*(($3 + [64])) = $0
	*(($3 + [72])) = (int_64)-1
	$4 = (int_64)0
	*(($3 + [80])) = (int_64)0
	*(($3 + [88])) = [0]
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = (int_64)0
	*(($3 + [128])) = [0]
	*(($3 + [144])) = $0
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = (int_64)0
	*(($3 + [168])) = [0]
	*(($3 + [172])) = [0]
	*($3 + [56]) = $0
	*($3 + [48]) = $0
	*($3 + [96]) = $0
	*($3 + [136]) = $0
	*($3 + [176]) = $0
	*(($3 + [192])) = (int_64)-1
	*(($3 + [184])) = $0
	*(($3 + [200])) = (int_64)0
	*(($3 + [208])) = [0]
	*(($3 + [224])) = $0
	*(($3 + [232])) = (int_64)-1
	*(($3 + [240])) = (int_64)0
	*(($3 + [248])) = [0]
	*($3 + [216]) = $0
	$5 = (int_64)59
	$6 = [17706]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$6 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$8 = ($8 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$9 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17718]
	$7 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$15 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$8 = ($8 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$11
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$10 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$9 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3) = *($3 + [40])
	CALL $14(($3 + [48]), $3)
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $15(($3 + [48]))
	CALL $127([0])
	$global$0 = ($3 + [256])
	return (unreachable)
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)-5003315193367756800) ){ goto $label$16 }
	*($3 + [36]) = [0]
	*($3 + [32]) = [2]
	*($3 + [8]) = *($3 + [32])
	CALL $17(($3 + [48]), ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$17
	*($3 + [28]) = [0]
	*($3 + [24]) = [3]
	*($3 + [16]) = *($3 + [24])
	CALL $19(($3 + [48]), ($3 + [16]))
	
.LABEL $label$16
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$5 = ($global$0 - [416])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	$2 = CALL $106(($5 + [184]), $4)
	CALL $21($0, $2, ($5 + [359]), ($5 + [320]), ($5 + [288]), ($5 + [280]), ($5 + [272]), ($5 + [200]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$2
	CALL $22($0, $3)
	CALL eosio_assert((((*($5 + [359]) + [-4]) & [255]) <= [92]), [18963])
	CALL $23(($5 + [48]), $0, ($5 + [359]), $3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5 + [56])), [19093])
	CALL eosio_assert(((int_64)*($3) <= (int_64)*($5 + [48])), [19024])
	CALL $24($0, ($5 + [320]), ($5 + [280]))
	CALL eosio_assert(((int_64)*($5 + [272]) != (int_64)*($1)), [17768])
	CALL $25($0, ($5 + [359]), ($5 + [320]), ($5 + [280]), ($5 + [272]), ($5 + [200]))
	$6 = CALL $26($0)
	*(($5 + [80])) = *($3 + [8])
	*(($5 + [104])) = *($5 + [328])
	*(($5 + [112])) = *((($5 + [320]) + [16]))
	*(($5 + [120])) = *((($5 + [320]) + [24]))
	*($5 + [48]) = $6
	*($5 + [56]) = *($1)
	*($5 + [64]) = *($5 + [272])
	*($5 + [72]) = *($3)
	*($5 + [88]) = *($5 + [359])
	*($5 + [96]) = *($5 + [320])
	*(($5 + [152])) = *((($5 + [288]) + [24]))
	*(($5 + [144])) = *((($5 + [288]) + [16]))
	*(($5 + [136])) = *($5 + [296])
	*($5 + [128]) = *($5 + [288])
	*($5 + [160]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($0)
	*($5 + [384]) = ($5 + [48])
	CALL $27(($5 + [8]), ($0 + [8]), $6, ($5 + [384]))
	CALL $28(($5 + [8]), $0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5 + [16])), [18012])
	$6 = ((int_64)*($5 + [8]) + (int_64)*($3))
	*($5 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [18055])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [18074])
	CALL $29(($0 + [48]), ($5 + [8]), *($0))
	$3 = ($5 + [160])
	$1 = ($5 + [128])
	$2 = (($5 + [48]) + [48])
	$4 = ($5 + [88])
	$7 = (($5 + [48]) + [24])
	$8 = (($5 + [48]) + [16])
	$9 = (($5 + [48]) | [8])
	$10 = *($0)
	$6 = (int_64)6
	
.LOOP $label$3:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$3 }
	$6 = (int_64)7
	
.LOOP $label$4:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$4 }
	*($5 + [16]) = (int_64)-5003315193367756800
	*($5 + [8]) = $10
	*(($0 = CALL _Znwj([16]))) = $10
	*($0 + [8]) = (int_64)3617214756542218240
	*(($5 + [44])) = [0]
	$11 = ($0 + [16])
	*(($5 + [32])) = $11
	*(($5 + [28])) = $11
	*($5 + [24]) = $0
	*($5 + [36 align=4]) = (int_64)0
	CALL $30(($5 + [36]), [101])
	$0 = *(($5 + [40]))
	$11 = *($5 + [36])
	*($5 + [364]) = $11
	*($5 + [360]) = $11
	*($5 + [368]) = $0
	*($5 + [376]) = ($5 + [360])
	*($5 + [388]) = $9
	*($5 + [392]) = $8
	*($5 + [396]) = $7
	*($5 + [400]) = $4
	*($5 + [404]) = $2
	*($5 + [408]) = $1
	*($5 + [412]) = $3
	*($5 + [384]) = ($5 + [48])
	CALL $31(($5 + [384]), ($5 + [376]))
	CALL $32(($5 + [384]), ($5 + [8]))
	$0 = *($5 + [384])
	CALL send_inline($0, (*($5 + [388]) - $0))
	$0 = *($5 + [384])
	if ( ($0 == 0) ){ goto $label$5 }
	*($5 + [388]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$0 = *($5 + [36])
	if ( ($0 == 0) ){ goto $label$6 }
	*(($5 + [40])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$0 = *($5 + [24])
	if ( ($0 == 0) ){ goto $label$1 }
	*(($5 + [28])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [416])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18127])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$20()), [18173])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [18224])
	CALL eosio_assert([1], [18006])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18006])
	CALL memcpy(($4 | [8]), $5, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$3 = ($global$0 - [448])
	$global$0 = $3
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17727]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	CALL $34(($3 + [304]), $0, $1)
	$10 = ($3 + [352])
	CALL $35($0, $2, $10)
	$11 = ($3 + [384])
	$12 = CALL $36($0, $2, $11)
	CALL eosio_assert([1], [17886])
	$4 = (int_64)5459781
	$13 = (int_64)1397703940
	$6 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$4 = $5
	$9 = [1]
	$1 = $6
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$4 = $5
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$1 = ($6 + [1])
	$6 = $1
	if ( $9 ){ goto $label$9 }
	$9 = [1]
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$9 = [0]
	
.LABEL $label$5
	CALL eosio_assert($9, [17935])
	CALL eosio_assert([1], [17886])
	$4 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$4 = $5
	$9 = [1]
	$1 = $6
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$4 = $5
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$1 = ($6 + [1])
	$6 = $1
	if ( $9 ){ goto $label$14 }
	$9 = [1]
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$9 = [0]
	
.LABEL $label$10
	CALL eosio_assert($9, [17935])
	*($3 + [296]) = (int_64)1397703940
	*($3 + [288]) = (int_64)0
	CALL eosio_assert([1], [17886])
	$4 = (uint_64)*($3 + [296]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$4 = $5
	$9 = [1]
	$1 = $6
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$4 = $5
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$1 = ($6 + [1])
	$6 = $1
	if ( $9 ){ goto $label$19 }
	$9 = [1]
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$9 = [0]
	
.LABEL $label$15
	CALL eosio_assert($9, [17935])
	$14 = (int_64)0
	$15 = (int_64)0
	$16 = (int_64)0
	if ( ((int_64)*($3 + [328]) < (int_64)10000) ){ goto $label$20 }
	$15 = (int_64)0
	if ( ((uint_32)$12 >= (uint_32)*(($3 + [344]))) ){ goto $label$21 }
	CALL eosio_assert([1], [17886])
	CALL $37($3, $0)
	CALL eosio_assert(((int_64)1397703940 == (int_64)*($3 + [8])), [18012])
	$15 = (int_64)300
	$4 = *($3)
	*($3) = ((int_64)$4 + (int_64)300)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427388204), [18055])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [18074])
	CALL $38(($0 + [168]), $3, *($0))
	
.LABEL $label$21
	$16 = CALL $39($0, $2, $11)
	
.LABEL $label$20
	$6 = *(($3 + [344]))
	if ( ((uint_32)$12 >= (uint_32)$6) ){ goto $label$22 }
	$13 = *(($3 + [336]))
	$4 = *((($3 + [304]) + [24]))
	CALL eosio_assert([1], [17886])
	$9 = ((uint_32)[9850] / (uint_32)$6)
	$8 = ((uint_64)((int_64)$4 * (int_64)((int_64)(CASTING uint_64)(uint_32 ((uint_32)((([9850] - ((int_32)$9 * (int_32)$6)) << [1]) & [65534]) >= (uint_32)$6)) + (int_64)(CASTING uint_64)(uint_32 $9))) / (uint_64)(int_64)100)
	$4 = (uint_64)$13 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$26 }
	$4 = $5
	$9 = [1]
	$1 = $6
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$26
	$4 = $5
	
.LOOP $label$27:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$24 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$1 = ($6 + [1])
	$6 = $1
	if ( $9 ){ goto $label$27 }
	$9 = [1]
	$6 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$9 = [0]
	
.LABEL $label$23
	CALL eosio_assert($9, [17935])
	CALL eosio_assert(((int_64)1397703940 == (int_64)$13), [18283])
	$14 = (int_64)
	CALL eosio_assert(((int_64)$14($8 - $15)) > (int_64)-4611686018427387904), [18331])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [18353])
	if ( ((int_64)$14 < (int_64)1) ){ goto $label$22 }
	$5 = *($0)
	$4 = (int_64)6
	
.LOOP $label$28:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$28 }
	*($3 + [240]) = (int_64)3617214756542218240
	*($3 + [232]) = $5
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [17706]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$34 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$9 = ($9 + [-91])
	goto $label$32 
	
.LABEL $label$34
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$30
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$7 = ((int_64)$5 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$29 }
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [17718]
	$17 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$40 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$9 = ($9 + [-91])
	goto $label$38 
	
.LABEL $label$40
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$36
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$17 = ((int_64)$5 | (int_64)$17)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$35 }
	CALL $40(($3 + [216]), $0, ($3 + [304]))
	*(($3 + [24])) = $13
	$6 = ($3 + [224])
	*(($3 + [40])) = *($6)
	*($6) = [0]
	*($3 + [16]) = $14
	*($3) = *($0)
	*($3 + [8]) = *($3 + [312])
	*($3 + [32]) = *($3 + [216])
	*($3 + [216]) = (int_64)0
	$6 = CALL $41(($3 + [248]), ($3 + [232]), $7, $17, $3)
	CALL $32(($3 + [432]), $6)
	$9 = *($3 + [432])
	CALL send_inline($9, (*($3 + [436]) - $9))
	$9 = *($3 + [432])
	if ( ($9 == 0) ){ goto $label$41 }
	*($3 + [436]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$41
	$9 = *($6 + [28])
	if ( ($9 == 0) ){ goto $label$42 }
	*(($6 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$42
	$9 = *($6 + [16])
	if ( ($9 == 0) ){ goto $label$43 }
	*(($6 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$43
	if ( ((*(($3 + [32])) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$44
	if ( ((*($3 + [216]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($3 + [224])))
	
.LABEL $label$22
	if ( ((int_64)$16 != (int_64)666) ){ goto $label$45 }
	CALL $42($3, $0)
	*((($3 + [288]) + [8])) = *(($3 + [8]))
	*($3 + [288]) = *($3)
	if ( ((int_64)*($3 + [288]) < (int_64)1) ){ goto $label$45 }
	$5 = *($0)
	$4 = (int_64)6
	
.LOOP $label$46:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$46 }
	*($3 + [240]) = (int_64)3617214756542218240
	*($3 + [232]) = $5
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [17706]
	$7 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$52 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$9 = ($9 + [-91])
	goto $label$50 
	
.LABEL $label$52
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$48
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$7 = ((int_64)$5 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$47 }
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [17718]
	$17 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$58 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$9 = ($9 + [-91])
	goto $label$56 
	
.LABEL $label$58
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$54
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$17 = ((int_64)$5 | (int_64)$17)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$53 }
	CALL $43(($3 + [216]), $0, ($3 + [304]), ($3 + [288]))
	*(($3 + [24])) = *((($3 + [288]) + [8]))
	$6 = (($3 + [216]) + [8])
	*(($3 + [40])) = *($6)
	*($6) = [0]
	*($3) = *($0)
	*($3 + [8]) = *($3 + [312])
	*($3 + [16]) = *($3 + [288])
	*($3 + [32]) = *($3 + [216])
	*($3 + [216]) = (int_64)0
	$6 = CALL $41(($3 + [248]), ($3 + [232]), $7, $17, $3)
	CALL $32(($3 + [432]), $6)
	$9 = *($3 + [432])
	CALL send_inline($9, (*($3 + [436]) - $9))
	$9 = *($3 + [432])
	if ( ($9 == 0) ){ goto $label$59 }
	*($3 + [436]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$59
	$9 = *($6 + [28])
	if ( ($9 == 0) ){ goto $label$60 }
	*(($6 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$60
	$9 = *($6 + [16])
	if ( ($9 == 0) ){ goto $label$61 }
	*(($6 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$61
	if ( ((*(($3 + [32])) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$62
	if ( ((*($3 + [216]) & [1]) == 0) ){ goto $label$45 }
	CALL _ZdlPv(*(($3 + [224])))
	
.LABEL $label$45
	$1 = ($3 + [328])
	CALL $28($3, $0)
	CALL eosio_assert(((int_64)*((($3 + [304]) + [32])) == (int_64)*($3 + [8])), [18283])
	$4 = (int_64)
	*($3) = $4(*($3) - *($3 + [328])))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [18331])
	CALL eosio_assert(((int_64)*($3) < (int_64)4611686018427387904), [18353])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($3) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [18500])
	CALL $29(($0 + [48]), $3, *($0))
	$5 = *($0)
	if ( ((int_64)*($3 + [320]) == (int_64)$5) ){ goto $label$63 }
	$4 = (int_64)6
	
.LOOP $label$64:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$64 }
	*($3 + [256]) = (int_64)3617214756542218240
	*($3 + [248]) = $5
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [17706]
	$7 = (int_64)0
	
.LOOP $label$65:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$70 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$9 = ($9 + [-91])
	goto $label$68 
	
.LABEL $label$70
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$69
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$67
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$66
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$7 = ((int_64)$5 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$65 }
	*($3 + [432]) = $7
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [17718]
	$7 = (int_64)0
	
.LOOP $label$71:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$76 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$75 }
	$9 = ($9 + [-91])
	goto $label$74 
	
.LABEL $label$76
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$75
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$74
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$73
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$72
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$71 }
	*($3 + [216]) = $7
	$4 = *(($3 + [336]))
	$5 = *($3 + [328])
	CALL eosio_assert([1], [18518])
	CALL eosio_assert([1], [18533])
	CALL $44(($3 + [232]), $0, ($3 + [304]))
	*(($3 + [24])) = $4
	$6 = ($3 + [240])
	*(($9 = ($3 + [40]))) = *($6)
	*($6) = [0]
	*($3 + [16]) = ((int_64)$5 / (int_64)200)
	*($3) = *($0)
	*($3 + [8]) = *(($3 + [320]))
	*($3 + [32]) = *($3 + [232])
	*($3 + [232]) = (int_64)0
	CALL $45($0, ($3 + [248]), ($3 + [432]), ($3 + [216]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$77 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$77
	if ( ((*($3 + [232]) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($3 + [240])))
	
.LABEL $label$63
	CALL $46(($0 + [8]), ($3 + [304]))
	*(($3 + [32])) = *(($1 + [8]))
	*(($3 + [56])) = *(($2 + [8]))
	*(($3 + [64])) = *(($2 + [16]))
	*(($3 + [72])) = *(($2 + [24]))
	*($3 + [41]) = $12
	*($3) = *($3 + [304])
	*($3 + [8]) = *($3 + [312])
	*($3 + [16]) = *((($3 + [304]) + [16]))
	*($3 + [24]) = *($1)
	*($3 + [40]) = *(($3 + [344]))
	*($3 + [48]) = *($2)
	*(($3 + [104])) = *(($10 + [24]))
	*(($3 + [96])) = *(($10 + [16]))
	*(($3 + [88])) = *(($10 + [8]))
	*(($3 + [120])) = *(($11 + [8]))
	*(($3 + [128])) = *(($11 + [16]))
	*(($3 + [136])) = *(($11 + [24]))
	*($3 + [144]) = $14
	*($3 + [80]) = *($10)
	*($3 + [112]) = *($11)
	*(($3 + [152])) = $13
	*(($3 + [192])) = (int_64)1397703940
	*(($3 + [176])) = *((($3 + [288]) + [8]))
	*($3 + [160]) = $16
	*($3 + [184]) = $15
	*($3 + [168]) = *($3 + [288])
	$5 = *($0)
	$4 = (int_64)6
	
.LOOP $label$78:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$78 }
	*($3 + [256]) = (int_64)3617214756542218240
	*($3 + [248]) = $5
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17740]
	$7 = (int_64)0
	
.LOOP $label$79:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$80 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$82 }
	$9 = ($9 + [-91])
	goto $label$81 
	
.LABEL $label$82
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$81
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$80
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$79 }
	*($3 + [232]) = $7
	$4 = (int_64)6
	
.LOOP $label$83:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$83 }
	*($3 + [432]) = (int_64)-4994024814571159552
	CALL $47($0, ($3 + [248]), ($3 + [232]), ($3 + [432]), $3)
	$global$0 = ($3 + [448])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $141($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [17881])
	CALL memcpy($3, $6, [8])
	CALL eosio_assert(((uint_32)($1 + [-8]) > (uint_32)[31]), [17881])
	$2 = ($3 + [16])
	CALL memcpy($2, ($6 + [8]), [32])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $145($6)
	
.LABEL $label$5
	*(($1 = (($3 + [48]) + [16]))) = *(($2 + [16]))
	*(($6 = (($3 + [48]) + [24]))) = *(($2 + [24]))
	*($3 + [48]) = *($2)
	*($3 + [56]) = *(($2 + [8]))
	$7 = *($3)
	*((($3 + [80]) + [24])) = *($6)
	*((($3 + [80]) + [16])) = *($1)
	*($3 + [120]) = $7
	*($3 + [88]) = *($3 + [56])
	*($3 + [80]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($3 + [120])), (int_32 ($3 + [80])), (int_32 $5))
	$global$0 = ($3 + [128])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [24]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$20()), [17955])
	*($4 + [36]) = $3
	*($4 + [32]) = $1
	*($4 + [40]) = ($4 + [24])
	*(($5 = CALL _Znwj([64])) + [48]) = $1
	CALL $85(($4 + [32]), $5)
	*($4 + [16]) = $5
	$3 = [0]
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	
.LOOP $label$1:
	$6 = *(($5 + $3))
	CALL $112(($4 + [32]), *((uint_32($6 >> [4]) + [8223])))
	CALL $112(($4 + [32]), *((($6 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$2 = CALL $4(($4 + [32]))
	if ( (*($4 + [32]) & [1]) ){ goto $label$3 }
	$6 = $5
	goto $label$2 
	
.LABEL $label$3
	CALL _ZdlPv(*(($4 + [40])))
	$6 = *($4 + [16])
	
.LABEL $label$2
	*($4 + [32]) = $2
	$7 = *($6 + [52])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$5 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [16]) = [0]
	*($3) = $6
	*($8) = ($3 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $86(($1 + [24]), ($4 + [16]), ($4 + [32]), ($4 + [12]))
	
.LABEL $label$4
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [16])
	*($4 + [16]) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [124]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19395])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4229865212519383040)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [19341])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [19341])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $48(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $94(*($1), ($0 + [32]))
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$6 = ($5 + ((int_32)$6 * (int_32)[40]))
	$5 = CALL $41($6, $1, *($2), *($3), $4)
	$10 = ($5 + [40])
	$8 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	$11 = ($8 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$5 = ($7 + $1)
	*((($8 = ($6 + $1)) + [-32])) = *(($5 + [-32]))
	*(($8 + [-40])) = *(($5 + [-40]))
	*(($2 = ($8 + [-24]))) = (int_64)0
	*(($3 = ($8 + [-16]))) = [0]
	$4 = ($5 + [-24])
	*($2) = *($4)
	$2 = ($5 + [-16])
	*($3) = *($2)
	*($2) = [0]
	*(($2 = ($8 + [-12]))) = (int_64)0
	*(($8 = ($8 + [-4]))) = [0]
	$3 = ($5 + [-12])
	*($2) = *($3)
	*($4) = (int_64)0
	$5 = ($5 + [-4])
	*($8) = *($5)
	*($5) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$5 = ($6 + $1)
	$8 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $8
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = *(($8 + [-12]))
	if ( ($5 == 0) ){ goto $label$10 }
	*(($8 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = ($8 + [-40])
	$1 = *(($8 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($8 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $95($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $30($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $96($2, $1)
	CALL $98(CALL $97(CALL $97($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [80])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $30(($7 + [28]), [182])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	*($5 + [28]) = ($4 + [8])
	*($5 + [32]) = ($4 + [16])
	*($5 + [36]) = ($4 + [24])
	*($5 + [40]) = ($4 + [40])
	*($5 + [44]) = ($4 + [41])
	*($5 + [48]) = ($4 + [48])
	*($5 + [52]) = ($4 + [80])
	*($5 + [56]) = ($4 + [112])
	*($5 + [60]) = ($4 + [144])
	*($5 + [64]) = ($4 + [160])
	*($5 + [68]) = ($4 + [168])
	*($5 + [72]) = ($4 + [184])
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $99(($5 + [24]), ($5 + [16]))
	$4 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$12 = ($4 - $8)
	$9 = [0]
	
.LOOP $label$7:
	$2 = ($8 + $9)
	*((($4 = ($7 + $9)) + [-32])) = *(($2 + [-32]))
	*(($4 + [-40])) = *(($2 + [-40]))
	*(($1 = ($4 + [-24]))) = (int_64)0
	*(($6 = ($4 + [-16]))) = [0]
	$3 = ($2 + [-24])
	*($1) = *($3)
	$1 = ($2 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($4 + [-12]))) = (int_64)0
	*(($4 = ($4 + [-4]))) = [0]
	$6 = ($2 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$2 = ($2 + [-4])
	*($4) = *($2)
	*($2) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$7 }
	$7 = ($7 + $9)
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($4 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($4 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($4 + [-40])
	$9 = *(($4 + [-24]))
	if ( ($9 == 0) ){ goto $label$11 }
	*(($4 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$11
	$4 = $2
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($5 + [80])
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($1 + [8])
	$4 = *($2)
	$6 = *(($1 + [36]))
	$5 = *(($1 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($6 + [-24])
	$7 = *($2)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [120]) == (int_32)$3), [17807])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$2 = CALL db_find_i64(*($3), *(($1 + [16])), (int_64)4229865212519383040, $4)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $48($3, $2)
	CALL eosio_assert(((int_32)*($7 + [120]) == (int_32)$3), [17807])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [17793])
	CALL memcpy($0, $7, [128])
}

int_32 .FUNC $56 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [19257])
	$3 = *($0 + [4])
	$4 = *($3 + [56])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$5 = *($4 + [8])
	$6 = *($4)
	*($1 + [24]) = [0]
	*($1 + [16]) = (int_64)0
	
.LOOP $label$2:
	$4 = *(($3 + $2))
	CALL $112(($1 + [16]), *((uint_32($4 >> [4]) + [8223])))
	CALL $112(($1 + [16]), *((($4 & [15]) + [8223])))
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	$7 = CALL $4(($1 + [16]))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$3
	$4 = CALL db_idx64_find_primary($6, $5, (int_64)7615815668302086144, ($1 + [16]), $7)
	*(*(($0 + [4])) + [56]) = $4
	
.LABEL $label$1
	*($1 + [16]) = (int_64)0
	$2 = CALL db_idx64_next($4, ($1 + [16]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$4 }
	CALL $55(($1 + [8]), *(*($0)), *($1 + [16]))
	$4 = *($1 + [12])
	*(($0 + [4])) = $4
	*(($4 + [56])) = $2
	$global$0 = ($1 + [32])
	return $0
	
.LABEL $label$4
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [32])
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [18592])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$20()), [18637])
	$3 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	
.LOOP $label$1:
	$4 = *(($1 + $3))
	CALL $112($2, *((uint_32($4 >> [4]) + [8223])))
	CALL $112($2, *((($4 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$1 }
	$5 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$2
	$7 = ($0 + [28])
	$8 = *($7)
	$6 = *($0 + [24])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$4 }
	$9 = ($2 + [8])
	$10 = $8
	
.LOOP $label$5:
	$10 = ($10 + [-24])
	$11 = *($10)
	$3 = [0]
	*($9) = [0]
	*($2) = (int_64)0
	
.LOOP $label$6:
	$4 = *(($11 + $3))
	CALL $112($2, *((uint_32($4 >> [4]) + [8223])))
	CALL $112($2, *((($4 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$6 }
	$12 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$7
	if ( ((int_64)$12 == (int_64)$5) ){ goto $label$3 }
	$8 = $10
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$5 }
	
.LABEL $label$4
	$8 = $6
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)*(($0 + [24]))), [18687])
	$10 = *($7)
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$10 }
	$3 = $8
	
.LOOP $label$11:
	$11 = *($3)
	*($3) = [0]
	$8 = ($3 + [-24])
	$4 = *($8)
	*($8) = $11
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	*(($3 + [-8])) = *(($3 + [16]))
	*(($3 + [-16])) = *(($3 + [8]))
	$3 = ($3 + [24])
	if ( ((int_32)$10 != (int_32)$3) ){ goto $label$11 }
	$4 = ($3 + [-24])
	$8 = *(($0 + [28]))
	if ( ((int_32)($8 + [24]) != (int_32)$3) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = ($8 + [-24])
	
.LABEL $label$9
	
.LOOP $label$13:
	$8 = ($8 + [-24])
	$3 = *($8)
	*($8) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	CALL _ZdlPv($3)
	
.LABEL $label$14
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$13 }
	
.LABEL $label$8
	*(($0 + [28])) = $4
	CALL db_remove_i64(*(($1 + [52])))
	$3 = *(($1 + [56]))
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$16 }
	$12 = *($0 + [8])
	$5 = *($0)
	$3 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	
.LOOP $label$17:
	$4 = *(($1 + $3))
	CALL $112($2, *((uint_32($4 >> [4]) + [8223])))
	CALL $112($2, *((($4 & [15]) + [8223])))
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[32]) ){ goto $label$17 }
	$13 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$18
	$3 = CALL db_idx64_find_primary($5, $12, (int_64)7615815668302086144, $2, $13)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$16
	CALL db_idx64_remove($3)
	
.LABEL $label$15
	$global$0 = ($2 + [16])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $137(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $138([8240])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8240], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $126())
	*(CALL $126()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $135($4, ($3 + [12]), $2)
	$5 = CALL $126()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $118($3)
	
.LABEL $label$1
	CALL $119($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $114 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	
.LOOP $label$1:
	$5 = *(($1 + $4))
	CALL $112($3, *((uint_32($5 >> [4]) + [8223])))
	CALL $112($3, *((($5 & [15]) + [8223])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$5 = ($3 + [8])
	$4 = ( *($5) ? ($3 | [1]) : (*($3) & [1]) )
	CALL assert_sha256($4, CALL $138($4), $2)
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$2
	$global$0 = ($3 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $110($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $108($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $138($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $108($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $139 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $118 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $121($1, $0, [17753])
	CALL $122()
	(unreachable)
}

void .FUNC $119 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $121($1, $0, [19447])
	CALL $123()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [17807])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $74($0, $4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$0), [17807])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18092])
	CALL $75($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $76($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)1397703940
	*($2) = (int_64)0
	CALL eosio_assert([1], [17886])
	$3 = [0]
	$4 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [17935])
	CALL $73($0, ($1 + [48]), *($1), $2)
	$global$0 = ($2 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [16])
	$global$0 = $3
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	$6 = ($3 + [8])
	$7 = $5
	
.LOOP $label$3:
	$7 = ($7 + [-24])
	$8 = *($7)
	$9 = [0]
	*($6) = [0]
	*($3) = (int_64)0
	
.LOOP $label$4:
	$10 = *(($8 + $9))
	CALL $112($3, *((uint_32($10 >> [4]) + [8223])))
	CALL $112($3, *((($10 & [15]) + [8223])))
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[32]) ){ goto $label$4 }
	$11 = CALL $4($3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$5
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$1 }
	$5 = $7
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$5 = $4
	
.LABEL $label$1
	if ( ((int_32)$5 == (int_32)*(($1 + [24]))) ){ goto $label$7 }
	$9 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$1), [17807])
	*($0 + [4]) = $9
	goto $label$6 
	
.LABEL $label$7
	$9 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7615815668302086144, $2)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$8 }
	$9 = CALL $84($1, $9)
	CALL eosio_assert(((int_32)*($9 + [48]) == (int_32)$1), [17807])
	*($0 + [4]) = $9
	goto $label$6 
	
.LABEL $label$8
	*($0 + [4]) = [0]
	
.LABEL $label$6
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	$8 = ($global$0 - [96])
	$global$0 = $8
	$9 = *($1)
	if ( ($9 & [1]) ){ goto $label$6 }
	$9 = uint_32($9 >> [1])
	$10 = ($1 + [1])
	$11 = ($10 + $9)
	if ( $9 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$9 = *($1 + [4])
	$10 = *($1 + [8])
	$11 = ($10 + $9)
	if ( ($9 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $125(*($10)) ){ goto $label$4 }
	$10 = ($10 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$7 }
	$10 = $11
	$9 = [1]
	$12 = *($1)
	if ( (($12 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$8 }
	$9 = ($10 + [1])
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $125(*($9)) == 0) ){ goto $label$10 }
	$9 = ($9 + [1])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($10) = *($9)
	$10 = ($10 + [1])
	$9 = ($9 + [1])
	if ( ((int_32)$11 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	$9 = [1]
	$12 = *($1)
	if ( ($12 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$11 = ($1 + $9)
	$9 = ($11 + uint_32($12 >> $9))
	goto $label$1 
	
.LABEL $label$2
	$11 = *($1 + [8])
	$9 = ($11 + *($1 + [4]))
	
.LABEL $label$1
	CALL $114($1, ($10 - $11), ($9 - $10))
	$12 = *($1)
	if ( ($12 & [1]) ){ goto $label$13 }
	$10 = ($1 + [1])
	$9 = [0]
	$11 = [0]
	$12 = uint_32($12 >> [1])
	if ( $12 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$10 = *($1 + [8])
	$9 = [0]
	$11 = [0]
	$12 = *($1 + [4])
	if ( ($12 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$11 = [0]
	
.LOOP $label$14:
	$11 = ($11 + ((int_32)*($10) == (int_32)[45]))
	$10 = ($10 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$14 }
	$11 = ((int_32)$11 == (int_32)[5])
	
.LABEL $label$11
	CALL eosio_assert($11, [18740])
	*($8 + [88]) = $9
	*($8 + [80]) = (int_64)0
	*($8 + [92]) = [45]
	*($8) = $9
	*($8 + [79]) = [1]
	$10 = CALL $5($1, ($8 + [80]), ($8 + [92]), $8, ($8 + [79]))
	$11 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)$9), [18753])
	*($2) = CALL $117(($8 + [80]), $9, [10])
	*($8 + [92]) = ($10 + [1])
	*($8) = [45]
	*($8 + [79]) = [1]
	$10 = CALL $5($1, ($8 + [80]), $8, ($8 + [92]), ($8 + [79]))
	$11 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)$9), [18767])
	$11 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($11 >> [1]) : ($11 & [1]) ) == (int_32)[64]), [8331])
	CALL $3(($8 + [80]), $8, [32])
	$11 = ($8 + [24])
	*(($3 + [24])) = *($11)
	$12 = ($8 + [16])
	*(($3 + [16])) = *($12)
	*(($3 + [8])) = *($8 + [8])
	*($3) = *($8)
	*($8 + [92]) = ($10 + [1])
	*($8) = [45]
	*($8 + [79]) = [1]
	$10 = CALL $5($1, ($8 + [80]), $8, ($8 + [92]), ($8 + [79]))
	$3 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($3 >> [1]) : ($3 & [1]) ) != (int_32)$9), [18780])
	$3 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($3 >> [1]) : ($3 & [1]) ) == (int_32)[40]), [8346])
	CALL $3(($8 + [80]), $8, [20])
	*(($4 + [24])) = *($11)
	*(($4 + [16])) = *($12)
	*(($4 + [8])) = *($8 + [8])
	*($4) = *($8)
	*($8 + [92]) = ($10 + [1])
	*($8) = [45]
	*($8 + [79]) = [1]
	$10 = CALL $5($1, ($8 + [80]), $8, ($8 + [92]), ($8 + [79]))
	$11 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)$9), [18798])
	*($5) = CALL $120(($8 + [80]), $9, [10])
	*($8 + [92]) = ($10 + [1])
	*($8) = [45]
	*($8 + [79]) = [1]
	$3 = CALL $5($1, ($8 + [80]), $8, ($8 + [92]), ($8 + [79]))
	*($8 + [92]) = $3
	$10 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($10 >> [1]) : ($10 & [1]) ) != (int_32)$9), [18812])
	$10 = ( *($8 + [88]) ? (($8 + [80]) | [1]) : (*($8 + [80]) & [1]) )
	
.LOOP $label$15:
	$11 = ($10 + $9)
	$12 = ($9 + [1])
	$9 = $12
	if ( *($11) ){ goto $label$15 }
	$13 = (CASTING uint_64)(uint_32 ($12 + [-1]))
	$14 = (int_64)0
	$15 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$16:
	$17 = (int_64)0
	if ( ((uint_64)$14 >= (uint_64)$13) ){ goto $label$17 }
	$9 = *($10)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$9 = ($9 + [-91])
	goto $label$18 
	
.LABEL $label$19
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$21 }
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$20 
	
.LABEL $label$21
	$17 = ((int_64)$17 & (int_64)15)
	
.LABEL $label$20
	$10 = ($10 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$16 }
	*($6) = $16
	$10 = ($3 + [1])
	*($8 + [92]) = $10
	CALL $107($8, $1, $10, [-1], $1)
	if ( (*($8 + [80]) & [1]) ){ goto $label$23 }
	*($8 + [80]) = [0]
	goto $label$22 
	
.LABEL $label$23
	*(*(($8 + [88]))) = [0]
	*($8 + [84]) = [0]
	
.LABEL $label$22
	CALL $109(($8 + [80]), [0])
	*(($9 = (($8 + [80]) + [8]))) = *(($8 + [8]))
	*($8 + [80]) = *($8)
	$10 = *($8 + [80])
	CALL eosio_assert(((int_32)( *($8 + [84]) ? uint_32($10 >> [1]) : ($10 & [1]) ) != (int_32)[0]), [18824])
	*($8 + [79]) = [1]
	CALL $9($8, ($8 + [80]), ($8 + [79]))
	CALL memcpy($7, $8, [66])
	if ( ((*($8 + [80]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$24
	$global$0 = ($8 + [96])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17881])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17881])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17881])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [17881])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $92(*($1), ($0 + [32]))
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$2 = *($2)
	$5 = *($3 + [8])
	*($4 + [24]) = $5
	$3 = ((uint_32)[9850] / (uint_32)$2)
	$6 = ((int_64)(CASTING uint_64)(uint_32 ((uint_32)((([9850] - ((int_32)$2 * (int_32)$3)) << [1]) & [65534]) >= (uint_32)$2)) + (int_64)(CASTING uint_64)(uint_32 $3))
	$7 = ((int_64)((uint_64)((int_64)$6 + (int_64)9899) / (uint_64)((int_64)$6 + (int_64)-100)) * (int_64)10000)
	*($4 + [16]) = $7
	CALL eosio_assert([1], [17886])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$3 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $3 ){ goto $label$5 }
	$3 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [17935])
	CALL $79($4, $1)
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$5), [19093])
	$2 = ( $4 ? ($4 + [16]) : ((int_64)*($4) < (int_64)$7) )
	*($0) = *($2)
	*(($0 + [8])) = *(($2 + [8]))
	$global$0 = ($4 + [32])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)1397703940), [18837])
	$2 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$2 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [18860])
	CALL eosio_assert(((int_64)*($1) > (int_64)999), [18877])
	CALL eosio_assert(((int_64)*($1) < (int_64)1000001), [18920])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$6 = ($global$0 - [96])
	$global$0 = $6
	*($6 + [80]) = (int_64)0
	*($6 + [88]) = [0]
	$7 = (($6 + [80]) | [1])
	$8 = *($1)
	
.LOOP $label$1:
	$9 = ((uint_64)$8 / (uint_64)(int_64)10)
	$1 = (CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$9 * (int_64)10))
	CALL $2(($6 + [8]), int_32((( ($1) | [48]) ? ($1 + [55]) : ($1 <= [10]) ) << [24]) >> [24]), ($6 + [80]))
	if ( (*($6 + [80]) & [1]) ){ goto $label$3 }
	*($6 + [80]) = [0]
	goto $label$2 
	
.LABEL $label$3
	*(*((($6 + [80]) + [8]))) = [0]
	*($6 + [84]) = [0]
	
.LABEL $label$2
	CALL $109(($6 + [80]), [0])
	*((($6 + [80]) + [8])) = *((($6 + [8]) + [8]))
	*($6 + [80]) = *($6 + [8])
	$1 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $9
	if ( $1 ){ goto $label$1 }
	CALL $111(($6 + [80]), [19287])
	$1 = [0]
	*($6 + [16]) = [0]
	*($6 + [8]) = (int_64)0
	
.LOOP $label$4:
	$10 = *(($2 + $1))
	CALL $112(($6 + [8]), *((uint_32($10 >> [4]) + [8223])))
	CALL $112(($6 + [8]), *((($10 & [15]) + [8223])))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$4 }
	$1 = *($6 + [8])
	$2 = ($1 & [1])
	$10 = (($6 + [8]) + [8])
	CALL $113(($6 + [80]), ( *($10) ? (($6 + [8]) | [1]) : $2 ), ( *($6 + [12]) ? uint_32($1 >> [1]) : $2 ))
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$5
	CALL $111(($6 + [80]), [19287])
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = [0]
	$2 = (($6 + [48]) | [1])
	$8 = *($3)
	
.LOOP $label$6:
	$9 = ((uint_64)$8 / (uint_64)(int_64)10)
	$1 = (CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$9 * (int_64)10))
	CALL $2(($6 + [8]), int_32((( ($1) | [48]) ? ($1 + [55]) : ($1 <= [10]) ) << [24]) >> [24]), ($6 + [48]))
	if ( (*($6 + [48]) & [1]) ){ goto $label$8 }
	*($6 + [48]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($6 + [48]) + [8]))) = [0]
	*($6 + [52]) = [0]
	
.LABEL $label$7
	CALL $109(($6 + [48]), [0])
	*((($6 + [48]) + [8])) = *($10)
	*($6 + [48]) = *($6 + [8])
	$1 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $9
	if ( $1 ){ goto $label$6 }
	$1 = *($6 + [48])
	$10 = ($1 & [1])
	$3 = ($6 + [56])
	CALL $113(($6 + [80]), ( *($3) ? $2 : $10 ), ( *($6 + [52]) ? uint_32($1 >> [1]) : $10 ))
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($3))
	
.LABEL $label$9
	CALL $111(($6 + [80]), [19287])
	*($6 + [48]) = *($4)
	CALL $49(($6 + [8]), ($6 + [48]))
	$1 = *($6 + [8])
	$10 = ($1 & [1])
	CALL $113(($6 + [80]), ( *($6 + [16]) ? (($6 + [8]) | [1]) : $10 ), ( *($6 + [12]) ? uint_32($1 >> [1]) : $10 ))
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$10
	$10 = ($6 + [88])
	$1 = ( *($10) ? $7 : (*($6 + [80]) & [1]) )
	CALL sha256($1, CALL $138($1), ($6 + [48]))
	*($6 + [7]) = [0]
	CALL $10(($6 + [8]), [8948], ($6 + [7]))
	CALL assert_recover_key(($6 + [48]), $5, [66], ($6 + [8]), [34])
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$11
	$global$0 = ($6 + [96])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = CALL current_time()
	$4 = ((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((uint_64)*($2) > (uint_64)$4), [19190])
	$5 = [0]
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	
.LOOP $label$1:
	$6 = *(($1 + $5))
	CALL $112(($3 + [16]), *((uint_32($6 >> [4]) + [8223])))
	CALL $112(($3 + [16]), *((($6 & [15]) + [8223])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	$7 = CALL $4(($3 + [16]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$2
	$8 = ($0 + [88])
	CALL $55(($3 + [8]), $8, $7)
	CALL eosio_assert((*($3 + [12]) == 0), [19208])
	*($3) = $8
	*($3 + [16]) = (int_64)0
	*($3 + [40]) = $4
	$5 = [0]
	$6 = $8
	$9 = [0]
	$10 = CALL db_idx64_upperbound(*($0 + [88]), *(($0 + [96])), (int_64)7615815668302086144, ($3 + [40]), ($3 + [16]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	CALL $55(($3 + [32]), $8, *($3 + [16]))
	*((($9 = *($3 + [36])) + [56])) = $10
	$6 = *($3)
	
.LABEL $label$3
	*($3 + [16]) = (int_64)0
	*($3 + [40]) = (int_64)0
	$10 = CALL db_idx64_lowerbound(*($6), *($6 + [8]), (int_64)7615815668302086144, ($3 + [40]), ($3 + [16]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	CALL $55(($3 + [32]), $6, *($3 + [16]))
	*((($5 = *($3 + [36])) + [56])) = $10
	
.LABEL $label$4
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$5 }
	$10 = $3
	$6 = [1]
	
.LOOP $label$6:
	*($3 + [16]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 $10))
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [19223])
	CALL $56(($3 + [16]))
	CALL $57(*($3), $5)
	$4 = *($3 + [16])
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$9 == (int_32)$5)) ){ goto $label$5 }
	$10 = (CASTING uint_32)(uint_64 $4)
	$11 = ($6 <= [3])
	$6 = ($6 + [1])
	if ( $11 ){ goto $label$6 }
	
.LABEL $label$5
	$4 = *($0)
	*($3 + [20]) = $2
	*($3 + [16]) = $1
	CALL $58(($3 + [40]), $8, $4, ($3 + [16]))
	$global$0 = ($3 + [48])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$20()), [17955])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([144])
	CALL $91($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [124])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $63(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_64 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = ($0 + [24])
	$3 = *($2)
	if ( ((int_64)$3 != (int_64)-1) ){ goto $label$1 }
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = CALL db_lowerbound_i64(*($4), *(($0 + [16])), (int_64)4229865212519383040, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $48($4, $5)
	*($1 + [12]) = [0]
	*($1 + [8]) = $4
	$3 = *(*(CALL $59(($1 + [8])) + [4]))
	$3 = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [24])) = $3
	
.LABEL $label$1
	$4 = ($0 + [128])
	CALL eosio_assert((uint_64)($3 <= (int_64)-2), [19289])
	*($1 + [8]) = *($2)
	$2 = *(($0 + [156]))
	if ( ((int_32)$2 == (int_32)*(($0 + [152]))) ){ goto $label$4 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$4), [17807])
	if ( $2 ){ goto $label$3 }
	$2 = ($1 + [8])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$2 = CALL $60($4, $2)
	CALL eosio_assert(((int_32)*($2 + [8]) == (int_32)$4), [17807])
	goto $label$3 
	
.LABEL $label$5
	$2 = ($1 + [8])
	
.LABEL $label$3
	*($1 + [8]) = ((int_64)*($2) + (int_64)1)
	CALL $61($4, ($1 + [8]), *($0))
	$3 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $3
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $131($3, (int_64)0)
	$4 = CALL $133($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$20()), [17955])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [17886])
	$6 = ($5 + [8])
	$7 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [17935])
	*($5 + [16]) = $1
	$8 = *($3)
	*($5) = *($8)
	*(($5 + [8])) = *(($8 + [8]))
	CALL eosio_assert([1], [18006])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [18006])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$10 = CALL db_store_i64(*($1 + [8]), (int_64)8759794652466717184, $2, (int_64)8759794652466717184, ($4 + [16]), [16])
	*($5 + [20]) = $10
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)8759794652466717184) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)8759794652466717185
	
.LABEL $label$6
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)8759794652466717184
	*($4 + [4]) = $10
	$11 = ($1 + [28])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = (int_64)8759794652466717184
	*($8 + [16]) = $10
	*($4 + [8]) = [0]
	*($8) = $5
	*($11) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $70(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$8 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [32])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$20()), [17955])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [17886])
	$6 = ($5 + [8])
	$7 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [17935])
	*($5 + [16]) = $1
	$8 = *($3)
	*($5) = *($8)
	*(($5 + [8])) = *(($8 + [8]))
	CALL eosio_assert([1], [18006])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [18006])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$10 = CALL db_store_i64(*($1 + [8]), (int_64)8759794652466717184, $2, (int_64)8759794652466717184, ($4 + [16]), [16])
	*($5 + [20]) = $10
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)8759794652466717184) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)8759794652466717185
	
.LABEL $label$6
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)8759794652466717184
	*($4 + [4]) = $10
	$11 = ($1 + [28])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = (int_64)8759794652466717184
	*($8 + [16]) = $10
	*($4 + [8]) = [0]
	*($8) = $5
	*($11) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $70(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$8 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [32])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [17807])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)8759794652466717184, (int_64)8759794652466717184)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $66($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [17807])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $69($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($4 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17881])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17881])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17881])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17881])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [17881])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [17881])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [17881])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[19]), [17881])
	CALL memcpy($2, *($3 + [4]), [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17881])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [18127])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$20()), [18173])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [18224])
	CALL eosio_assert([1], [18006])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18006])
	CALL memcpy(($4 | [8]), $5, [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)8759794652466717184) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)8759794652466717185
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [17858])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $141($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [17886])
	$10 = ($9 + [8])
	$11 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [17935])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [17881])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [17881])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	*($3 + [16]) = (int_64)8759794652466717184
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = (int_64)8759794652466717184
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $70($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $145($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [17807])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $60($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [17807])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [18092])
	CALL $88($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $89($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [17858])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $141($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [17881])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $90(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [17886])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [17935])
	*($0 + [120]) = $1
	*($3 + [8]) = *($2 + [4])
	*($3 + [20]) = ($0 + [8])
	*($3 + [16]) = $0
	*($3 + [24]) = ($0 + [16])
	*($3 + [28]) = ($0 + [24])
	*($3 + [32]) = ($0 + [40])
	*($3 + [36]) = ($0 + [48])
	*($3 + [40]) = ($0 + [80])
	*($3 + [44]) = ($0 + [112])
	CALL $64(($3 + [16]), ($3 + [8]))
	*($0 + [124]) = *(*($2 + [8]))
	$global$0 = ($3 + [48])
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $141($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8960])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $141($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $100 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8948 align=4]) = (int_64)0
	*([0] + [8956]) = [0]
	$0 = CALL $138([17652])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*([0] + [8948]) = ($0 << [1])
	$1 = [8949]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8948]) = ($2 | [1])
	*([0] + [8956]) = $1
	*([0] + [8952]) = $0
	
.LABEL $label$3
	CALL memcpy($1, [17652], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL $128([4], [0], [8192])
	return (unreachable)
	
.LABEL $label$1
	CALL $105([8948])
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $145($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $105 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$20()), [17955])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [18006])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $90(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [18127])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$20()), [18173])
	*($1) = *(*($3))
	CALL eosio_assert([1], [18224])
	CALL eosio_assert([1], [18006])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [12])
	$5 = *(*($3 + [8]))
	$6 = *(*($3) + [8])
	$0 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	
.LOOP $label$1:
	$7 = *(($4 + $0))
	CALL $112($2, *((uint_32($7 >> [4]) + [8223])))
	CALL $112($2, *((($7 & [15]) + [8223])))
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[32]) ){ goto $label$1 }
	$8 = CALL $4($2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$2
	*($2) = *(*(($3 + [12])) + [32])
	$0 = CALL db_idx64_store($6, (int_64)7615815668302086144, $5, $8, $2)
	*(*($3 + [4]) + [56]) = $0
	$global$0 = ($2 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	*(($1 + [24])) = *(($5 + [24]))
	*(($1 + [16])) = *(($5 + [16]))
	*(($1 + [8])) = *(($5 + [8]))
	*($1 + [32]) = *(*($4 + [4]))
	CALL eosio_assert([1], [18006])
	CALL memcpy($2, $1, [32])
	CALL eosio_assert([1], [18006])
	CALL memcpy(($2 + [32]), ($1 + [32]), [8])
	$5 = [0]
	*($2 + [48]) = [0]
	*($2 + [40]) = (int_64)0
	
.LOOP $label$1:
	$4 = *(($1 + $5))
	CALL $112(($2 + [40]), *((uint_32($4 >> [4]) + [8223])))
	CALL $112(($2 + [40]), *((($4 & [15]) + [8223])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$1 }
	$6 = CALL $4(($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [48])))
	
.LABEL $label$2
	*($1 + [52]) = CALL db_store_i64(*($3 + [8]), (int_64)7615815668302086144, *(*($0 + [8])), $6, $2, [40])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$3 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($2 + [44]) = $1
	*($2 + [52]) = $1
	*($2 + [48]) = *(($0 + [8]))
	*($2 + [40]) = $3
	*($2 + [56]) = ($2 + [40])
	CALL $87(($2 + [56]), ($3 + [36]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [17858])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$2 = CALL $141($6)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	$7 = ($0 + [24])
	CALL db_get_i64($1, $2, $6)
	*(($4 = CALL _Znwj([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[31]), [17881])
	CALL memcpy($4, $2, [32])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[32]), [17881])
	CALL memcpy(($4 + [32]), ($2 + [32]), [8])
	*($4 + [56]) = [-1]
	*($4 + [52]) = $1
	*($3 + [8]) = $4
	$5 = [0]
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	
.LOOP $label$6:
	$1 = *(($4 + $5))
	CALL $112(($3 + [16]), *((uint_32($1 >> [4]) + [8223])))
	CALL $112(($3 + [16]), *((($1 & [15]) + [8223])))
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[32]) ){ goto $label$6 }
	$8 = CALL $4(($3 + [16]))
	if ( (*($3 + [16]) & [1]) ){ goto $label$8 }
	$1 = $4
	goto $label$7 
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [24])))
	$1 = *($3 + [8])
	
.LABEL $label$7
	*($3 + [16]) = $8
	$9 = *($1 + [52])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$5 = *($10)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($5 + [8]) = $8
	*($5 + [16]) = $9
	*($3 + [8]) = [0]
	*($5) = $1
	*($10) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $86($7, ($3 + [8]), ($3 + [16]), ($3 + [4]))
	if ( ($6 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $145($2)
	
.LABEL $label$9
	$5 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [17886])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [17935])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17881])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [17881])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [17858])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $141($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $82($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $83(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $145($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $80 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [17807])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $81($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [17807])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $145 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17640])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17448]
	$3 = (((int_32)$1 * (int_32)[12]) + [17448])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $142([9256], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $141 (int_32 $0)
{
	return CALL $142([9256], $0)
}

void .FUNC $140 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $143 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9248]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9252])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9248]) = [1]
	$2 = ($2 << [16])
	*([0] + [9252]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9252])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9252]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9248]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9248]) = [1]
	$3 = ($3 << [16])
	*([0] + [9252]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9252])
	
.LABEL $label$10
	*([0] + [9252]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $143($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8245])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18006])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18006])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [17807])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6820308914865700864, (int_64)6820308914865700864)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $74($1, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$1), [17807])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $77($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($4 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18006])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18006])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18006])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$20()), [17955])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [17886])
	$6 = ($5 + [8])
	$7 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [17935])
	*($5 + [16]) = $1
	$8 = *($3)
	*($5) = *($8)
	*(($5 + [8])) = *(($8 + [8]))
	CALL eosio_assert([1], [18006])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [18006])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$10 = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($4 + [16]), [16])
	*($5 + [20]) = $10
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$6
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)6820308914865700864
	*($4 + [4]) = $10
	$11 = ($1 + [28])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = (int_64)6820308914865700864
	*($8 + [16]) = $10
	*($4 + [8]) = [0]
	*($8) = $5
	*($11) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $78(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$8 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [32])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$20()), [17955])
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [17886])
	$6 = ($5 + [8])
	$7 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [17935])
	*($5 + [16]) = $1
	$8 = *($3)
	*($5) = *($8)
	*(($5 + [8])) = *(($8 + [8]))
	CALL eosio_assert([1], [18006])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [18006])
	CALL memcpy((($4 + [16]) | [8]), $6, [8])
	$10 = CALL db_store_i64(*($1 + [8]), (int_64)6820308914865700864, $2, (int_64)6820308914865700864, ($4 + [16]), [16])
	*($5 + [20]) = $10
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)6820308914865700864) ){ goto $label$6 }
	*(($1 + [16])) = (int_64)6820308914865700865
	
.LABEL $label$6
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)6820308914865700864
	*($4 + [4]) = $10
	$11 = ($1 + [28])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)*(($1 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = (int_64)6820308914865700864
	*($8 + [16]) = $10
	*($4 + [8]) = [0]
	*($8) = $5
	*($11) = ($8 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $78(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$7
	*($0 + [4]) = $5
	*($0) = $1
	$8 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [32])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [17858])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $141($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [17886])
	$10 = ($9 + [8])
	$11 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [17935])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [17881])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [17881])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	*($3 + [16]) = (int_64)6820308914865700864
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = (int_64)6820308914865700864
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $78($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $145($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

int_64 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = [0]
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	
.LOOP $label$1:
	$5 = *(($1 + $4))
	CALL $112(($3 + [16]), *((uint_32($5 >> [4]) + [8223])))
	CALL $112(($3 + [16]), *((($5 & [15]) + [8223])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$4 = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	
.LOOP $label$2:
	$5 = *(($2 + $4))
	CALL $112($3, *((uint_32($5 >> [4]) + [8223])))
	CALL $112($3, *((($5 & [15]) + [8223])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[20]) ){ goto $label$2 }
	$4 = *($3)
	$5 = ($4 & [1])
	$1 = ($3 + [8])
	CALL $113(($3 + [16]), ( *($1) ? ($3 | [1]) : $5 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$3
	$6 = ((uint_64)((uint_64)CALL $4(($3 + [16])) / (uint_64)(int_64)100) % (uint_64)(int_64)1000)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	$global$0 = ($3 + [32])
	return $6
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = [0]
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	
.LOOP $label$1:
	$5 = *(($1 + $4))
	CALL $112(($3 + [16]), *((uint_32($5 >> [4]) + [8223])))
	CALL $112(($3 + [16]), *((($5 & [15]) + [8223])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$1 }
	$4 = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	
.LOOP $label$2:
	$5 = *(($2 + $4))
	CALL $112($3, *((uint_32($5 >> [4]) + [8223])))
	CALL $112($3, *((($5 & [15]) + [8223])))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[20]) ){ goto $label$2 }
	$4 = *($3)
	$5 = ($4 & [1])
	$1 = ($3 + [8])
	CALL $113(($3 + [16]), ( *($1) ? ($3 | [1]) : $5 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $5 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*($1))
	
.LABEL $label$3
	$4 = ([99] - (CASTING uint_32)(uint_64 ((uint_64)CALL $4(($3 + [16])) % (uint_64)(int_64)100)))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$4
	$global$0 = ($3 + [32])
	return ($4 & [255])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)1397703940
	*($2) = (int_64)0
	CALL eosio_assert([1], [17886])
	$3 = [0]
	$4 = (int_64)5459781
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [17935])
	CALL $65($0, ($1 + [168]), *($1), $2)
	$global$0 = ($2 + [16])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [17706]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$6 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$7 = ($7 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$6 = ((int_64)$8 | (int_64)$6)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$1 }
	$3 = *($1)
	*(($2 + [56])) = [0]
	*($2 + [32]) = $3
	*($2 + [24]) = $6
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$5 = CALL $80(($2 + [24]), (int_64)5459781, [19171])
	*(($9 = (($2 + [8]) + [8]))) = *(($5 + [8]))
	*($2 + [8]) = *($5)
	$10 = *($2 + [48])
	if ( ($10 == 0) ){ goto $label$7 }
	$11 = ($2 + [52])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$11 }
	CALL _ZdlPv($7)
	
.LABEL $label$11
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($2 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $10
	
.LABEL $label$8
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$7
	CALL $28(($2 + [24]), $1)
	$3 = *($2 + [24])
	$8 = *($2 + [32])
	*($0) = *($2 + [8])
	$4 = *($9)
	*(($0 + [8])) = $4
	CALL eosio_assert(((int_64)$8 == (int_64)$4), [18283])
	$3 = (int_64)
	*($0) = $3(*($0) - $3))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [18331])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [18353])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [19152])
	$global$0 = ($2 + [64])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $30($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18006])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18006])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $72(CALL $71($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = [0]
	*((($5 = CALL memset($0, [0], [128])) + [32])) = (int_64)1398362884
	*($5 + [24]) = (int_64)0
	CALL eosio_assert([1], [17886])
	$6 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$0 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$0 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $0 ){ goto $label$5 }
	$0 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [17935])
	*($3 + [12]) = $1
	*($3 + [8]) = $1
	*($3 + [16]) = ($1 + $2)
	*($3 + [24]) = ($3 + [8])
	*($3 + [32]) = $5
	*($3 + [36]) = ($5 + [8])
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [40])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [80])
	*($3 + [60]) = ($5 + [112])
	CALL $64(($3 + [32]), ($3 + [24]))
	$global$0 = ($3 + [64])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $124($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18006])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18006])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [18006])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[19]), [18006])
	CALL memcpy(*($3 + [4]), $2, [20])
	*($3 + [4]) = (*($3 + [4]) + [20])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18006])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $129 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $127 (int_32 $0)
{
}