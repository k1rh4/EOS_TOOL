(data (i32.const 8192) "EOS\00")
(data (i32.const 8196) "read_transaction failed\00")
(data (i32.const 8220) "bett not fouond\00")
(data (i32.const 8236) "public key not found\00")
(data (i32.const 8257) "TransferOnly\00")
(data (i32.const 8270) "cannot pass end iterator to erase\00")
(data (i32.const 8304) "cannot increment end iterator\00")
(data (i32.const 8334) "error reading iterator\00")
(data (i32.const 8357) "read\00")
(data (i32.const 8362) "get\00")
(data (i32.const 8366) "object passed to erase is not in multi_index\00")
(data (i32.const 8411) "cannot erase objects in table of another contract\00")
(data (i32.const 8461) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8514) "cannot create objects in table of another contract\00")
(data (i32.const 8565) "write\00")
(data (i32.const 8571) "bet not found\00")
(data (i32.const 8585) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8634) "invalid symbol name\00")
(data (i32.const 8656) "\00\00\00\00\00\00\00?\9a\99\99?\00\00\00@\00\00\a0A\00\00\96C\00\80;E")
(data (i32.const 8684) "https://dice.center\00")
(data (i32.const 8704) "attempt to add asset with different symbol\00")
(data (i32.const 8747) "addition underflow\00")
(data (i32.const 8766) "addition overflow\00")
(data (i32.const 8784) "only EOS token allowed\00")
(data (i32.const 8807) "quantity invalid\00")
(data (i32.const 8824) "transfer quantity must be greater than 0.1\00")
(data (i32.const 8867) "transfer quantity must be not greater than 1\00")
(data (i32.const 8912) "unable to find key\00")
(data (i32.const 8931) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8982) "string is too long to be a valid symbol_code\00")
(data (i32.const 9027) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9080) "unexpected error in fixed_bytes constructor\00")
(data (i32.const 17540) "malloc_from_freed was designed to only be called after _heap was completely allocated\00write\00")
(data (i32.const 17632) "unexpected error in fixed_bytes constructor\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$4 (param i32 i32 i32)))
(import "env" "transaction_size" (func $fimport$5 (result i32)))
(import "env" "read_transaction" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$7 (result i32)))
(import "env" "read_action_data" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$9 (result i64)))
(import "env" "require_auth" (func $fimport$10 (param i64)))
(import "env" "db_find_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "__ashlti3" (func $fimport$19 (param i32 i64 i64 i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$32 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$33 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$36 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$38 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$39 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$40 (param i32 i32) (result i32)))
(import "env" "assert_sha256" (func $fimport$41 (param i32 i32 i32)))
(import "env" "assert_sha1" (func $fimport$42 (param i32 i32 i32)))
(import "env" "assert_sha512" (func $fimport$43 (param i32 i32 i32)))
(import "env" "assert_ripemd160" (func $fimport$44 (param i32 i32 i32)))
(import "env" "sha256" (func $fimport$45 (param i32 i32 i32)))
(import "env" "sha1" (func $fimport$46 (param i32 i32 i32)))
(import "env" "sha512" (func $fimport$47 (param i32 i32 i32)))
(import "env" "recover_key" (func $fimport$48 (param i32 i32 i32 i32 i32) (result i32)))
(import "env" "assert_recover_key" (func $fimport$49 (param i32 i32 i32 i32 i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $2))
(export "_Znwj" (func $44))
(export "_ZdlPv" (func $46))
(export "_Znaj" (func $45))
(export "_ZdaPv" (func $47))
(export "_ZnwjSt11align_val_t" (func $48))
(export "_ZnajSt11align_val_t" (func $49))
(export "_ZdlPvSt11align_val_t" (func $50))
(export "_ZdaPvSt11align_val_t" (func $51))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $6 $8 $10 $12 $14)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17676))
(global $global$2 i32 (i32.const 17676))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)1397703940), [8784])
	$2 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$2 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [8807])
	CALL eosio_assert(((int_64)*($1) > (int_64)999), [8824])
	CALL eosio_assert(((int_64)*($1) < (int_64)10001), [8867])
}

int_32 .FUNC $62 (int_32 $0)
{
	return CALL $63([9144], $0)
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = CALL $59([8192])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8982])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9027])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)0
	
.LABEL $label$1
	*(($3 + [40])) = [0]
	*($3 + [16]) = $2
	*($3 + [8]) = (int_64)6138663591592764928
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = CALL $32(($3 + [8]), $5, [8912])
	*($0) = *($4)
	*(($0 + [8])) = *(($4 + [8]))
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	$7 = ($3 + [36])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($3 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $0
	
.LABEL $label$8
	*($7) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL sha256($1, $2, ($3 + [16]))
	$4 = (int_64)0
	$1 = [16]
	$2 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	$6 = (($3 + [16]) + $2)
	if ( ($1 <= [2]) ){ goto $label$3 }
	$4 = ((int_64)$4 | (int_64)*($6))
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)(uint_64)$4 >> (uint_64)(int_64)56))
	$1 = ($1 + [-1])
	$4 = ((int_64)$4 << (int_64)8)
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$1 == (int_32)[1]), [17632])
	*($0 + [8]) = $5
	*($0) = ((int_64)$4 | (int_64)*($6))
	$1 = [16]
	$0 = ($0 + [16])
	$4 = (int_64)0
	$5 = (int_64)0
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$1 == (int_32)[16]) ){ goto $label$4 }
	if ( ($1 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($3, $4, $5, (($1 << [3]) + [-8]))
	$5 = *(($3 + [8]))
	$4 = *($3)
	
.LABEL $label$5
	*($0) = $4
	*($0 + [8]) = $5
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17528])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17336]
	$3 = (((int_32)$1 * (int_32)[12]) + [17336])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = *($0)
	*($3 + [131]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($3 + [130]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($3 + [129]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($3 + [128]) = (uint_64)$4 >> (uint_64)(int_64)56)
	$5 = *(($0 + [8]))
	*($3 + [123]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($3 + [122]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($3 + [121]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($3 + [120]) = (uint_64)$5 >> (uint_64)(int_64)56)
	$6 = (CASTING uint_32)(uint_64 $4)
	*($3 + [135]) = $6
	*($3 + [134]) = uint_32($6 >> [8])
	*($3 + [133]) = uint_32($6 >> [16])
	*($3 + [132]) = uint_32($6 >> [24])
	$6 = (CASTING uint_32)(uint_64 $5)
	*($3 + [127]) = $6
	*($3 + [126]) = uint_32($6 >> [8])
	*($3 + [125]) = uint_32($6 >> [16])
	*($3 + [124]) = uint_32($6 >> [24])
	$4 = *(($0 + [24]))
	*($3 + [143]) = $4
	$5 = *($0 + [16])
	*($3 + [147]) = (uint_64)$5 >> (uint_64)(int_64)32)
	*($3 + [146]) = (uint_64)$5 >> (uint_64)(int_64)40)
	*($3 + [145]) = (uint_64)$5 >> (uint_64)(int_64)48)
	*($3 + [144]) = (uint_64)$5 >> (uint_64)(int_64)56)
	*($3 + [139]) = (uint_64)$4 >> (uint_64)(int_64)32)
	*($3 + [138]) = (uint_64)$4 >> (uint_64)(int_64)40)
	*($3 + [137]) = (uint_64)$4 >> (uint_64)(int_64)48)
	*($3 + [136]) = (uint_64)$4 >> (uint_64)(int_64)56)
	$0 = (CASTING uint_32)(uint_64 $4)
	*($3 + [142]) = uint_32($0 >> [8])
	*($3 + [141]) = uint_32($0 >> [16])
	*($3 + [140]) = uint_32($0 >> [24])
	$0 = (CASTING uint_32)(uint_64 $5)
	*($3 + [151]) = $0
	*($3 + [150]) = uint_32($0 >> [8])
	*($3 + [149]) = uint_32($0 >> [16])
	*($3 + [148]) = uint_32($0 >> [24])
	$7 = ($3 + [118])
	$4 = *($1)
	$6 = ($3 + [48])
	
.LOOP $label$1:
	$0 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($3) = (($8) << [7]) | ($0 & [127]))
	$0 = $6
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[0]), [17626])
	CALL memcpy($0, $3, [1])
	$6 = ($0 + [1])
	if ( $8 ){ goto $label$1 }
	CALL eosio_assert(((int_32)($7 - $6) > (int_32)[64]), [17626])
	CALL memcpy($6, ($1 + [4]), [65])
	$1 = ($0 + [66])
	$7 = ($3 + [38])
	$4 = *($2)
	$6 = $3
	
.LOOP $label$2:
	$0 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($3 + [159]) = (($8) << [7]) | ($0 & [127]))
	$0 = $6
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[0]), [17626])
	CALL memcpy($0, ($3 + [159]), [1])
	$6 = ($0 + [1])
	if ( $8 ){ goto $label$2 }
	CALL eosio_assert(((int_32)($7 - $6) > (int_32)[32]), [17626])
	CALL memcpy($6, ($2 + [4]), [33])
	CALL assert_recover_key(($3 + [120]), ($3 + [48]), ($1 - ($3 + [48])), $3, (($0 + [34]) - $3))
	$global$0 = ($3 + [160])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [8565])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [8565])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [8565])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [8565])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [8565])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [8565])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8565])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $26($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8565])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8565])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $37(CALL $36($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8357])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8357])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8357])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8357])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8357])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8357])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8357])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8357])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8357])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8357])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8357])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8357])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8357])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8357])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$4 = *($0 + [44])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8357])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert5()), [8514])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [80]) = $1
	CALL $40(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [84])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $41(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [8366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [8411])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8461])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8334])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $62($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [80]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [64])
	*($3 + [56]) = ($5 + [65])
	*($3 + [60]) = ($5 + [66])
	*($3 + [64]) = ($5 + [67])
	*($3 + [68]) = ($5 + [68])
	*($3 + [72]) = ($5 + [69])
	*($3 + [76]) = ($5 + [72])
	CALL $21(($3 + [32]), ($3 + [24]))
	*($5 + [84]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $41(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $65($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8334])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $62($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	*($5 + [8]) = [0]
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	CALL $33(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $34(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $65($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [8357])
	CALL memcpy(($2 + [48]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$5 = (int_64)0
	$4 = [16]
	$6 = [0]
	$7 = ($2 + [16])
	$8 = (int_64)0
	
.LOOP $label$2:
	$9 = (($2 + [48]) + $6)
	if ( ($4 <= [2]) ){ goto $label$3 }
	$5 = ((int_64)$5 | (int_64)*($9))
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)(uint_64)$5 >> (uint_64)(int_64)56))
	$4 = ($4 + [-1])
	$5 = ((int_64)$5 << (int_64)8)
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$4 == (int_32)[1]), [9080])
	*($7 + [8]) = $8
	*($7) = ((int_64)$5 | (int_64)*($9))
	$4 = [16]
	$7 = ($7 + [16])
	$5 = (int_64)0
	$8 = (int_64)0
	$6 = ($6 + [1])
	if ( ((int_32)$6 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[16]) ){ goto $label$4 }
	if ( ($4 <= [2]) ){ goto $label$5 }
	CALL __ashlti3($2, $5, $8, (($4 << [3]) + [-8]))
	$8 = *(($2 + [8]))
	$5 = *($2)
	
.LABEL $label$5
	*($7) = $5
	*($7 + [8]) = $8
	
.LABEL $label$4
	*($3) = *($2 + [16])
	*(($3 + [8])) = *($2 + [24])
	*(($3 + [24])) = *((($2 + [16]) + [24]))
	*(($3 + [16])) = *((($2 + [16]) + [16]))
	$0 = *($0)
	$3 = *($1)
	$6 = *($3 + [4])
	$9 = [0]
	$5 = (int_64)0
	$7 = ($3 + [4])
	
.LOOP $label$6:
	CALL eosio_assert(($6 <= *(($3 + [8]))), [8362])
	$6 = *($7)
	$4 = *($6)
	$6 = ($6 + [1])
	*($7) = $6
	$9 = ($9 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $9)))
	$9 = ($9 + [7])
	if ( ($4 & [128]) ){ goto $label$6 }
	*($0 + [32]) = $5
	CALL eosio_assert(((uint_32)(*(($3 + [8])) - $6) > (uint_32)[64]), [8357])
	$4 = ($3 + [4])
	CALL memcpy(($0 + [36]), *($4), [65])
	*($4) = (*($4) + [65])
	$global$0 = ($2 + [80])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8565])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $43(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $55($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $60(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9124])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $60(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8565])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8565])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $16($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $53($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $53($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $52($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [160])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = *($3)
	*($1) = *($4)
	*($1 + [8]) = *($4 + [8])
	$5 = *($0)
	*(($1 + [24])) = *(($4 + [24]))
	*($1 + [16]) = *($4 + [16])
	$4 = *($3)
	*($1 + [32]) = *($4 + [32])
	*(($1 + [40])) = *(($4 + [40]))
	$4 = *($3)
	*($1 + [48]) = *($4 + [48])
	*(($1 + [56])) = *(($4 + [56]))
	$3 = *($3)
	*($1 + [64]) = *($3 + [64])
	*($1 + [65]) = *($3 + [65])
	*($1 + [66]) = *($3 + [66])
	*($1 + [67]) = *($3 + [67])
	*($1 + [68]) = *($3 + [68])
	*($1 + [69]) = *($3 + [69])
	*($1 + [72]) = *($3 + [72])
	*($2 + [96]) = ($2 + [78])
	*($2 + [92]) = $2
	*($2 + [88]) = $2
	*($2 + [104]) = ($2 + [88])
	*($2 + [116]) = ($1 + [8])
	*($2 + [112]) = $1
	*($2 + [120]) = ($1 + [16])
	*($2 + [124]) = ($1 + [32])
	*($2 + [128]) = ($1 + [48])
	*($2 + [132]) = ($1 + [64])
	*($2 + [136]) = ($1 + [65])
	*($2 + [140]) = ($1 + [66])
	*($2 + [144]) = ($1 + [67])
	*($2 + [148]) = ($1 + [68])
	*($2 + [152]) = ($1 + [69])
	*($2 + [156]) = ($1 + [72])
	CALL $29(($2 + [112]), ($2 + [104]))
	$6 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($5 + [8]), (int_64)4229443000054317056, *(*($0 + [8])), $6, $2, [78])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$1 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [160])
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $65($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $62($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9124])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $62($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $56())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $61($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [32])
	$4 = *($1)
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$3), [8931])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)4229443000054317056, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $22($3, $1)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$3), [8931])
	
.LABEL $label$1
	$1 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($1, [8220])
	CALL eosio_assert($1, [8270])
	CALL eosio_assert($1, [8304])
	$1 = CALL db_next_i64(*($7 + [84]), ($2 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	CALL $22($3, $1)
	
.LABEL $label$5
	CALL $23($3, $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $9 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $62($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [112]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8357])
	CALL memcpy(($4 + [112]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [120]) = *($4 + [112])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [120])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $65($2)
	
.LABEL $label$5
	$5 = *(($4 + [96]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [100])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$5 = *(($4 + [56]))
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($4 + [60])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($4 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( (int_64)(*($7) == 0) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [8931])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-5868465776486252544, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $25($3, $6)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [8931])
	
.LABEL $label$2
	CALL eosio_assert([1], [8270])
	CALL eosio_assert([1], [8304])
	$6 = CALL db_next_i64(*($7 + [52]), $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $25($3, $6)
	
.LABEL $label$6
	CALL $30($3, $7)
	
.LABEL $label$1
	*(($2 + [16])) = *(($1 + [8]))
	*(($2 + [24])) = *(($1 + [16]))
	*(($2 + [32])) = *(($1 + [24]))
	*(($2 + [37])) = *(($1 + [29]))
	*($2) = (int_64)0
	*($2 + [8]) = *($1)
	$8 = *($0)
	*($2 + [56]) = $2
	CALL $31(($2 + [48]), $3, $8, ($2 + [56]))
	$global$0 = ($2 + [64])
}

int_32 .FUNC $7 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$8 = [0]
	$9 = CALL action_data_size()
	if ( ($9 == 0) ){ goto $label$1 }
	if ( ($9 <= [513]) ){ goto $label$3 }
	$8 = CALL $62($9)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($3 - (($9 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$2
	CALL read_action_data($8, $9)
	
.LABEL $label$1
	*(($4 + [156])) = [0]
	$10 = (int_64)0
	*(($4 + [148])) = (int_64)0
	*(($4 + [140])) = (int_64)0
	*(($4 + [132])) = (int_64)0
	*($4 + [124 align=4]) = (int_64)0
	*($4 + [120]) = [0]
	$11 = ($8 + $9)
	$12 = (($4 + [120]) | [4])
	$2 = $8
	
.LOOP $label$4:
	CALL eosio_assert(($2 <= $11), [8362])
	$7 = ($7 & [255])
	$3 = *($2)
	$10 = ((int_64)$10 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $7)))
	$2 = ($2 + [1])
	$7 = ($7 + [7])
	if ( ($3 & [128]) ){ goto $label$4 }
	*($4 + [120]) = $10
	CALL eosio_assert(((uint_32)($11 - $2) > (uint_32)[32]), [8357])
	CALL memcpy($12, $2, [33])
	*(($4 + [28])) = ($2 + [33])
	*((($4 + [8]) + [24])) = $11
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $8
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*(($2 = (($4 + [160]) + [32]))) = *((($4 + [120]) + [32]))
	*(($7 = (($4 + [160]) + [24]))) = *((($4 + [120]) + [24]))
	*(($3 = (($4 + [160]) + [16]))) = *((($4 + [120]) + [16]))
	*(($11 = (($4 + [160]) + [8]))) = *((($4 + [120]) + [8]))
	*($4 + [160]) = *($4 + [120])
	*((($4 + [200]) + [32])) = *($2)
	*((($4 + [200]) + [24])) = *($7)
	*((($4 + [200]) + [16])) = *($3)
	*((($4 + [200]) + [8])) = *($11)
	*($4 + [200]) = *($4 + [160])
	$2 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($2) + $6))
	
.LABEL $label$5
	CALL void $2((int_32 ($4 + [200])), (int_32 $6))
	if ( ($9 <= [513]) ){ goto $label$6 }
	CALL $65($8)
	
.LABEL $label$6
	$3 = *(($4 + [104]))
	if ( ($3 == 0) ){ goto $label$7 }
	$11 = ($4 + [108])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$11 }
	CALL _ZdlPv($7)
	
.LABEL $label$11
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($4 + [104]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $3
	
.LABEL $label$8
	*($11) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$3 = *(($4 + [64]))
	if ( ($3 == 0) ){ goto $label$12 }
	$11 = ($4 + [68])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$14 }
	
.LOOP $label$15:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$16 }
	CALL _ZdlPv($7)
	
.LABEL $label$16
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$15 }
	$2 = *(($4 + [64]))
	goto $label$13 
	
.LABEL $label$14
	$2 = $3
	
.LABEL $label$13
	*($11) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [48])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $62($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*($0 + [32 align=4]) = (int_64)0
	*(($0 + [40])) = [0]
	*($2 + [12]) = $1
	*($2 + [8]) = $1
	*($2 + [16]) = ($1 + $3)
	*($2 + [24]) = ($2 + [8])
	*($2 + [36]) = ($0 + [8])
	*($2 + [32]) = $0
	*($2 + [40]) = ($0 + [16])
	*($2 + [44]) = ($0 + [32])
	CALL $17(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = ($global$0 - [144])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)*($1) == (int_64)$6) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$6) ){ goto $label$1 }
	$2 = *($4)
	$7 = CALL $59([8257])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$2 }
	if ( (CALL $54($4, [0], [-1], [8257], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $1(($5 + [96]))
	CALL $18($0, $3)
	*(($5 + [56])) = (int_64)0
	*(($4 = ($5 + [72]))) = (int_64)0
	*(($5 + [40])) = *(($3 + [8]))
	*($5 + [48]) = (int_64)0
	*($5 + [64]) = (int_64)0
	$6 = *($1)
	*($5 + [24]) = $6
	*($5 + [32]) = *($3)
	*($5 + [16]) = ((int_64)((int_64)((int_64)((int_64)*($5 + [97]) << (int_64)16) | (int_64)((int_64)*($5 + [96]) << (int_64)24)) | (int_64)((int_64)*($5 + [98]) << (int_64)8)) | (int_64)*($5 + [99]))
	CALL $19($5, $0, $6)
	*($4) = *(($5 + [8]))
	*($5 + [64]) = *($5)
	*($5 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($0)
	*($5 + [136]) = ($5 + [16])
	CALL $20($5, ($0 + [32]), $6, ($5 + [136]))
	
.LABEL $label$1
	$global$0 = ($5 + [144])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 apply)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [240])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 == (int_64)6138663591592764928) ){ goto $label$6 }
	if ( ((int_64)$1 != (int_64)6138663577826885632) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$5 }
	CALL $3(($3 + [128]))
	$4 = *($3 + [144])
	if ( ($4 == 0) ){ goto $label$1 }
	*(($3 + [148])) = $4
	CALL _ZdlPv($4)
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$5 }
	*(($3 + [152])) = [0]
	*(($3 + [168])) = $0
	*(($3 + [176])) = (int_64)-1
	*(($3 + [184])) = (int_64)0
	*(($3 + [192])) = [0]
	*(($3 + [208])) = $0
	*(($3 + [216])) = (int_64)-1
	*(($3 + [224])) = (int_64)0
	*(($3 + [232])) = [0]
	*($3 + [136]) = (int_64)6138663591592764928
	*($3 + [128]) = $0
	*($3 + [144]) = (int_64)0
	*($3 + [160]) = $0
	*($3 + [200]) = $0
	CALL $4(($3 + [80]))
	if ( ((int_64)*($3 + [80]) == (int_64)$0) ){ goto $label$7 }
	if ( ((int_64)*($3 + [88]) != (int_64)$0) ){ goto $label$7 }
	CALL $5(($3 + [128]), ($3 + [80]), ($3 + [88]), ($3 + [96]), ($3 + [112]))
	
.LABEL $label$7
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [120])))
	
.LABEL $label$8
	$5 = *(($3 + [224]))
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($3 + [228])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($3 + [224]))
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)-4997502814317805569) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-4997502814317805568) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-4417084425906421760) ){ goto $label$1 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3 + [32]) = *($3 + [40])
	CALL $7($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-4997502823608877056) ){ goto $label$1 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [2]
	*($3 + [8]) = *($3 + [64])
	CALL $9($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$13
	*($3 + [60]) = [0]
	*($3 + [56]) = [3]
	*($3 + [16]) = *($3 + [56])
	CALL $11($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [52]) = [0]
	*($3 + [48]) = [4]
	*($3 + [24]) = *($3 + [48])
	CALL $13($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [76]) = [0]
	*($3 + [72]) = [5]
	*($3) = *($3 + [72])
	CALL $15($1, $1, $3)
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$5 = *(($3 + [184]))
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($3 + [188])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$17 }
	$4 = *(($3 + [184]))
	goto $label$15 
	
.LABEL $label$16
	$4 = $5
	
.LABEL $label$15
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$1
	CALL $57([0])
	$global$0 = ($3 + [240])
}

void .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$2 = $1
	$global$0 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$2 }
	$1 = CALL $62($3)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$1
	CALL read_action_data($1, $3)
	*(($0 + [24])) = [0]
	*($0 + [16 align=4]) = (int_64)0
	*($2 + [8]) = ($1 + $3)
	*($2) = $1
	CALL eosio_assert(((uint_32)$3 > (uint_32)[15]), [8357])
	CALL memcpy($0, $1, [16])
	*($2 + [4]) = ($1 + [16])
	CALL $16($2, ($0 + [16]))
	$global$0 = ($2 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = CALL transaction_size()
	$1 = $global$0
	$3 = ($1 - (($2 + [15]) & [-16]))
	$global$0 = $3
	$4 = CALL read_transaction($3, $2)
	CALL eosio_assert(((int_32)$2 == (int_32)$4), [8196])
	CALL $66($0, $3, $4)
	$global$0 = $1
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [400])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $62($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL memset(($4 + [144]), [0], [80])
	*((($4 + [144]) + [24])) = (int_64)0
	*((($4 + [144]) + [40])) = (int_64)0
	*((($4 + [144]) + [56])) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $7)
	*($4 + [320]) = ($4 + [128])
	*($4 + [20]) = (($4 + [144]) + [8])
	*($4 + [24]) = ($4 + [160])
	*($4 + [28]) = ($4 + [176])
	*($4 + [32]) = (($4 + [144]) + [48])
	*($4 + [36]) = (($4 + [144]) + [64])
	*($4 + [40]) = ($4 + [209])
	*($4 + [44]) = ($4 + [210])
	*($4 + [48]) = ($4 + [211])
	*($4 + [52]) = ($4 + [212])
	*($4 + [56]) = ($4 + [213])
	*($4 + [60]) = ($4 + [216])
	*($4 + [16]) = ($4 + [144])
	CALL $21(($4 + [16]), ($4 + [320]))
	*(($3 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$3 = *($3)
	*((($4 + [224]) + [8])) = $3
	*(($8 = (($4 + [240]) + [8]))) = $3
	$9 = *($4)
	*($4 + [240]) = $9
	*($4 + [224]) = $9
	$3 = *($8)
	*((($4 + [320]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [240])
	*($4 + [32]) = $1
	*($4 + [320]) = $1
	*((($4 + [16]) + [40])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*((($4 + [16]) + [56])) = (int_64)0
	*((($4 + [16]) + [64])) = [0]
	*((($4 + [16]) + [80])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	CALL memcpy(($4 + [240]), ($4 + [144]), [80])
	CALL memcpy(($4 + [320]), ($4 + [240]), [80])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [320])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $65($2)
	
.LABEL $label$5
	$5 = *(($4 + [112]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [116])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [112]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($4 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($4 + [400])
	return [1]
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8362])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $26($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8357])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8357])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8357])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8357])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8357])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $42(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = CALL db_lowerbound_i64(*($0 + [32]), *(($0 + [40])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = ($0 + [32])
	$0 = CALL $22($4, $3)
	if ( ($1 == 0) ){ goto $label$1 }
	$5 = ([1] - $1)
	
.LOOP $label$2:
	$3 = $5
	$1 = [0]
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [8270])
	CALL eosio_assert($5, [8304])
	$5 = CALL db_next_i64(*($0 + [84]), ($2 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$1 = CALL $22($4, $5)
	
.LABEL $label$3
	CALL $23($4, $0)
	if ( ($1 == 0) ){ goto $label$1 }
	$5 = ($3 + [1])
	$0 = $1
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

int_32 .FUNC $11 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $62($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [120]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [8357])
	CALL memcpy(($4 + [120]), $2, [4])
	*(($4 + [28])) = ($2 + [4])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [120])
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $8), (int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 $8), (int_32 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $65($2)
	$5 = *(($4 + [104]))
	if ( ($5 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = *(($4 + [104]))
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$7
	$5 = *(($4 + [64]))
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = ($4 + [108])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($4 + [104]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $5
	
.LABEL $label$11
	*($3) = $5
	CALL _ZdlPv($2)
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [68])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$18 }
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$17 }
	$2 = *(($4 + [64]))
	goto $label$15 
	
.LABEL $label$16
	$2 = $5
	
.LABEL $label$15
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	float_64 $21
	int_64 $22
	int_64 $23
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ((int_64)((int_64)((int_64)((int_64)*($1 + [1]) << (int_64)16) | (int_64)((int_64)*($1) << (int_64)24)) | (int_64)((int_64)*($1 + [2]) << (int_64)8)) | (int_64)*($1 + [3]))
	$5 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$4) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$5), [8931])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)4229443000054317056, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $22($5, $8)
	CALL eosio_assert(((int_32)*($9 + [80]) == (int_32)$5), [8931])
	
.LABEL $label$1
	$10 = [0]
	$11 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($11, [8571])
	CALL memcpy(($3 + [96]), $9, [80])
	$12 = ($0 + [72])
	$7 = *(($0 + [100]))
	$6 = *(($0 + [96]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$8:
	$8 = ($7 + [-24])
	$13 = *($8)
	if ( (int_64)(*($13) == 0) ){ goto $label$7 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($13 + [48]) == (int_32)$12), [8931])
	$10 = $13
	goto $label$5 
	
.LABEL $label$6
	$8 = CALL db_find_i64(*($12), *(($0 + [80])), (int_64)-5868465776486252544, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$10 = CALL $25($12, $8)
	CALL eosio_assert(((int_32)*($10 + [48]) == (int_32)$12), [8931])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8236])
	CALL $67($1, $2, ($10 + [8]))
	CALL $66(($3 + [64]), $2, [72])
	$8 = ((CASTING uint_32)(uint_64 ((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($3 + [93]) << (int_64)16) | (int_64)((int_64)*($3 + [92]) << (int_64)24)) | (int_64)*($3 + [95])) | (int_64)((int_64)*($3 + [94]) << (int_64)8)) | (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($3 + [89]) << (int_64)16) | (int_64)((int_64)*($3 + [88]) << (int_64)24)) | (int_64)*($3 + [91])) | (int_64)((int_64)*($3 + [90]) << (int_64)8)) | (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($3 + [85]) << (int_64)16) | (int_64)((int_64)*($3 + [84]) << (int_64)24)) | (int_64)*($3 + [87])) | (int_64)((int_64)*($3 + [86]) << (int_64)8)) | (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($3 + [81]) << (int_64)16) | (int_64)((int_64)*($3 + [80]) << (int_64)24)) | (int_64)*($3 + [83])) | (int_64)((int_64)*($3 + [82]) << (int_64)8)) | (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($3 + [77]) << (int_64)16) | (int_64)((int_64)*($3 + [76]) << (int_64)24)) | (int_64)*($3 + [79])) | (int_64)((int_64)*($3 + [78]) << (int_64)8)) | (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($3 + [73]) << (int_64)16) | (int_64)((int_64)*($3 + [72]) << (int_64)24)) | (int_64)*($3 + [75])) | (int_64)((int_64)*($3 + [74]) << (int_64)8)) | (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($3 + [69]) << (int_64)16) | (int_64)((int_64)*($3 + [68]) << (int_64)24)) | (int_64)((int_64)((uint_64)((int_64)((int_64)((int_64)((int_64)*($3 + [65]) << (int_64)16) | (int_64)((int_64)*($3 + [64]) << (int_64)24)) | (int_64)*($3 + [67])) | (int_64)((int_64)*($3 + [66]) << (int_64)8)) % (uint_64)(int_64)46656) << (int_64)32)) | (int_64)*($3 + [71])) | (int_64)((int_64)*($3 + [70]) << (int_64)8)) % (uint_64)(int_64)46656) << (int_64)32)) % (uint_64)(int_64)46656) << (int_64)32)) % (uint_64)(int_64)46656) << (int_64)32)) % (uint_64)(int_64)46656) << (int_64)32)) % (uint_64)(int_64)46656) << (int_64)32)) % (uint_64)(int_64)46656) << (int_64)32)) % (uint_64)(int_64)46656)) + [1])
	$7 = ((uint_32)$8 / (uint_32)[6])
	$6 = ((uint_32)$7 % (uint_32)[6])
	$1 = ($6 + [1])
	*($3 + [57]) = $1
	$13 = ((uint_32)((uint_32)$8 / (uint_32)[36]) % (uint_32)[6])
	$10 = ($13 + [1])
	*($3 + [58]) = $10
	$14 = ((uint_32)((uint_32)$8 / (uint_32)[216]) % (uint_32)[6])
	$12 = ($14 + [1])
	*($3 + [59]) = $12
	$15 = ((uint_32)((uint_32)$8 / (uint_32)[1296]) % (uint_32)[6])
	$2 = ($15 + [1])
	*($3 + [60]) = $2
	$16 = ((uint_32)((uint_32)$8 / (uint_32)[7776]) % (uint_32)[6])
	$17 = ($16 + [1])
	*($3 + [61]) = $17
	$8 = ($8 - ((int_32)$7 * (int_32)[6]))
	$18 = ($8 + [1])
	*($3 + [56]) = $18
	CALL eosio_assert([1], [8585])
	$14 = ((((((($8 & [255]) == 0) + ($6 == 0)) + ($13 == 0)) + ($14 == 0)) + ($15 == 0)) + ($16 == 0))
	$4 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$19 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$4 = $19
	$13 = [1]
	$7 = $8
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	$4 = $19
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$17 }
	$13 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL eosio_assert($13, [8634])
	$20 = (int_64)0
	if ( ($14 == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8634])
	$20 = (int_64)0
	if ( $14 ){ goto $label$11 }
	
.LABEL $label$12
	$23 = (int_64)1397703940
	$22 = (int_64)0
	goto $label$10 
	
.LABEL $label$11
	$21 = ((float_64)(PROMOTE float_64)(float_32 *(((($14 & [255]) << [2]) + [8656]))) * (float_64)(CASTING float_64)(int_64 *($3 + [112])))
	if ( ((float_64)(float_64)|$21| < (float_64)(float_64)9223372036854775808) ){ goto $label$19 }
	$22 = (int_64)-9223372036854775808
	goto $label$18 
	
.LABEL $label$19
	$22 = (Rounds 0)($21)
	
.LABEL $label$18
	$23 = *((($3 + [96]) + [24]))
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8585])
	$4 = (uint_64)$23 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$19 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$4 = $19
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$4 = $19
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$24 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$7 = [0]
	
.LABEL $label$20
	CALL eosio_assert($7, [8634])
	$4 = *($0)
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$8 = CALL $59([8684])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$27 }
	*($3) = ($8 << [1])
	$7 = ($3 | [1])
	if ( $8 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $7
	*($3 + [4]) = $8
	
.LABEL $label$26
	CALL memcpy($7, [8684], $8)
	
.LABEL $label$25
	*(($7 + $8)) = [0]
	*((($3 + [208]) + [24])) = $23
	$8 = ($3 + [8])
	*(($3 + [248])) = *($8)
	*($8) = [0]
	*($3 + [224]) = $22
	*($3 + [16]) = (int_64)6138663591592764928
	*($3 + [24]) = (int_64)-3617168760277827584
	*($3 + [208]) = *($0)
	*($3 + [216]) = *($3 + [104])
	*($3 + [240]) = *($3)
	*($3) = (int_64)0
	*(($8 = CALL _Znwj([16]))) = $4
	*($8 + [8]) = (int_64)3617214756542218240
	*((($3 + [16]) + [36])) = [0]
	$7 = ($8 + [16])
	*((($3 + [16]) + [24])) = $7
	*(($3 + [36])) = $7
	*($3 + [32]) = $8
	*($3 + [44 align=4]) = (int_64)0
	$8 = *($3 + [240])
	$7 = ( *((($3 + [208]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($7 + [32])
	$4 = (CASTING uint_64)(uint_32 $7)
	$7 = ($3 + [44])
	
.LOOP $label$28:
	$8 = ($8 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$28 }
	if ( ($8 == 0) ){ goto $label$30 }
	CALL $26($7, $8)
	$7 = *(($3 + [48]))
	$8 = *(($3 + [44]))
	goto $label$29 
	
.LABEL $label$30
	$7 = [0]
	$8 = [0]
	
.LABEL $label$29
	*($3 + [196]) = $8
	*($3 + [192]) = $8
	*($3 + [200]) = $7
	*($3 + [176]) = ($3 + [192])
	*($3 + [184]) = ($3 + [208])
	CALL $27(($3 + [184]), ($3 + [176]))
	CALL $28(($3 + [192]), ($3 + [16]))
	$8 = *($3 + [192])
	CALL send_inline($8, (*($3 + [196]) - $8))
	$8 = *($3 + [192])
	if ( ($8 == 0) ){ goto $label$31 }
	*($3 + [196]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$31
	$8 = *($3 + [44])
	if ( ($8 == 0) ){ goto $label$32 }
	*(($3 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$32
	$8 = *($3 + [32])
	if ( ($8 == 0) ){ goto $label$33 }
	*(($3 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$33
	if ( ((*(($3 + [240])) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($3 + [248])))
	
.LABEL $label$34
	if ( ((*($3) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$35
	$17 = *($3 + [61])
	$2 = *($3 + [60])
	$12 = *($3 + [59])
	$10 = *($3 + [58])
	$1 = *($3 + [57])
	$18 = *($3 + [56])
	
.LABEL $label$10
	*(($3 + [136])) = $23
	*($3 + [161]) = $1
	*($3 + [160]) = $18
	*($3 + [162]) = $10
	*($3 + [163]) = $12
	*($3 + [164]) = $2
	*($3 + [165]) = $17
	$4 = *(($3 + [152]))
	*($3 + [128]) = $22
	CALL eosio_assert(((int_64)$23 == (int_64)$4), [8704])
	$4 = ((int_64)*($3 + [144]) + (int_64)$22)
	*($3 + [144]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [8747])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [8766])
	*($3 + [24]) = (int_64)-5003315193367756800
	$4 = *($0)
	*($3 + [16]) = $4
	*(($8 = CALL _Znwj([16]))) = $4
	*($8 + [8]) = (int_64)3617214756542218240
	*(($3 + [52])) = [0]
	$7 = ($8 + [16])
	*(($3 + [40])) = $7
	*(($3 + [36])) = $7
	*($3 + [32]) = $8
	*($3 + [44 align=4]) = $20
	CALL $26(($3 + [44]), [78])
	$8 = *((($3 + [16]) + [32]))
	$7 = *($3 + [44])
	*($3 + [196]) = $7
	*($3 + [192]) = $7
	*($3 + [200]) = $8
	*($3) = ($3 + [192])
	*($3 + [212]) = ($3 + [104])
	*($3 + [216]) = (($3 + [96]) + [16])
	*($3 + [220]) = (($3 + [96]) + [32])
	*($3 + [224]) = ($3 + [144])
	*($3 + [228]) = ($3 + [160])
	*($3 + [232]) = ($3 + [161])
	*($3 + [236]) = ($3 + [162])
	*($3 + [240]) = ($3 + [163])
	*($3 + [244]) = ($3 + [164])
	*($3 + [248]) = ($3 + [165])
	*($3 + [252]) = ($3 + [168])
	*($3 + [208]) = ($3 + [96])
	CALL $29(($3 + [208]), $3)
	CALL $28(($3 + [208]), ($3 + [16]))
	$8 = *($3 + [208])
	CALL send_inline($8, (*($3 + [212]) - $8))
	$8 = *($3 + [208])
	if ( ($8 == 0) ){ goto $label$36 }
	*($3 + [212]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$36
	$8 = *($3 + [44])
	if ( ($8 == 0) ){ goto $label$37 }
	*(($3 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$37
	$8 = *($3 + [32])
	if ( ($8 == 0) ){ goto $label$38 }
	*(($3 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$38
	CALL eosio_assert($11, [8270])
	CALL eosio_assert($11, [8304])
	$8 = CALL db_next_i64(*($9 + [84]), ($3 + [208]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$39 }
	CALL $22($5, $8)
	
.LABEL $label$39
	CALL $23($5, $9)
	$global$0 = ($3 + [256])
	return (unreachable)
	
.LABEL $label$9
	CALL $52($3)
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $62($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [144]) + [24]))) = (int_64)0
	*(($8 = (($4 + [144]) + [16]))) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [144]) = (int_64)0
	CALL memset(($4 + [180]), [0], [68])
	*($4 + [176]) = [0]
	*($4 + [132]) = $2
	*($4 + [128]) = $2
	*($4 + [136]) = ($2 + $7)
	*($4 + [408]) = ($4 + [128])
	*($4 + [16]) = ($4 + [144])
	CALL $24(($4 + [16]), ($4 + [408]))
	*(($9 = ($4 + [8]))) = *($4 + [136])
	*($4) = *($4 + [128])
	$9 = *($9)
	*((($4 + [368]) + [8])) = $9
	*(($10 = (($4 + [264]) + [8]))) = $9
	$11 = *($4)
	*($4 + [264]) = $11
	*($4 + [368]) = $11
	$9 = *($10)
	*((($4 + [408]) + [8])) = $9
	*((($4 + [16]) + [24])) = $9
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [264])
	*($4 + [32]) = $1
	*($4 + [408]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*(($9 = (($4 + [336]) + [24]))) = *($3)
	*(($3 = (($4 + [336]) + [16]))) = *($8)
	*($4 + [344]) = *($4 + [152])
	*($4 + [336]) = *($4 + [144])
	CALL memcpy(($4 + [264]), ($4 + [176]), [72])
	CALL memcpy(($4 + [408]), ($4 + [264]), [72])
	*((($4 + [368]) + [24])) = *($9)
	*((($4 + [368]) + [16])) = *($3)
	*($4 + [376]) = *($4 + [344])
	*($4 + [368]) = *($4 + [336])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [368])), (int_32 ($4 + [408])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $65($2)
	
.LABEL $label$5
	$5 = *(($4 + [112]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [116])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [112]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$5 = *(($4 + [72]))
	if ( ($5 == 0) ){ goto $label$11 }
	$6 = ($4 + [76])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($4 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $5
	
.LABEL $label$12
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$11
	$global$0 = ($4 + [480])
	return [1]
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8565])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8565])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8565])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8565])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8565])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $55($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	$5 = *($0)
	*($1 + [8 align=4]) = *($4 + [8 align=4])
	*(($1 + [16])) = *(($4 + [16]))
	*(($1 + [24])) = *(($4 + [24]))
	*(($1 + [32])) = *(($4 + [32]))
	*(($1 + [37])) = *(($4 + [37]))
	$6 = *($1 + [8])
	$7 = [41]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$8 = CALL $62($7)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [8565])
	CALL memcpy($8, $1, [8])
	$4 = ($8 + [8])
	$9 = ($8 + $7)
	$6 = *(($1 + [8]))
	
.LOOP $label$4:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$10 = ((int_64)$6) != (int_64)0
	*($3 + [15]) = (($10) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)($9 - $4) > (int_32)[0]), [8565])
	CALL memcpy($4, ($3 + [15]), [1])
	$4 = ($4 + [1])
	if ( $10 ){ goto $label$4 }
	CALL eosio_assert(((int_32)($9 - $4) > (int_32)[32]), [8565])
	CALL memcpy($4, ($1 + [12]), [33])
	$6 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)-5868465776486252544, *(*($0 + [8])), $6, $8, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $65($8)
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8931])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $38($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8931])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8357])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$4 = *($0 + [4])
	$5 = *($1)
	$0 = *($5 + [4])
	$1 = [0]
	$6 = (int_64)0
	$2 = ($5 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($0 <= *(($5 + [8]))), [8362])
	$0 = *($2)
	$3 = *($0)
	$0 = ($0 + [1])
	*($2) = $0
	$1 = ($1 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($3 & [127]) << $1)))
	$1 = ($1 + [7])
	if ( ($3 & [128]) ){ goto $label$1 }
	*($4) = $6
	CALL eosio_assert(((uint_32)(*(($5 + [8])) - $0) > (uint_32)[32]), [8357])
	$3 = ($5 + [4])
	CALL memcpy(($4 + [4]), *($3), [33])
	*($3) = (*($3) + [33])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [8366])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert5()), [8411])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [8461])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert5()), [8514])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [48]) = $1
	*($3 + [8]) = [0]
	CALL $35(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $34(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $62($1)
	
.LABEL $label$2
	*(CALL $56()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $62(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $65($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $64($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [17540])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9136]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9140])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9136]) = [1]
	$2 = ($2 << [16])
	*([0] + [9140]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9140])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9140]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9136]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9136]) = [1]
	$3 = ($3 << [16])
	*([0] + [9140]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9140])
	
.LABEL $label$10
	*([0] + [9140]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $65($0)
	
.LABEL $label$1
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8334])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $62($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8357])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8357])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $65($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $52 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $58(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $55 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $56 ()
{
	return [9128]
}

void .FUNC $57 (int_32 $0)
{
}