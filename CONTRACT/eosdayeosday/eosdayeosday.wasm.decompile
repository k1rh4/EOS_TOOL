(data (i32.const 4) "ph\00\00")
(data (i32.const 16) "\10\'\00\00\00\00\00\00d\00\00\00\00\00\00\00\a0\86\01\00\00\00\00\00\c8\00\00\00\00\00\00\00@\0d\03\00\00\00\00\00\90\01\00\00\00\00\00\00\80\1a\06\00\00\00\00\00 \03\00\00\00\00\00\00\005\0c\00\00\00\00\00@\06\00\00\00\00\00\00\00j\18\00\00\00\00\00\80\0c\00\00\00\00\00\00\00\d40\00\00\00\00\00\00\19\00\00\00\00\00\00\00\a8a\00\00\00\00\00\002\00\00\00\00\00\00\00P\c3\00\00\00\00\00\00d\00\00\00\00\00\00@]\c6\00\00\00\00\00\80\96\98\00\00\00\00\00\00\ca\9a;\00\00\00\00\00\e1\f5\05\00\00\00\00")
(data (i32.const 192) "price must be great than 0\00")
(data (i32.const 224) "max keys must be great than 0\00")
(data (i32.const 256) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 320) "user does not exist\00")
(data (i32.const 352) "integer overflow adding withdraw balance\00")
(data (i32.const 400) "cannot pass end iterator to modify\00")
(data (i32.const 448) "object passed to modify is not in multi_index\00")
(data (i32.const 496) "cannot modify objects in table of another contract\00")
(data (i32.const 560) "updater cannot change primary key when modifying an object\00")
(data (i32.const 624) "write\00")
(data (i32.const 640) "active\00")
(data (i32.const 656) "eosio.token\00")
(data (i32.const 672) "transfer\00")
(data (i32.const 688) "from eosday.io\00")
(data (i32.const 704) "error reading iterator\00")
(data (i32.const 736) "read\00")
(data (i32.const 752) "transfer not from eosio.token\00")
(data (i32.const 784) "transfer not made to this contract\00")
(data (i32.const 832) "invalid quantity\00")
(data (i32.const 864) "new keys must be one or more\00")
(data (i32.const 896) "cannot create objects in table of another contract\00")
(data (i32.const 960) "integer overflow adding user balance total\00")
(data (i32.const 1008) "integer overflow adding user balance balance\00")
(data (i32.const 1056) "cannot increment end iterator\00")
(data (i32.const 1088) "integer overflow adding team reward total\00")
(data (i32.const 1136) "integer overflow adding team reward balance\00")
(data (i32.const 1184) "integer overflow adding new keys\00")
(data (i32.const 1232) "integer overflow adding player amount\00")
(data (i32.const 1280) "integer overflow adding counter balance\00")
(data (i32.const 1328) "integer overflow adding pot\00")
(data (i32.const 1360) "integer overflow adding sold_keys\00")
(data (i32.const 1408) "asset must be EOS\00")
(data (i32.const 1440) "integer overflow adding winner total\00")
(data (i32.const 1488) "integer overflow adding winner balance\00")
(data (i32.const 1536) "cannot pass end iterator to erase\00")
(data (i32.const 1584) "object passed to erase is not in multi_index\00")
(data (i32.const 1632) "cannot erase objects in table of another contract\00")
(data (i32.const 1696) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1760) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1824) "invalid symbol name\00")
(data (i32.const 1856) "get\00")
(data (i32.const 10256) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$12 (param i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z13get_new_pricey" (func $5))
(export "_Z23get_same_level_max_keysy" (func $6))
(export "_Z15get_new_key_numyy" (func $7))
(export "_ZN11win_diamond8withdrawEyN5eosio5assetE" (func $8))
(export "_ZN11win_diamond2onERKN5eosio8currency8transferEy" (func $17))
(export "_ZN11win_diamond4pingEv" (func $18))
(export "_ZN11win_diamond2hiEy" (func $27))
(export "_ZN11win_diamond5eraseEv" (func $28))
(export "_ZN11win_diamond8maintainEv" (func $30))
(export "_ZN11win_diamond5applyEyy" (func $31))
(export "apply" (func $38))
(export "malloc" (func $42))
(export "free" (func $45))
(export "memcmp" (func $51))
(export "strlen" (func $52))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $53 $18 $27 $30 $28)



void .FUNC _ZN11win_diamond4pingEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [112])
	*([0] + [4]) = $15
	$1 = ($0 + [96])
	$10 = [0]
	$14 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $19($1, $14)
	
.LABEL $label$1
	if ( ((uint_64)*($10 + [24]) > (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$2 }
	$2 = *($10 + [8])
	$3 = *(($0 + [40]))
	$4 = *(($0 + [44]))
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	$14 = ($4 + [-24])
	$5 = ([0] - $3)
	
.LOOP $label$4:
	if ( ((int_64)*(*($14)) == (int_64)$2) ){ goto $label$3 }
	$4 = $14
	$13 = ($14 + [-24])
	$14 = $13
	if ( ((int_32)($13 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$13 = ($0 + [16])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$8 }
	$14 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$13), [256])
	if ( $14 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$14 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020380869172259840, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$6 }
	$14 = CALL $9($13, $14)
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$13), [256])
	
.LABEL $label$7
	$5 = ($0 + [32])
	$3 = ($0 + [8])
	$11 = ($15 + [32])
	$12 = (($15 + [16]) | [8])
	$4 = ($15 + [16])
	goto $label$5 
	
.LABEL $label$6
	$7 = *($0 + [8])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [896])
	*(($14 = CALL $46([40])) + [16]) = (int_64)0
	*($14 + [8]) = (int_64)0
	*($14 + [24]) = $13
	*($14) = $2
	CALL eosio_assert([1], [624])
	CALL memcpy(($15 + [16]), $14, [8])
	CALL eosio_assert([1], [624])
	$12 = (($15 + [16]) | [8])
	CALL memcpy($12, ($14 + [8]), [8])
	CALL eosio_assert([1], [624])
	$11 = (($15 + [16]) + [16])
	CALL memcpy($11, ($14 + [16]), [8])
	$2 = *($14)
	$3 = CALL db_store_i64(*(($0 + [24])), (int_64)-3020380869172259840, $7, $2, ($15 + [16]), [24])
	*($14 + [28]) = $3
	$5 = ($0 + [32])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$9 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($15 + [96]) = $14
	$2 = *($14)
	*($15 + [16]) = $2
	*($15 + [12]) = $3
	$6 = ($0 + [44])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [48]))) ){ goto $label$11 }
	*($4 + [8]) = $2
	*($4 + [16]) = $3
	*($15 + [96]) = [0]
	*($4) = $14
	*($6) = ($4 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $16(($0 + [40]), ($15 + [96]), ($15 + [16]), ($15 + [12]))
	
.LABEL $label$10
	$4 = *($15 + [96])
	*($15 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $47($4)
	
.LABEL $label$12
	$3 = ($0 + [8])
	$4 = ($15 + [16])
	
.LABEL $label$5
	$7 = *($3)
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($14 + [24]) == (int_32)$13), [448])
	CALL eosio_assert(((int_64)*($13) == (int_64)CALL $fimport$2()), [496])
	$2 = *($14)
	$8 = *($14 + [8])
	CALL eosio_assert(((uint_64)((int_64)*($10 + [40]) + (int_64)$8) > (uint_64)$8), [1440])
	$8 = *($10 + [40])
	*($14 + [8]) = ((int_64)*($14 + [8]) + (int_64)$8)
	$9 = *($14 + [16])
	CALL eosio_assert(((uint_64)((int_64)$8 + (int_64)$9) > (uint_64)$9), [1488])
	*($14 + [16]) = ((int_64)*($14 + [16]) + (int_64)*($10 + [40]))
	CALL eosio_assert(((int_64)$2 == (int_64)*($14)), [560])
	CALL eosio_assert([1], [624])
	CALL memcpy($4, $14, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($12, ($14 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($11, ($14 + [16]), [8])
	CALL db_update_i64(*($14 + [28]), $7, $4, [24])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$13 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$14 = CALL db_lowerbound_i64(*(($0 + [96])), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$14 }
	$13 = CALL $19($1, $14)
	
.LOOP $label$15:
	CALL eosio_assert([1], [1536])
	CALL eosio_assert([1], [1056])
	$14 = [0]
	$4 = CALL db_next_i64(*($13 + [76]), ($15 + [16]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$16 }
	$14 = CALL $19($1, $4)
	
.LABEL $label$16
	CALL $25($1, $13)
	$13 = $14
	if ( $14 ){ goto $label$15 }
	
.LABEL $label$14
	$14 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$17 }
	$4 = ($0 + [56])
	$13 = CALL $20($4, $14)
	
.LOOP $label$18:
	CALL eosio_assert([1], [1536])
	CALL eosio_assert([1], [1056])
	$14 = [0]
	$5 = CALL db_next_i64(*($13 + [28]), ($15 + [16]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$19 }
	$14 = CALL $20($4, $5)
	
.LABEL $label$19
	CALL $26($4, $13)
	$13 = $14
	if ( $14 ){ goto $label$18 }
	
.LABEL $label$17
	$13 = ($0 + [8])
	$7 = *($13)
	CALL eosio_assert(((int_64)*(($0 + [96])) == (int_64)CALL $fimport$2()), [896])
	$14 = CALL $46([88])
	$2 = CALL current_time()
	*($14 + [32]) = (int_64)0
	*($14 + [40]) = (int_64)0
	*($14 + [48]) = (int_64)0
	*($14 + [56]) = (int_64)100
	*($14 + [64]) = (int_64)1
	$2 = ((int_64)((uint_64)$2 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($14 + [16]) = $2
	*($14 + [24]) = ((int_64)$2 + (int_64)86400)
	*($14 + [72]) = $1
	$2 = *($13)
	*($14) = $2
	*($14 + [8]) = $2
	*($15 + [104]) = (($15 + [16]) + [72])
	*($15 + [100]) = ($15 + [16])
	*($15 + [96]) = ($15 + [16])
	CALL $22(($15 + [96]), $14)
	$2 = *($14)
	$1 = CALL db_store_i64(*(($0 + [104])), (int_64)4986958866982895616, $7, $2, ($15 + [16]), [72])
	*($14 + [76]) = $1
	$13 = ($0 + [112])
	if ( (uint_64)($2 <= *($13)) ){ goto $label$20 }
	*($13) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	*($15 + [96]) = $14
	$2 = *($14)
	*($15 + [16]) = $2
	*($15 + [12]) = $1
	$4 = ($0 + [124])
	$13 = *($4)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [128]))) ){ goto $label$22 }
	*($13 + [8]) = $2
	*($13 + [16]) = $1
	*($15 + [96]) = [0]
	*($13) = $14
	*($4) = ($13 + [24])
	goto $label$21 
	
.LABEL $label$22
	CALL $24(($0 + [120]), ($15 + [96]), ($15 + [16]), ($15 + [12]))
	
.LABEL $label$21
	$14 = *($15 + [96])
	*($15 + [96]) = [0]
	if ( ($14 == 0) ){ goto $label$2 }
	CALL $47($14)
	
.LABEL $label$2
	*([0] + [4]) = ($15 + [112])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [704])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $46([88])
	$5 = CALL current_time()
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)100
	*($6 + [64]) = (int_64)1
	$5 = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($6 + [16]) = $5
	*($6 + [24]) = ((int_64)$5 + (int_64)86400)
	*($6 + [72]) = $0
	CALL $23(($8 + [32]), $6)
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $24(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $47($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $39 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($0) = $1
	*($0 + [8]) = $1
	*($0 + [16]) = $1
	*(($0 + [24])) = $1
	*(($0 + [32])) = (int_64)-1
	*(($0 + [40])) = [0]
	*($4 + [24]) = $1
	*(($0 + [44])) = [0]
	*(($0 + [48])) = [0]
	*($0 + [56]) = $1
	*(($0 + [64])) = $1
	*(($0 + [72])) = (int_64)-1
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*(($0 + [88])) = [0]
	*($0 + [96]) = $1
	*(($0 + [104])) = $1
	*(($0 + [112])) = (int_64)-1
	*(($0 + [120])) = [0]
	*(($0 + [124])) = [0]
	*(($0 + [128])) = [0]
	$2 = ($0 + [96])
	$3 = CALL db_lowerbound_i64($1, $1, (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $19($2, $3)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [16]) = ($4 + [24])
	CALL $40(($4 + [8]), $2, $1, ($4 + [16]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1584])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1632])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1696])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $47($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $47($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC _ZN11win_diamond5eraseEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL require_auth(*($0 + [8]))
	$4 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$1 = ($0 + [96])
	$3 = CALL $19($1, $4)
	
.LOOP $label$2:
	CALL eosio_assert([1], [1536])
	CALL eosio_assert([1], [1056])
	$4 = [0]
	$2 = CALL db_next_i64(*($3 + [76]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $19($1, $2)
	
.LABEL $label$3
	CALL $25($1, $3)
	$3 = $4
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$1 = ($0 + [56])
	$3 = CALL $20($1, $4)
	
.LOOP $label$5:
	CALL eosio_assert([1], [1536])
	CALL eosio_assert([1], [1056])
	$4 = [0]
	$2 = CALL db_next_i64(*($3 + [28]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	$4 = CALL $20($1, $2)
	
.LABEL $label$6
	CALL $26($1, $3)
	$3 = $4
	if ( $4 ){ goto $label$5 }
	
.LABEL $label$4
	$4 = CALL db_lowerbound_i64(*($0 + [16]), *(($0 + [24])), (int_64)-3020380869172259840, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$1 = ($0 + [16])
	$3 = CALL $9($1, $4)
	
.LOOP $label$8:
	CALL eosio_assert([1], [1536])
	CALL eosio_assert([1], [1056])
	$4 = [0]
	$2 = CALL db_next_i64(*($3 + [28]), ($5 + [8]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$4 = CALL $9($1, $2)
	
.LABEL $label$9
	CALL $29($1, $3)
	$3 = $4
	if ( $4 ){ goto $label$8 }
	
.LABEL $label$7
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $46(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $50($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $47($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $47($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [704])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $46([40])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [736])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [736])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [736])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $21(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $47($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [736])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [1584])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1632])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1696])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $47($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $47($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $46(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $50($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $47($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $47($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN11win_diamond2hiEy (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1584])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1632])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1696])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $47($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $47($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $46(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $47($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $48 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $44($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10256])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $43([1860], $0)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	$3 = CALL current_time()
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)100
	*($0 + [64]) = (int_64)1
	$3 = ((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($0 + [16]) = $3
	*($0 + [24]) = ((int_64)$3 + (int_64)86400)
	*($0 + [72]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1))
	$1 = *($2)
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $22(($4 + [80]), $0)
	$3 = *($0)
	*($0 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)4986958866982895616, *(*($2 + [8])), $3, $4, [72])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [96])
	return $0
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [896])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $46([88])
	CALL $41($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $24(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $47($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $47 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10348])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10244])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10052]
	$1 = (((int_32)$2 * (int_32)[12]) + [10052])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10342]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10344])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10342]) = [1]
	$7 = ($7 << [16])
	*([0] + [10344]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10344])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10344]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10342]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10342]) = [1]
	$3 = ($3 << [16])
	*([0] + [10344]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10344])
	
.LABEL $label$8
	*([0] + [10344]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC _ZN11win_diamond8withdrawEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [256])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020380869172259840, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $9($6, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [256])
	
.LABEL $label$3
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [320])
	$10 = *($2)
	CALL eosio_assert(((uint_64)((int_64)*($8 + [16]) + (int_64)$10) > (uint_64)$10), [352])
	*($2) = ((int_64)$10 + (int_64)*($8 + [16]))
	$9 = *($0 + [8])
	CALL eosio_assert($7, [400])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [448])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [496])
	$10 = (int_64)0
	*($8 + [16]) = (int_64)0
	$12 = *($8)
	CALL eosio_assert([1], [560])
	CALL eosio_assert([1], [624])
	CALL memcpy(($15 + [16]), $8, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy((($15 + [16]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy((($15 + [16]) + [16]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), $9, ($15 + [16]), [24])
	$8 = ($0 + [32])
	if ( (uint_64)($12 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = *(($0 + [8]))
	$9 = (int_64)59
	$8 = [640]
	$11 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$11 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$6 = ($6 + [165])
	goto $label$9 
	
.LABEL $label$11
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$7
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$6 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [656]
	$13 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$17 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$6 = ($6 + [165])
	goto $label$15 
	
.LABEL $label$17
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$12 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [672]
	$14 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$23 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$6 = ($6 + [165])
	goto $label$21 
	
.LABEL $label$23
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$18 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$8 = CALL strlen([688])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$27 }
	*($15) = ($8 << [1])
	$6 = ($15 | [1])
	if ( $8 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$7 = (($8 + [16]) & [-16])
	$6 = CALL $46($7)
	*($15) = ($7 | [1])
	*($15 + [8]) = $6
	*($15 + [4]) = $8
	
.LABEL $label$26
	CALL memcpy($6, [688], $8)
	
.LABEL $label$25
	*(($6 + $8)) = [0]
	*((($15 + [16]) + [28])) = *(($2 + [12]))
	*((($15 + [16]) + [24])) = *(($2 + [8]))
	*((($15 + [16]) + [20])) = *(($2 + [4]))
	*($15 + [24]) = $1
	*($15 + [16]) = *(($0 + [8]))
	*($15 + [32]) = *($2)
	$8 = ($15 + [8])
	*(($15 + [56])) = *($8)
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($8) = [0]
	*($15 + [72]) = $13
	*($15 + [80]) = $14
	*(($8 = CALL $46([16]))) = $5
	*($8 + [8]) = $11
	*((($15 + [72]) + [32])) = [0]
	$6 = ($8 + [16])
	*((($15 + [72]) + [24])) = $6
	*((($15 + [72]) + [20])) = $6
	*($15 + [88]) = $8
	*($15 + [100]) = [0]
	*((($15 + [72]) + [36])) = [0]
	$8 = *($15 + [48])
	$6 = ( *((($15 + [16]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($6 + [32])
	$10 = (CASTING uint_64)(uint_32 $6)
	$6 = (($15 + [72]) + [28])
	
.LOOP $label$28:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$28 }
	if ( ($8 == 0) ){ goto $label$30 }
	CALL $10($6, $8)
	$6 = *(($15 + [104]))
	$8 = *(($15 + [100]))
	goto $label$29 
	
.LABEL $label$30
	$6 = [0]
	$8 = [0]
	
.LABEL $label$29
	*($15 + [132]) = $8
	*($15 + [128]) = $8
	*($15 + [136]) = $6
	*($15 + [112]) = ($15 + [128])
	*($15 + [120]) = ($15 + [16])
	CALL $11(($15 + [120]), ($15 + [112]))
	CALL $12(($15 + [128]), ($15 + [72]))
	$8 = *($15 + [128])
	CALL send_inline($8, (*($15 + [132]) - $8))
	$8 = *($15 + [128])
	if ( ($8 == 0) ){ goto $label$31 }
	*($15 + [132]) = $8
	CALL $47($8)
	
.LABEL $label$31
	$8 = *($15 + [100])
	if ( ($8 == 0) ){ goto $label$32 }
	*(($15 + [104])) = $8
	CALL $47($8)
	
.LABEL $label$32
	$8 = *($15 + [88])
	if ( ($8 == 0) ){ goto $label$33 }
	*(($15 + [92])) = $8
	CALL $47($8)
	
.LABEL $label$33
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$34 }
	CALL $47(*(($15 + [56])))
	
.LABEL $label$34
	if ( ((*($15) & [1]) == 0) ){ goto $label$35 }
	CALL $47(*(($15 + [8])))
	
.LABEL $label$35
	*([0] + [4]) = ($15 + [144])
	return (unreachable)
	
.LABEL $label$24
	CALL $48($15)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [704])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $46([40])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [736])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [736])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [736])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $16(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $47($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_64 .FUNC _Z23get_same_level_max_keysy (int_64 $0)
{
	int_64 $1
	int_64 $2
	$1 = *([0] + [16])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [32])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [48])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [64])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [80])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [96])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [112])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [128])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$2 = (int_64)0
	$1 = *([0] + [144])
	if ( ((uint_64)$1 <= (uint_64)$0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = (int_64))($1 - $0)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC _Z15get_new_key_numyy (int_64 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	$2 = [0]
	if ( ((uint_64)*([0] + [16]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [1]
	if ( ((uint_64)*([0] + [32]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [2]
	if ( ((uint_64)*([0] + [48]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [3]
	if ( ((uint_64)*([0] + [64]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [4]
	if ( ((uint_64)*([0] + [80]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [5]
	if ( ((uint_64)*([0] + [96]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [6]
	if ( ((uint_64)*([0] + [112]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [7]
	if ( ((uint_64)*([0] + [128]) > (uint_64)$1) ){ goto $label$2 }
	$3 = (int_64)0
	$2 = [8]
	if ( ((uint_64)*([0] + [144]) <= (uint_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = *((($2 << [4]) + [24]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 != (int_64)0), [192])
	$4 = *([0] + [16])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [32])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [48])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [64])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [80])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [96])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [112])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [128])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$5 = (int_64)0
	$4 = *([0] + [144])
	if ( ((uint_64)$4 <= (uint_64)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = (int_64))($4 - $1)
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$5 != (int_64)0), [224])
	$4 = ((int_64)$5 * (int_64)$3)
	if ( ((uint_64)$4 >= (uint_64)$0) ){ goto $label$5 }
	return ((int_64)CALL _Z15get_new_key_numyy((int_64))($0 - $4), ((int_64)$5 + (int_64)$1)) + (int_64)$5)
	
.LABEL $label$5
	return ((uint_64)$0 / (uint_64)$3)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _Z13get_new_pricey (int_64 $0)
{
	int_32 $1
	int_64 $2
	$1 = [0]
	if ( ((uint_64)*([0] + [16]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [1]
	if ( ((uint_64)*([0] + [32]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [2]
	if ( ((uint_64)*([0] + [48]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [3]
	if ( ((uint_64)*([0] + [64]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [4]
	if ( ((uint_64)*([0] + [80]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [5]
	if ( ((uint_64)*([0] + [96]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [6]
	if ( ((uint_64)*([0] + [112]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [7]
	if ( ((uint_64)*([0] + [128]) > (uint_64)$0) ){ goto $label$2 }
	$2 = (int_64)0
	$1 = [8]
	if ( ((uint_64)*([0] + [144]) <= (uint_64)$0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = *((($1 << [4]) + [24]))
	
.LABEL $label$1
	return $2
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $46(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $50($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $47($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $47($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN11win_diamond2onERKN5eosio8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	float_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	float_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	$30 = (*([0] + [4]) - [128])
	*([0] + [4]) = $30
	CALL _ZN11win_diamond4pingEv($0)
	if ( ((int_64)*($1) == (int_64)*($0 + [8])) ){ goto $label$1 }
	$11 = (int_64)0
	$20 = (int_64)59
	$28 = [656]
	$21 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$11 > (uint_64)(int_64)10) ){ goto $label$7 }
	$14 = *($28)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$14 = ($14 + [165])
	goto $label$5 
	
.LABEL $label$7
	$22 = (int_64)0
	if ( ((int_64)$11 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$3
	$28 = ($28 + [1])
	$20 = ((int_64)$20 + (int_64)-5)
	$21 = ((int_64)$22 | (int_64)$21)
	$11 = ((int_64)$11 + (int_64)1)
	if ( ((int_64)$11 != (int_64)13) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$21 == (int_64)$2), [752])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*(($0 + [8]))), [784])
	$28 = ($1 + [24])
	CALL eosio_assert(((int_64)*($28) == (int_64)1397703940), [1408])
	$29 = ($1 + [16])
	$14 = [0]
	if ( ((uint_64)((int_64)*($1 + [16]) + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$8 }
	$11 = (uint_64)*($28) >> (uint_64)(int_64)8)
	$28 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$28 = ($28 + [1])
	if ( ((int_32)$28 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$14 = [1]
	$28 = ($28 + [1])
	if ( ((int_32)$28 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$14 = [0]
	
.LABEL $label$8
	CALL eosio_assert($14, [832])
	$20 = *($1)
	$2 = *($29)
	if ( ((int_64)$2 != (int_64)1) ){ goto $label$13 }
	$11 = *(($29 + [8]))
	*((($30 + [16]) + [8])) = $11
	$22 = *($29)
	*(($30 + [8])) = $11
	*($30 + [16]) = $22
	*($30 + [4]) = *($30 + [20])
	*($30) = *($30 + [16])
	CALL _ZN11win_diamond8withdrawEyN5eosio5assetE($0, $20, $30)
	goto $label$1 
	
.LABEL $label$13
	$3 = ($0 + [96])
	$4 = CALL $19($3, CALL $fimport$6(*($0 + [96]), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0))
	$11 = *($4 + [48])
	$21 = CALL _Z15get_new_key_numyy($2, $11)
	CALL eosio_assert(((int_64)$21 != (int_64)0), [864])
	$28 = [0]
	$11 = ((int_64)$21 + (int_64)$11)
	if ( ((uint_64)*([0] + [16]) > (uint_64)$11) ){ goto $label$15 }
	$28 = [1]
	if ( ((uint_64)*([0] + [32]) > (uint_64)$11) ){ goto $label$15 }
	$28 = [2]
	if ( ((uint_64)*([0] + [48]) > (uint_64)$11) ){ goto $label$15 }
	$28 = [3]
	if ( ((uint_64)*([0] + [64]) > (uint_64)$11) ){ goto $label$15 }
	$28 = [4]
	if ( ((uint_64)*([0] + [80]) > (uint_64)$11) ){ goto $label$15 }
	$28 = [5]
	if ( ((uint_64)*([0] + [96]) > (uint_64)$11) ){ goto $label$15 }
	$28 = [6]
	if ( ((uint_64)*([0] + [112]) > (uint_64)$11) ){ goto $label$15 }
	$28 = [7]
	if ( ((uint_64)*([0] + [128]) > (uint_64)$11) ){ goto $label$15 }
	$23 = (int_64)0
	$28 = [8]
	if ( ((uint_64)*([0] + [144]) <= (uint_64)$11) ){ goto $label$14 }
	
.LABEL $label$15
	$23 = *((($28 << [4]) + [24]))
	
.LABEL $label$14
	CALL eosio_assert(((int_64)$23 != (int_64)0), [192])
	$5 = ($0 + [56])
	$24 = (int_64)0
	$28 = ($0 + [64])
	$14 = CALL db_lowerbound_i64(*($0 + [56]), *($28), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$16 }
	CALL $20($5, $14)
	$24 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $2) * (float_64)(float_64)0.75))
	
.LABEL $label$16
	$28 = CALL db_lowerbound_i64(*($5), *($28), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$18 }
	$25 = ($0 + [40])
	$9 = ($0 + [44])
	$26 = ($0 + [16])
	$27 = CALL $20($5, $28)
	$8 = (($30 + [32]) + [16])
	$7 = (($30 + [32]) | [8])
	$6 = (CASTING float_64)(uint_64 $24)
	$15 = ($4 + [48])
	$16 = ($0 + [24])
	$17 = ($0 + [32])
	
.LOOP $label$19:
	$10 = ((float_64)(CASTING float_64)(uint_64 *($27 + [8])) / (float_64)(CASTING float_64)(uint_64 *($15)))
	$11 = *($27)
	$12 = *($25)
	$29 = *($9)
	if ( ((int_32)$29 == (int_32)$12) ){ goto $label$20 }
	$28 = ($29 + [-24])
	$13 = ([0] - $12)
	
.LOOP $label$21:
	if ( ((int_64)*(*($28)) == (int_64)$11) ){ goto $label$20 }
	$29 = $28
	$14 = ($28 + [-24])
	$28 = $14
	if ( ((int_32)($14 + $13) != (int_32)[-24]) ){ goto $label$21 }
	
.LABEL $label$20
	$10 = ((float_64)$6 * (float_64)$10)
	if ( ((int_32)$29 == (int_32)$12) ){ goto $label$24 }
	$28 = *(($29 + [-24]))
	CALL eosio_assert(((int_32)*($28 + [24]) == (int_32)$26), [256])
	if ( $28 ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$24
	$28 = CALL db_find_i64(*(($0 + [16])), *($16), (int_64)-3020380869172259840, $11)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$23 }
	$28 = CALL $9($26, $28)
	CALL eosio_assert(((int_32)*($28 + [24]) == (int_32)$26), [256])
	goto $label$22 
	
.LABEL $label$23
	$22 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*($26) == (int_64)CALL $fimport$2()), [896])
	*(($28 = CALL $46([40])) + [16]) = (int_64)0
	*($28 + [8]) = (int_64)0
	*($28 + [24]) = $26
	*($28) = *($27)
	CALL eosio_assert([1], [624])
	CALL memcpy(($30 + [32]), $28, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($7, ($28 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($8, ($28 + [16]), [8])
	$11 = *($28)
	$29 = CALL db_store_i64(*($16), (int_64)-3020380869172259840, $22, $11, ($30 + [32]), [24])
	*($28 + [28]) = $29
	if ( (uint_64)($11 <= *($17)) ){ goto $label$25 }
	*($17) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$25
	*($30 + [112]) = $28
	$11 = *($28)
	*($30 + [32]) = $11
	*($30 + [124]) = $29
	$14 = *(($0 + [44]))
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [48]))) ){ goto $label$27 }
	*($14 + [8]) = $11
	*($14 + [16]) = $29
	*($30 + [112]) = [0]
	*($14) = $28
	*($9) = ($14 + [24])
	goto $label$26 
	
.LABEL $label$27
	CALL $16($25, ($30 + [112]), ($30 + [32]), ($30 + [124]))
	
.LABEL $label$26
	$14 = *($30 + [112])
	*($30 + [112]) = [0]
	if ( ($14 == 0) ){ goto $label$22 }
	CALL $47($14)
	
.LABEL $label$22
	$22 = *(($0 + [8]))
	CALL eosio_assert(((int_32)$28 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($28 + [24]) == (int_32)$26), [448])
	CALL eosio_assert(((int_64)*($26) == (int_64)CALL $fimport$2()), [496])
	$11 = *($28)
	$18 = (CASTING float_64)(uint_64 *($28 + [8]))
	CALL eosio_assert(((float_64)((float_64)$10 + (float_64)$18) > (float_64)$18), [960])
	*($28 + [8]) = (Rounds 0)(((float_64)$10 + (float_64)(CASTING float_64)(uint_64 *($28 + [8]))))
	$18 = (CASTING float_64)(uint_64 *($28 + [16]))
	CALL eosio_assert(((float_64)((float_64)$10 + (float_64)$18) > (float_64)$18), [1008])
	*($28 + [16]) = (Rounds 0)(((float_64)$10 + (float_64)(CASTING float_64)(uint_64 *($28 + [16]))))
	CALL eosio_assert(((int_64)$11 == (int_64)*($28)), [560])
	CALL eosio_assert([1], [624])
	CALL memcpy(($30 + [32]), $28, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($7, ($28 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($8, ($28 + [16]), [8])
	CALL db_update_i64(*($28 + [28]), $22, ($30 + [32]), [24])
	if ( (uint_64)($11 <= *($17)) ){ goto $label$28 }
	*($17) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$28
	CALL eosio_assert([1], [1056])
	$28 = CALL db_next_i64(*($27 + [28]), ($30 + [32]))
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$17 }
	$27 = CALL $20($5, $28)
	goto $label$19 
	
.LABEL $label$18
	$25 = ($0 + [40])
	$9 = ($0 + [44])
	$26 = ($0 + [16])
	
.LABEL $label$17
	$11 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $2) * (float_64)(float_64)0.05))
	$27 = *($25)
	$29 = *($9)
	if ( ((int_32)$29 == (int_32)$27) ){ goto $label$29 }
	$28 = ($29 + [-24])
	$13 = ([0] - $27)
	
.LOOP $label$30:
	if ( ((int_64)*(*($28)) == (int_64)6138568449304330784) ){ goto $label$29 }
	$29 = $28
	$14 = ($28 + [-24])
	$28 = $14
	if ( ((int_32)($14 + $13) != (int_32)[-24]) ){ goto $label$30 }
	
.LABEL $label$29
	if ( ((int_32)$29 == (int_32)$27) ){ goto $label$34 }
	$28 = *(($29 + [-24]))
	CALL eosio_assert(((int_32)*($28 + [24]) == (int_32)$26), [256])
	if ( $28 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$28 = CALL db_find_i64(*($0 + [16]), *(($0 + [24])), (int_64)-3020380869172259840, (int_64)6138568449304330784)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$32 }
	$28 = CALL $9($26, $28)
	CALL eosio_assert(((int_32)*($28 + [24]) == (int_32)$26), [256])
	
.LABEL $label$33
	$14 = ($0 + [32])
	$12 = ($30 + [48])
	$17 = (($30 + [32]) | [8])
	$27 = ($30 + [32])
	goto $label$31 
	
.LABEL $label$32
	$2 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*($0 + [16]) == (int_64)CALL $fimport$2()), [896])
	*(($28 = CALL $46([40])) + [16]) = (int_64)0
	*($28 + [8]) = (int_64)0
	*($28 + [24]) = $26
	*($28) = (int_64)6138568449304330784
	CALL eosio_assert([1], [624])
	CALL memcpy(($30 + [32]), $28, [8])
	CALL eosio_assert([1], [624])
	$17 = (($30 + [32]) | [8])
	CALL memcpy($17, ($28 + [8]), [8])
	CALL eosio_assert([1], [624])
	$12 = (($30 + [32]) + [16])
	CALL memcpy($12, ($28 + [16]), [8])
	$22 = *($28)
	$13 = CALL db_store_i64(*(($0 + [24])), (int_64)-3020380869172259840, $2, $22, ($30 + [32]), [24])
	*($28 + [28]) = $13
	$14 = ($0 + [32])
	if ( (uint_64)($22 <= *($14)) ){ goto $label$35 }
	*($14) = ( (int_64)-2 ? ((int_64)$22 + (int_64)1) : ((uint_64)$22 > (uint_64)(int_64)-3) )
	
.LABEL $label$35
	*($30 + [112]) = $28
	$22 = *($28)
	*($30 + [32]) = $22
	*($30 + [124]) = $13
	$29 = *(($0 + [44]))
	if ( ((uint_32)$29 >= (uint_32)*(($0 + [48]))) ){ goto $label$37 }
	*($29 + [8]) = $22
	*($29 + [16]) = $13
	*($30 + [112]) = [0]
	*($29) = $28
	*($9) = ($29 + [24])
	goto $label$36 
	
.LABEL $label$37
	CALL $16(($0 + [40]), ($30 + [112]), ($30 + [32]), ($30 + [124]))
	
.LABEL $label$36
	$29 = *($30 + [112])
	*($30 + [112]) = [0]
	if ( ($29 == 0) ){ goto $label$38 }
	CALL $47($29)
	
.LABEL $label$38
	$27 = ($30 + [32])
	
.LABEL $label$31
	$2 = *(($0 + [8]))
	CALL eosio_assert(((int_32)$28 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($28 + [24]) == (int_32)$26), [448])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [496])
	$22 = *($28)
	$19 = *($28 + [8])
	CALL eosio_assert(((uint_64)((int_64)$19 + (int_64)$11) > (uint_64)$19), [1088])
	*($28 + [8]) = ((int_64)*($28 + [8]) + (int_64)$11)
	$19 = *($28 + [16])
	CALL eosio_assert(((uint_64)((int_64)$19 + (int_64)$11) > (uint_64)$19), [1136])
	*($28 + [16]) = ((int_64)*($28 + [16]) + (int_64)$11)
	CALL eosio_assert(((int_64)$22 == (int_64)*($28)), [560])
	CALL eosio_assert([1], [624])
	CALL memcpy($27, $28, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($17, ($28 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($12, ($28 + [16]), [8])
	CALL db_update_i64(*($28 + [28]), $2, $27, [24])
	if ( (uint_64)($22 <= *(($0 + [32]))) ){ goto $label$39 }
	*($14) = ( (int_64)-2 ? ((int_64)$22 + (int_64)1) : ((uint_64)$22 > (uint_64)(int_64)-3) )
	
.LABEL $label$39
	$26 = *(($0 + [80]))
	$29 = *(($0 + [84]))
	if ( ((int_32)$29 == (int_32)$26) ){ goto $label$40 }
	$28 = ($29 + [-24])
	$13 = ([0] - $26)
	
.LOOP $label$41:
	if ( ((int_64)*(*($28)) == (int_64)$20) ){ goto $label$40 }
	$29 = $28
	$14 = ($28 + [-24])
	$28 = $14
	if ( ((int_32)($14 + $13) != (int_32)[-24]) ){ goto $label$41 }
	
.LABEL $label$40
	if ( ((int_32)$29 == (int_32)$26) ){ goto $label$45 }
	$28 = *(($29 + [-24]))
	CALL eosio_assert(((int_32)*($28 + [24]) == (int_32)$5), [256])
	if ( $28 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$28 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030912129153084416, $20)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$43 }
	$28 = CALL $20($5, $28)
	CALL eosio_assert(((int_32)*($28 + [24]) == (int_32)$5), [256])
	
.LABEL $label$44
	$29 = ($0 + [72])
	goto $label$42 
	
.LABEL $label$43
	$2 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [896])
	*(($28 = CALL $46([40])) + [16]) = (int_64)0
	*($28 + [8]) = (int_64)0
	*($28 + [24]) = $5
	*($28) = $20
	CALL eosio_assert([1], [624])
	CALL memcpy($27, $28, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($17, ($28 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($12, ($28 + [16]), [8])
	$22 = *($28)
	$13 = CALL db_store_i64(*(($0 + [64])), (int_64)-6030912129153084416, $2, $22, $27, [24])
	*($28 + [28]) = $13
	$29 = ($0 + [72])
	if ( (uint_64)($22 <= *($29)) ){ goto $label$46 }
	*($29) = ( (int_64)-2 ? ((int_64)$22 + (int_64)1) : ((uint_64)$22 > (uint_64)(int_64)-3) )
	
.LABEL $label$46
	*($30 + [112]) = $28
	$22 = *($28)
	*($30 + [32]) = $22
	*($30 + [124]) = $13
	$26 = ($0 + [84])
	$14 = *($26)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [88]))) ){ goto $label$48 }
	*($14 + [8]) = $22
	*($14 + [16]) = $13
	*($30 + [112]) = [0]
	*($14) = $28
	*($26) = ($14 + [24])
	goto $label$47 
	
.LABEL $label$48
	CALL $21(($0 + [80]), ($30 + [112]), ($30 + [32]), ($30 + [124]))
	
.LABEL $label$47
	$14 = *($30 + [112])
	*($30 + [112]) = [0]
	if ( ($14 == 0) ){ goto $label$42 }
	CALL $47($14)
	
.LABEL $label$42
	$14 = ($0 + [8])
	$2 = *($14)
	CALL eosio_assert(((int_32)$28 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($28 + [24]) == (int_32)$5), [448])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [496])
	$22 = *($28)
	$19 = *($28 + [8])
	CALL eosio_assert(((uint_64)((int_64)$19 + (int_64)$21) > (uint_64)$19), [1184])
	*($28 + [8]) = ((int_64)*($28 + [8]) + (int_64)$21)
	$19 = *($28 + [16])
	CALL eosio_assert(((uint_64)((int_64)*($1 + [16]) + (int_64)$19) > (uint_64)$19), [1232])
	*($28 + [16]) = ((int_64)*($28 + [16]) + (int_64)*($1 + [16]))
	CALL eosio_assert(((int_64)$22 == (int_64)*($28)), [560])
	CALL eosio_assert([1], [624])
	CALL memcpy($27, $28, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($17, ($28 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($12, ($28 + [16]), [8])
	CALL db_update_i64(*($28 + [28]), $2, $27, [24])
	if ( (uint_64)($22 <= *(($0 + [72]))) ){ goto $label$49 }
	*($29) = ( (int_64)-2 ? ((int_64)$22 + (int_64)1) : ((uint_64)$22 > (uint_64)(int_64)-3) )
	
.LABEL $label$49
	$2 = *($14)
	CALL eosio_assert([1], [400])
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$3), [448])
	CALL eosio_assert(((int_64)*(($0 + [96])) == (int_64)CALL $fimport$2()), [496])
	*($4 + [8]) = $20
	$22 = *($4)
	$20 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($4 + [16]) = $20
	$19 = ((int_64)*($4 + [24]) + (int_64)3600)
	$20 = ((int_64)$20 + (int_64)86400)
	*($4 + [24]) = ( $20 ? $19 : (uint_64)($20 <= $19) )
	$20 = *($4 + [32])
	$28 = ($1 + [16])
	CALL eosio_assert(((uint_64)((int_64)*($28) + (int_64)$20) > (uint_64)$20), [1280])
	$20 = *($28)
	*($4 + [32]) = ((int_64)*($4 + [32]) + (int_64)$20)
	$11 = ((int_64)$24 + (int_64)$11)
	$19 = *($4 + [40])
	CALL eosio_assert(((uint_64)((int_64)$20 + (int_64))($19 - $11)) > (uint_64)$19), [1328])
	*($4 + [40]) = ((int_64))(*($28) - $11) + (int_64)*($4 + [40]))
	$28 = ($4 + [48])
	$11 = *($28)
	CALL eosio_assert(((uint_64)((int_64)$11 + (int_64)$21) > (uint_64)$11), [1360])
	*($4 + [56]) = $23
	*($28) = ((int_64)*($28) + (int_64)$21)
	CALL eosio_assert(((int_64)$22 == (int_64)*($4)), [560])
	*($30 + [120]) = (($30 + [32]) + [72])
	*($30 + [116]) = ($30 + [32])
	*($30 + [112]) = ($30 + [32])
	CALL $22(($30 + [112]), $4)
	CALL db_update_i64(*($4 + [76]), $2, ($30 + [32]), [72])
	$28 = ($0 + [112])
	if ( (uint_64)($22 <= *($28)) ){ goto $label$1 }
	*($28) = ( (int_64)-2 ? ((int_64)$22 + (int_64)1) : ((uint_64)$22 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($30 + [128])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $46($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $50($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $47($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $15(*($1), ($0 + [32]))
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $10($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [624])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [624])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $14(CALL $13($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [624])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [624])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [624])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $37($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $49($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $46($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $49($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $47($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $48($7)
	return (unreachable)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1856])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $10($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [736])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [736])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $36($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [736])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1760])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1824])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $35($6, $0)
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN11win_diamond8maintainEv (int_32 $0)
{
	CALL require_auth(*($0 + [8]))
}

void .FUNC _ZN11win_diamond5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [672]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $32(($9 + [64]))
	CALL _ZN11win_diamond2onERKN5eosio8currency8transferEy($0, ($9 + [64]), $1)
	if ( ((*($9 + [96]) & [1]) == 0) ){ goto $label$7 }
	CALL $47(*(($9 + [104])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0 + [8]) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)6182744098496053247) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-7954134735498772480) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-6077959540857372672) ){ goto $label$7 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [1]
	*($9) = *($9 + [56])
	CALL $33($0, $9)
	goto $label$7 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)6182744098496053248) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)7746191359077253120) ){ goto $label$7 }
	*($9 + [52]) = [0]
	*($9 + [48]) = [2]
	*($9 + [8 align=4]) = *($9 + [48])
	CALL $34($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [36]) = [0]
	*($9 + [32]) = [3]
	*($9 + [24 align=4]) = *($9 + [32])
	CALL $33($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [44]) = [0]
	*($9 + [40]) = [4]
	*($9 + [16 align=4]) = *($9 + [40])
	CALL $33($0, ($9 + [16]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [112])
}

void .FUNC $50 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	CALL _ZN11win_diamond5applyEyy(CALL $39(($3 + [8]), $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $53 ()
{
	(unreachable)
}